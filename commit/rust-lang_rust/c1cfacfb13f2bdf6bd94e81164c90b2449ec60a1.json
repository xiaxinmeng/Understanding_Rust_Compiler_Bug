{"sha": "c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxY2ZhY2ZiMTNmMmJkZjZiZDk0ZTgxMTY0YzkwYjI0NDllYzYwYTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-11T20:18:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-11T20:18:35Z"}, "message": "Update NLL tests", "tree": {"sha": "bcea2c225e57ee199985f3128dacb9b25cf1a766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcea2c225e57ee199985f3128dacb9b25cf1a766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "html_url": "https://github.com/rust-lang/rust/commit/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa72a81bea27f1fda4287475e4cc2f684c971e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa72a81bea27f1fda4287475e4cc2f684c971e7f", "html_url": "https://github.com/rust-lang/rust/commit/fa72a81bea27f1fda4287475e4cc2f684c971e7f"}], "stats": {"total": 1588, "additions": 794, "deletions": 794}, "files": [{"sha": "983062e450ea7573aefdc385ea598b1bcd508363", "filename": "src/test/ui/E0508.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2FE0508.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2FE0508.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508.rs:5:18\n    |\n-LL |     let _value = array[0];  //~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "713eeba5459772a8778f09ab7427a67db4e0eb86", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n-LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+LL |         match *s { S(v) => v }\n    |               ^^     - data moved here\n    |               |\n    |               cannot move out of borrowed content\n@@ -10,7 +10,7 @@ LL |         match *s { S(v) => v } //~ ERROR cannot move out\n note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n   --> $DIR/access-mode-in-closures.rs:8:22\n    |\n-LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+LL |         match *s { S(v) => v }\n    |                      ^\n \n error: aborting due to previous error"}, {"sha": "840e33b4b8a8e900cedd6b87f1794cfd10434097", "filename": "src/test/ui/associated-types/associated-types-outlives.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |         's: loop { y = denormalise(&x); break }\n    |                                    -- borrow of `x` occurs here\n-LL |         drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+LL |         drop(x);\n    |              ^ move out of `x` occurs here\n LL |         return f(y);\n    |                  - borrow later used here"}, {"sha": "08f06e90162b4935c2d774059784b08e17cec68b", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,14 +1,14 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/augmented-assignments.rs:16:5\n    |\n-LL |       x   //~ error: use of moved value: `x`\n+LL |       x\n    |       -\n    |       |\n    |  _____borrow of `x` occurs here\n    | |\n-LL | |     //~^ value used here after move\n+LL | |\n LL | |     +=\n-LL | |     x;  //~ value moved here\n+LL | |     x;\n    | |     ^\n    | |     |\n    | |_____move out of `x` occurs here\n@@ -20,7 +20,7 @@ error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n LL |     let y = Int(2);\n    |         - help: consider changing this to be mutable: `mut y`\n ...\n-LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+LL |     y\n    |     ^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors"}, {"sha": "5751af27fcb424109c7bb739b9e928a09d1d1f78", "filename": "src/test/ui/binop/binop-consume-args.nll.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -7,7 +7,7 @@ LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs + rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -19,8 +19,8 @@ LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs + rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -32,7 +32,7 @@ LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs - rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -44,8 +44,8 @@ LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs - rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -57,7 +57,7 @@ LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs * rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -69,8 +69,8 @@ LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs * rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -82,7 +82,7 @@ LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs / rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -94,8 +94,8 @@ LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs / rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -107,7 +107,7 @@ LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs % rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -119,8 +119,8 @@ LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs % rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -132,7 +132,7 @@ LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n    |           consider adding a `Copy` constraint to this type argument\n LL |     lhs & rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -144,8 +144,8 @@ LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                    consider adding a `Copy` constraint to this type argument\n LL |     lhs & rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -157,7 +157,7 @@ LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |          consider adding a `Copy` constraint to this type argument\n LL |     lhs | rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -169,8 +169,8 @@ LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                  consider adding a `Copy` constraint to this type argument\n LL |     lhs | rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -182,7 +182,7 @@ LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n    |           consider adding a `Copy` constraint to this type argument\n LL |     lhs ^ rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -194,8 +194,8 @@ LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                    consider adding a `Copy` constraint to this type argument\n LL |     lhs ^ rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -207,7 +207,7 @@ LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs << rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -219,8 +219,8 @@ LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs << rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `lhs`\n@@ -232,7 +232,7 @@ LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     lhs >> rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n \n error[E0382]: use of moved value: `rhs`\n@@ -244,8 +244,8 @@ LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs >> rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n \n error: aborting due to 20 previous errors"}, {"sha": "7d54de655bf58505def1dffaa56f4a941646249b", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -8,7 +8,7 @@ LL | fn double_move<T: Add<Output=()>>(x: T) {\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x;  //~ ERROR: use of moved value\n+LL |     x;\n    |     ^ value used here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -21,7 +21,7 @@ LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x.clone();  //~ ERROR: use of moved value\n+LL |     x.clone();\n    |     ^ value borrowed here after move\n \n error[E0505]: cannot move out of `x` because it is borrowed\n@@ -30,7 +30,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n LL |     let m = &x;\n    |             -- borrow of `x` occurs here\n ...\n-LL |     x  //~ ERROR: cannot move out of `x` because it is borrowed\n+LL |     x\n    |     ^ move out of `x` occurs here\n ...\n LL |     use_mut(n); use_imm(m);\n@@ -42,21 +42,21 @@ error[E0505]: cannot move out of `y` because it is borrowed\n LL |     let n = &mut y;\n    |             ------ borrow of `y` occurs here\n ...\n-LL |     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+LL |     y;\n    |     ^ move out of `y` occurs here\n LL |     use_mut(n); use_imm(m);\n    |             - borrow later used here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n-LL |     *m  //~ ERROR: cannot move out of borrowed content\n+LL |     *m\n    |     ^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:32:5\n    |\n-LL |     *n;  //~ ERROR: cannot move out of borrowed content\n+LL |     *n;\n    |     ^^ cannot move out of borrowed content\n \n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n@@ -68,7 +68,7 @@ LL |       &mut f\n    |  _____mutable borrow occurs here\n    | |\n LL | |     +\n-LL | |     &f;  //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n+LL | |     &f;\n    | |     ^-\n    | |_____||\n    |       |mutable borrow later used here\n@@ -83,7 +83,7 @@ LL |       &f\n    |  _____immutable borrow occurs here\n    | |\n LL | |     +\n-LL | |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also borrowed as immutable\n+LL | |     &mut f;\n    | |     ^^^^^-\n    | |_____|____|\n    |       |    immutable borrow later used here"}, {"sha": "af45c8a980dfc58733f3e9a0d5382b365b812d0e", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,73 +1,73 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                           ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                        ^^^^^^^^^\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                               ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                        ^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                       ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                    ^^^^^^^^^\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                                ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                        ^^^^^^^^^^^^^^\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:36\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                                    ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                        ^^^^^^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                                 ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                         ^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "5c40555c501cb5754c8a9452366f9db76a99eadd", "filename": "src/test/ui/borrowck/borrow-tuple-fields.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |             ---- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL | \n LL |     r.use_ref();\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immu\n    |\n LL |     let a = &x.0;\n    |             ---- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n    |     - immutable borrow later used here\n@@ -24,7 +24,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |             -------- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_ref();\n    |     - first borrow later used here\n@@ -34,7 +34,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |             ---- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL |     r.use_ref();\n    |     - borrow later used here\n@@ -44,7 +44,7 @@ error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immu\n    |\n LL |     let a = &x.0;\n    |             ---- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n    |     - immutable borrow later used here\n@@ -54,7 +54,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |             -------- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n    |     - first borrow later used here"}, {"sha": "2db075194810e122f754aa3226b114593ae85832", "filename": "src/test/ui/borrowck/borrowck-and-init.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "7a959fb6ec62f621948bf9241c809a0bdc767cf4", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         Y(ref mut a, _) => a\n    |           --------- first mutable borrow occurs here\n ...\n-LL |         Y(ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         Y(ref mut b, _) => b\n    |           ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;"}, {"sha": "88a8867f5ee080cd8415f038716f43a9f2c1819f", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         (ref mut a, _) => a\n    |          --------- first mutable borrow occurs here\n ...\n-LL |         (ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         (ref mut b, _) => b\n    |          ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;"}, {"sha": "6c8a32ee39167765c609ec0c92c58ac614237ff5", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -19,7 +19,7 @@ error[E0503]: cannot use `y` because it was mutably borrowed\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- borrow of `y.0` occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+LL |       Foo::Y(ref mut b, _) => b,\n    |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n ...\n LL |     *a += 1;\n@@ -31,7 +31,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+LL |       Foo::Y(ref mut b, _) => b,\n    |              ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;"}, {"sha": "cf15833140927640657e04bd698e7709342a4b71", "filename": "src/test/ui/borrowck/borrowck-argument.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,29 +3,29 @@ error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n    |\n LL | fn func(arg: S) {\n    |         --- help: consider changing this to be mutable: `mut arg`\n-LL |     arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |     arg.mutate();\n    |     ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n LL |     fn method(&self, arg: S) {\n    |                      --- help: consider changing this to be mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n LL |     fn default(&self, arg: S) {\n    |                       --- help: consider changing this to be mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n-LL |     (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+LL |     (|arg: S| { arg.mutate() })(s);\n    |       ---       ^^^ cannot borrow as mutable\n    |       |\n    |       help: consider changing this to be mutable: `mut arg`"}, {"sha": "93f1d8c5258632a07285553f9d90412b8c58b17c", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n LL |     let q: &isize = &p[0];\n    |                      - immutable borrow occurs here\n LL | \n-LL |     p[0] = 5; //~ ERROR cannot borrow\n+LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n LL | \n LL |     println!(\"{}\", *q);\n@@ -17,7 +17,7 @@ LL |     borrow(\n    |     ------ immutable borrow later used by call\n LL |         &p,\n    |         -- immutable borrow occurs here\n-LL |         || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n+LL |         || p[0] = 5);\n    |         ^^ - second borrow occurs due to use of `p` in closure\n    |         |\n    |         mutable borrow occurs here"}, {"sha": "d8ccf36852a512a206caf90411db783dad2a6e13", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,15 +3,15 @@ error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n    |\n LL | fn a(s: &S) {\n    |         -- help: consider changing this to be a mutable reference: `&mut S<'_>`\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n    |\n LL | fn c(s: & &mut S) {\n    |         -------- help: consider changing this to be a mutable reference: `&mut &mut S<'_>`\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 2 previous errors"}, {"sha": "0aacaf9cf4797fe1f47ef60a1fa66a38d46f97de", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n    |                                   ------ borrow of `y` occurs here\n-LL |         *y.pointer += 1; //~ ERROR cannot assign\n+LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n@@ -13,7 +13,7 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n    |                                   ------ borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1; //~ ERROR cannot assign\n+LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here"}, {"sha": "3ed76c13f6a7bf0370cd20c6888ea17e5d4fc4a5", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL |     let x = Foo { x: 3 };\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.printme();    //~ ERROR cannot borrow\n+LL |     x.printme();\n    |     ^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "c2dfb687e8ee9ccc3e22ee1407c5ffdd34cfc989", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     (&mut x).with(\n    |     -------- ---- first borrow later used by call\n    |     |\n    |     first mutable borrow occurs here\n-LL |         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |         |opt| {\n    |         ^^^^^ second mutable borrow occurs here\n ...\n LL |                     x = X(Either::Left((0, 0)));"}, {"sha": "e273a778fdad5d614cba07f5531188a807c18c95", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     add(\n    |     --- immutable borrow later used by call\n LL |         &*a,\n    |         --- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                 ^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n@@ -15,7 +15,7 @@ LL |     add(\n    |     --- immutable borrow later used by call\n LL |         &*a,\n    |         --- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                 ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "371bcf2b69cf847d1b6d0b912a7875a4e529c30f", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     add(\n    |     --- borrow later used by call\n LL |         &*a,\n    |         --- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error[E0505]: cannot move out of `a` because it is borrowed\n@@ -15,7 +15,7 @@ LL |     add(\n    |     --- borrow later used by call\n LL |         &*a,\n    |         --- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "d2a49962bafca7d0f36ed941e5b8bdb538229bed", "filename": "src/test/ui/borrowck/borrowck-block-unint.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n-LL |     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n+LL |     force(|| {\n    |           ^^ use of possibly uninitialized `x`\n LL |         println!(\"{}\", x);\n    |                        - borrow occurs due to use in closure"}, {"sha": "ad6bd7dc942620cccf01df537ebfd18c9855ee56", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -45,9 +45,9 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &*foo;\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n \n@@ -56,8 +56,8 @@ error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as m\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                 ^^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -67,7 +67,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -77,7 +77,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -87,7 +87,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as imm\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -107,7 +107,7 @@ error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as m\n    |\n LL |     let foo = make_foo();\n    |         --- help: consider changing this to be mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 11 previous errors"}, {"sha": "b5c618479187590323fbd285ee08cacfa35dd797", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -45,9 +45,9 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &foo;\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n \n@@ -56,8 +56,8 @@ error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mu\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &foo;\n    |                 ^^^^ immutable borrow occurs here\n LL |     *bar1;\n    |     ----- mutable borrow later used here\n@@ -67,7 +67,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -77,7 +77,7 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                 ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n    |     ----- first borrow later used here\n@@ -87,7 +87,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immu\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                 ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n    |     ----- immutable borrow later used here\n@@ -107,7 +107,7 @@ error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as m\n    |\n LL |     let foo = make_foo();\n    |         --- help: consider changing this to be mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 11 previous errors"}, {"sha": "71bf052c93d616433e96e4682e3081b7d251e9ca", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/borrowck-borrow-from-temporary.rs:10:5\n    |\n-LL |     let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n+LL |     let &Foo(ref x) = &id(Foo(3));\n    |                        ---------- temporary value created here\n LL |     x\n    |     ^ returns a value referencing data owned by the current function"}, {"sha": "7c1c063d260b2c38fdcb31b3942ff32c6b7b7084", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,15 +4,15 @@ error[E0594]: cannot assign to `**t1` which is behind a `&` reference\n LL |     let t1 = t0;\n    |         -- help: consider changing this to be a mutable reference: `&mut &mut isize`\n LL |     let p: &isize = &**t0;\n-LL |     **t1 = 22; //~ ERROR cannot assign\n+LL |     **t1 = 22;\n    |     ^^^^^^^^^ `t1` is a `&` reference, so the data it refers to cannot be written\n \n error[E0502]: cannot borrow `**t0` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:21\n    |\n LL |     let t1 = &mut *t0;\n    |              -------- mutable borrow occurs here\n-LL |     let p: &isize = &**t0; //~ ERROR cannot borrow\n+LL |     let p: &isize = &**t0;\n    |                     ^^^^^ immutable borrow occurs here\n LL |     **t1 = 22;\n    |     --------- mutable borrow later used here\n@@ -22,7 +22,7 @@ error[E0596]: cannot borrow `**t0` as mutable, as it is behind a `&` reference\n    |\n LL | fn foo4(t0: & &mut isize) {\n    |             ------------ help: consider changing this to be a mutable reference: `&mut &mut isize`\n-LL |     let x:  &mut isize = &mut **t0; //~ ERROR cannot borrow\n+LL |     let x:  &mut isize = &mut **t0;\n    |                          ^^^^^^^^^ `t0` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 3 previous errors"}, {"sha": "fa0ae318e72cd2ce7d2cd77cfa424504602e99c7", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n    |\n LL |     let y = x.f1();\n    |             - first mutable borrow occurs here\n-LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n+LL |     x.f2();\n    |     ^ second mutable borrow occurs here\n LL |     y.use_ref();\n    |     - first borrow later used here"}, {"sha": "4fc320c50594718936f539d12aa20c3aff14bbda", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,85 +1,85 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:19\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                   ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:19\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                   ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:5\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:5\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:67:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:71:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:75:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:83:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:87:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:95:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:99:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:103:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:107:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:111:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error: aborting due to 14 previous errors"}, {"sha": "cc4d91a58e937ffba3a0065b24bd327f14aa2683", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,43 +1,43 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:23:19\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                   ^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:27:19\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                   ^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:35:5\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:39:5\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:43:5\n    |\n-LL |     *x = 3; //~ ERROR cannot assign\n+LL |     *x = 3;\n    |     ^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:47:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:51:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot assign\n \n error: aborting due to 7 previous errors"}, {"sha": "1dd18c12fc8de4c18c4642965ec1921ab8066deb", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:20:20\n    |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n+LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                    |\n    |                    creates a temporary which is freed while still in use"}, {"sha": "c91a4377b4c67c4b32710033dc4389be23b806f7", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:28\n    |\n-LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n+LL |     buggy_map.insert(42, &*Box::new(1));\n    |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                            |\n    |                            creates a temporary which is freed while still in use"}, {"sha": "e40d8d9dfccb9e8ff52fd277c97dd9c6ee5f3c8d", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "bbf9b9f1241a26ab344ec85ccca53c1d33112e16", "filename": "src/test/ui/borrowck/borrowck-break-uninit.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "0064417c57bf9aa64f80fb00b9b2d64a566ed731", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -17,7 +17,7 @@ LL |     let mut c1 = || set(&mut *x);\n    |                  --           - first borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n-LL |     //~^ ERROR cannot borrow\n+LL |\n LL |     let mut c2 = || set(&mut *x);\n    |                  ^^           - second borrow occurs due to use of `x` in closure\n    |                  |"}, {"sha": "471173e595f4793cf3eec4844783c114a18d600f", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -9,7 +9,7 @@ LL |     let mut c2 = || set(&mut *x);\n    |                  ^^           - second borrow occurs due to use of `x` in closure\n    |                  |\n    |                  second closure is constructed here\n-LL |     //~^ ERROR two closures require unique access to `x` at the same time\n+LL |\n LL |     c2(); c1();\n    |           -- first borrow later used here\n "}, {"sha": "07f477d17868f8a4689f108eafcbe04989524c61", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -33,7 +33,7 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -51,7 +51,7 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     c1;\n    |     -- first borrow later used here\n \n@@ -66,7 +66,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     c1;\n    |     -- first borrow later used here\n "}, {"sha": "b8bbb31a3550f41c0f7d84740b15fb75b10df25d", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as i\n    |\n LL |         let p = &this.x;\n    |                 ------- immutable borrow occurs here\n-LL |         &mut this.x; //~ ERROR cannot borrow\n+LL |         &mut this.x;\n    |         ^^^^^^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n    |         - immutable borrow later used here"}, {"sha": "3106f36ac8ba99eb7bcb2c0defe7b4b46fe2f49f", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = || get(x);\n    |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || set(x);\n    |              ^^     - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -19,7 +19,7 @@ LL |     let c1 = || get(x);\n    |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || { get(x); set(x); };\n    |              ^^       - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -33,7 +33,7 @@ LL |     let c1 = || set(x);\n    |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              first closure is constructed here\n-LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+LL |     let c2 = || set(x);\n    |              ^^     - second borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n@@ -45,7 +45,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n    |\n LL | fn e(x: &'static mut isize) {\n    |      - help: consider changing this to be mutable: `mut x`\n-LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+LL |     let c1 = |y: &'static mut isize| x = y;\n    |                                      ^^^^^ cannot assign\n \n error: aborting due to 4 previous errors"}, {"sha": "a6dbcf36077a728b704effd7ccff75c735edcb37", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |   let mut test = |foo: &Foo| {\n LL |     ptr = box Foo { x: ptr.x + 1 };\n    |     --- first borrow occurs due to use of `ptr` in closure\n LL |   };\n-LL |   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n+LL |   test(&*ptr);\n    |   ---- ^^^^^ immutable borrow occurs here\n    |   |\n    |   mutable borrow later used by call"}, {"sha": "c69237fa95f6571522bd96b047fce882a8523233", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(b: Box<[i32;5]>) {\n    |        - move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "e8194ad69440367fac754a0b8479a9e19de7978a", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(b: Box<Foo+Send>) {\n    |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "b3451659bec5a7ca1085c6e267874c5e19e2901f", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let y = A { a: 3, .. x };\n    |             ---------------- value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ error[E0382]: borrow of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |             ^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: borrow of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |              ---------------- value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |             ^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -43,7 +43,7 @@ error[E0505]: cannot move out of `x.b` because it is borrowed\n    |\n LL |     let p = &x.b;\n    |             ---- borrow of `x.b` occurs here\n-LL |     drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     drop(x.b);\n    |          ^^^ move out of `x.b` occurs here\n LL |     drop(**p);\n    |          --- borrow later used here\n@@ -53,7 +53,7 @@ error[E0505]: cannot move out of `x.b` because it is borrowed\n    |\n LL |     let p = &x.b;\n    |             ---- borrow of `x.b` occurs here\n-LL |     let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     let _y = A { a: 3, .. x };\n    |              ^^^^^^^^^^^^^^^^ move out of `x.b` occurs here\n LL |     drop(**p);\n    |          --- borrow later used here\n@@ -63,7 +63,7 @@ error[E0499]: cannot borrow `x.a` as mutable more than once at a time\n    |\n LL |     let p = &mut x.a;\n    |             -------- first mutable borrow occurs here\n-LL |     let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n+LL |     let q = &mut x.a;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     drop(*p);\n    |          -- first borrow later used here\n@@ -73,7 +73,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -83,7 +83,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |              ---------------- value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -93,7 +93,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let _z = A { a: 3, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 3, .. x };\n    |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -103,7 +103,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |              ---------------- value moved here\n-LL |     let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 4, .. x };\n    |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait"}, {"sha": "d48866dce04238de37a3a24ff0792bd885073c47", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/borrowck-fn-in-const-c.rs:17:16\n    |\n-LL |         return &local.inner; //~ ERROR does not live long enough\n+LL |         return &local.inner;\n    |                ^^^^^^^^^^^^ returning this value requires that `local.inner` is borrowed for `'static`\n LL |     }\n    |     - here, drop of `local` needs exclusive access to `local.inner`, because the type `DropString` implements the `Drop` trait"}, {"sha": "08cafa7da7aa893d897703a3d736a4008abe0112", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:15\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         --    ^^^^^^^^ cannot move out of borrowed content\n    |         ||\n    |         |data moved here\n@@ -10,13 +10,13 @@ LL |     for &a in x.iter() {    //~ ERROR cannot move out\n note: move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:10\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |          ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:15\n    |\n-LL |     for &a in &f.a {  //~ ERROR cannot move out\n+LL |     for &a in &f.a {\n    |         --    ^^^^ cannot move out of borrowed content\n    |         ||\n    |         |data moved here\n@@ -25,13 +25,13 @@ LL |     for &a in &f.a {  //~ ERROR cannot move out\n note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:10\n    |\n-LL |     for &a in &f.a {  //~ ERROR cannot move out\n+LL |     for &a in &f.a {\n    |          ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         --    ^^^^^^^^ cannot move out of borrowed content\n    |         ||\n    |         |data moved here\n@@ -40,7 +40,7 @@ LL |     for &a in x.iter() {    //~ ERROR cannot move out\n note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |          ^\n \n error: aborting due to 3 previous errors"}, {"sha": "f47dce453696e59f1b43f2c4dd4bc0657ca5b745", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -7,7 +7,7 @@ LL |     for &x in &vector {\n    |               immutable borrow occurs here\n    |               immutable borrow later used here\n LL |         let cap = vector.capacity();\n-LL |         vector.extend(repeat(0));      //~ ERROR cannot borrow\n+LL |         vector.extend(repeat(0));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n@@ -19,7 +19,7 @@ LL |     for &x in &vector {\n    |               immutable borrow occurs here\n    |               immutable borrow later used here\n ...\n-LL |         vector[1] = 5;   //~ ERROR cannot borrow\n+LL |         vector[1] = 5;\n    |         ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "da639a837aa5096db8da86093fc5d42fd33ff716", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of captured variable in an `Fn` closure\n    |\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n-LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+LL |     Box::new(|| x)\n    |                 ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "b004447bf45fb7c53b07edb6b6f06f0cd0dcdbad", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     f.foo(\n    |     ^ --- first borrow later used by call\n    |  ___|\n    | |\n-LL | |         |a| { //~ ERROR closure requires unique access to `f`\n+LL | |         |a| {\n    | |         --- closure construction occurs here\n LL | |             f.n.insert(*a);\n    | |             - first borrow occurs due to use of `f` in closure\n@@ -19,7 +19,7 @@ LL |   f.foo(\n    |   - --- first borrow later used by call\n    |   |\n    |   borrow occurs here\n-LL |         |a| { //~ ERROR closure requires unique access to `f`\n+LL |         |a| {\n    |         ^^^ closure construction occurs here\n LL |             f.n.insert(*a);\n    |             - second borrow occurs due to use of `f` in closure"}, {"sha": "4ea4eb8f007591570b47b50e19289216795af7e1", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Some(ref _y) => {\n    |            ------ borrow of `x.0` occurs here\n-LL |         let _a = x; //~ ERROR cannot move\n+LL |         let _a = x;\n    |                  ^ move out of `x` occurs here\n LL |         _y.use_ref();\n    |         -- borrow later used here"}, {"sha": "4ef36df52df57371d03fcbd4459ee778ad81149c", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-issue-2657-2.rs:7:18\n    |\n-LL |         let _b = *y; //~ ERROR cannot move out\n+LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  cannot move out of borrowed content"}, {"sha": "68a82bdb57c5510d31e504d213a6fb94d26d4183", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immut\n LL |         _w = &v;\n    |              -- immutable borrow occurs here\n LL |     }\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n    |     -- immutable borrow later used here"}, {"sha": "07b11b3e7282824d0a138b6d087b597734cc54f6", "filename": "src/test/ui/borrowck/borrowck-lend-flow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immut\n    |\n LL |     let _w = &v;\n    |              -- immutable borrow occurs here\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n    |     -- immutable borrow later used here"}, {"sha": "615660febbce2e9b0914114de48ad134ed016201", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `v` because it is borrowed\n    |\n LL |     let w = &v;\n    |             -- borrow of `v` occurs here\n-LL |     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n+LL |     take(v);\n    |          ^ move out of `v` occurs here\n LL |     w.use_ref();\n    |     - borrow later used here"}, {"sha": "1d1522a15b1ed0ae19464da611137f6a3741e918", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     borrow(&*v,\n    |     ------ --- immutable borrow occurs here\n    |     |\n    |     immutable borrow later used by call\n-LL |            |w| { //~ ERROR cannot borrow `v` as mutable\n+LL |            |w| {\n    |            ^^^ mutable borrow occurs here\n LL |             v = box 4;\n    |             - second borrow occurs due to use of `v` in closure"}, {"sha": "6994c837dfcbe62eb98ae6b9fc4da1db692ae624", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let alias: &'static mut String = s;\n    |                |\n    |                type annotation requires that `*s` is borrowed for `'static`\n ...\n-LL |     *s = String::new(); //~ ERROR cannot assign\n+LL |     *s = String::new();\n    |     ^^ assignment to borrowed `*s` occurs here\n \n error: aborting due to previous error"}, {"sha": "ad74a89f6689cd74bf2c8255f82c608c8ebab517", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n LL |     let q = &mut p;\n    |             ------ borrow of `p` occurs here\n LL | \n-LL |     p + 3;  //~ ERROR cannot use `p`\n+LL |     p + 3;\n    |     ^ use of borrowed `p`\n ...\n LL |     *q + 3; // OK to use the new alias `q`\n@@ -16,7 +16,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n LL |     let q = &mut p;\n    |             ------ mutable borrow occurs here\n ...\n-LL |     p.times(3); //~ ERROR cannot borrow `p`\n+LL |     p.times(3);\n    |     ^ immutable borrow occurs here\n LL | \n LL |     *q + 3; // OK to use the new alias `q`"}, {"sha": "ec3edc80323f526400cc594d1857179ed0330256", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-rcvr.rs:23:14\n    |\n-LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n+LL |     p.blockm(|| {\n    |     - ------ ^^ mutable borrow occurs here\n    |     | |\n    |     | immutable borrow later used by call\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n    |\n LL |     let l = &mut p;\n    |             ------ mutable borrow occurs here\n-LL |     p.impurem(); //~ ERROR cannot borrow\n+LL |     p.impurem();\n    |     ^ immutable borrow occurs here\n LL | \n LL |     l.x += 1;"}, {"sha": "6691a2396a1da1365c4a3ff97a39f493208b137d", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     takes_imm_elt(\n    |     ------------- immutable borrow later used by call\n LL |         &v[0],\n    |          - immutable borrow occurs here\n-LL |         || { //~ ERROR cannot borrow `v` as mutable\n+LL |         || {\n    |         ^^ mutable borrow occurs here\n LL |             v[1] = 4;\n    |             - second borrow occurs due to use of `v` in closure"}, {"sha": "38f6ca7be752eb6d3090d0d64a9e84fe60df5458", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of captured variable in an `FnMut` closure\n LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n+LL |         let _h = to_fn_once(move || -> isize { *bar });\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n \n error: aborting due to previous error"}, {"sha": "25eb8d0134c30c6353d0bb1ba1c91acd369ff59b", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,12 +1,12 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n-LL |     match *f {             //~ ERROR cannot move out of\n+LL |     match *f {\n    |           ^^\n    |           |\n    |           cannot move out of borrowed content\n    |           help: consider removing the `*`: `f`\n-LL |                            //~| cannot move out\n+LL |\n LL |         Foo::Foo1(num1,\n    |                   ---- data moved here\n LL |                   num2) => (),\n@@ -46,12 +46,12 @@ LL |             g: _t\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:47:11\n    |\n-LL |     match a.a {           //~ ERROR cannot move out of\n+LL |     match a.a {\n    |           ^^^\n    |           |\n    |           cannot move out of borrowed content\n    |           help: consider borrowing here: `&a.a`\n-LL |                           //~| cannot move out\n+LL |\n LL |         n => {\n    |         - data moved here\n    |"}, {"sha": "e4840fba67299999f288548d5e0188e974e7efe4", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0505]: cannot move out of `*a` because it is borrowed\n LL |     let b = &a;\n    |             -- borrow of `a` occurs here\n LL | \n-LL |     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed\n+LL |     let z = *a;\n    |             ^^ move out of `*a` occurs here\n LL |     b.use_ref();\n    |     - borrow later used here"}, {"sha": "615e3fd180016e53d5f9e8754d4f176f81e22291", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n    |\n-LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n+LL |     let y = *x;\n    |             ^^\n    |             |\n    |             cannot move out of dereference of raw pointer"}, {"sha": "77f5b72e51c5dda8f90fad7d62537694f25052e5", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `t0` because it is borrowed\n    |\n LL |     let p: &isize = &*t0; // Freezes `*t0`\n    |                     ---- borrow of `*t0` occurs here\n-LL |     let t1 = t0;        //~ ERROR cannot move out of `t0`\n+LL |     let t1 = t0;\n    |              ^^ move out of `t0` occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();"}, {"sha": "51caf60da6e0e612a87bd47c0f5922e71ede0cc5", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -20,9 +20,9 @@ LL |                   Foo { string: b }] => {\n help: consider removing the `&`\n    |\n LL |                 [Foo { string: a },\n-LL |                 //~^ ERROR cannot move out of type `[Foo]`\n-LL |                 //~| cannot move out\n-LL |                 //~| to prevent move\n+LL |\n+LL |\n+LL |\n LL |                   Foo { string: b }] => {\n    |\n "}, {"sha": "8c9083fcf135642d2ad1da46bb79bc55fd67ff53", "filename": "src/test/ui/borrowck/borrowck-move-subcomponent.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `a.x` because it is borrowed\n    |\n LL |   let pb = &a;\n    |            -- borrow of `a` occurs here\n-LL |   let S { x: ax } = a;  //~ ERROR cannot move out\n+LL |   let S { x: ax } = a;\n    |              ^^ move out of `a.x` occurs here\n LL |   f(pb);\n    |     -- borrow later used here"}, {"sha": "32c7067acc89253681e520a45517f0b612b44160", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let p1 = &x1;\n ...\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `x1` occurs here\n-LL |         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n+LL |         drop(x1);\n    |              -- move occurs due to use in closure\n ...\n LL |     borrow(&*p1);\n@@ -19,8 +19,8 @@ LL |     let p2 = &x2;\n    |              --- borrow of `x2` occurs here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `x2` occurs here\n-LL |         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n-LL |         drop(x2); //~ ERROR cannot move `x2` into closure because it is borrowed\n+LL |         drop(x1);\n+LL |         drop(x2);\n    |              -- move occurs due to use in closure\n ...\n LL |     borrow(&*p2);\n@@ -36,7 +36,7 @@ LL |     drop(x1);\n ...\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n-LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n+LL |         drop(x1);\n    |              -- use occurs due to use in closure\n \n error[E0382]: use of moved value: `x2`\n@@ -48,16 +48,16 @@ LL |     drop(x2);\n    |          -- value moved here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n-LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n-LL |         drop(x2); //~ ERROR capture of moved value: `x2`\n+LL |         drop(x1);\n+LL |         drop(x2);\n    |              -- use occurs due to use in closure\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:36:14\n    |\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -69,7 +69,7 @@ LL |     let p = &x;\n    |             -- borrow of `x` occurs here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ move out of `x` occurs here\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              - move occurs due to use in closure\n ...\n LL |     borrow(&*p);\n@@ -78,9 +78,9 @@ LL |     borrow(&*p);\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:46:14\n    |\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -94,7 +94,7 @@ LL |     drop(x);\n    |          - value moved here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              - use occurs due to use in closure\n \n error: aborting due to 8 previous errors"}, {"sha": "d58548f22049a683748c72511b0c967e3c39db60", "filename": "src/test/ui/borrowck/borrowck-mut-addr-of-imm-var.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL |     let x: isize = 3;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     let y: &mut isize = &mut x; //~ ERROR cannot borrow\n+LL |     let y: &mut isize = &mut x;\n    |                         ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "925930acf8651461fab7f1ca11cb1beb61ef23e0", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because it is also borrowed as immut\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                     ---- immutable borrow occurs here\n-LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                  ^^^^^^^ mutable borrow occurs here\n LL |     **t2 += 1;              // Mutates `*t0`\n LL |     p.use_ref();\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `t0` as mutable more than once at a time\n    |\n LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n    |                         -------- first mutable borrow occurs here\n-LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                  ^^^^^^^ second mutable borrow occurs here\n LL |     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n LL |     p.use_mut();"}, {"sha": "8e7ffdc6819a5c679ced357abdb9db3b76d7a76e", "filename": "src/test/ui/borrowck/borrowck-mut-slice-of-imm-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n    |\n LL |     let v = vec![1, 2, 3];\n    |         - help: consider changing this to be mutable: `mut v`\n-LL |     write(&mut v); //~ ERROR cannot borrow\n+LL |     write(&mut v);\n    |           ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "3462b7610d38bf747d5202730d9aafe06321bb79", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Cycle::Node(ref mut y) => {\n    |                   --------- borrow of `x.0` occurs here\n-LL |         y.a = x; //~ ERROR cannot move out of\n+LL |         y.a = x;\n    |         ---   ^ move out of `x` occurs here\n    |         |\n    |         borrow later used here"}, {"sha": "cf94c74dec222a9e7f2087b07275d2a92e1f940e", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+LL |     let z = x.mut_borrowed();\n    |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n    |     - immutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = &mut x; //~ ERROR cannot borrow\n+LL |     let z = &mut x;\n    |             ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n    |     - immutable borrow later used here"}, {"sha": "122f5192720cceeeafdee75eef9d50ec546e0abd", "filename": "src/test/ui/borrowck/borrowck-or-init.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "b7fcaa645af2f5f77171f9139843d5929aebfe7f", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `s` as immutable because it is also borrowed as muta\n    |\n LL |     let sp = &mut s;\n    |              ------ mutable borrow occurs here\n-LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+LL |     s(3);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(sp);\n    |             -- mutable borrow later used here\n@@ -14,7 +14,7 @@ error[E0596]: cannot borrow `s` as mutable, as it is not declared as mutable\n LL |     let s = SFnMut {\n    |         - help: consider changing this to be mutable: `mut s`\n ...\n-LL |     s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n+LL |     s(3);\n    |     ^ cannot borrow as mutable\n \n error[E0382]: use of moved value: `s`\n@@ -25,7 +25,7 @@ LL |     let s = SFnOnce {\n ...\n LL |     s(\" world\".to_string());\n    |     - value moved here\n-LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n+LL |     s(\" world\".to_string());\n    |     ^ value used here after move\n \n error: aborting due to 3 previous errors"}, {"sha": "5f34749ca89eb4f8618ad86a6758f3c28f810802", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mut\n    |\n LL |     let p = &mut f[&s];\n    |                  - mutable borrow occurs here\n-LL |     let q = &f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &f[&s];\n    |              ^ immutable borrow occurs here\n LL |     p.use_mut();\n    |     - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n    |\n LL |     let p = &mut f[&s];\n    |                  - first mutable borrow occurs here\n-LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f[&s];\n    |                  ^ second mutable borrow occurs here\n LL |     p.use_mut();\n    |     - first borrow later used here\n@@ -23,7 +23,7 @@ error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- first mutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ second mutable borrow occurs here\n LL |     p.use_mut();\n    |     - first borrow later used here\n@@ -33,7 +33,7 @@ error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as im\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- immutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ mutable borrow occurs here\n LL |     p.use_ref();\n    |     - immutable borrow later used here\n@@ -43,7 +43,7 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n LL |     p.use_ref();\n    |     - borrow later used here\n@@ -53,7 +53,7 @@ error[E0506]: cannot assign to `*f` because it is borrowed\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n LL |     p.use_ref();\n    |     - borrow later used here\n@@ -63,7 +63,7 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n LL |     p.use_mut();\n    |     - borrow later used here\n@@ -73,7 +73,7 @@ error[E0506]: cannot assign to `*f` because it is borrowed\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n LL |     p.use_mut();\n    |     - borrow later used here"}, {"sha": "21bc8bb06cc062b20dac1de8b6d3b3cccf8c93b3", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                 ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                 ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- mutable borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let _bar1 = &foo.bar1;\n    |                 --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n    |             ----- immutable borrow later used here\n@@ -45,9 +45,9 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &*foo;\n LL |     use_mut(_bar1);\n    |             ----- mutable borrow later used here\n \n@@ -56,8 +56,8 @@ error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as m\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                 ^^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- mutable borrow later used here\n@@ -67,7 +67,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- first borrow later used here\n@@ -77,7 +77,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                 ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n    |             ----- first borrow later used here\n@@ -87,7 +87,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                 -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n    |             ----- immutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as imm\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                 -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                 ^^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n    |             ----- immutable borrow later used here\n@@ -107,7 +107,7 @@ error[E0596]: cannot borrow `foo.bar1` as mutable, as it is behind a `&` referen\n    |\n LL | fn borrow_mut_from_imm(foo: &Foo) {\n    |                             ---- help: consider changing this to be a mutable reference: `&mut Foo`\n-LL |     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _bar1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 11 previous errors"}, {"sha": "e744fc6b54b1a4fccb6f4e48f7a052948ab283b9", "filename": "src/test/ui/borrowck/borrowck-ref-mut-of-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n LL | fn destructure(x: Option<isize>) -> isize {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |       Some(ref mut v) => *v //~ ERROR cannot borrow\n+LL |       Some(ref mut v) => *v\n    |            ^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "ee8f90edcd3fd33e233275145a5e91c04fd2d1a9", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,8 +3,8 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n-LL |     let z = &x; //~ ERROR cannot borrow\n+LL |\n+LL |     let z = &x;\n    |             ^^ immutable borrow occurs here\n ...\n LL |     y.use_mut();\n@@ -15,8 +15,8 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |             let y = &x;\n    |                     -- immutable borrow occurs here\n-LL |             //~^ immutable borrow occurs here\n-LL |             let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |             let z = &mut x;\n    |                     ^^^^^^ mutable borrow occurs here\n ...\n LL |             y.use_ref();\n@@ -27,8 +27,8 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |         let y = &mut x;\n    |                 ------ first mutable borrow occurs here\n-LL |         //~^ first mutable borrow occurs here\n-LL |         let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |         let z = &mut x;\n    |                 ^^^^^^ second mutable borrow occurs here\n ...\n LL |         y.use_mut();"}, {"sha": "d54449ac4ad467d4606cf055a63fbadc20ed86b0", "filename": "src/test/ui/borrowck/borrowck-return-variable-on-stack-via-clone.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing function parameter `x`\n   --> $DIR/borrowck-return-variable-on-stack-via-clone.rs:7:5\n    |\n-LL |     (&x).clone() //~ ERROR `x` does not live long enough\n+LL |     (&x).clone()\n    |     ----^^^^^^^^\n    |     |\n    |     returns a value referencing data owned by the current function"}, {"sha": "1c55953c91fb799dc525ef46d5cd62a8a450b292", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because it is also borrowed as immut\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                     ---- immutable borrow occurs here\n-LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n+LL |     swap(&mut t0, &mut t1);\n    |          ^^^^^^^ mutable borrow occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();"}, {"sha": "ec1cf4a4e2b06fccd63a1311e4154c859c0a4d60", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `f` as immutable because it is also borrowed as muta\n    |\n LL |     let g = &mut f;\n    |             ------ mutable borrow occurs here\n-LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+LL |     f(1, 2);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(g);\n    |             - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n    |\n LL | fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n    |                                      - help: consider changing this to be mutable: `mut f`\n-LL |     f(1, 2);    //~ ERROR cannot borrow immutable argument\n+LL |     f(1, 2);\n    |     ^ cannot borrow as mutable\n \n error[E0382]: use of moved value: `f`\n@@ -25,7 +25,7 @@ LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n    |      consider adding a `Copy` constraint to this type argument\n LL |     f(1, 2);\n    |     - value moved here\n-LL |     f(1, 2);    //~ ERROR use of moved value\n+LL |     f(1, 2);\n    |     ^ value used here after move\n \n error: aborting due to 3 previous errors"}, {"sha": "61569b9cac10637a719deac6483eb73d9fc1c628", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `u.c` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.s.a;\n    |                      ---------- borrow of `u.s.a` occurs here\n-LL |             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+LL |             let b = u.c;\n    |                     ^^^ use of borrowed `u.s.a`\n LL |             ra.use_mut();\n    |             -- borrow later used here"}, {"sha": "518f062ba1af8d96cfe10f3657807ffb951cc54a", "filename": "src/test/ui/borrowck/borrowck-union-borrow.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immu\n    |\n LL |             let ra = &u.a;\n    |                      ---- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+LL |             let rma = &mut u.a;\n    |                       ^^^^^^^^ mutable borrow occurs here\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                      ---- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n LL |             drop(ra);\n    |                  -- borrow later used here\n@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `u` (via `u.b`) as mutable because it is also borrow\n    |\n LL |             let ra = &u.a;\n    |                      ---- immutable borrow occurs here (via `u.a`)\n-LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+LL |             let rmb = &mut u.b;\n    |                       ^^^^^^^^ mutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n@@ -35,7 +35,7 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                      ---- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n LL |             drop(ra);\n    |                  -- borrow later used here\n@@ -45,7 +45,7 @@ error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mu\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- mutable borrow occurs here\n-LL |             let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+LL |             let ra = &u.a;\n    |                      ^^^^ immutable borrow occurs here\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n@@ -55,7 +55,7 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n-LL |             let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |             let a = u.a;\n    |                     ^^^ use of borrowed `u.a`\n LL |             drop(ra);\n    |                  -- borrow later used here\n@@ -65,7 +65,7 @@ error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+LL |             let rma2 = &mut u.a;\n    |                        ^^^^^^^^ second mutable borrow occurs here\n LL |             drop(rma);\n    |                  --- first borrow later used here\n@@ -75,7 +75,7 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n LL |             drop(rma);\n    |                  --- borrow later used here\n@@ -85,7 +85,7 @@ error[E0502]: cannot borrow `u` (via `u.b`) as immutable because it is also borr\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- mutable borrow occurs here (via `u.a`)\n-LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+LL |             let rb = &u.b;\n    |                      ^^^^ immutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n@@ -97,7 +97,7 @@ error[E0503]: cannot use `u.b` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n-LL |             let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n+LL |             let b = u.b;\n    |                     ^^^ use of borrowed `u.a`\n LL | \n LL |             drop(ra);\n@@ -108,7 +108,7 @@ error[E0499]: cannot borrow `u` (via `u.b`) as mutable more than once at a time\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- first mutable borrow occurs here (via `u.a`)\n-LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+LL |             let rmb2 = &mut u.b;\n    |                        ^^^^^^^^ second mutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n    |                  --- first borrow later used here\n@@ -120,7 +120,7 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                       -------- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n LL |             drop(rma);\n    |                  --- borrow later used here"}, {"sha": "0b1714fd75dc00852de19e7cd95bee965bab181a", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |             let mut u = U { a: A };\n    |                 ----- move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |             let a = u.a;\n    |                     --- value moved here\n-LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n+LL |             let a = u.a;\n    |                     ^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "abbb0142a9c30b0a5d3680421e9a602743909455", "filename": "src/test/ui/borrowck/borrowck-union-move.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |             let mut u = Unn { n1: NonCopy };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n-LL |             let a = u.n1; //~ ERROR use of moved value: `u.n1`\n+LL |             let a = u.n1;\n    |                     ^^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -15,7 +15,7 @@ LL |             let mut u = Unn { n1: NonCopy };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                     ^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -25,7 +25,7 @@ LL |             let mut u = Unn { n1: NonCopy };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n-LL |             let a = u.n2; //~ ERROR use of moved value: `u.n2`\n+LL |             let a = u.n2;\n    |                     ^^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -35,7 +35,7 @@ LL |             let mut u = Ucn { c: Copy };\n    |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n-LL |             let a = u.n; //~ ERROR use of moved value: `u.n`\n+LL |             let a = u.n;\n    |                     ^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -45,7 +45,7 @@ LL |             let mut u = Ucn { c: Copy };\n    |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n-LL |             let a = u.c; //~ ERROR use of moved value: `u.c`\n+LL |             let a = u.c;\n    |                     ^^^ value used here after move\n \n error[E0382]: use of moved value: `u`\n@@ -55,7 +55,7 @@ LL |             let mut u = Ucn { c: Copy };\n    |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                     ^ value used here after move\n \n error: aborting due to 6 previous errors"}, {"sha": "923edc8edae7d013688efd985224cdf280942df4", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |     let w = &mut v;\n    |             ------ mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |            ^^^ immutable borrow occurs here\n LL |     w.use_mut();\n    |     - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |     x = &mut v;\n    |         ------ mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |            ^^^ immutable borrow occurs here\n LL |     x.use_mut();\n    |     - mutable borrow later used here"}, {"sha": "91d69c51e8180d6f931b44478974ee286397657e", "filename": "src/test/ui/borrowck/borrowck-use-mut-borrow.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x`\n LL |     *p = 2;\n    |     ------ borrow later used here\n@@ -13,7 +13,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let p = &mut x.a;\n    |             -------- borrow of `x.a` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x.a`\n LL |     *p = 3;\n    |     ------ borrow later used here\n@@ -23,7 +23,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x`\n LL |     p.a = 3;\n    |     ------- borrow later used here\n@@ -33,7 +33,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x.a;\n    |             -------- borrow of `x.a` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x.a`\n LL |     *p = 3;\n    |     ------ borrow later used here\n@@ -43,7 +43,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |             ^^^^^^^^^^^^^^^^ use of borrowed `x`\n LL |     drop(y);\n LL |     p.a = 4;\n@@ -54,7 +54,7 @@ error[E0503]: cannot use `x.a` because it was mutably borrowed\n    |\n LL |     let p = &mut x.a;\n    |             -------- borrow of `x.a` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |             ^^^^^^^^^^^^^^^^ use of borrowed `x.a`\n LL |     drop(y);\n LL |     *p = 4;\n@@ -65,7 +65,7 @@ error[E0503]: cannot use `*x` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n+LL |     drop(*x);\n    |          ^^ use of borrowed `x`\n LL |     **p = 2;\n    |     ------- borrow later used here\n@@ -75,7 +75,7 @@ error[E0503]: cannot use `*x.b` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |             ------ borrow of `x` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x`\n LL |     p.a = 3;\n    |     ------- borrow later used here\n@@ -85,7 +85,7 @@ error[E0503]: cannot use `*x.b` because it was mutably borrowed\n    |\n LL |     let p = &mut x.b;\n    |             -------- borrow of `x.b` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x.b`\n LL |     **p = 3;\n    |     ------- borrow later used here"}, {"sha": "da6d9293b408a6c714c99e66931993b073603000", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:10:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     tail\n@@ -10,7 +10,7 @@ LL |     tail\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:20:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     init\n@@ -19,7 +19,7 @@ LL |     init\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:30:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     slice"}, {"sha": "251f44592905dddd5e41a1bf735f4fb86954dcc3", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n LL |     let vb: &mut [isize] = &mut v;\n    |                            ------ first mutable borrow occurs here\n ...\n-LL |             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n+LL |             v.push(tail[0] + tail[1]);\n    |             ^      ------- first borrow later used here\n    |             |\n    |             second mutable borrow occurs here"}, {"sha": "aafcb3160d176c0ba6411f6100f6f16f17d574ee", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,10 +3,10 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[_]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n-LL |             //~^ assignment to borrowed `vec[..]` occurs here\n+LL |\n LL |             _a.use_ref();\n    |             -- borrow later used here\n \n@@ -15,10 +15,10 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[_]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n-LL |             //~^ assignment to borrowed `vec[..]` occurs here\n+LL |\n LL |             _b.use_ref();\n    |             -- borrow later used here\n \n@@ -27,27 +27,27 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n-LL |         &mut [_a, //~ ERROR cannot move out\n+LL |         &mut [_a,\n    |               -- data moved here\n    |\n note: move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n   --> $DIR/borrowck-vec-pattern-nesting.rs:34:15\n    |\n-LL |         &mut [_a, //~ ERROR cannot move out\n+LL |         &mut [_a,\n    |               ^^\n help: consider removing the `&mut`\n    |\n-LL |         [_a, //~ ERROR cannot move out\n-LL |             //~| cannot move out\n-LL |             //~| to prevent move\n+LL |         [_a,\n+LL |\n+LL |\n LL |             ..\n LL |         ] => {\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:47:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -69,15 +69,15 @@ LL |          _b] => {}\n    |          ^^\n help: consider removing the `&mut`\n    |\n-LL |         [ //~ ERROR cannot move out\n-LL |         //~^ cannot move out\n+LL |         [\n+LL |\n LL |          _b] => {}\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:60:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -88,7 +88,7 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}\n    |         -----------------\n    |         |     |   |   |\n    |         |     |   |   ...and here\n@@ -99,13 +99,13 @@ LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/borrowck-vec-pattern-nesting.rs:68:15\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}\n    |               ^^  ^^  ^^\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:72:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here"}, {"sha": "c1290a6f63f33018dd4e3dc95f965f29c4903e3e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local variable `vec`\n   --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:10:5\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                         ---- `vec` is borrowed here\n ...\n LL |     tail"}, {"sha": "0fe3cdc96a874222c0b8580c86591a3015e010b7", "filename": "src/test/ui/borrowck/borrowck-while-break.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n-LL |     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     println!(\"{}\", v);\n    |                    ^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "4b29beb02b35e0e22d77d34661dfbe52f536b688", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help-with-impl.rs:9:5\n    |\n-LL |     Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+LL |     Index::index(&v, 1..2).make_ascii_uppercase();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content"}, {"sha": "92b94209c4e43e9a8dc4a9413dc030e8bfa10df1", "filename": "src/test/ui/borrowck/index-mut-help.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,21 +1,21 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help.rs:11:5\n    |\n-LL |     map[\"peter\"].clear();           //~ ERROR\n+LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/index-mut-help.rs:12:5\n    |\n-LL |     map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help.rs:13:13\n    |\n-LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n+LL |     let _ = &mut map[\"peter\"];\n    |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`"}, {"sha": "eb71ab0b7ec06ba2ac3c57030c4b42902e301cc3", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of static item\n   --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n    |\n-LL |         let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+LL |         let mut x = X;\n    |                     ^\n    |                     |\n    |                     cannot move out of static item"}, {"sha": "f8a9608ad373a5a13e764659bd88ea12567481e1", "filename": "src/test/ui/borrowck/issue-51117.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*bar` as mutable more than once at a time\n    |\n LL |         Some(baz) => {\n    |              --- first mutable borrow occurs here\n-LL |             bar.take(); //~ ERROR cannot borrow\n+LL |             bar.take();\n    |             ^^^ second mutable borrow occurs here\n LL |             drop(baz);\n    |                  --- first borrow later used here"}, {"sha": "eda2f518f9246affc691ef46367ef36413c1e49a", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |             ------------^^^-\n    |             |           |\n    |             |           mutable borrow starts here in previous iteration of loop\n@@ -16,7 +16,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |             ------------^^^-\n    |             |           |\n    |             |           mutable borrow starts here in previous iteration of loop\n@@ -28,7 +28,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |             ------------^^^-\n    |             |           |\n    |             |           mutable borrow starts here in previous iteration of loop"}, {"sha": "09dabbc89b425b33793ee79311326d14ee131821", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n    |\n LL | fn f(b: &mut i32) {\n    |      - help: consider changing this to be mutable: `mut b`\n-LL |     g(&mut b) //~ ERROR cannot borrow\n+LL |     g(&mut b)\n    |       ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "4fcb693f1bf1df7bcf9b3865c3be2c1641b288a4", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `void` as mutable more than once at a time\n    |\n LL |     let first = &mut void;\n    |                 --------- first mutable borrow occurs here\n-LL |     let second = &mut void; //~ ERROR cannot borrow\n+LL |     let second = &mut void;\n    |                  ^^^^^^^^^ second mutable borrow occurs here\n LL |     first.use_mut();\n    |     ----- first borrow later used here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n    |\n LL |         let inner_first = &mut inner_void;\n    |                           --------------- first mutable borrow occurs here\n-LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+LL |         let inner_second = &mut inner_void;\n    |                            ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |         inner_second.use_mut();\n LL |         inner_first.use_mut();"}, {"sha": "11bc78894432d70bc694c2b298bdac50e7c330a3", "filename": "src/test/ui/borrowck/mutability-errors.nll.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,16 +3,16 @@ error[E0594]: cannot assign to `*x` which is behind a `&` reference\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `x.0` which is behind a `&` reference\n   --> $DIR/mutability-errors.rs:10:5\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n-LL |     x.0 = 1; //~ ERROR\n+LL |     *x = (1,);\n+LL |     x.0 = 1;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n@@ -21,7 +21,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n ...\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n@@ -30,48 +30,48 @@ error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n ...\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x.0;\n    |     ^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/mutability-errors.rs:16:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/mutability-errors.rs:17:5\n    |\n-LL |     f().0 = 1; //~ ERROR\n+LL |     f().0 = 1;\n    |     ^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/mutability-errors.rs:18:5\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/mutability-errors.rs:19:5\n    |\n-LL |     &mut f().0; //~ ERROR\n+LL |     &mut f().0;\n    |     ^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `*x` which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:23:5\n    |\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `x.0` which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:24:5\n    |\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-LL |     *x = (1,); //~ ERROR\n-LL |     (*x).0 = 1; //~ ERROR\n+LL |     *x = (1,);\n+LL |     (*x).0 = 1;\n    |     ^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n@@ -80,7 +80,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n ...\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |     ^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n@@ -89,174 +89,174 @@ error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n LL | unsafe fn named_ptr(x: *const (i32,)) {\n    |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n ...\n-LL |     &mut (*x).0; //~ ERROR\n+LL |     &mut (*x).0;\n    |     ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0594]: cannot assign to data in a `*const` pointer\n   --> $DIR/mutability-errors.rs:30:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to data in a `*const` pointer\n   --> $DIR/mutability-errors.rs:31:5\n    |\n-LL |     (*f()).0 = 1; //~ ERROR\n+LL |     (*f()).0 = 1;\n    |     ^^^^^^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow data in a `*const` pointer as mutable\n   --> $DIR/mutability-errors.rs:32:5\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `*const` pointer as mutable\n   --> $DIR/mutability-errors.rs:33:5\n    |\n-LL |     &mut (*f()).0; //~ ERROR\n+LL |     &mut (*f()).0;\n    |     ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:42:9\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:43:9\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:48:9\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:49:9\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n@@ -265,24 +265,24 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: consider changing this to be mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n+LL |     &mut x;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:55:5\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: consider changing this to be mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x;\n+LL |     &mut x.0;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:60:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n-LL |     || { //~ ERROR\n+LL |     || {\n LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n \n@@ -319,7 +319,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n@@ -328,7 +328,7 @@ error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n@@ -337,7 +337,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n@@ -346,31 +346,31 @@ error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable static item `X`\n   --> $DIR/mutability-errors.rs:76:5\n    |\n-LL |     X = (1,); //~ ERROR\n+LL |     X = (1,);\n    |     ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `X.0`, as `X` is an immutable static item\n   --> $DIR/mutability-errors.rs:77:5\n    |\n-LL |     X.0 = 1; //~ ERROR\n+LL |     X.0 = 1;\n    |     ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/mutability-errors.rs:78:5\n    |\n-LL |     &mut X; //~ ERROR\n+LL |     &mut X;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n   --> $DIR/mutability-errors.rs:79:5\n    |\n-LL |     &mut X.0; //~ ERROR\n+LL |     &mut X.0;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 38 previous errors"}, {"sha": "60af41237354264d940cd5e235f1c6a745d800d9", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,15 +1,15 @@\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:6:5\n    |\n-LL |     let ref mut x = 1234543; //~ ERROR\n+LL |     let ref mut x = 1234543;\n    |                     ------- temporary value created here\n LL |     x\n    |     ^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:11:5\n    |\n-LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+LL |     let (ref mut x, ) = (1234543, );\n    |                         ----------- temporary value created here\n LL |     x\n    |     ^ returns a value referencing data owned by the current function\n@@ -21,7 +21,7 @@ LL |       match 1234543 {\n    |       ^     ------- temporary value created here\n    |  _____|\n    | |\n-LL | |         ref mut x => x //~ ERROR\n+LL | |         ref mut x => x\n LL | |     }\n    | |_____^ returns a value referencing data owned by the current function\n \n@@ -32,14 +32,14 @@ LL |       match (123443,) {\n    |       ^     --------- temporary value created here\n    |  _____|\n    | |\n-LL | |         (ref mut x,) => x, //~ ERROR\n+LL | |         (ref mut x,) => x,\n LL | |     }\n    | |_____^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return reference to temporary value\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:27:5\n    |\n-LL |     &mut 1234543 //~ ERROR\n+LL |     &mut 1234543\n    |     ^^^^^-------\n    |     |    |\n    |     |    temporary value created here"}, {"sha": "d455a8f0787431f78b7d871ee024d9bce3e42dc6", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:7:5\n    |\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:15:5\n    |\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error: aborting due to 2 previous errors"}, {"sha": "5f1313f286ee92e248e9d24a13f036029b86d91c", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,16 +1,16 @@\n error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:12:5\n    |\n-LL |     x.a = 1;  //~ ERROR\n+LL |     x.a = 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:13:5\n    |\n LL |     let x: Foo;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.a = 1;  //~ ERROR\n-LL |     x.b = 22; //~ ERROR\n+LL |     x.a = 1;\n+LL |     x.b = 22;\n    |     ^^^^^^^^ cannot assign\n \n error: aborting due to 2 previous errors"}, {"sha": "553ee24cca234331c61f39f7e6bc4abca30e866b", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,13 +4,13 @@ error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n LL |     let x: (u32, u32);\n    |         - help: consider changing this to be mutable: `mut x`\n LL |     x = (22, 44);\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot assign\n \n error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields_twice.rs:12:5\n    |\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error: aborting due to 2 previous errors"}, {"sha": "8b531474553d22cdaf843527b27c5e2a44446d1e", "filename": "src/test/ui/by-move-pattern-binding.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of borrowed content\n LL |     match &s.x {\n    |           ^^^^ cannot move out of borrowed content\n LL |         &E::Foo => {}\n-LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n+LL |         &E::Bar(identifier) => f(identifier.clone())\n    |         -------------------\n    |         |       |\n    |         |       data moved here\n@@ -13,7 +13,7 @@ LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n note: move occurs because `identifier` has type `std::string::String`, which does not implement the `Copy` trait\n   --> $DIR/by-move-pattern-binding.rs:16:17\n    |\n-LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n+LL |         &E::Bar(identifier) => f(identifier.clone())\n    |                 ^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "fe014fa10596671143b14d5cf5c157df70fda63a", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0493]: destructors cannot be evaluated at compile-time\n    |\n LL |                                           ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n    |  ___________________________________________^\n-LL | | //~^ ERROR destructors cannot be evaluated at compile-time\n+LL | |\n LL | |                                                      field2: SafeEnum::Variant1}};\n    | |________________________________________________________________________________^ statics cannot evaluate destructors\n \n@@ -28,49 +28,49 @@ LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:95:5\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:95:9\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |         ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:97:5\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:97:9\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |         ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:102:6\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:102:10\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |          ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:104:6\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:104:10\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |          ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics"}, {"sha": "7e60f3cd8ffa420a538344cb11dbe6a3890ddf8e", "filename": "src/test/ui/closures/closure-immutable-outer-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `y`, as it is not declared as mutable\n    |\n LL |     let y = true;\n    |         - help: consider changing this to be mutable: `mut y`\n-LL |     foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+LL |     foo(Box::new(move || y = false) as Box<_>);\n    |                          ^^^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "a60f1c77a586317ce2f1681444daef840cb6e94d", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = \"foo\";\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     let y = &mut x; //~ ERROR cannot borrow\n+LL |     let y = &mut x;\n    |             ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "d0c29c768eb61557e3d242f0bb639835eb129b5b", "filename": "src/test/ui/codemap_tests/issue-11715.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |     let y = &mut x;\n    |             ------ first mutable borrow occurs here\n-LL |     let z = &mut x; //~ ERROR cannot borrow\n+LL |     let z = &mut x;\n    |             ^^^^^^ second mutable borrow occurs here\n LL |     z.use_mut();\n LL |     y.use_mut();"}, {"sha": "eddbd29c0ef8174874d956eb1fe1f94f725a57ad", "filename": "src/test/ui/codemap_tests/one_line.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/one_line.rs:3:12\n    |\n-LL |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n+LL |     v.push(v.pop().unwrap());\n    |     - ---- ^ second mutable borrow occurs here\n    |     | |\n    |     | first borrow later used by call"}, {"sha": "97816a76004d09cdc9c6d79549b0118826dd7bb4", "filename": "src/test/ui/codemap_tests/tab_3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let some_vec = vec![\"hi\"];\n LL |     some_vec.into_iter();\n    |     -------- value moved here\n LL |     {\n-LL |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n+LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "ca80a9ab391178b66fbf81b796bdd16be0e4e6a1", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,15 +1,15 @@\n error: `foo` is not yet stable as a const fn\n   --> $DIR/dont_promote_unstable_const_fn.rs:15:25\n    |\n-LL | const fn bar() -> u32 { foo() } //~ ERROR `foo` is not yet stable as a const fn\n+LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n    = help: add `#![feature(foo)]` to the crate attributes to enable\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:18:28\n    |\n-LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+LL |     let _: &'static u32 = &foo();\n    |            ------------    ^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -19,7 +19,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:22:28\n    |\n-LL |     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n+LL |     let _: &'static u32 = &meh();\n    |            ------------    ^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -34,7 +34,7 @@ LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis\n    |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     //~^ ERROR does not live long enough\n+LL |\n LL | }\n    | - temporary value is freed at the end of this statement\n "}, {"sha": "129f06151074f7b4b7da7cc587f012215008ec7c", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,18 +1,18 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:8:28\n    |\n-LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+LL |     let _: &'static u32 = &foo();\n    |            ------------    ^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+LL |     let _x: &'static u32 = &foo();\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:9:29\n    |\n-LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+LL |     let _x: &'static u32 = &foo();\n    |             ------------    ^^^^^ creates a temporary which is freed while still in use\n    |             |\n    |             type annotation requires that borrow lasts for `'static`"}, {"sha": "519ba7d84b087a51c5a7f22f28b8c742c1f10eb0", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_const_fn_fail.rs:20:27\n    |\n-LL |     let x: &'static u8 = &(bar() + 1); //~ ERROR does not live long enough\n+LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "a8bb6976da75e599efdc7508debe709f725b1bf6", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -12,7 +12,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:6:30\n    |\n-LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n+LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1);\n    |            --------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -23,18 +23,18 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:7:28\n    |\n-LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) });\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL |     let a: &'static bool = &(main as fn() == main as fn());\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:8:29\n    |\n-LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n+LL |     let a: &'static bool = &(main as fn() == main as fn());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "5aae8c12d16ecd827548fde1eb6b8da8382fcc0d", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n    |            ------------             ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     //~^ ERROR value does not live long enough\n+LL |\n LL | }\n    | - temporary value is freed at the end of this statement\n "}, {"sha": "b530c02f2fb931eae6b8e7e4e0b731930ff57b60", "filename": "src/test/ui/consts/const-eval/union_promotion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/union_promotion.rs:9:29\n    |\n-LL |       let x: &'static bool = &unsafe { //~ borrowed value does not live long enough\n+LL |       let x: &'static bool = &unsafe {\n    |  ____________-------------____^\n    | |            |\n    | |            type annotation requires that borrow lasts for `'static`"}, {"sha": "65330e282c96620de7e8793cc14aa0491423192e", "filename": "src/test/ui/consts/const-int-conversion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -71,7 +71,7 @@ LL |     let d: &'static [u8] = &(i32::min_value().to_be().to_ne_bytes());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |         //~^ ERROR does not live long enough\n+LL |\n LL | }\n    | - temporary value is freed at the end of this statement\n "}, {"sha": "bd061ab3331883cf7d5ad80d96427458cc6dfb59", "filename": "src/test/ui/consts/const-int-overflowing.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:2:36\n    |\n-LL |     let x: &'static (i32, bool) = &(5_i32.overflowing_add(3)); //~ ERROR does not live long enough\n+LL |     let x: &'static (i32, bool) = &(5_i32.overflowing_add(3));\n    |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -12,18 +12,18 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:3:36\n    |\n-LL |     let y: &'static (i32, bool) = &(5_i32.overflowing_sub(3)); //~ ERROR does not live long enough\n+LL |     let y: &'static (i32, bool) = &(5_i32.overflowing_sub(3));\n    |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3)); //~ ERROR does not live long enough\n+LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3));\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:4:36\n    |\n-LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3)); //~ ERROR does not live long enough\n+LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3));\n    |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "2b7cdf5746ed9ede6afe9e6d06485639eec17fb7", "filename": "src/test/ui/consts/const-int-rotate.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,18 +1,18 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-rotate.rs:2:28\n    |\n-LL |     let x: &'static i32 = &(5_i32.rotate_left(3)); //~ ERROR does not live long enough\n+LL |     let x: &'static i32 = &(5_i32.rotate_left(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let y: &'static i32 = &(5_i32.rotate_right(3)); //~ ERROR does not live long enough\n+LL |     let y: &'static i32 = &(5_i32.rotate_right(3));\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-rotate.rs:3:28\n    |\n-LL |     let y: &'static i32 = &(5_i32.rotate_right(3)); //~ ERROR does not live long enough\n+LL |     let y: &'static i32 = &(5_i32.rotate_right(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "0ad7a39d5955fd69ea8410253a1acbd6600a47e9", "filename": "src/test/ui/consts/const-int-sign.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,18 +1,18 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-sign.rs:2:29\n    |\n-LL |     let x: &'static bool = &(5_i32.is_negative()); //~ ERROR does not live long enough\n+LL |     let x: &'static bool = &(5_i32.is_negative());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let y: &'static bool = &(5_i32.is_positive()); //~ ERROR does not live long enough\n+LL |     let y: &'static bool = &(5_i32.is_positive());\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-sign.rs:3:29\n    |\n-LL |     let y: &'static bool = &(5_i32.is_positive()); //~ ERROR does not live long enough\n+LL |     let y: &'static bool = &(5_i32.is_positive());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "a186854ce0cbadd1a587e6d65492ec998ea26d3b", "filename": "src/test/ui/consts/const-int-wrapping.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:2:28\n    |\n-LL |     let x: &'static i32 = &(5_i32.wrapping_add(3)); //~ ERROR does not live long enough\n+LL |     let x: &'static i32 = &(5_i32.wrapping_add(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -12,7 +12,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:3:28\n    |\n-LL |     let y: &'static i32 = &(5_i32.wrapping_sub(3)); //~ ERROR does not live long enough\n+LL |     let y: &'static i32 = &(5_i32.wrapping_sub(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -23,7 +23,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:4:28\n    |\n-LL |     let z: &'static i32 = &(5_i32.wrapping_mul(3)); //~ ERROR does not live long enough\n+LL |     let z: &'static i32 = &(5_i32.wrapping_mul(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -34,18 +34,18 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:5:28\n    |\n-LL |     let a: &'static i32 = &(5_i32.wrapping_shl(3)); //~ ERROR does not live long enough\n+LL |     let a: &'static i32 = &(5_i32.wrapping_shl(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3)); //~ ERROR does not live long enough\n+LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3));\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:6:28\n    |\n-LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3)); //~ ERROR does not live long enough\n+LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3));\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "26946fb99024c43008e2f4326fa4ad65ad0ac983", "filename": "src/test/ui/consts/const-ptr-nonnull.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -16,7 +16,7 @@ LL |     let x: &'static NonNull<u32> = &(non_null.cast());\n    |            ---------------------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     //~^ ERROR borrowed value does not live long enough\n+LL |\n LL | }\n    | - temporary value is freed at the end of this statement\n "}, {"sha": "3644cf4cec7d3b7fb47100feeb4f146b877dd8ba", "filename": "src/test/ui/consts/const-ptr-unique.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x: &'static *mut u32 = &(unique.as_ptr());\n    |            -----------------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     //~^ ERROR borrowed value does not live long enough\n+LL |\n LL | }\n    | - temporary value is freed at the end of this statement\n "}, {"sha": "95b809712ffea127f16888e4c24bab6e4cf27ff9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:37:25\n    |\n-LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n+LL |     const fn into_inner(self) -> T { self.0 }\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n error[E0723]: mutable references in const fn are unstable (see issue #57563)\n@@ -15,7 +15,7 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:44:28\n    |\n-LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n+LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n error[E0723]: mutable references in const fn are unstable (see issue #57563)\n@@ -29,7 +29,7 @@ LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:51:27\n    |\n-LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n+LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n error[E0723]: mutable references in const fn are unstable (see issue #57563)\n@@ -99,15 +99,15 @@ LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n error[E0723]: cannot access `static` items in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:90:27\n    |\n-LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n+LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:91:36\n    |\n-LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n+LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                    ^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n@@ -155,7 +155,7 @@ LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n   --> $DIR/min_const_fn.rs:102:29\n    |\n-LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n+LL | const fn foo30_5(b: bool) { while b { } }\n    |                             ^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n@@ -227,23 +227,23 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:133:22\n    |\n-LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:134:23\n    |\n-LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n+LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n   --> $DIR/min_const_fn.rs:135:23\n    |\n-LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable"}, {"sha": "550423c2d933c2d533937596cbead032585328d0", "filename": "src/test/ui/consts/min_const_fn/promotion.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:11:27\n    |\n-LL |     let x: &'static () = &foo1(); //~ ERROR does not live long enough\n+LL |     let x: &'static () = &foo1();\n    |            -----------    ^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -12,7 +12,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:12:28\n    |\n-LL |     let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n+LL |     let y: &'static i32 = &foo2(42);\n    |            ------------    ^^^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -23,7 +23,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:13:28\n    |\n-LL |     let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n+LL |     let z: &'static i32 = &foo3();\n    |            ------------    ^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -34,7 +34,7 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:14:34\n    |\n-LL |     let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n+LL |     let a: &'static Cell<i32> = &foo4();\n    |            ------------------    ^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n@@ -45,18 +45,18 @@ LL | }\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:15:42\n    |\n-LL |     let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n+LL |     let a: &'static Option<Cell<i32>> = &foo5();\n    |            --------------------------    ^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+LL |     let a: &'static Option<Cell<i32>> = &foo6();\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:16:42\n    |\n-LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n+LL |     let a: &'static Option<Cell<i32>> = &foo6();\n    |            --------------------------    ^^^^^^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`"}, {"sha": "a0af949bf71e872ce9fc1bedb0801133dd2ae951", "filename": "src/test/ui/consts/promote_const_let.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,15 +4,15 @@ error[E0597]: `y` does not live long enough\n LL |     let x: &'static u32 = {\n    |            ------------ type annotation requires that `y` is borrowed for `'static`\n LL |         let y = 42;\n-LL |         &y //~ ERROR does not live long enough\n+LL |         &y\n    |         ^^ borrowed value does not live long enough\n LL |     };\n    |     - `y` dropped here while still borrowed\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote_const_let.rs:6:28\n    |\n-LL |       let x: &'static u32 = &{ //~ ERROR does not live long enough\n+LL |       let x: &'static u32 = &{\n    |  ____________------------____^\n    | |            |\n    | |            type annotation requires that borrow lasts for `'static`"}, {"sha": "147225f1be59e270ef7b1f9ed2768a8af3d7b2a3", "filename": "src/test/ui/did_you_mean/issue-31424.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:7:9\n    |\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n    |         |\n    |         cannot borrow as mutable\n@@ -12,8 +12,8 @@ warning: function cannot return without recursing\n    |\n LL |     fn bar(self: &mut Self) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n-LL |         //~^ WARN function cannot return without recursing\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |\n+LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n    = note: #[warn(unconditional_recursion)] on by default\n@@ -22,7 +22,7 @@ LL |         (&mut self).bar(); //~ ERROR cannot borrow\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:14:9\n    |\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n    |         |\n    |         cannot borrow as mutable"}, {"sha": "e738df1b732e67e4b7cfb0da675c5fc326e0bd12", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-34126.rs:6:18\n    |\n-LL |         self.run(&mut self); //~ ERROR cannot borrow\n+LL |         self.run(&mut self);\n    |                  ^^^^^^^^^\n    |                  |\n    |                  cannot borrow as mutable\n@@ -10,7 +10,7 @@ LL |         self.run(&mut self); //~ ERROR cannot borrow\n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:6:18\n    |\n-LL |         self.run(&mut self); //~ ERROR cannot borrow\n+LL |         self.run(&mut self);\n    |         ---- --- ^^^^^^^^^ mutable borrow occurs here\n    |         |    |\n    |         |    immutable borrow later used by call"}, {"sha": "81f7b6dbf1b21e33b6d8536d8902fb5f41f78d13", "filename": "src/test/ui/did_you_mean/issue-34337.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow `key` as mutable, as it is not declared as mutable\n   --> $DIR/issue-34337.rs:6:9\n    |\n-LL |     get(&mut key); //~ ERROR cannot borrow\n+LL |     get(&mut key);\n    |         ^^^^^^^^\n    |         |\n    |         cannot borrow as mutable"}, {"sha": "216cb14dcf63de83d862f78315dd0e504db8e3fd", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,23 +3,23 @@ error[E0596]: cannot borrow `f.v` as mutable, as `f` is not declared as mutable\n    |\n LL |     let f = Foo { v: Vec::new() };\n    |         - help: consider changing this to be mutable: `mut f`\n-LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n+LL |     f.v.push(\"cat\".to_string());\n    |     ^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:16:5\n    |\n LL |     let s = S { x: 42 };\n    |         - help: consider changing this to be mutable: `mut s`\n-LL |     s.x += 1; //~ ERROR cannot assign\n+LL |     s.x += 1;\n    |     ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:20:5\n    |\n LL | fn bar(s: S) {\n    |        - help: consider changing this to be mutable: `mut s`\n-LL |     s.x += 1; //~ ERROR cannot assign\n+LL |     s.x += 1;\n    |     ^^^^^^^^ cannot assign\n \n error: aborting due to 3 previous errors"}, {"sha": "163817dd9bf5876fa104dfe2f641d2ff9f2d6ab1", "filename": "src/test/ui/did_you_mean/issue-37139.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/issue-37139.rs:12:18\n    |\n-LL |             test(&mut x); //~ ERROR cannot borrow immutable\n+LL |             test(&mut x);\n    |                  ^^^^^^\n    |                  |\n    |                  cannot borrow as mutable"}, {"sha": "6efac371c028ec01457a66a809293ff722734247", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` referenc\n    |\n LL |     fn f(&self) {\n    |          ----- help: consider changing this to be a mutable reference: `&mut self`\n-LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n+LL |         self.s.push('x');\n    |         ^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error"}, {"sha": "db3e6b894264667b586b30ca336a8d058fcd11e6", "filename": "src/test/ui/did_you_mean/issue-38147-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `*f.s` as mutable, as it is behind a `&` reference\n    |\n LL | fn f(x: usize, f: &Foo) {\n    |                   ---- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n-LL |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n+LL |     f.s.push('x');\n    |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error"}, {"sha": "899a42b54e6117578df552e6a7d0b55cb3b6c18f", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,91 +3,91 @@ error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n    |\n LL |     let z = Z { x: X::Y };\n    |         - help: consider changing this to be mutable: `mut z`\n-LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x;\n    |             ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:16:17\n    |\n LL |     fn foo<'z>(&'z self) {\n    |                -------- help: consider changing this to be a mutable reference: `&'z mut self`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:20:17\n    |\n LL |     fn foo1(&self, other: &Z) {\n    |             ----- help: consider changing this to be a mutable reference: `&mut self`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:21:17\n    |\n LL |     fn foo1(&self, other: &Z) {\n    |                           -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n+LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:25:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n    |                 -------- help: consider changing this to be a mutable reference: `&'a mut self`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n    |                                  -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n+LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:30:17\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                       -------- help: consider changing this to be a mutable reference: `&'a mut Self`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:31:17\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                                        -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n-LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x;\n+LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |     fn foo4(other: &Z) {\n    |                    -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:41:13\n    |\n LL | pub fn with_arg(z: Z, w: &Z) {\n    |                 - help: consider changing this to be mutable: `mut z`\n-LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x;\n    |             ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `w.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:42:13\n    |\n LL | pub fn with_arg(z: Z, w: &Z) {\n    |                          -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n-LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x;\n+LL |     let _ = &mut w.x;\n    |             ^^^^^^^^ `w` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0594]: cannot assign to `*x.0` which is behind a `&` reference"}, {"sha": "73473406a9ace47c2e7ae44254dd704d75d5c79c", "filename": "src/test/ui/did_you_mean/issue-40823.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `*buf` as mutable, as it is behind a `&` reference\n    |\n LL |     let mut buf = &[1, 2, 3, 4];\n    |                   ------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4]`\n-LL |     buf.iter_mut(); //~ ERROR cannot borrow immutable borrowed content\n+LL |     buf.iter_mut();\n    |     ^^^ `buf` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error"}, {"sha": "fff3a64ff2963448505eb3a6b12c68767f7937e4", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,15 +1,15 @@\n error[E0509]: cannot move out of type `X`, which implements the `Drop` trait\n   --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:12:22\n    |\n-LL |     let X { x: y } = x; //~ ERROR cannot move out of type\n+LL |     let X { x: y } = x;\n    |                -     ^ cannot move out of here\n    |                |\n    |                data moved here\n    |\n note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n   --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:12:16\n    |\n-LL |     let X { x: y } = x; //~ ERROR cannot move out of type\n+LL |     let X { x: y } = x;\n    |                ^\n \n error: aborting due to previous error"}, {"sha": "7fed27adaff2b0619b432f76162e4bda8f3991df", "filename": "src/test/ui/dropck/drop-with-active-borrows-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n    |\n LL |     let b: Vec<&str> = a.lines().collect();\n    |                        - borrow of `a` occurs here\n-LL |     drop(a);    //~ ERROR cannot move out of `a` because it is borrowed\n+LL |     drop(a);\n    |          ^ move out of `a` occurs here\n LL |     for s in &b {\n    |              -- borrow later used here"}, {"sha": "228744326f94773155eea08c64348bbd63ae49a5", "filename": "src/test/ui/dropck/dropck-union.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/dropck-union.rs:39:18\n    |\n-LL |     v.0.set(Some(&v)); //~ ERROR: `v` does not live long enough\n+LL |     v.0.set(Some(&v));\n    |                  ^^ borrowed value does not live long enough\n LL | }\n    | -"}, {"sha": "8c669b597c3c059fe0890c55e4fb7482e6aee6e1", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `o2` does not live long enough\n    |\n LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n    |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n-LL |     o1.set0(&o2); //~ ERROR `o2` does not live long enough\n+LL |     o1.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -14,8 +14,8 @@ error[E0597]: `o3` does not live long enough\n    |\n LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n    |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n-LL |     o1.set0(&o2); //~ ERROR `o2` does not live long enough\n-LL |     o1.set1(&o3); //~ ERROR `o3` does not live long enough\n+LL |     o1.set0(&o2);\n+LL |     o1.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -27,7 +27,7 @@ error[E0597]: `o2` does not live long enough\n LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n    |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n ...\n-LL |     o2.set0(&o2); //~ ERROR `o2` does not live long enough\n+LL |     o2.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -39,7 +39,7 @@ error[E0597]: `o3` does not live long enough\n LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n    |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n ...\n-LL |     o2.set1(&o3); //~ ERROR `o3` does not live long enough\n+LL |     o2.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -51,9 +51,9 @@ error[E0597]: `o1` does not live long enough\n LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n    |                                                         -------- cast requires that `o1` is borrowed for `'static`\n ...\n-LL |     o3.set0(&o1); //~ ERROR `o1` does not live long enough\n+LL |     o3.set0(&o1);\n    |             ^^^ borrowed value does not live long enough\n-LL |     o3.set1(&o2); //~ ERROR `o2` does not live long enough\n+LL |     o3.set1(&o2);\n LL | }\n    | - `o1` dropped here while still borrowed\n \n@@ -63,7 +63,7 @@ error[E0597]: `o2` does not live long enough\n LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n    |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n ...\n-LL |     o3.set1(&o2); //~ ERROR `o2` does not live long enough\n+LL |     o3.set1(&o2);\n    |             ^^^ borrowed value does not live long enough\n LL | }\n    | - `o2` dropped here while still borrowed"}, {"sha": "289d451f02a7f9b8e322d4892565f0bc65b3e542", "filename": "src/test/ui/dst/dst-bad-coerce3.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough\n+LL |     let f2: &Fat<[isize; 3]> = &f1;\n    |                                ^^^ borrowed value does not live long enough\n LL |     let f3: &'a Fat<[isize]> = f2;\n    |             ---------------- type annotation requires that `f1` is borrowed for `'a`\n@@ -18,7 +18,7 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough\n+LL |     let f2: &Fat<Foo> = &f1;\n    |                         ^^^ borrowed value does not live long enough\n LL |     let f3: &'a Fat<Bar> = f2;\n    |             ------------ type annotation requires that `f1` is borrowed for `'a`\n@@ -32,7 +32,7 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough\n+LL |     let f2: &([isize; 3],) = &f1;\n    |                              ^^^ borrowed value does not live long enough\n LL |     let f3: &'a ([isize],) = f2;\n    |             -------------- type annotation requires that `f1` is borrowed for `'a`\n@@ -46,7 +46,7 @@ error[E0597]: `f1` does not live long enough\n LL | fn baz<'a>() {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough\n+LL |     let f2: &(Foo,) = &f1;\n    |                       ^^^ borrowed value does not live long enough\n LL |     let f3: &'a (Bar,) = f2;\n    |             ---------- type annotation requires that `f1` is borrowed for `'a`"}, {"sha": "3c2a07265f4f09ce973db6d839c018a547ea5ff7", "filename": "src/test/ui/error-codes/E0017.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,31 +1,31 @@\n error[E0017]: references in constants may only refer to immutable values\n   --> $DIR/E0017.rs:4:30\n    |\n-LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ constants require immutable values\n \n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:5:39\n    |\n-LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n \n error: cannot mutate statics in the initializer of another static\n   --> $DIR/E0017.rs:5:39\n    |\n-LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:5:39\n    |\n-LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:8:38\n    |\n-LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n \n error: aborting due to 5 previous errors"}, {"sha": "24234c9929e42cf073be4c2962dc4398c61e61ee", "filename": "src/test/ui/error-codes/E0301.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0301]: cannot mutably borrow in a pattern guard\n   --> $DIR/E0301.rs:4:19\n    |\n-LL |         option if option.take().is_none() => {}, //~ ERROR E0301\n+LL |         option if option.take().is_none() => {},\n    |                   ^^^^^^ borrowed mutably in pattern guard\n    |\n    = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable"}, {"sha": "0fc8a76820cf6c38d5ffb54a46999e598a611c00", "filename": "src/test/ui/error-codes/E0388.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,31 +1,31 @@\n error[E0017]: references in constants may only refer to immutable values\n   --> $DIR/E0388.rs:4:30\n    |\n-LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ constants require immutable values\n \n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0388.rs:5:39\n    |\n-LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n \n error: cannot mutate statics in the initializer of another static\n   --> $DIR/E0388.rs:5:39\n    |\n-LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0388.rs:5:39\n    |\n-LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0388.rs:8:38\n    |\n-LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n \n error: aborting due to 5 previous errors"}, {"sha": "c47750b6f4e69cc72dda552ed86444396b7a7f7d", "filename": "src/test/ui/error-codes/E0389.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `fancy_ref.num` which is behind a `&` reference\n    |\n LL |     let fancy_ref = &(&mut fancy);\n    |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`\n-LL |     fancy_ref.num = 6; //~ ERROR E0389\n+LL |     fancy_ref.num = 6;\n    |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to previous error"}, {"sha": "d56baf7227201bd27241b6fc41f1ab16f0e1bb34", "filename": "src/test/ui/error-codes/E0499.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `i` as mutable more than once at a time\n    |\n LL |     let mut x = &mut i;\n    |                 ------ first mutable borrow occurs here\n-LL |     let mut a = &mut i; //~ ERROR E0499\n+LL |     let mut a = &mut i;\n    |                 ^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n LL |     x.use_mut();"}, {"sha": "cade6d71852f853f8aa58be1e7c6f9c4d119c320", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*a` as mutable because it is also borrowed as immut\n    |\n LL |     let ref y = a;\n    |         ----- immutable borrow occurs here\n-LL |     bar(a); //~ ERROR E0502\n+LL |     bar(a);\n    |     ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n    |     - immutable borrow later used here"}, {"sha": "106dda2bc22605c3a6f4f5d8bf5e07c50b72eac9", "filename": "src/test/ui/error-codes/E0503.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `value` because it was mutably borrowed\n    |\n LL |     let _borrow = &mut value;\n    |                   ---------- borrow of `value` occurs here\n-LL |     let _sum = value + 1; //~ ERROR E0503\n+LL |     let _sum = value + 1;\n    |                ^^^^^ use of borrowed `value`\n LL |     _borrow.use_mut();\n    |     ------- borrow later used here"}, {"sha": "1f2a0407a39637fac1fcfe4b9c7c14bcc411c239", "filename": "src/test/ui/error-codes/E0504.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0504.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0504.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0504.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let fancy_ref = &fancy_num;\n LL | \n LL |     let x = move || {\n    |             ^^^^^^^ move out of `fancy_num` occurs here\n-LL |         println!(\"child function: {}\", fancy_num.num); //~ ERROR E0504\n+LL |         println!(\"child function: {}\", fancy_num.num);\n    |                                        --------- move occurs due to use in closure\n ...\n LL |     println!(\"main function: {}\", fancy_ref.num);"}, {"sha": "4d9d1ef121c6945f33b95eabf066faf60d3c86e0", "filename": "src/test/ui/error-codes/E0505.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |         let _ref_to_val: &Value = &x;\n    |                                   -- borrow of `x` occurs here\n-LL |         eat(x); //~ ERROR E0505\n+LL |         eat(x);\n    |             ^ move out of `x` occurs here\n LL |         _ref_to_val.use_ref();\n    |         ----------- borrow later used here"}, {"sha": "e5c0cf6e24e51fe41bcc8e4134041a9d4f77287b", "filename": "src/test/ui/error-codes/E0509.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0509]: cannot move out of type `DropStruct`, which implements the `Drop` trait\n   --> $DIR/E0509.rs:16:23\n    |\n-LL |     let fancy_field = drop_struct.fancy; //~ ERROR E0509\n+LL |     let fancy_field = drop_struct.fancy;\n    |                       ^^^^^^^^^^^^^^^^^\n    |                       |\n    |                       cannot move out of here"}, {"sha": "b4a1180ad546c8903171c5e9c21434dbbb0d9ff0", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `y` does not live long enough\n    |\n LL |     x.x = Some(&y);\n    |                ^^ borrowed value does not live long enough\n-LL |     //~^ `y` does not live long enough [E0597]\n+LL |\n LL | }\n    | -\n    | |"}, {"sha": "e7b457534211a83164077c9eef5e5980d5979314", "filename": "src/test/ui/functional-struct-update/functional-struct-update-noncopyable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-noncopyable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-noncopyable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-noncopyable.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0509]: cannot move out of type `A`, which implements the `Drop` trait\n   --> $DIR/functional-struct-update-noncopyable.rs:12:14\n    |\n-LL |     let _b = A { y: Arc::new(3), ..a }; //~ ERROR cannot move out of type `A`\n+LL |     let _b = A { y: Arc::new(3), ..a };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n \n error: aborting due to previous error"}, {"sha": "3d58873f826dadabcb5a180684bc07dbceac317f", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -7,7 +7,7 @@ LL |         Pin::new(&mut || yield &a).resume()\n    |                       |         borrowed value does not live long enough\n    |                       value captured here by generator\n    |                       a temporary with access to the borrow is created here ...\n-LL |         //~^ ERROR: `a` does not live long enough\n+LL |\n LL |     };\n    |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n    |     |"}, {"sha": "8bb860f288f109d2ef2785a6dd4a008a3d7b8e75", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -18,7 +18,7 @@ error[E0597]: `ref_` does not live long enough\n LL |     gen = || {\n    |           -- value captured here by generator\n LL |         // but the generator can use it to drop a `Ref<'a, i32>`.\n-LL |         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n+LL |         let _d = ref_.take();\n    |                  ^^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "ee6d22c27cde82d78692ac6fe1b1425bff9ebcae", "filename": "src/test/ui/generator/yield-in-args.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0626]: borrow may still be in use when generator yields\n   --> $DIR/yield-in-args.rs:8:13\n    |\n-LL |         foo(&b, yield); //~ ERROR\n+LL |         foo(&b, yield);\n    |             ^^  ----- possible yield occurs here\n \n error: aborting due to previous error"}, {"sha": "43e29ceb5e667e61fa40b276d5555ce3b142e5ee", "filename": "src/test/ui/generator/yield-while-iterating.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0626]: borrow may still be in use when generator yields\n   --> $DIR/yield-while-iterating.rs:13:18\n    |\n-LL |         for p in &x { //~ ERROR\n+LL |         for p in &x {\n    |                  ^^\n LL |             yield();\n    |             ------- possible yield occurs here\n@@ -14,7 +14,7 @@ LL |     let mut b = || {\n LL |         for p in &mut x {\n    |                       - first borrow occurs due to use of `x` in generator\n ...\n-LL |     println!(\"{}\", x[0]); //~ ERROR\n+LL |     println!(\"{}\", x[0]);\n    |                    ^ immutable borrow occurs here\n LL |     Pin::new(&mut b).resume();\n    |              ------ mutable borrow later used here"}, {"sha": "4c37cd351732be60022e29d1edef9f08f31537aa", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let mut b = || {\n LL |         let a = &mut *x;\n    |                       - first borrow occurs due to use of `x` in generator\n ...\n-LL |     println!(\"{}\", x); //~ ERROR\n+LL |     println!(\"{}\", x);\n    |                    ^ second borrow occurs here\n LL |     Pin::new(&mut b).resume();\n    |              ------ first borrow later used here"}, {"sha": "f7626b13bad3640c325c95c86c24ddf9f0d1c14b", "filename": "src/test/ui/hashmap-iter-value-lifetime.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as\n LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n    |                      -------- immutable borrow occurs here\n LL | \n-LL |     my_stuff.clear(); //~ ERROR cannot borrow\n+LL |     my_stuff.clear();\n    |     ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL | \n LL |     println!(\"{}\", *thing);"}, {"sha": "497c7d1216cd961b7ec1885c094cc633f9666f9b", "filename": "src/test/ui/hashmap-lifetimes.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as\n    |\n LL |     let mut it = my_stuff.iter();\n    |                  -------- immutable borrow occurs here\n-LL |     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n+LL |     my_stuff.insert(1, 43);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     it;\n    |     -- immutable borrow later used here"}, {"sha": "70d5b3c2ec58c2b8659c0d459a7bff3d084159a3", "filename": "src/test/ui/hrtb/hrtb-debruijn-in-receiver.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n    |\n LL |     foo.insert();\n    |     --- first mutable borrow occurs here\n-LL |     foo.insert(); //~ ERROR cannot borrow\n+LL |     foo.insert();\n    |     ^^^\n    |     |\n    |     second mutable borrow occurs here"}, {"sha": "562f60e31b5d218af110e8ff2c9320e6914de94d", "filename": "src/test/ui/hygiene/fields-move.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `foo.x`\n   --> $DIR/fields-move.rs:18:9\n    |\n-LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+LL |         $foo.x\n    |         ^^^^^^ value used here after move\n ...\n-LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+LL |     assert_two_copies(copy_modern!(foo), foo.x);\n    |                                          ----- value moved here\n-LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x);\n    |                       ----------------- in this macro invocation\n    |\n    = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n@@ -17,18 +17,18 @@ error[E0382]: use of moved value: `foo.x`\n LL |    $foo.x\n    |    ------ value moved here\n ...\n-LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+LL |     assert_two_copies(copy_modern!(foo), foo.x);\n    |                                          ^^^^^ value used here after move\n    |\n    = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `foo.x`\n   --> $DIR/fields-move.rs:29:42\n    |\n-LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+LL |         $foo.x\n    |         ------ value moved here\n ...\n-LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x);\n    |                                          ^^^^^ value used here after move\n    |\n    = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait"}, {"sha": "f96ff9dd4e6740b7137abfa18c71fd0c23c4cc3b", "filename": "src/test/ui/in-band-lifetimes/mut_while_borrow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmut_while_borrow.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `p` because it is borrowed\n    |\n LL |     let r = foo(&p);\n    |                 -- borrow of `p` occurs here\n-LL |     p += 1; //~ ERROR cannot assign to `p` because it is borrowed\n+LL |     p += 1;\n    |     ^^^^^^ assignment to borrowed `p` occurs here\n LL |     println!(\"{}\", r);\n    |                    - borrow later used here"}, {"sha": "f2f93076671945b4039424d0a400e41bf4bcfb8b", "filename": "src/test/ui/issues/issue-11681.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/issue-11681.rs:13:10\n    |\n-LL |   let testValue = &Test; //~ ERROR borrowed value does not live long enough\n+LL |   let testValue = &Test;\n    |                    ---- temporary value created here\n LL |   return testValue;\n    |          ^^^^^^^^^ returns a value referencing data owned by the current function"}, {"sha": "4475bdf147402eb4fe6a3f87496a0608bfccdf82", "filename": "src/test/ui/issues/issue-11873.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-11873.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-11873.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11873.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let mut f = || v.push(2);\n    |                 -- - borrow occurs due to use in closure\n    |                 |\n    |                 borrow of `v` occurs here\n-LL |     let _w = v; //~ ERROR: cannot move out of `v`\n+LL |     let _w = v;\n    |              ^ move out of `v` occurs here\n LL | \n LL |     f();"}, {"sha": "c97e59195ed05f9718b476c1f4fa00e232c75fe1", "filename": "src/test/ui/issues/issue-12470.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-12470.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-12470.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12470.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local data `*b`\n   --> $DIR/issue-12470.rs:29:5\n    |\n-LL |     let bb: &B = &*b;    //~ ERROR does not live long enough\n+LL |     let bb: &B = &*b;\n    |                  --- `*b` is borrowed here\n LL |     make_a(bb)\n    |     ^^^^^^^^^^ returns a value referencing data owned by the current function"}, {"sha": "8ad921027e2e370d01e62519df91f6cf254fbd3e", "filename": "src/test/ui/issues/issue-13497-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local variable `rawLines`\n   --> $DIR/issue-13497-2.rs:3:5\n    |\n-LL |       rawLines //~ ERROR `rawLines` does not live long enough\n+LL |       rawLines\n    |       ^-------\n    |       |\n    |  _____`rawLines` is borrowed here"}, {"sha": "28c22260c3888bf82c6516047cf01a588134ff8d", "filename": "src/test/ui/issues/issue-17385.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let foo = X(1);\n    |         --- move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n LL |     drop(foo);\n    |          --- value moved here\n-LL |     match foo { //~ ERROR use of moved value\n+LL |     match foo {\n LL |         X(1) => (),\n    |           ^ value used here after move\n \n@@ -16,7 +16,7 @@ LL |     let e = Enum::Variant2;\n    |         - move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n LL |     drop(e);\n    |          - value moved here\n-LL |     match e { //~ ERROR use of moved value\n+LL |     match e {\n    |           ^ value used here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "79a1e09bd7cc61ad5f8f82a286cd974095f7d75c", "filename": "src/test/ui/issues/issue-17545.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |   pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n    |              -- lifetime `'a` defined here\n LL | /     bar.call((\n-LL | |         &id(()), //~ ERROR borrowed value does not live long enough\n+LL | |         &id(()),\n    | |          ^^^^^^ creates a temporary which is freed while still in use\n LL | |     ));\n    | |      -- temporary value is freed at the end of this statement"}, {"sha": "c3e6267d30fff5df9d33486bc14990a41c0af02b", "filename": "src/test/ui/issues/issue-17718-static-move.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of static item\n   --> $DIR/issue-17718-static-move.rs:6:14\n    |\n-LL |     let _a = FOO; //~ ERROR: cannot move out of static item\n+LL |     let _a = FOO;\n    |              ^^^\n    |              |\n    |              cannot move out of static item"}, {"sha": "49798a148dee1d543114a7a164d56754a75ea0cf", "filename": "src/test/ui/issues/issue-18118.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `p` does not live long enough\n   --> $DIR/issue-18118.rs:4:9\n    |\n-LL |         &p //~ ERROR `p` does not live long enough\n+LL |         &p\n    |         ^^\n    |         |\n    |         borrowed value does not live long enough"}, {"sha": "047b42578a22439115ee8f197c124fedf837de6c", "filename": "src/test/ui/issues/issue-18783.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -9,7 +9,7 @@ LL |     c.push(Box::new(|| y = 0));\n    |                     ^^ - second borrow occurs due to use of `y` in closure\n    |                     |\n    |                     second mutable borrow occurs here\n-LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n+LL |\n LL | }\n    | - first borrow might be used here, when `c` is dropped and runs the destructor for type `std::cell::RefCell<std::vec::Vec<std::boxed::Box<dyn std::ops::FnMut()>>>`\n \n@@ -24,7 +24,7 @@ LL |     Push::push(&c, Box::new(|| y = 0));\n    |                             ^^ - second borrow occurs due to use of `y` in closure\n    |                             |\n    |                             second mutable borrow occurs here\n-LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n+LL |\n LL | }\n    | - first borrow might be used here, when `c` is dropped and runs the destructor for type `std::cell::RefCell<std::vec::Vec<std::boxed::Box<dyn std::ops::FnMut()>>>`\n "}, {"sha": "21f3774c05646b4671c8781fd4f4a47485f54574", "filename": "src/test/ui/issues/issue-21600.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-21600.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-21600.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21600.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,19 +1,19 @@\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:20\n    |\n-LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+LL |         call_it(|| x.gen_mut());\n    |                    ^ cannot borrow as mutable\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/issue-21600.rs:14:17\n    |\n-LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+LL |         call_it(|| x.gen_mut());\n    |                 ^^^^^^^^^^^^^^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:17\n    |\n-LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+LL |         call_it(|| x.gen_mut());\n    |                 ^^ - mutable borrow occurs due to use of `x` in closure\n    |                 |\n    |                 cannot borrow as mutable\n@@ -24,8 +24,8 @@ help: consider changing this to accept closures that implement `FnMut`\n LL |       call_it(|| {\n    |  _____________^\n LL | |         call_it(|| x.gen());\n-LL | |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n-LL | |         //~^ ERROR cannot borrow data mutably in a captured outer\n+LL | |         call_it(|| x.gen_mut());\n+LL | |\n LL | |     });\n    | |_____^\n "}, {"sha": "3b4f27621f696435b54b12d45645bf834ddb1e7f", "filename": "src/test/ui/issues/issue-24267-flow-exit.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24267-flow-exit.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/issue-24267-flow-exit.rs:12:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to 2 previous errors"}, {"sha": "a9c43a8f0d91525a3191a81d361fe91e96a7cea5", "filename": "src/test/ui/issues/issue-24357.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-24357.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-24357.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24357.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -7,7 +7,7 @@ LL |    let f = move || { let y = x; };\n    |            -------           - variable moved due to use in closure\n    |            |\n    |            value moved into closure here\n-LL |    //~^ NOTE value moved (into closure) here\n+LL |\n LL |    let z = x;\n    |            ^ value used here after move\n "}, {"sha": "fa309a55c3c22f4d709fee11083685c1bb4c9576", "filename": "src/test/ui/issues/issue-25700.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-25700.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-25700.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25700.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let t = S::<()>(None);\n    |         - move occurs because `t` has type `S<()>`, which does not implement the `Copy` trait\n LL |     drop(t);\n    |          - value moved here\n-LL |     drop(t); //~ ERROR use of moved value\n+LL |     drop(t);\n    |          ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "e19e83dc747e5eada83c16690a702a8783050309", "filename": "src/test/ui/issues/issue-2590.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-2590.rs:11:9\n    |\n-LL |         self.tokens //~ ERROR cannot move out of borrowed content\n+LL |         self.tokens\n    |         ^^^^^^^^^^^ cannot move out of borrowed content\n \n error: aborting due to previous error"}, {"sha": "3b37578f3c4551497c0a7a523839b32b548da32e", "filename": "src/test/ui/issues/issue-36400.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-36400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-36400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36400.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n    |\n LL |     let x = Box::new(3);\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     f(&mut *x); //~ ERROR cannot borrow immutable\n+LL |     f(&mut *x);\n    |       ^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "fb4ecab362db1f61ffb9a7880f7a57a85a114583", "filename": "src/test/ui/issues/issue-40288.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-40288.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-40288.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40288.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `*refr` because it is borrowed\n LL |     save_ref(&*refr, &mut out);\n    |              ------ borrow of `*refr` occurs here\n ...\n-LL |     *refr = 3; //~ ERROR cannot assign to `*refr` because it is borrowed\n+LL |     *refr = 3;\n    |     ^^^^^^^^^ assignment to borrowed `*refr` occurs here\n ...\n LL |     println!(\"{:?}\", out[0]);"}, {"sha": "fbfbc0cb9777d8f272c78337495ca772512741b7", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-40402-1.rs:9:13\n    |\n-LL |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n+LL |     let e = f.v[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of borrowed content"}, {"sha": "0c4a85b590162c040a848fc4f2707617a08f51d5", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-40402-2.rs:5:18\n    |\n-LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+LL |     let (a, b) = x[0];\n    |          -  -    ^^^^\n    |          |  |    |\n    |          |  |    cannot move out of borrowed content\n@@ -12,7 +12,7 @@ LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/issue-40402-2.rs:5:10\n    |\n-LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+LL |     let (a, b) = x[0];\n    |          ^  ^\n \n error: aborting due to previous error"}, {"sha": "c92753d6e3dbf9cea5d076e078ef3bc7f9714a04", "filename": "src/test/ui/issues/issue-41726.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-41726.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-41726.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41726.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/issue-41726.rs:5:9\n    |\n-LL |         things[src.as_str()].sort(); //~ ERROR cannot borrow immutable\n+LL |         things[src.as_str()].sort();\n    |         ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>`"}, {"sha": "d5a9d233bc96988146822ac5db5c4cf9b8907071", "filename": "src/test/ui/issues/issue-42106.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-42106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-42106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42106.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*collection` as mutable because it is also borrowed\n    |\n LL |     let _a = &collection;\n    |              ----------- immutable borrow occurs here\n-LL |     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n+LL |     collection.swap(1, 2);\n    |     ^^^^^^^^^^ mutable borrow occurs here\n LL |     _a.use_ref();\n    |     -- immutable borrow later used here"}, {"sha": "5cffa1b51219ff37fba6adbaf4d666f174c743d9", "filename": "src/test/ui/issues/issue-42344.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-42344.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-42344.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42344.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow `*TAB[_]` as mutable, as `TAB` is an immutable static item\n   --> $DIR/issue-42344.rs:4:5\n    |\n-LL |     TAB[0].iter_mut(); //~ ERROR cannot borrow data mutably in a `&` reference [E0389]\n+LL |     TAB[0].iter_mut();\n    |     ^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "d9dfbc999f360e7d651a2677446c4310764fe219", "filename": "src/test/ui/issues/issue-42796.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-42796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-42796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let s = \"Hello!\".to_owned();\n LL |     let mut s_copy = s;\n    |                      - value moved here\n ...\n-LL |     println!(\"{}\", s); //~ ERROR use of moved value\n+LL |     println!(\"{}\", s);\n    |                    ^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "6f92fbb1eb689f81c3c6bd45c83720265d458b8a", "filename": "src/test/ui/issues/issue-44373.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-44373.rs:4:42\n    |\n-LL |     let _val: &'static [&'static u32] = &[&FOO]; //~ ERROR borrowed value does not live long enough\n+LL |     let _val: &'static [&'static u32] = &[&FOO];\n    |               -----------------------    ^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`"}, {"sha": "bfa07059c6859c09411b31f4c9aa03b56e85d26a", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -17,7 +17,7 @@ error: compilation successful\n   --> $DIR/issue-49824.rs:8:1\n    |\n LL | / fn main() {\n-LL | |     //~^ compilation successful\n+LL | |\n LL | |     let mut x = 0;\n LL | |     || {\n ...  |"}, {"sha": "c91083955b8205b30678ec9c4abc18d370113a8f", "filename": "src/test/ui/issues/issue-51244.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-51244.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-51244.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51244.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `*my_ref` which is behind a `&` reference\n    |\n LL |     let ref my_ref @ _ = 0;\n    |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`\n-LL |     *my_ref = 0; //~ ERROR cannot assign to immutable borrowed content `*my_ref` [E0594]\n+LL |     *my_ref = 0;\n    |     ^^^^^^^^^^^ `my_ref` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to previous error"}, {"sha": "dbb8e6530c0534d0e5288ee82ffce66930591501", "filename": "src/test/ui/issues/issue-6801.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-6801.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fissues%2Fissue-6801.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6801.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |       let sq =  || { *x * *x };\n    |                 |\n    |                 borrow of `x` occurs here\n LL | \n-LL |       twice(x); //~ ERROR: cannot move out of\n+LL |       twice(x);\n    |             ^ move out of `x` occurs here\n LL |       invoke(sq);\n    |              -- borrow later used here"}, {"sha": "0e2fc0a0fe97ec612570f0ffc1a49be33e184972", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let mut x = vec![1].iter();\n    |                 ^^^^^^^       - temporary value is freed at the end of this statement\n    |                 |\n    |                 creates a temporary which is freed while still in use\n-LL |     //~^ ERROR borrowed value does not live long enough\n+LL |\n LL |     x.use_mut();\n    |     - borrow later used here\n    |"}, {"sha": "ab4460a32684f7ee521a8bed09dbce768ee7cbc9", "filename": "src/test/ui/liveness/liveness-move-call-arg.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `x`\n LL |     let x: Box<isize> = box 25;\n    |         - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n LL |     loop {\n-LL |         take(x); //~ ERROR use of moved value: `x`\n+LL |         take(x);\n    |              ^ value moved here, in previous iteration of loop\n \n error: aborting due to previous error"}, {"sha": "150c1ec82b83d436df0b9dd9b4a779f75344c7bc", "filename": "src/test/ui/liveness/liveness-move-in-loop.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `y`\n LL |     let y: Box<isize> = box 42;\n    |         - move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n ...\n-LL |                     x = y; //~ ERROR use of moved value\n+LL |                     x = y;\n    |                         ^ value moved here, in previous iteration of loop\n \n error: aborting due to previous error"}, {"sha": "e1eed1b59f47001a78282bfc4459ad9e3cdbb122", "filename": "src/test/ui/liveness/liveness-move-in-while.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0382]: borrow of moved value: `y`\n LL |     let y: Box<isize> = box 42;\n    |         - move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n ...\n-LL |         println!(\"{}\", y); //~ ERROR use of moved value: `y`\n+LL |         println!(\"{}\", y);\n    |                        ^ value borrowed here after move\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |                                                    - value moved here, in previous iteration of loop"}, {"sha": "383b89afaa75ecad233fb25327303b3ef48a1fae", "filename": "src/test/ui/liveness/liveness-use-after-move.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x: Box<_> = box 5;\n    |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n-LL |     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n+LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "ccf9499f64407624342ac062a80c5ab1260db147", "filename": "src/test/ui/liveness/liveness-use-after-send.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL | fn test00_start(ch: Chan<Box<isize>>, message: Box<isize>, _count: Box<isiz\n    |                                       ------- move occurs because `message` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n LL |     send(ch, message);\n    |              ------- value moved here\n-LL |     println!(\"{}\", message); //~ ERROR use of moved value: `message`\n+LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "c87720659fd78a95a1ea151f249aa31f783a53a7", "filename": "src/test/ui/loops/loop-proper-liveness.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/loop-proper-liveness.rs:9:22\n    |\n-LL |     println!(\"{:?}\", x); //~ ERROR use of possibly uninitialized variable\n+LL |     println!(\"{:?}\", x);\n    |                      ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "82092dd4c0f8299f5fd391b8ae748f9fc5cf4bc8", "filename": "src/test/ui/methods/method-self-arg-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n-LL |     Foo::bar(&x); //~ERROR cannot borrow `x`\n+LL |     Foo::bar(&x);\n    |              ^^ immutable borrow occurs here\n LL |     y.use_mut();\n    |     - mutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |     let y = &mut x;\n    |             ------ first mutable borrow occurs here\n-LL |     Foo::baz(&mut x); //~ERROR cannot borrow `x`\n+LL |     Foo::baz(&mut x);\n    |              ^^^^^^ second mutable borrow occurs here\n LL |     y.use_mut();\n    |     - first borrow later used here"}, {"sha": "0945fbe68a0f201dbfd22d0e4734667318701d99", "filename": "src/test/ui/moves/move-guard-same-consts.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let x: Box<_> = box 1;\n ...\n LL |         (1, 2) if take(x) => (),\n    |                        - value moved here\n-LL |         (1, 2) if take(x) => (), //~ ERROR use of moved value: `x`\n+LL |         (1, 2) if take(x) => (),\n    |                        ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "542fd1698637d9cecbddee751a31e06cb5606278", "filename": "src/test/ui/moves/move-in-guard-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     let x: Box<_> = box 1;\n ...\n LL |         (1, _) if take(x) => (),\n    |                        - value moved here\n-LL |         (_, 2) if take(x) => (), //~ ERROR use of moved value: `x`\n+LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "8bd405279c526afd165159f6c7cfab774d4ede03", "filename": "src/test/ui/moves/move-in-guard-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `x`\n LL |     let x: Box<_> = box 1;\n    |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n ...\n-LL |         (_, 2) if take(x) => (), //~ ERROR use of moved value: `x`\n+LL |         (_, 2) if take(x) => (),\n    |                        ^ value moved here, in previous iteration of loop\n \n error: aborting due to previous error"}, {"sha": "33da0e54a1e4cc73d058aab47f2817f35e3b0385", "filename": "src/test/ui/moves/move-into-dead-array-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/move-into-dead-array-1.rs:14:5\n    |\n-LL |     a[i] = d();        //~ ERROR use of possibly uninitialized variable: `a`\n+LL |     a[i] = d();\n    |     ^^^^ use of possibly uninitialized `a`\n \n error: aborting due to previous error"}, {"sha": "19e476c04ea0766b648be2fbccbcd80978d2a38d", "filename": "src/test/ui/moves/move-into-dead-array-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(mut a: [D; 4], i: usize) {\n    |        ----- move occurs because `a` has type `[D; 4]`, which does not implement the `Copy` trait\n LL |     drop(a);\n    |          - value moved here\n-LL |     a[i] = d(); //~ ERROR use of moved value: `a`\n+LL |     a[i] = d();\n    |     ^^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "b4b1fe97ca9d60801884192205930ad2a13a8052", "filename": "src/test/ui/moves/move-out-of-slice-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,13 +3,13 @@ error[E0508]: cannot move out of type `[A]`, a non-copy slice\n    |\n LL |     match a {\n    |           ^ cannot move out of here\n-LL |         box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice\n+LL |         box [a] => {},\n    |              - data moved here\n    |\n note: move occurs because `a` has type `A`, which does not implement the `Copy` trait\n   --> $DIR/move-out-of-slice-1.rs:8:14\n    |\n-LL |         box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice\n+LL |         box [a] => {},\n    |              ^\n \n error: aborting due to previous error"}, {"sha": "888ef3352e26d863b55f0820ea83a85036c98ded", "filename": "src/test/ui/moves/move-out-of-tuple-field.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-tuple-field.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-tuple-field.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-tuple-field.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x.0`\n    |\n LL |     let y = x.0;\n    |             --- value moved here\n-LL |     let z = x.0; //~ ERROR use of moved value: `x.0`\n+LL |     let z = x.0;\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `x.0` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `x.0`\n    |\n LL |     let y = x.0;\n    |             --- value moved here\n-LL |     let z = x.0; //~ ERROR use of moved value: `x.0`\n+LL |     let z = x.0;\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `x.0` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait"}, {"sha": "71a3c4506eaf2d8af9fca549a70612c3085d3d7d", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x = vec![\"hi\".to_string()];\n    |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     consume(x.into_iter().next().unwrap());\n    |             - value moved here\n-LL |     touch(&x[0]); //~ ERROR use of moved value: `x`\n+LL |     touch(&x[0]);\n    |            ^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "b83a15c9d4dac4431c644480d28f8ab6716b63d6", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/moves-based-on-type-block-bad.rs:24:19\n    |\n-LL |             match hellothere.x { //~ ERROR cannot move out\n+LL |             match hellothere.x {\n    |                   ^^^^^^^^^^^^\n    |                   |\n    |                   cannot move out of borrowed content"}, {"sha": "3a05a1305beedc2c913f3f5e6da9b9b8a0c88151", "filename": "src/test/ui/moves/moves-based-on-type-capture-clause-bad.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -8,7 +8,7 @@ LL |     thread::spawn(move|| {\n LL |         println!(\"{}\", x);\n    |                        - variable moved due to use in closure\n LL |     });\n-LL |     println!(\"{}\", x); //~ ERROR use of moved value\n+LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "fb8562d00ead1f4654941cca4e43e4caa446d7be", "filename": "src/test/ui/moves/moves-based-on-type-cyclic-types-issue-4821.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `node`\n LL |         Some(right) => consume(right),\n    |              ----- value moved here\n ...\n-LL |     consume(node) + r //~ ERROR use of partially moved value: `node`\n+LL |     consume(node) + r\n    |             ^^^^ value used here after partial move\n    |\n    = note: move occurs because value has type `std::boxed::Box<List>`, which does not implement the `Copy` trait"}, {"sha": "25f88fe157ae9340935a82ef27167c0c05c66d1d", "filename": "src/test/ui/moves/moves-based-on-type-distribute-copy-over-paren.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,8 +5,8 @@ LL |     let x = \"hi\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = Foo { f:x };\n    |                      - value moved here\n-LL |     //~^ NOTE value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -16,8 +16,8 @@ LL |     let x = \"hi\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = Foo { f:(((x))) };\n    |                      ------- value moved here\n-LL |     //~^ NOTE value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "67fae606c4e43fec6925347e9df81a073a54420b", "filename": "src/test/ui/moves/moves-based-on-type-exprs.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x = \"hi\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = Foo { f:x };\n    |                      - value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -15,7 +15,7 @@ LL |     let x = \"hi\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = (x, 3);\n    |               - value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -27,7 +27,7 @@ LL |     let x = \"hi\".to_string();\n LL |         x\n    |         - value moved here\n ...\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `y`\n@@ -39,7 +39,7 @@ LL |     let y = \"ho\".to_string();\n LL |         y\n    |         - value moved here\n ...\n-LL |     touch(&y); //~ ERROR use of moved value: `y`\n+LL |     touch(&y);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -51,7 +51,7 @@ LL |     let x = \"hi\".to_string();\n LL |         true => x,\n    |                 - value moved here\n ...\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `y`\n@@ -63,7 +63,7 @@ LL |     let y = \"ho\".to_string();\n LL |         false => y\n    |                  - value moved here\n ...\n-LL |     touch(&y); //~ ERROR use of moved value: `y`\n+LL |     touch(&y);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -75,7 +75,7 @@ LL |     let x = \"hi\".to_string();\n LL |         _ if guard(x) => 10,\n    |                    - value moved here\n ...\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -85,7 +85,7 @@ LL |     let x = \"hi\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = [x];\n    |               - value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -95,7 +95,7 @@ LL |     let x = \"hi\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = vec![x];\n    |                   - value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -105,7 +105,7 @@ LL |     let x = vec![\"hi\".to_string()];\n    |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     let _y = x.into_iter().next().unwrap();\n    |              - value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n@@ -115,7 +115,7 @@ LL |     let x = vec![\"hi\".to_string()];\n    |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     let _y = [x.into_iter().next().unwrap(); 1];\n    |               - value moved here\n-LL |     touch(&x); //~ ERROR use of moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after move\n \n error: aborting due to 11 previous errors"}, {"sha": "322999a1f0ff9bd20114d695f580fa1aee700bbf", "filename": "src/test/ui/moves/moves-based-on-type-match-bindings.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0382]: borrow of moved value: `x`\n LL |         Foo {f} => {}\n    |              - value moved here\n ...\n-LL |     touch(&x); //~ ERROR use of partially moved value: `x`\n+LL |     touch(&x);\n    |           ^^ value borrowed here after partial move\n    |\n    = note: move occurs because `x.f` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "0568a2e94a71d2b4aa8bfb6531bfeb9174de1b9a", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of captured variable in an `Fn` closure\n    |\n LL |     let i = box 3;\n    |         - captured outer variable\n-LL |     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n+LL |     let _f = to_fn(|| test(i));\n    |                            ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "dde54eee83b6a7480339a1ed41bb48346b87da73", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -16,7 +16,7 @@ LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n    |                consider adding a `Copy` constraint to this type argument\n LL |     let mut r = R {c: Box::new(f)};\n    |                                - value moved here\n-LL |     f(&mut r, false) //~ ERROR use of moved value\n+LL |     f(&mut r, false)\n    |     ^ value borrowed here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "a012c2d9b7b74eebcb499925703ac1ca71ca4d23", "filename": "src/test/ui/moves/moves-sru-moved-field.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-sru-moved-field.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmoves%2Fmoves-sru-moved-field.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-sru-moved-field.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `f.moved`\n    |\n LL |     let _b = Foo {noncopyable: g, ..f};\n    |              ------------------------- value moved here\n-LL |     let _c = Foo {noncopyable: h, ..f}; //~ ERROR use of moved value: `f.moved`\n+LL |     let _c = Foo {noncopyable: h, ..f};\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `f.moved` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait"}, {"sha": "d56e45db13d0e62879e24f684f10083c83a70b59", "filename": "src/test/ui/mut/mut-cant-alias.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `b` as mutable more than once at a time\n    |\n LL |     let b1 = &mut *b;\n    |                    - first mutable borrow occurs here\n-LL |     let b2 = &mut *b; //~ ERROR cannot borrow\n+LL |     let b2 = &mut *b;\n    |                    ^ second mutable borrow occurs here\n LL |     b1.use_mut();\n    |     -- first borrow later used here"}, {"sha": "15323ce9a9755561f943f3d797cd97f5fbdc5e23", "filename": "src/test/ui/mut/mutable-class-fields-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `self.how_hungry` which is behind a `&` reference\n    |\n LL |   pub fn eat(&self) {\n    |              ----- help: consider changing this to be a mutable reference: `&mut self`\n-LL |     self.how_hungry -= 5; //~ ERROR cannot assign\n+LL |     self.how_hungry -= 5;\n    |     ^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to previous error"}, {"sha": "5d50ed67e2f32ba958641c868177cb6e627aea60", "filename": "src/test/ui/nll/cannot-move-block-spans.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:5:15\n    |\n-LL |     let x = { *r }; //~ ERROR\n+LL |     let x = { *r };\n    |               ^^\n    |               |\n    |               cannot move out of borrowed content\n@@ -10,7 +10,7 @@ LL |     let x = { *r }; //~ ERROR\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:6:22\n    |\n-LL |     let y = unsafe { *r }; //~ ERROR\n+LL |     let y = unsafe { *r };\n    |                      ^^\n    |                      |\n    |                      cannot move out of borrowed content\n@@ -19,7 +19,7 @@ LL |     let y = unsafe { *r }; //~ ERROR\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:7:26\n    |\n-LL |     let z = loop { break *r; }; //~ ERROR\n+LL |     let z = loop { break *r; };\n    |                          ^^\n    |                          |\n    |                          cannot move out of borrowed content\n@@ -28,7 +28,7 @@ LL |     let z = loop { break *r; }; //~ ERROR\n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:11:15\n    |\n-LL |     let x = { arr[0] }; //~ ERROR\n+LL |     let x = { arr[0] };\n    |               ^^^^^^\n    |               |\n    |               cannot move out of here\n@@ -37,7 +37,7 @@ LL |     let x = { arr[0] }; //~ ERROR\n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:12:22\n    |\n-LL |     let y = unsafe { arr[0] }; //~ ERROR\n+LL |     let y = unsafe { arr[0] };\n    |                      ^^^^^^\n    |                      |\n    |                      cannot move out of here\n@@ -46,7 +46,7 @@ LL |     let y = unsafe { arr[0] }; //~ ERROR\n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:13:26\n    |\n-LL |     let z = loop { break arr[0]; }; //~ ERROR\n+LL |     let z = loop { break arr[0]; };\n    |                          ^^^^^^\n    |                          |\n    |                          cannot move out of here\n@@ -55,7 +55,7 @@ LL |     let z = loop { break arr[0]; }; //~ ERROR\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:17:38\n    |\n-LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n+LL |     let x = { let mut u = 0; u += 1; *r };\n    |                                      ^^\n    |                                      |\n    |                                      cannot move out of borrowed content\n@@ -64,7 +64,7 @@ LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:18:45\n    |\n-LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n+LL |     let y = unsafe { let mut u = 0; u += 1; *r };\n    |                                             ^^\n    |                                             |\n    |                                             cannot move out of borrowed content\n@@ -73,7 +73,7 @@ LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:19:49\n    |\n-LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n+LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n    |                                                 ^^\n    |                                                 |\n    |                                                 cannot move out of borrowed content"}, {"sha": "40cd04de5ecc14919d9525590538e2d4fb01b5ce", "filename": "src/test/ui/nll/issue-54556-niconii.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `counter` does not live long enough\n   --> $DIR/issue-54556-niconii.rs:22:20\n    |\n-LL |     if let Ok(_) = counter.lock() { } //~ ERROR does not live long enough\n+LL |     if let Ok(_) = counter.lock() { }\n    |                    ^^^^^^^-------\n    |                    |\n    |                    borrowed value does not live long enough"}, {"sha": "0bf76485eef2ae505f08be843462b7feda9425ef", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `stmt` does not live long enough\n   --> $DIR/issue-54556-stephaneyfx.rs:27:21\n    |\n-LL |     let rows = Rows(&stmt); //~ ERROR does not live long enough\n+LL |     let rows = Rows(&stmt);\n    |                     ^^^^^ borrowed value does not live long enough\n LL |     rows.map(|row| row).next()\n    |     ------------------- a temporary with access to the borrow is created here ..."}, {"sha": "513dca7950af92ef170f22acddb4196a0c151c51", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `_thing1` does not live long enough\n   --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:11\n    |\n-LL |         D(&_thing1).end() //~ ERROR does not live long enough\n+LL |         D(&_thing1).end()\n    |         --^^^^^^^^-\n    |         | |\n    |         | borrowed value does not live long enough"}, {"sha": "9f27fac15a7f67161922cf5b42101c3807bb7adf", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let wrap = Wrap { p: &mut x };\n    |                          ------ borrow of `x` occurs here\n ...\n-LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+LL |     x = 1;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL | }\n    | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`"}, {"sha": "bf0c6986ef2cba0eff19647e69c914fe6a7ebe79", "filename": "src/test/ui/nll/issue-55850.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,15 +1,15 @@\n error[E0597]: `s` does not live long enough\n   --> $DIR/issue-55850.rs:28:16\n    |\n-LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+LL |         yield &s[..]\n    |                ^ borrowed value does not live long enough\n LL |     })\n    |     - `s` dropped here while still borrowed\n \n error[E0626]: borrow may still be in use when generator yields\n   --> $DIR/issue-55850.rs:28:16\n    |\n-LL |         yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+LL |         yield &s[..]\n    |         -------^---- possible yield occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "3f7169e6fcbb9750750c304309161a30874af513", "filename": "src/test/ui/no-reuse-move-arc.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -9,7 +9,7 @@ LL |     thread::spawn(move|| {\n LL |         assert_eq!((*arc_v)[3], 4);\n    |                      ----- variable moved due to use in closure\n ...\n-LL |     assert_eq!((*arc_v)[2], 3); //~ ERROR use of moved value: `arc_v`\n+LL |     assert_eq!((*arc_v)[2], 3);\n    |                  ^^^^^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "10bf570727fa037ddc8e8b271347b7841ad27967", "filename": "src/test/ui/not-copy-closure.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnot-copy-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fnot-copy-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-copy-closure.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `hello`\n    |\n LL |     let b = hello;\n    |             ----- value moved here\n-LL |     let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n+LL |     let c = hello;\n    |             ^^^^^ value used here after move\n    |\n note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment"}, {"sha": "1497aa42082d17adc89b0dc6384aa3c8a8d5088c", "filename": "src/test/ui/object-safety/object-safety-by-value-self-use.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n   --> $DIR/object-safety-by-value-self-use.rs:15:5\n    |\n-LL |     t.bar() //~ ERROR cannot move a value of type (dyn Bar + 'static)\n+LL |     t.bar()\n    |     ^\n \n error: aborting due to previous error"}, {"sha": "f98d3d83845377b0d3f0f37765d4a89b907fd4d5", "filename": "src/test/ui/once-cant-call-twice-on-heap.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<F:FnOnce()>(blk: F) {\n    |        consider adding a `Copy` constraint to this type argument\n LL |     blk();\n    |     --- value moved here\n-LL |     blk(); //~ ERROR use of moved value\n+LL |     blk();\n    |     ^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "9ff8e21bb58bdb0a560a4c94ff27d5b543da4cd6", "filename": "src/test/ui/ref-suggestion.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fref-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fref-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fref-suggestion.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x = vec![1];\n    |         - move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n-LL |     x; //~ ERROR use of moved value\n+LL |     x;\n    |     ^ value used here after move\n \n error[E0382]: use of moved value: `x`\n@@ -15,7 +15,7 @@ LL |     let x = vec![1];\n    |         - move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n LL |     let mut y = x;\n    |                 - value moved here\n-LL |     x; //~ ERROR use of moved value\n+LL |     x;\n    |     ^ value used here after move\n \n error[E0382]: use of moved value: `x`\n@@ -24,7 +24,7 @@ error[E0382]: use of moved value: `x`\n LL |         (Some(y), ()) => {},\n    |               - value moved here\n ...\n-LL |     x; //~ ERROR use of partially moved value\n+LL |     x;\n    |     ^ value used here after partial move\n    |\n    = note: move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "bce310bafaa92b2fc8d159138351759d6b308a70", "filename": "src/test/ui/regions/region-bound-on-closure-outlives-call.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,8 +3,8 @@ warning: function cannot return without recursing\n    |\n LL | fn call_rec<F>(mut f: F) -> usize where F: FnMut(usize) -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n-LL |     //~^ WARN function cannot return without recursing\n-LL |     (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n+LL |\n+LL |     (|x| f(x))(call_rec(f))\n    |                ----------- recursive call site\n    |\n    = note: #[warn(unconditional_recursion)] on by default\n@@ -13,7 +13,7 @@ LL |     (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/region-bound-on-closure-outlives-call.rs:3:25\n    |\n-LL |     (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n+LL |     (|x| f(x))(call_rec(f))\n    |     ----------          ^ move out of `f` occurs here\n    |     ||   |\n    |     ||   borrow occurs due to use in closure"}, {"sha": "b86f6e3a2a12261860b853581cf7e3c149f8b973", "filename": "src/test/ui/regions/region-object-lifetime-5.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local data `*x`\n   --> $DIR/region-object-lifetime-5.rs:11:5\n    |\n-LL |     x.borrowed() //~ ERROR `*x` does not live long enough\n+LL |     x.borrowed()\n    |     -^^^^^^^^^^^\n    |     |\n    |     returns a value referencing data owned by the current function"}, {"sha": "54f44b98b9195a536e90273b1e15ee97dfeb06a4", "filename": "src/test/ui/regions/regions-addr-of-arg.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-arg.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/regions-addr-of-arg.rs:5:30\n    |\n-LL |     let _p: &'static isize = &a; //~ ERROR `a` does not live long enough\n+LL |     let _p: &'static isize = &a;\n    |             --------------   ^^ borrowed value does not live long enough\n    |             |\n    |             type annotation requires that `a` is borrowed for `'static`\n@@ -11,7 +11,7 @@ LL | }\n error[E0515]: cannot return reference to function parameter `a`\n   --> $DIR/regions-addr-of-arg.rs:13:5\n    |\n-LL |     &a //~ ERROR `a` does not live long enough\n+LL |     &a\n    |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors"}, {"sha": "2c55634445d810b8f2b7957741fcd745ffbcf266", "filename": "src/test/ui/regions/regions-adjusted-lvalue-op.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-adjusted-lvalue-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-adjusted-lvalue-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-adjusted-lvalue-op.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n   --> $DIR/regions-adjusted-lvalue-op.rs:14:16\n    |\n-LL |     v[0].oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n+LL |     v[0].oh_no(&v);\n    |     -    ----- ^^ immutable borrow occurs here\n    |     |    |\n    |     |    mutable borrow later used by call\n@@ -10,7 +10,7 @@ LL |     v[0].oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n   --> $DIR/regions-adjusted-lvalue-op.rs:15:16\n    |\n-LL |     (*v).oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n+LL |     (*v).oh_no(&v);\n    |       -  ----- ^^ immutable borrow occurs here\n    |       |  |\n    |       |  mutable borrow later used by call"}, {"sha": "8e119c4f5355fc8bbc1331db9d1fec8d3e92f6c2", "filename": "src/test/ui/regions/regions-close-object-into-object-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-1.rs:12:5\n    |\n-LL |     box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n+LL |     box B(&*v) as Box<X>\n    |     ^^^^^^---^^^^^^^^^^^\n    |     |     |\n    |     |     `*v` is borrowed here"}, {"sha": "9ea13638f5cad3506d382532a64fcab4905dd5e7", "filename": "src/test/ui/regions/regions-close-object-into-object-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-3.rs:11:5\n    |\n-LL |     box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n+LL |     box B(&*v) as Box<X>\n    |     ^^^^^^---^^^^^^^^^^^\n    |     |     |\n    |     |     `*v` is borrowed here"}, {"sha": "a95d84629013ead53a2de1e9ca3d02b2fc1d61f7", "filename": "src/test/ui/regions/regions-creating-enums.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return reference to temporary value\n   --> $DIR/regions-creating-enums.rs:23:16\n    |\n-LL |         return &Ast::Num((*f)(x)); //~ ERROR borrowed value does not live long enough\n+LL |         return &Ast::Num((*f)(x));\n    |                ^-----------------\n    |                ||\n    |                |temporary value created here\n@@ -10,7 +10,7 @@ LL |         return &Ast::Num((*f)(x)); //~ ERROR borrowed value does not live l\n error[E0515]: cannot return reference to temporary value\n   --> $DIR/regions-creating-enums.rs:28:16\n    |\n-LL |         return &Ast::Add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n+LL |         return &Ast::Add(m_x, m_y);\n    |                ^------------------\n    |                ||\n    |                |temporary value created here"}, {"sha": "2c7a6e8b5c0b967f3a0fd8b0ea14a10549646fcc", "filename": "src/test/ui/regions/regions-infer-borrow-scope-too-big.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local data `*p`\n   --> $DIR/regions-infer-borrow-scope-too-big.rs:13:12\n    |\n-LL |     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n+LL |     let xc = x_coord(&*p);\n    |                      --- `*p` is borrowed here\n LL |     assert_eq!(*xc, 3);\n LL |     return xc;"}, {"sha": "803d0d7449108722618bb392aca6ffa7c4d08508", "filename": "src/test/ui/regions/regions-infer-proc-static-upvar.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/regions-infer-proc-static-upvar.rs:10:13\n    |\n-LL |       let y = &x; //~ ERROR `x` does not live long enough\n+LL |       let y = &x;\n    |               ^^ borrowed value does not live long enough\n LL | /     foo(move|| {\n LL | |         let _a = *y;"}, {"sha": "7984f4f0e54642fe677ebd848c2be54db9068527", "filename": "src/test/ui/regions/regions-lifetime-of-struct-or-enum-variant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0515]: cannot return value referencing temporary value\n    |\n LL |   let testValue = &id(Test);\n    |                    -------- temporary value created here\n-LL |   //~^ ERROR borrowed value does not live long enough\n+LL |\n LL |   testValue\n    |   ^^^^^^^^^ returns a value referencing data owned by the current function\n \n@@ -12,7 +12,7 @@ error[E0515]: cannot return value referencing temporary value\n    |\n LL |   let testValue = &id(MyEnum::Variant1);\n    |                    -------------------- temporary value created here\n-LL |   //~^ ERROR borrowed value does not live long enough\n+LL |\n LL |   testValue\n    |   ^^^^^^^^^ returns a value referencing data owned by the current function\n "}, {"sha": "8627dac54592d1bbbae28cee4ceaad41382c0bc4", "filename": "src/test/ui/regions/regions-nested-fns-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `y` does not live long enough\n    |\n LL |         |z| {\n    |         --- value captured here\n-LL |             //~^ ERROR E0373\n+LL |\n LL |             if false { &y } else { z }\n    |                        -^\n    |                        ||"}, {"sha": "f77d94a24b88fee2a3fc4d09f0994116b8af8d9b", "filename": "src/test/ui/regions/regions-pattern-typing-issue-19552.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `line` does not live long enough\n   --> $DIR/regions-pattern-typing-issue-19552.rs:5:14\n    |\n-LL |     match [&*line] { //~ ERROR `line` does not live long enough\n+LL |     match [&*line] {\n    |              ^^^^ borrowed value does not live long enough\n LL |         [ word ] => { assert_static(word); }\n    |                       ------------------- argument requires that `line` is borrowed for `'static`"}, {"sha": "ccba6c59b616ec24e363bbbb0cd493a3ba8a5ff9", "filename": "src/test/ui/regions/regions-ref-in-fn-arg.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,13 +3,13 @@ error[E0515]: cannot return value referencing function parameter\n    |\n LL | fn arg_item(box ref x: Box<isize>) -> &'static isize {\n    |             --------- function parameter borrowed here\n-LL |     x //~^ ERROR borrowed value does not live long enough\n+LL |     x\n    |     ^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing function parameter\n   --> $DIR/regions-ref-in-fn-arg.rs:11:22\n    |\n-LL |     with(|box ref x| x) //~ ERROR borrowed value does not live long enough\n+LL |     with(|box ref x| x)\n    |           ---------  ^ returns a value referencing data owned by the current function\n    |           |\n    |           function parameter borrowed here"}, {"sha": "0e4875ac9855b6a2681365ff6de50fe50a7de266", "filename": "src/test/ui/regions/regions-ret.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return reference to temporary value\n   --> $DIR/regions-ret.rs:4:12\n    |\n-LL |     return &id(3); //~ ERROR borrowed value does not live long enough\n+LL |     return &id(3);\n    |            ^-----\n    |            ||\n    |            |temporary value created here"}, {"sha": "9d87fe266b1582ab8167af4128523cfb402fb7a5", "filename": "src/test/ui/regions/regions-return-stack-allocated-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return reference to temporary value\n   --> $DIR/regions-return-stack-allocated-vec.rs:4:5\n    |\n-LL |     &[x] //~ ERROR borrowed value does not live long enough\n+LL |     &[x]\n    |     ^---\n    |     ||\n    |     |temporary value created here"}, {"sha": "5b0efaf95597d85f8a7d107fe828a506d421ba15", "filename": "src/test/ui/regions/regions-steal-closure.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-steal-closure.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `i` does not live long enough\n LL |     let mut cl_box = {\n    |         ---------- borrow later stored here\n LL |         let mut i = 3;\n-LL |         box_it(Box::new(|| i += 1)) //~ ERROR `i` does not live long enough\n+LL |         box_it(Box::new(|| i += 1))\n    |                         -- ^ borrowed value does not live long enough\n    |                         |\n    |                         value captured here"}, {"sha": "56c9f89e1f597aec960ee55b8145261dfaac35e4", "filename": "src/test/ui/regions/regions-trait-variance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing local data `*b`\n   --> $DIR/regions-trait-variance.rs:38:5\n    |\n-LL |     let bb: &B = &*b; //~ ERROR `*b` does not live long enough\n+LL |     let bb: &B = &*b;\n    |                  --- `*b` is borrowed here\n LL |     make_a(bb)\n    |     ^^^^^^^^^^ returns a value referencing data owned by the current function"}, {"sha": "146fb8fd81fc68aece57f0f57a5fd4bb8dc6f10e", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-var-type-out-of-scope.rs:9:14\n    |\n-LL |         x = &id(3); //~ ERROR borrowed value does not live long enough\n+LL |         x = &id(3);\n    |              ^^^^^- temporary value is freed at the end of this statement\n    |              |\n    |              creates a temporary which is freed while still in use"}, {"sha": "04572920ee414ad60b7f0e53e0bec5b3f2a6954a", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     while let Some(Ok(string)) = foo.get() {\n    |                                  --- immutable borrow occurs here\n LL |         foo.mutate();\n    |         ^^^^^^^^^^^^ mutable borrow occurs here\n-LL |         //~^ ERROR cannot borrow `foo` as mutable\n+LL |\n LL |         println!(\"foo={:?}\", *string);\n    |                              ------- immutable borrow later used here\n "}, {"sha": "d6a89006bc0fb9a489ef4934089e0cacd6c8b04e", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,19 +1,19 @@\n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:9:5\n    |\n-LL |     *x += 1; //~ ERROR cannot assign to immutable\n+LL |     *x += 1;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:13:9\n    |\n-LL |         *x += 1; //~ ERROR cannot assign to immutable\n+LL |         *x += 1;\n    |         ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:19:9\n    |\n-LL |         *x += 1; //~ ERROR cannot assign to immutable\n+LL |         *x += 1;\n    |         ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 3 previous errors"}, {"sha": "a6f2f3ec3096858df5aacd0b9078ff330b191166", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,19 +1,19 @@\n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:7:13\n    |\n-LL |             *n += 1; //~ ERROR cannot assign to immutable\n+LL |             *n += 1;\n    |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:15:13\n    |\n-LL |             *n += 1; //~ ERROR cannot assign to immutable\n+LL |             *n += 1;\n    |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:23:13\n    |\n-LL |             *n += 1; //~ ERROR cannot assign to immutable\n+LL |             *n += 1;\n    |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 3 previous errors"}, {"sha": "5f0b3a1d40b7ed5c5ff7c25fb85ad737df3fdd14", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let a = NoCopy(0);\n    |         - move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n LL |     let _ = dbg!(a);\n    |             ------- value moved here\n-LL |     let _ = dbg!(a); //~ ERROR use of moved value\n+LL |     let _ = dbg!(a);\n    |                  ^ value used here after move\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "bad0268772b79185be9595194533667595ec8449", "filename": "src/test/ui/slice-mut-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslice-mut-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n LL |     let x: &[isize] = &[1, 2, 3, 4, 5];\n    |                       ---------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4, 5]`\n ...\n-LL |     let _ = &mut x[2..4]; //~ERROR cannot borrow immutable borrowed content `*x` as mutable\n+LL |     let _ = &mut x[2..4];\n    |                  ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error"}, {"sha": "0a9bc3ac51c65ac3f2c1f2c72ba56cfa0a5b7020", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,23 +3,23 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL | fn deref_mut_field1(x: Own<Point>) {\n    |                     - help: consider changing this to be mutable: `mut x`\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                        ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:65:10\n    |\n LL | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n    |                               ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |          ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:78:19\n    |\n LL |     let _x = &mut x.x;\n    |                   - first mutable borrow occurs here\n-LL |     let _y = &mut x.y; //~ ERROR cannot borrow\n+LL |     let _y = &mut x.y;\n    |                   ^ second mutable borrow occurs here\n LL |     use_mut(_x);\n    |             -- first borrow later used here\n@@ -29,23 +29,23 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL | fn assign_field1<'a>(x: Own<Point>) {\n    |                      - help: consider changing this to be mutable: `mut x`\n-LL |     x.y = 3; //~ ERROR cannot borrow\n+LL |     x.y = 3;\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:92:5\n    |\n LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n    |                         -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n-LL |     x.y = 3; //~ ERROR cannot borrow\n+LL |     x.y = 3;\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:101:5\n    |\n LL |     let _p: &mut Point = &mut **x;\n    |                                -- first mutable borrow occurs here\n-LL |     x.y = 3; //~ ERROR cannot borrow\n+LL |     x.y = 3;\n    |     ^ second mutable borrow occurs here\n LL |     use_mut(_p);\n    |             -- first borrow later used here\n@@ -55,31 +55,31 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL | fn deref_mut_method1(x: Own<Point>) {\n    |                      - help: consider changing this to be mutable: `mut x`\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:121:5\n    |\n LL | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n    |                                ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:129:6\n    |\n LL | fn assign_method1<'a>(x: Own<Point>) {\n    |                       - help: consider changing this to be mutable: `mut x`\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:133:6\n    |\n LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n    |                          -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 10 previous errors"}, {"sha": "3ebfba7e4debe7d0f299721f0902b9afd1383200", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,31 +3,31 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n    |\n LL | fn deref_mut1(x: Own<isize>) {\n    |               - help: consider changing this to be mutable: `mut x`\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                         ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:41:11\n    |\n LL | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n    |                             -------------- help: consider changing this to be a mutable reference: `&'a mut Own<isize>`\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |           ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:49:6\n    |\n LL | fn assign1<'a>(x: Own<isize>) {\n    |                - help: consider changing this to be mutable: `mut x`\n-LL |     *x = 3; //~ ERROR cannot borrow\n+LL |     *x = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:53:6\n    |\n LL | fn assign2<'a>(x: &'a Own<isize>) {\n    |                   -------------- help: consider changing this to be a mutable reference: `&'a mut Own<isize>`\n-LL |     **x = 3; //~ ERROR cannot borrow\n+LL |     **x = 3;\n    |      ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 4 previous errors"}, {"sha": "80dc3ef2f80f2a54a9af106ec272695aedaaf844", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     f(Box::new(|| {\n    |     |\n    |     first mutable borrow occurs here\n    |     first borrow later used by call\n-LL |     //~^ ERROR: cannot borrow `f` as mutable more than once\n+LL |\n LL |         f((Box::new(|| {})))\n    |         - second borrow occurs due to use of `f` in closure\n "}, {"sha": "6b5e0779e5fa5cfed9c8f0171c4851c6daae5ba8", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n LL | fn b(x: &Foo) {\n    |         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n LL |     x.f();\n-LL |     x.h(); //~ ERROR cannot borrow\n+LL |     x.h();\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error"}, {"sha": "fe6014cd5ad83ffe62c7a5baa3bfbcdf6bb5342c", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n LL | fn borrowed_receiver(x: &Foo) {\n    |                         ---- help: consider changing this to be a mutable reference: `&mut dyn Foo`\n LL |     x.borrowed();\n-LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n+LL |     x.borrowed_mut();\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n@@ -13,7 +13,7 @@ error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n LL | fn owned_receiver(x: Box<Foo>) {\n    |                   - help: consider changing this to be mutable: `mut x`\n LL |     x.borrowed();\n-LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n+LL |     x.borrowed_mut();\n    |     ^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors"}, {"sha": "a3c6cfb6ae447b05744a66b3f0079544cca439e9", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |         *a.borrow() + 1\n    |          |\n    |          borrowed value does not live long enough\n    |          a temporary with access to the borrow is created here ...\n-LL |     }; //~^ ERROR `*a` does not live long enough\n+LL |     };\n    |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, i32>`\n    |     |\n    |     `*a` dropped here while still borrowed"}, {"sha": "07ae138ac71eae3c91807e2acc1c56a719389299", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -17,7 +17,7 @@ error[E0597]: `d1` does not live long enough\n    |\n LL |     d2.p.set(Some(&d1));\n    |                   ^^^ borrowed value does not live long enough\n-LL |     //~^ ERROR `d1` does not live long enough\n+LL |\n LL | }\n    | -\n    | |"}, {"sha": "1d317fc331f73605b081c97ce0125fa042cb1614", "filename": "src/test/ui/span/issue-11925.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return reference to local data `x`\n   --> $DIR/issue-11925.rs:8:35\n    |\n-LL |         let f = to_fn_once(move|| &x); //~ ERROR does not live long enough\n+LL |         let f = to_fn_once(move|| &x);\n    |                                   ^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error"}, {"sha": "8027cf69cf4bc0d5ffcb8987af1375f80f870cee", "filename": "src/test/ui/span/mut-arg-hint.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,23 +3,23 @@ error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n    |\n LL |     fn foo(mut a: &String) {\n    |                   ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n-LL |         a.push_str(\"bar\"); //~ ERROR cannot borrow immutable borrowed content\n+LL |         a.push_str(\"bar\");\n    |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:8:5\n    |\n LL | pub fn foo<'a>(mut a: &'a String) {\n    |                       ---------- help: consider changing this to be a mutable reference: `&'a mut String`\n-LL |     a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n+LL |     a.push_str(\"foo\");\n    |     ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:15:9\n    |\n LL |     pub fn foo(mut a: &String) {\n    |                       ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n-LL |         a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n+LL |         a.push_str(\"foo\");\n    |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 3 previous errors"}, {"sha": "21b29464df50297c5c4bd920a676e9bcd427d3aa", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |         p = &*b;\n    |               ^ borrowed value does not live long enough\n LL |     }\n    |     - `b` dropped here while still borrowed\n-LL |     //~^^ ERROR `b` does not live long enough\n+LL |\n LL |     p.use_ref();\n    |     - borrow later used here\n "}, {"sha": "284981e9341956ad57cf72011808ffad269c4791", "filename": "src/test/ui/span/regions-escape-loop-via-vec.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,9 +3,9 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let mut _y = vec![&mut x];\n    |                       ------ borrow of `x` occurs here\n-LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     while x < 10 {\n    |           ^ use of borrowed `x`\n-LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |         let mut z = x;\n LL |         _y.push(&mut z);\n    |         -- borrow later used here\n \n@@ -14,8 +14,8 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let mut _y = vec![&mut x];\n    |                       ------ borrow of `x` occurs here\n-LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n-LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     while x < 10 {\n+LL |         let mut z = x;\n    |                     ^ use of borrowed `x`\n LL |         _y.push(&mut z);\n    |         -- borrow later used here\n@@ -39,8 +39,8 @@ LL |     let mut _y = vec![&mut x];\n ...\n LL |         _y.push(&mut z);\n    |         -- borrow later used here\n-LL |         //~^ ERROR `z` does not live long enough\n-LL |         x += 1; //~ ERROR cannot assign\n+LL |\n+LL |         x += 1;\n    |         ^^^^^^ use of borrowed `x`\n \n error: aborting due to 4 previous errors"}, {"sha": "93473a86b5a59fcb4a62f952e80dd2f84b5efc9a", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `y` because it is borrowed\n    |\n LL |     *lock.lock().unwrap() = &*y;\n    |                             --- borrow of `*y` occurs here\n-LL |     drop(y); //~ ERROR cannot move out\n+LL |     drop(y);\n    |          ^ move out of `y` occurs here\n ...\n LL |         *lock.lock().unwrap() = &z;\n@@ -16,7 +16,7 @@ LL |         *lock.lock().unwrap() = &z;\n    |                                 ^^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-LL |     //~^^ ERROR `z` does not live long enough\n+LL |\n LL |     lock.use_ref(); // (Mutex is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n    |     ---- borrow later used here\n \n@@ -25,7 +25,7 @@ error[E0505]: cannot move out of `y` because it is borrowed\n    |\n LL |     *lock.write().unwrap() = &*y;\n    |                              --- borrow of `*y` occurs here\n-LL |     drop(y); //~ ERROR cannot move out\n+LL |     drop(y);\n    |          ^ move out of `y` occurs here\n ...\n LL |         *lock.write().unwrap() = &z;\n@@ -38,7 +38,7 @@ LL |         *lock.write().unwrap() = &z;\n    |                                  ^^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-LL |     //~^^ ERROR `z` does not live long enough\n+LL |\n LL |     lock.use_ref(); // (RwLock is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n    |     ---- borrow later used here\n \n@@ -47,7 +47,7 @@ error[E0505]: cannot move out of `y` because it is borrowed\n    |\n LL |     tx.send(&*y);\n    |             --- borrow of `*y` occurs here\n-LL |     drop(y); //~ ERROR cannot move out\n+LL |     drop(y);\n    |          ^ move out of `y` occurs here\n ...\n LL |         tx.send(&z).unwrap();"}, {"sha": "f87c32d1ad0c6dd542eae38e86879ee1ceea5b0a", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -17,7 +17,7 @@ error[E0597]: `c1` does not live long enough\n    |\n LL |     c2.v[0].v.set(Some(&c1));\n    |                        ^^^ borrowed value does not live long enough\n-LL |     //~^ ERROR `c1` does not live long enough\n+LL |\n LL | }\n    | -\n    | |"}, {"sha": "90d728204e70b760cd5a1c82f9b0101c23f977f6", "filename": "src/test/ui/static/static-lifetime-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,15 +1,15 @@\n warning: unnecessary lifetime parameter `'a`\n   --> $DIR/static-lifetime-bound.rs:1:6\n    |\n-LL | fn f<'a: 'static>(_: &'a i32) {} //~WARN unnecessary lifetime parameter `'a`\n+LL | fn f<'a: 'static>(_: &'a i32) {}\n    |      ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/static-lifetime-bound.rs:5:7\n    |\n-LL |     f(&x); //~ERROR does not live long enough\n+LL |     f(&x);\n    |     --^^-\n    |     | |\n    |     | borrowed value does not live long enough"}, {"sha": "07c8b48eb1d90239af9c38422661e1e2104a4d70", "filename": "src/test/ui/static/static-reference-to-fn-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -37,7 +37,7 @@ error[E0515]: cannot return value referencing temporary value\n LL | /     StateMachineIter {\n LL | |         statefn: &id(state1 as StateMachineFunc)\n    | |                   ------------------------------ temporary value created here\n-LL | |         //~^ ERROR borrowed value does not live long enough\n+LL | |\n LL | |     }\n    | |_____^ returns a value referencing data owned by the current function\n "}, {"sha": "15261259ed412acaeab624d9e572ea60890f698e", "filename": "src/test/ui/static/static-region-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-region-bound.rs:10:14\n    |\n-LL |     let x = &id(3); //~ ERROR borrowed value does not live long enough\n+LL |     let x = &id(3);\n    |              ^^^^^ creates a temporary which is freed while still in use\n LL |     f(x);\n    |     ---- argument requires that borrow lasts for `'static`"}, {"sha": "8241f6f1fdbc4d12f761fbffa36466c726abc5f0", "filename": "src/test/ui/std-uncopyable-atomics.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:9:13\n    |\n-LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             cannot move out of borrowed content\n@@ -10,7 +10,7 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:11:13\n    |\n-LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             cannot move out of borrowed content\n@@ -19,7 +19,7 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:13:13\n    |\n-LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             cannot move out of borrowed content\n@@ -28,7 +28,7 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:15:13\n    |\n-LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             cannot move out of borrowed content"}, {"sha": "e5dc0e72edfc78b1786049140f6324bc02ddeb4d", "filename": "src/test/ui/thread-local-mutation.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fthread-local-mutation.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fthread-local-mutation.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-mutation.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0594]: cannot assign to immutable static item `S`\n   --> $DIR/thread-local-mutation.rs:11:5\n    |\n-LL |     S = \"after\"; //~ ERROR cannot assign to immutable\n+LL |     S = \"after\";\n    |     ^^^^^^^^^^^ cannot assign\n \n error: aborting due to previous error"}, {"sha": "4ee3e4cacc372d444f4fd8b1e1c86c65b7578c7b", "filename": "src/test/ui/traits/trait-coercion-generic-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-coercion-generic-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-coercion-generic-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-coercion-generic-regions.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `person` does not live long enough\n   --> $DIR/trait-coercion-generic-regions.rs:17:24\n    |\n-LL |     let person: &str = &person;  //~ ERROR `person` does not live long enough\n+LL |     let person: &str = &person;\n    |                        ^^^^^^^\n    |                        |\n    |                        borrowed value does not live long enough"}, {"sha": "aac119afda544e3b7d7bccb7a57419b92292ee4f", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy-reborrow.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,15 +3,15 @@ error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n    |\n LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n    |                        --------------- help: consider changing this to be a mutable reference: `&'a mut &'a mut i32`\n-LL |     *t //~ ERROR\n+LL |     *t\n    |     ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:10:6\n    |\n LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n    |                             --------------- help: consider changing this to be a mutable reference: `&'a mut &'a mut i32`\n-LL |     {*t} //~ ERROR\n+LL |     {*t}\n    |      ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 2 previous errors"}, {"sha": "934d057ea0923b73903ce5e96dc47573b53fbb62", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,31 +3,31 @@ error[E0507]: cannot move out of captured variable in an `Fn` closure\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n-LL |         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n+LL |         let f = to_fn(|| drop(x));\n    |                               ^ cannot move out of captured variable in an `Fn` closure\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:19:35\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n-LL |         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n+LL |         let f = to_fn_mut(|| drop(x));\n    |                                   ^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:28:36\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n-LL |         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n+LL |         let f = to_fn(move || drop(x));\n    |                                    ^ cannot move out of captured variable in an `Fn` closure\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:32:40\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n-LL |         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n+LL |         let f = to_fn_mut(move || drop(x));\n    |                                        ^ cannot move out of captured variable in an `FnMut` closure\n \n error: aborting due to 4 previous errors"}, {"sha": "3e7f79040fe8a6b6d853ff58c38cf3b51ef104ae", "filename": "src/test/ui/unboxed-closures/unboxed-closure-immutable-capture.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,16 +3,16 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     move || x = 1; //~ ERROR cannot assign\n+LL |     move || x = 1;\n    |             ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:10:17\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n-LL |     move || x = 1; //~ ERROR cannot assign\n-LL |     move || set(&mut x); //~ ERROR cannot borrow\n+LL |     move || x = 1;\n+LL |     move || set(&mut x);\n    |                 ^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n@@ -21,7 +21,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     move || x = 1; //~ ERROR cannot assign\n+LL |     move || x = 1;\n    |             ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n@@ -30,7 +30,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     move || set(&mut x); //~ ERROR cannot borrow\n+LL |     move || set(&mut x);\n    |                 ^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n@@ -39,7 +39,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     || x = 1; //~ ERROR cannot assign\n+LL |     || x = 1;\n    |        ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n@@ -48,7 +48,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     || set(&mut x); //~ ERROR cannot assign\n+LL |     || set(&mut x);\n    |            ^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n@@ -57,7 +57,7 @@ error[E0594]: cannot assign to `x`, as it is not declared as mutable\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     || x = 1; //~ ERROR cannot assign\n+LL |     || x = 1;\n    |        ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n@@ -66,7 +66,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n-LL |     || set(&mut x); //~ ERROR cannot assign\n+LL |     || set(&mut x);\n    |            ^^^^^^ cannot borrow as mutable\n \n error: aborting due to 8 previous errors"}, {"sha": "b40b2f67d9bade1707c36211f30dfa55bc39c9ab", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |     let _f = {\n    |         -- borrow later stored here\n LL |         let x = 0;\n-LL |         || x //~ ERROR `x` does not live long enough\n+LL |         || x\n    |         -- ^ borrowed value does not live long enough\n    |         |\n    |         value captured here"}, {"sha": "21d6b4fde7e905f94f49affc7d58a1770be38199", "filename": "src/test/ui/unboxed-closures/unboxed-closures-borrow-conflict.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let f = || x += 1;\n    |             -- - borrow occurs due to use of `x` in closure\n    |             |\n    |             borrow of `x` occurs here\n-LL |     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     let _y = x;\n    |              ^ use of borrowed `x`\n LL |     f;\n    |     - borrow later used here"}, {"sha": "19cb2cb733814e165b8649d4a0de35f83ec26236", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -34,7 +34,7 @@ LL |     let mut factorial: Option<Box<Fn(u32) -> u32 + 'static>> = None;\n LL | \n LL |     let f = |x: u32| -> u32 {\n    |             --------------- value captured here\n-LL |         //~^ ERROR closure may outlive the current function, but it borrows `factorial`\n+LL |\n LL |         let g = factorial.as_ref().unwrap();\n    |                 ^^^^^^^^^ borrowed value does not live long enough\n ...\n@@ -49,7 +49,7 @@ LL |     let mut factorial: Option<Box<Fn(u32) -> u32 + 'static>> = None;\n LL | \n LL |     let f = |x: u32| -> u32 {\n    |             --------------- borrow of `factorial` occurs here\n-LL |         //~^ ERROR closure may outlive the current function, but it borrows `factorial`\n+LL |\n LL |         let g = factorial.as_ref().unwrap();\n    |                 --------- borrow occurs due to use in closure\n ..."}, {"sha": "1e1172cdbf2fc669e8361fed319b00ad09bf3122", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -10,10 +10,10 @@ LL |         tick1();\n error[E0596]: cannot borrow `tick2` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:20:5\n    |\n-LL |     let tick2 = || { //~ ERROR closure cannot assign to immutable local variable `tick1`\n+LL |     let tick2 = || {\n    |         ----- help: consider changing this to be mutable: `mut tick2`\n ...\n-LL |     tick2(); //~ ERROR cannot borrow\n+LL |     tick2();\n    |     ^^^^^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors"}, {"sha": "eb398628846ddbed19b8109fee523b96eaa5c6f4", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-missing-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `tick` as mutable, as it is not declared as mutable\n    |\n LL |     let tick = || counter += 1;\n    |         ---- help: consider changing this to be mutable: `mut tick`\n-LL |     tick(); //~ ERROR cannot borrow immutable local variable `tick` as mutable\n+LL |     tick();\n    |     ^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "b9d76d9a752ce76d5926915f9c057f0b72422037", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-move-missing-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `tick` as mutable, as it is not declared as mutable\n    |\n LL |     let tick = move || counter += 1;\n    |         ---- help: consider changing this to be mutable: `mut tick`\n-LL |     tick(); //~ ERROR cannot borrow immutable local variable `tick` as mutable\n+LL |     tick();\n    |     ^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "6bba38510b676a38543329906d4b4a930ed1db1d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to `n`, as it is not declared as mutable\n    |\n LL |     let n = 0;\n    |         - help: consider changing this to be mutable: `mut n`\n-LL |     let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n+LL |     let mut f = to_fn_mut(|| {\n LL |         n += 1;\n    |         ^^^^^^ cannot assign\n \n@@ -13,7 +13,7 @@ error[E0594]: cannot assign to `n`, as it is not declared as mutable\n LL |     let n = 0;\n    |         - help: consider changing this to be mutable: `mut n`\n ...\n-LL |         n += 1; //~ ERROR cannot assign\n+LL |         n += 1;\n    |         ^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `n`, as it is not declared as mutable\n@@ -22,21 +22,21 @@ error[E0594]: cannot assign to `n`, as it is not declared as mutable\n LL |     let n = 0;\n    |         - help: consider changing this to be mutable: `mut n`\n LL |     let mut f = to_fn(move || {\n-LL |         n += 1; //~ ERROR cannot assign\n+LL |         n += 1;\n    |         ^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `n`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutate-upvar.rs:53:9\n    |\n-LL |         n += 1; //~ ERROR cannot assign\n+LL |         n += 1;\n    |         ^^^^^^ cannot assign\n    |\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/unboxed-closures-mutate-upvar.rs:52:23\n    |\n LL |       let mut f = to_fn(move || {\n    |  _______________________^\n-LL | |         n += 1; //~ ERROR cannot assign\n+LL | |         n += 1;\n LL | |     });\n    | |_____^\n "}, {"sha": "70860c822ebda4640fca460c5321d5d71c58b18f", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borr\n    |\n LL |     let a = &mut u.x.0;\n    |             ---------- mutable borrow occurs here (via `u.x.0`)\n-LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y;\n    |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n@@ -17,15 +17,15 @@ LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = u.x.0;\n    |             ----- value moved here\n-LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:28:13\n    |\n LL |     let a = &mut (u.x.0).0;\n    |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n-LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y;\n    |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0.0` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n@@ -39,15 +39,15 @@ LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = (u.x.0).0;\n    |             --------- value moved here\n-LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `*u.y`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n    |\n LL |     let a = &mut *u.y;\n    |             --------- mutable borrow occurs here (via `*u.y`)\n-LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+LL |     let b = &u.x;\n    |             ^^^^ immutable borrow of `u.x` -- which overlaps with `*u.y` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n@@ -61,7 +61,7 @@ LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = *u.y;\n    |             ---- value moved here\n-LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x;\n    |             ^^^ value used here after move\n \n error: aborting due to 6 previous errors"}, {"sha": "c11445c8adf594c24ce7b6bdc65e45b9b598b3e0", "filename": "src/test/ui/unop-move-semantics.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -8,7 +8,7 @@ LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n LL |     !x;\n    |      - value moved here\n LL | \n-LL |     x.clone();  //~ ERROR: use of moved value\n+LL |     x.clone();\n    |     ^ value borrowed here after move\n \n error[E0505]: cannot move out of `x` because it is borrowed\n@@ -17,7 +17,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n LL |     let m = &x;\n    |             -- borrow of `x` occurs here\n ...\n-LL |     !x;  //~ ERROR: cannot move out of `x` because it is borrowed\n+LL |     !x;\n    |      ^ move out of `x` occurs here\n ...\n LL |     use_mut(n); use_imm(m);\n@@ -29,21 +29,21 @@ error[E0505]: cannot move out of `y` because it is borrowed\n LL |     let n = &mut y;\n    |             ------ borrow of `y` occurs here\n ...\n-LL |     !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+LL |     !y;\n    |      ^ move out of `y` occurs here\n LL |     use_mut(n); use_imm(m);\n    |             - borrow later used here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/unop-move-semantics.rs:24:6\n    |\n-LL |     !*m;  //~ ERROR: cannot move out of borrowed content\n+LL |     !*m;\n    |      ^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/unop-move-semantics.rs:26:6\n    |\n-LL |     !*n;  //~ ERROR: cannot move out of borrowed content\n+LL |     !*n;\n    |      ^^ cannot move out of borrowed content\n \n error: aborting due to 5 previous errors"}, {"sha": "47fa0d4a437ba6cc3db8e3ef6836963698f1d183", "filename": "src/test/ui/unsized-locals/double-move.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,15 +5,15 @@ LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         drop_unsized(y);\n    |                      - value moved here\n-LL |         drop_unsized(y); //~ERROR use of moved value\n+LL |         drop_unsized(y);\n    |                      ^ value used here after move\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/double-move.rs:26:22\n    |\n LL |         let _y = *x;\n    |                  -- value moved here\n-LL |         drop_unsized(x); //~ERROR use of moved value\n+LL |         drop_unsized(x);\n    |                      ^ value used here after partial move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n@@ -25,7 +25,7 @@ LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `std::boxed::Box<str>`, which does not implement the `Copy` trait\n LL |         drop_unsized(x);\n    |                      - value moved here\n-LL |         let _y = *x; //~ERROR use of moved value\n+LL |         let _y = *x;\n    |                  ^^ value used here after move\n \n error[E0382]: use of moved value: `y`\n@@ -35,15 +35,15 @@ LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         y.foo();\n    |         - value moved here\n-LL |         y.foo(); //~ERROR use of moved value\n+LL |         y.foo();\n    |         ^ value used here after move\n \n error[E0382]: use of moved value: `*x`\n   --> $DIR/double-move.rs:45:9\n    |\n LL |         let _y = *x;\n    |                  -- value moved here\n-LL |         x.foo(); //~ERROR use of moved value\n+LL |         x.foo();\n    |         ^ value used here after move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n@@ -53,7 +53,7 @@ error[E0382]: use of moved value: `*x`\n    |\n LL |         x.foo();\n    |         - value moved here\n-LL |         let _y = *x; //~ERROR use of moved value\n+LL |         let _y = *x;\n    |                  ^^ value used here after move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait"}, {"sha": "520f88f55dc1a3bb7df012ee2a0036c4d78f6314", "filename": "src/test/ui/use/use-after-move-based-on-type.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let x = \"Hello!\".to_string();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = x;\n    |              - value moved here\n-LL |     println!(\"{}\", x); //~ ERROR use of moved value\n+LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "9bf1175430c8408e3c4b36e04212ba17cac10a09", "filename": "src/test/ui/use/use-after-move-self-based-on-type.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn foo(self) -> isize {\n    |                ---- move occurs because `self` has type `S`, which does not implement the `Copy` trait\n LL |         self.bar();\n    |         ---- value moved here\n-LL |         return self.x;  //~ ERROR use of moved value: `self.x`\n+LL |         return self.x;\n    |                ^^^^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "3be0a65550b7fc6b8ae27722e0139bf39538ca03", "filename": "src/test/ui/use/use-after-move-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn foo(self) -> isize {\n    |                ---- move occurs because `self` has type `S`, which does not implement the `Copy` trait\n LL |         self.bar();\n    |         ---- value moved here\n-LL |         return *self.x;  //~ ERROR use of moved value: `*self.x`\n+LL |         return *self.x;\n    |                ^^^^^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "008e2a002bbb06829e637a8f8c88b1b048822108", "filename": "src/test/ui/variance/variance-issue-20533.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-issue-20533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-issue-20533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-issue-20533.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n    |\n LL |         let x = foo(&a);\n    |                     -- borrow of `a` occurs here\n-LL |         drop(a); //~ ERROR cannot move out of `a`\n+LL |         drop(a);\n    |              ^ move out of `a` occurs here\n LL |         drop(x);\n    |              - borrow later used here\n@@ -13,7 +13,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n    |\n LL |         let x = bar(&a);\n    |                     -- borrow of `a` occurs here\n-LL |         drop(a); //~ ERROR cannot move out of `a`\n+LL |         drop(a);\n    |              ^ move out of `a` occurs here\n LL |         drop(x);\n    |              - borrow later used here\n@@ -23,7 +23,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n    |\n LL |         let x = baz(&a);\n    |                     -- borrow of `a` occurs here\n-LL |         drop(a); //~ ERROR cannot move out of `a`\n+LL |         drop(a);\n    |              ^ move out of `a` occurs here\n LL |         drop(x);\n    |              - borrow later used here"}, {"sha": "679fd8997733b6696738494d0c429e381adcf204", "filename": "src/test/ui/vec/vec-mut-iter-borrow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fvec%2Fvec-mut-iter-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fvec%2Fvec-mut-iter-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-mut-iter-borrow.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -6,7 +6,7 @@ LL |     for x in &mut xs {\n    |              |\n    |              first mutable borrow occurs here\n    |              first borrow later used here\n-LL |         xs.push(1) //~ ERROR cannot borrow `xs`\n+LL |         xs.push(1)\n    |         ^^ second mutable borrow occurs here\n \n error: aborting due to previous error"}, {"sha": "eeb594a21f38c484031243aa38a733118cc2c37b", "filename": "src/test/ui/walk-struct-literal-with.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fwalk-struct-literal-with.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fwalk-struct-literal-with.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -5,7 +5,7 @@ LL |     let start = Mine{test:\"Foo\".to_string(), other_val:0};\n    |         ----- move occurs because `start` has type `Mine`, which does not implement the `Copy` trait\n LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n    |                                   ----- value moved here\n-LL |     println!(\"{}\", start.test); //~ ERROR use of moved value: `start.test`\n+LL |     println!(\"{}\", start.test);\n    |                    ^^^^^^^^^^ value borrowed here after move\n \n error: aborting due to previous error"}, {"sha": "fc58984345a91a43f774c1f0827010c946f0f475", "filename": "src/test/ui/wf/wf-misc-methods-issue-28609.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -1,7 +1,7 @@\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/wf-misc-methods-issue-28609.rs:22:5\n    |\n-LL |     s.transmute_inherent(&mut 42) //~ ERROR does not live long enough\n+LL |     s.transmute_inherent(&mut 42)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^--^\n    |     |                         |\n    |     |                         temporary value created here\n@@ -10,23 +10,23 @@ LL |     s.transmute_inherent(&mut 42) //~ ERROR does not live long enough\n error[E0515]: cannot return value referencing local variable `four`\n   --> $DIR/wf-misc-methods-issue-28609.rs:36:5\n    |\n-LL |     s.bomb = Some(&four); //~ ERROR does not live long enough\n+LL |     s.bomb = Some(&four);\n    |                   ----- `four` is borrowed here\n LL |     &s\n    |     ^^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing local variable `four`\n   --> $DIR/wf-misc-methods-issue-28609.rs:43:5\n    |\n-LL |     s.bomb = Some(&four); //~ ERROR does not live long enough\n+LL |     s.bomb = Some(&four);\n    |                   ----- `four` is borrowed here\n LL |     &*s\n    |     ^^^ returns a value referencing data owned by the current function\n \n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/wf-misc-methods-issue-28609.rs:53:5\n    |\n-LL |     s << &mut 3 //~ ERROR does not live long enough\n+LL |     s << &mut 3\n    |     ^^^^^^^^^^-\n    |     |         |\n    |     |         temporary value created here\n@@ -35,7 +35,7 @@ LL |     s << &mut 3 //~ ERROR does not live long enough\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/wf-misc-methods-issue-28609.rs:58:5\n    |\n-LL |     s.shl(&mut 3) //~ ERROR does not live long enough\n+LL |     s.shl(&mut 3)\n    |     ^^^^^^^^^^^-^\n    |     |          |\n    |     |          temporary value created here\n@@ -44,7 +44,7 @@ LL |     s.shl(&mut 3) //~ ERROR does not live long enough\n error[E0515]: cannot return value referencing temporary value\n   --> $DIR/wf-misc-methods-issue-28609.rs:63:5\n    |\n-LL |     S2::shl(s, &mut 3) //~ ERROR does not live long enough\n+LL |     S2::shl(s, &mut 3)\n    |     ^^^^^^^^^^^^^^^^-^\n    |     |               |\n    |     |               temporary value created here"}, {"sha": "a65765c86c8b72956532f957a56087d128e5eb4f", "filename": "src/test/ui/writing-to-immutable-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.nll.stderr?ref=c1cfacfb13f2bdf6bd94e81164c90b2449ec60a1", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n    |\n LL |     let v: Vec<isize> = vec![1, 2, 3];\n    |         - help: consider changing this to be mutable: `mut v`\n-LL |     v[1] = 4; //~ ERROR cannot borrow immutable local variable `v` as mutable\n+LL |     v[1] = 4;\n    |     ^ cannot borrow as mutable\n \n error: aborting due to previous error"}]}