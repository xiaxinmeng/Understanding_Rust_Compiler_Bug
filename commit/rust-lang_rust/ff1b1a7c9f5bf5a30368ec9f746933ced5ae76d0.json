{"sha": "ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMWIxYTdjOWY1YmY1YTMwMzY4ZWM5Zjc0NjkzM2NlZDVhZTc2ZDA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-24T08:49:17Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-24T08:49:17Z"}, "message": "Document some `span_lint_*` util functions", "tree": {"sha": "2ddb4e8acfee9df9e0dd9b204b561c6e61074306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ddb4e8acfee9df9e0dd9b204b561c6e61074306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxyWtIACgkQtvoGpuDi\nZluw7Q//QQoo+yfjmQ3xRHD+YB86Ub+nT5Zuz2W96S/qY1QmWyQQxesXvXNoHHAf\nGAjyxtZi1fGoMq8LlQbDwTKCuM+LDoqr8GPqyoG04zz15d31lXJ0DGkefU4JC2p+\nZ6g7Ee7rXjqXvSlztVLUcYacyqX8zHSHaQiRVc2vH3PeK5quVhwMC9OGIJTJCX8K\nipM3trHu2mnaxIx4bZqcd1tG9kzncV4eFQucLOY0we5Y1XuAiGI04CfJNJrURB8d\nMDEyqbe/ouiVR9/6IwyxX7Gb+tXzBuTkZ9gC07T8qxWm2v3KY46CzIOWTW2hOeSE\nOetXrsSuGNUhWs+JWgzOgyiiOJiWhGxM9ndzdYaYdKgl/DYlqz3+w5snrBY75+hX\nHhM8QforOCBBV4XSoAol9YMGoqnaMR41ik1WOVQdFdCwwYcgzkfcYEGn+MDOHt2z\ncSoObWu7Yme25O6NbspJbErk+yLP5kTbMgiVyPHbaFHbAkgtkVlIEZm3oE1P7/vs\nqLm5hwkjryuDaxDnjLzkYdCaqn3HeO8TSOrvLjNiKIfz86FnyGzeytC16uwsPZ9J\nLxEVBLognV2n7NWTUT9ghhhdUHbb6tOKVq6nEaazD+Nte9JqM4RwSzw79OVNQC9g\nn050qwNAXBIRRwf+PGQ9pfNeQE35BeX9ZN1cfaZiJYJ6CgjKhDE=\n=8Aeu\n-----END PGP SIGNATURE-----", "payload": "tree 2ddb4e8acfee9df9e0dd9b204b561c6e61074306\nparent 848116b410bc8f87085e404fccf150cb1ad36c0a\nauthor Philipp Hansch <dev@phansch.net> 1550998157 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1550998157 +0100\n\nDocument some `span_lint_*` util functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "html_url": "https://github.com/rust-lang/rust/commit/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848116b410bc8f87085e404fccf150cb1ad36c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/848116b410bc8f87085e404fccf150cb1ad36c0a", "html_url": "https://github.com/rust-lang/rust/commit/848116b410bc8f87085e404fccf150cb1ad36c0a"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "4c9a3327edac2f4b852e1f980246b94760433df4", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ff1b1a7c9f5bf5a30368ec9f746933ced5ae76d0", "patch": "@@ -634,10 +634,45 @@ impl<'a> DiagnosticWrapper<'a> {\n     }\n }\n \n+/// Emit a basic lint message with a `msg` and a `span`.\n+///\n+/// This is the most primitive of our lint emission methods and can\n+/// be a good way to get a new lint started.\n+///\n+/// Usually it's nicer to provide more context for lint messages.\n+/// Be sure the output is understandable when you use this method.\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// error: usage of mem::forget on Drop type\n+///   --> $DIR/mem_forget.rs:17:5\n+///    |\n+/// 17 |     std::mem::forget(seven);\n+///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+/// ```\n pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n     DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n }\n \n+/// Same as `span_lint` but with an extra `help` message.\n+///\n+/// Use this if you want to provide some general help but\n+/// can't provide a specific machine applicable suggestion.\n+///\n+/// The `help` message is not attached to any `Span`.\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// error: constant division of 0.0 with 0.0 will always result in NaN\n+///   --> $DIR/zero_div_zero.rs:6:25\n+///    |\n+/// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n+///    |                         ^^^^^^^^^^^^\n+///    |\n+///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+/// ```\n pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     cx: &'a T,\n     lint: &'static Lint,\n@@ -650,6 +685,27 @@ pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     db.docs_link(lint);\n }\n \n+/// Like `span_lint` but with a `note` section instead of a `help` message.\n+///\n+/// The `note` message is presented separately from the main lint message\n+/// and is attached to a specific span:\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+///   --> $DIR/drop_forget_ref.rs:10:5\n+///    |\n+/// 10 |     forget(&SomeStruct);\n+///    |     ^^^^^^^^^^^^^^^^^^^\n+///    |\n+///    = note: `-D clippy::forget-ref` implied by `-D warnings`\n+/// note: argument has type &SomeStruct\n+///   --> $DIR/drop_forget_ref.rs:10:12\n+///    |\n+/// 10 |     forget(&SomeStruct);\n+///    |            ^^^^^^^^^^^\n+/// ```\n pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     cx: &'a T,\n     lint: &'static Lint,"}]}