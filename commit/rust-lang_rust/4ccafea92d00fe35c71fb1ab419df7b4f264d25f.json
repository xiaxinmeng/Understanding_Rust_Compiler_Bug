{"sha": "4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "node_id": "C_kwDOAAsO6NoAKDRjY2FmZWE5MmQwMGZlMzVjNzFmYjFhYjQxOWRmN2I0ZjI2NGQyNWY", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-12-29T13:28:34Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-12-29T13:28:34Z"}, "message": "Merge commit '4f3ab69ea0a0908260944443c739426cc384ae1a' into clippyup", "tree": {"sha": "e24c4434116f894b6e275d9570f01ebe6c2b0421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24c4434116f894b6e275d9570f01ebe6c2b0421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "html_url": "https://github.com/rust-lang/rust/commit/4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24444945ec96dbe0dd593ed5bda57d22464a7106", "url": "https://api.github.com/repos/rust-lang/rust/commits/24444945ec96dbe0dd593ed5bda57d22464a7106", "html_url": "https://github.com/rust-lang/rust/commit/24444945ec96dbe0dd593ed5bda57d22464a7106"}], "stats": {"total": 2911, "additions": 2555, "deletions": 356}, "files": [{"sha": "02f3188f8be08209dfb700b07c7ceffe2ebd7670", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -4203,6 +4203,7 @@ Released 2018-09-13\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n [`float_equality_without_abs`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_equality_without_abs\n [`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n+[`fn_null_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_null_check\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any\n@@ -4460,6 +4461,7 @@ Released 2018-09-13\n [`partialeq_to_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_to_none\n [`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n [`pattern_type_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\n+[`permissions_set_readonly_false`]: https://rust-lang.github.io/rust-clippy/master/index.html#permissions_set_readonly_false\n [`positional_named_format_parameters`]: https://rust-lang.github.io/rust-clippy/master/index.html#positional_named_format_parameters\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n [`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n@@ -4545,6 +4547,7 @@ Released 2018-09-13\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n [`size_of_in_element_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_in_element_count\n+[`size_of_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_ref\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n@@ -4590,6 +4593,7 @@ Released 2018-09-13\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n+[`transmute_null_to_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn\n [`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n [`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref"}, {"sha": "c8e54d7b8e0c350446c0fe0f0eee6ac0e221fe38", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -54,7 +54,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv\n \n                         diag.span_suggestion(\n                             expr.span,\n-                            &format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n+                            format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n                             sugg,\n                             rustc_errors::Applicability::HasPlaceholders,\n                         );"}, {"sha": "2982460c9cfa49b6d2a4850eae3edd85a3daaa4f", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -161,6 +161,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::float_literal::LOSSY_FLOAT_LITERAL_INFO,\n     crate::floating_point_arithmetic::IMPRECISE_FLOPS_INFO,\n     crate::floating_point_arithmetic::SUBOPTIMAL_FLOPS_INFO,\n+    crate::fn_null_check::FN_NULL_CHECK_INFO,\n     crate::format::USELESS_FORMAT_INFO,\n     crate::format_args::FORMAT_IN_FORMAT_ARGS_INFO,\n     crate::format_args::TO_STRING_IN_FORMAT_ARGS_INFO,\n@@ -494,6 +495,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE_INFO,\n     crate::pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF_INFO,\n     crate::pattern_type_mismatch::PATTERN_TYPE_MISMATCH_INFO,\n+    crate::permissions_set_readonly_false::PERMISSIONS_SET_READONLY_FALSE_INFO,\n     crate::precedence::PRECEDENCE_INFO,\n     crate::ptr::CMP_NULL_INFO,\n     crate::ptr::INVALID_NULL_PTR_USAGE_INFO,\n@@ -535,6 +537,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES_INFO,\n     crate::single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS_INFO,\n     crate::size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT_INFO,\n+    crate::size_of_ref::SIZE_OF_REF_INFO,\n     crate::slow_vector_initialization::SLOW_VECTOR_INITIALIZATION_INFO,\n     crate::std_instead_of_core::ALLOC_INSTEAD_OF_CORE_INFO,\n     crate::std_instead_of_core::STD_INSTEAD_OF_ALLOC_INFO,\n@@ -568,6 +571,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::transmute::TRANSMUTE_INT_TO_BOOL_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_CHAR_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_FLOAT_INFO,\n+    crate::transmute::TRANSMUTE_NULL_TO_FN_INFO,\n     crate::transmute::TRANSMUTE_NUM_TO_BYTES_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_PTR_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_REF_INFO,"}, {"sha": "728941b8b3d9ab007fea377f4b2a6824ceca957e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1282,10 +1282,10 @@ fn referent_used_exactly_once<'tcx>(\n             possible_borrowers.push((body_owner_local_def_id, PossibleBorrowerMap::new(cx, mir)));\n         }\n         let possible_borrower = &mut possible_borrowers.last_mut().unwrap().1;\n-        // If `only_borrowers` were used here, the `copyable_iterator::warn` test would fail. The reason is\n-        // that `PossibleBorrowerVisitor::visit_terminator` considers `place.local` a possible borrower of\n-        // itself. See the comment in that method for an explanation as to why.\n-        possible_borrower.bounded_borrowers(&[local], &[local, place.local], place.local, location)\n+        // If `place.local` were not included here, the `copyable_iterator::warn` test would fail. The\n+        // reason is that `PossibleBorrowerVisitor::visit_terminator` considers `place.local` a possible\n+        // borrower of itself. See the comment in that method for an explanation as to why.\n+        possible_borrower.at_most_borrowers(cx, &[local, place.local], place.local, location)\n             && used_exactly_once(mir, place.local).unwrap_or(false)\n     } else {\n         false"}, {"sha": "f95b628e6c31eb67b3bbd17e9b22534d0460ebe8", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -324,7 +324,7 @@ fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n                     let maybe_neg_sugg = |expr, hir_id| {\n                         let sugg = Sugg::hir(cx, expr, \"..\");\n                         if matches!(op, BinOpKind::Sub) && hir_id == rhs.hir_id {\n-                            format!(\"-{sugg}\")\n+                            format!(\"-{}\", sugg.maybe_par())\n                         } else {\n                             sugg.to_string()\n                         }"}, {"sha": "91c8c340ce28feb9cc84c473c8b0323762ab2cd2", "filename": "clippy_lints/src/fn_null_check.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffn_null_check.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,106 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for comparing a function pointer to null.\n+    ///\n+    /// ### Why is this bad?\n+    /// Function pointers are assumed to not be null.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let fn_ptr: fn() = /* somehow obtained nullable function pointer */\n+    ///\n+    /// if (fn_ptr as *const ()).is_null() { ... }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let fn_ptr: Option<fn()> = /* somehow obtained nullable function pointer */\n+    ///\n+    /// if fn_ptr.is_none() { ... }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub FN_NULL_CHECK,\n+    correctness,\n+    \"`fn()` type assumed to be nullable\"\n+}\n+declare_lint_pass!(FnNullCheck => [FN_NULL_CHECK]);\n+\n+fn lint_expr(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    span_lint_and_help(\n+        cx,\n+        FN_NULL_CHECK,\n+        expr.span,\n+        \"function pointer assumed to be nullable, even though it isn't\",\n+        None,\n+        \"try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\",\n+    );\n+}\n+\n+fn is_fn_ptr_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Cast(cast_expr, cast_ty) = expr.kind\n+        && let TyKind::Ptr(_) = cast_ty.kind\n+    {\n+        cx.typeck_results().expr_ty_adjusted(cast_expr).is_fn()\n+    } else {\n+        false\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        match expr.kind {\n+            // Catching:\n+            // (fn_ptr as *<const/mut> <ty>).is_null()\n+            ExprKind::MethodCall(method_name, receiver, _, _)\n+                if method_name.ident.as_str() == \"is_null\" && is_fn_ptr_cast(cx, receiver) =>\n+            {\n+                lint_expr(cx, expr);\n+            },\n+\n+            ExprKind::Binary(op, left, right) if matches!(op.node, BinOpKind::Eq) => {\n+                let to_check: &Expr<'_>;\n+                if is_fn_ptr_cast(cx, left) {\n+                    to_check = right;\n+                } else if is_fn_ptr_cast(cx, right) {\n+                    to_check = left;\n+                } else {\n+                    return;\n+                }\n+\n+                match to_check.kind {\n+                    // Catching:\n+                    // (fn_ptr as *<const/mut> <ty>) == (0 as <ty>)\n+                    ExprKind::Cast(cast_expr, _) if is_integer_literal(cast_expr, 0) => {\n+                        lint_expr(cx, expr);\n+                    },\n+\n+                    // Catching:\n+                    // (fn_ptr as *<const/mut> <ty>) == std::ptr::null()\n+                    ExprKind::Call(func, []) if is_path_diagnostic_item(cx, func, sym::ptr_null) => {\n+                        lint_expr(cx, expr);\n+                    },\n+\n+                    // Catching:\n+                    // (fn_ptr as *<const/mut> <ty>) == <const that evaluates to null_ptr>\n+                    _ if matches!(\n+                        constant(cx, cx.typeck_results(), to_check),\n+                        Some((Constant::RawPtr(0), _))\n+                    ) =>\n+                    {\n+                        lint_expr(cx, expr);\n+                    },\n+\n+                    _ => {},\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "043112bbc95967dc66c3814e3d02013ff76932cf", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -382,7 +382,7 @@ fn check_format_in_format_args(\n         call_site,\n         &format!(\"`format!` in `{name}!` args\"),\n         |diag| {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"combine the `format!(..)` arguments with the outer `{name}!(..)` call\"\n             ));\n             diag.help(\"or consider changing `format!` to `format_args!`\");"}, {"sha": "9dbce3f889bef117ddfcbba93d9de08a85bd60bf", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -63,30 +63,53 @@ declare_clippy_lint! {\n     /// arguments but are not marked `unsafe`.\n     ///\n     /// ### Why is this bad?\n-    /// The function should probably be marked `unsafe`, since\n-    /// for an arbitrary raw pointer, there is no way of telling for sure if it is\n-    /// valid.\n+    /// The function should almost definitely be marked `unsafe`, since for an\n+    /// arbitrary raw pointer, there is no way of telling for sure if it is valid.\n+    ///\n+    /// In general, this lint should **never be disabled** unless it is definitely a\n+    /// false positive (please submit an issue if so) since it breaks Rust's\n+    /// soundness guarantees, directly exposing API users to potentially dangerous\n+    /// program behavior. This is also true for internal APIs, as it is easy to leak\n+    /// unsoundness.\n+    ///\n+    /// ### Context\n+    /// In Rust, an `unsafe {...}` block is used to indicate that the code in that\n+    /// section has been verified in some way that the compiler can not. For a\n+    /// function that accepts a raw pointer then accesses the pointer's data, this is\n+    /// generally impossible as the incoming pointer could point anywhere, valid or\n+    /// not. So, the signature should be marked `unsafe fn`: this indicates that the\n+    /// function's caller must provide some verification that the arguments it sends\n+    /// are valid (and then call the function within an `unsafe` block).\n     ///\n     /// ### Known problems\n     /// * It does not check functions recursively so if the pointer is passed to a\n     /// private non-`unsafe` function which does the dereferencing, the lint won't\n-    /// trigger.\n+    /// trigger (false negative).\n     /// * It only checks for arguments whose type are raw pointers, not raw pointers\n     /// got from an argument in some other way (`fn foo(bar: &[*const u8])` or\n-    /// `some_argument.get_raw_ptr()`).\n+    /// `some_argument.get_raw_ptr()`) (false negative).\n     ///\n     /// ### Example\n     /// ```rust,ignore\n     /// pub fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }\n+    ///\n+    /// // this call \"looks\" safe but will segfault or worse!\n+    /// // foo(invalid_ptr);\n     /// ```\n     ///\n     /// Use instead:\n     /// ```rust,ignore\n     /// pub unsafe fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }\n+    ///\n+    /// // this would cause a compiler error for calling without `unsafe`\n+    /// // foo(invalid_ptr);\n+    ///\n+    /// // sound call if the caller knows the pointer is valid\n+    /// unsafe { foo(valid_ptr); }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NOT_UNSAFE_PTR_ARG_DEREF,"}, {"sha": "db637dfc068d4840775e6909519d8616ff38a19f", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -34,12 +34,12 @@ declare_clippy_lint! {\n }\n \n pub struct LargeConstArrays {\n-    maximum_allowed_size: u64,\n+    maximum_allowed_size: u128,\n }\n \n impl LargeConstArrays {\n     #[must_use]\n-    pub fn new(maximum_allowed_size: u64) -> Self {\n+    pub fn new(maximum_allowed_size: u128) -> Self {\n         Self { maximum_allowed_size }\n     }\n }\n@@ -56,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n             if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n-            if self.maximum_allowed_size < element_count * element_size;\n+            if self.maximum_allowed_size < u128::from(element_count) * u128::from(element_size);\n \n             then {\n                 let hi_pos = item.ident.span.lo() - BytePos::from_usize(1);"}, {"sha": "b8d4abdbb781acacba0f3910ff55526347ea8b9c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         );\n                         diag.span_label(\n                             def.variants[variants_size[1].ind].span,\n-                            &if variants_size[1].fields_size.is_empty() {\n+                            if variants_size[1].fields_size.is_empty() {\n                                 \"the second-largest variant carries no data at all\".to_owned()\n                             } else {\n                                 format!("}, {"sha": "89ae83d48f536795f9aecc0d0de69a353d043177", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -24,12 +24,12 @@ declare_clippy_lint! {\n }\n \n pub struct LargeStackArrays {\n-    maximum_allowed_size: u64,\n+    maximum_allowed_size: u128,\n }\n \n impl LargeStackArrays {\n     #[must_use]\n-    pub fn new(maximum_allowed_size: u64) -> Self {\n+    pub fn new(maximum_allowed_size: u128) -> Self {\n         Self { maximum_allowed_size }\n     }\n }\n@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n           && let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes())\n           && !cx.tcx.hir().parent_iter(expr.hir_id)\n               .any(|(_, node)| matches!(node, Node::Item(Item { kind: ItemKind::Static(..), .. })))\n-          && self.maximum_allowed_size < element_count * element_size {\n+          && self.maximum_allowed_size < u128::from(element_count) * u128::from(element_size) {\n               span_lint_and_help(\n                   cx,\n                   LARGE_STACK_ARRAYS,"}, {"sha": "9eba46756299c57bc178a48fc92b65a4af99fc38", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -361,7 +361,7 @@ fn check_for_is_empty<'tcx>(\n             db.span_note(span, \"`is_empty` defined here\");\n         }\n         if let Some(self_kind) = self_kind {\n-            db.note(&output.expected_sig(self_kind));\n+            db.note(output.expected_sig(self_kind));\n         }\n     });\n }"}, {"sha": "dcd8ca81ae87210dd1e033adec09e657274ded6a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -125,6 +125,7 @@ mod explicit_write;\n mod fallible_impl_from;\n mod float_literal;\n mod floating_point_arithmetic;\n+mod fn_null_check;\n mod format;\n mod format_args;\n mod format_impl;\n@@ -234,6 +235,7 @@ mod partialeq_ne_impl;\n mod partialeq_to_none;\n mod pass_by_ref_or_value;\n mod pattern_type_mismatch;\n+mod permissions_set_readonly_false;\n mod precedence;\n mod ptr;\n mod ptr_offset_with_cast;\n@@ -263,6 +265,7 @@ mod shadow;\n mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n+mod size_of_ref;\n mod slow_vector_initialization;\n mod std_instead_of_core;\n mod strings;\n@@ -334,7 +337,7 @@ pub fn read_conf(sess: &Session, path: &io::Result<Option<PathBuf>>) -> Conf {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n         Err(error) => {\n-            sess.struct_err(&format!(\"error finding Clippy's configuration file: {error}\"))\n+            sess.struct_err(format!(\"error finding Clippy's configuration file: {error}\"))\n                 .emit();\n             return Conf::default();\n         },\n@@ -902,6 +905,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n     store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n+    store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n+    store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n+    store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1953ee8a717525a9ab3ac883bc0def758fa5875b", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -77,7 +77,7 @@ pub(super) fn check<'tcx>(\n                                 applicability,\n                             );\n \n-                            diag.note(&format!(\n+                            diag.note(format!(\n                                 \"`{name}` is of type `{int_name}`, making it ineligible for `Iterator::enumerate`\"\n                             ));\n                         },"}, {"sha": "af7c0563555792bfabba1cf1776cf44abaf66225", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                                 let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n-                                    &help,\n+                                    help,\n                                     format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n                                     Applicability::MachineApplicable\n                                 );"}, {"sha": "f239736d38a4cfdaf74cbe90a2c9ea127cb045fc", "filename": "clippy_lints/src/manual_clamp.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_clamp.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -35,6 +35,9 @@ declare_clippy_lint! {\n     /// Some may consider panicking in these situations to be desirable, but it also may\n     /// introduce panicking where there wasn't any before.\n     ///\n+    /// See also [the discussion in the\n+    /// PR](https://github.com/rust-lang/rust-clippy/pull/9484#issuecomment-1278922613).\n+    ///\n     /// ### Examples\n     /// ```rust\n     /// # let (input, min, max) = (0, -2, 1);\n@@ -78,7 +81,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.66.0\"]\n     pub MANUAL_CLAMP,\n-    complexity,\n+    nursery,\n     \"using a clamp pattern instead of the clamp function\"\n }\n impl_lint_pass!(ManualClamp => [MANUAL_CLAMP]);"}, {"sha": "c795c1d9a16c321b9a9260df72206653d8516558", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n \n                     let test_span = expr.span.until(then.span);\n                     span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {kind_word} manually\"), |diag| {\n-                        diag.span_note(test_span, &format!(\"the {kind_word} was tested here\"));\n+                        diag.span_note(test_span, format!(\"the {kind_word} was tested here\"));\n                         multispan_sugg(\n                             diag,\n                             &format!(\"try using the `strip_{kind_word}` method\"),"}, {"sha": "f6bf0e7aa1ad9bcfb17c896b116bdab9df215cae", "filename": "clippy_lints/src/matches/manual_filter.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::contains_unsafe_block;\n use clippy_utils::{is_res_lang_ctor, path_res, path_to_local_id};\n \n-use rustc_hir::LangItem::OptionSome;\n+use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Arm, Expr, ExprKind, HirId, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_span::{sym, SyntaxContext};\n@@ -25,15 +25,13 @@ fn get_cond_expr<'tcx>(\n         if let Some(block_expr) = peels_blocks_incl_unsafe_opt(expr);\n         if let ExprKind::If(cond, then_expr, Some(else_expr)) = block_expr.kind;\n         if let PatKind::Binding(_,target, ..) = pat.kind;\n-        if let (then_visitor, else_visitor)\n-            = (is_some_expr(cx, target, ctxt, then_expr),\n-                is_some_expr(cx, target, ctxt, else_expr));\n-        if then_visitor != else_visitor; // check that one expr resolves to `Some(x)`, the other to `None`\n+        if is_some_expr(cx, target, ctxt, then_expr) && is_none_expr(cx, else_expr)\n+            || is_none_expr(cx, then_expr) && is_some_expr(cx, target, ctxt, else_expr); // check that one expr resolves to `Some(x)`, the other to `None`\n         then {\n             return Some(SomeExpr {\n                     expr: peels_blocks_incl_unsafe(cond.peel_drop_temps()),\n                     needs_unsafe_block: contains_unsafe_block(cx, expr),\n-                    needs_negated: !then_visitor // if the `then_expr` resolves to `None`, need to negate the cond\n+                    needs_negated: is_none_expr(cx, then_expr) // if the `then_expr` resolves to `None`, need to negate the cond\n                 })\n             }\n     };\n@@ -74,6 +72,13 @@ fn is_some_expr(cx: &LateContext<'_>, target: HirId, ctxt: SyntaxContext, expr:\n     false\n }\n \n+fn is_none_expr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(inner_expr) = peels_blocks_incl_unsafe_opt(expr) {\n+        return is_res_lang_ctor(cx, path_res(cx, inner_expr), OptionNone);\n+    };\n+    false\n+}\n+\n // given the closure: `|<pattern>| <expr>`\n // returns `|&<pattern>| <expr>`\n fn add_ampersand_if_copy(body_str: String, has_copy_trait: bool) -> String {"}, {"sha": "c94a1f763306e14758f0cd6874dd900cfcdb1b03", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -31,19 +31,11 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n     };\n \n     // Do we need to add ';' to suggestion ?\n-    match match_body.kind {\n-        ExprKind::Block(block, _) => {\n-            // macro + expr_ty(body) == ()\n-            if block.span.from_expansion() && cx.typeck_results().expr_ty(match_body).is_unit() {\n-                snippet_body.push(';');\n-            }\n-        },\n-        _ => {\n-            // expr_ty(body) == ()\n-            if cx.typeck_results().expr_ty(match_body).is_unit() {\n-                snippet_body.push(';');\n-            }\n-        },\n+    if let ExprKind::Block(block, _) = match_body.kind {\n+        // macro + expr_ty(body) == ()\n+        if block.span.from_expansion() && cx.typeck_results().expr_ty(match_body).is_unit() {\n+            snippet_body.push(';');\n+        }\n     }\n \n     let mut applicability = Applicability::MaybeIncorrect;"}, {"sha": "59de8c0384ba0de464a4a0290983d75375f39b70", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -30,7 +30,7 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n     let mut has_non_wild = false;\n     for arm in arms {\n         match peel_hir_pat_refs(arm.pat).0.kind {\n-            PatKind::Wild => wildcard_span = Some(arm.pat.span),\n+            PatKind::Wild if arm.guard.is_none() => wildcard_span = Some(arm.pat.span),\n             PatKind::Binding(_, _, ident, None) => {\n                 wildcard_span = Some(arm.pat.span);\n                 wildcard_ident = Some(ident);"}, {"sha": "424482859ee8797c2bced583be00c1e0e8696776", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -36,7 +36,7 @@ pub fn check(\n                 expr.span,\n                 &format!(\"calling `to_string` on `{arg_ty}`\"),\n                 |diag| {\n-                    diag.help(&format!(\n+                    diag.help(format!(\n                         \"`{self_ty}` implements `ToString` through a slower blanket impl, but `{deref_self_ty}` has a fast specialization of `ToString`\"\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;"}, {"sha": "279175e20c37fcd5126f908a4cd32ba4663e4a04", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -29,7 +29,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n                         application = Applicability::Unspecified;\n                         diag.span_help(\n                             pat.span,\n-                            &format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n+                            format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n                         );\n                     }\n                 }"}, {"sha": "4c6328481e438817cf82f843466ff3f406dc456f", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -84,7 +84,7 @@ pub(super) fn check<'tcx>(\n                 suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{unwrap_snippet}, \")));\n             }\n \n-            diag.multipart_suggestion(&format!(\"use `{suggest}` instead\"), suggestion, applicability);\n+            diag.multipart_suggestion(format!(\"use `{suggest}` instead\"), suggestion, applicability);\n         });\n     }\n }"}, {"sha": "d00708e828eaeb791391a8797bd6980d8e36399a", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -167,7 +167,7 @@ fn check_manual_split_once_indirect(\n             };\n             diag.span_suggestion_verbose(\n                 local.span,\n-                &format!(\"try `{r}split_once`\"),\n+                format!(\"try `{r}split_once`\"),\n                 format!(\"let ({lhs}, {rhs}) = {self_snip}.{r}split_once({pat_snip}){unwrap};\"),\n                 app,\n             );"}, {"sha": "47e2e744112c5a1dc89d29c1d27d0033a9edf3bf", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -62,7 +62,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(cx, UNNECESSARY_LAZY_EVALUATIONS, expr.span, msg, |diag| {\n                         diag.span_suggestion(\n                             span,\n-                            &format!(\"use `{simplify_using}(..)` instead\"),\n+                            format!(\"use `{simplify_using}(..)` instead\"),\n                             format!(\"{simplify_using}({})\", snippet(cx, body_expr.span, \"..\")),\n                             applicability,\n                         );"}, {"sha": "5a9387b34cc1931a68adf7ae5f3fa013e3d72592", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -284,7 +284,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion(\n                         assign.lhs_span,\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         let_snippet,\n                         Applicability::MachineApplicable,\n                     );\n@@ -304,7 +304,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n@@ -335,7 +335,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         format!(\"{let_snippet} = \"),\n                         applicability,\n                     );"}, {"sha": "7376ab0c846d954c7c3c39e75b177a83e5f4ff82", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -125,7 +125,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n             if is_string { \"string\" } else { \"byte string\" }\n         ),\n         |diag| {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"octal escapes are not supported, `\\\\0` is always a null {}\",\n                 if is_string { \"character\" } else { \"byte\" }\n             ));\n@@ -139,7 +139,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n             // suggestion 2: unambiguous null byte\n             diag.span_suggestion(\n                 span,\n-                &format!(\n+                format!(\n                     \"if the null {} is intended, disambiguate using\",\n                     if is_string { \"character\" } else { \"byte\" }\n                 ),"}, {"sha": "015f6c14e7612f2c724711b9fed7f8786c433f02", "filename": "clippy_lints/src/operators/misrefactored_assign_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -50,7 +50,7 @@ fn lint_misrefactored_assign_op(\n                 let long = format!(\"{snip_a} = {}\", sugg::make_binop(op.into(), a, r));\n                 diag.span_suggestion(\n                     expr.span,\n-                    &format!(\n+                    format!(\n                         \"did you mean `{snip_a} = {snip_a} {} {snip_r}` or `{long}`? Consider replacing it with\",\n                         op.as_str()\n                     ),"}, {"sha": "e7095ec191f7d50998e22a2eedec2e0125d6f4aa", "filename": "clippy_lints/src/permissions_set_readonly_false.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,52 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::paths;\n+use clippy_utils::ty::match_type;\n+use rustc_ast::ast::LitKind;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`.\n+    ///\n+    /// ### Why is this bad?\n+    /// On Unix platforms this results in the file being world writable,\n+    /// equivalent to `chmod a+w <file>`.\n+    /// ### Example\n+    /// ```rust\n+    /// use std::fs::File;\n+    /// let f = File::create(\"foo.txt\").unwrap();\n+    /// let metadata = f.metadata().unwrap();\n+    /// let mut permissions = metadata.permissions();\n+    /// permissions.set_readonly(false);\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub PERMISSIONS_SET_READONLY_FALSE,\n+    suspicious,\n+    \"Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`\"\n+}\n+declare_lint_pass!(PermissionsSetReadonlyFalse => [PERMISSIONS_SET_READONLY_FALSE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PermissionsSetReadonlyFalse {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::MethodCall(path, receiver, [arg], _) = &expr.kind\n+            && match_type(cx, cx.typeck_results().expr_ty(receiver), &paths::PERMISSIONS)\n+            && path.ident.name == sym!(set_readonly)\n+            && let ExprKind::Lit(lit) = &arg.kind\n+            && LitKind::Bool(false) == lit.node\n+        {\n+            span_lint_and_then(\n+                cx,\n+                PERMISSIONS_SET_READONLY_FALSE,\n+                expr.span,\n+                \"call to `set_readonly` with argument `false`\",\n+                |diag| {\n+                    diag.note(\"on Unix platforms this results in the file being world writable\");\n+                    diag.help(\"you can set the desired permissions using `PermissionsExt`. For more information, see\\n\\\n+                        https://doc.rust-lang.org/std/os/unix/fs/trait.PermissionsExt.html\");\n+                }\n+            );\n+        }\n+    }\n+}"}, {"sha": "0e7c5cca7240bd02ba8a0523905de512d6930b8f", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // `res = clone(arg)` can be turned into `res = move arg;`\n                 // if `arg` is the only borrow of `cloned` at this point.\n \n-                if cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc) {\n+                if cannot_move_out || !possible_borrower.at_most_borrowers(cx, &[arg], cloned, loc) {\n                     continue;\n                 }\n \n@@ -178,7 +178,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // StorageDead(pred_arg);\n                 // res = to_path_buf(cloned);\n                 // ```\n-                if cannot_move_out || !possible_borrower.only_borrowers(&[arg, cloned], local, loc) {\n+                if cannot_move_out || !possible_borrower.at_most_borrowers(cx, &[arg, cloned], local, loc) {\n                     continue;\n                 }\n "}, {"sha": "d4d506605206b7734b6e2c0685d57f1bea663d29", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -6,7 +6,7 @@ use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, MatchSource, PatKind, StmtKind};\n+use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, LangItem, MatchSource, PatKind, QPath, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -207,6 +207,12 @@ fn check_final_expr<'tcx>(\n     match &peeled_drop_expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n+            // if desugar of `do yeet`, don't lint\n+            if let Some(inner_expr) = inner\n+                && let ExprKind::Call(path_expr, _) = inner_expr.kind\n+                && let ExprKind::Path(QPath::LangItem(LangItem::TryTraitFromYeet, _, _)) = path_expr.kind {\n+                    return;\n+            }\n             if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {"}, {"sha": "17763128cd143bcbf9cc446e6cf3c9c72e6c3e0f", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     |diag| {\n                                         diag.span_note(\n                                             trait_method_span,\n-                                            &format!(\"existing `{method_name}` defined here\"),\n+                                            format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                         // iterate on trait_spans?\n                                         diag.span_note(\n                                             trait_spans[0],\n-                                            &format!(\"existing `{method_name}` defined here\"),\n+                                            format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );"}, {"sha": "3fcdb4288ce6deb1cdc5f89f8f38895545d17ba1", "filename": "clippy_lints/src/size_of_ref.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fsize_of_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fsize_of_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_ref.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,73 @@\n+use clippy_utils::{diagnostics::span_lint_and_help, path_def_id, ty::peel_mid_ty_refs};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for calls to `std::mem::size_of_val()` where the argument is\n+    /// a reference to a reference.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Calling `size_of_val()` with a reference to a reference as the argument\n+    /// yields the size of the reference-type, not the size of the value behind\n+    /// the reference.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo {\n+    ///     buffer: [u8],\n+    /// }\n+    ///\n+    /// impl Foo {\n+    ///     fn size(&self) -> usize {\n+    ///         // Note that `&self` as an argument is a `&&Foo`: Because `self`\n+    ///         // is already a reference, `&self` is a double-reference.\n+    ///         // The return value of `size_of_val()` therefor is the\n+    ///         // size of the reference-type, not the size of `self`.\n+    ///         std::mem::size_of_val(&self)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct Foo {\n+    ///     buffer: [u8],\n+    /// }\n+    ///\n+    /// impl Foo {\n+    ///     fn size(&self) -> usize {\n+    ///         // Correct\n+    ///         std::mem::size_of_val(self)\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub SIZE_OF_REF,\n+    suspicious,\n+    \"Argument to `std::mem::size_of_val()` is a double-reference, which is almost certainly unintended\"\n+}\n+declare_lint_pass!(SizeOfRef => [SIZE_OF_REF]);\n+\n+impl LateLintPass<'_> for SizeOfRef {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let Some(def_id) = path_def_id(cx, path)\n+            && cx.tcx.is_diagnostic_item(sym::mem_size_of_val, def_id)\n+            && let arg_ty = cx.typeck_results().expr_ty(arg)\n+            && peel_mid_ty_refs(arg_ty).1 > 1\n+        {\n+            span_lint_and_help(\n+                cx,\n+                SIZE_OF_REF,\n+                expr.span,\n+                \"argument to `std::mem::size_of_val()` is a reference to a reference\",\n+                None,\n+                \"dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "17e9cc5f6b7c7a7d72a5fd73fed5f043c366708d", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -132,7 +132,7 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n                 applicability,\n             );\n             if !is_xor_based {\n-                diag.note(&format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n+                diag.note(format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n             }\n         },\n     );\n@@ -214,7 +214,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                                 Applicability::MaybeIncorrect,\n                             );\n                             diag.note(\n-                                &format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n+                                format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n                             );\n                         }\n                     });"}, {"sha": "691d759d7739dbea81c65ab12c1a12855cda657e", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -3,6 +3,7 @@ mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n+mod transmute_null_to_fn;\n mod transmute_num_to_bytes;\n mod transmute_ptr_to_ptr;\n mod transmute_ptr_to_ref;\n@@ -409,6 +410,34 @@ declare_clippy_lint! {\n     \"transmutes from a null pointer to a reference, which is undefined behavior\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for null function pointer creation through transmute.\n+    ///\n+    /// ### Why is this bad?\n+    /// Creating a null function pointer is undefined behavior.\n+    ///\n+    /// More info: https://doc.rust-lang.org/nomicon/ffi.html#the-nullable-pointer-optimization\n+    ///\n+    /// ### Known problems\n+    /// Not all cases can be detected at the moment of this writing.\n+    /// For example, variables which hold a null pointer and are then fed to a `transmute`\n+    /// call, aren't detectable yet.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let null_fn: fn() = unsafe { std::mem::transmute( std::ptr::null::<()>() ) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let null_fn: Option<fn()> = None;\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub TRANSMUTE_NULL_TO_FN,\n+    correctness,\n+    \"transmute results in a null function pointer, which is undefined behavior\"\n+}\n+\n pub struct Transmute {\n     msrv: Msrv,\n }\n@@ -428,6 +457,7 @@ impl_lint_pass!(Transmute => [\n     TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n     TRANSMUTE_UNDEFINED_REPR,\n     TRANSMUTING_NULL,\n+    TRANSMUTE_NULL_TO_FN,\n ]);\n impl Transmute {\n     #[must_use]\n@@ -461,6 +491,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmuting_null::check(cx, e, arg, to_ty)\n+                    | transmute_null_to_fn::check(cx, e, arg, to_ty)\n                     | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, &self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)"}, {"sha": "e75d7f6bf1d5295eb4134622bcc38b85a2de98ed", "filename": "clippy_lints/src/transmute/transmute_null_to_fn.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,64 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+use rustc_span::symbol::sym;\n+\n+use super::TRANSMUTE_NULL_TO_FN;\n+\n+fn lint_expr(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    span_lint_and_then(\n+        cx,\n+        TRANSMUTE_NULL_TO_FN,\n+        expr.span,\n+        \"transmuting a known null pointer into a function pointer\",\n+        |diag| {\n+            diag.span_label(expr.span, \"this transmute results in undefined behavior\");\n+            diag.help(\n+               \"try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\"\n+            );\n+        },\n+    );\n+}\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'tcx Expr<'_>, to_ty: Ty<'tcx>) -> bool {\n+    if !to_ty.is_fn() {\n+        return false;\n+    }\n+\n+    match arg.kind {\n+        // Catching:\n+        // transmute over constants that resolve to `null`.\n+        ExprKind::Path(ref _qpath)\n+            if matches!(constant(cx, cx.typeck_results(), arg), Some((Constant::RawPtr(0), _))) =>\n+        {\n+            lint_expr(cx, expr);\n+            true\n+        },\n+\n+        // Catching:\n+        // `std::mem::transmute(0 as *const i32)`\n+        ExprKind::Cast(inner_expr, _cast_ty) if is_integer_literal(inner_expr, 0) => {\n+            lint_expr(cx, expr);\n+            true\n+        },\n+\n+        // Catching:\n+        // `std::mem::transmute(std::ptr::null::<i32>())`\n+        ExprKind::Call(func1, []) if is_path_diagnostic_item(cx, func1, sym::ptr_null) => {\n+            lint_expr(cx, expr);\n+            true\n+        },\n+\n+        _ => {\n+            // FIXME:\n+            // Also catch transmutations of variables which are known nulls.\n+            // To do this, MIR const propagation seems to be the better tool.\n+            // Whenever MIR const prop routines are more developed, this will\n+            // become available. As of this writing (25/03/19) it is not yet.\n+            false\n+        },\n+    }\n+}"}, {"sha": "af0242348ac295facaeff4a24e661b6c8863e3e6", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -77,7 +77,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -91,7 +91,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute to `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -119,16 +119,16 @@ pub(super) fn check<'tcx>(\n                     ),\n                     |diag| {\n                         if let Some(same_adt_did) = same_adt_did {\n-                            diag.note(&format!(\n+                            diag.note(format!(\n                                 \"two instances of the same generic type (`{}`) may have different layouts\",\n                                 cx.tcx.item_name(same_adt_did)\n                             ));\n                         } else {\n                             if from_ty_orig.peel_refs() != from_ty {\n-                                diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                                diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                             }\n                             if to_ty_orig.peel_refs() != to_ty {\n-                                diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                                diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                             }\n                         }\n                     },\n@@ -146,7 +146,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty {\n-                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -163,7 +163,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute into `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty {\n-                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );"}, {"sha": "b79d4e915a2718b70ae063b686aa7ad66918ddd0", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n             &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n             |diag| {\n                 if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                    let sugg = arg.as_ty(&to_ty.to_string()).to_string();\n+                    let sugg = arg.as_ty(to_ty.to_string()).to_string();\n                     diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n                 }\n             },"}, {"sha": "1e407fc4138c1ecbcc184c611170b7c754e6c043", "filename": "clippy_lints/src/transmute/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -18,8 +18,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     // Catching transmute over constants that resolve to `null`.\n     let mut const_eval_context = constant_context(cx, cx.typeck_results());\n     if let ExprKind::Path(ref _qpath) = arg.kind &&\n-        let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg) &&\n-        x == 0\n+        let Some(Constant::RawPtr(0)) = const_eval_context.expr(arg)\n     {\n         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n         return true;"}, {"sha": "871c3fadbba71b84f7c1d18364f44fb40fb9293f", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -61,7 +61,7 @@ pub(super) fn check<'tcx>(\n                 \"transmute from an integer to a pointer\",\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        diag.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()), Applicability::Unspecified);\n+                        diag.span_suggestion(e.span, \"try\", arg.as_ty(to_ty.to_string()), Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "f9b9a66b5fa461b17e2e99dd41da1dfd8192ccaf", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             &format!(\"usage of `{outer_sym}<{generic_snippet}>`\"),\n             |diag| {\n                 diag.span_suggestion(hir_ty.span, \"try\", format!(\"{generic_snippet}\"), applicability);\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{generic_snippet}` is already a pointer, `{outer_sym}<{generic_snippet}>` allocates a pointer on the heap\"\n                 ));\n             },\n@@ -78,7 +78,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                     format!(\"{outer_sym}<{generic_snippet}>\"),\n                     applicability,\n                 );\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n             },\n@@ -91,10 +91,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             hir_ty.span,\n             &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n-                diag.help(&format!(\n+                diag.help(format!(\n                     \"consider using just `{outer_sym}<{generic_snippet}>` or `{inner_sym}<{generic_snippet}>`\"\n                 ));\n             },"}, {"sha": "ef9f740f7047c08b00c022b2ca6c74c7e7ab162d", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -129,7 +129,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n \n                 if arg_snippets_without_empty_blocks.is_empty() {\n                     db.multipart_suggestion(\n-                        &format!(\"use {singular}unit literal{plural} instead\"),\n+                        format!(\"use {singular}unit literal{plural} instead\"),\n                         args_to_recover\n                             .iter()\n                             .map(|arg| (arg.span, \"()\".to_string()))\n@@ -142,7 +142,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                     let it_or_them = if plural { \"them\" } else { \"it\" };\n                     db.span_suggestion(\n                         expr.span,\n-                        &format!(\n+                        format!(\n                             \"{or}move the expression{empty_or_s} in front of the call and replace {it_or_them} with the unit literal `()`\"\n                         ),\n                         sugg,"}, {"sha": "a95e7b613746dbfc33bb02f1df7a02bc13ef4179", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n-use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, paths};\n+use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n+use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, path_to_local, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, MatchSource, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -81,16 +81,24 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if is_trait_method(cx, e, sym::IntoIterator) && name.ident.name == sym::into_iter {\n-                    if let Some(parent_expr) = get_parent_expr(cx, e) {\n-                        if let ExprKind::MethodCall(parent_name, ..) = parent_expr.kind {\n-                            if parent_name.ident.name != sym::into_iter {\n-                                return;\n-                            }\n-                        }\n+                    if get_parent_expr(cx, e).is_some() &&\n+                       let Some(id) = path_to_local(recv) &&\n+                       let Node::Pat(pat) = cx.tcx.hir().get(id) &&\n+                       let PatKind::Binding(ann, ..) = pat.kind &&\n+                       ann != BindingAnnotation::MUT\n+                    {\n+                        // Do not remove .into_iter() applied to a non-mutable local variable used in\n+                        // a larger expression context as it would differ in mutability.\n+                        return;\n                     }\n+\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(recv);\n-                    if same_type_and_consts(a, b) {\n+\n+                    // If the types are identical then .into_iter() can be removed, unless the type\n+                    // implements Copy, in which case .into_iter() returns a copy of the receiver and\n+                    // cannot be safely omitted.\n+                    if same_type_and_consts(a, b) && !is_copy(cx, b) {\n                         let sugg = snippet(cx, recv.span, \"<expr>\").into_owned();\n                         span_lint_and_sugg(\n                             cx,"}, {"sha": "c1589c771c462f6379ac9e3f16bfd0fb4b86fb08", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -333,7 +333,7 @@ define_Conf! {\n     /// Lint: LARGE_STACK_ARRAYS, LARGE_CONST_ARRAYS.\n     ///\n     /// The maximum allowed size for arrays on the stack\n-    (array_size_threshold: u64 = 512_000),\n+    (array_size_threshold: u128 = 512_000),\n     /// Lint: VEC_BOX.\n     ///\n     /// The size of the boxed type in bytes, where boxing in a `Vec` is allowed"}, {"sha": "929544cd69d5b96de9aabd3c2a80404818bbeaf2", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -558,8 +558,8 @@ impl fmt::Display for ClippyConfiguration {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(\n             f,\n-            \"* `{}`: `{}`: {} (defaults to `{}`)\",\n-            self.name, self.config_type, self.doc, self.default\n+            \"* `{}`: `{}`(defaults to `{}`): {}\",\n+            self.name, self.config_type, self.default, self.doc\n         )\n     }\n }"}, {"sha": "df3350388817ed9ca3765d3bd6c1a45882611353", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -377,7 +377,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                     // print!(\"\\n\"), write!(f, \"\\n\")\n \n                     diag.multipart_suggestion(\n-                        &format!(\"use `{name}ln!` instead\"),\n+                        format!(\"use `{name}ln!` instead\"),\n                         vec![(name_span, format!(\"{name}ln\")), (format_string_span, String::new())],\n                         Applicability::MachineApplicable,\n                     );\n@@ -388,7 +388,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                     let newline_span = format_string_span.with_lo(hi - BytePos(3)).with_hi(hi - BytePos(1));\n \n                     diag.multipart_suggestion(\n-                        &format!(\"use `{name}ln!` instead\"),\n+                        format!(\"use `{name}ln!` instead\"),\n                         vec![(name_span, format!(\"{name}ln\")), (newline_span, String::new())],\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "a67bd8d46006b7343be74e968ac9c5c30eb35ce6", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -620,12 +620,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                 ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(\n                     int.try_into().expect(\"invalid f64 bit representation\"),\n                 ))),\n-                ty::RawPtr(type_and_mut) => {\n-                    if let ty::Uint(_) = type_and_mut.ty.kind() {\n-                        return Some(Constant::RawPtr(int.assert_bits(int.size())));\n-                    }\n-                    None\n-                },\n+                ty::RawPtr(_) => Some(Constant::RawPtr(int.assert_bits(int.size()))),\n                 // FIXME: implement other conversions.\n                 _ => None,\n             }"}, {"sha": "812f6fe71a0a0c7faf9efd8b002055072082dafb", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -17,7 +17,7 @@ use std::env;\n fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{lint}\",\n                 &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n                     // extract just major + minor version and ignore patch versions"}, {"sha": "d262b335d99d3adf782a59eaa02f88c84db50908", "filename": "clippy_utils/src/mir/maybe_storage_live.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/24444945ec96dbe0dd593ed5bda57d22464a7106/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24444945ec96dbe0dd593ed5bda57d22464a7106/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs?ref=24444945ec96dbe0dd593ed5bda57d22464a7106", "patch": "@@ -1,52 +0,0 @@\n-use rustc_index::bit_set::BitSet;\n-use rustc_middle::mir;\n-use rustc_mir_dataflow::{AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis};\n-\n-/// Determines liveness of each local purely based on `StorageLive`/`Dead`.\n-#[derive(Copy, Clone)]\n-pub(super) struct MaybeStorageLive;\n-\n-impl<'tcx> AnalysisDomain<'tcx> for MaybeStorageLive {\n-    type Domain = BitSet<mir::Local>;\n-    const NAME: &'static str = \"maybe_storage_live\";\n-\n-    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n-        // bottom = dead\n-        BitSet::new_empty(body.local_decls.len())\n-    }\n-\n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n-        for arg in body.args_iter() {\n-            state.insert(arg);\n-        }\n-    }\n-}\n-\n-impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n-    type Idx = mir::Local;\n-\n-    fn statement_effect(&self, trans: &mut impl GenKill<Self::Idx>, stmt: &mir::Statement<'tcx>, _: mir::Location) {\n-        match stmt.kind {\n-            mir::StatementKind::StorageLive(l) => trans.gen(l),\n-            mir::StatementKind::StorageDead(l) => trans.kill(l),\n-            _ => (),\n-        }\n-    }\n-\n-    fn terminator_effect(\n-        &self,\n-        _trans: &mut impl GenKill<Self::Idx>,\n-        _terminator: &mir::Terminator<'tcx>,\n-        _loc: mir::Location,\n-    ) {\n-    }\n-\n-    fn call_return_effect(\n-        &self,\n-        _trans: &mut impl GenKill<Self::Idx>,\n-        _block: mir::BasicBlock,\n-        _return_places: CallReturnPlaces<'_, 'tcx>,\n-    ) {\n-        // Nothing to do when a call returns successfully\n-    }\n-}"}, {"sha": "26c0015e87e0fb1aeab8e20f0c21faf6498c940c", "filename": "clippy_utils/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fmod.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -5,8 +5,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::TyCtxt;\n \n-mod maybe_storage_live;\n-\n mod possible_borrower;\n pub use possible_borrower::PossibleBorrowerMap;\n "}, {"sha": "395d46e7a2f8af088f359177ebe4ebf4f4e08c39", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 172, "deletions": 102, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,92 +1,137 @@\n-use super::{\n-    maybe_storage_live::MaybeStorageLive, possible_origin::PossibleOriginVisitor,\n-    transitive_relation::TransitiveRelation,\n-};\n+use super::possible_origin::PossibleOriginVisitor;\n use crate::ty::is_copy;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n-use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::TypeVisitor};\n-use rustc_mir_dataflow::{Analysis, ResultsCursor};\n+use rustc_middle::mir::{\n+    self, visit::Visitor as _, BasicBlock, Local, Location, Mutability, Statement, StatementKind, Terminator,\n+};\n+use rustc_middle::ty::{self, visit::TypeVisitor, TyCtxt};\n+use rustc_mir_dataflow::{\n+    fmt::DebugWithContext, impls::MaybeStorageLive, lattice::JoinSemiLattice, Analysis, AnalysisDomain,\n+    CallReturnPlaces, ResultsCursor,\n+};\n+use std::borrow::Cow;\n use std::ops::ControlFlow;\n \n /// Collects the possible borrowers of each local.\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`.\n #[allow(clippy::module_name_repetitions)]\n-struct PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n-    possible_borrower: TransitiveRelation,\n+struct PossibleBorrowerAnalysis<'b, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     body: &'b mir::Body<'tcx>,\n-    cx: &'a LateContext<'tcx>,\n     possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n }\n \n-impl<'a, 'b, 'tcx> PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n-    fn new(\n-        cx: &'a LateContext<'tcx>,\n-        body: &'b mir::Body<'tcx>,\n-        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n-    ) -> Self {\n+#[derive(Clone, Debug, Eq, PartialEq)]\n+struct PossibleBorrowerState {\n+    map: FxIndexMap<Local, BitSet<Local>>,\n+    domain_size: usize,\n+}\n+\n+impl PossibleBorrowerState {\n+    fn new(domain_size: usize) -> Self {\n         Self {\n-            possible_borrower: TransitiveRelation::default(),\n-            cx,\n-            body,\n-            possible_origin,\n+            map: FxIndexMap::default(),\n+            domain_size,\n         }\n     }\n \n-    fn into_map(\n-        self,\n-        cx: &'a LateContext<'tcx>,\n-        maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive>,\n-    ) -> PossibleBorrowerMap<'b, 'tcx> {\n-        let mut map = FxHashMap::default();\n-        for row in (1..self.body.local_decls.len()).map(mir::Local::from_usize) {\n-            if is_copy(cx, self.body.local_decls[row].ty) {\n-                continue;\n-            }\n+    #[allow(clippy::similar_names)]\n+    fn add(&mut self, borrowed: Local, borrower: Local) {\n+        self.map\n+            .entry(borrowed)\n+            .or_insert(BitSet::new_empty(self.domain_size))\n+            .insert(borrower);\n+    }\n+}\n \n-            let mut borrowers = self.possible_borrower.reachable_from(row, self.body.local_decls.len());\n-            borrowers.remove(mir::Local::from_usize(0));\n+impl<C> DebugWithContext<C> for PossibleBorrowerState {\n+    fn fmt_with(&self, _ctxt: &C, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        <_ as std::fmt::Debug>::fmt(self, f)\n+    }\n+    fn fmt_diff_with(&self, _old: &Self, _ctxt: &C, _f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        unimplemented!()\n+    }\n+}\n+\n+impl JoinSemiLattice for PossibleBorrowerState {\n+    fn join(&mut self, other: &Self) -> bool {\n+        let mut changed = false;\n+        for (&borrowed, borrowers) in other.map.iter() {\n             if !borrowers.is_empty() {\n-                map.insert(row, borrowers);\n+                changed |= self\n+                    .map\n+                    .entry(borrowed)\n+                    .or_insert(BitSet::new_empty(self.domain_size))\n+                    .union(borrowers);\n             }\n         }\n+        changed\n+    }\n+}\n \n-        let bs = BitSet::new_empty(self.body.local_decls.len());\n-        PossibleBorrowerMap {\n-            map,\n-            maybe_live,\n-            bitset: (bs.clone(), bs),\n+impl<'b, 'tcx> AnalysisDomain<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n+    type Domain = PossibleBorrowerState;\n+\n+    const NAME: &'static str = \"possible_borrower\";\n+\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        PossibleBorrowerState::new(body.local_decls.len())\n+    }\n+\n+    fn initialize_start_block(&self, _body: &mir::Body<'tcx>, _entry_set: &mut Self::Domain) {}\n+}\n+\n+impl<'b, 'tcx> PossibleBorrowerAnalysis<'b, 'tcx> {\n+    fn new(\n+        tcx: TyCtxt<'tcx>,\n+        body: &'b mir::Body<'tcx>,\n+        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+    ) -> Self {\n+        Self {\n+            tcx,\n+            body,\n+            possible_origin,\n         }\n     }\n }\n \n-impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n-    fn visit_assign(&mut self, place: &mir::Place<'tcx>, rvalue: &mir::Rvalue<'_>, _location: mir::Location) {\n-        let lhs = place.local;\n-        match rvalue {\n-            mir::Rvalue::Ref(_, _, borrowed) => {\n-                self.possible_borrower.add(borrowed.local, lhs);\n-            },\n-            other => {\n-                if ContainsRegion\n-                    .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n-                    .is_continue()\n-                {\n-                    return;\n-                }\n-                rvalue_locals(other, |rhs| {\n-                    if lhs != rhs {\n-                        self.possible_borrower.add(rhs, lhs);\n+impl<'b, 'tcx> Analysis<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n+    fn apply_call_return_effect(\n+        &self,\n+        _state: &mut Self::Domain,\n+        _block: BasicBlock,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n+    ) {\n+    }\n+\n+    fn apply_statement_effect(&self, state: &mut Self::Domain, statement: &Statement<'tcx>, _location: Location) {\n+        if let StatementKind::Assign(box (place, rvalue)) = &statement.kind {\n+            let lhs = place.local;\n+            match rvalue {\n+                mir::Rvalue::Ref(_, _, borrowed) => {\n+                    state.add(borrowed.local, lhs);\n+                },\n+                other => {\n+                    if ContainsRegion\n+                        .visit_ty(place.ty(&self.body.local_decls, self.tcx).ty)\n+                        .is_continue()\n+                    {\n+                        return;\n                     }\n-                });\n-            },\n+                    rvalue_locals(other, |rhs| {\n+                        if lhs != rhs {\n+                            state.add(rhs, lhs);\n+                        }\n+                    });\n+                },\n+            }\n         }\n     }\n \n-    fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n+    fn apply_terminator_effect(&self, state: &mut Self::Domain, terminator: &Terminator<'tcx>, _location: Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n             destination: mir::Place { local: dest, .. },\n@@ -126,10 +171,10 @@ impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b,\n \n             for y in mutable_variables {\n                 for x in &immutable_borrowers {\n-                    self.possible_borrower.add(*x, y);\n+                    state.add(*x, y);\n                 }\n                 for x in &mutable_borrowers {\n-                    self.possible_borrower.add(*x, y);\n+                    state.add(*x, y);\n                 }\n             }\n         }\n@@ -165,73 +210,98 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     }\n }\n \n-/// Result of `PossibleBorrowerVisitor`.\n+/// Result of `PossibleBorrowerAnalysis`.\n #[allow(clippy::module_name_repetitions)]\n pub struct PossibleBorrowerMap<'b, 'tcx> {\n-    /// Mapping `Local -> its possible borrowers`\n-    pub map: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n-    maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive>,\n-    // Caches to avoid allocation of `BitSet` on every query\n-    pub bitset: (BitSet<mir::Local>, BitSet<mir::Local>),\n+    body: &'b mir::Body<'tcx>,\n+    possible_borrower: ResultsCursor<'b, 'tcx, PossibleBorrowerAnalysis<'b, 'tcx>>,\n+    maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive<'b>>,\n+    pushed: BitSet<Local>,\n+    stack: Vec<Local>,\n }\n \n-impl<'a, 'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n-    pub fn new(cx: &'a LateContext<'tcx>, mir: &'b mir::Body<'tcx>) -> Self {\n+impl<'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n+    pub fn new(cx: &LateContext<'tcx>, mir: &'b mir::Body<'tcx>) -> Self {\n         let possible_origin = {\n             let mut vis = PossibleOriginVisitor::new(mir);\n             vis.visit_body(mir);\n             vis.into_map(cx)\n         };\n-        let maybe_storage_live_result = MaybeStorageLive\n+        let possible_borrower = PossibleBorrowerAnalysis::new(cx.tcx, mir, possible_origin)\n             .into_engine(cx.tcx, mir)\n-            .pass_name(\"redundant_clone\")\n+            .pass_name(\"possible_borrower\")\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n-        let mut vis = PossibleBorrowerVisitor::new(cx, mir, possible_origin);\n-        vis.visit_body(mir);\n-        vis.into_map(cx, maybe_storage_live_result)\n-    }\n-\n-    /// Returns true if the set of borrowers of `borrowed` living at `at` matches with `borrowers`.\n-    pub fn only_borrowers(&mut self, borrowers: &[mir::Local], borrowed: mir::Local, at: mir::Location) -> bool {\n-        self.bounded_borrowers(borrowers, borrowers, borrowed, at)\n+        let maybe_live = MaybeStorageLive::new(Cow::Owned(BitSet::new_empty(mir.local_decls.len())))\n+            .into_engine(cx.tcx, mir)\n+            .pass_name(\"possible_borrower\")\n+            .iterate_to_fixpoint()\n+            .into_results_cursor(mir);\n+        PossibleBorrowerMap {\n+            body: mir,\n+            possible_borrower,\n+            maybe_live,\n+            pushed: BitSet::new_empty(mir.local_decls.len()),\n+            stack: Vec::with_capacity(mir.local_decls.len()),\n+        }\n     }\n \n-    /// Returns true if the set of borrowers of `borrowed` living at `at` includes at least `below`\n-    /// but no more than `above`.\n-    pub fn bounded_borrowers(\n+    /// Returns true if the set of borrowers of `borrowed` living at `at` includes no more than\n+    /// `borrowers`.\n+    /// Notes:\n+    /// 1. It would be nice if `PossibleBorrowerMap` could store `cx` so that `at_most_borrowers`\n+    /// would not require it to be passed in. But a `PossibleBorrowerMap` is stored in `LintPass`\n+    /// `Dereferencing`, which outlives any `LateContext`.\n+    /// 2. In all current uses of `at_most_borrowers`, `borrowers` is a slice of at most two\n+    /// elements. Thus, `borrowers.contains(...)` is effectively a constant-time operation. If\n+    /// `at_most_borrowers`'s uses were to expand beyond this, its implementation might have to be\n+    /// adjusted.\n+    pub fn at_most_borrowers(\n         &mut self,\n-        below: &[mir::Local],\n-        above: &[mir::Local],\n+        cx: &LateContext<'tcx>,\n+        borrowers: &[mir::Local],\n         borrowed: mir::Local,\n         at: mir::Location,\n     ) -> bool {\n-        self.maybe_live.seek_after_primary_effect(at);\n+        if is_copy(cx, self.body.local_decls[borrowed].ty) {\n+            return true;\n+        }\n \n-        self.bitset.0.clear();\n-        let maybe_live = &mut self.maybe_live;\n-        if let Some(bitset) = self.map.get(&borrowed) {\n-            for b in bitset.iter().filter(move |b| maybe_live.contains(*b)) {\n-                self.bitset.0.insert(b);\n+        self.possible_borrower.seek_before_primary_effect(at);\n+        self.maybe_live.seek_before_primary_effect(at);\n+\n+        let possible_borrower = &self.possible_borrower.get().map;\n+        let maybe_live = &self.maybe_live;\n+\n+        self.pushed.clear();\n+        self.stack.clear();\n+\n+        if let Some(borrowers) = possible_borrower.get(&borrowed) {\n+            for b in borrowers.iter() {\n+                if self.pushed.insert(b) {\n+                    self.stack.push(b);\n+                }\n             }\n         } else {\n-            return false;\n+            // Nothing borrows `borrowed` at `at`.\n+            return true;\n         }\n \n-        self.bitset.1.clear();\n-        for b in below {\n-            self.bitset.1.insert(*b);\n-        }\n-\n-        if !self.bitset.0.superset(&self.bitset.1) {\n-            return false;\n-        }\n+        while let Some(borrower) = self.stack.pop() {\n+            if maybe_live.contains(borrower) && !borrowers.contains(&borrower) {\n+                return false;\n+            }\n \n-        for b in above {\n-            self.bitset.0.remove(*b);\n+            if let Some(borrowers) = possible_borrower.get(&borrower) {\n+                for b in borrowers.iter() {\n+                    if self.pushed.insert(b) {\n+                        self.stack.push(b);\n+                    }\n+                }\n+            }\n         }\n \n-        self.bitset.0.is_empty()\n+        true\n     }\n \n     pub fn local_is_alive_at(&mut self, local: mir::Local, at: mir::Location) -> bool {"}, {"sha": "4c4c077d771f9eb66ad34d96bd3a6591f63f5876", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -185,7 +185,6 @@ impl<'a> Sugg<'a> {\n     ) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        #[expect(clippy::match_wildcard_for_single_variants)]\n         match expr.kind {\n             _ if expr.span.ctxt() != ctxt => Sugg::NonParen(snippet_with_context(cx, expr.span, ctxt, default, app).0),\n             ast::ExprKind::AddrOf(..)"}, {"sha": "9399d422036d47e3662958ad992b8fd2080ef989", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-12-17\"\n+channel = \"nightly-2022-12-29\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "65f38fe71188e8384aca61f800cd02563a681f11", "filename": "tests/ui/crashes/ice-10044.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fcrashes%2Fice-10044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fcrashes%2Fice-10044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10044.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    [0; usize::MAX];\n+}"}, {"sha": "731f8265ad6c9efa055d8722438cf242e6d77e97", "filename": "tests/ui/crashes/ice-10044.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fcrashes%2Fice-10044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fcrashes%2Fice-10044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10044.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,10 @@\n+error: statement with no effect\n+  --> $DIR/ice-10044.rs:2:5\n+   |\n+LL |     [0; usize::MAX];\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::no-effect` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8ffd4cc513790fca6400282d63694f513b97eef4", "filename": "tests/ui/floating_point_powi.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -14,6 +14,15 @@ fn main() {\n     let _ = (y as f32).mul_add(y as f32, x);\n     let _ = x.mul_add(x, y).sqrt();\n     let _ = y.mul_add(y, x).sqrt();\n+\n+    let _ = (x - 1.0).mul_add(x - 1.0, -y);\n+    let _ = (x - 1.0).mul_add(x - 1.0, -y) + 3.0;\n+    let _ = (x - 1.0).mul_add(x - 1.0, -(y + 3.0));\n+    let _ = (y + 1.0).mul_add(-(y + 1.0), x);\n+    let _ = (3.0 * y).mul_add(-(3.0 * y), x);\n+    let _ = (y + 1.0 + x).mul_add(-(y + 1.0 + x), x);\n+    let _ = (y + 1.0 + 2.0).mul_add(-(y + 1.0 + 2.0), x);\n+\n     // Cases where the lint shouldn't be applied\n     let _ = x.powi(2);\n     let _ = x.powi(1 + 1);"}, {"sha": "9ae3455a1346a8aea6ffd4ce07025504b4bf2fbb", "filename": "tests/ui/floating_point_powi.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -14,6 +14,15 @@ fn main() {\n     let _ = x + (y as f32).powi(2);\n     let _ = (x.powi(2) + y).sqrt();\n     let _ = (x + y.powi(2)).sqrt();\n+\n+    let _ = (x - 1.0).powi(2) - y;\n+    let _ = (x - 1.0).powi(2) - y + 3.0;\n+    let _ = (x - 1.0).powi(2) - (y + 3.0);\n+    let _ = x - (y + 1.0).powi(2);\n+    let _ = x - (3.0 * y).powi(2);\n+    let _ = x - (y + 1.0 + x).powi(2);\n+    let _ = x - (y + 1.0 + 2.0).powi(2);\n+\n     // Cases where the lint shouldn't be applied\n     let _ = x.powi(2);\n     let _ = x.powi(1 + 1);"}, {"sha": "fdf6d088052ea59bf62b732a711120bd15a6a6d1", "filename": "tests/ui/floating_point_powi.stderr", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -42,5 +42,47 @@ error: multiply and add expressions can be calculated more efficiently and accur\n LL |     let _ = (x + y.powi(2)).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n \n-error: aborting due to 7 previous errors\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:18:13\n+   |\n+LL |     let _ = (x - 1.0).powi(2) - y;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x - 1.0).mul_add(x - 1.0, -y)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:19:13\n+   |\n+LL |     let _ = (x - 1.0).powi(2) - y + 3.0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x - 1.0).mul_add(x - 1.0, -y)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:20:13\n+   |\n+LL |     let _ = (x - 1.0).powi(2) - (y + 3.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x - 1.0).mul_add(x - 1.0, -(y + 3.0))`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:21:13\n+   |\n+LL |     let _ = x - (y + 1.0).powi(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(y + 1.0).mul_add(-(y + 1.0), x)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:22:13\n+   |\n+LL |     let _ = x - (3.0 * y).powi(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(3.0 * y).mul_add(-(3.0 * y), x)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:23:13\n+   |\n+LL |     let _ = x - (y + 1.0 + x).powi(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(y + 1.0 + x).mul_add(-(y + 1.0 + x), x)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:24:13\n+   |\n+LL |     let _ = x - (y + 1.0 + 2.0).powi(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(y + 1.0 + 2.0).mul_add(-(y + 1.0 + 2.0), x)`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "df5bc8420d57b4872241d06fba47dea030baa94f", "filename": "tests/ui/fn_null_check.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_null_check.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,21 @@\n+#![allow(unused)]\n+#![warn(clippy::fn_null_check)]\n+#![allow(clippy::cmp_null)]\n+#![allow(clippy::ptr_eq)]\n+#![allow(clippy::zero_ptr)]\n+\n+pub const ZPTR: *const () = 0 as *const _;\n+pub const NOT_ZPTR: *const () = 1 as *const _;\n+\n+fn main() {\n+    let fn_ptr = main;\n+\n+    if (fn_ptr as *mut ()).is_null() {}\n+    if (fn_ptr as *const u8).is_null() {}\n+    if (fn_ptr as *const ()) == std::ptr::null() {}\n+    if (fn_ptr as *const ()) == (0 as *const ()) {}\n+    if (fn_ptr as *const ()) == ZPTR {}\n+\n+    // no lint\n+    if (fn_ptr as *const ()) == NOT_ZPTR {}\n+}"}, {"sha": "660dd3239792205efd143d4389fb502e836cbdbf", "filename": "tests/ui/fn_null_check.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffn_null_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ffn_null_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_null_check.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,43 @@\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:13:8\n+   |\n+LL |     if (fn_ptr as *mut ()).is_null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+   = note: `-D clippy::fn-null-check` implied by `-D warnings`\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:14:8\n+   |\n+LL |     if (fn_ptr as *const u8).is_null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:15:8\n+   |\n+LL |     if (fn_ptr as *const ()) == std::ptr::null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:16:8\n+   |\n+LL |     if (fn_ptr as *const ()) == (0 as *const ()) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:17:8\n+   |\n+LL |     if (fn_ptr as *const ()) == ZPTR {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "ef6780dc96d9c8f74ec38a3d90767d0b3307710f", "filename": "tests/ui/manual_filter.fixed", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_filter.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_filter.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -116,4 +116,45 @@ fn main() {\n         },\n         None => None,\n     };\n+\n+    match Some(20) {\n+        // Don't Lint, because `Some(3*x)` is not `None`\n+        None => None,\n+        Some(x) => {\n+            if x > 0 {\n+                Some(3 * x)\n+            } else {\n+                Some(x)\n+            }\n+        },\n+    };\n+\n+    // Don't lint: https://github.com/rust-lang/rust-clippy/issues/10088\n+    let result = if let Some(a) = maybe_some() {\n+        if let Some(b) = maybe_some() {\n+            Some(a + b)\n+        } else {\n+            Some(a)\n+        }\n+    } else {\n+        None\n+    };\n+\n+    let allowed_integers = vec![3, 4, 5, 6];\n+    // Don't lint, since there's a side effect in the else branch\n+    match Some(21) {\n+        Some(x) => {\n+            if allowed_integers.contains(&x) {\n+                Some(x)\n+            } else {\n+                println!(\"Invalid integer: {x:?}\");\n+                None\n+            }\n+        },\n+        None => None,\n+    };\n+}\n+\n+fn maybe_some() -> Option<u32> {\n+    Some(0)\n }"}, {"sha": "ea0ce83172b7dd4af1469185d0c22f5b68c52717", "filename": "tests/ui/manual_filter.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -240,4 +240,45 @@ fn main() {\n         },\n         None => None,\n     };\n+\n+    match Some(20) {\n+        // Don't Lint, because `Some(3*x)` is not `None`\n+        None => None,\n+        Some(x) => {\n+            if x > 0 {\n+                Some(3 * x)\n+            } else {\n+                Some(x)\n+            }\n+        },\n+    };\n+\n+    // Don't lint: https://github.com/rust-lang/rust-clippy/issues/10088\n+    let result = if let Some(a) = maybe_some() {\n+        if let Some(b) = maybe_some() {\n+            Some(a + b)\n+        } else {\n+            Some(a)\n+        }\n+    } else {\n+        None\n+    };\n+\n+    let allowed_integers = vec![3, 4, 5, 6];\n+    // Don't lint, since there's a side effect in the else branch\n+    match Some(21) {\n+        Some(x) => {\n+            if allowed_integers.contains(&x) {\n+                Some(x)\n+            } else {\n+                println!(\"Invalid integer: {x:?}\");\n+                None\n+            }\n+        },\n+        None => None,\n+    };\n+}\n+\n+fn maybe_some() -> Option<u32> {\n+    Some(0)\n }"}, {"sha": "8f25fea678f19df58aded7d4add8a5f288e7e32e", "filename": "tests/ui/manual_retain.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_retain)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::BinaryHeap;"}, {"sha": "e6b3995a689b3d077b22da927959d31f59389a9a", "filename": "tests/ui/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_retain)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::BinaryHeap;"}, {"sha": "6cfb6661a03945fc1cfc87691f463aa7fe28ca5b", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -133,3 +133,16 @@ fn issue_9575() {\n         println!(\"Needs curlies\");\n     };\n }\n+\n+#[allow(dead_code)]\n+fn issue_9725(r: Option<u32>) {\n+    let x = r;\n+    match x {\n+        Some(_) => {\n+            println!(\"Some\");\n+        },\n+        None => {\n+            println!(\"None\");\n+        },\n+    };\n+}"}, {"sha": "f188aeb5f2ff5ce84789643697a816079ea965dd", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -148,3 +148,17 @@ fn issue_9575() {\n         _ => println!(\"Needs curlies\"),\n     };\n }\n+\n+#[allow(dead_code)]\n+fn issue_9725(r: Option<u32>) {\n+    match r {\n+        x => match x {\n+            Some(_) => {\n+                println!(\"Some\");\n+            },\n+            None => {\n+                println!(\"None\");\n+            },\n+        },\n+    };\n+}"}, {"sha": "e960d64ad2b03dcdbc90ea104535d9d9fa70a5cf", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -213,5 +213,30 @@ LL +         println!(\"Needs curlies\");\n LL ~     };\n    |\n \n-error: aborting due to 14 previous errors\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding.rs:154:5\n+   |\n+LL | /     match r {\n+LL | |         x => match x {\n+LL | |             Some(_) => {\n+LL | |                 println!(\"Some\");\n+...  |\n+LL | |         },\n+LL | |     };\n+   | |_____^\n+   |\n+help: consider using a `let` statement\n+   |\n+LL ~     let x = r;\n+LL +     match x {\n+LL +         Some(_) => {\n+LL +             println!(\"Some\");\n+LL +         },\n+LL +         None => {\n+LL +             println!(\"None\");\n+LL +         },\n+LL ~     };\n+   |\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "fc252cdd35294dd591f607f133ee0531cbd98788", "filename": "tests/ui/match_wildcard_for_single_variants.fixed", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -132,3 +132,25 @@ fn main() {\n         }\n     }\n }\n+\n+mod issue9993 {\n+    enum Foo {\n+        A(bool),\n+        B,\n+    }\n+\n+    fn test() {\n+        let _ = match Foo::A(true) {\n+            _ if false => 0,\n+            Foo::A(true) => 1,\n+            Foo::A(false) => 2,\n+            Foo::B => 3,\n+        };\n+\n+        let _ = match Foo::B {\n+            _ if false => 0,\n+            Foo::A(_) => 1,\n+            Foo::B => 2,\n+        };\n+    }\n+}"}, {"sha": "9a5c849e6ec9a776c253bbc857edcef8149c5895", "filename": "tests/ui/match_wildcard_for_single_variants.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -132,3 +132,25 @@ fn main() {\n         }\n     }\n }\n+\n+mod issue9993 {\n+    enum Foo {\n+        A(bool),\n+        B,\n+    }\n+\n+    fn test() {\n+        let _ = match Foo::A(true) {\n+            _ if false => 0,\n+            Foo::A(true) => 1,\n+            Foo::A(false) => 2,\n+            Foo::B => 3,\n+        };\n+\n+        let _ = match Foo::B {\n+            _ if false => 0,\n+            Foo::A(_) => 1,\n+            _ => 2,\n+        };\n+    }\n+}"}, {"sha": "6fa313dc9111445e6bd402bcad17dd5f1ecc020b", "filename": "tests/ui/match_wildcard_for_single_variants.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -48,5 +48,11 @@ error: wildcard matches only a single variant and will also match any future add\n LL |         _ => (),\n    |         ^ help: try this: `Color::Blue`\n \n-error: aborting due to 8 previous errors\n+error: wildcard matches only a single variant and will also match any future added variants\n+  --> $DIR/match_wildcard_for_single_variants.rs:153:13\n+   |\n+LL |             _ => 2,\n+   |             ^ help: try this: `Foo::B`\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "31e1cb6c3d7f7efd0e083c67233079d557f11947", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(lint_reasons)]\n+#![feature(custom_inner_attributes, lint_reasons, rustc_private)]\n #![allow(\n     unused,\n     clippy::uninlined_format_args,\n@@ -491,3 +491,14 @@ mod issue_9782_method_variant {\n         S.foo::<&[u8; 100]>(&a);\n     }\n }\n+\n+extern crate rustc_lint;\n+extern crate rustc_span;\n+\n+#[allow(dead_code)]\n+mod span_lint {\n+    use rustc_lint::{LateContext, Lint, LintContext};\n+    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n+        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(String::new()));\n+    }\n+}"}, {"sha": "55c2738fcf273c812c30105fc84e8090ea4fe927", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(lint_reasons)]\n+#![feature(custom_inner_attributes, lint_reasons, rustc_private)]\n #![allow(\n     unused,\n     clippy::uninlined_format_args,\n@@ -491,3 +491,14 @@ mod issue_9782_method_variant {\n         S.foo::<&[u8; 100]>(&a);\n     }\n }\n+\n+extern crate rustc_lint;\n+extern crate rustc_span;\n+\n+#[allow(dead_code)]\n+mod span_lint {\n+    use rustc_lint::{LateContext, Lint, LintContext};\n+    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n+        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n+    }\n+}"}, {"sha": "98a48d68317b495e9b50713d97aa4d470e2ab4ed", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -216,5 +216,11 @@ error: the borrowed expression implements the required traits\n LL |         foo(&a);\n    |             ^^ help: change this to: `a`\n \n-error: aborting due to 36 previous errors\n+error: the borrowed expression implements the required traits\n+  --> $DIR/needless_borrow.rs:502:85\n+   |\n+LL |         cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n+   |                                                                                     ^^^^^^^^^^^^^^ help: change this to: `String::new()`\n+\n+error: aborting due to 37 previous errors\n "}, {"sha": "d451be1f389a7b50a2b3c0201e8ace18d4f0668b", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![feature(lint_reasons)]\n+#![feature(yeet_expr)]\n #![allow(unused)]\n #![allow(\n     clippy::if_same_then_else,\n@@ -272,4 +273,8 @@ mod issue9416 {\n     }\n }\n \n+fn issue9947() -> Result<(), String> {\n+    do yeet \"hello\";\n+}\n+\n fn main() {}"}, {"sha": "e1a1bea2c0b85f19f769a4c4ea0b904d348f4cf9", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![feature(lint_reasons)]\n+#![feature(yeet_expr)]\n #![allow(unused)]\n #![allow(\n     clippy::if_same_then_else,\n@@ -282,4 +283,8 @@ mod issue9416 {\n     }\n }\n \n+fn issue9947() -> Result<(), String> {\n+    do yeet \"hello\";\n+}\n+\n fn main() {}"}, {"sha": "ca2253e6586379ecb543929782956299a6a08da8", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,5 +1,5 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:26:5\n+  --> $DIR/needless_return.rs:27:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n@@ -8,71 +8,71 @@ LL |     return true;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:30:5\n+  --> $DIR/needless_return.rs:31:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:35:9\n+  --> $DIR/needless_return.rs:36:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:37:9\n+  --> $DIR/needless_return.rs:38:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:43:17\n+  --> $DIR/needless_return.rs:44:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:45:13\n+  --> $DIR/needless_return.rs:46:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:52:9\n+  --> $DIR/needless_return.rs:53:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:54:16\n+  --> $DIR/needless_return.rs:55:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:58:5\n+  --> $DIR/needless_return.rs:59:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:61:21\n+  --> $DIR/needless_return.rs:62:21\n    |\n LL |   fn test_void_fun() {\n    |  _____________________^\n@@ -82,7 +82,7 @@ LL | |     return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:66:11\n+  --> $DIR/needless_return.rs:67:11\n    |\n LL |       if b {\n    |  ___________^\n@@ -92,7 +92,7 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:68:13\n+  --> $DIR/needless_return.rs:69:13\n    |\n LL |       } else {\n    |  _____________^\n@@ -102,15 +102,15 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:76:14\n+  --> $DIR/needless_return.rs:77:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:84:24\n+  --> $DIR/needless_return.rs:85:24\n    |\n LL |               let _ = 42;\n    |  ________________________^\n@@ -120,39 +120,39 @@ LL | |             return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:87:14\n+  --> $DIR/needless_return.rs:88:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:100:9\n+  --> $DIR/needless_return.rs:101:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:102:9\n+  --> $DIR/needless_return.rs:103:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:124:32\n+  --> $DIR/needless_return.rs:125:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^\n    |\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:128:21\n+  --> $DIR/needless_return.rs:129:21\n    |\n LL |           let _ = || {\n    |  _____________________^\n@@ -162,95 +162,95 @@ LL | |             return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:131:20\n+  --> $DIR/needless_return.rs:132:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^\n    |\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:137:32\n+  --> $DIR/needless_return.rs:138:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:146:5\n+  --> $DIR/needless_return.rs:147:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:150:5\n+  --> $DIR/needless_return.rs:151:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:155:9\n+  --> $DIR/needless_return.rs:156:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:157:9\n+  --> $DIR/needless_return.rs:158:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:163:17\n+  --> $DIR/needless_return.rs:164:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:165:13\n+  --> $DIR/needless_return.rs:166:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:172:9\n+  --> $DIR/needless_return.rs:173:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:174:16\n+  --> $DIR/needless_return.rs:175:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:178:5\n+  --> $DIR/needless_return.rs:179:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:181:33\n+  --> $DIR/needless_return.rs:182:33\n    |\n LL |   async fn async_test_void_fun() {\n    |  _________________________________^\n@@ -260,7 +260,7 @@ LL | |     return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:186:11\n+  --> $DIR/needless_return.rs:187:11\n    |\n LL |       if b {\n    |  ___________^\n@@ -270,7 +270,7 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:188:13\n+  --> $DIR/needless_return.rs:189:13\n    |\n LL |       } else {\n    |  _____________^\n@@ -280,95 +280,95 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:196:14\n+  --> $DIR/needless_return.rs:197:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:209:9\n+  --> $DIR/needless_return.rs:210:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:211:9\n+  --> $DIR/needless_return.rs:212:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:227:5\n+  --> $DIR/needless_return.rs:228:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:238:9\n+  --> $DIR/needless_return.rs:239:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:240:9\n+  --> $DIR/needless_return.rs:241:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:247:13\n+  --> $DIR/needless_return.rs:248:13\n    |\n LL |             return 10;\n    |             ^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:250:13\n+  --> $DIR/needless_return.rs:251:13\n    |\n LL |             return 100;\n    |             ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:258:9\n+  --> $DIR/needless_return.rs:259:9\n    |\n LL |         return 0;\n    |         ^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:265:13\n+  --> $DIR/needless_return.rs:266:13\n    |\n LL |             return *(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:267:13\n+  --> $DIR/needless_return.rs:268:13\n    |\n LL |             return !*(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:274:20\n+  --> $DIR/needless_return.rs:275:20\n    |\n LL |           let _ = 42;\n    |  ____________________^\n@@ -379,7 +379,7 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:281:20\n+  --> $DIR/needless_return.rs:282:20\n    |\n LL |         let _ = 42; return;\n    |                    ^^^^^^^"}, {"sha": "28c00d100942cfebe4794987a9e4677ce982bf81", "filename": "tests/ui/permissions_set_readonly_false.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fpermissions_set_readonly_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fpermissions_set_readonly_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpermissions_set_readonly_false.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,29 @@\n+#![allow(unused)]\n+#![warn(clippy::permissions_set_readonly_false)]\n+\n+use std::fs::File;\n+\n+struct A;\n+\n+impl A {\n+    pub fn set_readonly(&mut self, b: bool) {}\n+}\n+\n+fn set_readonly(b: bool) {}\n+\n+fn main() {\n+    let f = File::create(\"foo.txt\").unwrap();\n+    let metadata = f.metadata().unwrap();\n+    let mut permissions = metadata.permissions();\n+    // lint here\n+    permissions.set_readonly(false);\n+    // no lint\n+    permissions.set_readonly(true);\n+\n+    let mut a = A;\n+    // no lint here - a is not of type std::fs::Permissions\n+    a.set_readonly(false);\n+\n+    // no lint here - plain function\n+    set_readonly(false);\n+}"}, {"sha": "e7a8ee6cb19bee4827325663180aac1a3d1625a4", "filename": "tests/ui/permissions_set_readonly_false.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fpermissions_set_readonly_false.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fpermissions_set_readonly_false.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpermissions_set_readonly_false.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,13 @@\n+error: call to `set_readonly` with argument `false`\n+  --> $DIR/permissions_set_readonly_false.rs:19:5\n+   |\n+LL |     permissions.set_readonly(false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: on Unix platforms this results in the file being world writable\n+   = help: you can set the desired permissions using `PermissionsExt`. For more information, see\n+           https://doc.rust-lang.org/std/os/unix/fs/trait.PermissionsExt.html\n+   = note: `-D clippy::permissions-set-readonly-false` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a157b6a6f9adbfd417b10fd0ed51734ab7f63f6f", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -239,3 +239,9 @@ fn false_negative_5707() {\n     let _z = x.clone(); // pr 7346 can't lint on `x`\n     drop(y);\n }\n+\n+#[allow(unused, clippy::manual_retain)]\n+fn possible_borrower_improvements() {\n+    let mut s = String::from(\"foobar\");\n+    s = s.chars().filter(|&c| c != 'o').collect();\n+}"}, {"sha": "430672e8b8df2ffc470a47146ffd59db0b35fbe6", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -239,3 +239,9 @@ fn false_negative_5707() {\n     let _z = x.clone(); // pr 7346 can't lint on `x`\n     drop(y);\n }\n+\n+#[allow(unused, clippy::manual_retain)]\n+fn possible_borrower_improvements() {\n+    let mut s = String::from(\"foobar\");\n+    s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+}"}, {"sha": "1bacc2c76af1597f3b044506ed4e4f081a3b9251", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -179,5 +179,17 @@ note: this value is dropped without further use\n LL |     foo(&x.clone(), move || {\n    |          ^\n \n-error: aborting due to 15 previous errors\n+error: redundant clone\n+  --> $DIR/redundant_clone.rs:246:40\n+   |\n+LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+   |                                        ^^^^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/redundant_clone.rs:246:9\n+   |\n+LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "1e83ab82907d39d5416f0ca230ec3144506c9ef6", "filename": "tests/ui/size_of_ref.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fsize_of_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fsize_of_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_ref.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,27 @@\n+#![allow(unused)]\n+#![warn(clippy::size_of_ref)]\n+\n+use std::mem::size_of_val;\n+\n+fn main() {\n+    let x = 5;\n+    let y = &x;\n+\n+    size_of_val(&x); // no lint\n+    size_of_val(y); // no lint\n+\n+    size_of_val(&&x);\n+    size_of_val(&y);\n+}\n+\n+struct S {\n+    field: u32,\n+    data: Vec<u8>,\n+}\n+\n+impl S {\n+    /// Get size of object including `self`, in bytes.\n+    pub fn size(&self) -> usize {\n+        std::mem::size_of_val(&self) + (std::mem::size_of::<u8>() * self.data.capacity())\n+    }\n+}"}, {"sha": "d4c13ac3290b6fc2a96b6079ce244cc70f78f3e5", "filename": "tests/ui/size_of_ref.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fsize_of_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fsize_of_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_ref.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,27 @@\n+error: argument to `std::mem::size_of_val()` is a reference to a reference\n+  --> $DIR/size_of_ref.rs:13:5\n+   |\n+LL |     size_of_val(&&x);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\n+   = note: `-D clippy::size-of-ref` implied by `-D warnings`\n+\n+error: argument to `std::mem::size_of_val()` is a reference to a reference\n+  --> $DIR/size_of_ref.rs:14:5\n+   |\n+LL |     size_of_val(&y);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\n+\n+error: argument to `std::mem::size_of_val()` is a reference to a reference\n+  --> $DIR/size_of_ref.rs:25:9\n+   |\n+LL |         std::mem::size_of_val(&self) + (std::mem::size_of::<u8>() * self.data.capacity())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b3ea3d9039e088b7ec974a5f3abfd5358d64443b", "filename": "tests/ui/transmute_null_to_fn.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_null_to_fn.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,28 @@\n+#![allow(dead_code)]\n+#![warn(clippy::transmute_null_to_fn)]\n+#![allow(clippy::zero_ptr)]\n+\n+// Easy to lint because these only span one line.\n+fn one_liners() {\n+    unsafe {\n+        let _: fn() = std::mem::transmute(0 as *const ());\n+        let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n+    }\n+}\n+\n+pub const ZPTR: *const usize = 0 as *const _;\n+pub const NOT_ZPTR: *const usize = 1 as *const _;\n+\n+fn transmute_const() {\n+    unsafe {\n+        // Should raise a lint.\n+        let _: fn() = std::mem::transmute(ZPTR);\n+        // Should NOT raise a lint.\n+        let _: fn() = std::mem::transmute(NOT_ZPTR);\n+    }\n+}\n+\n+fn main() {\n+    one_liners();\n+    transmute_const();\n+}"}, {"sha": "f0c65497d750edb32c01442443f3d2bfddba003c", "filename": "tests/ui/transmute_null_to_fn.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ftransmute_null_to_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Ftransmute_null_to_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_null_to_fn.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,27 @@\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:8:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(0 as *const ());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+   = note: `-D clippy::transmute-null-to-fn` implied by `-D warnings`\n+\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:9:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:19:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(ZPTR);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "94b206d8e58f6b4e7c79b29399ae3b670d4cb58f", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -33,20 +33,87 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n-fn test_issue_5833() -> Result<(), ()> {\n+fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n     if Some(\"ok\") == lines.into_iter().next() {}\n+}\n \n-    Ok(())\n+fn lint_into_iter_on_mutable_local_implementing_iterator_in_expr() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines();\n+    if Some(\"ok\") == lines.next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines();\n+    if Some(\"ok\") == lines.next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator_2() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    if Some(\"ok\") == text.lines().next() {}\n+}\n+\n+#[allow(const_item_mutation)]\n+fn lint_into_iter_on_const_implementing_iterator() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let _ = NUMBERS.next();\n+}\n+\n+fn lint_into_iter_on_const_implementing_iterator_2() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let mut n = NUMBERS;\n+    n.next();\n+}\n+\n+#[derive(Clone, Copy)]\n+struct CopiableCounter {\n+    counter: u32,\n+}\n+\n+impl Iterator for CopiableCounter {\n+    type Item = u32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.counter = self.counter.wrapping_add(1);\n+        Some(self.counter)\n+    }\n+}\n+\n+fn dont_lint_into_iter_on_copy_iter() {\n+    let mut c = CopiableCounter { counter: 0 };\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.next(), Some(1));\n+    assert_eq!(c.next(), Some(2));\n+}\n+\n+fn dont_lint_into_iter_on_static_copy_iter() {\n+    static mut C: CopiableCounter = CopiableCounter { counter: 0 };\n+    unsafe {\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.next(), Some(1));\n+        assert_eq!(C.next(), Some(2));\n+    }\n }\n \n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n-    test_issue_5833().unwrap();\n+\n+    dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_expr_implementing_iterator();\n+    lint_into_iter_on_expr_implementing_iterator_2();\n+    lint_into_iter_on_const_implementing_iterator();\n+    lint_into_iter_on_const_implementing_iterator_2();\n+    dont_lint_into_iter_on_copy_iter();\n+    dont_lint_into_iter_on_static_copy_iter();\n \n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");"}, {"sha": "c7ae927941bf1cceb72313528ed4f8b539c84f22", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -33,20 +33,87 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n-fn test_issue_5833() -> Result<(), ()> {\n+fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n     if Some(\"ok\") == lines.into_iter().next() {}\n+}\n \n-    Ok(())\n+fn lint_into_iter_on_mutable_local_implementing_iterator_in_expr() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines();\n+    if Some(\"ok\") == lines.into_iter().next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let mut lines = text.lines().into_iter();\n+    if Some(\"ok\") == lines.next() {}\n+}\n+\n+fn lint_into_iter_on_expr_implementing_iterator_2() {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    if Some(\"ok\") == text.lines().into_iter().next() {}\n+}\n+\n+#[allow(const_item_mutation)]\n+fn lint_into_iter_on_const_implementing_iterator() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let _ = NUMBERS.into_iter().next();\n+}\n+\n+fn lint_into_iter_on_const_implementing_iterator_2() {\n+    const NUMBERS: std::ops::Range<i32> = 0..10;\n+    let mut n = NUMBERS.into_iter();\n+    n.next();\n+}\n+\n+#[derive(Clone, Copy)]\n+struct CopiableCounter {\n+    counter: u32,\n+}\n+\n+impl Iterator for CopiableCounter {\n+    type Item = u32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.counter = self.counter.wrapping_add(1);\n+        Some(self.counter)\n+    }\n+}\n+\n+fn dont_lint_into_iter_on_copy_iter() {\n+    let mut c = CopiableCounter { counter: 0 };\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.into_iter().next(), Some(1));\n+    assert_eq!(c.next(), Some(1));\n+    assert_eq!(c.next(), Some(2));\n+}\n+\n+fn dont_lint_into_iter_on_static_copy_iter() {\n+    static mut C: CopiableCounter = CopiableCounter { counter: 0 };\n+    unsafe {\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.into_iter().next(), Some(1));\n+        assert_eq!(C.next(), Some(1));\n+        assert_eq!(C.next(), Some(2));\n+    }\n }\n \n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n-    test_issue_5833().unwrap();\n+\n+    dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n+    lint_into_iter_on_expr_implementing_iterator();\n+    lint_into_iter_on_expr_implementing_iterator_2();\n+    lint_into_iter_on_const_implementing_iterator();\n+    lint_into_iter_on_const_implementing_iterator_2();\n+    dont_lint_into_iter_on_copy_iter();\n+    dont_lint_into_iter_on_static_copy_iter();\n \n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");"}, {"sha": "be067c6843acea3d8c3fd3036346a25be30f571e", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -22,71 +22,101 @@ error: useless conversion to the same type: `i32`\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n+error: useless conversion to the same type: `std::str::Lines<'_>`\n+  --> $DIR/useless_conversion.rs:45:22\n+   |\n+LL |     if Some(\"ok\") == lines.into_iter().next() {}\n+   |                      ^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `lines`\n+\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n+  --> $DIR/useless_conversion.rs:50:21\n+   |\n+LL |     let mut lines = text.lines().into_iter();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n+\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n+  --> $DIR/useless_conversion.rs:56:22\n+   |\n+LL |     if Some(\"ok\") == text.lines().into_iter().next() {}\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n+\n+error: useless conversion to the same type: `std::ops::Range<i32>`\n+  --> $DIR/useless_conversion.rs:62:13\n+   |\n+LL |     let _ = NUMBERS.into_iter().next();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n+\n+error: useless conversion to the same type: `std::ops::Range<i32>`\n+  --> $DIR/useless_conversion.rs:67:17\n+   |\n+LL |     let mut n = NUMBERS.into_iter();\n+   |                 ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n+\n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:61:21\n+  --> $DIR/useless_conversion.rs:128:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:62:21\n+  --> $DIR/useless_conversion.rs:129:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:63:13\n+  --> $DIR/useless_conversion.rs:130:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:64:13\n+  --> $DIR/useless_conversion.rs:131:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:65:13\n+  --> $DIR/useless_conversion.rs:132:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:66:13\n+  --> $DIR/useless_conversion.rs:133:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:67:21\n+  --> $DIR/useless_conversion.rs:134:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:72:13\n+  --> $DIR/useless_conversion.rs:139:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:78:23\n+  --> $DIR/useless_conversion.rs:145:23\n    |\n LL |     let _: Foo<'a'> = s2.into();\n    |                       ^^^^^^^^^ help: consider removing `.into()`: `s2`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:80:13\n+  --> $DIR/useless_conversion.rs:147:13\n    |\n LL |     let _ = Foo::<'a'>::from(s3);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider removing `Foo::<'a'>::from()`: `s3`\n \n error: useless conversion to the same type: `std::vec::IntoIter<Foo<'a'>>`\n-  --> $DIR/useless_conversion.rs:82:13\n+  --> $DIR/useless_conversion.rs:149:13\n    |\n LL |     let _ = vec![s4, s4, s4].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![s4, s4, s4].into_iter()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "0baec6f0b641e7b7297dda743bbcba37c46e4207", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -5,7 +5,6 @@\n // the 2015 edition here is needed because edition 2018 changed the module system\n // (see https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html) which means the lint\n // no longer detects some of the cases starting with Rust 2018.\n-// FIXME: We should likely add another edition 2021 test case for this lint\n \n #![warn(clippy::wildcard_imports)]\n #![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]"}, {"sha": "db591d56ab4d17f24e7e16f95518c9201470cad3", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -5,7 +5,6 @@\n // the 2015 edition here is needed because edition 2018 changed the module system\n // (see https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html) which means the lint\n // no longer detects some of the cases starting with Rust 2018.\n-// FIXME: We should likely add another edition 2021 test case for this lint\n \n #![warn(clippy::wildcard_imports)]\n #![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]"}, {"sha": "6b469cdfc444926355f72b614ca0787658a95aae", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -1,129 +1,129 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:16:5\n+  --> $DIR/wildcard_imports.rs:15:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:17:5\n+  --> $DIR/wildcard_imports.rs:16:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:18:5\n+  --> $DIR/wildcard_imports.rs:17:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:20:5\n+  --> $DIR/wildcard_imports.rs:19:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:24:5\n+  --> $DIR/wildcard_imports.rs:23:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:25:5\n+  --> $DIR/wildcard_imports.rs:24:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:96:13\n+  --> $DIR/wildcard_imports.rs:95:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:102:75\n+  --> $DIR/wildcard_imports.rs:101:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:103:13\n+  --> $DIR/wildcard_imports.rs:102:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:114:20\n+  --> $DIR/wildcard_imports.rs:113:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:114:30\n+  --> $DIR/wildcard_imports.rs:113:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:121:13\n+  --> $DIR/wildcard_imports.rs:120:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:150:9\n+  --> $DIR/wildcard_imports.rs:149:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:159:9\n+  --> $DIR/wildcard_imports.rs:158:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:160:9\n+  --> $DIR/wildcard_imports.rs:159:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:171:13\n+  --> $DIR/wildcard_imports.rs:170:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:206:17\n+  --> $DIR/wildcard_imports.rs:205:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:214:13\n+  --> $DIR/wildcard_imports.rs:213:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:223:17\n+  --> $DIR/wildcard_imports.rs:222:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:232:13\n+  --> $DIR/wildcard_imports.rs:231:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:240:13\n+  --> $DIR/wildcard_imports.rs:239:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`"}, {"sha": "6d534a10edcd13a3514405a751367a68b8f1941a", "filename": "tests/ui/wildcard_imports_2021.edition2018.fixed", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2018.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,240 @@\n+// revisions: edition2018 edition2021\n+//[edition2018] edition:2018\n+//[edition2021] edition:2021\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::foo;\n+use crate::mod_mod::inner_mod;\n+use crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod};\n+use crate::struct_mod::{A, inner_struct_mod};\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar;\n+use wildcard_imports_helper::prelude::v1::*;\n+use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+use std::io::prelude::*;\n+\n+struct ReadFoo;\n+\n+impl Read for ReadFoo {\n+    fn read(&mut self, _buf: &mut [u8]) -> std::io::Result<usize> {\n+        Ok(0)\n+    }\n+}\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+    let _ = PreludeModAnywhere;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::foo;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, inner_extern_foo};\n+        use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::inner_foo, inner2::inner_bar};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported};\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::{ExportedEnum, ExportedStruct, exported};\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::exported;\n+    use crate:: fn_mod::foo;\n+\n+    exported();\n+    foo();\n+}\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::insidefoo;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use crate::super_imports::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::foofoo;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::foofoo;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod attestation_should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "acca9f651b47482368d1a775046258374b88441d", "filename": "tests/ui/wildcard_imports_2021.edition2018.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2018.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,132 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:13:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:14:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:15:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:16:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:19:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:21:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:91:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:97:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:98:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:116:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:145:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:154:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:155:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:166:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:201:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:209:13\n+   |\n+LL |         use crate::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:218:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:227:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:235:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "6d534a10edcd13a3514405a751367a68b8f1941a", "filename": "tests/ui/wildcard_imports_2021.edition2021.fixed", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2021.fixed?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,240 @@\n+// revisions: edition2018 edition2021\n+//[edition2018] edition:2018\n+//[edition2021] edition:2021\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::foo;\n+use crate::mod_mod::inner_mod;\n+use crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod};\n+use crate::struct_mod::{A, inner_struct_mod};\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar;\n+use wildcard_imports_helper::prelude::v1::*;\n+use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+use std::io::prelude::*;\n+\n+struct ReadFoo;\n+\n+impl Read for ReadFoo {\n+    fn read(&mut self, _buf: &mut [u8]) -> std::io::Result<usize> {\n+        Ok(0)\n+    }\n+}\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+    let _ = PreludeModAnywhere;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::foo;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, inner_extern_foo};\n+        use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::inner_foo, inner2::inner_bar};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported};\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::{ExportedEnum, ExportedStruct, exported};\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::exported;\n+    use crate:: fn_mod::foo;\n+\n+    exported();\n+    foo();\n+}\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::insidefoo;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use crate::super_imports::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::foofoo;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::foofoo;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod attestation_should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "acca9f651b47482368d1a775046258374b88441d", "filename": "tests/ui/wildcard_imports_2021.edition2021.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2021.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,132 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:13:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:14:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:15:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:16:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:19:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:21:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:91:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:97:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:98:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:116:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:145:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:154:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:155:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:166:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:201:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:209:13\n+   |\n+LL |         use crate::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:218:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:227:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:235:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "b5ed58e68136ff55b73ac19dd3a29a5e42e41c76", "filename": "tests/ui/wildcard_imports_2021.rs", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.rs?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,241 @@\n+// revisions: edition2018 edition2021\n+//[edition2018] edition:2018\n+//[edition2021] edition:2021\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::*;\n+use crate::mod_mod::*;\n+use crate::multi_fn_mod::*;\n+use crate::struct_mod::*;\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import::*;\n+use wildcard_imports_helper::prelude::v1::*;\n+use wildcard_imports_helper::*;\n+\n+use std::io::prelude::*;\n+\n+struct ReadFoo;\n+\n+impl Read for ReadFoo {\n+    fn read(&mut self, _buf: &mut [u8]) -> std::io::Result<usize> {\n+        Ok(0)\n+    }\n+}\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+    let _ = PreludeModAnywhere;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::*;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+        use wildcard_imports_helper::*;\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::*, inner2::*};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::*;\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::*;\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::  * ;\n+    use crate:: fn_mod::\n+        *;\n+\n+    exported();\n+    foo();\n+}\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use crate::super_imports::*;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::*;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::*;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod attestation_should_be_replaced {\n+        use super::*;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "92f6d31530fa8ac0aa2a973f3b1eda1e984f40d3", "filename": "tests/ui/wildcard_imports_2021.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ccafea92d00fe35c71fb1ab419df7b4f264d25f/tests%2Fui%2Fwildcard_imports_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.stderr?ref=4ccafea92d00fe35c71fb1ab419df7b4f264d25f", "patch": "@@ -0,0 +1,132 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:9:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:10:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:11:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:12:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:15:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:17:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:87:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:93:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:94:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:105:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:105:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:112:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:141:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:150:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:151:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:162:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:197:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:205:13\n+   |\n+LL |         use crate::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:214:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:223:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:231:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n+"}]}