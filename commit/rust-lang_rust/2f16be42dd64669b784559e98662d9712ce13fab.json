{"sha": "2f16be42dd64669b784559e98662d9712ce13fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMTZiZTQyZGQ2NDY2OWI3ODQ1NTllOTg2NjJkOTcxMmNlMTNmYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-31T02:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-31T02:20:30Z"}, "message": "Auto merge of #65990 - Centril:rollup-v843h4a, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #65274 (Upload toolstates.json to rust-lang-ci2)\n - #65434 (Add long error explanation for E0577)\n - #65850 (Update comments re type parameter hack in object safety)\n - #65955 (ci: revert msys2 ca-certificates hack)\n - #65959 (Fix an incorrect docstring for Immediate in librustc_mir/interpret.)\n - #65979 (Switch CrateMetadata's source_map_import_info from RwLock to Once)\n - #65981 (work around aggressive syntax feature gating)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "402e851112a70a63f1dca61bfd009aebd38ba989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402e851112a70a63f1dca61bfd009aebd38ba989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f16be42dd64669b784559e98662d9712ce13fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f16be42dd64669b784559e98662d9712ce13fab", "html_url": "https://github.com/rust-lang/rust/commit/2f16be42dd64669b784559e98662d9712ce13fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f16be42dd64669b784559e98662d9712ce13fab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d537ef2276d7c82c5f138f68b1c2d5262f2899", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d537ef2276d7c82c5f138f68b1c2d5262f2899", "html_url": "https://github.com/rust-lang/rust/commit/03d537ef2276d7c82c5f138f68b1c2d5262f2899"}, {"sha": "83000c29ba87bcce2fecb2344844c9a8ec9be9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/83000c29ba87bcce2fecb2344844c9a8ec9be9ad", "html_url": "https://github.com/rust-lang/rust/commit/83000c29ba87bcce2fecb2344844c9a8ec9be9ad"}], "stats": {"total": 348, "additions": 197, "deletions": 151}, "files": [{"sha": "39d7ea922bceda50770772869345adc83364b440", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -1080,6 +1080,10 @@ impl Build {\n     /// done. The file is updated immediately after this function completes.\n     pub fn save_toolstate(&self, tool: &str, state: ToolState) {\n         if let Some(ref path) = self.config.save_toolstates {\n+            if let Some(parent) = path.parent() {\n+                // Ensure the parent directory always exists\n+                t!(std::fs::create_dir_all(parent));\n+            }\n             let mut file = t!(fs::OpenOptions::new()\n                 .create(true)\n                 .read(true)"}, {"sha": "271c32585449ec295495a2882fb480de246af258", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -140,6 +140,7 @@ jobs:\n         IMAGE: x86_64-gnu-aux\n       x86_64-gnu-tools:\n         IMAGE: x86_64-gnu-tools\n+        DEPLOY_TOOLSTATES_JSON: toolstates-linux.json\n       x86_64-gnu-debug:\n         IMAGE: x86_64-gnu-debug\n       x86_64-gnu-nopt:\n@@ -262,8 +263,9 @@ jobs:\n       # MSVC tools tests\n       x86_64-msvc-tools:\n         MSYS_BITS: 64\n-        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n-        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json\n+        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\n+        DEPLOY_TOOLSTATES_JSON: toolstates-windows.json\n \n       # 32/64-bit MinGW builds.\n       #"}, {"sha": "cef2d235602f19c32325bedea47b3cf23eb8aab0", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -183,37 +183,21 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n   displayName: Run build\n \n-# If we're a deploy builder, use the `aws` command to publish everything to our\n-# bucket.\n-- bash: |\n-    set -e\n-    source src/ci/shared.sh\n-    if [ \"$AGENT_OS\" = \"Linux\" ]; then\n-        rm -rf obj/build/dist/doc\n-        upload_dir=obj/build/dist\n-    else\n-        rm -rf build/dist/doc\n-        upload_dir=build/dist\n-    fi\n-    ls -la $upload_dir\n-    deploy_dir=rustc-builds\n-    if [ \"$DEPLOY_ALT\" == \"1\" ]; then\n-        deploy_dir=rustc-builds-alt\n-    fi\n-    retry aws s3 cp --no-progress --recursive --acl public-read ./$upload_dir s3://$DEPLOY_BUCKET/$deploy_dir/$BUILD_SOURCEVERSION\n+- bash: src/ci/scripts/upload-artifacts.sh\n   env:\n     AWS_ACCESS_KEY_ID: $(UPLOAD_AWS_ACCESS_KEY_ID)\n     AWS_SECRET_ACCESS_KEY: $(UPLOAD_AWS_SECRET_ACCESS_KEY)\n-  condition: and(succeeded(), not(variables.SKIP_JOB), or(eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')))\n   displayName: Upload artifacts\n-\n-# Upload CPU usage statistics that we've been gathering this whole time. Always\n-# execute this step in case we want to inspect failed builds, but don't let\n-# errors here ever fail the build since this is just informational.\n-- bash: aws s3 cp --acl public-read cpu-usage.csv s3://$DEPLOY_BUCKET/rustc-builds/$BUILD_SOURCEVERSION/cpu-$CI_JOB_NAME.csv\n-  env:\n-    AWS_ACCESS_KEY_ID: $(UPLOAD_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(UPLOAD_AWS_SECRET_ACCESS_KEY)\n-  condition: variables['UPLOAD_AWS_SECRET_ACCESS_KEY']\n-  continueOnError: true\n-  displayName: Upload CPU usage statistics\n+  # Adding a condition on DEPLOY=1 or DEPLOY_ALT=1 is not needed as all deploy\n+  # builders *should* have the AWS credentials available. Still, explicitly\n+  # adding the condition is helpful as this way CI will not silently skip\n+  # deploying artifacts from a dist builder if the variables are misconfigured,\n+  # erroring about invalid credentials instead.\n+  condition: |\n+    and(\n+      succeeded(), not(variables.SKIP_JOB),\n+      or(\n+        variables.UPLOAD_AWS_SECRET_ACCESS_KEY,\n+        eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')\n+      )\n+    )"}, {"sha": "cdafcbadc9ec768bc9c044cfc2369c7ac51f3a82", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -106,6 +106,7 @@ fi\n mkdir -p $HOME/.cargo\n mkdir -p $objdir/tmp\n mkdir -p $objdir/cores\n+mkdir -p /tmp/toolstate\n \n args=\n if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n@@ -156,6 +157,7 @@ else\n   args=\"$args --volume $objdir:/checkout/obj\"\n   args=\"$args --volume $HOME/.cargo:/cargo\"\n   args=\"$args --volume $HOME/rustsrc:$HOME/rustsrc\"\n+  args=\"$args --volume /tmp/toolstate:/tmp/toolstate\"\n   args=\"$args --env LOCAL_USER_ID=`id -u`\"\n fi\n "}, {"sha": "7687a6ca23e180fb386ac2446fd169d239c21a45", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -26,5 +26,5 @@ ENV CHECK_LINKS 1\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\\n-  --save-toolstates=/tmp/toolstates.json\n-ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstates.json linux\n+  --save-toolstates=/tmp/toolstate/toolstates.json\n+ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstate/toolstates.json linux"}, {"sha": "ebb8c0bda53ee2ae3654a1d9e28388b2eeafcb07", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -3,7 +3,7 @@\n set -eu\n \n X_PY=\"$1\"\n-TOOLSTATE_FILE=\"$(realpath $2)\"\n+TOOLSTATE_FILE=\"$(realpath -m $2)\"\n OS=\"$3\"\n COMMIT=\"$(git rev-parse HEAD)\"\n CHANGED_FILES=\"$(git diff --name-status HEAD HEAD^)\"\n@@ -13,6 +13,7 @@ SIX_WEEK_CYCLE=\"$(( ($(date +%s) / 86400 - 20) % 42 ))\"\n #   The Wednesday after this has value 0.\n #   We track this value to prevent regressing tools in the last week of the 6-week cycle.\n \n+mkdir -p \"$(dirname $TOOLSTATE_FILE)\"\n touch \"$TOOLSTATE_FILE\"\n \n # Try to test all the tools and store the build/test success in the TOOLSTATE_FILE"}, {"sha": "36d9202f7a2d30e61fb7f8c8afd6d6538d9fc8cb", "filename": "src/ci/scripts/install-msys2-packages.sh", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -8,14 +8,6 @@ source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n if isWindows; then\n     pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar\n \n-    # FIXME(#65767): workaround msys bug, step 2\n-    arch=i686\n-    if [ \"$MSYS_BITS\" = \"64\" ]; then\n-      arch=x86_64\n-    fi\n-    pacman -U --noconfirm --noprogressbar mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n-    rm mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n-\n     # Make sure we use the native python interpreter instead of some msys equivalent\n     # one way or another. The msys interpreters seem to have weird path conversions\n     # baked in which break LLVM's build system one way or another, so let's use the"}, {"sha": "ce37c3b146977dafa2fcb3e08a79cdebf89a3f5f", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -1,5 +1,4 @@\n #!/bin/bash\n-# ignore-tidy-linelength\n # Download and install MSYS2, needed primarily for the test suite (run-make) but\n # also used by the MinGW toolchain for assembling things.\n #\n@@ -13,13 +12,6 @@ IFS=$'\\n\\t'\n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n if isWindows; then\n-    # FIXME(#65767): workaround msys bug, step 1\n-    arch=i686\n-    if [ \"$MSYS_BITS\" = \"64\" ]; then\n-      arch=x86_64\n-    fi\n-    curl -O \"${MIRRORS_BASE}/msys2-repo/mingw/$arch/mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\"\n-\n     choco install msys2 --params=\"/InstallDir:${SYSTEM_WORKFOLDER}/msys2 /NoPath\" -y --no-progress\n     mkdir -p \"${SYSTEM_WORKFOLDER}/msys2/home/${USERNAME}\"\n "}, {"sha": "312ec9d805012c7433fc54b7643bf2cb9926a6d2", "filename": "src/ci/scripts/upload-artifacts.sh", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fscripts%2Fupload-artifacts.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fscripts%2Fupload-artifacts.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fupload-artifacts.sh?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -0,0 +1,41 @@\n+#!/bin/bash\n+# Upload all the artifacts to our S3 bucket. All the files inside ${upload_dir}\n+# will be uploaded to the deploy bucket and eventually signed and released in\n+# static.rust-lang.org.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+upload_dir=\"$(mktemp -d)\"\n+\n+# Release tarballs produced by a dist builder.\n+if [[ \"${DEPLOY-0}\" -eq \"1\" ]] || [[ \"${DEPLOY_ALT-0}\" -eq \"1\" ]]; then\n+    dist_dir=build/dist\n+    if isLinux; then\n+        dist_dir=obj/build/dist\n+    fi\n+    rm -rf \"${dist_dir}/doc\"\n+    cp -r \"${dist_dir}\"/* \"${upload_dir}\"\n+fi\n+\n+# CPU usage statistics.\n+cp cpu-usage.csv \"${upload_dir}/cpu-${CI_JOB_NAME}.csv\"\n+\n+# Toolstate data.\n+if [[ -n \"${DEPLOY_TOOLSTATES_JSON+x}\" ]]; then\n+    cp /tmp/toolstate/toolstates.json \"${upload_dir}/${DEPLOY_TOOLSTATES_JSON}\"\n+fi\n+\n+echo \"Files that will be uploaded:\"\n+ls -lah \"${upload_dir}\"\n+echo\n+\n+deploy_dir=\"rustc-builds\"\n+if [[ \"${DEPLOY_ALT-0}\" -eq \"1\" ]]; then\n+    deploy_dir=\"rustc-builds-alt\"\n+fi\n+deploy_url=\"s3://${DEPLOY_BUCKET}/${deploy_dir}/$(ciCommit)\"\n+\n+retry aws s3 cp --no-progress --recursive --acl public-read \"${upload_dir}\" \"${deploy_url}\""}, {"sha": "718a5379ae558c44aac11ac160163b71eb19225a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -46,6 +46,10 @@ function getCIBranch {\n   echo \"$BUILD_SOURCEBRANCHNAME\"\n }\n \n+function ciCommit {\n+  echo \"${BUILD_SOURCEVERSION}\"\n+}\n+\n function ciCommandAddPath {\n     if [[ $# -ne 1 ]]; then\n         echo \"usage: $0 <path>\""}, {"sha": "1b67b05c73021de024b6f38612dffc6f088cb470", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -133,6 +133,7 @@\n #[allow(unused)]\n use prelude::v1::*;\n \n+#[cfg(not(test))] // See #65860\n #[macro_use]\n mod macros;\n \n@@ -180,40 +181,51 @@ pub mod hint;\n \n /* Core language traits */\n \n+#[cfg(not(test))] // See #65860\n pub mod marker;\n pub mod ops;\n+#[cfg(not(test))] // See #65860\n pub mod cmp;\n+#[cfg(not(test))] // See #65860\n pub mod clone;\n+#[cfg(not(test))] // See #65860\n pub mod default;\n pub mod convert;\n pub mod borrow;\n \n /* Core types and methods on primitives */\n \n pub mod any;\n+#[cfg(not(test))] // See #65860\n pub mod array;\n pub mod ascii;\n pub mod sync;\n pub mod cell;\n pub mod char;\n pub mod panic;\n pub mod panicking;\n+#[cfg(not(test))] // See #65860\n pub mod pin;\n+#[cfg(not(test))] // See #65860\n pub mod iter;\n pub mod option;\n pub mod raw;\n pub mod result;\n pub mod ffi;\n \n pub mod slice;\n+#[cfg(not(test))] // See #65860\n pub mod str;\n+#[cfg(not(test))] // See #65860\n pub mod hash;\n+#[cfg(not(test))] // See #65860\n pub mod fmt;\n pub mod time;\n \n pub mod unicode;\n \n /* Async */\n+#[cfg(not(test))] // See #65860\n pub mod future;\n pub mod task;\n "}, {"sha": "8ded1417ee570985e8d32d1cb62c9e70a735dd45", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -520,9 +520,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// a pointer.\n     ///\n     /// In practice, we cannot use `dyn Trait` explicitly in the obligation because it would result\n-    /// in a new check that `Trait` is object safe, creating a cycle. So instead, we fudge a little\n-    /// by introducing a new type parameter `U` such that `Self: Unsize<U>` and `U: Trait + ?Sized`,\n-    /// and use `U` in place of `dyn Trait`. Written as a chalk-style query:\n+    /// in a new check that `Trait` is object safe, creating a cycle (until object_safe_for_dispatch\n+    /// is stabilized, see tracking issue https://github.com/rust-lang/rust/issues/43561).\n+    /// Instead, we fudge a little by introducing a new type parameter `U` such that\n+    /// `Self: Unsize<U>` and `U: Trait + ?Sized`, and use `U` in place of `dyn Trait`.\n+    /// Written as a chalk-style query:\n     ///\n     ///     forall (U: Trait + ?Sized) {\n     ///         if (Self: Unsize<U>) {\n@@ -556,8 +558,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         // the type `U` in the query\n         // use a bogus type parameter to mimick a forall(U) query using u32::MAX for now.\n-        // FIXME(mikeyhew) this is a total hack, and we should replace it when real forall queries\n-        // are implemented\n+        // FIXME(mikeyhew) this is a total hack. Once object_safe_for_dispatch is stabilized, we can\n+        // replace this with `dyn Trait`\n         let unsized_self_ty: Ty<'tcx> = self.mk_ty_param(\n             ::std::u32::MAX,\n             Symbol::intern(\"RustaceansAreAwesome\"),"}, {"sha": "d111471f53d7d80ad863ca0840423acf914238a2", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -497,13 +497,15 @@ impl<T> Once<T> {\n     /// If the value was already initialized the closure is not called and `false` is returned,\n     /// otherwise if the value from the closure initializes the inner value, `true` is returned\n     #[inline]\n-    pub fn init_locking<F: FnOnce() -> T>(&self, f: F) -> bool {\n-        let mut lock = self.0.lock();\n-        if lock.is_some() {\n-            return false;\n+    pub fn init_locking<F: FnOnce() -> T>(&self, f: F) -> &T {\n+        {\n+            let mut lock = self.0.lock();\n+            if lock.is_none() {\n+                *lock = Some(f());\n+            }\n         }\n-        *lock = Some(f());\n-        true\n+\n+        self.borrow()\n     }\n \n     /// Tries to initialize the inner value by calling the closure without ensuring that no-one"}, {"sha": "540b06b3a8be99e692201836c32fc11a7b1ca0b8", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -3,7 +3,7 @@\n use crate::cstore::{self, CStore, MetadataBlob};\n use crate::locator::{self, CratePaths};\n use crate::schema::{CrateRoot, CrateDep};\n-use rustc_data_structures::sync::{RwLock, Lock, AtomicCell};\n+use rustc_data_structures::sync::{Lock, Once, AtomicCell};\n \n use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::svh::Svh;\n@@ -249,7 +249,7 @@ impl<'a> CrateLoader<'a> {\n             cnum_map,\n             cnum,\n             dependencies: Lock::new(dependencies),\n-            source_map_import_info: RwLock::new(vec![]),\n+            source_map_import_info: Once::new(),\n             alloc_decoding_state: AllocDecodingState::new(interpret_alloc_index),\n             dep_kind: Lock::new(dep_kind),\n             source,"}, {"sha": "8dfc921c95b3d1205848148a491c2c5b345802a4", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -9,7 +9,7 @@ use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::sync::{Lrc, RwLock, Lock, MetadataRef, AtomicCell};\n+use rustc_data_structures::sync::{Lrc, Lock, MetadataRef, Once, AtomicCell};\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n@@ -62,7 +62,7 @@ crate struct CrateMetadata {\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     crate raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate.\n-    crate source_map_import_info: RwLock<Vec<ImportedSourceFile>>,\n+    crate source_map_import_info: Once<Vec<ImportedSourceFile>>,\n     /// Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n     crate alloc_decoding_state: AllocDecodingState,\n     /// The `DepNodeIndex` of the `DepNode` representing this upstream crate."}, {"sha": "c5954e1ea1d9830e2433ef64e8e4bff57e16abb0", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 63, "deletions": 82, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -5,7 +5,7 @@ use crate::schema::*;\n use crate::table::{FixedSizeEncoding, PerDefTable};\n \n use rustc_index::vec::IndexVec;\n-use rustc_data_structures::sync::{Lrc, ReadGuard};\n+use rustc_data_structures::sync::Lrc;\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n use rustc::middle::cstore::{LinkagePreference, NativeLibrary, ForeignModule};\n@@ -664,7 +664,7 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx: TyCtxt<'tcx>,\n     ) -> ty::GenericPredicates<'tcx> {\n         self.root.per_def.predicates.get(self, item_id).unwrap().decode((self, tcx))\n-}\n+    }\n \n     crate fn get_predicates_defined_on(\n         &self,\n@@ -1290,87 +1290,68 @@ impl<'a, 'tcx> CrateMetadata {\n     fn imported_source_files(\n         &'a self,\n         local_source_map: &source_map::SourceMap,\n-    ) -> ReadGuard<'a, Vec<cstore::ImportedSourceFile>> {\n-        {\n-            let source_files = self.source_map_import_info.borrow();\n-            if !source_files.is_empty() {\n-                return source_files;\n-            }\n-        }\n-\n-        // Lock the source_map_import_info to ensure this only happens once\n-        let mut source_map_import_info = self.source_map_import_info.borrow_mut();\n-\n-        if !source_map_import_info.is_empty() {\n-            drop(source_map_import_info);\n-            return self.source_map_import_info.borrow();\n-        }\n-\n-        let external_source_map = self.root.source_map.decode(self);\n-\n-        let imported_source_files = external_source_map.map(|source_file_to_import| {\n-            // We can't reuse an existing SourceFile, so allocate a new one\n-            // containing the information we need.\n-            let syntax_pos::SourceFile { name,\n-                                      name_was_remapped,\n-                                      src_hash,\n-                                      start_pos,\n-                                      end_pos,\n-                                      mut lines,\n-                                      mut multibyte_chars,\n-                                      mut non_narrow_chars,\n-                                      mut normalized_pos,\n-                                      name_hash,\n-                                      .. } = source_file_to_import;\n-\n-            let source_length = (end_pos - start_pos).to_usize();\n-\n-            // Translate line-start positions and multibyte character\n-            // position into frame of reference local to file.\n-            // `SourceMap::new_imported_source_file()` will then translate those\n-            // coordinates to their new global frame of reference when the\n-            // offset of the SourceFile is known.\n-            for pos in &mut lines {\n-                *pos = *pos - start_pos;\n-            }\n-            for mbc in &mut multibyte_chars {\n-                mbc.pos = mbc.pos - start_pos;\n-            }\n-            for swc in &mut non_narrow_chars {\n-                *swc = *swc - start_pos;\n-            }\n-            for np in &mut normalized_pos {\n-                np.pos = np.pos - start_pos;\n-            }\n-\n-            let local_version = local_source_map.new_imported_source_file(name,\n-                                                                   name_was_remapped,\n-                                                                   self.cnum.as_u32(),\n-                                                                   src_hash,\n-                                                                   name_hash,\n-                                                                   source_length,\n-                                                                   lines,\n-                                                                   multibyte_chars,\n-                                                                   non_narrow_chars,\n-                                                                   normalized_pos);\n-            debug!(\"CrateMetaData::imported_source_files alloc \\\n-                    source_file {:?} original (start_pos {:?} end_pos {:?}) \\\n-                    translated (start_pos {:?} end_pos {:?})\",\n-                   local_version.name, start_pos, end_pos,\n-                   local_version.start_pos, local_version.end_pos);\n-\n-            cstore::ImportedSourceFile {\n-                original_start_pos: start_pos,\n-                original_end_pos: end_pos,\n-                translated_source_file: local_version,\n-            }\n-        }).collect();\n-\n-        *source_map_import_info = imported_source_files;\n-        drop(source_map_import_info);\n+    ) -> &[cstore::ImportedSourceFile] {\n+        self.source_map_import_info.init_locking(|| {\n+            let external_source_map = self.root.source_map.decode(self);\n+\n+            external_source_map.map(|source_file_to_import| {\n+                // We can't reuse an existing SourceFile, so allocate a new one\n+                // containing the information we need.\n+                let syntax_pos::SourceFile { name,\n+                                          name_was_remapped,\n+                                          src_hash,\n+                                          start_pos,\n+                                          end_pos,\n+                                          mut lines,\n+                                          mut multibyte_chars,\n+                                          mut non_narrow_chars,\n+                                          mut normalized_pos,\n+                                          name_hash,\n+                                          .. } = source_file_to_import;\n+\n+                let source_length = (end_pos - start_pos).to_usize();\n+\n+                // Translate line-start positions and multibyte character\n+                // position into frame of reference local to file.\n+                // `SourceMap::new_imported_source_file()` will then translate those\n+                // coordinates to their new global frame of reference when the\n+                // offset of the SourceFile is known.\n+                for pos in &mut lines {\n+                    *pos = *pos - start_pos;\n+                }\n+                for mbc in &mut multibyte_chars {\n+                    mbc.pos = mbc.pos - start_pos;\n+                }\n+                for swc in &mut non_narrow_chars {\n+                    *swc = *swc - start_pos;\n+                }\n+                for np in &mut normalized_pos {\n+                    np.pos = np.pos - start_pos;\n+                }\n \n-        // This shouldn't borrow twice, but there is no way to downgrade RefMut to Ref.\n-        self.source_map_import_info.borrow()\n+                let local_version = local_source_map.new_imported_source_file(name,\n+                                                                       name_was_remapped,\n+                                                                       self.cnum.as_u32(),\n+                                                                       src_hash,\n+                                                                       name_hash,\n+                                                                       source_length,\n+                                                                       lines,\n+                                                                       multibyte_chars,\n+                                                                       non_narrow_chars,\n+                                                                       normalized_pos);\n+                debug!(\"CrateMetaData::imported_source_files alloc \\\n+                        source_file {:?} original (start_pos {:?} end_pos {:?}) \\\n+                        translated (start_pos {:?} end_pos {:?})\",\n+                       local_version.name, start_pos, end_pos,\n+                       local_version.start_pos, local_version.end_pos);\n+\n+                cstore::ImportedSourceFile {\n+                    original_start_pos: start_pos,\n+                    original_end_pos: end_pos,\n+                    translated_source_file: local_version,\n+                }\n+            }).collect()\n+        })\n     }\n \n     /// Get the `DepNodeIndex` corresponding this crate. The result of this"}, {"sha": "ae23971849eea6819ab6d5f1e05174de84e9587c", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -19,7 +19,7 @@ use super::{\n };\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n \n-/// A `Value` represents a single immediate self-contained Rust value.\n+/// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n /// For optimization of a few very common cases, there is also a representation for a pair of\n /// primitive values (`ScalarPair`). It allows Miri to avoid making allocations for checked binary"}, {"sha": "b14913cd4fddeca792e0877aa9ff8994f2e67120", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -1823,6 +1823,33 @@ trait Hello {\n ```\n \"##,\n \n+E0577: r##\"\n+Something other than a module was found in visibility scope.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0577,edition2018\n+pub struct Sea;\n+\n+pub (in crate::Sea) struct Shark; // error!\n+\n+fn main() {}\n+```\n+\n+`Sea` is not a module, therefore it is invalid to use it in a visibility path.\n+To fix this error we need to ensure `Sea` is a module.\n+\n+Please note that the visibility scope can only be applied on ancestors!\n+\n+```edition2018\n+pub mod Sea {\n+    pub (in crate::Sea) struct Shark; // ok!\n+}\n+\n+fn main() {}\n+```\n+\"##,\n+\n E0603: r##\"\n A private item was used outside its scope.\n \n@@ -1990,6 +2017,5 @@ fn main() {}\n //  E0427, merged into 530\n //  E0467, removed\n //  E0470, removed\n-    E0577,\n     E0578,\n }"}, {"sha": "197ecf0cb003916b08e785074ec7dbaaae87b02e", "filename": "src/test/ui/resolve/resolve-bad-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -30,5 +30,5 @@ LL | pub(in too_soon) struct H;\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0433, E0742.\n+Some errors have detailed explanations: E0433, E0577, E0742.\n For more information about an error, try `rustc --explain E0433`."}, {"sha": "d3fa1d7732e726a98ff62306663fcff3de0a9a08", "filename": "src/test/ui/span/visibility-ty-params.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f16be42dd64669b784559e98662d9712ce13fab/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f16be42dd64669b784559e98662d9712ce13fab/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr?ref=2f16be42dd64669b784559e98662d9712ce13fab", "patch": "@@ -18,3 +18,4 @@ LL |     m!{ m<> }\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0577`."}]}