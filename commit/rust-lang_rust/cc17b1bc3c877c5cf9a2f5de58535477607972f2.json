{"sha": "cc17b1bc3c877c5cf9a2f5de58535477607972f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMTdiMWJjM2M4NzdjNWNmOWEyZjVkZTU4NTM1NDc3NjA3OTcyZjI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T23:19:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-04T05:21:33Z"}, "message": "Add `Symbol::{with,with2}`.\n\nAnd remove the `unsafe` blocks, they're not necessary.\n\nAlso rewrite `InternedString::{with,with2}` to use the new functions.\n\nFinally, add some comments about the speed of the\n`as_str()`/`as_interned_str()` functions.", "tree": {"sha": "c807d5c6ef0191351d15afba1aad0f7f5bda747c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c807d5c6ef0191351d15afba1aad0f7f5bda747c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc17b1bc3c877c5cf9a2f5de58535477607972f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc17b1bc3c877c5cf9a2f5de58535477607972f2", "html_url": "https://github.com/rust-lang/rust/commit/cc17b1bc3c877c5cf9a2f5de58535477607972f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc17b1bc3c877c5cf9a2f5de58535477607972f2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a1bc79cbd6fbf5577e5216b8e2f3c29cbbacb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1bc79cbd6fbf5577e5216b8e2f3c29cbbacb29", "html_url": "https://github.com/rust-lang/rust/commit/7a1bc79cbd6fbf5577e5216b8e2f3c29cbbacb29"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "3a4dc1f5a096bcfb546e65637abe6b2617df2043", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cc17b1bc3c877c5cf9a2f5de58535477607972f2/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc17b1bc3c877c5cf9a2f5de58535477607972f2/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=cc17b1bc3c877c5cf9a2f5de58535477607972f2", "patch": "@@ -818,10 +818,14 @@ impl Ident {\n         with_interner(|interner| interner.is_gensymed(self.name))\n     }\n \n+    /// Convert the name to a `LocalInternedString`. This is a slowish\n+    /// operation because it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n \n+    /// Convert the name to an `InternedString`. This is a slowish operation\n+    /// because it requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         self.name.as_interned_str()\n     }\n@@ -916,6 +920,25 @@ impl Symbol {\n         with_interner(|interner| interner.intern(string))\n     }\n \n+    /// Access the symbol's chars. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self))\n+        })\n+    }\n+\n+    /// Access two symbols' chars. This is a slowish operation because it\n+    /// requires locking the symbol interner, but it is faster than calling\n+    /// `with()` twice.\n+    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: Symbol, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self), interner.get(other))\n+        })\n+    }\n+\n+    /// Convert to a `LocalInternedString`. This is a slowish operation because\n+    /// it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {\n@@ -924,6 +947,8 @@ impl Symbol {\n         })\n     }\n \n+    /// Convert to an `InternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         with_interner(|interner| InternedString {\n             symbol: interner.interned(self)\n@@ -1245,28 +1270,19 @@ impl InternedString {\n     }\n \n     pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n-        let str = with_interner(|interner| {\n-            interner.get(self.symbol) as *const str\n-        });\n-        // This is safe because the interner keeps string alive until it is dropped.\n-        // We can access it because we know the interner is still alive since we use a\n-        // scoped thread local to access it, and it was alive at the beginning of this scope\n-        unsafe { f(&*str) }\n+        self.symbol.with(f)\n     }\n \n     fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n-        let (self_str, other_str) = with_interner(|interner| {\n-            (interner.get(self.symbol) as *const str,\n-             interner.get(other.symbol) as *const str)\n-        });\n-        // This is safe for the same reason that `with` is safe.\n-        unsafe { f(&*self_str, &*other_str) }\n+        self.symbol.with2(other.symbol, f)\n     }\n \n     pub fn as_symbol(self) -> Symbol {\n         self.symbol\n     }\n \n+    /// Convert to a `LocalInternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.symbol.as_str()\n     }"}]}