{"sha": "bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYWZmMDM2ZTdhY2VmOWY1YjZiZmRjYjYzMzliZmM2ZmE3ZWNmY2Y=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-05-31T17:13:18Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-11T20:48:39Z"}, "message": "Stablize the GlobalAlloc trait\n\nFixes https://github.com/rust-lang/rust/issues/49668", "tree": {"sha": "146be050091c1c56681de710ec2f2fa18805dfe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146be050091c1c56681de710ec2f2fa18805dfe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf", "html_url": "https://github.com/rust-lang/rust/commit/bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77606f20c92518c16d68bf16c0a117af1e925524", "url": "https://api.github.com/repos/rust-lang/rust/commits/77606f20c92518c16d68bf16c0a117af1e925524", "html_url": "https://github.com/rust-lang/rust/commit/77606f20c92518c16d68bf16c0a117af1e925524"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "9c324cdb4ed0b8d18ae51d745c904d92d08d8624", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=bbaff036e7acef9f5b6bfdcb6339bfc6fa7ecfcf", "patch": "@@ -467,7 +467,7 @@ impl From<LayoutErr> for CollectionAllocErr {\n /// * `Layout` queries and calculations in general must be correct. Callers of\n ///   this trait are allowed to rely on the contracts defined on each method,\n ///   and implementors must ensure such contracts remain true.\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n pub unsafe trait GlobalAlloc {\n     /// Allocate memory as described by the given `layout`.\n     ///\n@@ -499,6 +499,7 @@ pub unsafe trait GlobalAlloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8;\n \n     /// Deallocate the block of memory at the given `ptr` pointer with the given `layout`.\n@@ -513,6 +514,7 @@ pub unsafe trait GlobalAlloc {\n     ///\n     /// * `layout` must be the same layout that was used\n     ///   to allocated that block of memory,\n+    #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n \n     /// Behaves like `alloc`, but also ensures that the contents\n@@ -532,6 +534,7 @@ pub unsafe trait GlobalAlloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n         let size = layout.size();\n         let ptr = self.alloc(layout);\n@@ -589,6 +592,7 @@ pub unsafe trait GlobalAlloc {\n     /// Clients wishing to abort computation in response to a\n     /// reallocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n         let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n         let new_ptr = self.alloc(new_layout);"}]}