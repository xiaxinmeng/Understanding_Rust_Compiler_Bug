{"sha": "5c7ae251b15d7423231aa7aeaad826cecf631c78", "node_id": "C_kwDOAAsO6NoAKDVjN2FlMjUxYjE1ZDc0MjMyMzFhYTdhZWFhZDgyNmNlY2Y2MzFjNzg", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-21T07:56:04Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-23T07:26:22Z"}, "message": "Require `literal`s for some `(u)int_impl!` parameters\n\nThe point of these is to be seen lexically in the docs, so they should always be passed as the correct literal, not as an expression.\n\n(Otherwise we could just compute `Min`/`Max` from `BITS`, for example.)", "tree": {"sha": "f4e730031e91eb44956f9fe04e952483f2c60d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e730031e91eb44956f9fe04e952483f2c60d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7ae251b15d7423231aa7aeaad826cecf631c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7ae251b15d7423231aa7aeaad826cecf631c78", "html_url": "https://github.com/rust-lang/rust/commit/5c7ae251b15d7423231aa7aeaad826cecf631c78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7ae251b15d7423231aa7aeaad826cecf631c78/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f715e430aac0de131e2ad21804013ea405722a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/f715e430aac0de131e2ad21804013ea405722a66", "html_url": "https://github.com/rust-lang/rust/commit/f715e430aac0de131e2ad21804013ea405722a66"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "aec15212d7ff7fd4d352b0350f06fd2144e1c2c1", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5c7ae251b15d7423231aa7aeaad826cecf631c78/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7ae251b15d7423231aa7aeaad826cecf631c78/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=5c7ae251b15d7423231aa7aeaad826cecf631c78", "patch": "@@ -3,21 +3,26 @@ macro_rules! int_impl {\n         Self = $SelfT:ty,\n         ActualT = $ActualT:ident,\n         UnsignedT = $UnsignedT:ty,\n-        BITS = $BITS:expr,\n-        BITS_MINUS_ONE = $BITS_MINUS_ONE:expr,\n-        Min = $Min:expr,\n-        Max = $Max:expr,\n-        rot = $rot:expr,\n-        rot_op = $rot_op:expr,\n-        rot_result = $rot_result:expr,\n-        swap_op = $swap_op:expr,\n-        swapped = $swapped:expr,\n-        reversed = $reversed:expr,\n-        le_bytes = $le_bytes:expr,\n-        be_bytes = $be_bytes:expr,\n+\n+        // There are all for use *only* in doc comments.\n+        // As such, they're all passed as literals -- passing them as a string\n+        // literal is fine if they need to be multiple code tokens.\n+        // In non-comments, use the associated constants rather than these.\n+        BITS = $BITS:literal,\n+        BITS_MINUS_ONE = $BITS_MINUS_ONE:literal,\n+        Min = $Min:literal,\n+        Max = $Max:literal,\n+        rot = $rot:literal,\n+        rot_op = $rot_op:literal,\n+        rot_result = $rot_result:literal,\n+        swap_op = $swap_op:literal,\n+        swapped = $swapped:literal,\n+        reversed = $reversed:literal,\n+        le_bytes = $le_bytes:literal,\n+        be_bytes = $be_bytes:literal,\n         to_xe_bytes_doc = $to_xe_bytes_doc:expr,\n         from_xe_bytes_doc = $from_xe_bytes_doc:expr,\n-        bound_condition = $bound_condition:expr,\n+        bound_condition = $bound_condition:literal,\n     ) => {\n         /// The smallest value that can be represented by this integer type\n         #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \").\")]\n@@ -30,7 +35,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN, \", stringify!($Min), \");\")]\n         /// ```\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n-        pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n+        pub const MIN: Self = !Self::MAX;\n \n         /// The largest value that can be represented by this integer type\n         #[doc = concat!(\"(2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1\", $bound_condition, \").\")]\n@@ -43,7 +48,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($Max), \");\")]\n         /// ```\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n-        pub const MAX: Self = !Self::MIN;\n+        pub const MAX: Self = (<$UnsignedT>::MAX >> 1) as Self;\n \n         /// The size of this integer type in bits.\n         ///\n@@ -53,7 +58,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::BITS, \", stringify!($BITS), \");\")]\n         /// ```\n         #[stable(feature = \"int_bits_const\", since = \"1.53.0\")]\n-        pub const BITS: u32 = $BITS;\n+        pub const BITS: u32 = <$UnsignedT>::BITS;\n \n         /// Converts a string slice in a given base to an integer.\n         ///\n@@ -1380,7 +1385,7 @@ macro_rules! int_impl {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                self.unchecked_shl(rhs & ($BITS - 1))\n+                self.unchecked_shl(rhs & (Self::BITS - 1))\n             }\n         }\n \n@@ -1410,7 +1415,7 @@ macro_rules! int_impl {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                self.unchecked_shr(rhs & ($BITS - 1))\n+                self.unchecked_shr(rhs & (Self::BITS - 1))\n             }\n         }\n \n@@ -1916,7 +1921,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n+            (self.wrapping_shl(rhs), rhs >= Self::BITS)\n         }\n \n         /// Shifts self right by `rhs` bits.\n@@ -1939,7 +1944,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n+            (self.wrapping_shr(rhs), rhs >= Self::BITS)\n         }\n \n         /// Computes the absolute value of `self`."}, {"sha": "932038a0b012a1a86e82781c4870346fcb43b7af", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5c7ae251b15d7423231aa7aeaad826cecf631c78/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7ae251b15d7423231aa7aeaad826cecf631c78/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=5c7ae251b15d7423231aa7aeaad826cecf631c78", "patch": "@@ -4,19 +4,24 @@ macro_rules! uint_impl {\n         ActualT = $ActualT:ident,\n         SignedT = $SignedT:ident,\n         NonZeroT = $NonZeroT:ident,\n-        BITS = $BITS:expr,\n-        MAX = $MaxV:expr,\n-        rot = $rot:expr,\n-        rot_op = $rot_op:expr,\n-        rot_result = $rot_result:expr,\n-        swap_op = $swap_op:expr,\n-        swapped = $swapped:expr,\n-        reversed = $reversed:expr,\n-        le_bytes = $le_bytes:expr,\n-        be_bytes = $be_bytes:expr,\n+\n+        // There are all for use *only* in doc comments.\n+        // As such, they're all passed as literals -- passing them as a string\n+        // literal is fine if they need to be multiple code tokens.\n+        // In non-comments, use the associated constants rather than these.\n+        BITS = $BITS:literal,\n+        MAX = $MaxV:literal,\n+        rot = $rot:literal,\n+        rot_op = $rot_op:literal,\n+        rot_result = $rot_result:literal,\n+        swap_op = $swap_op:literal,\n+        swapped = $swapped:literal,\n+        reversed = $reversed:literal,\n+        le_bytes = $le_bytes:literal,\n+        be_bytes = $be_bytes:literal,\n         to_xe_bytes_doc = $to_xe_bytes_doc:expr,\n         from_xe_bytes_doc = $from_xe_bytes_doc:expr,\n-        bound_condition = $bound_condition:expr,\n+        bound_condition = $bound_condition:literal,\n     ) => {\n         /// The smallest value that can be represented by this integer type.\n         ///\n@@ -51,7 +56,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::BITS, \", stringify!($BITS), \");\")]\n         /// ```\n         #[stable(feature = \"int_bits_const\", since = \"1.53.0\")]\n-        pub const BITS: u32 = $BITS;\n+        pub const BITS: u32 = Self::MAX.count_ones();\n \n         /// Converts a string slice in a given base to an integer.\n         ///\n@@ -1403,7 +1408,7 @@ macro_rules! uint_impl {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                self.unchecked_shl(rhs & ($BITS - 1))\n+                self.unchecked_shl(rhs & (Self::BITS - 1))\n             }\n         }\n \n@@ -1436,7 +1441,7 @@ macro_rules! uint_impl {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                self.unchecked_shr(rhs & ($BITS - 1))\n+                self.unchecked_shr(rhs & (Self::BITS - 1))\n             }\n         }\n \n@@ -1860,7 +1865,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline(always)]\n         pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n+            (self.wrapping_shl(rhs), rhs >= Self::BITS)\n         }\n \n         /// Shifts self right by `rhs` bits.\n@@ -1885,7 +1890,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline(always)]\n         pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n+            (self.wrapping_shr(rhs), rhs >= Self::BITS)\n         }\n \n         /// Raises self to the power of `exp`, using exponentiation by squaring."}]}