{"sha": "0bea3e76d4e83a802a2eba4b7b34cd171f250919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZWEzZTc2ZDRlODNhODAyYTJlYmE0YjdiMzRjZDE3MWYyNTA5MTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-09T15:59:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-21T11:01:41Z"}, "message": "fix explicit_into_iter_loop on references\n\nfixes #1398", "tree": {"sha": "3ee274ee000136c74e2124a6277a86e8ef31a890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee274ee000136c74e2124a6277a86e8ef31a890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bea3e76d4e83a802a2eba4b7b34cd171f250919", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlisHhUACgkQpp+NIls6\n19lGJg/+IfTikdU/mixe8EMvr1Viafg0tLHoiLS3BIygCRkXK+zqaY9hHZCvegD4\nb9Mn8phHywiUFs99X0Nnfio6pWnNhjVMJS1kGVO5IrGxMDJqc5Wh43qm+Lxiwk3M\nxeJ+v5ZrDk9aFwAHbrzGTUtfzi9HqRkL4gpuYPAXQ9dte6oT15EEwTN+Ir2MbEKb\nlU98IQkQh1wKC7tYCJ91NTkR89hxmH9Yz+AlxW1P7YcrEIiy9r1F8wuhAzMeC8Ak\nqZ9bbiso7k41kCaBg2QmiUua2Jur5P6IlTyZ9/lQ4UC/zRFzjGYhrLW5s8l4eC1o\nqFS+P3FwytRcJEjMvNk1yM7MvBZRCbuuI3yekeXkuYJxmc1etMEmye1h09A7kJ7y\nNTxatLHbTJBb8mDrgVphCy4Du13JLGUYLX5DNwNoQbggyvdwCzTDXZthaD0+yOca\n2fVIEgAYAlbNwJcYNAMzCsAC/p51hig6fwj+ELJtyqccNC08twljA/ahaCVnJJvT\nj1IYauBblFlnQFnp332Td6z4qImuCAbCZr4+CCBui5woV4OKN1u0XUjKiBwECQLz\n9TmWhaJ6HqmaployZVMcA2wAYR2ZhEX7dgcdGGZMudE0o0+Aeo/O+LEXHkmxT5w9\nrn3xXOpscid1aTOCvo1w8awcXEac9KNBR5a00TfUzYT6kK9UG6A=\n=vBmc\n-----END PGP SIGNATURE-----", "payload": "tree 3ee274ee000136c74e2124a6277a86e8ef31a890\nparent 55ea08102aa2782724e1797d2e37436b1f93300b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1483977595 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1487674901 +0100\n\nfix explicit_into_iter_loop on references\n\nfixes #1398"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bea3e76d4e83a802a2eba4b7b34cd171f250919", "html_url": "https://github.com/rust-lang/rust/commit/0bea3e76d4e83a802a2eba4b7b34cd171f250919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bea3e76d4e83a802a2eba4b7b34cd171f250919/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ea08102aa2782724e1797d2e37436b1f93300b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ea08102aa2782724e1797d2e37436b1f93300b", "html_url": "https://github.com/rust-lang/rust/commit/55ea08102aa2782724e1797d2e37436b1f93300b"}], "stats": {"total": 70, "additions": 44, "deletions": 26}, "files": [{"sha": "d7aa379894049b0b018656f264a85d372fbbf57a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0bea3e76d4e83a802a2eba4b7b34cd171f250919/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bea3e76d4e83a802a2eba4b7b34cd171f250919/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0bea3e76d4e83a802a2eba4b7b34cd171f250919", "patch": "@@ -644,48 +644,63 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     }\n }\n \n+fn lint_iter_method(cx: &LateContext, args: &[Expr], arg: &Expr, expr: &Expr, method_name: &str) {\n+    let object = snippet(cx, args[0].span, \"_\");\n+    let suggestion = format!(\"&{}{}\",\n+                             if method_name == \"iter_mut\" {\n+                                 \"mut \"\n+                             } else {\n+                                 \"\"\n+                             },\n+                             object);\n+    span_lint_and_then(cx,\n+                       EXPLICIT_ITER_LOOP,\n+                       expr.span,\n+                       &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n+                                suggestion,\n+                                object,\n+                                method_name),\n+                       |db| db.span_suggestion(arg.span, \"to write this more concisely, try looping over\", suggestion));\n+}\n+\n fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n     if let ExprMethodCall(ref method, _, ref args) = arg.node {\n         // just the receiver, no arguments\n         if args.len() == 1 {\n-            let method_name = method.node;\n+            let method_name = &*method.node.as_str();\n             // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n-            if &*method_name.as_str() == \"iter\" || &*method_name.as_str() == \"iter_mut\" {\n+            if method_name == \"iter\" || method_name == \"iter_mut\" {\n                 if is_ref_iterable_type(cx, &args[0]) {\n+                    lint_iter_method(cx, args, arg, expr, method_name);\n+                }\n+            } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n+                let method_call = ty::MethodCall::expr(arg.id);\n+                let fn_ty = cx.tables\n+                    .method_map\n+                    .get(&method_call)\n+                    .map(|method_callee| method_callee.ty)\n+                    .expect(\"method calls need an entry in the method map\");\n+                let fn_arg_tys = fn_ty.fn_args();\n+                assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n+                if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n+                    lint_iter_method(cx, args, arg, expr, method_name);\n+                } else {\n                     let object = snippet(cx, args[0].span, \"_\");\n-                    let suggestion = format!(\"&{}{}\",\n-                                             if &*method_name.as_str() == \"iter_mut\" {\n-                                                 \"mut \"\n-                                             } else {\n-                                                 \"\"\n-                                             },\n-                                             object);\n                     span_lint_and_then(cx,\n-                                       EXPLICIT_ITER_LOOP,\n+                                       EXPLICIT_INTO_ITER_LOOP,\n                                        arg.span,\n                                        &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n-                                                suggestion,\n+                                                object,\n                                                 object,\n                                                 method_name),\n                                        |db| {\n-                        db.span_suggestion(arg.span, \"to write this more concisely, try looping over\", suggestion);\n+                        db.span_suggestion(arg.span,\n+                                           \"to write this more concisely, try looping over\",\n+                                           object.to_string());\n                     });\n                 }\n-            } else if &*method_name.as_str() == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n-                let object = snippet(cx, args[0].span, \"_\");\n-                span_lint_and_then(cx,\n-                                   EXPLICIT_INTO_ITER_LOOP,\n-                                   arg.span,\n-                                   &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n-                                            object,\n-                                            object,\n-                                            method_name),\n-                                   |db| {\n-                    db.span_suggestion(arg.span, \"to write this more concisely, try looping over\", object.to_string());\n-                });\n-\n-            } else if &*method_name.as_str() == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n+            } else if method_name == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n                 span_lint(cx,\n                           ITER_NEXT_LOOP,\n                           expr.span,"}, {"sha": "3819e944c4a65fb4558c91b320ef4abbdc629f9a", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bea3e76d4e83a802a2eba4b7b34cd171f250919/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bea3e76d4e83a802a2eba4b7b34cd171f250919/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=0bea3e76d4e83a802a2eba4b7b34cd171f250919", "patch": "@@ -302,6 +302,9 @@ fn main() {\n \n \n \n+    let array = [1, 2, 3];\n+    for _v in array.into_iter() {} //~ERROR it is more idiomatic to loop over `&array`\n+\n     for _v in &vec { } // these are fine\n     for _v in &mut vec { } // these are fine\n "}]}