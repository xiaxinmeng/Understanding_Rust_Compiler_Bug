{"sha": "e9243575543e24777fbad230de921eeffc1f210f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MjQzNTc1NTQzZTI0Nzc3ZmJhZDIzMGRlOTIxZWVmZmMxZjIxMGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-22T19:08:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T11:09:13Z"}, "message": "Remove the last redundant check from kindck, and then remove the pass as well.", "tree": {"sha": "e778e2a7643327d2f5a9dc93a73fd5167dc53a3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e778e2a7643327d2f5a9dc93a73fd5167dc53a3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9243575543e24777fbad230de921eeffc1f210f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9243575543e24777fbad230de921eeffc1f210f", "html_url": "https://github.com/rust-lang/rust/commit/e9243575543e24777fbad230de921eeffc1f210f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9243575543e24777fbad230de921eeffc1f210f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec305d1bcd29a989405ccee32bd7a113058584e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec305d1bcd29a989405ccee32bd7a113058584e", "html_url": "https://github.com/rust-lang/rust/commit/2ec305d1bcd29a989405ccee32bd7a113058584e"}], "stats": {"total": 113, "additions": 7, "deletions": 106}, "files": [{"sha": "49b12802f1e91313fcf803c3c58ee0d4777971be", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9243575543e24777fbad230de921eeffc1f210f/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9243575543e24777fbad230de921eeffc1f210f/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e9243575543e24777fbad230de921eeffc1f210f", "patch": "@@ -146,7 +146,6 @@ register_diagnostics!(\n     E0139,\n     E0140,\n     E0141,\n-    E0144,\n     E0152,\n     E0153,\n     E0154,"}, {"sha": "33e6579fb87dc7b8fd051b05079c8242a7e62346", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9243575543e24777fbad230de921eeffc1f210f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9243575543e24777fbad230de921eeffc1f210f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e9243575543e24777fbad230de921eeffc1f210f", "patch": "@@ -17,7 +17,7 @@ use lint;\n use llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n use metadata::creader;\n-use middle::{trans, stability, kind, ty, typeck, reachable};\n+use middle::{trans, stability, ty, typeck, reachable};\n use middle::dependency_format;\n use middle;\n use plugin::load::Plugins;\n@@ -462,8 +462,12 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     time(time_passes, \"rvalue checking\", (), |_|\n          middle::check_rvalues::check_crate(&ty_cx, krate));\n \n-    time(time_passes, \"kind checking\", (), |_|\n-         kind::check_crate(&ty_cx));\n+    // Avoid overwhelming user with errors if type checking failed.\n+    // I'm not sure how helpful this is, to be honest, but it avoids a\n+    // lot of annoying errors in the compile-fail tests (basically,\n+    // lint warnings and so on -- kindck used to do this abort, but\n+    // kindck is gone now). -nmatsakis\n+    ty_cx.sess.abort_if_errors();\n \n     let reachable_map =\n         time(time_passes, \"reachability checking\", (), |_|"}, {"sha": "c67f673879e69332635064c5deff86e619f0eaab", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9243575543e24777fbad230de921eeffc1f210f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9243575543e24777fbad230de921eeffc1f210f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e9243575543e24777fbad230de921eeffc1f210f", "patch": "@@ -95,7 +95,6 @@ pub mod middle {\n     pub mod expr_use_visitor;\n     pub mod graph;\n     pub mod intrinsicck;\n-    pub mod kind;\n     pub mod lang_items;\n     pub mod liveness;\n     pub mod mem_categorization;"}, {"sha": "0715baf2c5a94222b2f0c1309519c01baac8921b", "filename": "src/librustc/middle/kind.rs", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -1,101 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use middle::mem_categorization::Typer;\n-use middle::ty;\n-use util::ppaux::{ty_to_string};\n-use util::ppaux::UserString;\n-\n-use syntax::ast::*;\n-use syntax::codemap::Span;\n-use syntax::visit::Visitor;\n-use syntax::visit;\n-\n-// Kind analysis pass. This pass does some ad-hoc checks that are more\n-// convenient to do after type checking is complete and all checks are\n-// known. These are generally related to the builtin bounds `Copy` and\n-// `Sized`. Note that many of the builtin bound properties that used\n-// to be checked here are actually checked by trait checking these\n-// days.\n-\n-pub struct Context<'a,'tcx:'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n-}\n-\n-impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: &Ty) {\n-        check_ty(self, t);\n-    }\n-}\n-\n-pub fn check_crate(tcx: &ty::ctxt) {\n-    let mut ctx = Context {\n-        tcx: tcx,\n-    };\n-    visit::walk_crate(&mut ctx, tcx.map.krate());\n-    tcx.sess.abort_if_errors();\n-}\n-\n-fn check_ty(cx: &mut Context, aty: &Ty) {\n-    match aty.node {\n-        TyPath(_, _, id) => {\n-            match cx.tcx.item_substs.borrow().find(&id) {\n-                None => {}\n-                Some(ref item_substs) => {\n-                    let def_map = cx.tcx.def_map.borrow();\n-                    let did = def_map.get_copy(&id).def_id();\n-                    let generics = ty::lookup_item_type(cx.tcx, did).generics;\n-                    for def in generics.types.iter() {\n-                        let ty = *item_substs.substs.types.get(def.space,\n-                                                               def.index);\n-                        check_typaram_bounds(cx, aty.span, ty, def);\n-                    }\n-                }\n-            }\n-        }\n-        _ => {}\n-    }\n-\n-    visit::walk_ty(cx, aty);\n-}\n-\n-// Calls \"any_missing\" if any bounds were missing.\n-pub fn check_builtin_bounds(cx: &Context,\n-                            ty: ty::t,\n-                            bounds: ty::BuiltinBounds,\n-                            any_missing: |ty::BuiltinBounds|) {\n-    let kind = ty::type_contents(cx.tcx, ty);\n-    let mut missing = ty::empty_builtin_bounds();\n-    for bound in bounds.iter() {\n-        if !kind.meets_builtin_bound(cx.tcx, bound) {\n-            missing.add(bound);\n-        }\n-    }\n-    if !missing.is_empty() {\n-        any_missing(missing);\n-    }\n-}\n-\n-pub fn check_typaram_bounds(cx: &Context,\n-                            sp: Span,\n-                            ty: ty::t,\n-                            type_param_def: &ty::TypeParameterDef) {\n-    check_builtin_bounds(cx,\n-                         ty,\n-                         type_param_def.bounds.builtin_bounds,\n-                         |missing| {\n-        span_err!(cx.tcx.sess, sp, E0144,\n-                  \"instantiating a type parameter with an incompatible type \\\n-                   `{}`, which does not fulfill `{}`\",\n-                   ty_to_string(cx.tcx, ty),\n-                   missing.user_string(cx.tcx));\n-    });\n-}\n-"}]}