{"sha": "6a33de017007233346c26a6f7b20c3e35e6b9e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzNkZTAxNzAwNzIzMzM0NmMyNmE2ZjdiMjBjM2UzNWU2YjllOTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T15:55:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T15:55:14Z"}, "message": "Name function correctly", "tree": {"sha": "1cb364e1e6acd1660fd6f191ee7ea2806c33170f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb364e1e6acd1660fd6f191ee7ea2806c33170f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a33de017007233346c26a6f7b20c3e35e6b9e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a33de017007233346c26a6f7b20c3e35e6b9e90", "html_url": "https://github.com/rust-lang/rust/commit/6a33de017007233346c26a6f7b20c3e35e6b9e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a33de017007233346c26a6f7b20c3e35e6b9e90/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "html_url": "https://github.com/rust-lang/rust/commit/9a7e66aeafe8debdee9b3b5e128c47034864f2b1"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "78b0a5a82eb55eec5e64387f16c92b4e0ff4e096", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a33de017007233346c26a6f7b20c3e35e6b9e90/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a33de017007233346c26a6f7b20c3e35e6b9e90/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=6a33de017007233346c26a6f7b20c3e35e6b9e90", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     }\n                 });\n \n-                if !self.type_has_partial_eq_impl(cv.ty) {\n+                if !self.type_may_have_partial_eq_impl(cv.ty) {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n                     self.tcx().sess.span_fatal(self.span, &msg);\n                 } else if mir_structural_match_violation && !self.saw_const_match_lint.get() {\n@@ -190,7 +190,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         inlined_const_as_pat\n     }\n \n-    fn type_has_partial_eq_impl(&self, ty: Ty<'tcx>) -> bool {\n+    fn type_may_have_partial_eq_impl(&self, ty: Ty<'tcx>) -> bool {\n         // double-check there even *is* a semantic `PartialEq` to dispatch to.\n         //\n         // (If there isn't, then we can safely issue a hard\n@@ -267,7 +267,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 PatKind::Wild\n             }\n             ty::Adt(..)\n-                if !self.type_has_partial_eq_impl(cv.ty)\n+                if !self.type_may_have_partial_eq_impl(cv.ty)\n                     // FIXME(#73448): Find a way to bring const qualification into parity with\n                     // `search_for_structural_match_violation` and then remove this condition.\n                     && self.search_for_structural_match_violation(cv.ty).is_some() =>"}]}