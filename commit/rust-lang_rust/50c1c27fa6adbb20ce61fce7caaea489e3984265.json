{"sha": "50c1c27fa6adbb20ce61fce7caaea489e3984265", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYzFjMjdmYTZhZGJiMjBjZTYxZmNlN2NhYWVhNDg5ZTM5ODQyNjU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-25T23:38:46Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-25T23:53:17Z"}, "message": "Fix bugs; fix and add tests", "tree": {"sha": "679be67028ef9d3c931006a2fd3ebce8704ab7e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/679be67028ef9d3c931006a2fd3ebce8704ab7e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50c1c27fa6adbb20ce61fce7caaea489e3984265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50c1c27fa6adbb20ce61fce7caaea489e3984265", "html_url": "https://github.com/rust-lang/rust/commit/50c1c27fa6adbb20ce61fce7caaea489e3984265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50c1c27fa6adbb20ce61fce7caaea489e3984265/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "html_url": "https://github.com/rust-lang/rust/commit/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81"}], "stats": {"total": 197, "additions": 110, "deletions": 87}, "files": [{"sha": "548cca0761e705c19f2f6768c977c5f13247a4f0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -2299,14 +2299,20 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n             if matchers.len() <= 1 {\n                 format!(\n                     \"{}macro {}{} {{\\n    ...\\n}}\",\n-                    vis.print_with_space(cx.tcx, item.hir_id.owner),\n+                    vis.print_with_space(\n+                        cx.tcx,\n+                        cx.tcx.hir().local_def_id(item.hir_id).to_def_id()\n+                    ),\n                     name,\n                     matchers.iter().map(|span| span.to_src(cx)).collect::<String>(),\n                 )\n             } else {\n                 format!(\n                     \"{}macro {} {{\\n{}}}\",\n-                    vis.print_with_space(cx.tcx, item.hir_id.owner),\n+                    vis.print_with_space(\n+                        cx.tcx,\n+                        cx.tcx.hir().local_def_id(item.hir_id).to_def_id()\n+                    ),\n                     name,\n                     matchers\n                         .iter()"}, {"sha": "fe1b58164474ad90e2659c01ac02df28b24fbd43", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, Ty};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n@@ -624,3 +624,25 @@ where\n     *cx.impl_trait_bounds.borrow_mut() = old_bounds;\n     r\n }\n+\n+crate fn find_closest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n+    let mut current = def_id;\n+    // The immediate parent might not always be a module.\n+    // Find the first parent which is.\n+    loop {\n+        if let Some(parent) = tcx.parent(current) {\n+            if tcx.def_kind(parent) == DefKind::Mod {\n+                break Some(parent);\n+            }\n+            current = parent;\n+        } else {\n+            debug!(\n+                \"{:?} has no parent (kind={:?}, original was {:?})\",\n+                current,\n+                tcx.def_kind(current),\n+                def_id\n+            );\n+            break None;\n+        }\n+    }\n+}"}, {"sha": "6a611ccf58ec0b0bdc0ae838f4805a571e26abce", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -12,10 +12,10 @@ use std::fmt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_target::spec::abi::Abi;\n \n-use crate::clean::{self, PrimitiveType};\n+use crate::clean::{self, utils::find_closest_parent_module, PrimitiveType};\n use crate::formats::cache::cache;\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n@@ -1088,38 +1088,40 @@ impl clean::Visibility {\n     crate fn print_with_space<'tcx>(\n         self,\n         tcx: TyCtxt<'tcx>,\n-        item_did: LocalDefId,\n+        item_did: DefId,\n     ) -> impl fmt::Display + 'tcx {\n         use rustc_span::symbol::kw;\n \n         display_fn(move |f| match self {\n             clean::Public => f.write_str(\"pub \"),\n             clean::Inherited => Ok(()),\n-            clean::Visibility::Restricted(did)\n-                if did.index == tcx.parent_module_from_def_id(item_did).local_def_index =>\n-            {\n-                Ok(())\n-            }\n-            clean::Visibility::Restricted(did) if did.index == CRATE_DEF_INDEX => {\n-                write!(f, \"pub(crate) \")\n-            }\n-            clean::Visibility::Restricted(did) => {\n-                f.write_str(\"pub(\")?;\n-                let path = tcx.def_path(did);\n-                debug!(\"path={:?}\", path);\n-                let first_name =\n-                    path.data[0].data.get_opt_name().expect(\"modules are always named\");\n-                if path.data.len() != 1 || (first_name != kw::SelfLower && first_name != kw::Super)\n-                {\n-                    f.write_str(\"in \")?;\n-                }\n-                // modified from `resolved_path()` to work with `DefPathData`\n-                let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n-                for seg in &path.data[..path.data.len() - 1] {\n-                    write!(f, \"{}::\", seg.data.get_opt_name().unwrap())?;\n+\n+            clean::Visibility::Restricted(vis_did) => {\n+                if find_closest_parent_module(tcx, item_did) == Some(vis_did) {\n+                    // `pub(in foo)` where `foo` is the parent module\n+                    // is the same as no visibility modifier\n+                    Ok(())\n+                } else if vis_did.index == CRATE_DEF_INDEX {\n+                    write!(f, \"pub(crate) \")\n+                } else {\n+                    f.write_str(\"pub(\")?;\n+                    let path = tcx.def_path(vis_did);\n+                    debug!(\"path={:?}\", path);\n+                    let first_name =\n+                        path.data[0].data.get_opt_name().expect(\"modules are always named\");\n+                    if path.data.len() != 1\n+                        || (first_name != kw::SelfLower && first_name != kw::Super)\n+                    {\n+                        f.write_str(\"in \")?;\n+                    }\n+                    // modified from `resolved_path()` to work with `DefPathData`\n+                    let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n+                    for seg in &path.data[..path.data.len() - 1] {\n+                        write!(f, \"{}::\", seg.data.get_opt_name().unwrap())?;\n+                    }\n+                    let path = anchor(vis_did, &last_name.as_str()).to_string();\n+                    write!(f, \"{}) \", path)\n                 }\n-                let path = anchor(did, &last_name.as_str()).to_string();\n-                write!(f, \"{}) \", path)\n             }\n         })\n     }"}, {"sha": "190a09d1240082a0ae5ab2ae1c48c8165dd261a7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -2157,14 +2157,14 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     Some(ref src) => write!(\n                         w,\n                         \"<tr><td><code>{}extern crate {} as {};\",\n-                        myitem.visibility.print_with_space(cx.tcx(), myitem.def_id.expect_local()),\n+                        myitem.visibility.print_with_space(cx.tcx(), myitem.def_id),\n                         anchor(myitem.def_id, &*src.as_str()),\n                         name\n                     ),\n                     None => write!(\n                         w,\n                         \"<tr><td><code>{}extern crate {};\",\n-                        myitem.visibility.print_with_space(cx.tcx(), myitem.def_id.expect_local()),\n+                        myitem.visibility.print_with_space(cx.tcx(), myitem.def_id),\n                         anchor(myitem.def_id, &*name.as_str())\n                     ),\n                 }\n@@ -2175,7 +2175,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 write!(\n                     w,\n                     \"<tr><td><code>{}{}</code></td></tr>\",\n-                    myitem.visibility.print_with_space(cx.tcx(), myitem.def_id.expect_local()),\n+                    myitem.visibility.print_with_space(cx.tcx(), myitem.def_id),\n                     import.print()\n                 );\n             }\n@@ -2392,7 +2392,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n     write!(\n         w,\n         \"{vis}const {name}: {typ}\",\n-        vis = it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        vis = it.visibility.print_with_space(cx.tcx(), it.def_id),\n         name = it.name.as_ref().unwrap(),\n         typ = c.type_.print(),\n     );\n@@ -2426,7 +2426,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n     write!(\n         w,\n         \"{vis}static {mutability}{name}: {typ}</pre>\",\n-        vis = it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        vis = it.visibility.print_with_space(cx.tcx(), it.def_id),\n         mutability = s.mutability.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n         typ = s.type_.print()\n@@ -2437,7 +2437,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::Function) {\n     let header_len = format!(\n         \"{}{}{}{}{:#}fn {}{:#}\",\n-        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id),\n         f.header.constness.print_with_space(),\n         f.header.asyncness.print_with_space(),\n         f.header.unsafety.print_with_space(),\n@@ -2452,7 +2452,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n          {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n-        vis = it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        vis = it.visibility.print_with_space(cx.tcx(), it.def_id),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n         unsafety = f.header.unsafety.print_with_space(),\n@@ -2578,7 +2578,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         write!(\n             w,\n             \"{}{}{}trait {}{}{}\",\n-            it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+            it.visibility.print_with_space(cx.tcx(), it.def_id),\n             t.unsafety.print_with_space(),\n             if t.is_auto { \"auto \" } else { \"\" },\n             it.name.as_ref().unwrap(),\n@@ -2896,7 +2896,7 @@ fn assoc_const(\n         w,\n         \"{}{}const <a href=\\\"{}\\\" class=\\\"constant\\\"><b>{}</b></a>: {}\",\n         extra,\n-        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id),\n         naive_assoc_href(it, link),\n         it.name.as_ref().unwrap(),\n         ty.print()\n@@ -3015,7 +3015,7 @@ fn render_assoc_item(\n         };\n         let mut header_len = format!(\n             \"{}{}{}{}{}{:#}fn {}{:#}\",\n-            meth.visibility.print_with_space(cx.tcx(), meth.def_id.expect_local()),\n+            meth.visibility.print_with_space(cx.tcx(), meth.def_id),\n             header.constness.print_with_space(),\n             header.asyncness.print_with_space(),\n             header.unsafety.print_with_space(),\n@@ -3037,7 +3037,7 @@ fn render_assoc_item(\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n-            meth.visibility.print_with_space(cx.tcx(), meth.def_id.expect_local()),\n+            meth.visibility.print_with_space(cx.tcx(), meth.def_id),\n             header.constness.print_with_space(),\n             header.asyncness.print_with_space(),\n             header.unsafety.print_with_space(),\n@@ -3189,7 +3189,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n         write!(\n             w,\n             \"{}enum {}{}{}\",\n-            it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+            it.visibility.print_with_space(cx.tcx(), it.def_id),\n             it.name.as_ref().unwrap(),\n             e.generics.print(),\n             WhereClause { gens: &e.generics, indent: 0, end_newline: true }\n@@ -3364,7 +3364,7 @@ fn render_struct(\n     write!(\n         w,\n         \"{}{}{}\",\n-        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id),\n         if structhead { \"struct \" } else { \"\" },\n         it.name.as_ref().unwrap()\n     );\n@@ -3384,7 +3384,7 @@ fn render_struct(\n                         w,\n                         \"\\n{}    {}{}: {},\",\n                         tab,\n-                        field.visibility.print_with_space(cx.tcx(), field.def_id.expect_local()),\n+                        field.visibility.print_with_space(cx.tcx(), field.def_id),\n                         field.name.as_ref().unwrap(),\n                         ty.print()\n                     );\n@@ -3416,9 +3416,7 @@ fn render_struct(\n                         write!(\n                             w,\n                             \"{}{}\",\n-                            field\n-                                .visibility\n-                                .print_with_space(cx.tcx(), field.def_id.expect_local()),\n+                            field.visibility.print_with_space(cx.tcx(), field.def_id),\n                             ty.print()\n                         )\n                     }\n@@ -3453,7 +3451,7 @@ fn render_union(\n     write!(\n         w,\n         \"{}{}{}\",\n-        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id),\n         if structhead { \"union \" } else { \"\" },\n         it.name.as_ref().unwrap()\n     );\n@@ -3468,7 +3466,7 @@ fn render_union(\n             write!(\n                 w,\n                 \"    {}{}: {},\\n{}\",\n-                field.visibility.print_with_space(cx.tcx(), field.def_id.expect_local()),\n+                field.visibility.print_with_space(cx.tcx(), field.def_id),\n                 field.name.as_ref().unwrap(),\n                 ty.print(),\n                 tab\n@@ -4107,7 +4105,7 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, cache:\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\",\n-        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id),\n         it.name.as_ref().unwrap(),\n     );\n "}, {"sha": "f392f321fbfc3a47414904a453e525504b34b851", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -31,7 +31,7 @@ use std::cell::Cell;\n use std::mem;\n use std::ops::Range;\n \n-use crate::clean::{self, Crate, Item, ItemLink, PrimitiveType};\n+use crate::clean::{self, utils::find_closest_parent_module, Crate, Item, ItemLink, PrimitiveType};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::markdown_links;\n@@ -774,25 +774,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         } else if item.def_id.is_top_level_module() {\n             Some(item.def_id)\n         } else {\n-            let mut current = item.def_id;\n-            // The immediate parent might not always be a module.\n-            // Find the first parent which is.\n-            loop {\n-                if let Some(parent) = self.cx.tcx.parent(current) {\n-                    if self.cx.tcx.def_kind(parent) == DefKind::Mod {\n-                        break Some(parent);\n-                    }\n-                    current = parent;\n-                } else {\n-                    debug!(\n-                        \"{:?} has no parent (kind={:?}, original was {:?})\",\n-                        current,\n-                        self.cx.tcx.def_kind(current),\n-                        item.def_id\n-                    );\n-                    break None;\n-                }\n-            }\n+            find_closest_parent_module(self.cx.tcx, item.def_id)\n         };\n \n         if parent_node.is_some() {"}, {"sha": "cb71bca9cf20102f09815db4e7f24b1a6eabc118", "filename": "src/test/rustdoc/decl_macro_priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Ftest%2Frustdoc%2Fdecl_macro_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Ftest%2Frustdoc%2Fdecl_macro_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro_priv.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(decl_macro)]\n \n-// @has decl_macro_priv/macro.crate_macro.html //pre 'pub(crate) macro crate_macro() {'\n+// @has decl_macro_priv/macro.crate_macro.html //pre 'macro crate_macro() {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub(crate) macro crate_macro() {}"}, {"sha": "9ff3cad070d828658fbf33808939b36083f99bda", "filename": "src/test/rustdoc/pub-restricted.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-restricted.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -6,27 +6,27 @@\n \n // @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n pub struct FooPublic;\n-// @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n+// @has 'foo/struct.FooJustCrate.html' '//pre' 'struct FooJustCrate'\n crate struct FooJustCrate;\n-// @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n+// @has 'foo/struct.FooPubCrate.html' '//pre' 'struct FooPubCrate'\n pub(crate) struct FooPubCrate;\n-// @has 'foo/struct.FooSelf.html' '//pre' 'pub(crate) struct FooSelf'\n+// @has 'foo/struct.FooSelf.html' '//pre' 'struct FooSelf'\n pub(self) struct FooSelf;\n-// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(crate) struct FooInSelf'\n+// @has 'foo/struct.FooInSelf.html' '//pre' 'struct FooInSelf'\n pub(in self) struct FooInSelf;\n mod a {\n-    // @has 'foo/a/struct.FooSuper.html' '//pre' 'pub(crate) struct FooSuper'\n-    pub(super) struct FooSuper;\n-    // @has 'foo/a/struct.FooInSuper.html' '//pre' 'pub(crate) struct FooInSuper'\n-    pub(in super) struct FooInSuper;\n-    // @has 'foo/a/struct.FooInA.html' '//pre' 'pub(in a) struct FooInA'\n-    pub(in a) struct FooInA;\n+    // @has 'foo/a/struct.FooASuper.html' '//pre' 'pub(crate) struct FooASuper'\n+    pub(super) struct FooASuper;\n+    // @has 'foo/a/struct.FooAInSuper.html' '//pre' 'pub(crate) struct FooAInSuper'\n+    pub(in super) struct FooAInSuper;\n+    // @has 'foo/a/struct.FooAInA.html' '//pre' 'struct FooAInA'\n+    pub(in a) struct FooAInA;\n     mod b {\n-        // @has 'foo/a/b/struct.FooInSelfSuperB.html' '//pre' 'pub(in a::b) struct FooInSelfSuperB'\n-        pub(in a::b) struct FooInSelfSuperB;\n-        // @has 'foo/a/b/struct.FooInSuperSuper.html' '//pre' 'pub(crate) struct FooInSuperSuper'\n-        pub(in super::super) struct FooInSuperSuper;\n-        // @has 'foo/a/b/struct.FooInAB.html' '//pre' 'pub(in a::b) struct FooInAB'\n-        pub(in a::b) struct FooInAB;\n+        // @has 'foo/a/b/struct.FooBSuper.html' '//pre' 'pub(super) struct FooBSuper'\n+        pub(super) struct FooBSuper;\n+        // @has 'foo/a/b/struct.FooBInSuperSuper.html' '//pre' 'pub(crate) struct FooBInSuperSuper'\n+        pub(in super::super) struct FooBInSuperSuper;\n+        // @has 'foo/a/b/struct.FooBInAB.html' '//pre' 'struct FooBInAB'\n+        pub(in a::b) struct FooBInAB;\n     }\n }"}, {"sha": "9dd0b68b1d95ecb102122a3e7597d2fdd2b2bc36", "filename": "src/test/rustdoc/visibility.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Ftest%2Frustdoc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c27fa6adbb20ce61fce7caaea489e3984265/src%2Ftest%2Frustdoc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvisibility.rs?ref=50c1c27fa6adbb20ce61fce7caaea489e3984265", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --document-private-items\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/fn.foo.html' '//pre' 'fn foo'\n+// !@has 'foo/fn.foo.html' '//pre' 'pub'\n+fn foo() {}\n+\n+mod bar {\n+    // @has 'foo/bar/fn.baz.html' '//pre' 'fn baz'\n+    // !@has 'foo/bar/fn.baz.html' '//pre' 'pub'\n+    fn baz() {}\n+}"}]}