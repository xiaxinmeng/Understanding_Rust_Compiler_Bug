{"sha": "5247d98d31898326555c6e35780e0388d5e35514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDdkOThkMzE4OTgzMjY1NTVjNmUzNTc4MGUwMzg4ZDVlMzU1MTQ=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-04-30T08:31:42Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-04-30T08:31:42Z"}, "message": "Change `to_string` to `to_owned` when it just creates a `String` from a `&str`\n\nThis means that it doesn't have to go through the formatting hierarchy and can\njust immediately reserve enough memory.", "tree": {"sha": "6fea184f3eca360a3dcd98b87d4efa7cbd89cf2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fea184f3eca360a3dcd98b87d4efa7cbd89cf2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5247d98d31898326555c6e35780e0388d5e35514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5247d98d31898326555c6e35780e0388d5e35514", "html_url": "https://github.com/rust-lang/rust/commit/5247d98d31898326555c6e35780e0388d5e35514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5247d98d31898326555c6e35780e0388d5e35514/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b0081543de176d20de314ee74966326b90efbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b0081543de176d20de314ee74966326b90efbc", "html_url": "https://github.com/rust-lang/rust/commit/35b0081543de176d20de314ee74966326b90efbc"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "8884b05d77ea49e94b084fddedfcdb0fe4647e34", "filename": "src/changes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5247d98d31898326555c6e35780e0388d5e35514/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5247d98d31898326555c6e35780e0388d5e35514/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=5247d98d31898326555c6e35780e0388d5e35514", "patch": "@@ -153,8 +153,8 @@ impl<'a> ChangeSet<'a> {\n                 // Do a little dance to make writing safer - write to a temp file\n                 // rename the original to a .bk, then rename the temp file to the\n                 // original.\n-                let tmp_name = filename.to_string() + \".tmp\";\n-                let bk_name = filename.to_string() + \".bk\";\n+                let tmp_name = filename.to_owned() + \".tmp\";\n+                let bk_name = filename.to_owned() + \".bk\";\n                 {\n                     // Write text to temp file\n                     let mut tmp_file = try!(File::create(&tmp_name));\n@@ -165,7 +165,7 @@ impl<'a> ChangeSet<'a> {\n                 try!(::std::fs::rename(tmp_name, filename));\n             }\n             WriteMode::NewFile(extn) => {\n-                let filename = filename.to_string() + \".\" + extn;\n+                let filename = filename.to_owned() + \".\" + extn;\n                 let mut file = try!(File::create(&filename));\n                 try!(write!(file, \"{}\", text));\n             }"}, {"sha": "3d6fcb88c25462ae52017e45fc5390b61ba6ed50", "filename": "src/functions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5247d98d31898326555c6e35780e0388d5e35514/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5247d98d31898326555c6e35780e0388d5e35514/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=5247d98d31898326555c6e35780e0388d5e35514", "patch": "@@ -154,7 +154,7 @@ impl<'a> FmtVisitor<'a> {\n                         &None => String::new(),\n                     };\n                     let mut_str = match m {\n-                        &ast::Mutability::MutMutable => \"mut \".to_string(),\n+                        &ast::Mutability::MutMutable => \"mut \".to_owned(),\n                         &ast::Mutability::MutImmutable => String::new(),\n                     };\n                     arg_item_strs[0] = format!(\"&{}{}self\", lt_str, mut_str);\n@@ -164,7 +164,7 @@ impl<'a> FmtVisitor<'a> {\n                     arg_item_strs[0] = format!(\"self: {}\", pprust::ty_to_string(ty));\n                 }\n                 ast::ExplicitSelf_::SelfValue(_) => {\n-                    arg_item_strs[0] = \"self\".to_string();\n+                    arg_item_strs[0] = \"self\".to_owned();\n                     min_args = 2;\n                 }\n                 _ => {}\n@@ -174,7 +174,7 @@ impl<'a> FmtVisitor<'a> {\n         // Comments between args\n         let mut arg_comments = Vec::new();\n         if min_args == 2 {\n-            arg_comments.push(\"\".to_string());\n+            arg_comments.push(\"\".to_owned());\n         }\n         // TODO if there are no args, there might still be a comment, but without\n         // spans for the comment or parens, there is no chance of getting it right.\n@@ -239,7 +239,7 @@ impl<'a> FmtVisitor<'a> {\n             } else if snippet.ends_with(separator) {\n                 snippet = snippet[..snippet.len()-separator.len()].trim_matches(white_space);\n             }\n-            result.push(snippet.to_string());\n+            result.push(snippet.to_owned());\n             prev_end = get_hi(&item);\n         }\n         // Get the last commment.\n@@ -254,7 +254,7 @@ impl<'a> FmtVisitor<'a> {\n         let snippet = &snippet[..snippet.find(terminator)\n                                     .unwrap_or(snippet.find(separator).unwrap_or(snippet.len()))];\n         let snippet = snippet.trim();\n-        result.push(snippet.to_string());\n+        result.push(snippet.to_owned());\n \n         result\n     }\n@@ -422,8 +422,8 @@ impl<'a> FmtVisitor<'a> {\n     fn rewrite_return(&self, ret: &ast::FunctionRetTy) -> String {\n         match *ret {\n             ast::FunctionRetTy::DefaultReturn(_) => String::new(),\n-            ast::FunctionRetTy::NoReturn(_) => \"-> !\".to_string(),\n-            ast::FunctionRetTy::Return(ref ty) => \"-> \".to_string() + &pprust::ty_to_string(ty),\n+            ast::FunctionRetTy::NoReturn(_) => \"-> !\".to_owned(),\n+            ast::FunctionRetTy::Return(ref ty) => \"-> \".to_owned() + &pprust::ty_to_string(ty),\n         }\n     }\n "}, {"sha": "09a702dbaa1b09c9e0a51483dd26b4e6c87ead51", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5247d98d31898326555c6e35780e0388d5e35514/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5247d98d31898326555c6e35780e0388d5e35514/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=5247d98d31898326555c6e35780e0388d5e35514", "patch": "@@ -70,7 +70,7 @@ impl<'a> FmtVisitor<'a> {\n                 false\n             }\n         ) {\n-            Some((\"self\".to_string(), String::new()))\n+            Some((\"self\".to_owned(), String::new()))\n         } else {\n             None\n         };"}, {"sha": "45b2bce1638adc38181e7c3d251eeb4c52620fdb", "filename": "src/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5247d98d31898326555c6e35780e0388d5e35514/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5247d98d31898326555c6e35780e0388d5e35514/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=5247d98d31898326555c6e35780e0388d5e35514", "patch": "@@ -305,12 +305,12 @@ mod test {\n             let path = entry.unwrap().path();\n             let file_name = path.to_str().unwrap();\n             println!(\"Testing '{}'...\", file_name);\n-            run(vec![\"rustfmt\".to_string(), file_name.to_string()], WriteMode::Return(HANDLE_RESULT));\n+            run(vec![\"rustfmt\".to_owned(), file_name.to_owned()], WriteMode::Return(HANDLE_RESULT));\n             count += 1;\n         }\n         // And also dogfood ourselves!\n         println!(\"Testing 'src/mod.rs'...\");\n-        run(vec![\"rustfmt\".to_string(), \"src/mod.rs\".to_string()], WriteMode::Return(HANDLE_RESULT));\n+        run(vec![\"rustfmt\".to_owned(), \"src/mod.rs\".to_owned()], WriteMode::Return(HANDLE_RESULT));\n         count += 1;\n \n         // Display results"}, {"sha": "7a9c8583039b0f141fbbc6a048106420af3e76c0", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5247d98d31898326555c6e35780e0388d5e35514/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5247d98d31898326555c6e35780e0388d5e35514/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5247d98d31898326555c6e35780e0388d5e35514", "patch": "@@ -223,7 +223,7 @@ impl<'a> FmtVisitor<'a> {\n                 println!(\"Couldn't make snippet for span {:?}->{:?}\",\n                          self.codemap.lookup_char_pos(span.lo),\n                          self.codemap.lookup_char_pos(span.hi));\n-                \"\".to_string()\n+                \"\".to_owned()\n             }\n         }\n     }"}]}