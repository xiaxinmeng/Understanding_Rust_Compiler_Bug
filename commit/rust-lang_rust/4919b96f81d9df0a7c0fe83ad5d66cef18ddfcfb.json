{"sha": "4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MTliOTZmODFkOWRmMGE3YzBmZTgzYWQ1ZDY2Y2VmMThkZGZjZmI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-01T18:58:57Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-20T16:57:27Z"}, "message": "Move run/getcount to functions\n\nThese are only called from one place and don't generally support being called\nfrom other places; furthermore, they're the only formatter functions that look\nat the `args` field (which a future commit will remove).", "tree": {"sha": "f5249e9b6b3a33d81e549abd7407e51eb0a1e595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5249e9b6b3a33d81e549abd7407e51eb0a1e595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb", "html_url": "https://github.com/rust-lang/rust/commit/4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdef4f185ea6a1b560c1370c10ee561135af483d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdef4f185ea6a1b560c1370c10ee561135af483d", "html_url": "https://github.com/rust-lang/rust/commit/fdef4f185ea6a1b560c1370c10ee561135af483d"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "e76a8490f51fea30949fb362988906c7ac4b2b53", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4919b96f81d9df0a7c0fe83ad5d66cef18ddfcfb", "patch": "@@ -1060,7 +1060,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n             // a string piece.\n             for (arg, piece) in fmt.iter().zip(args.pieces.iter()) {\n                 formatter.buf.write_str(*piece)?;\n-                formatter.run(arg)?;\n+                run(&mut formatter, arg)?;\n                 idx += 1;\n             }\n         }\n@@ -1074,6 +1074,40 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n+fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument) -> Result {\n+    // Fill in the format parameters into the formatter\n+    fmt.fill = arg.format.fill;\n+    fmt.align = arg.format.align;\n+    fmt.flags = arg.format.flags;\n+    fmt.width = getcount(&fmt.args, &arg.format.width);\n+    fmt.precision = getcount(&fmt.args, &arg.format.precision);\n+\n+    // Extract the correct argument\n+    let value = {\n+        #[cfg(bootstrap)]\n+        {\n+            match arg.position {\n+                rt::v1::Position::At(i) => fmt.args[i],\n+            }\n+        }\n+        #[cfg(not(bootstrap))]\n+        {\n+            fmt.args[arg.position]\n+        }\n+    };\n+\n+    // Then actually do some printing\n+    (value.formatter)(value.value, fmt)\n+}\n+\n+fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n+    match *cnt {\n+        rt::v1::Count::Is(n) => Some(n),\n+        rt::v1::Count::Implied => None,\n+        rt::v1::Count::Param(i) => args[i].as_usize(),\n+    }\n+}\n+\n /// Padding after the end of something. Returned by `Formatter::padding`.\n #[must_use = \"don't forget to write the post padding\"]\n struct PostPadding {\n@@ -1118,43 +1152,6 @@ impl<'a> Formatter<'a> {\n         }\n     }\n \n-    // First up is the collection of functions used to execute a format string\n-    // at runtime. This consumes all of the compile-time statics generated by\n-    // the format! syntax extension.\n-    fn run(&mut self, arg: &rt::v1::Argument) -> Result {\n-        // Fill in the format parameters into the formatter\n-        self.fill = arg.format.fill;\n-        self.align = arg.format.align;\n-        self.flags = arg.format.flags;\n-        self.width = self.getcount(&arg.format.width);\n-        self.precision = self.getcount(&arg.format.precision);\n-\n-        // Extract the correct argument\n-        let value = {\n-            #[cfg(bootstrap)]\n-            {\n-                match arg.position {\n-                    rt::v1::Position::At(i) => self.args[i],\n-                }\n-            }\n-            #[cfg(not(bootstrap))]\n-            {\n-                self.args[arg.position]\n-            }\n-        };\n-\n-        // Then actually do some printing\n-        (value.formatter)(value.value, self)\n-    }\n-\n-    fn getcount(&mut self, cnt: &rt::v1::Count) -> Option<usize> {\n-        match *cnt {\n-            rt::v1::Count::Is(n) => Some(n),\n-            rt::v1::Count::Implied => None,\n-            rt::v1::Count::Param(i) => self.args[i].as_usize(),\n-        }\n-    }\n-\n     // Helper methods used for padding and processing formatting arguments that\n     // all formatting traits can use.\n "}]}