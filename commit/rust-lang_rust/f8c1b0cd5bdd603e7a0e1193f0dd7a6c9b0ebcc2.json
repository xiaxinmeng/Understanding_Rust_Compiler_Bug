{"sha": "f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzFiMGNkNWJkZDYwM2U3YTBlMTE5M2YwZGQ3YTZjOWIwZWJjYzI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-04T23:17:43Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-08T10:26:55Z"}, "message": "Add struct field suggestions.\n\nThis commit adds suggestions to change the definitions of fields in\nstruct definitions from immutable references to mutable references.", "tree": {"sha": "852dbcdec8ea239035bcfad3b8c4a1b1e94fef52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852dbcdec8ea239035bcfad3b8c4a1b1e94fef52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlu7MO8ACgkQAXYLT59T\n8VT3SxAAuOLVQobAs16LNRTkZFjNOg4LmXiYR2iXou3e+32bXCWM6db+x8EuT+1G\nxfU6bxIHaBKmQDaUCZHzPnRABEFHyiWqcSVSTgVd7/Q8Um4T9WHPmXRCOEDOCOrJ\nrhGP2xCgCPC59q0NyIVkTMcwVDScj9TyDdxfEc0VtaLkM2Z7/L5FM49Oiex+Bry4\nvpHUvMynUSKK89rYd9TiithbD3kRN8OgvH0dNic/Ag+/2ent8veUay6XX6VDYeaB\nwcDqmVzCOZuUKeJDWNCs0aSgSlKVHPc/e47wXaUHLiXgF0Zymx7q1knZ0s2yajXA\nePvZVx6OFaSZi/B2R3z4VG7KinP67ERAmiRAlDzwmsd8d0J2Bxlc8Pa2q3JDDcb9\nBUGBexmSCTp3wjVA1/v3KbQSb8TyVJJZU8+e5CVNhKhW9fxxeb019ZH9WnOUrjS3\nikJJMD/Ez0rvSeFqKcEsyoHMqbCOqraavxH4hKLHS3QLIp/9YbBZxar57Q01s2Vb\n8AN9WpJSB9KMh9+LvG914oVtyMa9py6Ba6T+P8wqdj2HS+KxfNz9O2RCfHInnZ5X\n5mdygQ0/4fW9QfwANpY9+ma+QlhUqcXRvUZn46VveB9yhQdt4WCPHFjdY5MeoPFe\n8K3qAhviJIewB3q3ymaTOKCps5cjXIZmKZbtG9i0bdl5njdTVbE=\n=H8It\n-----END PGP SIGNATURE-----", "payload": "tree 852dbcdec8ea239035bcfad3b8c4a1b1e94fef52\nparent 5de52817c43fcb767ab3c7ecf051872cad6d0df2\nauthor David Wood <david@davidtw.co> 1538695063 +0200\ncommitter David Wood <david@davidtw.co> 1538994415 +0200\n\nAdd struct field suggestions.\n\nThis commit adds suggestions to change the definitions of fields in\nstruct definitions from immutable references to mutable references.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "html_url": "https://github.com/rust-lang/rust/commit/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de52817c43fcb767ab3c7ecf051872cad6d0df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de52817c43fcb767ab3c7ecf051872cad6d0df2", "html_url": "https://github.com/rust-lang/rust/commit/5de52817c43fcb767ab3c7ecf051872cad6d0df2"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "fe24ec382ceb354bc912478faa1e30787a1366b1", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "patch": "@@ -218,6 +218,33 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"report_mutability_error: act={:?}, acted_on={:?}\", act, acted_on);\n \n         match the_place_err {\n+            // Suggest making an existing shared borrow in a struct definition a mutable borrow.\n+            //\n+            // This is applicable when we have a deref of a field access to a deref of a local -\n+            // something like `*((*_1).0`. The local that we get will be a reference to the\n+            // struct we've got a field access of (it must be a reference since there's a deref\n+            // after the field access).\n+            Place::Projection(box Projection {\n+                base: Place::Projection(box Projection {\n+                    base: Place::Projection(box Projection {\n+                        base,\n+                        elem: ProjectionElem::Deref,\n+                    }),\n+                    elem: ProjectionElem::Field(field, _),\n+                }),\n+                elem: ProjectionElem::Deref,\n+            }) => {\n+                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+\n+                if let Some((span, message)) = annotate_struct_field(\n+                    self.infcx.tcx,\n+                    base.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx),\n+                    field,\n+                ) {\n+                    err.span_label(span, message);\n+                }\n+            },\n+\n             // Suggest removing a `&mut` from the use of a mutable reference.\n             Place::Local(local)\n                 if {\n@@ -592,3 +619,56 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n fn is_closure_or_generator(ty: ty::Ty) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n+\n+/// Add a suggestion to a struct definition given a field access to a local.\n+/// This function expects the local to be a reference to a struct in order to produce a suggestion.\n+///\n+/// ```text\n+/// LL |     s: &'a String\n+///    |        ---------- use `&'a mut String` here to make mutable\n+/// ```\n+fn annotate_struct_field(\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    ty: ty::Ty<'tcx>,\n+    field: &mir::Field,\n+) -> Option<(Span, String)> {\n+    // Expect our local to be a reference to a struct of some kind.\n+    if let ty::TyKind::Ref(_, ty, _) = ty.sty {\n+        if let ty::TyKind::Adt(def, _) = ty.sty {\n+            let field = def.all_fields().nth(field.index())?;\n+            let span = tcx.def_span(field.did);\n+\n+            // Use the HIR types to construct the diagnostic message.\n+            let node_id = tcx.hir.as_local_node_id(field.did)?;\n+            let node = tcx.hir.find(node_id)?;\n+            // Now we're dealing with the actual struct that we're going to suggest a change to,\n+            // we can expect a field that is an immutable reference to a type.\n+            if let hir::Node::Field(field) = node {\n+                if let hir::TyKind::Rptr(lifetime, hir::MutTy {\n+                    mutbl: hir::Mutability::MutImmutable,\n+                    ref ty\n+                }) = field.ty.node {\n+                    // Get the snippets in two parts - the named lifetime (if there is one) and\n+                    // type being referenced, that way we can reconstruct the snippet without loss\n+                    // of detail.\n+                    let type_snippet = tcx.sess.source_map().span_to_snippet(ty.span).ok()?;\n+                    let lifetime_snippet = if !lifetime.is_elided() {\n+                        format!(\"{} \", tcx.sess.source_map().span_to_snippet(lifetime.span).ok()?)\n+                    } else {\n+                        String::new()\n+                    };\n+\n+                    return Some((\n+                        span,\n+                        format!(\n+                            \"use `&{}mut {}` here to make mutable\",\n+                            lifetime_snippet, &*type_snippet,\n+                        ),\n+                    ));\n+                }\n+            }\n+        }\n+    }\n+\n+    None\n+}"}, {"sha": "91ccef1a32f1f22f7e5e4b9f5bb8fa92b8c6aea7", "filename": "src/test/ui/did_you_mean/issue-38147-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr?ref=f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "patch": "@@ -1,6 +1,9 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-2.rs:17:9\n    |\n+LL |     s: &'a String\n+   |     ------------- use `&'a mut String` here to make mutable\n+...\n LL |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n "}, {"sha": "ecc80a1d4310bae0c711cb86a6ad8a2865f7f702", "filename": "src/test/ui/did_you_mean/issue-38147-3.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr?ref=f8c1b0cd5bdd603e7a0e1193f0dd7a6c9b0ebcc2", "patch": "@@ -1,6 +1,9 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-3.rs:17:9\n    |\n+LL |     s: &'a String\n+   |     ------------- use `&'a mut String` here to make mutable\n+...\n LL |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n "}]}