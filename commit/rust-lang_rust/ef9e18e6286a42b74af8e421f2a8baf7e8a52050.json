{"sha": "ef9e18e6286a42b74af8e421f2a8baf7e8a52050", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOWUxOGU2Mjg2YTQyYjc0YWY4ZTQyMWYyYThiYWY3ZThhNTIwNTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-27T11:21:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-27T11:21:53Z"}, "message": "Merge branch 'master' into env-logger", "tree": {"sha": "87ffee1d5f5fc3097641de06816899ddad77933c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ffee1d5f5fc3097641de06816899ddad77933c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef9e18e6286a42b74af8e421f2a8baf7e8a52050", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcJLXRCRBK7hj4Ov3rIwAAdHIIABgjOxyYysjAXBBOn9m3e7WR\neI+DL8ZSO/w7Fc5ELoqC3fbEj4Y3s6F6Uw+Vmc4hyebnVKoFQkkQlWoMx5yu+vgL\nNDYEkS2B4XsPxPgQRxaspy5wRMFUW0IhGF4Mw3smmxtn78QyJQd+ENXIZLeUpP1d\nWXRJ/FUuf7rlE59qKtMqqOQiEulXep39+p5cwzhjW+G3wiuSPXgsMitxMgq27qGJ\nnDD1ddYNyOiioseIzsKd1vjWte8cPoDIGvWf0wwEx/yg3Q2Q3G9bg9DvHPnpBkvt\ntCsBsnJ7LKtNf0fhzB4Er0Mv2VbQf1wOMleJi9AkXFtoZ7tdOmiU1AOV2BipeZI=\n=RDuh\n-----END PGP SIGNATURE-----\n", "payload": "tree 87ffee1d5f5fc3097641de06816899ddad77933c\nparent e759da6b4b7d64d9561fa988765acbc6215aecbb\nparent 003febb58426937f5e1381f54dc3cc692c18d9c4\nauthor Ralf Jung <post@ralfj.de> 1545909713 +0100\ncommitter GitHub <noreply@github.com> 1545909713 +0100\n\nMerge branch 'master' into env-logger"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9e18e6286a42b74af8e421f2a8baf7e8a52050", "html_url": "https://github.com/rust-lang/rust/commit/ef9e18e6286a42b74af8e421f2a8baf7e8a52050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef9e18e6286a42b74af8e421f2a8baf7e8a52050/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e759da6b4b7d64d9561fa988765acbc6215aecbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e759da6b4b7d64d9561fa988765acbc6215aecbb", "html_url": "https://github.com/rust-lang/rust/commit/e759da6b4b7d64d9561fa988765acbc6215aecbb"}, {"sha": "003febb58426937f5e1381f54dc3cc692c18d9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/003febb58426937f5e1381f54dc3cc692c18d9c4", "html_url": "https://github.com/rust-lang/rust/commit/003febb58426937f5e1381f54dc3cc692c18d9c4"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "4b110224a0a2d97f55b63fb8e4dd113076553c3e", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef9e18e6286a42b74af8e421f2a8baf7e8a52050/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9e18e6286a42b74af8e421f2a8baf7e8a52050/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=ef9e18e6286a42b74af8e421f2a8baf7e8a52050", "patch": "@@ -303,10 +303,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds of a *live* allocation.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            let alloc = self.memory().get(ptr.alloc_id)?;\n-            alloc.check_bounds_ptr(ptr)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            alloc.check_bounds_ptr(ptr)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can only be offset by 0, and we pretend there"}, {"sha": "9e2e26fad3654db1c7a750c6f43ada809deb975f", "filename": "tests/run-pass/ptr_offset.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef9e18e6286a42b74af8e421f2a8baf7e8a52050/tests%2Frun-pass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9e18e6286a42b74af8e421f2a8baf7e8a52050/tests%2Frun-pass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset.rs?ref=ef9e18e6286a42b74af8e421f2a8baf7e8a52050", "patch": "@@ -1,6 +1,16 @@\n+fn f() -> i32 { 42 }\n+\n fn main() {\n     let v = [1i16, 2];\n     let x = &v as *const i16;\n     let x = unsafe { x.offset(1) };\n     assert_eq!(unsafe { *x }, 2);\n+\n+    // fn ptr offset\n+    unsafe {\n+        let p = f as fn() -> i32 as usize;\n+        let x = (p as *mut u32).offset(0) as usize;\n+        let f: fn() -> i32 = std::mem::transmute(x);\n+        assert_eq!(f(), 42);\n+    }\n }"}]}