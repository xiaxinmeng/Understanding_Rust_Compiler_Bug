{"sha": "2f9794b84a4ae882edd428c1c3764eec99cdebff", "node_id": "C_kwDOAAsO6NoAKDJmOTc5NGI4NGE0YWU4ODJlZGQ0MjhjMWMzNzY0ZWVjOTljZGViZmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-27T15:41:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-27T15:43:37Z"}, "message": "remove _types from ocx method names", "tree": {"sha": "6cf5e447fbaed939d98ff30c474dbfeb1f2d21db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf5e447fbaed939d98ff30c474dbfeb1f2d21db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f9794b84a4ae882edd428c1c3764eec99cdebff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9794b84a4ae882edd428c1c3764eec99cdebff", "html_url": "https://github.com/rust-lang/rust/commit/2f9794b84a4ae882edd428c1c3764eec99cdebff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f9794b84a4ae882edd428c1c3764eec99cdebff/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce11ae5d0de03d23b770f4d7ee912c792678f09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce11ae5d0de03d23b770f4d7ee912c792678f09d", "html_url": "https://github.com/rust-lang/rust/commit/ce11ae5d0de03d23b770f4d7ee912c792678f09d"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "1812f7a9efd968c4cb9f9bb98dfe66a02e140583", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=2f9794b84a4ae882edd428c1c3764eec99cdebff", "patch": "@@ -290,17 +290,16 @@ fn compare_predicate_entailment<'tcx>(\n     // type would be more appropriate. In other places we have a `Vec<Span>`\n     // corresponding to their `Vec<Predicate>`, but we don't have that here.\n     // Fixing this would improve the output of test `issue-83765.rs`.\n-    let mut result = ocx.sup_types(&cause, param_env, trait_fty, impl_fty);\n+    let mut result = ocx.sup(&cause, param_env, trait_fty, impl_fty);\n \n     // HACK(RPITIT): #101614. When we are trying to infer the hidden types for\n     // RPITITs, we need to equate the output tys instead of just subtyping. If\n     // we just use `sup` above, we'll end up `&'static str <: _#1t`, which causes\n     // us to infer `_#1t = #'_#2r str`, where `'_#2r` is unconstrained, which gets\n     // fixed up to `ReEmpty`, and which is certainly not what we want.\n     if trait_fty.has_infer_types() {\n-        result = result.and_then(|()| {\n-            ocx.equate_types(&cause, param_env, trait_sig.output(), impl_sig.output())\n-        });\n+        result =\n+            result.and_then(|()| ocx.eq(&cause, param_env, trait_sig.output(), impl_sig.output()));\n     }\n \n     if let Err(terr) = result {\n@@ -1383,7 +1382,7 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n \n     debug!(\"compare_const_impl: trait_ty={:?}\", trait_ty);\n \n-    let err = ocx.sup_types(&cause, param_env, trait_ty, impl_ty);\n+    let err = ocx.sup(&cause, param_env, trait_ty, impl_ty);\n \n     if let Err(terr) = err {\n         debug!("}, {"sha": "9689a14553013ef76419e14e537b505fa827989c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2f9794b84a4ae882edd428c1c3764eec99cdebff", "patch": "@@ -1675,7 +1675,7 @@ fn receiver_is_valid<'tcx>(\n \n     // `self: Self` is always valid.\n     if can_eq_self(receiver_ty) {\n-        if let Err(err) = wfcx.equate_types(&cause, wfcx.param_env, self_ty, receiver_ty) {\n+        if let Err(err) = wfcx.eq(&cause, wfcx.param_env, self_ty, receiver_ty) {\n             infcx.err_ctxt().report_mismatched_types(&cause, self_ty, receiver_ty, err).emit();\n         }\n         return true;\n@@ -1705,9 +1705,7 @@ fn receiver_is_valid<'tcx>(\n             if can_eq_self(potential_self_ty) {\n                 wfcx.register_obligations(autoderef.into_obligations());\n \n-                if let Err(err) =\n-                    wfcx.equate_types(&cause, wfcx.param_env, self_ty, potential_self_ty)\n-                {\n+                if let Err(err) = wfcx.eq(&cause, wfcx.param_env, self_ty, potential_self_ty) {\n                     infcx\n                         .err_ctxt()\n                         .report_mismatched_types(&cause, self_ty, potential_self_ty, err)"}, {"sha": "21516c93efb53aa8b33e681938a61c1701f54d35", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=2f9794b84a4ae882edd428c1c3764eec99cdebff", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         self.register_infer_ok_obligations(infer_ok)\n     }\n \n-    pub fn equate_types<T: ToTrace<'tcx>>(\n+    pub fn eq<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn sup_types<T: ToTrace<'tcx>>(\n+    pub fn sup<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "98cb3f21555ac238e1add134dff545fc097d20d2", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9794b84a4ae882edd428c1c3764eec99cdebff/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=2f9794b84a4ae882edd428c1c3764eec99cdebff", "patch": "@@ -87,7 +87,7 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     where\n         T: ToTrace<'tcx>,\n     {\n-        Ok(self.ocx.equate_types(&ObligationCause::dummy_with_span(self.span), self.param_env, a, b)?)\n+        Ok(self.ocx.eq(&ObligationCause::dummy_with_span(self.span), self.param_env, a, b)?)\n     }\n \n     fn prove_predicate(&self, predicate: Predicate<'tcx>, cause: ObligationCause<'tcx>) {\n@@ -176,7 +176,7 @@ fn type_op_eq<'tcx>(\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |ocx, key| {\n         let (param_env, Eq { a, b }) = key.into_parts();\n-        Ok(ocx.equate_types(&ObligationCause::dummy(), param_env, a, b)?)\n+        Ok(ocx.eq(&ObligationCause::dummy(), param_env, a, b)?)\n     })\n }\n \n@@ -228,7 +228,7 @@ fn type_op_subtype<'tcx>(\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |ocx, key| {\n         let (param_env, Subtype { sub, sup }) = key.into_parts();\n-        Ok(ocx.sup_types(&ObligationCause::dummy(), param_env, sup, sub)?)\n+        Ok(ocx.sup(&ObligationCause::dummy(), param_env, sup, sub)?)\n     })\n }\n "}]}