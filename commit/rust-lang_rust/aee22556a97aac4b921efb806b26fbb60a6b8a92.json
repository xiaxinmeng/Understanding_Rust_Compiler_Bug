{"sha": "aee22556a97aac4b921efb806b26fbb60a6b8a92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZTIyNTU2YTk3YWFjNGI5MjFlZmI4MDZiMjZmYmI2MGE2YjhhOTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:47Z"}, "message": "Rollup merge of #47613 - estebank:rustc_on_unimplemented, r=nikomatsakis\n\nAdd filtering options to `rustc_on_unimplemented`\n\n- Add filtering options to `rustc_on_unimplemented` for local traits, filtering on `Self` and type arguments.\n- Add a way to provide custom notes.\n- Tweak binops text.\n- Add filter to detect wether `Self` is local or belongs to another crate.\n- Add filter to `Iterator` diagnostic for `&str`.\n\nPartly addresses #44755 with a different syntax, as a first approach. Fixes #46216, fixes #37522, CC #34297, #46806.", "tree": {"sha": "3f0ecfbabe72844da2e25a0d94c4cbeeb1095fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f0ecfbabe72844da2e25a0d94c4cbeeb1095fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee22556a97aac4b921efb806b26fbb60a6b8a92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeym3CRBK7hj4Ov3rIwAAdHIIAJUcmnJd4Kps3x0TPG6pEnf5\nRZXLCYyczXEAdwZcqmQFQMLvYXgGyukzHrSALNy7LzTH8+dOXN+rcljaA93GIXA0\nWyuhVUB/gUwwIKpe5itvOeP0nPEWTVjGRMVZXaiN6DIwdSU7xGbn3m6QjkTr1NqB\n//vHKRAqw751fAMlDGYhCPnN+bfeSLhZ83YZJgCOS2Y9zDD/vf9HbBWcZ/Vuory9\nvvh/CihxjTe2DAnsJhW/4yqvBqX93lM1Oedjj6MTE9OdXlis23kF7sBMR9mPj4de\nt4s4jFoQLg83cPTwqSOb/UWqKei3zT4Qgi1zVtwhWbVND/yB5NcuBmcSUkQtgIQ=\n=0YRV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f0ecfbabe72844da2e25a0d94c4cbeeb1095fb1\nparent 4f93357d3b8938dfe439329c43c1e4f919a70869\nparent fd3f2312a75bcc4c8121ad324a012c3b8befb61c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021047 -0800\ncommitter GitHub <noreply@github.com> 1518021047 -0800\n\nRollup merge of #47613 - estebank:rustc_on_unimplemented, r=nikomatsakis\n\nAdd filtering options to `rustc_on_unimplemented`\n\n- Add filtering options to `rustc_on_unimplemented` for local traits, filtering on `Self` and type arguments.\n- Add a way to provide custom notes.\n- Tweak binops text.\n- Add filter to detect wether `Self` is local or belongs to another crate.\n- Add filter to `Iterator` diagnostic for `&str`.\n\nPartly addresses #44755 with a different syntax, as a first approach. Fixes #46216, fixes #37522, CC #34297, #46806.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee22556a97aac4b921efb806b26fbb60a6b8a92", "html_url": "https://github.com/rust-lang/rust/commit/aee22556a97aac4b921efb806b26fbb60a6b8a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee22556a97aac4b921efb806b26fbb60a6b8a92/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f93357d3b8938dfe439329c43c1e4f919a70869", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f93357d3b8938dfe439329c43c1e4f919a70869", "html_url": "https://github.com/rust-lang/rust/commit/4f93357d3b8938dfe439329c43c1e4f919a70869"}, {"sha": "fd3f2312a75bcc4c8121ad324a012c3b8befb61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3f2312a75bcc4c8121ad324a012c3b8befb61c", "html_url": "https://github.com/rust-lang/rust/commit/fd3f2312a75bcc4c8121ad324a012c3b8befb61c"}], "stats": {"total": 317, "additions": 234, "deletions": 83}, "files": [{"sha": "8ad5a9861a02f07c586f3b9457d3f6f988f71c45", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -530,9 +530,12 @@ impl<'a> Display for Arguments<'a> {\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is \\\n-                            defined in your crate, add `#[derive(Debug)]` or \\\n-                            manually implement it\"]\n+#[rustc_on_unimplemented(\n+    on(crate_local, label=\"`{Self}` cannot be formatted using `:?`; \\\n+                            add `#[derive(Debug)]` or manually implement `{Debug}`\"),\n+    message=\"`{Self}` doesn't implement `{Debug}`\",\n+    label=\"`{Self}` cannot be formatted using `:?` because it doesn't implement `{Debug}`\",\n+)]\n #[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n@@ -593,9 +596,11 @@ pub trait Debug {\n ///\n /// println!(\"The origin is: {}\", origin);\n /// ```\n-#[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default \\\n-                            formatter; try using `:?` instead if you are using \\\n-                            a format string\"]\n+#[rustc_on_unimplemented(\n+    message=\"`{Self}` doesn't implement `{Display}`\",\n+    label=\"`{Self}` cannot be formatted with the default formatter; \\\n+           try using `:?` instead if you are using a format string\",\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter."}, {"sha": "296fb8733ba6c858068f7675d1c2ed3fe9709804", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -28,8 +28,13 @@ fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n /// [module-level documentation]: index.html\n /// [impl]: index.html#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n-                            `.iter()` or a similar method\"]\n+#[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        label=\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"\n+    ),\n+    label=\"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"\n+)]\n #[doc(spotlight)]\n pub trait Iterator {\n     /// The type of the elements being iterated over."}, {"sha": "d0d0c09869e9dd398021ab70aa5be6cc1c54d948", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -75,7 +75,18 @@\n /// ```\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"]\n+#[rustc_on_unimplemented(\n+    on(\n+        all(_Self=\"{integer}\", RHS=\"{float}\"),\n+        message=\"cannot add a float to an integer\",\n+    ),\n+    on(\n+        all(_Self=\"{float}\", RHS=\"{integer}\"),\n+        message=\"cannot add an integer to a float\",\n+    ),\n+    message=\"cannot add `{RHS}` to `{Self}`\",\n+    label=\"no implementation for `{Self} + {RHS}`\",\n+)]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -170,7 +181,8 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot substract `{RHS}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} - {RHS}`\")]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -287,7 +299,8 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} * {RHS}`\")]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -408,7 +421,8 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n+                         label=\"no implementation for `{Self} / {RHS}`\")]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -490,7 +504,8 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n+                         label=\"no implementation for `{Self} % {RHS}`\")]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -647,7 +662,8 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"add_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot add-assign `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} += {Rhs}`\")]\n pub trait AddAssign<Rhs=Self> {\n     /// Performs the `+=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -700,7 +716,8 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot substract-assign `{Rhs}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} -= {Rhs}`\")]\n pub trait SubAssign<Rhs=Self> {\n     /// Performs the `-=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -744,7 +761,8 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot multiply-assign `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} *= {Rhs}`\")]\n pub trait MulAssign<Rhs=Self> {\n     /// Performs the `*=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -788,7 +806,8 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot divide-assign `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} /= {Rhs}`\")]\n pub trait DivAssign<Rhs=Self> {\n     /// Performs the `/=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -835,7 +854,8 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"rem_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"cannot mod-assign `{Self}` by `{Rhs}``\",\n+                         label=\"no implementation for `{Self} %= {Rhs}`\")]\n pub trait RemAssign<Rhs=Self> {\n     /// Performs the `%=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "a0ecd6cf75ce99277d279f4bc81aaccde0893045", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -120,7 +120,8 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n+                         label=\"no implementation for `{Self} & {RHS}`\")]\n pub trait BitAnd<RHS=Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -201,7 +202,8 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n+                         label=\"no implementation for `{Self} | {RHS}`\")]\n pub trait BitOr<RHS=Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -285,7 +287,8 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n+                         label=\"no implementation for `{Self} ^ {RHS}`\")]\n pub trait BitXor<RHS=Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -365,7 +368,8 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n+                         label=\"no implementation for `{Self} << {RHS}`\")]\n pub trait Shl<RHS> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -466,7 +470,8 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n /// ```\n #[lang = \"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n+                         label=\"no implementation for `{Self} >> {RHS}`\")]\n pub trait Shr<RHS> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -579,7 +584,8 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"bitand_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} &= {Rhs}`\",\n+                         label=\"no implementation for `{Self} &= {Rhs}`\")]\n pub trait BitAndAssign<Rhs=Self> {\n     /// Performs the `&=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -626,7 +632,8 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} |= {Rhs}`\",\n+                         label=\"no implementation for `{Self} |= {Rhs}`\")]\n pub trait BitOrAssign<Rhs=Self> {\n     /// Performs the `|=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -673,7 +680,8 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^= {Rhs}`\",\n+                         label=\"no implementation for `{Self} ^= {Rhs}`\")]\n pub trait BitXorAssign<Rhs=Self> {\n     /// Performs the `^=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -718,7 +726,8 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} <<= {Rhs}`\",\n+                         label=\"no implementation for `{Self} <<= {Rhs}`\")]\n pub trait ShlAssign<Rhs> {\n     /// Performs the `<<=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -784,7 +793,8 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"shr_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-#[rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"]\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >>= {Rhs}`\",\n+                         label=\"no implementation for `{Self} >>= {Rhs}`\")]\n pub trait ShrAssign<Rhs=Self> {\n     /// Performs the `>>=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "d4bcf00be80896ad23fd7d327e92ab984984a9ea", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if direct {\n             // this is a \"direct\", user-specified, rather than derived,\n             // obligation.\n-            flags.push((\"direct\", None));\n+            flags.push((\"direct\".to_string(), None));\n         }\n \n         if let ObligationCauseCode::ItemObligation(item) = obligation.cause.code {\n@@ -359,21 +359,37 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // Currently I'm leaving it for what I need for `try`.\n             if self.tcx.trait_of_item(item) == Some(trait_ref.def_id) {\n                 method = self.tcx.item_name(item);\n-                flags.push((\"from_method\", None));\n-                flags.push((\"from_method\", Some(&*method)));\n+                flags.push((\"from_method\".to_string(), None));\n+                flags.push((\"from_method\".to_string(), Some(method.to_string())));\n             }\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n             desugaring = k.as_symbol().as_str();\n-            flags.push((\"from_desugaring\", None));\n-            flags.push((\"from_desugaring\", Some(&*desugaring)));\n+            flags.push((\"from_desugaring\".to_string(), None));\n+            flags.push((\"from_desugaring\".to_string(), Some(desugaring.to_string())));\n+        }\n+        let generics = self.tcx.generics_of(def_id);\n+        let self_ty = trait_ref.self_ty();\n+        let self_ty_str = self_ty.to_string();\n+        flags.push((\"_Self\".to_string(), Some(self_ty_str.clone())));\n+\n+        for param in generics.types.iter() {\n+            let name = param.name.as_str().to_string();\n+            let ty = trait_ref.substs.type_for_def(param);\n+            let ty_str = ty.to_string();\n+            flags.push((name.clone(),\n+                        Some(ty_str.clone())));\n+        }\n+\n+        if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {\n+            flags.push((\"crate_local\".to_string(), None));\n         }\n \n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {\n-            command.evaluate(self.tcx, trait_ref, &flags)\n+            command.evaluate(self.tcx, trait_ref, &flags[..])\n         } else {\n             OnUnimplementedNote::empty()\n         }\n@@ -549,7 +565,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n                             .unwrap_or((String::new(), String::new()));\n \n-                        let OnUnimplementedNote { message, label }\n+                        let OnUnimplementedNote { message, label, note }\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n \n@@ -578,6 +594,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                      trait_ref,\n                                                      trait_ref.self_ty()));\n                         }\n+                        if let Some(ref s) = note {\n+                            // If it has a custom \"#[rustc_on_unimplemented]\" note, let's display it\n+                            err.note(s.as_str());\n+                        }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n "}, {"sha": "8c2c1cfa454729c5cbfcf1593dde5771617b4efa", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -29,16 +29,18 @@ pub struct OnUnimplementedDirective {\n     pub subcommands: Vec<OnUnimplementedDirective>,\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n+    pub note: Option<OnUnimplementedFormatString>,\n }\n \n pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n+    pub note: Option<String>,\n }\n \n impl OnUnimplementedNote {\n     pub fn empty() -> Self {\n-        OnUnimplementedNote { message: None, label: None }\n+        OnUnimplementedNote { message: None, label: None, note: None }\n     }\n }\n \n@@ -89,6 +91,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n \n         let mut message = None;\n         let mut label = None;\n+        let mut note = None;\n         let mut subcommands = vec![];\n         for item in item_iter {\n             if item.check_name(\"message\") && message.is_none() {\n@@ -103,8 +106,14 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                         tcx, trait_def_id, label_.as_str(), span)?);\n                     continue;\n                 }\n+            } else if item.check_name(\"note\") && note.is_none() {\n+                if let Some(note_) = item.value_str() {\n+                    note = Some(OnUnimplementedFormatString::try_parse(\n+                        tcx, trait_def_id, note_.as_str(), span)?);\n+                    continue;\n+                }\n             } else if item.check_name(\"on\") && is_root &&\n-                message.is_none() && label.is_none()\n+                message.is_none() && label.is_none() && note.is_none()\n             {\n                 if let Some(items) = item.meta_item_list() {\n                     if let Ok(subcommand) =\n@@ -128,7 +137,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         if errored {\n             Err(ErrorReported)\n         } else {\n-            Ok(OnUnimplementedDirective { condition, message, label, subcommands })\n+            Ok(OnUnimplementedDirective { condition, message, label, subcommands, note })\n         }\n     }\n \n@@ -154,7 +163,8 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n-                    tcx, trait_def_id, value.as_str(), attr.span)?)\n+                    tcx, trait_def_id, value.as_str(), attr.span)?),\n+                note: None,\n             }))\n         } else {\n             return Err(parse_error(tcx, attr.span,\n@@ -169,20 +179,20 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     pub fn evaluate(&self,\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     trait_ref: ty::TraitRef<'tcx>,\n-                    options: &[(&str, Option<&str>)])\n+                    options: &[(String, Option<String>)])\n                     -> OnUnimplementedNote\n     {\n         let mut message = None;\n         let mut label = None;\n-        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\",\n-              self, trait_ref, options);\n+        let mut note = None;\n+        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    options.contains(&(&c.name().as_str(),\n-                                      match c.value_str().map(|s| s.as_str()) {\n-                                          Some(ref s) => Some(s),\n+                    options.contains(&(c.name().as_str().to_string(),\n+                                      match c.value_str().map(|s| s.as_str().to_string()) {\n+                                          Some(s) => Some(s),\n                                           None => None\n                                       }))\n                 }) {\n@@ -198,11 +208,16 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n             if let Some(ref label_) = command.label {\n                 label = Some(label_.clone());\n             }\n+\n+            if let Some(ref note_) = command.note {\n+                note = Some(note_.clone());\n+            }\n         }\n \n         OnUnimplementedNote {\n             label: label.map(|l| l.format(tcx, trait_ref)),\n-            message: message.map(|m| m.format(tcx, trait_ref))\n+            message: message.map(|m| m.format(tcx, trait_ref)),\n+            note: note.map(|n| n.format(tcx, trait_ref)),\n         }\n     }\n }"}, {"sha": "dc3745fc4a3eebb9d3f461f3e7bdf3f6dd63575f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -761,6 +761,18 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn expected_ident_found(&self) -> DiagnosticBuilder<'a> {\n+        let mut err = self.struct_span_err(self.span,\n+                                           &format!(\"expected identifier, found {}\",\n+                                                    self.this_token_descr()));\n+        if let Some(token_descr) = self.token_descr() {\n+            err.span_label(self.span, format!(\"expected identifier, found {}\", token_descr));\n+        } else {\n+            err.span_label(self.span, \"expected identifier\");\n+        }\n+        err\n+    }\n+\n     pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n         self.parse_ident_common(true)\n     }\n@@ -769,15 +781,7 @@ impl<'a> Parser<'a> {\n         match self.token {\n             token::Ident(i) => {\n                 if self.token.is_reserved_ident() {\n-                    let mut err = self.struct_span_err(self.span,\n-                                                       &format!(\"expected identifier, found {}\",\n-                                                                self.this_token_descr()));\n-                    if let Some(token_descr) = self.token_descr() {\n-                        err.span_label(self.span, format!(\"expected identifier, found {}\",\n-                                                          token_descr));\n-                    } else {\n-                        err.span_label(self.span, \"expected identifier\");\n-                    }\n+                    let mut err = self.expected_ident_found();\n                     if recover {\n                         err.emit();\n                     } else {\n@@ -791,14 +795,7 @@ impl<'a> Parser<'a> {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n                         self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n                     } else {\n-                        let mut err = self.fatal(&format!(\"expected identifier, found `{}`\",\n-                                                          self.this_token_to_string()));\n-                        if let Some(token_descr) = self.token_descr() {\n-                            err.span_label(self.span, format!(\"expected identifier, found {}\",\n-                                                              token_descr));\n-                        } else {\n-                            err.span_label(self.span, \"expected identifier\");\n-                        }\n+                        let mut err = self.expected_ident_found();\n                         if self.token == token::Underscore {\n                             err.note(\"`_` is a wildcard pattern, not an identifier\");\n                         }"}, {"sha": "6028df1883967e30086b35c55b5cc6bd951c70e6", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -22,7 +22,7 @@ const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n     //~| expected i8, found u8\n-    //~| ERROR the trait bound `i8: std::ops::Add<u8>` is not satisfied\n+    //~| ERROR cannot add `u8` to `i8`\n     = [0; (i8::MAX as usize) + 1];\n \n "}, {"sha": "caf510071bd68d11eb1862772d5032127f851e57", "filename": "src/test/compile-fail/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -12,7 +12,7 @@ use std::ops::Add;\n \n fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n-    //~^ ERROR `i32: std::ops::Add<u32>` is not satisfied\n+    //~^ ERROR cannot add `u32` to `i32`\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "9d9d4cef3119a11c50fb4e59879bf3eb3b94a7c7", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -32,7 +32,7 @@ fn sum_to(n: u32) -> impl Foo {\n         0\n     } else {\n         n + sum_to(n - 1)\n-        //~^ ERROR the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+        //~^ ERROR cannot add `impl Foo` to `u32`\n     }\n }\n "}, {"sha": "8ec819038031b45bfd7299dd3ada8ed5668754a6", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n    = note: expected type `i32`\n               found type `u32`\n \n-error[E0277]: the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:34:11\n    |\n 34 |         n + sum_to(n - 1)"}, {"sha": "5144b59955cc9da6ef33a697fa9921df3de7470f", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn main() {\n-    1 + Some(1); //~ ERROR is not satisfied\n-    2 as usize - Some(1); //~ ERROR is not satisfied\n-    3 * (); //~ ERROR is not satisfied\n-    4 / \"\"; //~ ERROR is not satisfied\n+    1 + Some(1); //~ ERROR cannot add `std::option::Option<{integer}>` to `{integer}`\n+    2 as usize - Some(1); //~ ERROR cannot substract `std::option::Option<{integer}>` from `usize`\n+    3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n+    4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n     5 < String::new(); //~ ERROR is not satisfied\n     6 == Ok(1); //~ ERROR is not satisfied\n }"}, {"sha": "1b7fba050636f94e30891fb7f0916037ec214834", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -1,31 +1,31 @@\n-error[E0277]: the trait bound `{integer}: std::ops::Add<std::option::Option<{integer}>>` is not satisfied\n+error[E0277]: cannot add `std::option::Option<{integer}>` to `{integer}`\n   --> $DIR/binops.rs:12:7\n    |\n-12 |     1 + Some(1); //~ ERROR is not satisfied\n+12 |     1 + Some(1); //~ ERROR cannot add `std::option::Option<{integer}>` to `{integer}`\n    |       ^ no implementation for `{integer} + std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `usize: std::ops::Sub<std::option::Option<{integer}>>` is not satisfied\n+error[E0277]: cannot substract `std::option::Option<{integer}>` from `usize`\n   --> $DIR/binops.rs:13:16\n    |\n-13 |     2 as usize - Some(1); //~ ERROR is not satisfied\n+13 |     2 as usize - Some(1); //~ ERROR cannot substract `std::option::Option<{integer}>` from `usize`\n    |                ^ no implementation for `usize - std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Mul<()>` is not satisfied\n+error[E0277]: cannot multiply `()` to `{integer}`\n   --> $DIR/binops.rs:14:7\n    |\n-14 |     3 * (); //~ ERROR is not satisfied\n+14 |     3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Div<&str>` is not satisfied\n+error[E0277]: cannot divide `{integer}` by `&str`\n   --> $DIR/binops.rs:15:7\n    |\n-15 |     4 / \"\"; //~ ERROR is not satisfied\n+15 |     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n    |       ^ no implementation for `{integer} / &str`\n    |\n    = help: the trait `std::ops::Div<&str>` is not implemented for `{integer}`"}, {"sha": "0f833c6263722ed3ed5f40ec1328f1c42b065a6d", "filename": "src/test/ui/on-unimplemented/auxiliary/no_debug.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Bar;"}, {"sha": "fff6122c6b34b65f76a9dac20ee4ecae8e2896c7", "filename": "src/test/ui/on-unimplemented/no-debug.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:no_debug.rs\n+\n+extern crate no_debug;\n+\n+use no_debug::Bar;\n+\n+struct Foo;\n+\n+fn main() {\n+    println!(\"{:?} {:?}\", Foo, Bar);\n+    println!(\"{} {}\", Foo, Bar);\n+}\n+//~^^^ ERROR `Foo` doesn't implement `std::fmt::Debug`\n+//~| ERROR `no_debug::Bar` doesn't implement `std::fmt::Debug`\n+//~^^^^ ERROR `Foo` doesn't implement `std::fmt::Display`\n+//~| ERROR `no_debug::Bar` doesn't implement `std::fmt::Display`\n+"}, {"sha": "af5b1e91211fbe81f3c48d4ccfbb09f77e6f4a62", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: `Foo` doesn't implement `std::fmt::Debug`\n+  --> $DIR/no-debug.rs:20:27\n+   |\n+20 |     println!(\"{:?} {:?}\", Foo, Bar);\n+   |                           ^^^ `Foo` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `Foo`\n+   = note: required by `std::fmt::Debug::fmt`\n+\n+error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Debug`\n+  --> $DIR/no-debug.rs:20:32\n+   |\n+20 |     println!(\"{:?} {:?}\", Foo, Bar);\n+   |                                ^^^ `no_debug::Bar` cannot be formatted using `:?` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `no_debug::Bar`\n+   = note: required by `std::fmt::Debug::fmt`\n+\n+error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n+  --> $DIR/no-debug.rs:21:23\n+   |\n+21 |     println!(\"{} {}\", Foo, Bar);\n+   |                       ^^^ `Foo` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Foo`\n+   = note: required by `std::fmt::Display::fmt`\n+\n+error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Display`\n+  --> $DIR/no-debug.rs:21:28\n+   |\n+21 |     println!(\"{} {}\", Foo, Bar);\n+   |                            ^^^ `no_debug::Bar` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `no_debug::Bar`\n+   = note: required by `std::fmt::Display::fmt`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dd09534480e10dde5247fedd7058cd6bd6ffb8d9", "filename": "src/test/ui/span/multiline-span-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let x = 1;\n     let y = 2;\n     let z = 3;\n-    foo(1 as u32 + //~ ERROR not satisfied\n+    foo(1 as u32 + //~ ERROR cannot add `()` to `u32`\n \n         bar(x,\n "}, {"sha": "a18dfeb31d9ef0bb86d4a2705bc19686a316d357", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -1,7 +1,7 @@\n-error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n+error[E0277]: cannot add `()` to `u32`\n   --> $DIR/multiline-span-simple.rs:23:18\n    |\n-23 |     foo(1 as u32 + //~ ERROR not satisfied\n+23 |     foo(1 as u32 + //~ ERROR cannot add `()` to `u32`\n    |                  ^ no implementation for `u32 + ()`\n    |\n    = help: the trait `std::ops::Add<()>` is not implemented for `u32`"}, {"sha": "88a7b1b49d62d693d85991972b00cbdbd377f030", "filename": "src/test/ui/suggestions/for-c-in-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aee22556a97aac4b921efb806b26fbb60a6b8a92/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr?ref=aee22556a97aac4b921efb806b26fbb60a6b8a92", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&str: std::iter::Iterator` is not satisfied\n   --> $DIR/for-c-in-str.rs:14:14\n    |\n 14 |     for c in \"asdf\" {\n-   |              ^^^^^^ `&str` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |              ^^^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&str`\n    = note: required by `std::iter::IntoIterator::into_iter`"}]}