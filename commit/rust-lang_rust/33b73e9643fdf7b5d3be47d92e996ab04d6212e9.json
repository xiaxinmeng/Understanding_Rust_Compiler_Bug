{"sha": "33b73e9643fdf7b5d3be47d92e996ab04d6212e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjczZTk2NDNmZGY3YjVkM2JlNDdkOTJlOTk2YWIwNGQ2MjEyZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-29T08:37:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-29T08:37:20Z"}, "message": "Auto merge of #31132 - gchp:internals, r=brson\n\nThis adds the basic structure for the internals documentation, and also the initial version of the \"Overview\".\n\nThis first section gives and overview of the compilation process. It mentions the individual phases, and gives mention to their function & links to the relevant crates in the source tree.\n\nThis is a very general overview which is meant to lead in to the next section which will cover the `driver`. That section will give more in-depth information on each of the phases & cover things like sessions and the driver API. I wanted to give a more general introduction before getting into that detail.", "tree": {"sha": "283ffe7bedb13554207435a027ae0386c2f5a767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283ffe7bedb13554207435a027ae0386c2f5a767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b73e9643fdf7b5d3be47d92e996ab04d6212e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b73e9643fdf7b5d3be47d92e996ab04d6212e9", "html_url": "https://github.com/rust-lang/rust/commit/33b73e9643fdf7b5d3be47d92e996ab04d6212e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b73e9643fdf7b5d3be47d92e996ab04d6212e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd87c1f1b8afabcf1bafa14dd13c59f00b4f4be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd87c1f1b8afabcf1bafa14dd13c59f00b4f4be", "html_url": "https://github.com/rust-lang/rust/commit/7bd87c1f1b8afabcf1bafa14dd13c59f00b4f4be"}, {"sha": "88d5bfd65d63364d688897e322fd6dc75fec0bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d5bfd65d63364d688897e322fd6dc75fec0bb6", "html_url": "https://github.com/rust-lang/rust/commit/88d5bfd65d63364d688897e322fd6dc75fec0bb6"}], "stats": {"total": 116, "additions": 81, "deletions": 35}, "files": [{"sha": "c24d3d82b2f72891c7cc2985f3973df034f411de", "filename": "src/librustc/README.md", "status": "modified", "additions": 81, "deletions": 35, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/33b73e9643fdf7b5d3be47d92e996ab04d6212e9/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/33b73e9643fdf7b5d3be47d92e996ab04d6212e9/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=33b73e9643fdf7b5d3be47d92e996ab04d6212e9", "patch": "@@ -21,7 +21,7 @@ Rustc consists of a number of crates, including `libsyntax`,\n (the names and divisions are not set in stone and may change;\n in general, a finer-grained division of crates is preferable):\n \n-- `libsyntax` contains those things concerned purely with syntax \u2013\n+- [`libsyntax`][libsyntax] contains those things concerned purely with syntax \u2013\n   that is, the AST, parser, pretty-printer, lexer, macro expander, and\n   utilities for traversing ASTs \u2013 are in a separate crate called\n   \"syntax\", whose files are in `./../libsyntax`, where `.` is the\n@@ -32,32 +32,92 @@ in general, a finer-grained division of crates is preferable):\n   passes, such as the type checker, borrow checker, and so forth.\n   It is the heart of the compiler.\n \n-- `librustc_back` contains some very low-level details that are\n+- [`librustc_back`][back] contains some very low-level details that are\n   specific to different LLVM targets and so forth.\n \n-- `librustc_trans` contains the code to convert from Rust IR into LLVM\n+- [`librustc_trans`][trans] contains the code to convert from Rust IR into LLVM\n   IR, and then from LLVM IR into machine code, as well as the main\n   driver that orchestrates all the other passes and various other bits\n   of miscellany. In general it contains code that runs towards the\n   end of the compilation process.\n \n-- `librustc_driver` invokes the compiler from `libsyntax`, then the\n-  analysis phases from `librustc`, and finally the lowering and\n-  codegen passes from `librustc_trans`.\n+- [`librustc_driver`][driver] invokes the compiler from\n+  [`libsyntax`][libsyntax], then the analysis phases from `librustc`, and\n+  finally the lowering and codegen passes from [`librustc_trans`][trans].\n \n Roughly speaking the \"order\" of the three crates is as follows:\n \n-    libsyntax -> librustc -> librustc_trans\n-    |                                     |\n-    +-----------------+-------------------+\n-                      |\n               librustc_driver\n+                      |\n+    +-----------------+-------------------+\n+    |                                     |\n+    libsyntax -> librustc -> librustc_trans\n \n \n-Modules in the rustc crate\n-==========================\n-\n-The rustc crate itself consists of the following submodules\n+The compiler process:\n+=====================\n+\n+The Rust compiler is comprised of six main compilation phases.\n+\n+1. Parsing input\n+2. Configuration & expanding (cfg rules & syntax extension expansion)\n+3. Running analysis passes\n+4. Translation to LLVM\n+5. LLVM passes\n+6. Linking\n+\n+Phase one is responsible for parsing & lexing the input to the compiler. The\n+output of this phase is an abstract syntax tree (AST). The AST at this point\n+includes all macro uses & attributes. This means code which will be later\n+expanded and/or removed due to `cfg` attributes is still present in this\n+version of the AST. Parsing abstracts away details about individual files which\n+have been read into the AST.\n+\n+Phase two handles configuration and macro expansion. You can think of this\n+phase as a function acting on the AST from the previous phase. The input for\n+this phase is the unexpanded AST from phase one, and the output is an expanded\n+version of the same AST. This phase will expand all macros & syntax\n+extensions and will evaluate all `cfg` attributes, potentially removing some\n+code. The resulting AST will not contain any macros or `macro_use` statements.\n+\n+The code for these first two phases is in [`libsyntax`][libsyntax].\n+\n+After this phase, the compiler allocates IDs to each node in the AST\n+(technically not every node, but most of them). If we are writing out\n+dependencies, that happens now.\n+\n+The third phase is analysis. This is the most complex phase in the compiler,\n+and makes up much of the code. This phase included name resolution, type\n+checking, borrow checking, type & lifetime inference, trait selection, method\n+selection, linting and so on. Most of the error detection in the compiler comes\n+from this phase (with the exception of parse errors which arise during\n+parsing). The \"output\" of this phase is a set of side tables containing\n+semantic information about the source program. The analysis code is in\n+[`librustc`][rustc] and some other crates with the `librustc_` prefix.\n+\n+The fourth phase is translation. This phase translates the AST (and the side\n+tables from the previous phase) into LLVM IR (intermediate representation).\n+This is achieved by calling into the LLVM libraries. The code for this is in\n+[`librustc_trans`][trans].\n+\n+Phase five runs the LLVM backend. This runs LLVM's optimization passes on the\n+generated IR and generates machine code resulting in object files. This phase\n+is not really part of the Rust compiler, as LLVM carries out all the work.\n+The interface between LLVM and Rust is in [`librustc_llvm`][llvm].\n+\n+The final phase, phase six, links the object files into an executable. This is\n+again outsourced to other tools and not performed by the Rust compiler\n+directly. The interface is in [`librustc_back`][back] (which also contains some\n+things used primarily during translation).\n+\n+A module called the driver coordinates all these phases. It handles all the\n+highest level coordination of compilation from parsing command line arguments\n+all the way to invoking the linker to produce an executable.\n+\n+Modules in the librustc crate\n+=============================\n+\n+The librustc crate itself consists of the following submodules\n (mostly, but not entirely, in their own directories):\n \n - session: options and data that pertain to the compilation session as\n@@ -71,7 +131,7 @@ The rustc crate itself consists of the following submodules\n - util: ubiquitous types and helper functions\n - lib: bindings to LLVM\n \n-The entry-point for the compiler is main() in the librustc_driver\n+The entry-point for the compiler is main() in the [`librustc_driver`][driver]\n crate.\n \n The 3 central data structures:\n@@ -106,23 +166,9 @@ The 3 central data structures:\n    Each of these is an opaque pointer to an LLVM type,\n    manipulated through the `lib::llvm` interface.\n \n-\n-Control and information flow within the compiler:\n--------------------------------------------------\n-\n-- main() in lib.rs assumes control on startup. Options are\n-  parsed, platform is detected, etc.\n-\n-- `./../libsyntax/parse/parser.rs` parses the input files and produces\n-  an AST that represents the input crate.\n-\n-- Multiple middle-end passes (`middle/resolve.rs`, `middle/typeck.rs`)\n-  analyze the semantics of the resulting AST. Each pass generates new\n-  information about the AST and stores it in various environment data\n-  structures. The driver passes environments to each compiler pass\n-  that needs to refer to them.\n-\n-- Finally, the `trans` module in `librustc_trans` translates the Rust\n-  AST to LLVM bitcode in a type-directed way. When it's finished\n-  synthesizing LLVM values, rustc asks LLVM to write them out in some\n-  form (`.bc`, `.o`) and possibly run the system linker.\n+[libsyntax]: https://github.com/rust-lang/rust/tree/master/src/libsyntax/\n+[trans]: https://github.com/rust-lang/rust/tree/master/src/librustc_trans/\n+[llvm]: https://github.com/rust-lang/rust/tree/master/src/librustc_llvm/\n+[back]: https://github.com/rust-lang/rust/tree/master/src/librustc_back/\n+[rustc]: https://github.com/rust-lang/rust/tree/master/src/librustc/\n+[driver]: https://github.com/rust-lang/rust/tree/master/src/librustc_driver"}]}