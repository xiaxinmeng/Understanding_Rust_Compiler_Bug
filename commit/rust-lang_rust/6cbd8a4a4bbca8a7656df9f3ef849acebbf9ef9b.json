{"sha": "6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYmQ4YTRhNGJiY2E4YTc2NTZkZjlmM2VmODQ5YWNlYmJmOWVmOWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-15T11:20:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-15T11:20:50Z"}, "message": "Merge #2564\n\n2564: Introduce named constants for highlighting tag names. r=matklad a=omerbenamram\n\nRefers to #2563 .\r\n\r\nThis is just a refactor of all the tag strings to named constants as suggested by @matklad.\r\nAn enum could _probably_ prevent some future inconsistencies (since strings are still accepted), but I think the constants here are just fine - since the frontend only cares about strings anyways.\r\n\r\nThe frontend doesn't know about about those constants, so we'll still need to be mindful for them there.\r\n\r\nNote: I didn't touch the `STYLE` const (big css blob), we could probably make it a `format!` string using something like `once_cell::Lazy`, let me know if this is something that needs fixing (since it doesn't seem like a useful API outside of tests).\r\n\r\nAlso - I left those consts private, I assume if they were some kind of API we would have made it into an enum?\n\nCo-authored-by: Omer Ben-Amram <omerbenamram@gmail.com>", "tree": {"sha": "74ed89cf2ef03766a15c0ff6ba521ef1b509666c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74ed89cf2ef03766a15c0ff6ba521ef1b509666c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd9hcSCRBK7hj4Ov3rIwAAdHIIADMLMfynZxpbcQaw2hufPs+g\nZFrqJqQgTgASCumNlPZNoYXUm2h58nvuo86SYm1pUbCpaDgNiQ8w0yFLW8QBe2Bf\nR/rs5r856QB5Kv1hAgl8i+pR/V2/GbEWahi17bFRHw6Gf7VonzzVQ+Xh9b3jvJ7V\niWRpus6cKBUTxnY9dpsGRL4e2eKLi5376XC0vtb+cb4w9HaP8ePMpF2VqjUg7dhQ\nID1dX0yG5uMIoiOUA8hPMPPEQKds4ydM9NFL1aLuLghhuAOLKAT7G45bmsgOcca0\nODH0np6MMMzOyaK0OcZSmiprFAP2jHJoOPgYXaCFy5z0c1q7Son9g4+FAHLujY0=\n=QbGZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 74ed89cf2ef03766a15c0ff6ba521ef1b509666c\nparent 3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0\nparent 9a6d496497df35c0dbd8fa40574d47d0463997dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576408850 +0000\ncommitter GitHub <noreply@github.com> 1576408850 +0000\n\nMerge #2564\n\n2564: Introduce named constants for highlighting tag names. r=matklad a=omerbenamram\n\nRefers to #2563 .\r\n\r\nThis is just a refactor of all the tag strings to named constants as suggested by @matklad.\r\nAn enum could _probably_ prevent some future inconsistencies (since strings are still accepted), but I think the constants here are just fine - since the frontend only cares about strings anyways.\r\n\r\nThe frontend doesn't know about about those constants, so we'll still need to be mindful for them there.\r\n\r\nNote: I didn't touch the `STYLE` const (big css blob), we could probably make it a `format!` string using something like `once_cell::Lazy`, let me know if this is something that needs fixing (since it doesn't seem like a useful API outside of tests).\r\n\r\nAlso - I left those consts private, I assume if they were some kind of API we would have made it into an enum?\n\nCo-authored-by: Omer Ben-Amram <omerbenamram@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b", "html_url": "https://github.com/rust-lang/rust/commit/6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0", "html_url": "https://github.com/rust-lang/rust/commit/3e8f9eb6c45b6bde294c79deea0e5bb02c084ae0"}, {"sha": "9a6d496497df35c0dbd8fa40574d47d0463997dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6d496497df35c0dbd8fa40574d47d0463997dd", "html_url": "https://github.com/rust-lang/rust/commit/9a6d496497df35c0dbd8fa40574d47d0463997dd"}], "stats": {"total": 100, "additions": 64, "deletions": 36}, "files": [{"sha": "eb3dd177935368ede8d56ea27dc9f7870dab7d5a", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 64, "deletions": 36, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=6cbd8a4a4bbca8a7656df9f3ef849acebbf9ef9b", "patch": "@@ -16,6 +16,34 @@ use crate::{\n     FileId,\n };\n \n+pub mod tags {\n+    pub(crate) const FIELD: &'static str = \"field\";\n+    pub(crate) const FUNCTION: &'static str = \"function\";\n+    pub(crate) const MODULE: &'static str = \"module\";\n+    pub(crate) const TYPE: &'static str = \"type\";\n+    pub(crate) const CONSTANT: &'static str = \"constant\";\n+    pub(crate) const MACRO: &'static str = \"macro\";\n+    pub(crate) const VARIABLE: &'static str = \"variable\";\n+    pub(crate) const VARIABLE_MUT: &'static str = \"variable.mut\";\n+    pub(crate) const TEXT: &'static str = \"text\";\n+\n+    pub(crate) const TYPE_BUILTIN: &'static str = \"type.builtin\";\n+    pub(crate) const TYPE_SELF: &'static str = \"type.self\";\n+    pub(crate) const TYPE_PARAM: &'static str = \"type.param\";\n+    pub(crate) const TYPE_LIFETIME: &'static str = \"type.lifetime\";\n+\n+    pub(crate) const LITERAL_BYTE: &'static str = \"literal.byte\";\n+    pub(crate) const LITERAL_NUMERIC: &'static str = \"literal.numeric\";\n+    pub(crate) const LITERAL_CHAR: &'static str = \"literal.char\";\n+    pub(crate) const LITERAL_COMMENT: &'static str = \"comment\";\n+    pub(crate) const LITERAL_STRING: &'static str = \"string\";\n+    pub(crate) const LITERAL_ATTRIBUTE: &'static str = \"attribute\";\n+\n+    pub(crate) const KEYWORD_UNSAFE: &'static str = \"keyword.unsafe\";\n+    pub(crate) const KEYWORD_CONTROL: &'static str = \"keyword.control\";\n+    pub(crate) const KEYWORD: &'static str = \"keyword\";\n+}\n+\n #[derive(Debug)]\n pub struct HighlightedRange {\n     pub range: TextRange,\n@@ -71,9 +99,9 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 bindings_shadow_count.clear();\n                 continue;\n             }\n-            COMMENT => \"comment\",\n-            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n-            ATTR => \"attribute\",\n+            COMMENT => tags::LITERAL_COMMENT,\n+            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => tags::LITERAL_STRING,\n+            ATTR => tags::LITERAL_ATTRIBUTE,\n             NAME_REF => {\n                 if node.ancestors().any(|it| it.kind() == ATTR) {\n                     continue;\n@@ -90,7 +118,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     }\n                 };\n \n-                name_kind.map_or(\"text\", |it| highlight_name(db, it))\n+                name_kind.map_or(tags::TEXT, |it| highlight_name(db, it))\n             }\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n@@ -107,21 +135,21 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n                 match name_kind {\n                     Some(name_kind) => highlight_name(db, name_kind),\n-                    None => name.syntax().parent().map_or(\"function\", |x| match x.kind() {\n-                        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => \"type\",\n-                        TYPE_PARAM => \"type.param\",\n-                        RECORD_FIELD_DEF => \"field\",\n-                        _ => \"function\",\n+                    None => name.syntax().parent().map_or(tags::FUNCTION, |x| match x.kind() {\n+                        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => tags::TYPE,\n+                        TYPE_PARAM => tags::TYPE_PARAM,\n+                        RECORD_FIELD_DEF => tags::FIELD,\n+                        _ => tags::FUNCTION,\n                     }),\n                 }\n             }\n-            INT_NUMBER | FLOAT_NUMBER => \"literal.numeric\",\n-            BYTE => \"literal.byte\",\n-            CHAR => \"literal.char\",\n-            LIFETIME => \"type.lifetime\",\n-            T![unsafe] => \"keyword.unsafe\",\n-            k if is_control_keyword(k) => \"keyword.control\",\n-            k if k.is_keyword() => \"keyword\",\n+            INT_NUMBER | FLOAT_NUMBER => tags::LITERAL_NUMERIC,\n+            BYTE => tags::LITERAL_BYTE,\n+            CHAR => tags::LITERAL_CHAR,\n+            LIFETIME => tags::TYPE_LIFETIME,\n+            T![unsafe] => tags::KEYWORD_UNSAFE,\n+            k if is_control_keyword(k) => tags::KEYWORD_CONTROL,\n+            k if k.is_keyword() => tags::KEYWORD,\n             _ => {\n                 if let Some(macro_call) = node.as_node().cloned().and_then(ast::MacroCall::cast) {\n                     if let Some(path) = macro_call.path() {\n@@ -138,7 +166,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 }\n                                 res.push(HighlightedRange {\n                                     range: TextRange::from_to(range_start, range_end),\n-                                    tag: \"macro\",\n+                                    tag: tags::MACRO,\n                                     binding_hash: None,\n                                 })\n                             }\n@@ -214,29 +242,29 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n \n fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n-        Macro(_) => \"macro\",\n-        Field(_) => \"field\",\n-        AssocItem(hir::AssocItem::Function(_)) => \"function\",\n-        AssocItem(hir::AssocItem::Const(_)) => \"constant\",\n-        AssocItem(hir::AssocItem::TypeAlias(_)) => \"type\",\n-        Def(hir::ModuleDef::Module(_)) => \"module\",\n-        Def(hir::ModuleDef::Function(_)) => \"function\",\n-        Def(hir::ModuleDef::Adt(_)) => \"type\",\n-        Def(hir::ModuleDef::EnumVariant(_)) => \"constant\",\n-        Def(hir::ModuleDef::Const(_)) => \"constant\",\n-        Def(hir::ModuleDef::Static(_)) => \"constant\",\n-        Def(hir::ModuleDef::Trait(_)) => \"type\",\n-        Def(hir::ModuleDef::TypeAlias(_)) => \"type\",\n-        Def(hir::ModuleDef::BuiltinType(_)) => \"type.builtin\",\n-        SelfType(_) => \"type.self\",\n-        TypeParam(_) => \"type.param\",\n+        Macro(_) => tags::MACRO,\n+        Field(_) => tags::FIELD,\n+        AssocItem(hir::AssocItem::Function(_)) => tags::FUNCTION,\n+        AssocItem(hir::AssocItem::Const(_)) => tags::CONSTANT,\n+        AssocItem(hir::AssocItem::TypeAlias(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::Module(_)) => tags::MODULE,\n+        Def(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n+        Def(hir::ModuleDef::Adt(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n+        Def(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n+        Def(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n+        Def(hir::ModuleDef::Trait(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n+        Def(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n+        SelfType(_) => tags::TYPE_SELF,\n+        TypeParam(_) => tags::TYPE_PARAM,\n         Local(local) => {\n             if local.is_mut(db) {\n-                \"variable.mut\"\n+                tags::VARIABLE_MUT\n             } else if local.ty(db).is_mutable_reference() {\n-                \"variable.mut\"\n+                tags::VARIABLE_MUT\n             } else {\n-                \"variable\"\n+                tags::VARIABLE\n             }\n         }\n     }"}]}