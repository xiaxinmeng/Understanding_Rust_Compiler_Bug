{"sha": "18e2026ff8ae67cf8dea61c938d87f1f45734751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZTIwMjZmZjhhZTY3Y2Y4ZGVhNjFjOTM4ZDg3ZjFmNDU3MzQ3NTE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T04:34:23Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:15Z"}, "message": "coretest: remove/ignore tests", "tree": {"sha": "5776dd587fc89d00c82e86191057cee2c95611ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5776dd587fc89d00c82e86191057cee2c95611ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18e2026ff8ae67cf8dea61c938d87f1f45734751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18e2026ff8ae67cf8dea61c938d87f1f45734751", "html_url": "https://github.com/rust-lang/rust/commit/18e2026ff8ae67cf8dea61c938d87f1f45734751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18e2026ff8ae67cf8dea61c938d87f1f45734751/comments", "author": null, "committer": null, "parents": [{"sha": "37448506ea575d94389a60dce2aaebd57dba50a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37448506ea575d94389a60dce2aaebd57dba50a3", "html_url": "https://github.com/rust-lang/rust/commit/37448506ea575d94389a60dce2aaebd57dba50a3"}], "stats": {"total": 46, "additions": 8, "deletions": 38}, "files": [{"sha": "b6fc6457fce4d8f3454c8ef0e90465f5802aa352", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18e2026ff8ae67cf8dea61c938d87f1f45734751/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e2026ff8ae67cf8dea61c938d87f1f45734751/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=18e2026ff8ae67cf8dea61c938d87f1f45734751", "patch": "@@ -30,7 +30,6 @@ mod num;\n mod ops;\n mod option;\n mod ptr;\n-mod raw;\n mod result;\n mod slice;\n mod str;"}, {"sha": "4a459992098a08b8a86dff85264e26614e760996", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18e2026ff8ae67cf8dea61c938d87f1f45734751/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e2026ff8ae67cf8dea61c938d87f1f45734751/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=18e2026ff8ae67cf8dea61c938d87f1f45734751", "patch": "@@ -220,6 +220,7 @@ fn test_ord() {\n     assert!(big > None);\n }\n \n+/* FIXME(#20575)\n #[test]\n fn test_collect() {\n     let v: Option<Vec<int>> = range(0i, 0).map(|_| Some(0i)).collect();\n@@ -234,12 +235,14 @@ fn test_collect() {\n     assert!(v == None);\n \n     // test that it does not take more elements than it needs\n-    let mut functions = [|| Some(()), || None, || panic!()];\n+    let mut functions: [Box<Fn() -> Option<()>>; 3] =\n+        [box || Some(()), box || None, box || panic!()];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();\n \n     assert!(v == None);\n }\n+*/\n \n #[test]\n fn test_cloned() {"}, {"sha": "f2c23c7c77327762e47e0fa49fa085bf3bc812fe", "filename": "src/libcoretest/raw.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Flibcoretest%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Flibcoretest%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fraw.rs?ref=37448506ea575d94389a60dce2aaebd57dba50a3", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use core::raw::*;\n-use core::mem;\n-\n-#[test]\n-fn synthesize_closure() {\n-    unsafe {\n-        let x = 10;\n-        let f: |int| -> int = |y| x + y;\n-\n-        assert_eq!(f(20), 30);\n-\n-        let original_closure: Closure = mem::transmute(f);\n-\n-        let actual_function_pointer = original_closure.code;\n-        let environment = original_closure.env;\n-\n-        let new_closure = Closure {\n-            code: actual_function_pointer,\n-            env: environment\n-        };\n-\n-        let new_f: |int| -> int = mem::transmute(new_closure);\n-        assert_eq!(new_f(20), 30);\n-    }\n-}"}, {"sha": "52ea14dd05dd922ec87611c3b4d26ca0109dcd3b", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18e2026ff8ae67cf8dea61c938d87f1f45734751/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e2026ff8ae67cf8dea61c938d87f1f45734751/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=18e2026ff8ae67cf8dea61c938d87f1f45734751", "patch": "@@ -67,6 +67,7 @@ pub fn test_impl_map_err() {\n     assert!(Err::<int, int>(1).map_err(|x| x + 1) == Err(2));\n }\n \n+/* FIXME(#20575)\n #[test]\n fn test_collect() {\n     let v: Result<Vec<int>, ()> = range(0i, 0).map(|_| Ok::<int, ()>(0)).collect();\n@@ -81,11 +82,13 @@ fn test_collect() {\n     assert!(v == Err(2));\n \n     // test that it does not take more elements than it needs\n-    let mut functions = [|| Ok(()), || Err(1i), || panic!()];\n+    let mut functions: [Box<Fn() -> Result<(), int>>; 3] =\n+        [box || Ok(()), box || Err(1i), box || panic!()];\n \n     let v: Result<Vec<()>, int> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));\n }\n+*/\n \n #[test]\n pub fn test_fmt_default() {"}]}