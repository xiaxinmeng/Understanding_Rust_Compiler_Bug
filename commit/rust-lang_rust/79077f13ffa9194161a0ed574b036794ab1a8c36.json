{"sha": "79077f13ffa9194161a0ed574b036794ab1a8c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MDc3ZjEzZmZhOTE5NDE2MWEwZWQ1NzRiMDM2Nzk0YWIxYThjMzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T06:40:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T06:40:28Z"}, "message": "move GateIssue to rustc_feature & simplify emit_feature_err", "tree": {"sha": "a95d99093d81350da7c1ea4370e7a75c0dacebf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95d99093d81350da7c1ea4370e7a75c0dacebf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79077f13ffa9194161a0ed574b036794ab1a8c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79077f13ffa9194161a0ed574b036794ab1a8c36", "html_url": "https://github.com/rust-lang/rust/commit/79077f13ffa9194161a0ed574b036794ab1a8c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79077f13ffa9194161a0ed574b036794ab1a8c36/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fcd40ca2637796b5b4eb75db7cfb57efcde11e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fcd40ca2637796b5b4eb75db7cfb57efcde11e", "html_url": "https://github.com/rust-lang/rust/commit/91fcd40ca2637796b5b4eb75db7cfb57efcde11e"}], "stats": {"total": 324, "additions": 159, "deletions": 165}, "files": [{"sha": "619ca724214c87b5d1464d563568e910bcebd60b", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -232,13 +232,13 @@ impl<'a> LintLevelsBuilder<'a> {\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n                             if let ast::LitKind::Str(rationale, _) = name_value.kind {\n                                 if !self.sess.features_untracked().lint_reasons {\n-                                    feature_gate::emit_feature_err(\n+                                    feature_gate::feature_err(\n                                         &self.sess.parse_sess,\n                                         sym::lint_reasons,\n                                         item.span,\n-                                        feature_gate::GateIssue::Language,\n                                         \"lint reasons are experimental\"\n-                                    );\n+                                    )\n+                                    .emit();\n                                 }\n                                 reason = Some(rationale);\n                             } else {"}, {"sha": "54aafe2114dac04cef756414a9a55658d33cb608", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -13,11 +13,12 @@ use crate::ty::query::Providers;\n use crate::middle::privacy::AccessLevels;\n use crate::session::{DiagnosticMessageId, Session};\n use errors::DiagnosticBuilder;\n+use rustc_feature::GateIssue;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::errors::Applicability;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::{feature_err, feature_err_issue};\n use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n@@ -512,9 +513,8 @@ pub fn report_unstable(\n         if is_soft {\n             soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n         } else {\n-            emit_feature_err(\n-                &sess.parse_sess, feature, span, GateIssue::Library(issue), &msg\n-            );\n+            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n+                .emit();\n         }\n     }\n }\n@@ -842,15 +842,19 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                 let ty = self.tcx.type_of(def_id);\n \n                 if adt_def.has_dtor(self.tcx) {\n-                    emit_feature_err(&self.tcx.sess.parse_sess,\n-                                     sym::untagged_unions, item.span, GateIssue::Language,\n-                                     \"unions with `Drop` implementations are unstable\");\n+                    feature_err(\n+                        &self.tcx.sess.parse_sess, sym::untagged_unions, item.span,\n+                        \"unions with `Drop` implementations are unstable\"\n+                    )\n+                    .emit();\n                 } else {\n                     let param_env = self.tcx.param_env(def_id);\n                     if !param_env.can_type_implement_copy(self.tcx, ty).is_ok() {\n-                        emit_feature_err(&self.tcx.sess.parse_sess,\n-                                         sym::untagged_unions, item.span, GateIssue::Language,\n-                                         \"unions with non-`Copy` fields are unstable\");\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess, sym::untagged_unions, item.span,\n+                            \"unions with non-`Copy` fields are unstable\"\n+                        )\n+                        .emit();\n                     }\n                 }\n             }"}, {"sha": "c38bb3740af3a6e664dc686243b4e745c469d945", "filename": "src/librustc_feature/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -49,8 +49,7 @@ pub struct Feature {\n }\n \n impl Feature {\n-    // FIXME(Centril): privatize again.\n-    pub fn issue(&self) -> Option<NonZeroU32> {\n+    fn issue(&self) -> Option<NonZeroU32> {\n         self.issue.and_then(|i| NonZeroU32::new(i))\n     }\n }\n@@ -97,6 +96,37 @@ impl UnstableFeatures {\n     }\n }\n \n+fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n+        // FIXME (#28244): enforce that active features have issue numbers\n+        // assert!(info.issue().is_some())\n+        info.issue()\n+    } else {\n+        // search in Accepted, Removed, or Stable Removed features\n+        let found = ACCEPTED_FEATURES\n+            .iter()\n+            .chain(REMOVED_FEATURES)\n+            .chain(STABLE_REMOVED_FEATURES)\n+            .find(|t| t.name == feature);\n+        match found {\n+            Some(found) => found.issue(),\n+            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n+        }\n+    }\n+}\n+\n+pub enum GateIssue {\n+    Language,\n+    Library(Option<NonZeroU32>)\n+}\n+\n+pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU32> {\n+    match issue {\n+        GateIssue::Language => find_lang_feature_issue(feature),\n+        GateIssue::Library(lib) => lib,\n+    }\n+}\n+\n pub use accepted::ACCEPTED_FEATURES;\n pub use active::{ACTIVE_FEATURES, Features, INCOMPLETE_FEATURES};\n pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};"}, {"sha": "425e5d1d821bf971b72de83bb6eff492d943bbba", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -7,7 +7,7 @@ use rustc::util::nodemap::FxHashSet;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::source_map::Span;\n-use syntax::feature_gate::{self, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::{span_err, struct_span_err};\n \n@@ -158,27 +158,29 @@ impl Collector<'tcx> {\n             }\n         }\n         if lib.cfg.is_some() && !self.tcx.features().link_cfg {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::link_cfg,\n-                                           span.unwrap(),\n-                                           GateIssue::Language,\n-                                           \"is unstable\");\n+            feature_err(&self.tcx.sess.parse_sess, sym::link_cfg, span.unwrap(), \"is unstable\")\n+                .emit();\n         }\n         if lib.kind == cstore::NativeStaticNobundle &&\n-           !self.tcx.features().static_nobundle {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::static_nobundle,\n-                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n-                                           GateIssue::Language,\n-                                           \"kind=\\\"static-nobundle\\\" is unstable\");\n+           !self.tcx.features().static_nobundle\n+        {\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::static_nobundle,\n+                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                \"kind=\\\"static-nobundle\\\" is unstable\"\n+            )\n+            .emit();\n         }\n         if lib.kind == cstore::NativeRawDylib &&\n            !self.tcx.features().raw_dylib {\n-            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n-                                           sym::raw_dylib,\n-                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n-                                           GateIssue::Language,\n-                                           \"kind=\\\"raw-dylib\\\" is unstable\");\n+            feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::raw_dylib,\n+                span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                \"kind=\\\"raw-dylib\\\" is unstable\"\n+            )\n+            .emit();\n         }\n         self.libs.push(lib);\n     }"}, {"sha": "a4f12a4e54fa73cbdb78736bc3f6f7de817dba49", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::BorrowKind;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::symbol::sym;\n use syntax_pos::{Span, Symbol};\n \n@@ -222,13 +222,13 @@ impl NonConstOp for Panic {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n+        feature_err(\n             &item.tcx.sess.parse_sess,\n             sym::const_panic,\n             span,\n-            GateIssue::Language,\n             &format!(\"panicking in {}s is unstable\", item.const_kind()),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -240,13 +240,13 @@ impl NonConstOp for RawPtrComparison {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n+        feature_err(\n             &item.tcx.sess.parse_sess,\n             sym::const_compare_raw_pointers,\n             span,\n-            GateIssue::Language,\n             &format!(\"comparing raw pointers inside {}\", item.const_kind()),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -258,14 +258,14 @@ impl NonConstOp for RawPtrDeref {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_raw_ptr_deref, span,\n             &format!(\n                 \"dereferencing raw pointers in {}s is unstable\",\n                 item.const_kind(),\n             ),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -277,14 +277,14 @@ impl NonConstOp for RawPtrToIntCast {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_raw_ptr_to_usize_cast,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_raw_ptr_to_usize_cast, span,\n             &format!(\n                 \"casting pointers to integers in {}s is unstable\",\n                 item.const_kind(),\n             ),\n-        );\n+        )\n+        .emit();\n     }\n }\n \n@@ -334,11 +334,11 @@ impl NonConstOp for Transmute {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_transmute,\n-            span, GateIssue::Language,\n-            &format!(\"The use of std::mem::transmute() \\\n-            is gated in {}s\", item.const_kind()));\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_transmute, span,\n+            &format!(\"The use of std::mem::transmute() is gated in {}s\", item.const_kind())\n+        )\n+        .emit();\n     }\n }\n \n@@ -355,10 +355,10 @@ impl NonConstOp for UnionAccess {\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        emit_feature_err(\n-            &item.tcx.sess.parse_sess, sym::const_fn_union,\n-            span, GateIssue::Language,\n+        feature_err(\n+            &item.tcx.sess.parse_sess, sym::const_fn_union, span,\n             \"unions in const fn are unstable\",\n-        );\n+        )\n+        .emit();\n     }\n }"}, {"sha": "6293858ed4ef626c9dcf1e00086b86fdf0818bad", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -11,7 +11,7 @@\n use crate::validate_attr;\n use rustc_feature::Features;\n use syntax::attr::HasAttrs;\n-use syntax::feature_gate::{feature_err, get_features, GateIssue};\n+use syntax::feature_gate::{feature_err, get_features};\n use syntax::attr;\n use syntax::ast;\n use syntax::edition::Edition;\n@@ -212,7 +212,6 @@ impl<'a> StripUnconfigured<'a> {\n             let mut err = feature_err(self.sess,\n                                       sym::stmt_expr_attributes,\n                                       attr.span,\n-                                      GateIssue::Language,\n                                       \"attributes on expressions are experimental\");\n \n             if attr.is_doc_comment() {"}, {"sha": "63c6e60de795436133760662e7b6768184417274", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use rustc_feature::Features;\n use syntax::ast::Mutability;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::span_err;\n use syntax_pos::{sym, Span};\n use rustc_error_codes::*;\n@@ -141,13 +141,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             | NonConstExpr::Match(hir::MatchSource::Normal)\n             | NonConstExpr::Match(hir::MatchSource::IfDesugar { .. })\n             | NonConstExpr::Match(hir::MatchSource::IfLetDesugar { .. })\n-            => emit_feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::const_if_match,\n-                span,\n-                GateIssue::Language,\n-                &msg\n-            ),\n+            => feature_err(&self.tcx.sess.parse_sess, sym::const_if_match, span, &msg).emit(),\n \n             _ => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n         }"}, {"sha": "9e7098da49f32b111ec027252583458df462f7f6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -16,7 +16,7 @@ use rustc_feature::is_builtin_attr_name;\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::{self, StabilityLevel};\n use syntax::edition::Edition;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::feature_err;\n use syntax::print::pprust;\n use syntax_expand::base::{self, InvocationRes, Indeterminate};\n use syntax_expand::base::SyntaxExtension;\n@@ -346,13 +346,8 @@ impl<'a> Resolver<'a> {\n                segment.ident.as_str().starts_with(\"rustc\") {\n                 let msg =\n                     \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\";\n-                emit_feature_err(\n-                    &self.session.parse_sess,\n-                    sym::rustc_attrs,\n-                    segment.ident.span,\n-                    GateIssue::Language,\n-                    msg,\n-                );\n+                feature_err(&self.session.parse_sess, sym::rustc_attrs, segment.ident.span, msg)\n+                    .emit();\n             }\n         }\n "}, {"sha": "dafb89badd75356a08c4f18543bb5cccc9f71cbb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -23,7 +23,7 @@ use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::errors::pluralize;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span, MultiSpan};\n@@ -914,8 +914,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             } else {\n                 \"parenthetical notation is only stable when used with `Fn`-family traits\"\n             };\n-            emit_feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures,\n-                             span, GateIssue::Language, msg);\n+            feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures, span, msg).emit();\n         }\n \n         self.create_substs_for_ast_path(span,"}, {"sha": "901a2192e20dd91c92fa1d3510281b38a60b2615", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -644,13 +644,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {\n-            feature_gate::emit_feature_err(\n+            feature_gate::feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::unsized_tuple_coercion,\n                 self.cause.span,\n-                feature_gate::GateIssue::Language,\n                 \"unsized tuple coercion is not stable enough for use and is subject to change\",\n-            );\n+            )\n+            .emit();\n         }\n \n         Ok(coercion)"}, {"sha": "84607fb6c8116f27bbc50db43fa1ea359819a0cb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -125,7 +125,7 @@ use syntax_pos::{self, BytePos, Span, MultiSpan};\n use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::feature_err;\n use syntax::source_map::{DUMMY_SP, original_sp};\n use syntax::symbol::{kw, sym, Ident};\n use syntax::util::parser::ExprPrecedence;\n@@ -2373,13 +2373,13 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n \n     if adt.is_enum() {\n         if !tcx.features().transparent_enums {\n-            emit_feature_err(\n+            feature_err(\n                 &tcx.sess.parse_sess,\n                 sym::transparent_enums,\n                 sp,\n-                GateIssue::Language,\n                 \"transparent enums are unstable\",\n-            );\n+            )\n+            .emit();\n         }\n         if adt.variants.len() != 1 {\n             bad_variant_count(tcx, adt, sp, def_id);\n@@ -2391,11 +2391,13 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     }\n \n     if adt.is_union() && !tcx.features().transparent_unions {\n-        emit_feature_err(&tcx.sess.parse_sess,\n-                         sym::transparent_unions,\n-                         sp,\n-                         GateIssue::Language,\n-                         \"transparent unions are unstable\");\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::transparent_unions,\n+            sp,\n+            \"transparent unions are unstable\",\n+        )\n+        .emit();\n     }\n \n     // For each field, figure out if it's known to be a ZST and align(1)\n@@ -2452,11 +2454,13 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);\n     if repr_type_ty == tcx.types.i128 || repr_type_ty == tcx.types.u128 {\n         if !tcx.features().repr128 {\n-            emit_feature_err(&tcx.sess.parse_sess,\n-                             sym::repr128,\n-                             sp,\n-                             GateIssue::Language,\n-                             \"repr with 128-bit type is unstable\");\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::repr128,\n+                sp,\n+                \"repr with 128-bit type is unstable\",\n+            )\n+            .emit();\n         }\n     }\n "}, {"sha": "20b6b01de57b2555ee26a7da116c826b11b9d1b3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_opaque_type;\n \n use syntax::ast;\n-use syntax::feature_gate::{self, GateIssue};\n+use syntax::feature_gate;\n use syntax_pos::Span;\n use syntax::symbol::sym;\n use errors::DiagnosticBuilder;\n@@ -830,13 +830,13 @@ fn check_method_receiver<'fcx, 'tcx>(\n                     &fcx.tcx.sess.parse_sess,\n                     sym::arbitrary_self_types,\n                     span,\n-                    GateIssue::Language,\n                     &format!(\n                         \"`{}` cannot be used as the type of `self` without \\\n                             the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n-                ).help(HELP_FOR_SELF_TYPE)\n+                )\n+                .help(HELP_FOR_SELF_TYPE)\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`."}, {"sha": "ab9845c89f5b28fb1c9f5d871c7b899d19317917", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -1494,16 +1494,16 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         _ => None,\n                     };\n                     if let Some(unsupported_type) = err {\n-                        feature_gate::emit_feature_err(\n+                        feature_gate::feature_err(\n                             &tcx.sess.parse_sess,\n                             sym::const_compare_raw_pointers,\n                             hir_ty.span,\n-                            feature_gate::GateIssue::Language,\n                             &format!(\n                                 \"using {} as const generic parameters is unstable\",\n                                 unsupported_type\n                             ),\n-                        );\n+                        )\n+                        .emit();\n                     };\n                 }\n                 if ty::search_for_structural_match_violation(\n@@ -2522,13 +2522,13 @@ fn from_target_feature(\n                 None => true,\n             };\n             if !allowed && id.is_local() {\n-                feature_gate::emit_feature_err(\n+                feature_gate::feature_err(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n                     item.span(),\n-                    feature_gate::GateIssue::Language,\n                     &format!(\"the target feature `{}` is currently unstable\", feature),\n-                );\n+                )\n+                .emit();\n             }\n             Some(Symbol::intern(feature))\n         }));"}, {"sha": "3c10f27b60ae94532eba9919aa6de84de0ba7c8b", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -2,7 +2,7 @@\n \n use super::{mark_used, MetaItemKind};\n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::{emit_feature_err, GateIssue};\n+use crate::feature_gate::feature_err;\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n@@ -569,7 +569,7 @@ fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &F\n     let (cfg, feature, has_feature) = gated_cfg;\n     if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n         let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-        emit_feature_err(sess, *feature, cfg_span, GateIssue::Language, &explain);\n+        feature_err(sess, *feature, cfg_span, &explain).emit()\n     }\n }\n "}, {"sha": "c90f4c6f19f30ef3298418a63eb2c0ec81984359", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 11, "deletions": 43, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -1,6 +1,7 @@\n use rustc_feature::{ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, Feature, State as FeatureState, UnstableFeatures};\n+use rustc_feature::{find_feature_issue, GateIssue};\n \n use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n@@ -18,8 +19,6 @@ use log::debug;\n \n use rustc_error_codes::*;\n \n-use std::num::NonZeroU32;\n-\n macro_rules! gate_feature_fn {\n     ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n         let (cx, has_feature, span,\n@@ -48,30 +47,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n-    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n-        // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(info.issue().is_some())\n-        info.issue()\n-    } else {\n-        // search in Accepted, Removed, or Stable Removed features\n-        let found = ACCEPTED_FEATURES\n-            .iter()\n-            .chain(REMOVED_FEATURES)\n-            .chain(STABLE_REMOVED_FEATURES)\n-            .find(|t| t.name == feature);\n-        match found {\n-            Some(found) => found.issue(),\n-            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n-        }\n-    }\n-}\n-\n-pub enum GateIssue {\n-    Language,\n-    Library(Option<NonZeroU32>)\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq)]\n pub enum GateStrength {\n     /// A hard error. (Most feature gates should use this.)\n@@ -80,49 +55,43 @@ pub enum GateStrength {\n     Soft,\n }\n \n-pub fn emit_feature_err(\n-    sess: &ParseSess,\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n     feature: Symbol,\n-    span: Span,\n-    issue: GateIssue,\n+    span: impl Into<MultiSpan>,\n     explain: &str,\n-) {\n-    feature_err(sess, feature, span, issue, explain).emit();\n+) -> DiagnosticBuilder<'a> {\n+    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n-pub fn feature_err<'a, S: Into<MultiSpan>>(\n+pub fn feature_err_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: S,\n+    span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a> {\n     leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n }\n \n-fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n+fn leveled_feature_err<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: S,\n+    span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n     level: GateStrength,\n ) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n-    let issue = match issue {\n-        GateIssue::Language => find_lang_feature_issue(feature),\n-        GateIssue::Library(lib) => lib,\n-    };\n-\n     let mut err = match level {\n         GateStrength::Hard => {\n             diag.struct_span_err_with_code(span, explain, stringify_error_code!(E0658))\n         }\n         GateStrength::Soft => diag.struct_span_warn(span, explain),\n     };\n \n-    if let Some(n) = issue {\n+    if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n             \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n             n,\n@@ -257,7 +226,6 @@ impl<'a> PostExpansionVisitor<'a> {\n                 self.parse_sess,\n                 sym::arbitrary_enum_discriminant,\n                 discriminant_spans.clone(),\n-                crate::feature_gate::GateIssue::Language,\n                 \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n             );\n             for sp in discriminant_spans {"}, {"sha": "3d4a5d624c1190eccf025a807b2779387d3de59d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -94,10 +94,7 @@ pub use syntax_pos::source_map;\n pub mod entry;\n pub mod feature_gate {\n     mod check;\n-    pub use check::{\n-        check_crate, check_attribute, get_features, feature_err, emit_feature_err,\n-        GateIssue,\n-    };\n+    pub use check::{check_crate, check_attribute, get_features, feature_err, feature_err_issue};\n }\n pub mod mut_visit;\n pub mod ptr;"}, {"sha": "a6ced1439c5d95c5e07800899cd4f8980872fa9c", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79077f13ffa9194161a0ed574b036794ab1a8c36/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=79077f13ffa9194161a0ed574b036794ab1a8c36", "patch": "@@ -14,7 +14,7 @@ use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n use syntax::attr::{self, HasAttrs, is_builtin_attr};\n use syntax::source_map::respan;\n-use syntax::feature_gate::{self, GateIssue, emit_feature_err};\n+use syntax::feature_gate::{self, feature_err};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -727,13 +727,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n         }\n-        emit_feature_err(\n+        feature_err(\n             self.cx.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            GateIssue::Language,\n             &format!(\"custom attributes cannot be applied to {}\", kind),\n-        );\n+        )\n+        .emit();\n     }\n \n     fn gate_proc_macro_input(&self, annotatable: &Annotatable) {\n@@ -745,13 +745,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             fn visit_item(&mut self, item: &'ast ast::Item) {\n                 match &item.kind {\n                     ast::ItemKind::Mod(module) if !module.inline => {\n-                        emit_feature_err(\n+                        feature_err(\n                             self.parse_sess,\n                             sym::proc_macro_hygiene,\n                             item.span,\n-                            GateIssue::Language,\n                             \"non-inline modules in proc macro input are unstable\",\n-                        );\n+                        )\n+                        .emit();\n                     }\n                     _ => {}\n                 }\n@@ -790,13 +790,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n         }\n-        emit_feature_err(\n+        feature_err(\n             self.cx.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            GateIssue::Language,\n             &format!(\"procedural macros cannot be expanded to {}\", kind),\n-        );\n+        )\n+        .emit();\n     }\n \n     fn parse_ast_fragment(\n@@ -992,9 +992,11 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         if let Some(attr) = &attr {\n             if !self.cx.ecfg.custom_inner_attributes() &&\n                attr.style == ast::AttrStyle::Inner && !attr.has_name(sym::test) {\n-                emit_feature_err(&self.cx.parse_sess, sym::custom_inner_attributes,\n-                                 attr.span, GateIssue::Language,\n-                                 \"non-builtin inner attributes are unstable\");\n+                feature_err(\n+                    &self.cx.parse_sess, sym::custom_inner_attributes, attr.span,\n+                    \"non-builtin inner attributes are unstable\"\n+                )\n+                .emit();\n             }\n         }\n         attr"}]}