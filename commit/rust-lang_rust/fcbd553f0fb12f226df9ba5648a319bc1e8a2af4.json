{"sha": "fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYmQ1NTNmMGZiMTJmMjI2ZGY5YmE1NjQ4YTMxOWJjMWU4YTJhZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-26T22:48:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:14:46Z"}, "message": "Substitute type aliases before checking for privacy", "tree": {"sha": "80bf5b2d05b496d783a20ccb825f6fcab8875b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80bf5b2d05b496d783a20ccb825f6fcab8875b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "html_url": "https://github.com/rust-lang/rust/commit/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a745614f44d343cf40bd2a623d0b8d522547d570", "url": "https://api.github.com/repos/rust-lang/rust/commits/a745614f44d343cf40bd2a623d0b8d522547d570", "html_url": "https://github.com/rust-lang/rust/commit/a745614f44d343cf40bd2a623d0b8d522547d570"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "8993b998738b39f5665a94c216e5e2d636a95771", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "patch": "@@ -1460,13 +1460,38 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     old_error_set: &'a NodeSet,\n }\n \n+impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n+    // Check if the type alias contain private types when substituted\n+    fn is_public_type_alias(&self, item: &hir::Item, path: &hir::Path) -> bool {\n+        // Type alias is considered public if the aliased type is\n+        // public, even if the type alias itself is private. So, something\n+        // like `type A = u8; pub fn f() -> A {...}` doesn't cause an error.\n+        if let hir::ItemTy(ref ty, ref generics) = item.node {\n+            let mut check = SearchInterfaceForPrivateItemsVisitor {\n+                tcx: self.tcx, is_quiet: self.is_quiet,\n+                is_public: true, old_error_set: self.old_error_set,\n+            };\n+            check.visit_ty(ty);\n+            let provided_params = path.segments.last().unwrap().parameters.types().len();\n+            for ty_param in &generics.ty_params[provided_params..] {\n+                if let Some(ref default_ty) = ty_param.default {\n+                    check.visit_ty(default_ty);\n+                }\n+            }\n+            check.is_public\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &hir::Ty) {\n         if self.is_quiet && !self.is_public {\n             // We are in quiet mode and a private type is already found, no need to proceed\n             return\n         }\n-        if let hir::TyPath(..) = ty.node {\n+        if let hir::TyPath(_, ref path) = ty.node {\n             let def = self.tcx.def_map.borrow().get(&ty.id).unwrap().full_def();\n             match def {\n                 def::DefPrimTy(..) | def::DefSelfTy(..) | def::DefTyParam(..) => {\n@@ -1482,12 +1507,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                     // Non-local means public, local needs to be checked\n                     if let Some(node_id) = self.tcx.map.as_local_node_id(def_id) {\n                         if let Some(ast_map::NodeItem(ref item)) = self.tcx.map.find(node_id) {\n-                            if let (&hir::ItemTy(..), true) = (&item.node, self.is_quiet) {\n-                                // Conservatively approximate the whole type alias as public without\n-                                // recursing into its components when determining impl publicity.\n-                                return\n-                            }\n-                            if item.vis != hir::Public {\n+                            if item.vis != hir::Public && !self.is_public_type_alias(item, path) {\n                                 if !self.is_quiet {\n                                     if self.old_error_set.contains(&ty.id) {\n                                         span_err!(self.tcx.sess, ty.span, E0446,"}, {"sha": "8f60be3fab3bf0c262da7a4dec6137e0edeb4df7", "filename": "src/librustc_trans/back/msvc/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs?ref=fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "patch": "@@ -14,7 +14,7 @@ use std::os::windows::prelude::*;\n use std::ptr;\n use libc::{c_void, c_long};\n \n-pub type DWORD = u32;\n+type DWORD = u32;\n type LPCWSTR = *const u16;\n type LONG = c_long;\n type LPDWORD = *mut DWORD;"}, {"sha": "7239e6ddc3794c93681e7b1db5aab4ee6eaf3ac5", "filename": "src/test/compile-fail/issue-28450-1.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Fissue-28450-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Fissue-28450-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28450-1.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Checks for private types in public interfaces\n-\n-type Foo = u8;\n-pub fn foo(f: Foo) {} //~ ERROR private type in public interface\n-\n-fn main() {}"}, {"sha": "939f2400d1b8994616e01a1507c387d7edabb46d", "filename": "src/test/compile-fail/lint-visible-private-types-1.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs?ref=fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "patch": "@@ -37,5 +37,11 @@ impl PubTrait for <Private<isize> as PrivTrait2>::Alias {\n     type Output = Private<isize>; //~ WARN private type in public interface\n }\n \n+type PrivAliasPubType = u8;\n+pub fn f1(_: PrivAliasPubType) {} // Ok, not an error\n+\n+type PrivAliasGeneric<T = Private<isize>> = T;\n+pub fn f2(_: PrivAliasGeneric<u8>) {} // Ok, not an error\n+\n #[rustc_error]\n fn main() {} //~ ERROR compilation successful"}, {"sha": "e9890dc32b736feb1b2b82bbf06a249a790dd733", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd553f0fb12f226df9ba5648a319bc1e8a2af4/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=fcbd553f0fb12f226df9ba5648a319bc1e8a2af4", "patch": "@@ -121,3 +121,12 @@ impl<T: ParamTrait<Private<isize>>>  //~ ERROR private type in public interface\n      ParamTrait<T> for Public<i8> {\n     fn foo() -> T { panic!() }\n }\n+\n+type PrivAliasPrivType = Private<isize>;\n+pub fn f1(_: PrivAliasPrivType) {} //~ ERROR private type in public interface\n+\n+type PrivAliasGeneric<T = Private<isize>> = T;\n+pub fn f2(_: PrivAliasGeneric) {} //~ ERROR private type in public interface\n+\n+type Result<T> = std::result::Result<T, Private<isize>>;\n+pub fn f3(_: Result<u8>) {} //~ ERROR private type in public interface"}]}