{"sha": "db0a13b9865510ec07f7597e11009eabc2676afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGExM2I5ODY1NTEwZWMwN2Y3NTk3ZTExMDA5ZWFiYzI2NzZhZmM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-07-01T10:30:14Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-07-10T07:35:35Z"}, "message": "Switch over to new range_rev semantics; fix #5270.", "tree": {"sha": "b674a79ce8c955a01e8669bcfeaab759b443915d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b674a79ce8c955a01e8669bcfeaab759b443915d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0a13b9865510ec07f7597e11009eabc2676afc", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0a13b9865510ec07f7597e11009eabc2676afc", "html_url": "https://github.com/rust-lang/rust/commit/db0a13b9865510ec07f7597e11009eabc2676afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0a13b9865510ec07f7597e11009eabc2676afc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c19f1bca83be3f4abef378d0a4cd852c8615164", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c19f1bca83be3f4abef378d0a4cd852c8615164", "html_url": "https://github.com/rust-lang/rust/commit/3c19f1bca83be3f4abef378d0a4cd852c8615164"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "329d3a454b45a1fd5a955168896181cdc375328e", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=db0a13b9865510ec07f7597e11009eabc2676afc", "patch": "@@ -159,8 +159,8 @@ impl<V> SmallIntMap<V> {\n     /// Visit all key-value pairs in reverse order\n     pub fn each_reverse<'a>(&'a self, it: &fn(uint, &'a V) -> bool) -> bool {\n         for uint::range_rev(self.v.len(), 0) |i| {\n-            match self.v[i - 1] {\n-              Some(ref elt) => if !it(i - 1, elt) { return false; },\n+            match self.v[i] {\n+              Some(ref elt) => if !it(i, elt) { return false; },\n               None => ()\n             }\n         }"}, {"sha": "cef32b5c7e4456fc5115397034881a141f3a54ca", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=db0a13b9865510ec07f7597e11009eabc2676afc", "patch": "@@ -132,9 +132,10 @@ pub fn range(lo: $T, hi: $T, it: &fn($T) -> bool) -> bool {\n }\n \n #[inline]\n-/// Iterate over the range [`hi`..`lo`)\n+/// Iterate over the range (`hi`..`lo`]\n pub fn range_rev(hi: $T, lo: $T, it: &fn($T) -> bool) -> bool {\n-    range_step(hi, lo, -1 as $T, it)\n+    if hi == min_value { return true; }\n+    range_step_inclusive(hi-1, lo, -1 as $T, it)\n }\n \n impl Num for $T {}\n@@ -897,7 +898,7 @@ mod tests {\n         for range(0,3) |i| {\n             l.push(i);\n         }\n-        for range_rev(13,10) |i| {\n+        for range_rev(14,11) |i| {\n             l.push(i);\n         }\n         for range_step(20,26,2) |i| {"}, {"sha": "54c1327fa9303798921d15ce735df9c64f59936f", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=db0a13b9865510ec07f7597e11009eabc2676afc", "patch": "@@ -132,9 +132,10 @@ pub fn range(lo: $T, hi: $T, it: &fn($T) -> bool) -> bool {\n }\n \n #[inline]\n-/// Iterate over the range [`hi`..`lo`)\n+/// Iterate over the range (`hi`..`lo`]\n pub fn range_rev(hi: $T, lo: $T, it: &fn($T) -> bool) -> bool {\n-    range_step(hi, lo, -1 as $T_SIGNED, it)\n+    if hi == min_value { return true; }\n+    range_step_inclusive(hi-1, lo, -1 as $T_SIGNED, it)\n }\n \n impl Num for $T {}\n@@ -662,7 +663,7 @@ mod tests {\n         for range(0,3) |i| {\n             l.push(i);\n         }\n-        for range_rev(13,10) |i| {\n+        for range_rev(14,11) |i| {\n             l.push(i);\n         }\n         for range_step(20,26,2) |i| {"}, {"sha": "883870db1e67361e59095c78a1056f276cfa5b56", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=db0a13b9865510ec07f7597e11009eabc2676afc", "patch": "@@ -669,7 +669,7 @@ fn spawn_process_os(prog: &str, args: &[~str],\n             fail!(\"failure in dup3(err_fd, 2): %s\", os::last_os_error());\n         }\n         // close all other fds\n-        for int::range_rev(getdtablesize() as int - 1, 2) |fd| {\n+        for int::range_rev(getdtablesize() as int, 3) |fd| {\n             close(fd as c_int);\n         }\n "}, {"sha": "50552fd75478825afdb1eec88e27429f2696f13a", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=db0a13b9865510ec07f7597e11009eabc2676afc", "patch": "@@ -261,7 +261,7 @@ impl<T> TrieNode<T> {\n \n     fn each_reverse<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n         for uint::range_rev(self.children.len(), 0) |idx| {\n-            match self.children[idx - 1] {\n+            match self.children[idx] {\n                 Internal(ref x) => if !x.each_reverse(|i,t| f(i,t)) { return false },\n                 External(k, ref v) => if !f(&k, v) { return false },\n                 Nothing => ()"}, {"sha": "7262339e431d9c293b7e7f36438ce85fdde4f70f", "filename": "src/test/run-pass/num-range-rev.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0a13b9865510ec07f7597e11009eabc2676afc/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=db0a13b9865510ec07f7597e11009eabc2676afc", "patch": "@@ -40,13 +40,13 @@ pub fn main() {\n     // int and uint have same result for\n     //   Sum{100 > i >= 2} == (Sum{1 <= i <= 99} - 1) == n*(n+1)/2 - 1 for n=99\n     let mut sum = 0u;\n-    for uint_range_rev(99, 1) |i| {\n+    for uint_range_rev(100, 2) |i| {\n         sum += i;\n     }\n     assert_eq!(sum, 4949);\n \n     let mut sum = 0i;\n-    for int_range_rev(99, 1) |i| {\n+    for int_range_rev(100, 2) |i| {\n         sum += i;\n     }\n     assert_eq!(sum, 4949);\n@@ -55,17 +55,17 @@ pub fn main() {\n     // elements are visited in correct order\n     let primes = [2,3,5,7,11];\n     let mut prod = 1i;\n-    for uint_range_rev(4, 0) |i| {\n+    for uint_range_rev(5, 0) |i| {\n         println(fmt!(\"uint 4 downto 0: %u\", i));\n         prod *= int::pow(primes[i], i);\n     }\n-    assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3);\n+    assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);\n     let mut prod = 1i;\n-    for int_range_rev(4, 0) |i| {\n+    for int_range_rev(5, 0) |i| {\n         println(fmt!(\"int 4 downto 0: %d\", i));\n         prod *= int::pow(primes[i], i as uint);\n     }\n-    assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3);\n+    assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);\n \n \n     // range and range_rev are symmetric.\n@@ -74,7 +74,7 @@ pub fn main() {\n         sum_up += i;\n     }\n     let mut sum_down = 0u;\n-    for uint_range_rev(29, 9) |i| {\n+    for uint_range_rev(30, 10) |i| {\n         sum_down += i;\n     }\n     assert_eq!(sum_up, sum_down);\n@@ -84,7 +84,7 @@ pub fn main() {\n         sum_up += i;\n     }\n     let mut sum_down = 0;\n-    for int_range_rev(9, -21) |i| {\n+    for int_range_rev(10, -20) |i| {\n         sum_down += i;\n     }\n     assert_eq!(sum_up, sum_down);\n@@ -96,7 +96,7 @@ pub fn main() {\n     }\n \n     for uint_range_rev(0, 1) |_| {\n-        // fail!(\"range should be empty when start-1 underflows\");\n+        fail!(\"range should be empty when start-1 underflows\");\n     }\n \n     // range iterations do not wrap/underflow"}]}