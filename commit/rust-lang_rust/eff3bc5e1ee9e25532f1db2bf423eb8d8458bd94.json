{"sha": "eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZjNiYzVlMWVlOWUyNTUzMmYxZGIyYmY0MjNlYjhkODQ1OGJkOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-22T11:36:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-22T11:36:04Z"}, "message": "Auto merge of #5079 - JohnTitor:fix-eq-op, r=flip1995\n\nIgnore macros with `!` operators in `eq_op`\n\n`SpanlessEq::eq_expr` doesn't ignore macros with `!` operators and I'm not sure we should ignore there, so I ignore in `eq_op` (and `op_ref`).\n\nFixes #5077\n\nchangelog: Fix false positive in `eq_op`", "tree": {"sha": "cdb4c38b92fde8ef5731e06c18501879720cd9c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb4c38b92fde8ef5731e06c18501879720cd9c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "html_url": "https://github.com/rust-lang/rust/commit/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e74853d1f9893cf2a47f28b658711d8f9f97b6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e74853d1f9893cf2a47f28b658711d8f9f97b6b", "html_url": "https://github.com/rust-lang/rust/commit/3e74853d1f9893cf2a47f28b658711d8f9f97b6b"}, {"sha": "a7d58edf270c25081c4f8a030ed03d22276a4abd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d58edf270c25081c4f8a030ed03d22276a4abd", "html_url": "https://github.com/rust-lang/rust/commit/a7d58edf270c25081c4f8a030ed03d22276a4abd"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "01b04220a0690ceec8e4ad11974eb1807f39be59", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n+use crate::utils::{\n+    implements_trait, in_macro, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq,\n+};\n use rustc_errors::Applicability;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -53,6 +55,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n             if e.span.from_expansion() {\n                 return;\n             }\n+            let macro_with_not_op = |expr_kind: &ExprKind<'_>| {\n+                if let ExprKind::Unary(_, ref expr) = *expr_kind {\n+                    in_macro(expr.span)\n+                } else {\n+                    false\n+                }\n+            };\n+            if macro_with_not_op(&left.kind) || macro_with_not_op(&right.kind) {\n+                return;\n+            }\n             if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {\n                 span_lint(\n                     cx,"}, {"sha": "272b0900a31c6dee8c27f8eadf2c5b7e00245083", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "patch": "@@ -73,6 +73,15 @@ macro_rules! check_if_named_foo {\n     )\n }\n \n+macro_rules! bool_macro {\n+    ($expression:expr) => {\n+        true\n+    };\n+}\n+\n+#[allow(clippy::short_circuit_statement)]\n fn check_ignore_macro() {\n     check_if_named_foo!(foo);\n+    // checks if the lint ignores macros with `!` operator\n+    !bool_macro!(1) && !bool_macro!(\"\");\n }"}]}