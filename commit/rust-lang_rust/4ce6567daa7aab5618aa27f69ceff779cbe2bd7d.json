{"sha": "4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "node_id": "C_kwDOAAsO6NoAKDRjZTY1NjdkYWE3YWFiNTYxOGFhMjdmNjljZWZmNzc5Y2JlMmJkN2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-31T02:57:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-31T02:57:25Z"}, "message": "Rollup merge of #95263 - compiler-errors:async-block-pretty, r=jackh726\n\nRestore `impl Future<Output = Type>` to async blocks\n\nI was sad when I undid some of the code I wrote in #91096 in the PR #95225, so I fixed it here to not print `[async output]`.\n\nThis PR \"manually\" normalizes the associated type `<[generator] as Generator>::Return` type which appears very frequently in `impl Future` types that result from async block desugaring.", "tree": {"sha": "bd85364c5c0891416be494d2c0bdfa9b8e2f1a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd85364c5c0891416be494d2c0bdfa9b8e2f1a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRRiWCRBK7hj4Ov3rIwAAzUQIAATVcLGTa5Q+H0zR3KsRYneI\nb7PEdoLxTOFnLEbaoguH2sxMzkBqAjQ1n8nLx6f/MoLg+oCW6PoRmMAgSPxs4NXc\nfsn29dUEHLqL5PSyDh0vTDLbcjsuiC5JZwsXB+8HbvjRlAuwxUp8+d1DhEWz/eX4\nzhzqjMC3yyEErdEo+7Fxdpy4TJiSIm+PMfI1KWrtInSfNE/ULyzAlWboQKEUTsHf\nzpMyWCTbgPCGPYtsP6qlO6pWdWYG2FzbmAqfNp0Q9yK4tC5ISIktC0a6fSRKwoHU\n5xz1QpOLn84ahI+owg9rgVq1gmjQ5Nah+0V2kFzhtBf5fRWEKPejpPEShCo3QBU=\n=vAqz\n-----END PGP SIGNATURE-----\n", "payload": "tree bd85364c5c0891416be494d2c0bdfa9b8e2f1a22\nparent 32c5a57a00c234d5bcbba6c3d5ab638d3dd54494\nparent 7b2eaa3d8fb73cd1863665bf4b8c24e3b34eb41b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648695445 +0200\ncommitter GitHub <noreply@github.com> 1648695445 +0200\n\nRollup merge of #95263 - compiler-errors:async-block-pretty, r=jackh726\n\nRestore `impl Future<Output = Type>` to async blocks\n\nI was sad when I undid some of the code I wrote in #91096 in the PR #95225, so I fixed it here to not print `[async output]`.\n\nThis PR \"manually\" normalizes the associated type `<[generator] as Generator>::Return` type which appears very frequently in `impl Future` types that result from async block desugaring.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "html_url": "https://github.com/rust-lang/rust/commit/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c5a57a00c234d5bcbba6c3d5ab638d3dd54494", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c5a57a00c234d5bcbba6c3d5ab638d3dd54494", "html_url": "https://github.com/rust-lang/rust/commit/32c5a57a00c234d5bcbba6c3d5ab638d3dd54494"}, {"sha": "7b2eaa3d8fb73cd1863665bf4b8c24e3b34eb41b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2eaa3d8fb73cd1863665bf4b8c24e3b34eb41b", "html_url": "https://github.com/rust-lang/rust/commit/7b2eaa3d8fb73cd1863665bf4b8c24e3b34eb41b"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "21650fbb75dcb703b739a36f4e027a7eae80b3c0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -912,12 +912,25 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n \n                 for (assoc_item_def_id, term) in assoc_items {\n-                    // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n-                    if let Some(ty) = term.skip_binder().ty() &&\n-                       let ty::Projection(ty::ProjectionTy { item_def_id, .. }) = ty.kind() &&\n-                       Some(*item_def_id) == self.tcx().lang_items().generator_return() {\n-                        continue;\n-                    }\n+                    // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks,\n+                    // unless we can find out what generator return type it comes from.\n+                    let term = if let Some(ty) = term.skip_binder().ty()\n+                        && let ty::Projection(ty::ProjectionTy { item_def_id, substs }) = ty.kind()\n+                        && Some(*item_def_id) == self.tcx().lang_items().generator_return()\n+                    {\n+                        if let ty::Generator(_, substs, _) = substs.type_at(0).kind() {\n+                            let return_ty = substs.as_generator().return_ty();\n+                            if !return_ty.is_ty_infer() {\n+                                return_ty.into()\n+                            } else {\n+                                continue;\n+                            }\n+                        } else {\n+                            continue;\n+                        }\n+                    } else {\n+                        term.skip_binder()\n+                    };\n \n                     if first {\n                         p!(\"<\");\n@@ -928,7 +941,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                     p!(write(\"{} = \", self.tcx().associated_item(assoc_item_def_id).name));\n \n-                    match term.skip_binder() {\n+                    match term {\n                         Term::Ty(ty) => {\n                             p!(print(ty))\n                         }"}, {"sha": "b831d6102327759d499e6480ff85a44cb0b51e77", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "e0818337d203915f6331f43da805997eaabe05c4", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;"}, {"sha": "3ebc4392f2c8d85a9a103eed8930fa7eb0b41056", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -46,8 +46,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           the expected opaque type\n    |                                           the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (`async` closure body)\n-              found opaque type `impl Future` (`async` closure body)\n+   = note: expected opaque type `impl Future<Output = ()>` (`async` closure body)\n+              found opaque type `impl Future<Output = ()>` (`async` closure body)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "01c0d3225ba0bb260c3a7397ec33ed56ad561727", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |"}, {"sha": "36b7f2e4558675c83c2600c8160efd9f0bde13df", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -44,13 +44,13 @@ LL |     require_send(send_fut);\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = ()>`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "b230930012914fed15ecfe2facd5901a2168484c", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:35\n    |"}, {"sha": "7c074b07c3d59704206f217dbd1b520863175466", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -14,7 +14,7 @@ LL | async fn foo() {\n    = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n    = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = ()>`\n    = note: required because it appears within the type `impl Future<Output = ()>`\n note: required by a bound in `gimme_send`\n   --> $DIR/partial-drop-partial-reinit.rs:10:18"}, {"sha": "e6a72c72dd37cb119d889ab8305e5e7a9feba7db", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -28,7 +28,7 @@ note: required by a bound in `from_generator`\n LL |     T: Generator<ResumeTy, Yield = ()>,\n    |                            ^^^^^^^^^^ required by this bound in `from_generator`\n \n-error[E0280]: the requirement `<impl Future as Future>::Output == u32` is not satisfied\n+error[E0280]: the requirement `<impl Future<Output = u32> as Future>::Output == u32` is not satisfied\n   --> $DIR/async.rs:7:29\n    |\n LL |   async fn foo(x: u32) -> u32 {"}, {"sha": "36d9fdede109e2c289b269044f0bf43b84759cd9", "filename": "src/test/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -13,7 +13,7 @@ impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n         async {}\n-        //~^ ERROR the trait bound `impl Future: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied [E0277]\n     }\n }\n "}, {"sha": "e7023e8127c3d544513636ed861e92ef886fa7cc", "filename": "src/test/ui/impl-trait/issue-55872-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n+error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n   --> $DIR/issue-55872-3.rs:15:9\n    |\n LL |         async {}\n-   |         ^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n+   |         ^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n \n error: aborting due to previous error\n "}, {"sha": "7a057c7f51b8cc2e0d9ba15e5cba27bbdf5d4dd5", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -16,7 +16,7 @@ LL |         let f: F = async { 1 };\n LL |     }],\n    |     - value is dropped here\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == u8`\n+error[E0271]: type mismatch resolving `<impl Future<Output = ()> as Future>::Output == u8`\n   --> $DIR/issue-78722.rs:10:13\n    |\n LL |             async {}"}, {"sha": "e9b56cdc05d010f68262954a172bfea050be17f3", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future` cannot be used in patterns\n+error: `impl Future<Output = ()>` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}]}