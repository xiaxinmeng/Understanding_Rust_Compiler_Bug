{"sha": "f61fb53af40daf55764f2f2644604fd22498cb13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MWZiNTNhZjQwZGFmNTU3NjRmMmYyNjQ0NjA0ZmQyMjQ5OGNiMTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-13T07:43:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-13T07:43:27Z"}, "message": "adjust enum naming", "tree": {"sha": "8108f48e1c8a953adc881279632406244686877c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8108f48e1c8a953adc881279632406244686877c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f61fb53af40daf55764f2f2644604fd22498cb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f61fb53af40daf55764f2f2644604fd22498cb13", "html_url": "https://github.com/rust-lang/rust/commit/f61fb53af40daf55764f2f2644604fd22498cb13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f61fb53af40daf55764f2f2644604fd22498cb13/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32cccc05e8c47ed799a99d06dbfb1571fa6908c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32cccc05e8c47ed799a99d06dbfb1571fa6908c", "html_url": "https://github.com/rust-lang/rust/commit/f32cccc05e8c47ed799a99d06dbfb1571fa6908c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "798d22ccd764cb4f8ad1e16fd82777ecbc8762e8", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f61fb53af40daf55764f2f2644604fd22498cb13/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61fb53af40daf55764f2f2644604fd22498cb13/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=f61fb53af40daf55764f2f2644604fd22498cb13", "patch": "@@ -453,34 +453,34 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // These are intrinsics that compile to panics so that we can get a message\n         // which mentions the offending type, even from a const context.\n         #[derive(Debug, PartialEq)]\n-        enum PanicIntrinsic {\n-            IfUninhabited,\n-            IfZeroInvalid,\n-            IfAnyInvalid,\n+        enum AssertIntrinsic {\n+            Inhabited,\n+            ZeroValid,\n+            UninitValid,\n         };\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n             // FIXME: Move to symbols instead of strings.\n-            \"assert_inhabited\" => Some(PanicIntrinsic::IfUninhabited),\n-            \"assert_zero_valid\" => Some(PanicIntrinsic::IfZeroInvalid),\n-            \"assert_uninit_valid\" => Some(PanicIntrinsic::IfAnyInvalid),\n+            \"assert_inhabited\" => Some(AssertIntrinsic::Inhabited),\n+            \"assert_zero_valid\" => Some(AssertIntrinsic::ZeroValid),\n+            \"assert_uninit_valid\" => Some(AssertIntrinsic::UninitValid),\n             _ => None,\n         });\n         if let Some(intrinsic) = panic_intrinsic {\n-            use PanicIntrinsic::*;\n+            use AssertIntrinsic::*;\n             let ty = instance.unwrap().substs.type_at(0);\n             let layout = bx.layout_of(ty);\n             let do_panic = match intrinsic {\n-                IfUninhabited => layout.abi.is_uninhabited(),\n+                Inhabited => layout.abi.is_uninhabited(),\n                 // We unwrap as the error type is `!`.\n-                IfZeroInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n+                ZeroValid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n                 // We unwrap as the error type is `!`.\n-                IfAnyInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n+                UninitValid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n             };\n             if do_panic {\n                 let msg_str = if layout.abi.is_uninhabited() {\n                     // Use this error even for the other intrinsics as it is more precise.\n                     format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                } else if intrinsic == IfZeroInvalid {\n+                } else if intrinsic == ZeroValid {\n                     format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n                 } else {\n                     format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)"}]}