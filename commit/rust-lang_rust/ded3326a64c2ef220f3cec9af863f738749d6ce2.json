{"sha": "ded3326a64c2ef220f3cec9af863f738749d6ce2", "node_id": "C_kwDOAAsO6NoAKGRlZDMzMjZhNjRjMmVmMjIwZjNjZWM5YWY4NjNmNzM4NzQ5ZDZjZTI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-04T15:20:01Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-04T15:49:00Z"}, "message": "fix: use `BoundVar`s from current generic scope", "tree": {"sha": "0950673df7197aae5b8ccfb8c90162b099a0d04d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0950673df7197aae5b8ccfb8c90162b099a0d04d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded3326a64c2ef220f3cec9af863f738749d6ce2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmM8Ve8ACgkQ4laYqTBY\nYXFscw/9Gz9ERqFlS6i9olVk/3dJiphRWunQcncsgXQAyBC8FvldZFuVhYbAyId9\nRiyeaAP+PqzH2tM/GrBgGUzfwBMjlk3ixiMYq3Msd2Na3Tzm53aSCl7WtwGkuSLc\nc6EuHGxQrbDpNuDMpwptT7OuSmfuKCB+ib/PNZSSihsy3+Ayg3xTlR2ut2LlXQWY\n1/OEyExmw3AjxCjzfizaNJrHmtgOhzrmKjKxbFJSyRpLSf9WSS0hVt5z0JrNDnp3\nTaBNuFSVZ9adAyoE0nX9gVAuVGmuaHtN3CysaF/HrYLac/AqgtGg/3JGPFTxET6E\nEtrEcoUnem0x1hCOSLhdTf+0ERwpF9JokQMn8t75NtWvqG6566ZExXyw72y0Z5Ty\nnbyccJoEdKhBNw9MOkx9OEYTeIt94ETCYkMJq+qFchTEQSUMauMQqJ5IS5ESKFXN\nw1q1fnj2D1gMedP8e65hQRez3+jJTwCG/TR/yu6i2OeopkVp3Ej//H8kNMaGu1U6\ns0jg8vufOEa5KcXwQsBctjLmPe4LpnVR/iaJ5Xbm1co97lUnWZQPP4qumqvvxCot\n+NyyoeNhKVqYR9Tik/kZDzulq5I9xNj4ac5+FBl18T9iEIvIJ2FHrCe6E8OOeRsL\n2huypxqrT6oyc2gPut5vizLerpTKNMWYN7Y+OWQoU7l4OpijbeY=\n=RRJM\n-----END PGP SIGNATURE-----", "payload": "tree 0950673df7197aae5b8ccfb8c90162b099a0d04d\nparent e0a161b2e3a9345fd92fd3617e49648ee43ada86\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1664896801 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1664898540 +0900\n\nfix: use `BoundVar`s from current generic scope\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded3326a64c2ef220f3cec9af863f738749d6ce2", "html_url": "https://github.com/rust-lang/rust/commit/ded3326a64c2ef220f3cec9af863f738749d6ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded3326a64c2ef220f3cec9af863f738749d6ce2/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a161b2e3a9345fd92fd3617e49648ee43ada86", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a161b2e3a9345fd92fd3617e49648ee43ada86", "html_url": "https://github.com/rust-lang/rust/commit/e0a161b2e3a9345fd92fd3617e49648ee43ada86"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "223d705b157b32c03755a65e416ae380c1d22916", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ded3326a64c2ef220f3cec9af863f738749d6ce2/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded3326a64c2ef220f3cec9af863f738749d6ce2/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=ded3326a64c2ef220f3cec9af863f738749d6ce2", "patch": "@@ -1158,11 +1158,28 @@ fn named_associated_type_shorthand_candidates<R>(\n     };\n \n     match res {\n-        TypeNs::SelfType(impl_id) => search(\n+        TypeNs::SelfType(impl_id) => {\n             // we're _in_ the impl -- the binders get added back later. Correct,\n             // but it would be nice to make this more explicit\n-            db.impl_trait(impl_id)?.into_value_and_skipped_binders().0,\n-        ),\n+            let trait_ref = db.impl_trait(impl_id)?.into_value_and_skipped_binders().0;\n+\n+            let impl_id_as_generic_def: GenericDefId = impl_id.into();\n+            if impl_id_as_generic_def != def {\n+                // `trait_ref` contains `BoundVar`s bound by impl's `Binders`, but here we need\n+                // `BoundVar`s from `def`'s point of view.\n+                // FIXME: A `HirDatabase` query may be handy if this process is needed in more\n+                // places. It'd be almost identical as `impl_trait_query` where `resolver` would be\n+                // of `def` instead of `impl_id`.\n+                let starting_idx = generics(db.upcast(), def).len_self();\n+                let subst = TyBuilder::subst_for_def(db, impl_id, None)\n+                    .fill_with_bound_vars(DebruijnIndex::INNERMOST, starting_idx)\n+                    .build();\n+                let trait_ref = subst.apply(trait_ref, Interner);\n+                search(trait_ref)\n+            } else {\n+                search(trait_ref)\n+            }\n+        }\n         TypeNs::GenericParam(param_id) => {\n             let predicates = db.generic_predicates_for_param(def, param_id.into(), assoc_name);\n             let res = predicates.iter().find_map(|pred| match pred.skip_binders().skip_binders() {"}, {"sha": "a155adcec6c33b43335dbcaff4ae864cfb88f8a6", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ded3326a64c2ef220f3cec9af863f738749d6ce2/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded3326a64c2ef220f3cec9af863f738749d6ce2/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=ded3326a64c2ef220f3cec9af863f738749d6ce2", "patch": "@@ -1694,3 +1694,16 @@ fn foo(a: &dyn DoesNotExist) {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn self_assoc_with_const_generics_crash() {\n+    check_no_mismatches(\n+        r#\"\n+trait Trait { type Item; }\n+impl<T, const N: usize> Trait for [T; N] {\n+    type Item = ();\n+    fn f<U>(_: Self::Item) {}\n+}\n+        \"#,\n+    );\n+}"}]}