{"sha": "82017b8416798b4ad46c1b7416611b353374051a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMDE3Yjg0MTY3OThiNGFkNDZjMWI3NDE2NjExYjM1MzM3NDA1MWE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-16T02:04:25Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-16T02:14:13Z"}, "message": "Make staticness mismatch a fatal error\n\nExit with a fatal error, instead of recording a non-fatal error,\nwhen we encounter an impl method that's static when its corresponding\ntrait method isn't (or vice versa). This is because code later on in\nthe typechecker will expect the staticness of the two methods to be\nconsistent and ICE otherwise.\n\nr=nmatsakis\n\nCloses #3969", "tree": {"sha": "3a8938d7f43d2bcb066f6364db17346a772e8de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8938d7f43d2bcb066f6364db17346a772e8de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82017b8416798b4ad46c1b7416611b353374051a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82017b8416798b4ad46c1b7416611b353374051a", "html_url": "https://github.com/rust-lang/rust/commit/82017b8416798b4ad46c1b7416611b353374051a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82017b8416798b4ad46c1b7416611b353374051a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ca0c89d8d91a71d14a980037f3d7e555667515", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ca0c89d8d91a71d14a980037f3d7e555667515", "html_url": "https://github.com/rust-lang/rust/commit/f9ca0c89d8d91a71d14a980037f3d7e555667515"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "62ec991f77971ac243cce1464f85396230900b5f", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/82017b8416798b4ad46c1b7416611b353374051a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82017b8416798b4ad46c1b7416611b353374051a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=82017b8416798b4ad46c1b7416611b353374051a", "patch": "@@ -296,11 +296,27 @@ fn compare_impl_method(tcx: ty::ctxt,\n     // implementable by an `&const self` method (the impl assumes less\n     // than the trait provides).\n     if impl_m.self_ty != trait_m.self_ty {\n-        tcx.sess.span_err(\n-            cm.span,\n-            fmt!(\"method `%s`'s self type does \\\n-                  not match the trait method's \\\n-                  self type\", tcx.sess.str_of(impl_m.ident)));\n+        if impl_m.self_ty == ast::sty_static {\n+            // Needs to be a fatal error because otherwise,\n+            // method::transform_self_type_for_method ICEs\n+            tcx.sess.span_fatal(cm.span,\n+                 fmt!(\"method `%s` is declared as \\\n+                       static in its impl, but not in \\\n+                       its trait\", tcx.sess.str_of(impl_m.ident)));\n+        }\n+        else if trait_m.self_ty == ast::sty_static {\n+            tcx.sess.span_fatal(cm.span,\n+                 fmt!(\"method `%s` is declared as \\\n+                       static in its trait, but not in \\\n+                       its impl\", tcx.sess.str_of(impl_m.ident)));\n+        }\n+        else {\n+            tcx.sess.span_err(\n+                cm.span,\n+                fmt!(\"method `%s`'s self type does \\\n+                      not match the trait method's \\\n+                      self type\", tcx.sess.str_of(impl_m.ident)));\n+        }\n     }\n \n     if impl_m.tps.len() != trait_m.tps.len() {\n@@ -348,9 +364,6 @@ fn compare_impl_method(tcx: ty::ctxt,\n                     pluralize(trait_param_bounds.len(), ~\"bound\")));\n            return;\n         }\n-        // tjc: I'm mildly worried that there's something I'm\n-        // not checking that require_same_types doesn't catch,\n-        // but I can't figure out what.\n     }\n \n     // Replace any references to the self region in the self type with"}, {"sha": "f82d2a45b10d6a11e58dd5d5e968203c3715338b", "filename": "src/test/compile-fail/issue-3969.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82017b8416798b4ad46c1b7416611b353374051a/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82017b8416798b4ad46c1b7416611b353374051a/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs?ref=82017b8416798b4ad46c1b7416611b353374051a", "patch": "@@ -0,0 +1,15 @@\n+struct Bike {\n+    name: ~str,\n+}\n+\n+trait BikeMethods {\n+    fn woops(&const self) -> ~str;\n+}\n+\n+pub impl Bike : BikeMethods {\n+    static fn woops(&const self) -> ~str { ~\"foo\" }\n+    //~^ ERROR method `woops` is declared as static in its impl, but not in its trait\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "1edc668e2f32081b36e6ba37c0641cf7ffbede6c", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82017b8416798b4ad46c1b7416611b353374051a/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82017b8416798b4ad46c1b7416611b353374051a/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=82017b8416798b4ad46c1b7416611b353374051a", "patch": "@@ -4,7 +4,7 @@ trait foo {\n }\n \n impl int: foo {\n-    fn bar() {} //~ ERROR self type does not match the trait method's\n+    fn bar() {} //~ ERROR method `bar` is declared as static in its trait, but not in its impl\n }\n \n fn main() {}"}]}