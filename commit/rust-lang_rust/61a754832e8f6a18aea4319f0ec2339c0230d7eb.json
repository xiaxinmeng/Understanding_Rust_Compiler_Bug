{"sha": "61a754832e8f6a18aea4319f0ec2339c0230d7eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTc1NDgzMmU4ZjZhMThhZWE0MzE5ZjBlYzIzMzljMDIzMGQ3ZWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T13:51:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T13:51:51Z"}, "message": "Rollup merge of #76875 - denisvasilik:intra-doc-links-alloc-binary-heap, r=jyn514\n\nMove to intra-doc links in library/alloc/src/collections/binary_heap.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links", "tree": {"sha": "e109b66f7259d35a0ffb51ce925e4c60e63b136f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e109b66f7259d35a0ffb51ce925e4c60e63b136f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a754832e8f6a18aea4319f0ec2339c0230d7eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ153CRBK7hj4Ov3rIwAAdHIIACqK9N9utFaluxUs6MSNQtn4\n7hAkD4dwHXm8rFNbsnKK2x4pvJ6Myk49xSps5W9vxzSYak5/iPgmLVeL6ut3wbSU\nOASw+0593Dcjq1U14koLVuUCbvkrzyhDUmuCoxnmtnghjlhxQibdeKZOwkNqanwr\nhLdvdnCPfbO/OHxi7hMCRmHMSWJLCBUV3Els3UN7v/R+MCuuTBQgUf3ML+a+JzVI\nnrnsAGVNru8pfo1SXnObMKIyM2PUaHCBQp2hoPeUlFA30azsz0URuuIqGvoLgJNJ\nbvQ0K0ZDZ1CwP0pRNrAMybuu4ukULganvXkmENAFSV47s3qI5pnv8ZaccUrNQec=\n=A91z\n-----END PGP SIGNATURE-----\n", "payload": "tree e109b66f7259d35a0ffb51ce925e4c60e63b136f\nparent bea0ae700e4e8e21c5a6d815c787310978d91d55\nparent 719c40cb5aa580e0f51cff5e021ec51c52814621\nauthor Ralf Jung <post@ralfj.de> 1600609911 +0200\ncommitter GitHub <noreply@github.com> 1600609911 +0200\n\nRollup merge of #76875 - denisvasilik:intra-doc-links-alloc-binary-heap, r=jyn514\n\nMove to intra-doc links in library/alloc/src/collections/binary_heap.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a754832e8f6a18aea4319f0ec2339c0230d7eb", "html_url": "https://github.com/rust-lang/rust/commit/61a754832e8f6a18aea4319f0ec2339c0230d7eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a754832e8f6a18aea4319f0ec2339c0230d7eb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea0ae700e4e8e21c5a6d815c787310978d91d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0ae700e4e8e21c5a6d815c787310978d91d55", "html_url": "https://github.com/rust-lang/rust/commit/bea0ae700e4e8e21c5a6d815c787310978d91d55"}, {"sha": "719c40cb5aa580e0f51cff5e021ec51c52814621", "url": "https://api.github.com/repos/rust-lang/rust/commits/719c40cb5aa580e0f51cff5e021ec51c52814621", "html_url": "https://github.com/rust-lang/rust/commit/719c40cb5aa580e0f51cff5e021ec51c52814621"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "621c4ff6378c9e2f01dbe2fdc29114d154a08aff", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/61a754832e8f6a18aea4319f0ec2339c0230d7eb/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a754832e8f6a18aea4319f0ec2339c0230d7eb/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=61a754832e8f6a18aea4319f0ec2339c0230d7eb", "patch": "@@ -15,7 +15,6 @@\n //! [dijkstra]: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n //! [sssp]: https://en.wikipedia.org/wiki/Shortest_path_problem\n //! [dir_graph]: https://en.wikipedia.org/wiki/Directed_graph\n-//! [`BinaryHeap`]: struct.BinaryHeap.html\n //!\n //! ```\n //! use std::cmp::Ordering;\n@@ -240,10 +239,10 @@ use super::SpecExtend;\n /// The value for `push` is an expected cost; the method documentation gives a\n /// more detailed analysis.\n ///\n-/// [push]: #method.push\n-/// [pop]: #method.pop\n-/// [peek]: #method.peek\n-/// [peek\\_mut]: #method.peek_mut\n+/// [push]: BinaryHeap::push\n+/// [pop]: BinaryHeap::pop\n+/// [peek]: BinaryHeap::peek\n+/// [peek\\_mut]: BinaryHeap::peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -255,8 +254,7 @@ pub struct BinaryHeap<T> {\n /// This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See\n /// its documentation for more.\n ///\n-/// [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`peek_mut`]: BinaryHeap::peek_mut\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>,\n@@ -802,7 +800,7 @@ impl<T> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     ///\n-    /// [`reserve`]: #method.reserve\n+    /// [`reserve`]: BinaryHeap::reserve\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.data.reserve_exact(additional);\n@@ -1057,11 +1055,10 @@ impl<T> Drop for Hole<'_, T> {\n \n /// An iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`iter`] method on [`BinaryHeap`]. See its\n+/// This `struct` is created by [`BinaryHeap::iter()`]. See its\n /// documentation for more.\n ///\n-/// [`iter`]: struct.BinaryHeap.html#method.iter\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`iter`]: BinaryHeap::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n@@ -1122,11 +1119,10 @@ impl<T> FusedIterator for Iter<'_, T> {}\n \n /// An owning iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]\n+/// This `struct` is created by [`BinaryHeap::into_iter()`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.BinaryHeap.html#method.into_iter\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`into_iter`]: BinaryHeap::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {\n@@ -1227,11 +1223,10 @@ unsafe impl<T: Ord> TrustedLen for IntoIterSorted<T> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`drain`] method on [`BinaryHeap`]. See its\n+/// This `struct` is created by [`BinaryHeap::drain()`]. See its\n /// documentation for more.\n ///\n-/// [`drain`]: struct.BinaryHeap.html#method.drain\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`drain`]: BinaryHeap::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n #[derive(Debug)]\n pub struct Drain<'a, T: 'a> {\n@@ -1273,11 +1268,10 @@ impl<T> FusedIterator for Drain<'_, T> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`drain_sorted`] method on [`BinaryHeap`]. See its\n+/// This `struct` is created by [`BinaryHeap::drain_sorted()`]. See its\n /// documentation for more.\n ///\n-/// [`drain_sorted`]: struct.BinaryHeap.html#method.drain_sorted\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`drain_sorted`]: BinaryHeap::drain_sorted\n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n #[derive(Debug)]\n pub struct DrainSorted<'a, T: Ord> {"}]}