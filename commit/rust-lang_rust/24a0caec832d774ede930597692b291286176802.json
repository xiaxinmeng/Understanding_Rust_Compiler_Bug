{"sha": "24a0caec832d774ede930597692b291286176802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTBjYWVjODMyZDc3NGVkZTkzMDU5NzY5MmIyOTEyODYxNzY4MDI=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-03-26T20:35:18Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-03-26T20:35:18Z"}, "message": "librustc_driver => 2018", "tree": {"sha": "b40545ed3e723865c0ed0bdf82073b671cc27337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b40545ed3e723865c0ed0bdf82073b671cc27337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a0caec832d774ede930597692b291286176802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a0caec832d774ede930597692b291286176802", "html_url": "https://github.com/rust-lang/rust/commit/24a0caec832d774ede930597692b291286176802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a0caec832d774ede930597692b291286176802/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d350897c7f95bb40ae9762ad1e945f95fc37ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d350897c7f95bb40ae9762ad1e945f95fc37ae", "html_url": "https://github.com/rust-lang/rust/commit/07d350897c7f95bb40ae9762ad1e945f95fc37ae"}], "stats": {"total": 68, "additions": 23, "deletions": 45}, "files": [{"sha": "5432f80a1712c076045f8ccb6f98721537a60999", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24a0caec832d774ede930597692b291286176802/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/24a0caec832d774ede930597692b291286176802/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=24a0caec832d774ede930597692b291286176802", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_driver\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_driver\"\n@@ -13,14 +14,14 @@ arena = { path = \"../libarena\" }\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n env_logger = { version = \"0.5\", default-features = false }\n-rustc-rayon = \"0.1.2\"\n+rayon = { version = \"0.1.2\", package = \"rustc-rayon\" }\n scoped-tls = \"1.0\"\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_borrowck = { path = \"../librustc_borrowck\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "4b7cffaad5509711e6abea758d79171fe47ac9f4", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24a0caec832d774ede930597692b291286176802/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0caec832d774ede930597692b291286176802/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=24a0caec832d774ede930597692b291286176802", "patch": "@@ -16,40 +16,13 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate arena;\n+#![deny(rust_2018_idioms)]\n+\n pub extern crate getopts;\n-extern crate graphviz;\n-extern crate env_logger;\n #[cfg(unix)]\n extern crate libc;\n-extern crate rustc_rayon as rayon;\n-extern crate rustc;\n-extern crate rustc_allocator;\n-extern crate rustc_target;\n-extern crate rustc_borrowck;\n-extern crate rustc_data_structures;\n-extern crate rustc_errors as errors;\n-extern crate rustc_passes;\n-extern crate rustc_lint;\n-extern crate rustc_plugin;\n-extern crate rustc_privacy;\n-extern crate rustc_incremental;\n-extern crate rustc_metadata;\n-extern crate rustc_mir;\n-extern crate rustc_resolve;\n-extern crate rustc_save_analysis;\n-extern crate rustc_traits;\n-extern crate rustc_codegen_utils;\n-extern crate rustc_typeck;\n-extern crate rustc_interface;\n-extern crate scoped_tls;\n-extern crate serialize;\n-extern crate smallvec;\n #[macro_use]\n extern crate log;\n-extern crate syntax;\n-extern crate syntax_ext;\n-extern crate syntax_pos;\n \n use pretty::{PpMode, UserIdentifiedItem};\n "}, {"sha": "5cefc35607db07f9155b7979549152658ca5ce7c", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/24a0caec832d774ede930597692b291286176802/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0caec832d774ede930597692b291286176802/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=24a0caec832d774ede930597692b291286176802", "patch": "@@ -35,9 +35,9 @@ pub use self::UserIdentifiedItem::*;\n pub use self::PpSourceMode::*;\n pub use self::PpMode::*;\n use self::NodesMatchingUII::*;\n-use abort_on_err;\n+use crate::abort_on_err;\n \n-use source_name;\n+use crate::source_name;\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n@@ -191,7 +191,7 @@ impl PpSourceMode {\n         tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         f: F\n     ) -> A\n-        where F: FnOnce(&dyn HirPrinterSupport, &hir::Crate) -> A\n+        where F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate) -> A\n     {\n         match *self {\n             PpmNormal => {\n@@ -296,7 +296,7 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n \n impl<'hir> pprust::PpAnn for NoAnn<'hir> {}\n impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n-    fn nested(&self, state: &mut pprust_hir::State, nested: pprust_hir::Nested)\n+    fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested)\n               -> io::Result<()> {\n         if let Some(tcx) = self.tcx {\n             pprust_hir::PpAnn::nested(tcx.hir(), state, nested)\n@@ -322,13 +322,13 @@ impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> pprust::PpAnn for IdentifiedAnnotation<'hir> {\n-    fn pre(&self, s: &mut pprust::State, node: pprust::AnnNode) -> io::Result<()> {\n+    fn pre(&self, s: &mut pprust::State<'_>, node: pprust::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust::AnnNode::Expr(_) => s.popen(),\n             _ => Ok(()),\n         }\n     }\n-    fn post(&self, s: &mut pprust::State, node: pprust::AnnNode) -> io::Result<()> {\n+    fn post(&self, s: &mut pprust::State<'_>, node: pprust::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust::AnnNode::Ident(_) |\n             pprust::AnnNode::Name(_) => Ok(()),\n@@ -373,21 +373,21 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n-    fn nested(&self, state: &mut pprust_hir::State, nested: pprust_hir::Nested)\n+    fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested)\n               -> io::Result<()> {\n         if let Some(ref tcx) = self.tcx {\n             pprust_hir::PpAnn::nested(tcx.hir(), state, nested)\n         } else {\n             Ok(())\n         }\n     }\n-    fn pre(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n+    fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust_hir::AnnNode::Expr(_) => s.popen(),\n             _ => Ok(()),\n         }\n     }\n-    fn post(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n+    fn post(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust_hir::AnnNode::Name(_) => Ok(()),\n             pprust_hir::AnnNode::Item(item) => {\n@@ -434,7 +434,7 @@ impl<'a> PrinterSupport for HygieneAnnotation<'a> {\n }\n \n impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n-    fn post(&self, s: &mut pprust::State, node: pprust::AnnNode) -> io::Result<()> {\n+    fn post(&self, s: &mut pprust::State<'_>, node: pprust::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust::AnnNode::Ident(&ast::Ident { name, span }) => {\n                 s.s.space()?;\n@@ -476,7 +476,7 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n }\n \n impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n-    fn nested(&self, state: &mut pprust_hir::State, nested: pprust_hir::Nested)\n+    fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested)\n               -> io::Result<()> {\n         let old_tables = self.tables.get();\n         if let pprust_hir::Nested::Body(id) = nested {\n@@ -486,13 +486,13 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n         self.tables.set(old_tables);\n         Ok(())\n     }\n-    fn pre(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n+    fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust_hir::AnnNode::Expr(_) => s.popen(),\n             _ => Ok(()),\n         }\n     }\n-    fn post(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n+    fn post(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) -> io::Result<()> {\n         match node {\n             pprust_hir::AnnNode::Expr(expr) => {\n                 s.s.space()?;\n@@ -580,7 +580,11 @@ impl UserIdentifiedItem {\n         }\n     }\n \n-    fn to_one_node_id(self, user_option: &str, sess: &Session, map: &hir_map::Map) -> ast::NodeId {\n+    fn to_one_node_id(self,\n+                      user_option: &str,\n+                      sess: &Session,\n+                      map: &hir_map::Map<'_>)\n+                      -> ast::NodeId {\n         let fail_because = |is_wrong_because| -> ast::NodeId {\n             let message = format!(\"{} needs NodeId (int) or unique path suffix (b::c::d); got \\\n                                    {}, which {}\","}]}