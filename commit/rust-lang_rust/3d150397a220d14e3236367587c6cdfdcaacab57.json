{"sha": "3d150397a220d14e3236367587c6cdfdcaacab57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTUwMzk3YTIyMGQxNGUzMjM2MzY3NTg3YzZjZGZkY2FhY2FiNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-20T22:50:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-20T22:50:34Z"}, "message": "Auto merge of #30470 - petrochenkov:owned5, r=nrc\n\ncc https://github.com/rust-lang/rust/pull/30095\n\nr? @nrc", "tree": {"sha": "a2049b59fdad021284431e4f5df4d2db8fdd8b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2049b59fdad021284431e4f5df4d2db8fdd8b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d150397a220d14e3236367587c6cdfdcaacab57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d150397a220d14e3236367587c6cdfdcaacab57", "html_url": "https://github.com/rust-lang/rust/commit/3d150397a220d14e3236367587c6cdfdcaacab57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d150397a220d14e3236367587c6cdfdcaacab57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c997ea5e5e490e93021619c64df411f8f7c711", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c997ea5e5e490e93021619c64df411f8f7c711", "html_url": "https://github.com/rust-lang/rust/commit/19c997ea5e5e490e93021619c64df411f8f7c711"}, {"sha": "e3da2a90033d233bf6d77e3c725880c12cfc8728", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3da2a90033d233bf6d77e3c725880c12cfc8728", "html_url": "https://github.com/rust-lang/rust/commit/e3da2a90033d233bf6d77e3c725880c12cfc8728"}], "stats": {"total": 103, "additions": 69, "deletions": 34}, "files": [{"sha": "181e0c0fbc86b895e521de0b8d3633d2d41993c8", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -1137,11 +1137,11 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n     }\n \n     fn rebuild_ty_params(&self,\n-                         ty_params: P<[hir::TyParam]>,\n+                         ty_params: hir::HirVec<hir::TyParam>,\n                          lifetime: hir::Lifetime,\n                          region_names: &HashSet<ast::Name>)\n-                         -> P<[hir::TyParam]> {\n-        ty_params.map(|ty_param| {\n+                         -> hir::HirVec<hir::TyParam> {\n+        ty_params.iter().map(|ty_param| {\n             let bounds = self.rebuild_ty_param_bounds(ty_param.bounds.clone(),\n                                                       lifetime,\n                                                       region_names);\n@@ -1152,15 +1152,15 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                 default: ty_param.default.clone(),\n                 span: ty_param.span,\n             }\n-        })\n+        }).collect()\n     }\n \n     fn rebuild_ty_param_bounds(&self,\n                                ty_param_bounds: hir::TyParamBounds,\n                                lifetime: hir::Lifetime,\n                                region_names: &HashSet<ast::Name>)\n                                -> hir::TyParamBounds {\n-        ty_param_bounds.map(|tpb| {\n+        ty_param_bounds.iter().map(|tpb| {\n             match tpb {\n                 &hir::RegionTyParamBound(lt) => {\n                     // FIXME -- it's unclear whether I'm supposed to\n@@ -1196,7 +1196,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     }, modifier)\n                 }\n             }\n-        })\n+        }).collect()\n     }\n \n     fn rebuild_expl_self(&self,\n@@ -1232,7 +1232,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         add: &Vec<hir::Lifetime>,\n                         keep: &HashSet<ast::Name>,\n                         remove: &HashSet<ast::Name>,\n-                        ty_params: P<[hir::TyParam]>,\n+                        ty_params: hir::HirVec<hir::TyParam>,\n                         where_clause: hir::WhereClause)\n                         -> hir::Generics {\n         let mut lifetimes = Vec::new();\n@@ -1482,10 +1482,10 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                let new_types = data.types.map(|t| {\n+                let new_types = data.types.iter().map(|t| {\n                     self.rebuild_arg_ty_or_output(&**t, lifetime, anon_nums, region_names)\n-                });\n-                let new_bindings = data.bindings.map(|b| {\n+                }).collect();\n+                let new_bindings = data.bindings.iter().map(|b| {\n                     hir::TypeBinding {\n                         id: b.id,\n                         name: b.name,\n@@ -1495,7 +1495,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                                                           region_names),\n                         span: b.span\n                     }\n-                });\n+                }).collect();\n                 hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n                     lifetimes: new_lts.into(),\n                     types: new_types,"}, {"sha": "e456b1eadf5d7460dc2d18c5d97a15a5f8493e85", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -210,7 +210,7 @@ pub trait Folder : Sized {\n         noop_fold_ty_param(tp, self)\n     }\n \n-    fn fold_ty_params(&mut self, tps: P<[TyParam]>) -> P<[TyParam]> {\n+    fn fold_ty_params(&mut self, tps: HirVec<TyParam>) -> HirVec<TyParam> {\n         noop_fold_ty_params(tps, self)\n     }\n \n@@ -575,9 +575,9 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n     }\n }\n \n-pub fn noop_fold_ty_params<T: Folder>(tps: P<[TyParam]>,\n+pub fn noop_fold_ty_params<T: Folder>(tps: HirVec<TyParam>,\n                                       fld: &mut T)\n-                                      -> P<[TyParam]> {\n+                                      -> HirVec<TyParam> {\n     tps.move_map(|tp| fld.fold_ty_param(tp))\n }\n "}, {"sha": "2625e34c820e40f339e3bf47d878f05a9b3afb29", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -56,7 +56,7 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n /// It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar\n /// behavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead\n /// of `Vec` to avoid keeping extra capacity.\n-pub type HirVec<T> = Vec<T>;\n+pub type HirVec<T> = P<[T]>;\n \n macro_rules! hir_vec {\n     ($elem:expr; $n:expr) => (\n@@ -208,8 +208,8 @@ impl PathParameters {\n     pub fn none() -> PathParameters {\n         AngleBracketedParameters(AngleBracketedParameterData {\n             lifetimes: HirVec::new(),\n-            types: P::empty(),\n-            bindings: P::empty(),\n+            types: HirVec::new(),\n+            bindings: HirVec::new(),\n         })\n     }\n \n@@ -282,10 +282,10 @@ pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: HirVec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n-    pub types: P<[P<Ty>]>,\n+    pub types: HirVec<P<Ty>>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n-    pub bindings: P<[TypeBinding]>,\n+    pub bindings: HirVec<TypeBinding>,\n }\n \n impl AngleBracketedParameterData {\n@@ -325,7 +325,7 @@ pub enum TraitBoundModifier {\n     Maybe,\n }\n \n-pub type TyParamBounds = P<[TyParamBound]>;\n+pub type TyParamBounds = HirVec<TyParamBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n@@ -341,7 +341,7 @@ pub struct TyParam {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n     pub lifetimes: HirVec<LifetimeDef>,\n-    pub ty_params: P<[TyParam]>,\n+    pub ty_params: HirVec<TyParam>,\n     pub where_clause: WhereClause,\n }\n "}, {"sha": "afd834a61d6cebcec7c4695f23d1f69528aafa5a", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -434,7 +434,7 @@ pub fn lower_ty_param(lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n \n pub fn lower_ty_params(lctx: &LoweringContext,\n                        tps: &P<[TyParam]>)\n-                       -> P<[hir::TyParam]> {\n+                       -> hir::HirVec<hir::TyParam> {\n     tps.iter().map(|tp| lower_ty_param(lctx, tp)).collect()\n }\n \n@@ -1776,19 +1776,19 @@ fn path_ident(span: Span, id: hir::Ident) -> hir::Path {\n }\n \n fn path(span: Span, strs: Vec<hir::Ident>) -> hir::Path {\n-    path_all(span, false, strs, hir::HirVec::new(), Vec::new(), Vec::new())\n+    path_all(span, false, strs, hir::HirVec::new(), hir::HirVec::new(), hir::HirVec::new())\n }\n \n fn path_global(span: Span, strs: Vec<hir::Ident>) -> hir::Path {\n-    path_all(span, true, strs, hir::HirVec::new(), Vec::new(), Vec::new())\n+    path_all(span, true, strs, hir::HirVec::new(), hir::HirVec::new(), hir::HirVec::new())\n }\n \n fn path_all(sp: Span,\n             global: bool,\n             mut idents: Vec<hir::Ident>,\n             lifetimes: hir::HirVec<hir::Lifetime>,\n-            types: Vec<P<hir::Ty>>,\n-            bindings: Vec<hir::TypeBinding>)\n+            types: hir::HirVec<P<hir::Ty>>,\n+            bindings: hir::HirVec<hir::TypeBinding>)\n             -> hir::Path {\n     let last_identifier = idents.pop().unwrap();\n     let mut segments: Vec<hir::PathSegment> = idents.into_iter()\n@@ -1803,8 +1803,8 @@ fn path_all(sp: Span,\n         identifier: last_identifier,\n         parameters: hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n             lifetimes: lifetimes,\n-            types: P::from_vec(types),\n-            bindings: P::from_vec(bindings),\n+            types: types,\n+            bindings: bindings,\n         }),\n     });\n     hir::Path {"}, {"sha": "c5ce76c1b6e69c20d055f82fed7a67dbbc7204b0", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -519,7 +519,7 @@ impl<'a> State<'a> {\n             hir::TyBareFn(ref f) => {\n                 let generics = hir::Generics {\n                     lifetimes: f.lifetimes.clone(),\n-                    ty_params: P::empty(),\n+                    ty_params: hir::HirVec::new(),\n                     where_clause: hir::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: hir::HirVec::new(),\n@@ -2263,7 +2263,7 @@ impl<'a> State<'a> {\n         }\n         let generics = hir::Generics {\n             lifetimes: hir::HirVec::new(),\n-            ty_params: P::empty(),\n+            ty_params: hir::HirVec::new(),\n             where_clause: hir::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: hir::HirVec::new(),"}, {"sha": "57ffefd3be4354134a4e46f8e58a52771d41bb52", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -335,7 +335,7 @@ pub fn is_path(e: P<Expr>) -> bool {\n pub fn empty_generics() -> Generics {\n     Generics {\n         lifetimes: HirVec::new(),\n-        ty_params: P::empty(),\n+        ty_params: HirVec::new(),\n         where_clause: WhereClause {\n             id: DUMMY_NODE_ID,\n             predicates: HirVec::new(),\n@@ -353,8 +353,8 @@ pub fn ident_to_path(s: Span, ident: Ident) -> Path {\n             identifier: ident,\n             parameters: hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n                 lifetimes: HirVec::new(),\n-                types: P::empty(),\n-                bindings: P::empty(),\n+                types: HirVec::new(),\n+                bindings: HirVec::new(),\n             }),\n         }],\n     }"}, {"sha": "24fcc2f4fcd56a6eac016b554ff81be6dc5d7914", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -61,3 +61,13 @@ impl<'a,'tcx:'a,T,U> ToRef for &'tcx Vec<T>\n         self.iter().map(|expr| expr.to_ref()).collect()\n     }\n }\n+\n+impl<'a,'tcx:'a,T,U> ToRef for &'tcx P<[T]>\n+    where &'tcx T: ToRef<Output=U>\n+{\n+    type Output = Vec<U>;\n+\n+    fn to_ref(self) -> Vec<U> {\n+        self.iter().map(|expr| expr.to_ref()).collect()\n+    }\n+}"}, {"sha": "e8eb479a1c36fd618ae90cada3b07bf61dfd5378", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -4903,7 +4903,7 @@ pub fn may_break(cx: &ty::ctxt, id: ast::NodeId, b: &hir::Block) -> bool {\n }\n \n pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                       tps: &P<[hir::TyParam]>,\n+                                       tps: &[hir::TyParam],\n                                        ty: Ty<'tcx>) {\n     debug!(\"check_bounds_are_used(n_tps={}, ty={:?})\",\n            tps.len(),  ty);"}, {"sha": "0504c313c91d66f019f4334fcde74979482db1a7", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d150397a220d14e3236367587c6cdfdcaacab57/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=3d150397a220d14e3236367587c6cdfdcaacab57", "patch": "@@ -130,6 +130,10 @@ impl<T:fmt::Debug> fmt::Debug for P<[T]> {\n }\n \n impl<T> P<[T]> {\n+    pub fn new() -> P<[T]> {\n+        P::empty()\n+    }\n+\n     pub fn empty() -> P<[T]> {\n         P { ptr: Default::default() }\n     }\n@@ -177,12 +181,33 @@ impl<T: Clone> Clone for P<[T]> {\n     }\n }\n \n+impl<T> From<Vec<T>> for P<[T]> {\n+    fn from(v: Vec<T>) -> Self {\n+        P::from_vec(v)\n+    }\n+}\n+\n+impl<T> Into<Vec<T>> for P<[T]> {\n+    fn into(self) -> Vec<T> {\n+        self.into_vec()\n+    }\n+}\n+\n impl<T> FromIterator<T> for P<[T]> {\n     fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> P<[T]> {\n         P::from_vec(iter.into_iter().collect())\n     }\n }\n \n+impl<T> IntoIterator for P<[T]> {\n+    type Item = T;\n+    type IntoIter = vec::IntoIter<T>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.into_vec().into_iter()\n+    }\n+}\n+\n impl<'a, T> IntoIterator for &'a P<[T]> {\n     type Item = &'a T;\n     type IntoIter = slice::Iter<'a, T>;"}]}