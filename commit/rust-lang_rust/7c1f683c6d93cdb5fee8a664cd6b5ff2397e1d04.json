{"sha": "7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMWY2ODNjNmQ5M2NkYjVmZWU4YTY2NGNkNmI1ZmYyMzk3ZTFkMDQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T09:23:55Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T16:40:05Z"}, "message": "Fix bug in method type parameter passing\n\nIt would occasionally pass the wrong type parameter, when calling\na generic method from a generic impl on a bounded param type.", "tree": {"sha": "3b4781492ff8cb0458738f51ec9e601b5dee0d54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4781492ff8cb0458738f51ec9e601b5dee0d54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "html_url": "https://github.com/rust-lang/rust/commit/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295df68faf1e881d7fda09406f47bb99ef7f4d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/295df68faf1e881d7fda09406f47bb99ef7f4d43", "html_url": "https://github.com/rust-lang/rust/commit/295df68faf1e881d7fda09406f47bb99ef7f4d43"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "6db94fba367e7dfac45a360b3a509087d44e391c", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "patch": "@@ -55,7 +55,8 @@ fn trans_dict_callee(bcx: @block_ctxt, e: @ast::expr, base: @ast::expr,\n     let generic = none;\n     if vec::len(*method.tps) > 0u {\n         let tydescs = [], tis = [];\n-        for t in ty::node_id_to_type_params(tcx, e.id) {\n+        let tptys = ty::node_id_to_type_params(tcx, e.id);\n+        for t in vec::tail_n(tptys, vec::len(tptys) - vec::len(*method.tps)) {\n             // TODO: Doesn't always escape.\n             let ti = none;\n             let td = get_tydesc(bcx, t, true, tps_normal, ti).result;"}, {"sha": "d75b04d078723e372163eac426659b9cc788ea67", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "patch": "@@ -1037,16 +1037,16 @@ mod writeback {\n             };\n         let new_substs_opt;\n         alt tpot.substs {\n-          none::<[ty::t]>. { new_substs_opt = none::<[ty::t]>; }\n-          some::<[ty::t]>(substs) {\n+          none. { new_substs_opt = none; }\n+          some(substs) {\n             let new_substs: [ty::t] = [];\n             for subst: ty::t in substs {\n                 alt resolve_type_vars_in_type(fcx, sp, subst) {\n                   some(t) { new_substs += [t]; }\n                   none. { wbcx.success = false; ret; }\n                 }\n             }\n-            new_substs_opt = some::<[ty::t]>(new_substs);\n+            new_substs_opt = some(new_substs);\n           }\n         }\n         write::ty(fcx.ccx.tcx, id, {substs: new_substs_opt, ty: new_ty});\n@@ -1568,7 +1568,6 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n                 }\n                 bound_n += 1u;\n               }\n-              _ {}\n             }\n         }\n         ret none;"}, {"sha": "11dcce00d4cfe29f09cccb9fc6273a0ef5f505d2", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "patch": "@@ -195,6 +195,16 @@ fn tail<T: copy>(v: [const T]) : is_not_empty(v) -> [T] {\n     ret slice(v, 1u, len(v));\n }\n \n+/*\n+Function tail_n\n+\n+Returns all but the first N elements of a vector\n+*/\n+\n+fn tail_n<T: copy>(v: [const T], n: uint) -> [T] {\n+    slice(v, n, len(v))\n+}\n+\n // FIXME: This name is sort of confusing next to init_fn, etc\n // but this is the name haskell uses for this function,\n // along with head/tail/last."}, {"sha": "4ac80490b78d15350bde4ad43f0fecd76dd2ee43", "filename": "src/test/run-pass/iface-generic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-generic.rs?ref=7c1f683c6d93cdb5fee8a664cd6b5ff2397e1d04", "patch": "@@ -9,6 +9,9 @@ impl of to_str for int {\n impl of to_str for str {\n     fn to_str() -> str { self }\n }\n+impl of to_str for () {\n+    fn to_str() -> str { \"()\" }\n+}\n \n iface map<T> {\n     fn map<U>(f: block(T) -> U) -> [U];\n@@ -32,4 +35,5 @@ fn main() {\n     assert foo([1]) == [\"hi\"];\n     assert bar::<int, [int]>([4, 5]) == [\"4\", \"5\"];\n     assert bar::<str, [str]>([\"x\", \"y\"]) == [\"x\", \"y\"];\n+    assert bar::<(), [()]>([()]) == [\"()\"];\n }"}]}