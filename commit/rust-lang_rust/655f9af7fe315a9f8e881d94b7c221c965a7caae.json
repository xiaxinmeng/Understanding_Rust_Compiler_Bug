{"sha": "655f9af7fe315a9f8e881d94b7c221c965a7caae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NWY5YWY3ZmUzMTVhOWY4ZTg4MWQ5NGI3YzIyMWM5NjVhN2NhYWU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-06T15:28:50Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-06T20:18:22Z"}, "message": "Add flag to enable communication", "tree": {"sha": "14ffb44c9a27c73803b394aaf089950865edcf8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ffb44c9a27c73803b394aaf089950865edcf8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655f9af7fe315a9f8e881d94b7c221c965a7caae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655f9af7fe315a9f8e881d94b7c221c965a7caae", "html_url": "https://github.com/rust-lang/rust/commit/655f9af7fe315a9f8e881d94b7c221c965a7caae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655f9af7fe315a9f8e881d94b7c221c965a7caae/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5ecec68b64c08cf7bafbae594ee97938eb4dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5ecec68b64c08cf7bafbae594ee97938eb4dd1", "html_url": "https://github.com/rust-lang/rust/commit/da5ecec68b64c08cf7bafbae594ee97938eb4dd1"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "003c93f7464d7257a69a78269c650bc82aed14fe", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/655f9af7fe315a9f8e881d94b7c221c965a7caae/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655f9af7fe315a9f8e881d94b7c221c965a7caae/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=655f9af7fe315a9f8e881d94b7c221c965a7caae", "patch": "@@ -25,7 +25,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n             );\n \n             self.bencher.iter(|| {\n-                let config = miri::MiriConfig { validate: true, args: vec![], seed: None };\n+                let config = miri::MiriConfig { validate: true, communicate: false, args: vec![], seed: None };\n                 eval_main(tcx, entry_def_id, config);\n             });\n         });"}, {"sha": "a1bc53f69b80050809022a1a30f368f1d3789ee6", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/655f9af7fe315a9f8e881d94b7c221c965a7caae/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655f9af7fe315a9f8e881d94b7c221c965a7caae/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=655f9af7fe315a9f8e881d94b7c221c965a7caae", "patch": "@@ -48,7 +48,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n                             if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {\n-                                let config = MiriConfig { validate: true, args: vec![], seed: None };\n+                                let config = MiriConfig { validate: true, communicate: false, args: vec![], seed: None };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                                 miri::eval_main(self.0, did, config);\n@@ -61,7 +61,8 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 }\n                 tcx.hir().krate().visit_all_item_likes(&mut Visitor(tcx));\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-                let config = MiriConfig { validate: true, args: vec![], seed: None };\n+\n+                let config = MiriConfig { validate: true, communicate: false, args: vec![], seed: None };\n                 miri::eval_main(tcx, entry_def_id, config);\n \n                 compiler.session().abort_if_errors();"}, {"sha": "875afd42af441b15be0d3ab1a051d951e91bfb1a", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/655f9af7fe315a9f8e881d94b7c221c965a7caae/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655f9af7fe315a9f8e881d94b7c221c965a7caae/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=655f9af7fe315a9f8e881d94b7c221c965a7caae", "patch": "@@ -130,6 +130,7 @@ fn main() {\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n+    let mut communicate = false;\n     let mut seed: Option<u64> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n@@ -147,6 +148,9 @@ fn main() {\n                 \"-Zmiri-disable-validation\" => {\n                     validate = false;\n                 },\n+                \"-Zmiri-enable-communication\" => {\n+                    communicate = true;\n+                },\n                 \"--\" => {\n                     after_dashdash = true;\n                 }\n@@ -196,7 +200,7 @@ fn main() {\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n     debug!(\"miri arguments: {:?}\", miri_args);\n-    let miri_config = miri::MiriConfig { validate, args: miri_args, seed };\n+    let miri_config = miri::MiriConfig { validate, communicate, args: miri_args, seed };\n     let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n         rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n     }).and_then(|result| result);"}, {"sha": "681bad01d23cc23d53b4cb625c6433ad12bad992", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/655f9af7fe315a9f8e881d94b7c221c965a7caae/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655f9af7fe315a9f8e881d94b7c221c965a7caae/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=655f9af7fe315a9f8e881d94b7c221c965a7caae", "patch": "@@ -18,10 +18,11 @@ use crate::{\n #[derive(Clone)]\n pub struct MiriConfig {\n     pub validate: bool,\n+    pub communicate: bool,\n     pub args: Vec<String>,\n \n     // The seed to use when non-determinism is required (e.g. getrandom())\n-    pub seed: Option<u64>\n+    pub seed: Option<u64>,\n }\n \n // Used by priroda.\n@@ -158,7 +159,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             cur_ptr = cur_ptr.offset(char_size, tcx)?;\n         }\n     }\n- \n+\n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n     Ok(ecx)"}]}