{"sha": "9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTRlOTYyZTFmZTdhNGMxZDYwM2QxNTQ5ODAwZDEwNWNhNTk0MWY=", "commit": {"author": {"name": "angelsl", "email": "hidingfromhidden@gmail.com", "date": "2015-10-23T16:31:12Z"}, "committer": {"name": "angelsl", "email": "hidingfromhidden@gmail.com", "date": "2015-11-04T03:43:41Z"}, "message": "Build compiler-rt/builtins with MSVC", "tree": {"sha": "772983369c2c487302e96d74c286cc18df18cef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/772983369c2c487302e96d74c286cc18df18cef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "html_url": "https://github.com/rust-lang/rust/commit/9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/comments", "author": {"login": "angelsl", "id": 235432, "node_id": "MDQ6VXNlcjIzNTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/235432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angelsl", "html_url": "https://github.com/angelsl", "followers_url": "https://api.github.com/users/angelsl/followers", "following_url": "https://api.github.com/users/angelsl/following{/other_user}", "gists_url": "https://api.github.com/users/angelsl/gists{/gist_id}", "starred_url": "https://api.github.com/users/angelsl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angelsl/subscriptions", "organizations_url": "https://api.github.com/users/angelsl/orgs", "repos_url": "https://api.github.com/users/angelsl/repos", "events_url": "https://api.github.com/users/angelsl/events{/privacy}", "received_events_url": "https://api.github.com/users/angelsl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "angelsl", "id": 235432, "node_id": "MDQ6VXNlcjIzNTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/235432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angelsl", "html_url": "https://github.com/angelsl", "followers_url": "https://api.github.com/users/angelsl/followers", "following_url": "https://api.github.com/users/angelsl/following{/other_user}", "gists_url": "https://api.github.com/users/angelsl/gists{/gist_id}", "starred_url": "https://api.github.com/users/angelsl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angelsl/subscriptions", "organizations_url": "https://api.github.com/users/angelsl/orgs", "repos_url": "https://api.github.com/users/angelsl/repos", "events_url": "https://api.github.com/users/angelsl/events{/privacy}", "received_events_url": "https://api.github.com/users/angelsl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d85b4f2fb0756c67fe92734403bef2d169a08f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d85b4f2fb0756c67fe92734403bef2d169a08f", "html_url": "https://github.com/rust-lang/rust/commit/54d85b4f2fb0756c67fe92734403bef2d169a08f"}], "stats": {"total": 123, "additions": 89, "deletions": 34}, "files": [{"sha": "8caf6abed781bfca5dbcca56c5edc5d86b55e774", "filename": "configure", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/configure", "raw_url": "https://github.com/rust-lang/rust/raw/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "patch": "@@ -1498,25 +1498,9 @@ do\n         done\n     fi\n \n-    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n+    # We need the generator later on for compiler-rt even if LLVM's not built\n+    if [ ${is_msvc} -ne 0 ]\n     then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n-        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-        fi\n-        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-        then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-        fi\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n         case \"$CFG_MSVC_ROOT\" in\n             *14.0*)\n                 generator=\"Visual Studio 14 2015\"\n@@ -1538,8 +1522,32 @@ do\n                 err \"can only build LLVM for x86 platforms\"\n                 ;;\n         esac\n+        CFG_CMAKE_GENERATOR=$generator\n+        putvar CFG_CMAKE_GENERATOR\n+    fi\n+\n+    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n+    then\n+        msg \"configuring LLVM for $t with cmake\"\n+\n+        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n+        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n+        fi\n+        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n+        then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n+        fi\n+\n+        msg \"configuring LLVM with:\"\n+        msg \"$CMAKE_ARGS\"\n+\n         (cd $LLVM_BUILD_DIR && \"$CFG_CMAKE\" $CFG_LLVM_SRC_DIR \\\n-                                            -G \"$generator\" \\\n+                                            -G \"$CFG_CMAKE_GENERATOR\" \\\n                                             $CMAKE_ARGS)\n         need_ok \"LLVM cmake configure failed\"\n     fi"}, {"sha": "d8b5aeccdcd444559c883f7aaac4494c6659cfaf", "filename": "mk/rt.mk", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "patch": "@@ -216,22 +216,31 @@ COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-# Note that on MSVC-targeting builds we hardwire CC/AR to gcc/ar even though\n-# we're targeting MSVC. This is because although compiler-rt has a CMake build\n-# config I can't actually figure out how to use it, so I'm not sure how to use\n-# cl.exe to build the objects. Additionally, the compiler-rt library when built\n-# with gcc has the same ABI as cl.exe, so they're largely compatible\n-COMPRT_CC_$(1) := $$(CC_$(1))\n-COMPRT_AR_$(1) := $$(AR_$(1))\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1))\n ifeq ($$(findstring msvc,$(1)),msvc)\n-COMPRT_CC_$(1) := gcc\n-COMPRT_AR_$(1) := ar\n-ifeq ($$(findstring i686,$(1)),i686)\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m32\n+$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n+\t@$$(call E, cmake: compiler-rt)\n+\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; $$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n+\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n+\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$(1)) \\\n+\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n+\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n+\t\t--target lib/builtins/builtins \\\n+\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n+\t\t-- //v:m //nologo\n+\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/lib/windows/$$(LLVM_BUILD_CONFIG_MODE)/clang_rt.builtins-$$(HOST_$(1)).lib $$@\n else\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m64\n-endif\n+COMPRT_CC_$(1) := $$(CC_$(1))\n+COMPRT_AR_$(1) := $$(AR_$(1))\n+# We chomp -Werror here because GCC warns about the type signature of\n+# builtins not matching its own and the build fails. It's a bit hacky,\n+# but what can we do, we're building libclang-rt using GCC ......\n+COMPRT_CFLAGS_$(1) := $$(subst -Werror,,$$(CFG_GCCISH_CFLAGS_$(1))) -std=c99\n+\n+# FreeBSD Clang's packaging is problematic; it doesn't copy unwind.h to\n+# the standard include directory. This should really be in our changes to\n+# compiler-rt, but we override the CFLAGS here so there isn't much choice\n+ifeq ($$(findstring freebsd,$(1)),freebsd)\n+\tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n endif\n \n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n@@ -246,7 +255,7 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tTargetTriple=$(1) \\\n \t\ttriple-builtins\n \t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n-\n+endif\n ################################################################################\n # libbacktrace\n #"}, {"sha": "4ec54f73e67a5927ae02447ecbdec1ec201315b5", "filename": "src/test/run-make/compiler-rt-works-on-mingw/Makefile", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2FMakefile?ref=9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "patch": "@@ -0,0 +1,17 @@\n+-include ../tools.mk\n+\n+ifneq (,$(findstring MINGW,$(UNAME)))\n+ifndef IS_MSVC\n+all:\n+\tg++ foo.cpp -c -o $(TMPDIR)/foo.o\n+\tar crus $(TMPDIR)/libfoo.a $(TMPDIR)/foo.o\n+\t$(RUSTC) foo.rs -lfoo -lstdc++\n+\t$(call RUN,foo)\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif"}, {"sha": "aac3ba42201012ae80ce26bed0da01813c1a9e05", "filename": "src/test/run-make/compiler-rt-works-on-mingw/foo.cpp", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp?ref=9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "patch": "@@ -0,0 +1,5 @@\n+// ignore-license\n+extern \"C\" void foo() {\n+    int *a = new int(3);\n+    delete a;\n+}"}, {"sha": "293f9d582945e175c32b52e263b967a46a357bc5", "filename": "src/test/run-make/compiler-rt-works-on-mingw/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe4e962e1fe7a4c1d603d1549800d105ca5941f/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2Ffoo.rs?ref=9fe4e962e1fe7a4c1d603d1549800d105ca5941f", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern { fn foo(); }\n+\n+pub fn main() {\n+    unsafe { foo(); }\n+    assert_eq!(7f32.powi(3), 343f32);\n+}"}]}