{"sha": "59f108885ed38c7f7049a1830b7c50205989cb17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjEwODg4NWVkMzhjN2Y3MDQ5YTE4MzBiN2M1MDIwNTk4OWNiMTc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-26T21:05:06Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-26T21:05:06Z"}, "message": "Improve formatting of hash collections docs", "tree": {"sha": "f92abea6fb732937a3a8abae4d6900d692be234a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92abea6fb732937a3a8abae4d6900d692be234a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f108885ed38c7f7049a1830b7c50205989cb17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f108885ed38c7f7049a1830b7c50205989cb17", "html_url": "https://github.com/rust-lang/rust/commit/59f108885ed38c7f7049a1830b7c50205989cb17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f108885ed38c7f7049a1830b7c50205989cb17/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8a54af60df63034e41359acfc923e5c5769a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8a54af60df63034e41359acfc923e5c5769a91", "html_url": "https://github.com/rust-lang/rust/commit/2e8a54af60df63034e41359acfc923e5c5769a91"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "d1244c2ca538c8b633b2098ac586b2b75e1f2173", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59f108885ed38c7f7049a1830b7c50205989cb17/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f108885ed38c7f7049a1830b7c50205989cb17/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=59f108885ed38c7f7049a1830b7c50205989cb17", "patch": "@@ -606,7 +606,7 @@ where\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n+    /// in the given `HashMap<K, V>`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n     ///\n     /// # Errors\n@@ -619,6 +619,7 @@ where\n     /// ```\n     /// #![feature(try_reserve)]\n     /// use std::collections::HashMap;\n+    ///\n     /// let mut map: HashMap<&str, isize> = HashMap::new();\n     /// map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n     /// ```\n@@ -898,14 +899,14 @@ where\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```"}, {"sha": "3299fd12e024e97e8f60f0d9cd13650e8f80eedc", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f108885ed38c7f7049a1830b7c50205989cb17/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f108885ed38c7f7049a1830b7c50205989cb17/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=59f108885ed38c7f7049a1830b7c50205989cb17", "patch": "@@ -412,7 +412,7 @@ where\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n+    /// in the given `HashSet<K, V>`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n     ///\n     /// # Errors\n@@ -918,7 +918,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     ///\n-    /// let xs = [1,2,3,4,5,6];\n+    /// let xs = [1, 2, 3, 4, 5, 6];\n     /// let mut set: HashSet<i32> = xs.iter().cloned().collect();\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);"}]}