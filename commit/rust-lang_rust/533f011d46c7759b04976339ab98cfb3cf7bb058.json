{"sha": "533f011d46c7759b04976339ab98cfb3cf7bb058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzM2YwMTFkNDZjNzc1OWIwNDk3NjMzOWFiOThjZmIzY2Y3YmIwNTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-06T13:08:53Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-06T13:28:35Z"}, "message": "Regression test for issue #58158.", "tree": {"sha": "48214db6d3e811bc60983e98318153d0ad747fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48214db6d3e811bc60983e98318153d0ad747fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533f011d46c7759b04976339ab98cfb3cf7bb058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533f011d46c7759b04976339ab98cfb3cf7bb058", "html_url": "https://github.com/rust-lang/rust/commit/533f011d46c7759b04976339ab98cfb3cf7bb058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533f011d46c7759b04976339ab98cfb3cf7bb058/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2482fd36ac144b5dac106026b90d112d4707d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2482fd36ac144b5dac106026b90d112d4707d79", "html_url": "https://github.com/rust-lang/rust/commit/d2482fd36ac144b5dac106026b90d112d4707d79"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "d0167c8c268cf21502acf627c8df3f15da421f40", "filename": "src/test/ui/wf/wf-packed-on-proj-of-type-as-unimpl-trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/533f011d46c7759b04976339ab98cfb3cf7bb058/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533f011d46c7759b04976339ab98cfb3cf7bb058/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs?ref=533f011d46c7759b04976339ab98cfb3cf7bb058", "patch": "@@ -0,0 +1,31 @@\n+// rust-lang/rust#58158: We have special-case code to deal with case\n+// when a type is both packed and needs drop glue, (we move the fields\n+// out of their potentially unaligned locations before dropping them,\n+// which requires they be Sized; see PR #44884).\n+//\n+// So, we need to check if a given type needs drop-glue. That requires\n+// that we actually know that the concrete type, and we guard against\n+// the type having unknown parts (i.e. type variables) by ICE'ing in\n+// that scenario.\n+//\n+// But in a case where we have a projection (`Type as Trait::Assoc`)\n+// where `Type` does not actually implement `Trait`, we of course\n+// cannot have a concrete type, because there is no impl to look up\n+// the concrete type for the associated type `Assoc`.\n+//\n+// So, this test is just making sure that in such a case that we do\n+// not immediately ICE, and instead allow the underlying type error to\n+// surface.\n+\n+pub struct Matrix<S>(S);\n+pub struct DefaultAllocator;\n+\n+pub trait Allocator { type Buffer; }\n+\n+// impl Allocator for DefaultAllocator { type Buffer = (); }\n+\n+#[repr(packed)]\n+struct Foo(Matrix<<DefaultAllocator as Allocator>::Buffer>);\n+//~^ ERROR the trait bound `DefaultAllocator: Allocator` is not satisfied\n+\n+fn main() { }"}, {"sha": "e460cdcd3f3e5be1e222ad60fde5835f8e22a195", "filename": "src/test/ui/wf/wf-packed-on-proj-of-type-as-unimpl-trait.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/533f011d46c7759b04976339ab98cfb3cf7bb058/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/533f011d46c7759b04976339ab98cfb3cf7bb058/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr?ref=533f011d46c7759b04976339ab98cfb3cf7bb058", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `DefaultAllocator: Allocator` is not satisfied\n+  --> $DIR/wf-packed-on-proj-of-type-as-unimpl-trait.rs:28:12\n+   |\n+LL | struct Foo(Matrix<<DefaultAllocator as Allocator>::Buffer>);\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Allocator` is not implemented for `DefaultAllocator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}