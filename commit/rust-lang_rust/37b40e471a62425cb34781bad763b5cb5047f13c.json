{"sha": "37b40e471a62425cb34781bad763b5cb5047f13c", "node_id": "C_kwDOAAsO6NoAKDM3YjQwZTQ3MWE2MjQyNWNiMzQ3ODFiYWQ3NjNiNWNiNTA0N2YxM2M", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-10-29T17:13:40Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-01-07T10:38:40Z"}, "message": "fix method substs", "tree": {"sha": "182d6d2b07716ac713d1d5a67a727a6a9e3adc91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/182d6d2b07716ac713d1d5a67a727a6a9e3adc91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b40e471a62425cb34781bad763b5cb5047f13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b40e471a62425cb34781bad763b5cb5047f13c", "html_url": "https://github.com/rust-lang/rust/commit/37b40e471a62425cb34781bad763b5cb5047f13c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b40e471a62425cb34781bad763b5cb5047f13c/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5a45d39240ab3f6410c4808b0840142c657228", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5a45d39240ab3f6410c4808b0840142c657228", "html_url": "https://github.com/rust-lang/rust/commit/be5a45d39240ab3f6410c4808b0840142c657228"}], "stats": {"total": 99, "additions": 53, "deletions": 46}, "files": [{"sha": "e9e43950fb2b6cca92b90323b87a4d7cefd633eb", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/37b40e471a62425cb34781bad763b5cb5047f13c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b40e471a62425cb34781bad763b5cb5047f13c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=37b40e471a62425cb34781bad763b5cb5047f13c", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, Ty, UserType,\n };\n-use rustc_middle::ty::{GenericArgKind, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n+use rustc_middle::ty::{GenericArgKind, SubstsRef, UserSelfTy, UserSubsts};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n@@ -161,47 +161,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {\n         self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));\n         self.write_substs(hir_id, method.substs);\n-\n-        // When the method is confirmed, the `method.substs` includes\n-        // parameters from not just the method, but also the impl of\n-        // the method -- in particular, the `Self` type will be fully\n-        // resolved. However, those are not something that the \"user\n-        // specified\" -- i.e., those types come from the inferred type\n-        // of the receiver, not something the user wrote. So when we\n-        // create the user-substs, we want to replace those earlier\n-        // types with just the types that the user actually wrote --\n-        // that is, those that appear on the *method itself*.\n-        //\n-        // As an example, if the user wrote something like\n-        // `foo.bar::<u32>(...)` -- the `Self` type here will be the\n-        // type of `foo` (possibly adjusted), but we don't want to\n-        // include that. We want just the `[_, u32]` part.\n-        if !method.substs.is_empty() {\n-            let method_generics = self.tcx.generics_of(method.def_id);\n-            if !method_generics.params.is_empty() {\n-                let user_type_annotation = self.probe(|_| {\n-                    let user_substs = UserSubsts {\n-                        substs: InternalSubsts::for_item(self.tcx, method.def_id, |param, _| {\n-                            let i = param.index as usize;\n-                            if i < method_generics.parent_count {\n-                                self.var_for_def(DUMMY_SP, param)\n-                            } else {\n-                                method.substs[i]\n-                            }\n-                        }),\n-                        user_self_ty: None, // not relevant here\n-                    };\n-\n-                    self.canonicalize_user_type_annotation(UserType::TypeOf(\n-                        method.def_id,\n-                        user_substs,\n-                    ))\n-                });\n-\n-                debug!(\"write_method_call: user_type_annotation={:?}\", user_type_annotation);\n-                self.write_user_type_annotation(hir_id, user_type_annotation);\n-            }\n-        }\n     }\n \n     pub fn write_substs(&self, node_id: hir::HirId, substs: SubstsRef<'tcx>) {"}, {"sha": "a2c6e246610b21c391782f20d40593437b5f8272", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37b40e471a62425cb34781bad763b5cb5047f13c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b40e471a62425cb34781bad763b5cb5047f13c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=37b40e471a62425cb34781bad763b5cb5047f13c", "patch": "@@ -12,7 +12,8 @@ use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutabili\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{self, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, Ty};\n-use rustc_span::Span;\n+use rustc_middle::ty::{InternalSubsts, UserSubsts, UserType};\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;\n \n use std::iter;\n@@ -397,6 +398,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 self.cfcx.var_for_def(self.cfcx.span, param)\n             }\n         }\n+\n         let substs = <dyn AstConv<'_>>::create_substs_for_generic_args(\n             self.tcx,\n             pick.item.def_id,\n@@ -406,7 +408,45 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             &arg_count_correct,\n             &mut MethodSubstsCtxt { cfcx: self, pick, seg },\n         );\n-        // FIXME(aliemjay): Type annotation should be registered before normalization.\n+\n+        // When the method is confirmed, the `substs` includes\n+        // parameters from not just the method, but also the impl of\n+        // the method -- in particular, the `Self` type will be fully\n+        // resolved. However, those are not something that the \"user\n+        // specified\" -- i.e., those types come from the inferred type\n+        // of the receiver, not something the user wrote. So when we\n+        // create the user-substs, we want to replace those earlier\n+        // types with just the types that the user actually wrote --\n+        // that is, those that appear on the *method itself*.\n+        //\n+        // As an example, if the user wrote something like\n+        // `foo.bar::<u32>(...)` -- the `Self` type here will be the\n+        // type of `foo` (possibly adjusted), but we don't want to\n+        // include that. We want just the `[_, u32]` part.\n+        if !substs.is_empty() && !generics.params.is_empty() {\n+            let user_type_annotation = self.probe(|_| {\n+                let user_substs = UserSubsts {\n+                    substs: InternalSubsts::for_item(self.tcx, pick.item.def_id, |param, _| {\n+                        let i = param.index as usize;\n+                        if i < generics.parent_count {\n+                            self.fcx.var_for_def(DUMMY_SP, param)\n+                        } else {\n+                            substs[i]\n+                        }\n+                    }),\n+                    user_self_ty: None, // not relevant here\n+                };\n+\n+                self.fcx.canonicalize_user_type_annotation(UserType::TypeOf(\n+                    pick.item.def_id,\n+                    user_substs,\n+                ))\n+            });\n+\n+            debug!(\"instantiate_method_substs: user_type_annotation={:?}\", user_type_annotation);\n+            self.fcx.write_user_type_annotation(self.call_expr.hir_id, user_type_annotation);\n+        }\n+\n         self.normalize(self.span, substs)\n     }\n "}, {"sha": "232b957d51f98753cbf7ddd8a1e9ad59d243f03a", "filename": "src/test/ui/nll/user-annotations/normalization-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b40e471a62425cb34781bad763b5cb5047f13c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b40e471a62425cb34781bad763b5cb5047f13c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs?ref=37b40e471a62425cb34781bad763b5cb5047f13c", "patch": "@@ -68,8 +68,8 @@ fn test_variants<'a, 'b, 'c>() {\n }\n \n fn test_method_call<'a>(x: MyTy<()>) {\n-    // FIXME This should fail.\n     x.method2::<Ty<'a>>();\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn test_struct_path<'a, 'b, 'c, 'd>() {"}, {"sha": "50382cfd9537664e99f5268d3f20b5b00b59cbae", "filename": "src/test/ui/nll/user-annotations/normalization-2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37b40e471a62425cb34781bad763b5cb5047f13c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b40e471a62425cb34781bad763b5cb5047f13c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr?ref=37b40e471a62425cb34781bad763b5cb5047f13c", "patch": "@@ -114,6 +114,14 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n    = help: replace `'c` with `'static`\n \n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:71:7\n+   |\n+LL | fn test_method_call<'a>(x: MyTy<()>) {\n+   |                     -- lifetime `'a` defined here\n+LL |     x.method2::<Ty<'a>>();\n+   |       ^^^^^^^ requires that `'a` must outlive `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/normalization-2.rs:88:5\n    |\n@@ -190,5 +198,5 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n    = help: replace `'c` with `'static`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n "}]}