{"sha": "b858ed5919f689c0451609fa8bed62d4ee2e1ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NThlZDU5MTlmNjg5YzA0NTE2MDlmYThiZWQ2MmQ0ZWUyZTFlZjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-07T08:56:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "obligations.rs: rustfmt", "tree": {"sha": "789a5a6fd4b323d5f891749091acb46341d8d458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789a5a6fd4b323d5f891749091acb46341d8d458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b858ed5919f689c0451609fa8bed62d4ee2e1ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b858ed5919f689c0451609fa8bed62d4ee2e1ef1", "html_url": "https://github.com/rust-lang/rust/commit/b858ed5919f689c0451609fa8bed62d4ee2e1ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b858ed5919f689c0451609fa8bed62d4ee2e1ef1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5829746dddf4f1e3d498a630fc475eaec6ac753d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5829746dddf4f1e3d498a630fc475eaec6ac753d", "html_url": "https://github.com/rust-lang/rust/commit/5829746dddf4f1e3d498a630fc475eaec6ac753d"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "55f0b430dae45d97fb8dc594cd1fde10e25cf2dc", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b858ed5919f689c0451609fa8bed62d4ee2e1ef1/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b858ed5919f689c0451609fa8bed62d4ee2e1ef1/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=b858ed5919f689c0451609fa8bed62d4ee2e1ef1", "patch": "@@ -71,11 +71,11 @@\n \n use hir::def_id::DefId;\n use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n+use syntax::ast;\n use traits;\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::subst::{Subst, Substs};\n use ty::outlives::Component;\n-use syntax::ast;\n+use ty::subst::{Subst, Substs};\n+use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Registers that the given region obligation must be resolved\n@@ -90,8 +90,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ) {\n         debug!(\n             \"register_region_obligation(body_id={:?}, obligation={:?})\",\n-            body_id,\n-            obligation\n+            body_id, obligation\n         );\n \n         self.region_obligations\n@@ -100,13 +99,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// Trait queries just want to pass back type obligations \"as is\"\n-    pub fn take_registered_region_obligations(\n-        &self,\n-    ) -> Vec<(ast::NodeId, RegionObligation<'tcx>)> {\n-        ::std::mem::replace(\n-            &mut *self.region_obligations.borrow_mut(),\n-            vec![],\n-        )\n+    pub fn take_registered_region_obligations(&self) -> Vec<(ast::NodeId, RegionObligation<'tcx>)> {\n+        ::std::mem::replace(&mut *self.region_obligations.borrow_mut(), vec![])\n     }\n \n     /// Process the region obligations that must be proven (during\n@@ -176,15 +170,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         {\n             debug!(\n                 \"process_registered_region_obligations: sup_type={:?} sub_region={:?} cause={:?}\",\n-                sup_type,\n-                sub_region,\n-                cause\n+                sup_type, sub_region, cause\n             );\n \n-            let origin = SubregionOrigin::from_obligation_cause(\n-                &cause,\n-                || infer::RelateParamBound(cause.span, sup_type),\n-            );\n+            let origin = SubregionOrigin::from_obligation_cause(&cause, || {\n+                infer::RelateParamBound(cause.span, sup_type)\n+            });\n \n             let sup_type = self.resolve_type_vars_if_possible(&sup_type);\n             outlives.type_must_outlive(origin, sup_type, sub_region);\n@@ -250,9 +241,7 @@ impl<'cx, 'gcx, 'tcx> TypeOutlives<'cx, 'gcx, 'tcx> {\n     ) {\n         debug!(\n             \"type_must_outlive(ty={:?}, region={:?}, origin={:?})\",\n-            ty,\n-            region,\n-            origin\n+            ty, region, origin\n         );\n \n         assert!(!ty.has_escaping_regions());\n@@ -307,9 +296,7 @@ impl<'cx, 'gcx, 'tcx> TypeOutlives<'cx, 'gcx, 'tcx> {\n     ) {\n         debug!(\n             \"param_ty_must_outlive(region={:?}, param_ty={:?}, origin={:?})\",\n-            region,\n-            param_ty,\n-            origin\n+            region, param_ty, origin\n         );\n \n         let verify_bound = self.param_bound(param_ty);\n@@ -326,9 +313,7 @@ impl<'cx, 'gcx, 'tcx> TypeOutlives<'cx, 'gcx, 'tcx> {\n     ) {\n         debug!(\n             \"projection_must_outlive(region={:?}, projection_ty={:?}, origin={:?})\",\n-            region,\n-            projection_ty,\n-            origin\n+            region, projection_ty, origin\n         );\n \n         // This case is thorny for inference. The fundamental problem is\n@@ -469,12 +454,12 @@ impl<'cx, 'gcx, 'tcx> TypeOutlives<'cx, 'gcx, 'tcx> {\n     ) -> VerifyBound<'tcx> {\n         debug!(\n             \"projection_bound(declared_bounds={:?}, projection_ty={:?})\",\n-            declared_bounds,\n-            projection_ty\n+            declared_bounds, projection_ty\n         );\n \n         // see the extensive comment in projection_must_outlive\n-        let ty = self.infcx\n+        let ty = self\n+            .infcx\n             .tcx\n             .mk_projection(projection_ty.item_def_id, projection_ty.substs);\n         let recursive_bound = self.recursive_type_bound(ty);"}]}