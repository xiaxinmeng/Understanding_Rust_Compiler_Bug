{"sha": "7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "node_id": "C_kwDOAAsO6NoAKDdmMjI2ZmM5MTI1YTJjZTdmOGRmMDIwYzY4ZDgxYzE2ZmY0MDYxZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T12:57:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T12:57:08Z"}, "message": "Auto merge of #12324 - jonas-schievink:rm-attribute, r=jonas-schievink\n\nfeat: Revert the \"Add attribute\" assist\n\nReverts https://github.com/rust-lang/rust-analyzer/pull/12296, as the added indirection and \"assist noise\" (the assist has to trigger inside the body of an item to match what the \"Add `#[derive]`\" does) makes this not really pull its weight over just using attribute completions.\n\nKeeps the changes to \"Add getter\". `#[must_use]` can be applied using the attribute completions.", "tree": {"sha": "13d3af3112483edccc1a3cc9dd9f811d57a3c4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d3af3112483edccc1a3cc9dd9f811d57a3c4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "html_url": "https://github.com/rust-lang/rust/commit/7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bad1956a0b28002108f987d87a374ead9f8cfec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bad1956a0b28002108f987d87a374ead9f8cfec", "html_url": "https://github.com/rust-lang/rust/commit/4bad1956a0b28002108f987d87a374ead9f8cfec"}, {"sha": "e52d463524ced7b7f6752626d8096b9483e04cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52d463524ced7b7f6752626d8096b9483e04cc2", "html_url": "https://github.com/rust-lang/rust/commit/e52d463524ced7b7f6752626d8096b9483e04cc2"}], "stats": {"total": 384, "additions": 158, "deletions": 226}, "files": [{"sha": "dcb52b151dbf803d7993f9d329ddca56ba40837b", "filename": "crates/ide-assists/src/handlers/add_attribute.rs", "status": "removed", "additions": 0, "deletions": 196, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/4bad1956a0b28002108f987d87a374ead9f8cfec/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bad1956a0b28002108f987d87a374ead9f8cfec/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_attribute.rs?ref=4bad1956a0b28002108f987d87a374ead9f8cfec", "patch": "@@ -1,196 +0,0 @@\n-use ide_db::assists::{AssistId, AssistKind, GroupLabel};\n-use syntax::{\n-    ast::{self, HasAttrs},\n-    match_ast, AstNode, SyntaxKind, TextSize,\n-};\n-\n-use crate::assist_context::{AssistContext, Assists};\n-\n-// Assist: add_attribute\n-//\n-// Adds commonly used attributes to items.\n-//\n-// ```\n-// struct Point {\n-//     x: u32,\n-//     y: u32,$0\n-// }\n-// ```\n-// ->add_derive\n-// ```\n-// #[derive($0)]\n-// struct Point {\n-//     x: u32,\n-//     y: u32,\n-// }\n-// ```\n-pub(crate) fn add_attribute(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let cap = ctx.config.snippet_cap?;\n-\n-    let (attr_owner, attrs) = ctx\n-        .find_node_at_offset::<ast::AnyHasAttrs>()?\n-        .syntax()\n-        .ancestors()\n-        .filter_map(ast::AnyHasAttrs::cast)\n-        .find_map(|attr_owner| {\n-            let node = attr_owner.syntax();\n-            match_ast! {\n-                match node {\n-                    ast::Adt(_) => Some((attr_owner, ADT_ATTRS)),\n-                    ast::Fn(_) => Some((attr_owner, FN_ATTRS)),\n-                    _ => None,\n-                }\n-            }\n-        })?;\n-\n-    let offset = attr_insertion_offset(&attr_owner)?;\n-\n-    for tpl in attrs {\n-        let existing_offset = attr_owner.attrs().find_map(|attr| {\n-            if attr.simple_name()? == tpl.name {\n-                match attr.token_tree() {\n-                    Some(tt) => {\n-                        // Attribute like `#[derive(...)]`, position cursor right before the `)`\n-                        return Some(tt.syntax().text_range().end() - TextSize::of(')'));\n-                    }\n-                    None => {\n-                        // `#[key = value]`\n-                        let tok = attr.syntax().last_token()?;\n-                        if tok.kind() == SyntaxKind::R_BRACK {\n-                            return Some(tok.text_range().end() - TextSize::of(']'));\n-                        }\n-                    }\n-                }\n-            }\n-            None\n-        });\n-        acc.add_group(\n-            &GroupLabel(\"Add attribute\".into()),\n-            AssistId(tpl.id, AssistKind::Generate),\n-            format!(\"Add `#[{}]`\", tpl.name),\n-            attr_owner.syntax().text_range(),\n-            |b| match existing_offset {\n-                Some(offset) => {\n-                    b.insert_snippet(cap, offset, \"$0\");\n-                }\n-                None => {\n-                    b.insert_snippet(cap, offset, format!(\"#[{}]\\n\", tpl.snippet));\n-                }\n-            },\n-        );\n-    }\n-\n-    Some(())\n-}\n-\n-fn attr_insertion_offset(nominal: &ast::AnyHasAttrs) -> Option<TextSize> {\n-    let non_ws_child = nominal\n-        .syntax()\n-        .children_with_tokens()\n-        .find(|it| it.kind() != SyntaxKind::COMMENT && it.kind() != SyntaxKind::WHITESPACE)?;\n-    Some(non_ws_child.text_range().start())\n-}\n-\n-static ADT_ATTRS: &[AttrTemplate] = &[\n-    AttrTemplate { id: \"add_derive\", name: \"derive\", snippet: \"derive($0)\" },\n-    AttrTemplate { id: \"add_must_use\", name: \"must_use\", snippet: \"must_use$0\" },\n-];\n-\n-static FN_ATTRS: &[AttrTemplate] = &[\n-    AttrTemplate { id: \"add_inline\", name: \"inline\", snippet: \"inline$0\" },\n-    AttrTemplate { id: \"add_must_use\", name: \"must_use\", snippet: \"must_use$0\" },\n-];\n-\n-struct AttrTemplate {\n-    /// Assist ID.\n-    id: &'static str,\n-    /// User-facing attribute name.\n-    name: &'static str,\n-    /// Snippet to insert.\n-    snippet: &'static str,\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist_by_label, check_assist_target};\n-\n-    use super::add_attribute;\n-\n-    fn check_derive(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check_assist_by_label(\n-            add_attribute,\n-            ra_fixture_before,\n-            ra_fixture_after,\n-            \"Add `#[derive]`\",\n-        );\n-    }\n-\n-    fn check_must_use(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check_assist_by_label(\n-            add_attribute,\n-            ra_fixture_before,\n-            ra_fixture_after,\n-            \"Add `#[must_use]`\",\n-        );\n-    }\n-\n-    #[test]\n-    fn add_derive_new() {\n-        check_derive(\"struct Foo { a: i32, $0}\", \"#[derive($0)]\\nstruct Foo { a: i32, }\");\n-        check_derive(\"struct Foo { $0 a: i32, }\", \"#[derive($0)]\\nstruct Foo {  a: i32, }\");\n-    }\n-\n-    #[test]\n-    fn add_derive_existing() {\n-        check_derive(\n-            \"#[derive(Clone)]\\nstruct Foo { a: i32$0, }\",\n-            \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n-        );\n-    }\n-\n-    #[test]\n-    fn add_derive_new_with_doc_comment() {\n-        check_derive(\n-            \"\n-/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-struct Foo { a: i32$0, }\n-            \",\n-            \"\n-/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-#[derive($0)]\n-struct Foo { a: i32, }\n-            \",\n-        );\n-    }\n-\n-    #[test]\n-    fn add_derive_target() {\n-        check_assist_target(\n-            add_attribute,\n-            r#\"\n-struct SomeThingIrrelevant;\n-/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-struct Foo { a: i32$0, }\n-struct EvenMoreIrrelevant;\n-            \"#,\n-            \"/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-struct Foo { a: i32, }\",\n-        );\n-    }\n-\n-    #[test]\n-    fn insert_must_use() {\n-        check_must_use(\"struct S$0;\", \"#[must_use$0]\\nstruct S;\");\n-        check_must_use(\"$0fn f() {}\", \"#[must_use$0]\\nfn f() {}\");\n-\n-        check_must_use(r#\"#[must_use = \"bla\"] struct S$0;\"#, r#\"#[must_use = \"bla\"$0] struct S;\"#);\n-        check_must_use(r#\"#[must_use = ] struct S$0;\"#, r#\"#[must_use = $0] struct S;\"#);\n-\n-        check_must_use(r#\"#[must_use = \"bla\"] $0fn f() {}\"#, r#\"#[must_use = \"bla\"$0] fn f() {}\"#);\n-        check_must_use(r#\"#[must_use = ] $0fn f() {}\"#, r#\"#[must_use = $0] fn f() {}\"#);\n-    }\n-}"}, {"sha": "28483f795e0f6c8fb5b0d20cec4b855050995084", "filename": "crates/ide-assists/src/handlers/generate_derive.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "patch": "@@ -0,0 +1,132 @@\n+use syntax::{\n+    ast::{self, AstNode, HasAttrs},\n+    SyntaxKind::{COMMENT, WHITESPACE},\n+    TextSize,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: generate_derive\n+//\n+// Adds a new `#[derive()]` clause to a struct or enum.\n+//\n+// ```\n+// struct Point {\n+//     x: u32,\n+//     y: u32,$0\n+// }\n+// ```\n+// ->\n+// ```\n+// #[derive($0)]\n+// struct Point {\n+//     x: u32,\n+//     y: u32,\n+// }\n+// ```\n+pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let cap = ctx.config.snippet_cap?;\n+    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n+    let node_start = derive_insertion_offset(&nominal)?;\n+    let target = nominal.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_derive\", AssistKind::Generate),\n+        \"Add `#[derive]`\",\n+        target,\n+        |builder| {\n+            let derive_attr = nominal\n+                .attrs()\n+                .filter_map(|x| x.as_simple_call())\n+                .filter(|(name, _arg)| name == \"derive\")\n+                .map(|(_name, arg)| arg)\n+                .next();\n+            match derive_attr {\n+                None => {\n+                    builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n+                }\n+                Some(tt) => {\n+                    // Just move the cursor.\n+                    builder.insert_snippet(\n+                        cap,\n+                        tt.syntax().text_range().end() - TextSize::of(')'),\n+                        \"$0\",\n+                    )\n+                }\n+            };\n+        },\n+    )\n+}\n+\n+// Insert `derive` after doc comments.\n+fn derive_insertion_offset(nominal: &ast::Adt) -> Option<TextSize> {\n+    let non_ws_child = nominal\n+        .syntax()\n+        .children_with_tokens()\n+        .find(|it| it.kind() != COMMENT && it.kind() != WHITESPACE)?;\n+    Some(non_ws_child.text_range().start())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_target};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn add_derive_new() {\n+        check_assist(\n+            generate_derive,\n+            \"struct Foo { a: i32, $0}\",\n+            \"#[derive($0)]\\nstruct Foo { a: i32, }\",\n+        );\n+        check_assist(\n+            generate_derive,\n+            \"struct Foo { $0 a: i32, }\",\n+            \"#[derive($0)]\\nstruct Foo {  a: i32, }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_derive_existing() {\n+        check_assist(\n+            generate_derive,\n+            \"#[derive(Clone)]\\nstruct Foo { a: i32$0, }\",\n+            \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_derive_new_with_doc_comment() {\n+        check_assist(\n+            generate_derive,\n+            \"\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32$0, }\n+            \",\n+            \"\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+#[derive($0)]\n+struct Foo { a: i32, }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_derive_target() {\n+        check_assist_target(\n+            generate_derive,\n+            \"\n+struct SomeThingIrrelevant;\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32$0, }\n+struct EvenMoreIrrelevant;\n+            \",\n+            \"/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32, }\",\n+        );\n+    }\n+}"}, {"sha": "b8607579a3264d2bea586d4cf25cee382b99d89c", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "patch": "@@ -106,8 +106,6 @@ mod handlers {\n     mod add_explicit_type;\n     mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n-    mod add_missing_match_arms;\n-    mod add_attribute;\n     mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n@@ -128,6 +126,7 @@ mod handlers {\n     mod extract_struct_from_enum_variant;\n     mod extract_type_alias;\n     mod extract_variable;\n+    mod add_missing_match_arms;\n     mod fix_visibility;\n     mod flip_binexpr;\n     mod flip_comma;\n@@ -136,6 +135,7 @@ mod handlers {\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n     mod generate_deref;\n+    mod generate_derive;\n     mod generate_documentation_template;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -191,7 +191,6 @@ mod handlers {\n     pub(crate) fn all() -> &'static [Handler] {\n         &[\n             // These are alphabetic for the foolish consistency\n-            add_attribute::add_attribute,\n             add_explicit_type::add_explicit_type,\n             add_missing_match_arms::add_missing_match_arms,\n             add_lifetime_to_type::add_lifetime_to_type,\n@@ -222,6 +221,7 @@ mod handlers {\n             generate_constant::generate_constant,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n+            generate_derive::generate_derive,\n             generate_documentation_template::generate_documentation_template,\n             generate_documentation_template::generate_doc_example,\n             generate_enum_is_method::generate_enum_is_method,"}, {"sha": "a8d5f85ba6630ca6cef491319b78b44f0744ec87", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "patch": "@@ -251,7 +251,6 @@ pub fn test_some_range(a: int) -> bool {\n         Extract into variable\n         Extract into function\n         Replace if let with match\n-        Add attribute\n     \"#]]\n     .assert_eq(&expected);\n }"}, {"sha": "c9b0b1ce82e38def0d2b62a25c4977702f227522", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "patch": "@@ -2,26 +2,6 @@\n \n use super::check_doc_test;\n \n-#[test]\n-fn doctest_add_attribute() {\n-    check_doc_test(\n-        \"add_derive\",\n-        r#####\"\n-struct Point {\n-    x: u32,\n-    y: u32,$0\n-}\n-\"#####,\n-        r#####\"\n-#[derive($0)]\n-struct Point {\n-    x: u32,\n-    y: u32,\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_add_explicit_type() {\n     check_doc_test(\n@@ -862,6 +842,26 @@ impl core::ops::Deref for B {\n     )\n }\n \n+#[test]\n+fn doctest_generate_derive() {\n+    check_doc_test(\n+        \"generate_derive\",\n+        r#####\"\n+struct Point {\n+    x: u32,\n+    y: u32,$0\n+}\n+\"#####,\n+        r#####\"\n+#[derive($0)]\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_doc_example() {\n     check_doc_test("}, {"sha": "d45e54186bb673ca8551d62560d196f015a40a89", "filename": "crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f226fc9125a2ce7f8df020c68d81c16ff4061f0/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=7f226fc9125a2ce7f8df020c68d81c16ff4061f0", "patch": "@@ -31,7 +31,7 @@ r#####\"\n }}\n \"######,\n                     &test_id,\n-                    &section.assist_id,\n+                    &assist.id,\n                     reveal_hash_comments(&section.before),\n                     reveal_hash_comments(&section.after)\n                 );\n@@ -61,7 +61,6 @@ r#####\"\n }\n #[derive(Debug)]\n struct Section {\n-    assist_id: String,\n     doc: String,\n     before: String,\n     after: String,\n@@ -112,13 +111,11 @@ impl Assist {\n \n                     let before = take_until(lines.by_ref(), \"```\");\n \n-                    let arrow = lines.next().unwrap();\n-                    assert!(arrow.starts_with(\"->\"));\n-                    let id = if arrow[2..].is_empty() { &assist.id } else { &arrow[2..] };\n+                    assert_eq!(lines.next().unwrap().as_str(), \"->\");\n                     assert_eq!(lines.next().unwrap().as_str(), \"```\");\n                     let after = take_until(lines.by_ref(), \"```\");\n \n-                    assist.sections.push(Section { assist_id: id.to_string(), doc, before, after });\n+                    assist.sections.push(Section { doc, before, after });\n                 }\n \n                 acc.push(assist)"}]}