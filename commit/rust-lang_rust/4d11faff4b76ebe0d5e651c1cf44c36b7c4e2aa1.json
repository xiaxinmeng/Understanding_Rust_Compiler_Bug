{"sha": "4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMTFmYWZmNGI3NmViZTBkNWU2NTFjMWNmNDRjMzZiN2M0ZTJhYTE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-17T17:04:03Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-17T17:16:27Z"}, "message": "Update tests", "tree": {"sha": "74d1ba35b66b5c4393990695e9dc3f8b72bb6353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74d1ba35b66b5c4393990695e9dc3f8b72bb6353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "html_url": "https://github.com/rust-lang/rust/commit/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/comments", "author": null, "committer": null, "parents": [{"sha": "38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b", "html_url": "https://github.com/rust-lang/rust/commit/38c30a3e06cb11bb541b5a9ea5c5b4f167d8469b"}], "stats": {"total": 145, "additions": 96, "deletions": 49}, "files": [{"sha": "2f04ee1ef92df70b9e62ba2bc3a3b48259d33d14", "filename": "tests/source/big-impl-rfc.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Fsource%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Fsource%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbig-impl-rfc.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -112,3 +112,17 @@ impl<\n > {\n     fn foo() {}\n }\n+\n+// #1689\n+impl<M, S, F, X> SubSelectDirect<M, S, F, X>\n+    where\n+    M: select::Selector,\n+    S: event::Stream,\n+    F: for<'t> FnMut(transform::Api<\n+            't,\n+        Stream<ContentStream<S>>,\n+        >)\n+                     -> transform::Api<'t, X>,\n+    X: event::Stream,\n+{\n+}"}, {"sha": "58c807f4029e2f6c72152d395a6bb929e9123a1d", "filename": "tests/source/type_alias.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype_alias.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -28,3 +28,7 @@ pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where T: Clone + Ord + E\n pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE> where T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n \n type RegisterPlugin = unsafe fn(pt: *const c_char, plugin: *mut c_void, data: *mut CallbackData);\n+\n+// #1683\n+pub type Between<Lhs, Rhs> = super::operators::Between<Lhs, super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>>;\n+pub type NotBetween<Lhs, Rhs> = super::operators::NotBetween<Lhs, super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>>;"}, {"sha": "da5ab03fd5ebfa5e68f699b45117ec38e7b18ddb", "filename": "tests/target/big-impl-rfc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbig-impl-rfc.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -75,3 +75,14 @@ impl<\n     > {\n     fn foo() {}\n }\n+\n+// #1689\n+impl<M, S, F, X> SubSelectDirect<M, S, F, X>\n+where\n+    M: select::Selector,\n+    S: event::Stream,\n+    F: for<'t> FnMut(transform::Api<'t, Stream<ContentStream<S>>>)\n+        -> transform::Api<'t, X>,\n+    X: event::Stream,\n+{\n+}"}, {"sha": "b55b64d05b34eae2c99cc1cb5ad71c34ab190eed", "filename": "tests/target/extern_not_explicit.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Fextern_not_explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Fextern_not_explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern_not_explicit.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -6,10 +6,13 @@ extern {\n \n extern fn sup() {}\n \n-type funky_func = extern fn(unsafe extern \"rust-call\" fn(*const JSJitInfo,\n-                                                         *mut JSContext,\n-                                                         HandleObject,\n-                                                         *mut libc::c_void,\n-                                                         u32,\n-                                                         *mut JSVal)\n-                                                         -> u8);\n+type funky_func = extern fn(\n+    unsafe extern \"rust-call\" fn(\n+        *const JSJitInfo,\n+        *mut JSContext,\n+        HandleObject,\n+        *mut libc::c_void,\n+        u32,\n+        *mut JSVal,\n+    ) -> u8,\n+);"}, {"sha": "76776672ca8cc7c63e0e0caf502f4178f823f7ae", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -10,7 +10,7 @@ fn simple(\n         key: &[u8],\n         upd: Box<\n             Fn(Option<&memcache::Item>)\n-               -> (memcache::Status, Result<memcache::Item, Option<String>>),\n+                -> (memcache::Status, Result<memcache::Item, Option<String>>),\n         >,\n     ) -> MapResult {\n     }\n@@ -34,15 +34,16 @@ fn weird_comment(\n \n fn generic<T>(arg: T) -> &SomeType\n where\n-    T: Fn(// First arg\n-       A,\n-       // Second argument\n-       B,\n-       C,\n-       D,\n-       // pre comment\n-       E /* last comment */)\n-       -> &SomeType,\n+    T: Fn(\n+        // First arg\n+        A,\n+        // Second argument\n+        B,\n+        C,\n+        D,\n+        // pre comment\n+        E, /* last comment */\n+    ) -> &SomeType,\n {\n     arg(a, b, c, d, e)\n }\n@@ -68,13 +69,14 @@ unsafe fn generic_call(\n     argc: libc::c_uint,\n     vp: *mut JSVal,\n     is_lenient: bool,\n-    call: unsafe extern \"C\" fn(*const JSJitInfo,\n-                               *mut JSContext,\n-                               HandleObject,\n-                               *mut libc::c_void,\n-                               u32,\n-                               *mut JSVal)\n-                               -> u8,\n+    call: unsafe extern \"C\" fn(\n+        *const JSJitInfo,\n+        *mut JSContext,\n+        HandleObject,\n+        *mut libc::c_void,\n+        u32,\n+        *mut JSVal,\n+    ) -> u8,\n ) {\n     let f: fn(_, _) -> _ = panic!();\n }"}, {"sha": "8b581e835394e0fa167332deb0bf5fd25b344e77", "filename": "tests/target/fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -102,8 +102,7 @@ fn foo(a: i32) -> i32 {\n fn ______________________baz(\n     a: i32,\n ) -> *mut ::std::option::Option<\n-    extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32)\n-                  -> (),\n+    extern \"C\" fn(arg1: i32, _____________________a: i32, arg3: i32) -> (),\n > {\n }\n "}, {"sha": "c2f8d2522370f19faa86ee1b9a26c44906125543", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -59,15 +59,16 @@ fn main() {\n \n \tfn generic<T>(arg: T) -> &SomeType\n \twhere\n-\t\tT: Fn(// First arg\n-\t\t   A,\n-\t\t   // Second argument\n-\t\t   B,\n-\t\t   C,\n-\t\t   D,\n-\t\t   // pre comment\n-\t\t   E /* last comment */)\n-\t\t   -> &SomeType,\n+\t\tT: Fn(\n+\t\t\t// First arg\n+\t\t\tA,\n+\t\t\t// Second argument\n+\t\t\tB,\n+\t\t\tC,\n+\t\t\tD,\n+\t\t\t// pre comment\n+\t\t\tE, /* last comment */\n+\t\t) -> &SomeType,\n \t{\n \t\targ(a, b, c, d, e)\n \t}"}, {"sha": "80855ee5732a5bce778ca7e265a348349528773c", "filename": "tests/target/type.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -13,16 +13,20 @@ fn types() {\n \n struct F {\n     f: extern \"C\" fn(x: u8, ... /* comment */),\n-    g: extern \"C\" fn(x: u8,\n-                     // comment\n-                     ...),\n+    g: extern \"C\" fn(\n+        x: u8,\n+        // comment\n+        ...\n+    ),\n     h: extern \"C\" fn(x: u8, ...),\n-    i: extern \"C\" fn(x: u8,\n-                     // comment 4\n-                     y: String, // comment 3\n-                     z: Foo,\n-                     // comment\n-                     ... /* comment 2 */),\n+    i: extern \"C\" fn(\n+        x: u8,\n+        // comment 4\n+        y: String, // comment 3\n+        z: Foo,\n+        // comment\n+        ... /* comment 2 */\n+    ),\n }\n \n fn issue_1006(def_id_to_string: for<'a, 'b> unsafe fn(TyCtxt<'b, 'tcx, 'tcx>, DefId) -> String) {}"}, {"sha": "cac1ac466cd5f7ffb51e467b603d6dc8935fa9b7", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=4d11faff4b76ebe0d5e651c1cf44c36b7c4e2aa1", "patch": "@@ -26,8 +26,9 @@ pub type LongGenericListTest<\n \n pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n \n-pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n-    Vec<Test>;\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<\n+    Test,\n+>;\n \n pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> =\n     Vec<i32>;\n@@ -61,6 +62,14 @@ pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where\n pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE> where\n     T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n \n-type RegisterPlugin = unsafe fn(pt: *const c_char,\n-                                plugin: *mut c_void,\n-                                data: *mut CallbackData);\n+type RegisterPlugin = unsafe fn(pt: *const c_char, plugin: *mut c_void, data: *mut CallbackData);\n+\n+// #1683\n+pub type Between<Lhs, Rhs> = super::operators::Between<\n+    Lhs,\n+    super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>,\n+>;\n+pub type NotBetween<Lhs, Rhs> = super::operators::NotBetween<\n+    Lhs,\n+    super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>,\n+>;"}]}