{"sha": "0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYmQ1MDllMGY5MGJjMTNmN2I0OWMyNGU0OGEyODE5MjhiMmVlOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-15T00:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-15T00:10:51Z"}, "message": "auto merge of #9199 : thestinger/rust/range_step, r=cmr\n\nMy focus was on getting these to be correct in all cases by handling overflow properly. I'll clean them up and work on the performance later.", "tree": {"sha": "976d98009c9206efa782db271ccca2828bc37015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/976d98009c9206efa782db271ccca2828bc37015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "html_url": "https://github.com/rust-lang/rust/commit/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7e93ff2571140abf299212ec9ebc0fcd9944eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7e93ff2571140abf299212ec9ebc0fcd9944eb", "html_url": "https://github.com/rust-lang/rust/commit/cf7e93ff2571140abf299212ec9ebc0fcd9944eb"}, {"sha": "a18038f3b2ee338de05ef4489d6ac7067c9198fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18038f3b2ee338de05ef4489d6ac7067c9198fd", "html_url": "https://github.com/rust-lang/rust/commit/a18038f3b2ee338de05ef4489d6ac7067c9198fd"}], "stats": {"total": 115, "additions": 101, "deletions": 14}, "files": [{"sha": "22e8a1defbda9d980a81f2cb5ef0273eab639dfe", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 101, "deletions": 14, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "patch": "@@ -21,7 +21,7 @@ use cmp;\n use num::{Zero, One, Integer, CheckedAdd, CheckedSub, Saturating};\n use option::{Option, Some, None};\n use ops::{Add, Mul, Sub};\n-use cmp::Ord;\n+use cmp::{Eq, Ord};\n use clone::Clone;\n use uint;\n use util;\n@@ -1719,7 +1719,21 @@ pub fn count<A>(start: A, step: A) -> Counter<A> {\n     Counter{state: start, step: step}\n }\n \n-/// A range of numbers from [0, N)\n+impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        let result = self.state.clone();\n+        self.state = self.state + self.step;\n+        Some(result)\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (uint::max_value, None) // Too bad we can't specify an infinite lower bound\n+    }\n+}\n+\n+/// An iterator over the range [start, stop)\n #[deriving(Clone, DeepClone)]\n pub struct Range<A> {\n     priv state: A,\n@@ -1749,14 +1763,12 @@ impl<A: Add<A, A> + Ord + Clone> Iterator<A> for Range<A> {\n     // Blocked on #8605 Need numeric trait for converting to `Option<uint>`\n }\n \n-impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n+/// `Integer` is required to ensure the range will be the same regardless of\n+/// the direction it is consumed.\n+impl<A: Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.stop > self.state {\n-            // Integer doesn't technically define this rule, but we're going to assume that every\n-            // Integer is reachable from every other one by adding or subtracting enough Ones. This\n-            // seems like a reasonable-enough rule that every Integer should conform to, even if it\n-            // can't be statically checked.\n             self.stop = self.stop - self.one;\n             Some(self.stop.clone())\n         } else {\n@@ -1765,7 +1777,7 @@ impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n     }\n }\n \n-/// A range of numbers from [0, N]\n+/// An iterator over the range [start, stop]\n #[deriving(Clone, DeepClone)]\n pub struct RangeInclusive<A> {\n     priv range: Range<A>,\n@@ -1826,17 +1838,78 @@ impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for RangeInclu\n     }\n }\n \n-impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n+/// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n+#[deriving(Clone, DeepClone)]\n+pub struct RangeStep<A> {\n+    priv state: A,\n+    priv stop: A,\n+    priv step: A,\n+    priv rev: bool\n+}\n+\n+/// Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n+#[inline]\n+pub fn range_step<A: CheckedAdd + Ord + Clone + Zero>(start: A, stop: A, step: A) -> RangeStep<A> {\n+    let rev = step < Zero::zero();\n+    RangeStep{state: start, stop: stop, step: step, rev: rev}\n+}\n+\n+impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        let result = self.state.clone();\n-        self.state = self.state + self.step;\n-        Some(result)\n+        if (self.rev && self.state > self.stop) || self.state < self.stop {\n+            let result = self.state.clone();\n+            match self.state.checked_add(&self.step) {\n+                Some(x) => self.state = x,\n+                None => self.state = self.stop.clone()\n+            }\n+            Some(result)\n+        } else {\n+            None\n+        }\n     }\n+}\n+\n+/// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n+#[deriving(Clone, DeepClone)]\n+pub struct RangeStepInclusive<A> {\n+    priv state: A,\n+    priv stop: A,\n+    priv step: A,\n+    priv rev: bool,\n+    priv done: bool\n+}\n \n+/// Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n+#[inline]\n+pub fn range_step_inclusive<A: CheckedAdd + Ord + Clone + Zero>(start: A, stop: A,\n+                                                                step: A) -> RangeStepInclusive<A> {\n+    let rev = step < Zero::zero();\n+    RangeStepInclusive{state: start, stop: stop, step: step, rev: rev, done: false}\n+}\n+\n+impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        (uint::max_value, None) // Too bad we can't specify an infinite lower bound\n+    fn next(&mut self) -> Option<A> {\n+        if !self.done {\n+            if (self.rev && self.state > self.stop) || self.state < self.stop {\n+                let result = self.state.clone();\n+                match self.state.checked_add(&self.step) {\n+                    Some(x) => self.state = x,\n+                    None => self.done = true\n+                }\n+                Some(result)\n+            } else {\n+                if self.state == self.stop {\n+                    self.done = true;\n+                    Some(self.state.clone())\n+                } else {\n+                    None\n+                }\n+            }\n+        } else {\n+            None\n+        }\n     }\n }\n \n@@ -2649,6 +2722,20 @@ mod tests {\n         assert_eq!(range_inclusive(0i, 5).invert().collect::<~[int]>(), ~[5i, 4, 3, 2, 1, 0]);\n     }\n \n+    #[test]\n+    fn test_range_step() {\n+        assert_eq!(range_step(0i, 20, 5).collect::<~[int]>(), ~[0, 5, 10, 15]);\n+        assert_eq!(range_step(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5]);\n+        assert_eq!(range_step(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n+    }\n+\n+    #[test]\n+    fn test_range_step_inclusive() {\n+        assert_eq!(range_step_inclusive(0i, 20, 5).collect::<~[int]>(), ~[0, 5, 10, 15, 20]);\n+        assert_eq!(range_step_inclusive(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5, 0]);\n+        assert_eq!(range_step_inclusive(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n+    }\n+\n     #[test]\n     fn test_reverse() {\n         let mut ys = [1, 2, 3, 4, 5];"}]}