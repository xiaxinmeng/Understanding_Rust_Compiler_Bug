{"sha": "97e41435581ddefa68fc34d318658593190eb1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZTQxNDM1NTgxZGRlZmE2OGZjMzRkMzE4NjU4NTkzMTkwZWIxYzA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-12T15:36:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-12T15:36:50Z"}, "message": "Fix ICE by injecting bitcasts if types mismatch when building invokes or calls.", "tree": {"sha": "3a873baf07ea283658598ab2067fb484ddef0ddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a873baf07ea283658598ab2067fb484ddef0ddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e41435581ddefa68fc34d318658593190eb1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e41435581ddefa68fc34d318658593190eb1c0", "html_url": "https://github.com/rust-lang/rust/commit/97e41435581ddefa68fc34d318658593190eb1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e41435581ddefa68fc34d318658593190eb1c0/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a29c49f5cca849cd5ac79b3cd70b934bb33cf4e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a29c49f5cca849cd5ac79b3cd70b934bb33cf4e6", "html_url": "https://github.com/rust-lang/rust/commit/a29c49f5cca849cd5ac79b3cd70b934bb33cf4e6"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "7e72b977de4588ed7b7acee94f2718efe8745336", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/97e41435581ddefa68fc34d318658593190eb1c0/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e41435581ddefa68fc34d318658593190eb1c0/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=97e41435581ddefa68fc34d318658593190eb1c0", "patch": "@@ -22,6 +22,7 @@ use value::Value;\n use util::nodemap::FnvHashMap;\n use libc::{c_uint, c_char};\n \n+use std::borrow::Cow;\n use std::ffi::CString;\n use std::ptr;\n use syntax_pos::Span;\n@@ -175,8 +176,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        check_call(\"invoke\", llfn, args);\n-\n+        let args = self.check_call(\"invoke\", llfn, args);\n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n \n         unsafe {\n@@ -857,8 +857,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        check_call(\"call\", llfn, args);\n-\n+        let args = self.check_call(\"call\", llfn, args);\n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n \n         unsafe {\n@@ -1100,10 +1099,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             llvm::LLVMRustBuildAtomicFence(self.llbuilder, order, scope);\n         }\n     }\n-}\n \n-fn check_call(typ: &str, llfn: ValueRef, args: &[ValueRef]) {\n-    if cfg!(debug_assertions) {\n+    fn check_call<'b>(&self,\n+                      typ: &str,\n+                      llfn: ValueRef,\n+                      args: &'b [ValueRef]) -> Cow<'b, [ValueRef]> {\n         let mut fn_ty = val_ty(llfn);\n         // Strip off pointers\n         while fn_ty.kind() == llvm::TypeKind::Pointer {\n@@ -1115,16 +1115,31 @@ fn check_call(typ: &str, llfn: ValueRef, args: &[ValueRef]) {\n \n         let param_tys = fn_ty.func_params();\n \n-        let iter = param_tys.into_iter()\n-            .zip(args.iter().map(|&v| val_ty(v)));\n-        for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n-            if expected_ty != actual_ty {\n-                bug!(\"Type mismatch in function call of {:?}. \\\n-                      Expected {:?} for param {}, got {:?}\",\n-                     Value(llfn),\n-                     expected_ty, i, actual_ty);\n+        let all_args_match = param_tys.iter()\n+            .zip(args.iter().map(|&v| val_ty(v)))\n+            .all(|(expected_ty, actual_ty)| *expected_ty == actual_ty);\n+\n+        if all_args_match {\n+            return Cow::Borrowed(args);\n+        }\n+\n+        let casted_args: Vec<_> = param_tys.into_iter()\n+            .zip(args.iter())\n+            .enumerate()\n+            .map(|(i, (expected_ty, &actual_val))| {\n+                let actual_ty = val_ty(actual_val);\n+                if expected_ty != actual_ty {\n+                    debug!(\"Type mismatch in function call of {:?}. \\\n+                            Expected {:?} for param {}, got {:?}; injecting bitcast\",\n+                           Value(llfn),\n+                           expected_ty, i, actual_ty);\n+                    self.bitcast(actual_val, expected_ty)\n+                } else {\n+                    actual_val\n+                }\n+            })\n+            .collect();\n \n-            }\n-        }\n+        return Cow::Owned(casted_args);\n     }\n }"}]}