{"sha": "73a7423e77b49a99e270531fbadda5b8899df3f6", "node_id": "C_kwDOAAsO6NoAKDczYTc0MjNlNzdiNDlhOTllMjcwNTMxZmJhZGRhNWI4ODk5ZGYzZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-17T22:54:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-17T22:54:18Z"}, "message": "Auto merge of #94103 - matthiaskrgr:rollup-cd70ofn, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #93337 (Update tracking issue numbers for inline assembly sub-features)\n - #93758 (Improve comments about type folding/visiting.)\n - #93780 (Generate list instead of div items in sidebar)\n - #93976 (Add MAIN_SEPARATOR_STR)\n - #94011 (Even more let_else adoptions)\n - #94041 (Add a `try_collect()` helper method to `Iterator`)\n - #94043 (Fix ICE when using Box<T, A> with pointer sized A)\n - #94082 (Remove CFG_PLATFORM)\n - #94085 (Clippy: Don't lint `needless_borrow` in method receiver positions)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e8710d3ce418b53ef817c313b05d44020e523f14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8710d3ce418b53ef817c313b05d44020e523f14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a7423e77b49a99e270531fbadda5b8899df3f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a7423e77b49a99e270531fbadda5b8899df3f6", "html_url": "https://github.com/rust-lang/rust/commit/73a7423e77b49a99e270531fbadda5b8899df3f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a7423e77b49a99e270531fbadda5b8899df3f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b3f35c420694a4f24e5a4df00f06073f4f3a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b3f35c420694a4f24e5a4df00f06073f4f3a37", "html_url": "https://github.com/rust-lang/rust/commit/30b3f35c420694a4f24e5a4df00f06073f4f3a37"}, {"sha": "39c17488fb9daca40f3fa8348409515660c594e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c17488fb9daca40f3fa8348409515660c594e4", "html_url": "https://github.com/rust-lang/rust/commit/39c17488fb9daca40f3fa8348409515660c594e4"}], "stats": {"total": 915, "additions": 499, "deletions": 416}, "files": [{"sha": "2a906e41b8cd5cc2640e99d7c0912affbc7b5066", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -142,11 +142,9 @@ trait TypeOpInfo<'tcx> {\n         let tcx = mbcx.infcx.tcx;\n         let base_universe = self.base_universe();\n \n-        let adjusted_universe = if let Some(adjusted) =\n+        let Some(adjusted_universe) =\n             placeholder.universe.as_u32().checked_sub(base_universe.as_u32())\n-        {\n-            adjusted\n-        } else {\n+        else {\n             mbcx.buffer_error(self.fallback_error(tcx, cause.span));\n             return;\n         };"}, {"sha": "73b0d3982850469470f8dd6eda073a321034adb8", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -867,15 +867,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             kind: TerminatorKind::Call { fn_span, from_hir_call, .. }, ..\n         }) = &self.body[location.block].terminator\n         {\n-            let (method_did, method_substs) = if let Some(info) =\n+            let Some((method_did, method_substs)) =\n                 rustc_const_eval::util::find_self_call(\n                     self.infcx.tcx,\n                     &self.body,\n                     target_temp,\n                     location.block,\n-                ) {\n-                info\n-            } else {\n+                )\n+            else {\n                 return normal_ret;\n             };\n "}, {"sha": "7d0dde53c2b6d5481c2ef0f352f88a2938b407c7", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -639,11 +639,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let hir_map = self.infcx.tcx.hir();\n         let my_def = self.body.source.def_id();\n         let my_hir = hir_map.local_def_id_to_hir_id(my_def.as_local().unwrap());\n-        let td = if let Some(a) =\n+        let Some(td) =\n             self.infcx.tcx.impl_of_method(my_def).and_then(|x| self.infcx.tcx.trait_id_of_impl(x))\n-        {\n-            a\n-        } else {\n+        else {\n             return (false, None);\n         };\n         ("}, {"sha": "c06af5206d5b1b04205ab22fdde8ccd290b48f1a", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -6,9 +6,7 @@ use rustc_expand::base::{self, DummyResult};\n \n /// Emits errors for literal expressions that are invalid inside and outside of an array.\n fn invalid_type_err(cx: &mut base::ExtCtxt<'_>, expr: &P<rustc_ast::Expr>, is_nested: bool) {\n-    let lit = if let ast::ExprKind::Lit(lit) = &expr.kind {\n-        lit\n-    } else {\n+    let ast::ExprKind::Lit(lit) = &expr.kind else {\n         unreachable!();\n     };\n     match lit.kind {"}, {"sha": "38877399943ef77574acfd04697ab2e3d7ddc8ec", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -9,6 +9,7 @@\n #![feature(decl_macro)]\n #![feature(is_sorted)]\n #![feature(nll)]\n+#![feature(let_else)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "fafb9a6dbdeccf88c6f80bbd6416352de8f46301", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -330,7 +330,9 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n             ty::Ref(..) | ty::RawPtr(_) => {\n                 return self.field(cx, index).llvm_type(cx);\n             }\n-            ty::Adt(def, _) if def.is_box() => {\n+            // only wide pointer boxes are handled as pointers\n+            // thin pointer boxes with scalar allocators are handled by the general logic below\n+            ty::Adt(def, substs) if def.is_box() && cx.layout_of(substs.type_at(1)).is_zst() => {\n                 let ptr_ty = cx.tcx.mk_mut_ptr(self.ty.boxed_ty());\n                 return cx.layout_of(ptr_ty).scalar_pair_element_llvm_type(cx, index, immediate);\n             }"}, {"sha": "58e0667d678986abd01f903d46d2242da324f1c4", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -216,17 +216,18 @@ pub fn each_linked_rlib(\n         }\n         let name = &info.crate_name[&cnum];\n         let used_crate_source = &info.used_crate_source[&cnum];\n-        let path = if let Some((path, _)) = &used_crate_source.rlib {\n-            path\n-        } else if used_crate_source.rmeta.is_some() {\n-            return Err(format!(\n-                \"could not find rlib for: `{}`, found rmeta (metadata) file\",\n-                name\n-            ));\n+        if let Some((path, _)) = &used_crate_source.rlib {\n+            f(cnum, &path);\n         } else {\n-            return Err(format!(\"could not find rlib for: `{}`\", name));\n-        };\n-        f(cnum, &path);\n+            if used_crate_source.rmeta.is_some() {\n+                return Err(format!(\n+                    \"could not find rlib for: `{}`, found rmeta (metadata) file\",\n+                    name\n+                ));\n+            } else {\n+                return Err(format!(\"could not find rlib for: `{}`\", name));\n+            }\n+        }\n     }\n     Ok(())\n }"}, {"sha": "9ebbcac76a28a45f0ac3f6d8f12ad02cee25d3dd", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -200,9 +200,7 @@ fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n //   `SHF_EXCLUDE` flag we can set on sections in an object file to get\n //   automatically removed from the final output.\n pub fn create_rmeta_file(sess: &Session, metadata: &[u8]) -> Vec<u8> {\n-    let mut file = if let Some(file) = create_object_file(sess) {\n-        file\n-    } else {\n+    let Some(mut file) = create_object_file(sess) else {\n         // This is used to handle all \"other\" targets. This includes targets\n         // in two categories:\n         //\n@@ -262,9 +260,7 @@ pub fn create_compressed_metadata_file(\n ) -> Vec<u8> {\n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n     FrameEncoder::new(&mut compressed).write_all(metadata.raw_data()).unwrap();\n-    let mut file = if let Some(file) = create_object_file(sess) {\n-        file\n-    } else {\n+    let Some(mut file) = create_object_file(sess) else {\n         return compressed.to_vec();\n     };\n     let section = file.add_section("}, {"sha": "9cb12778a561f8a1782a72a97f38e09f61a9c266", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -285,13 +285,13 @@ declare_features! (\n     /// Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n     /// Allows using `const` operands in inline assembly.\n-    (active, asm_const, \"1.58.0\", Some(72016), None),\n+    (active, asm_const, \"1.58.0\", Some(93332), None),\n     /// Enables experimental inline assembly support for additional architectures.\n-    (active, asm_experimental_arch, \"1.58.0\", Some(72016), None),\n+    (active, asm_experimental_arch, \"1.58.0\", Some(93335), None),\n     /// Allows using `sym` operands in inline assembly.\n-    (active, asm_sym, \"1.58.0\", Some(72016), None),\n+    (active, asm_sym, \"1.58.0\", Some(93333), None),\n     /// Allows the `may_unwind` option in inline assembly.\n-    (active, asm_unwind, \"1.58.0\", Some(72016), None),\n+    (active, asm_unwind, \"1.58.0\", Some(93334), None),\n     /// Allows users to enforce equality of associated constants `TraitImpl<AssocConst=3>`.\n     (active, associated_const_equality, \"1.58.0\", Some(92827), None),\n     /// Allows the user of associated type bounds."}, {"sha": "7f376c5fbe54b71a9937151c12e86b67ad9bddf1", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -852,11 +852,7 @@ impl<T: Idx> HybridBitSet<T> {\n             Bound::Excluded(end) => end.index(),\n             Bound::Unbounded => self.domain_size() - 1,\n         };\n-        let len = if let Some(l) = end.checked_sub(start) {\n-            l\n-        } else {\n-            return;\n-        };\n+        let Some(len) = end.checked_sub(start) else { return };\n         match self {\n             HybridBitSet::Sparse(sparse) if sparse.len() + len < SPARSE_MAX => {\n                 // The set is sparse and has space for `elems`."}, {"sha": "a61100d907bcfd86e845c1e5fb7f69d83dce97b4", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -553,8 +553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let ty_msg = match (local_visitor.found_node_ty, local_visitor.found_exact_method_call) {\n             (_, Some(_)) => String::new(),\n             (Some(ty), _) if ty.is_closure() => {\n-                let substs =\n-                    if let ty::Closure(_, substs) = *ty.kind() { substs } else { unreachable!() };\n+                let ty::Closure(_, substs) = *ty.kind() else { unreachable!() };\n                 let fn_sig = substs.as_closure().sig();\n                 let args = closure_args(&fn_sig);\n                 let ret = fn_sig.output().skip_binder().to_string();\n@@ -597,8 +596,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let param_type = arg_data.kind.descr();\n         let suffix = match local_visitor.found_node_ty {\n             Some(ty) if ty.is_closure() => {\n-                let substs =\n-                    if let ty::Closure(_, substs) = *ty.kind() { substs } else { unreachable!() };\n+                let ty::Closure(_, substs) = *ty.kind() else { unreachable!() };\n                 let fn_sig = substs.as_closure().sig();\n                 let ret = fn_sig.output().skip_binder().to_string();\n "}, {"sha": "4dea04e62ff07875ff2571439d96feb08cbcbe47", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -982,7 +982,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         for local_id in hir.iter_local_def_id() {\n             let def_id = local_id.to_def_id();\n             let def_kind = tcx.opt_def_kind(local_id);\n-            let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };\n+            let Some(def_kind) = def_kind else { continue };\n             record!(self.tables.def_kind[def_id] <- match def_kind {\n                 // Replace Ctor by the enclosing object to avoid leaking details in children crates.\n                 DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,"}, {"sha": "6bfd1b7ffab2443a024db15cfe6b46a4832e9be3", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -61,7 +61,7 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         OP: for<'a> FnOnce(TaskDepsRef<'a>),\n     {\n         ty::tls::with_context_opt(|icx| {\n-            let icx = if let Some(icx) = icx { icx } else { return };\n+            let Some(icx) = icx else { return };\n             op(icx.task_deps)\n         })\n     }"}, {"sha": "4922d07ae1c5da22d649fddf7c546381db0ebfc8", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 102, "deletions": 69, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,38 +1,56 @@\n-//! Generalized type folding mechanism. The setup is a bit convoluted\n-//! but allows for convenient usage. Let T be an instance of some\n-//! \"foldable type\" (one which implements `TypeFoldable`) and F be an\n-//! instance of a \"folder\" (a type which implements `TypeFolder`). Then\n-//! the setup is intended to be:\n+//! A generalized traversal mechanism for complex data structures that contain\n+//! type information.\n //!\n-//!     T.fold_with(F) --calls--> F.fold_T(T) --calls--> T.super_fold_with(F)\n+//! There are two types of traversal.\n+//! - Folding. This is a modifying traversal. It consumes the data structure,\n+//!   producing a (possibly) modified version of it. Both fallible and\n+//!   infallible versions are available. The name is potentially\n+//!   confusing, because this traversal is more like `Iterator::map` than\n+//!   `Iterator::fold`.\n+//! - Visiting. This is a read-only traversal of the data structure.\n //!\n-//! This way, when you define a new folder F, you can override\n-//! `fold_T()` to customize the behavior, and invoke `T.super_fold_with()`\n-//! to get the original behavior. Meanwhile, to actually fold\n-//! something, you can just write `T.fold_with(F)`, which is\n-//! convenient. (Note that `fold_with` will also transparently handle\n-//! things like a `Vec<T>` where T is foldable and so on.)\n+//! These traversals have limited flexibility. Only a small number of \"types of\n+//! interest\" within the complex data structures can receive custom\n+//! modification (when folding) or custom visitation (when visiting). These are\n+//! the ones containing the most important type-related information, such as\n+//! `Ty`, `Predicate`, `Region`, and `Const`.\n //!\n-//! In this ideal setup, the only function that actually *does*\n-//! anything is `T.super_fold_with()`, which traverses the type `T`.\n-//! Moreover, `T.super_fold_with()` should only ever call `T.fold_with()`.\n+//! There are two traits involved in each traversal type.\n+//! - The first trait is `TypeFoldable`, which is implemented once for many\n+//!   types. This includes both (a) types of interest, and (b) all other\n+//!   relevant types, including generic containers like `Vec` and `Option`. It\n+//!   defines a \"skeleton\" of how they should be traversed, for both folding\n+//!   and visiting.\n+//! - The second trait is `TypeFolder`/`FallibleTypeFolder` (for\n+//!   infallible/fallible folding traversals) or `TypeVisitor` (for visiting\n+//!   traversals). One of these is implemented for each folder/visitor. This\n+//!   defines how types of interest are handled.\n //!\n-//! In some cases, we follow a degenerate pattern where we do not have\n-//! a `fold_T` method. Instead, `T.fold_with` traverses the structure directly.\n-//! This is suboptimal because the behavior cannot be overridden, but it's\n-//! much less work to implement. If you ever *do* need an override that\n-//! doesn't exist, it's not hard to convert the degenerate pattern into the\n-//! proper thing.\n+//! This means each traversal is a mixture of (a) generic traversal operations,\n+//! and (b) custom fold/visit operations that are specific to the\n+//! folder/visitor.\n+//! - The `TypeFoldable` impls handle most of the traversal, and call into\n+//!   `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` when they encounter a\n+//!   type of interest.\n+//! - A `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` may also call back into\n+//!   a `TypeFoldable` impl, because (a) the types of interest are recursive\n+//!   and can contain other types of interest, and (b) each folder/visitor\n+//!   might provide custom handling only for some types of interest, or only\n+//!   for some variants of each type of interest, and then use default\n+//!   traversal for the remaining cases.\n //!\n-//! A `TypeFoldable` T can also be visited by a `TypeVisitor` V using similar setup:\n-//!\n-//!     T.visit_with(V) --calls--> V.visit_T(T) --calls--> T.super_visit_with(V).\n-//!\n-//! These methods return true to indicate that the visitor has found what it is\n-//! looking for, and does not need to visit anything else.\n+//! For example, if you have `struct S(Ty, U)` where `S: TypeFoldable` and `U:\n+//! TypeFoldable`, and an instance `S(ty, u)`, it would be visited like so:\n+//! ```\n+//! s.visit_with(visitor) calls\n+//! - s.super_visit_with(visitor) calls\n+//!   - ty.visit_with(visitor) calls\n+//!     - visitor.visit_ty(ty) may call\n+//!       - ty.super_visit_with(visitor)\n+//!   - u.visit_with(visitor)\n+//! ```\n use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -41,42 +59,67 @@ use std::collections::BTreeMap;\n use std::fmt;\n use std::ops::ControlFlow;\n \n-/// This trait is implemented for every type that can be folded.\n-/// Basically, every type that has a corresponding method in `TypeFolder`.\n+/// This trait is implemented for every type that can be folded/visited,\n+/// providing the skeleton of the traversal.\n ///\n-/// To implement this conveniently, use the derive macro located in `rustc_macros`.\n+/// To implement this conveniently, use the derive macro located in\n+/// `rustc_macros`.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n-    /// Consumers may find this more convenient to use with infallible folders than\n-    /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the\n-    /// provided default definition delegates.  Implementors **should not** override\n-    /// this provided default definition, to ensure that the two methods are coherent\n-    /// (provide a definition of `try_super_fold_with` instead).\n-    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n-        self.try_super_fold_with(folder).into_ok()\n+    /// The main entry point for folding. To fold a value `t` with a folder `f`\n+    /// call: `t.try_fold_with(f)`.\n+    ///\n+    /// For types of interest (such as `Ty`), this default is overridden with a\n+    /// method that calls a folder method specifically for that type (such as\n+    /// `F::try_fold_ty`). This is where control transfers from `TypeFoldable`\n+    /// to `TypeFolder`.\n+    ///\n+    /// For other types, this default is used.\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_super_fold_with(folder)\n     }\n-    /// Consumers may find this more convenient to use with infallible folders than\n-    /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided\n-    /// default definition delegates.  Implementors **should not** override this\n-    /// provided default definition, to ensure that the two methods are coherent\n-    /// (provide a definition of `try_fold_with` instead).\n+\n+    /// A convenient alternative to `try_fold_with` for use with infallible\n+    /// folders. Do not override this method, to ensure coherence with\n+    /// `try_fold_with`.\n     fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n         self.try_fold_with(folder).into_ok()\n     }\n \n+    /// Traverses the type in question, typically by calling `try_fold_with` on\n+    /// each field/element. This is true even for types of interest such as\n+    /// `Ty`. This should only be called within `TypeFolder` methods, when\n+    /// non-custom traversals are desired for types of interest.\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error>;\n \n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_super_fold_with(folder)\n+    /// A convenient alternative to `try_super_fold_with` for use with\n+    /// infallible folders. Do not override this method, to ensure coherence\n+    /// with `try_super_fold_with`.\n+    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+        self.try_super_fold_with(folder).into_ok()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+    /// The entry point for visiting. To visit a value `t` with a visitor `v`\n+    /// call: `t.visit_with(v)`.\n+    ///\n+    /// For types of interest (such as `Ty`), this default is overridden with a\n+    /// method that calls a visitor method specifically for that type (such as\n+    /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n+    /// `TypeVisitor`.\n+    ///\n+    /// For other types, this default is used.\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.super_visit_with(visitor)\n     }\n \n+    /// Traverses the type in question, typically by calling `visit_with` on\n+    /// each field/element. This is true even for types of interest such as\n+    /// `Ty`. This should only be called within `TypeVisitor` methods, when\n+    /// non-custom traversals are desired for types of interest.\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+\n     /// Returns `true` if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n     /// If `binder` is `ty::INNERMOST`, this indicates whether\n@@ -168,24 +211,13 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n-    fn try_super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n-}\n-\n-/// The `TypeFolder` trait defines the actual *folding*. There is a\n-/// method defined for every foldable type. Each of these has a\n-/// default implementation that does an \"identity\" fold. Within each\n-/// identity fold, it should invoke `foo.fold_with(self)` to fold each\n-/// sub-item.\n+/// This trait is implemented for every folding traversal. There is a fold\n+/// method defined for every type of interest. Each such method has a default\n+/// that does an \"identity\" fold.\n ///\n /// If this folder is fallible (and therefore its [`Error`][`TypeFolder::Error`]\n-/// associated type is something other than the default, never),\n-/// [`FallibleTypeFolder`] should be implemented manually; otherwise,\n+/// associated type is something other than the default `!`) then\n+/// [`FallibleTypeFolder`] should be implemented manually. Otherwise,\n /// a blanket implementation of [`FallibleTypeFolder`] will defer to\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n@@ -238,11 +270,9 @@ pub trait TypeFolder<'tcx>: Sized {\n     }\n }\n \n-/// The `FallibleTypeFolder` trait defines the actual *folding*. There is a\n-/// method defined for every foldable type. Each of these has a\n-/// default implementation that does an \"identity\" fold. Within each\n-/// identity fold, it should invoke `foo.try_fold_with(self)` to fold each\n-/// sub-item.\n+/// This trait is implemented for every folding traversal. There is a fold\n+/// method defined for every type of interest. Each such method has a default\n+/// that does an \"identity\" fold.\n ///\n /// A blanket implementation of this trait (that defers to the relevant\n /// method of [`TypeFolder`]) is provided for all infallible folders in\n@@ -282,8 +312,8 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n     }\n }\n \n-// Blanket implementation of fallible trait for infallible folders\n-// delegates to infallible methods to prevent incoherence\n+// This blanket implementation of the fallible trait for infallible folders\n+// delegates to infallible methods to ensure coherence.\n impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n where\n     F: TypeFolder<'tcx, Error = !>,\n@@ -322,6 +352,9 @@ where\n     }\n }\n \n+/// This trait is implemented for every visiting traversal. There is a visit\n+/// method defined for every type of interest. Each such method has a default\n+/// that recurses into the type's fields in a non-custom fashion.\n pub trait TypeVisitor<'tcx>: Sized {\n     type BreakTy = !;\n "}, {"sha": "e4691dee7793a4a80e0dceca5b40835ab2a7ad77", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -8,6 +8,7 @@ use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n+use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -663,14 +664,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n \n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n-//\n-// Ideally, each type should invoke `folder.fold_foo(self)` and\n-// nothing else. In some cases, though, we haven't gotten around to\n-// adding methods on the `folder` yet, and thus the folding is\n-// hard-coded here. This is less-flexible, because folders cannot\n-// override the behavior, but there are a lot of random types and one\n-// can easily refactor the folding into the TypeFolder trait as\n-// needed.\n \n /// AdtDefs are basically the same as a DefId.\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n@@ -1270,3 +1263,13 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n         self.substs.visit_with(visitor)\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+        Ok(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}"}, {"sha": "05de52458add2e74dfefcdfaba0ffd03850f2beb", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1241,9 +1241,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let yield_ty = if let Some(yield_ty) = body.yield_ty() {\n-            yield_ty\n-        } else {\n+        let Some(yield_ty) = body.yield_ty() else {\n             // This only applies to generators\n             return;\n         };"}, {"sha": "cdfd49ef478a4875ed80ea4a795c8cd2bff9cdba", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -212,12 +212,7 @@ fn normalize_array_len_call<'tcx>(\n                         let Some(local) = place.as_local() else { return };\n                         match operand {\n                             Operand::Copy(place) | Operand::Move(place) => {\n-                                let operand_local =\n-                                    if let Some(local) = place.local_or_deref_local() {\n-                                        local\n-                                    } else {\n-                                        return;\n-                                    };\n+                                let Some(operand_local) = place.local_or_deref_local() else { return; };\n                                 if !interesting_locals.contains(operand_local) {\n                                     return;\n                                 }"}, {"sha": "72c1b3fa6e98c0b11cce882b5c1d01880fa59f4d", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -947,9 +947,7 @@ fn visit_instance_use<'tcx>(\n /// Returns `true` if we should codegen an instance in the local crate, or returns `false` if we\n /// can just link to the upstream crate and therefore don't need a mono item.\n fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n-    let def_id = if let Some(def_id) = instance.def.def_id_if_not_guaranteed_local_codegen() {\n-        def_id\n-    } else {\n+    let Some(def_id) = instance.def.def_id_if_not_guaranteed_local_codegen() else {\n         return true;\n     };\n "}, {"sha": "04baa01832be64e171a8178d9442bda61e978039", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -8,13 +8,11 @@ use std::io::prelude::*;\n /// During the same compile all closures dump the information in the same file\n /// \"closure_profile_XXXXX.csv\", which is created in the directory where the compiler is invoked.\n crate fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n-    let mut file = if let Ok(file) = OpenOptions::new()\n+    let Ok(mut file) = OpenOptions::new()\n         .create(true)\n         .append(true)\n         .open(&format!(\"closure_profile_{}.csv\", std::process::id()))\n-    {\n-        file\n-    } else {\n+    else {\n         eprintln!(\"Cound't open file for writing closure profile\");\n         return;\n     };"}, {"sha": "4cdd83c0acd3c5a4af56fdce6b4418970228ecef", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -158,9 +158,7 @@ impl<'a> StringReader<'a> {\n         Some(match token {\n             rustc_lexer::TokenKind::LineComment { doc_style } => {\n                 // Skip non-doc comments\n-                let doc_style = if let Some(doc_style) = doc_style {\n-                    doc_style\n-                } else {\n+                let Some(doc_style) = doc_style else {\n                     self.lint_unicode_text_flow(start);\n                     return None;\n                 };\n@@ -185,9 +183,7 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 // Skip non-doc comments\n-                let doc_style = if let Some(doc_style) = doc_style {\n-                    doc_style\n-                } else {\n+                let Some(doc_style) = doc_style else {\n                     self.lint_unicode_text_flow(start);\n                     return None;\n                 };"}, {"sha": "eb0d1a12c778f471333f10ac21babd5b9a2253dc", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -4,6 +4,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n #![feature(box_patterns)]\n+#![feature(let_else)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "f9926a71c30ac2cd44c6cb9628fa18a3cecd7e23", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -704,17 +704,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ) = &bounded_ty.kind\n         {\n             // use this to verify that ident is a type param.\n-            let partial_res = if let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n+            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n                 bounded_ty.id,\n                 None,\n                 &Segment::from_path(path),\n                 Namespace::TypeNS,\n                 span,\n                 true,\n                 CrateLint::No,\n-            ) {\n-                partial_res\n-            } else {\n+            ) else {\n                 return false;\n             };\n             if !(matches!(\n@@ -731,17 +729,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         if let ast::TyKind::Path(None, type_param_path) = &ty.peel_refs().kind {\n             // Confirm that the `SelfTy` is a type parameter.\n-            let partial_res = if let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n+            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n                 bounded_ty.id,\n                 None,\n                 &Segment::from_path(type_param_path),\n                 Namespace::TypeNS,\n                 span,\n                 true,\n                 CrateLint::No,\n-            ) {\n-                partial_res\n-            } else {\n+            ) else {\n                 return false;\n             };\n             if !(matches!("}, {"sha": "6d1b6e5ac84d4e25ff5ea4305ae62babc0ca9a50", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1099,9 +1099,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => return false,\n         };\n \n-        let ret_ty = if let hir::FnRetTy::Return(ret_ty) = sig.decl.output {\n-            ret_ty\n-        } else {\n+        let hir::FnRetTy::Return(ret_ty) = sig.decl.output else {\n             return false;\n         };\n \n@@ -1168,17 +1166,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n         let sm = self.tcx.sess.source_map();\n-        let snippet = if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true) = (\n+        let (true, hir::TyKind::TraitObject(..), Ok(snippet), true) = (\n             // Verify that we're dealing with a return `dyn Trait`\n             ret_ty.span.overlaps(span),\n             &ret_ty.kind,\n             sm.span_to_snippet(ret_ty.span),\n             // If any of the return types does not conform to the trait, then we can't\n             // suggest `impl Trait` nor trait objects: it is a type mismatch error.\n             all_returns_conform_to_trait,\n-        ) {\n-            snippet\n-        } else {\n+        ) else {\n             return false;\n         };\n         err.code(error_code!(E0746));"}, {"sha": "4869d193d8056863059ef02d0abf4309fa15676d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1318,10 +1318,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,\n     ) -> Ty<'tcx> {\n         // Find the relevant variant\n-        let (variant, adt_ty) = if let Some(variant_ty) = self.check_struct_path(qpath, expr.hir_id)\n-        {\n-            variant_ty\n-        } else {\n+        let Some((variant, adt_ty)) = self.check_struct_path(qpath, expr.hir_id) else {\n             self.check_struct_fields_on_error(fields, base_expr);\n             return self.tcx.ty_error();\n         };"}, {"sha": "5a361edecd9c00298e95a3d91446d73a241a8f4d", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,6 +1,7 @@\n use crate::cmp::{self, Ordering};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n+use super::super::try_process;\n use super::super::TrustedRandomAccessNoCoerce;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n use super::super::{FlatMap, Flatten};\n@@ -1777,6 +1778,87 @@ pub trait Iterator {\n         FromIterator::from_iter(self)\n     }\n \n+    /// Fallibly transforms an iterator into a collection, short circuiting if\n+    /// a failure is encountered.\n+    ///\n+    /// `try_collect()` is a variation of [`collect()`][`collect`] that allows fallible\n+    /// conversions during collection. Its main use case is simplifying conversions from\n+    /// iterators yielding [`Option<T>`][`Option`] into `Option<Collection<T>>`, or similarly for other [`Try`]\n+    /// types (e.g. [`Result`]).\n+    ///\n+    /// Importantly, `try_collect()` doesn't require that the outer [`Try`] type also implements [`FromIterator`];\n+    /// only the inner type produced on `Try::Output` must implement it. Concretely,\n+    /// this means that collecting into `ControlFlow<_, Vec<i32>>` is valid because `Vec<i32>` implements\n+    /// [`FromIterator`], even though [`ControlFlow`] doesn't.\n+    ///\n+    /// Also, if a failure is encountered during `try_collect()`, the iterator is still valid and\n+    /// may continue to be used, in which case it will continue iterating starting after the element that\n+    /// triggered the failure. See the last example below for an example of how this works.\n+    ///\n+    /// # Examples\n+    /// Successfully collecting an iterator of `Option<i32>` into `Option<Vec<i32>>`:\n+    /// ```\n+    /// #![feature(iterator_try_collect)]\n+    ///\n+    /// let u = vec![Some(1), Some(2), Some(3)];\n+    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n+    /// assert_eq!(v, Some(vec![1, 2, 3]));\n+    /// ```\n+    ///\n+    /// Failing to collect in the same way:\n+    /// ```\n+    /// #![feature(iterator_try_collect)]\n+    ///\n+    /// let u = vec![Some(1), Some(2), None, Some(3)];\n+    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n+    /// assert_eq!(v, None);\n+    /// ```\n+    ///\n+    /// A similar example, but with `Result`:\n+    /// ```\n+    /// #![feature(iterator_try_collect)]\n+    ///\n+    /// let u: Vec<Result<i32, ()>> = vec![Ok(1), Ok(2), Ok(3)];\n+    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n+    /// assert_eq!(v, Ok(vec![1, 2, 3]));\n+    ///\n+    /// let u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\n+    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n+    /// assert_eq!(v, Err(()));\n+    /// ```\n+    ///\n+    /// Finally, even [`ControlFlow`] works, despite the fact that it\n+    /// doesn't implement [`FromIterator`]. Note also that the iterator can\n+    /// continue to be used, even if a failure is encountered:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_collect)]\n+    ///\n+    /// use core::ops::ControlFlow::{Break, Continue};\n+    ///\n+    /// let u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\n+    /// let mut it = u.into_iter();\n+    ///\n+    /// let v = it.try_collect::<Vec<_>>();\n+    /// assert_eq!(v, Break(3));\n+    ///\n+    /// let v = it.try_collect::<Vec<_>>();\n+    /// assert_eq!(v, Continue(vec![4, 5]));\n+    /// ```\n+    ///\n+    /// [`collect`]: Iterator::collect\n+    #[inline]\n+    #[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]\n+    fn try_collect<B>(&mut self) -> ChangeOutputType<Self::Item, B>\n+    where\n+        Self: Sized,\n+        <Self as Iterator>::Item: Try,\n+        <<Self as Iterator>::Item as Try>::Residual: Residual<B>,\n+        B: FromIterator<<Self::Item as Try>::Output>,\n+    {\n+        try_process(self, |i| i.collect())\n+    }\n+\n     /// Consumes an iterator, creating two collections from it.\n     ///\n     /// The predicate passed to `partition()` can return `true`, or `false`."}, {"sha": "cf69f0a7a4d7e7e687bf781a33f4b050554a3c87", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -497,6 +497,52 @@ fn test_collect() {\n     assert!(a == b);\n }\n \n+#[test]\n+fn test_try_collect() {\n+    use core::ops::ControlFlow::{Break, Continue};\n+\n+    let u = vec![Some(1), Some(2), Some(3)];\n+    let v = u.into_iter().try_collect::<Vec<i32>>();\n+    assert_eq!(v, Some(vec![1, 2, 3]));\n+\n+    let u = vec![Some(1), Some(2), None, Some(3)];\n+    let mut it = u.into_iter();\n+    let v = it.try_collect::<Vec<i32>>();\n+    assert_eq!(v, None);\n+    let v = it.try_collect::<Vec<i32>>();\n+    assert_eq!(v, Some(vec![3]));\n+\n+    let u: Vec<Result<i32, ()>> = vec![Ok(1), Ok(2), Ok(3)];\n+    let v = u.into_iter().try_collect::<Vec<i32>>();\n+    assert_eq!(v, Ok(vec![1, 2, 3]));\n+\n+    let u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\n+    let v = u.into_iter().try_collect::<Vec<i32>>();\n+    assert_eq!(v, Err(()));\n+\n+    let numbers = vec![1, 2, 3, 4, 5];\n+    let all_positive = numbers\n+        .iter()\n+        .cloned()\n+        .map(|n| if n > 0 { Some(n) } else { None })\n+        .try_collect::<Vec<i32>>();\n+    assert_eq!(all_positive, Some(numbers));\n+\n+    let numbers = vec![-2, -1, 0, 1, 2];\n+    let all_positive =\n+        numbers.into_iter().map(|n| if n > 0 { Some(n) } else { None }).try_collect::<Vec<i32>>();\n+    assert_eq!(all_positive, None);\n+\n+    let u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\n+    let mut it = u.into_iter();\n+\n+    let v = it.try_collect::<Vec<_>>();\n+    assert_eq!(v, Break(3));\n+\n+    let v = it.try_collect::<Vec<_>>();\n+    assert_eq!(v, Continue(vec![4, 5]));\n+}\n+\n // just tests by whether or not this compiles\n fn _empty_impl_all_auto_traits<T>() {\n     use std::panic::{RefUnwindSafe, UnwindSafe};"}, {"sha": "32f3405243ceaa6d8cfff8ab074ddc5f22bff116", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -67,6 +67,7 @@\n #![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n+#![feature(iterator_try_collect)]\n #![feature(iterator_try_reduce)]\n #![feature(const_mut_refs)]\n #![feature(const_pin)]"}, {"sha": "e544608f83c299c9ad3f2262b2ffc50062a48298", "filename": "library/std/src/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -268,6 +268,12 @@ pub fn is_separator(c: char) -> bool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAIN_SEPARATOR: char = crate::sys::path::MAIN_SEP;\n \n+/// The primary separator of path components for the current platform.\n+///\n+/// For example, `/` on Unix and `\\` on Windows.\n+#[unstable(feature = \"main_separator_str\", issue = \"94071\")]\n+pub const MAIN_SEPARATOR_STR: &str = crate::sys::path::MAIN_SEP_STR;\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Misc helpers\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "029049d5434352cdf868e74abf4ab96c594446bf", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1877,12 +1877,6 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n     } else {\n         cmd.env(\"CFG_MINGW\", \"0\").env(\"CFG_ABI\", \"MSVC\");\n     }\n-\n-    if target.contains(\"x86_64\") {\n-        cmd.env(\"CFG_PLATFORM\", \"x64\");\n-    } else {\n-        cmd.env(\"CFG_PLATFORM\", \"x86\");\n-    }\n }\n \n /// Maybe add LLVM object files to the given destination lib-dir. Allows either static or dynamic linking."}, {"sha": "670c4df414f31ae2c34dd8da8da51a3dcce93cff", "filename": "src/doc/unstable-book/src/language-features/asm-const.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-const.md?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,8 +1,8 @@\n # `asm_const`\n \n-The tracking issue for this feature is: [#72016]\n+The tracking issue for this feature is: [#93332]\n \n-[#72016]: https://github.com/rust-lang/rust/issues/72016\n+[#93332]: https://github.com/rust-lang/rust/issues/93332\n \n ------------------------\n "}, {"sha": "0a48eb4f81a128fb8e0927f0d214b2da544001d3", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,8 +1,8 @@\n # `asm_experimental_arch`\n \n-The tracking issue for this feature is: [#72016]\n+The tracking issue for this feature is: [#93335]\n \n-[#72016]: https://github.com/rust-lang/rust/issues/72016\n+[#93335]: https://github.com/rust-lang/rust/issues/93335\n \n ------------------------\n "}, {"sha": "103d91caf4ccd4c4e716cd3aeaed69e8086e078a", "filename": "src/doc/unstable-book/src/language-features/asm-sym.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,8 +1,8 @@\n # `asm_sym`\n \n-The tracking issue for this feature is: [#72016]\n+The tracking issue for this feature is: [#93333]\n \n-[#72016]: https://github.com/rust-lang/rust/issues/72016\n+[#93333]: https://github.com/rust-lang/rust/issues/93333\n \n ------------------------\n "}, {"sha": "809e6d75b35bfedf38fee6c4e805cc69f0fd26da", "filename": "src/doc/unstable-book/src/language-features/asm-unwind.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-unwind.md?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,8 +1,8 @@\n # `asm_unwind`\n \n-The tracking issue for this feature is: [#72016]\n+The tracking issue for this feature is: [#93334]\n \n-[#72016]: https://github.com/rust-lang/rust/issues/72016\n+[#93334]: https://github.com/rust-lang/rust/issues/93334\n \n ------------------------\n "}, {"sha": "ea18d915deb7a96e5fb97c4c0cf6067e9203f271", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -51,9 +51,7 @@ crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates\n     equalities.retain(|&(ref lhs, ref rhs)| {\n-        let (self_, trait_did, name) = if let Some(p) = lhs.projection() {\n-            p\n-        } else {\n+        let Some((self_, trait_did, name)) = lhs.projection() else {\n             return true;\n         };\n         let generic = match self_ {"}, {"sha": "7061a9674e4fb63be45ec59f5704763dcf47cd36", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -236,9 +236,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         let should_panic;\n         let ignore;\n         let edition;\n-        let kind = if let Some(Event::Start(Tag::CodeBlock(kind))) = event {\n-            kind\n-        } else {\n+        let Some(Event::Start(Tag::CodeBlock(kind))) = event else {\n             return event;\n         };\n "}, {"sha": "3e3302f8f4db701594d95d1228106cc4b9b0a338", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 104, "deletions": 121, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1963,16 +1963,12 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 assoc_consts.sort();\n \n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\">\\\n-                        <a href=\\\"#implementations\\\">Associated Constants</a>\\\n-                     </h3>\\\n-                     <div class=\\\"sidebar-links\\\">\",\n+                print_sidebar_block(\n+                    out,\n+                    \"implementations\",\n+                    \"Associated Constants\",\n+                    assoc_consts.iter(),\n                 );\n-                for line in assoc_consts {\n-                    write!(out, \"{}\", line);\n-                }\n-                out.push_str(\"</div>\");\n             }\n             let mut methods = v\n                 .iter()\n@@ -1983,14 +1979,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 methods.sort();\n \n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementations\\\">Methods</a></h3>\\\n-                     <div class=\\\"sidebar-links\\\">\",\n-                );\n-                for line in methods {\n-                    write!(out, \"{}\", line);\n-                }\n-                out.push_str(\"</div>\");\n+                print_sidebar_block(out, \"implementations\", \"Methods\", methods.iter());\n             }\n         }\n \n@@ -2029,14 +2018,6 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 ret\n             };\n \n-            let write_sidebar_links = |out: &mut Buffer, links: Vec<String>| {\n-                out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n-                for link in links {\n-                    out.push_str(&link);\n-                }\n-                out.push_str(\"</div>\");\n-            };\n-\n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n                 v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_auto());\n             let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n@@ -2047,27 +2028,30 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let blanket_format = format_impls(blanket_impl);\n \n             if !concrete_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#trait-implementations\\\">\\\n-                        Trait Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"trait-implementations\",\n+                    \"Trait Implementations\",\n+                    concrete_format.iter(),\n                 );\n-                write_sidebar_links(out, concrete_format);\n             }\n \n             if !synthetic_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#synthetic-implementations\\\">\\\n-                        Auto Trait Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"synthetic-implementations\",\n+                    \"Auto Trait Implementations\",\n+                    synthetic_format.iter(),\n                 );\n-                write_sidebar_links(out, synthetic_format);\n             }\n \n             if !blanket_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#blanket-implementations\\\">\\\n-                        Blanket Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"blanket-implementations\",\n+                    \"Blanket Implementations\",\n+                    blanket_format.iter(),\n                 );\n-                write_sidebar_links(out, blanket_format);\n             }\n         }\n     }\n@@ -2127,20 +2111,14 @@ fn sidebar_deref_methods(\n                 } else {\n                     \"deref-methods\"\n                 };\n-                write!(\n-                    out,\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#{}\\\">Methods from {}&lt;Target={}&gt;</a></h3>\",\n-                    id,\n+                let title = format!(\n+                    \"Methods from {}&lt;Target={}&gt;\",\n                     Escape(&format!(\"{:#}\", impl_.inner_impl().trait_.as_ref().unwrap().print(cx))),\n                     Escape(&format!(\"{:#}\", real_target.print(cx))),\n                 );\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 ret.sort();\n-                out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n-                for link in ret {\n-                    write!(out, \"{}\", link);\n-                }\n-                out.push_str(\"</div>\");\n+                print_sidebar_block(out, id, &title, ret.iter());\n             }\n         }\n \n@@ -2166,27 +2144,19 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        if let CtorKind::Fictive = s.struct_type {\n-            sidebar.push_str(\n-                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n-                <div class=\\\"sidebar-links\\\">\",\n-            );\n-\n-            for field in fields {\n-                sidebar.push_str(&field);\n+        match s.struct_type {\n+            CtorKind::Fictive => {\n+                print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n             }\n-\n-            sidebar.push_str(\"</div>\");\n-        } else if let CtorKind::Fn = s.struct_type {\n-            sidebar\n-                .push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Tuple Fields</a></h3>\");\n+            CtorKind::Fn => print_sidebar_title(&mut sidebar, \"fields\", \"Tuple Fields\"),\n+            CtorKind::Const => {}\n         }\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2214,18 +2184,50 @@ fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String\n     }\n }\n \n+/// Don't call this function directly!!! Use `print_sidebar_title` or `print_sidebar_block` instead!\n+fn print_sidebar_title_inner(buf: &mut Buffer, id: &str, title: &str) {\n+    write!(\n+        buf,\n+        \"<h3 class=\\\"sidebar-title\\\">\\\n+             <a href=\\\"#{}\\\">{}</a>\\\n+         </h3>\",\n+        id, title\n+    );\n+}\n+\n+fn print_sidebar_title(buf: &mut Buffer, id: &str, title: &str) {\n+    buf.push_str(\"<div class=\\\"block\\\">\");\n+    print_sidebar_title_inner(buf, id, title);\n+    buf.push_str(\"</div>\");\n+}\n+\n+fn print_sidebar_block(\n+    buf: &mut Buffer,\n+    id: &str,\n+    title: &str,\n+    items: impl Iterator<Item = impl fmt::Display>,\n+) {\n+    buf.push_str(\"<div class=\\\"block\\\">\");\n+    print_sidebar_title_inner(buf, id, title);\n+    buf.push_str(\"<ul>\");\n+    for item in items {\n+        write!(buf, \"<li>{}</li>\", item);\n+    }\n+    buf.push_str(\"</ul></div>\");\n+}\n+\n fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n-    buf.write_str(\"<div class=\\\"block items\\\">\");\n+    buf.write_str(\"<section>\");\n \n     fn print_sidebar_section(\n         out: &mut Buffer,\n         items: &[clean::Item],\n-        before: &str,\n+        id: &str,\n+        title: &str,\n         filter: impl Fn(&clean::Item) -> bool,\n-        write: impl Fn(&mut Buffer, &str),\n-        after: &str,\n+        mapper: impl Fn(&str) -> String,\n     ) {\n-        let mut items = items\n+        let mut items: Vec<&str> = items\n             .iter()\n             .filter_map(|m| match m.name {\n                 Some(ref name) if filter(m) => Some(name.as_str()),\n@@ -2235,52 +2237,44 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n         if !items.is_empty() {\n             items.sort_unstable();\n-            out.push_str(before);\n-            for item in items.into_iter() {\n-                write(out, &item);\n-            }\n-            out.push_str(after);\n+            print_sidebar_block(out, id, title, items.into_iter().map(mapper));\n         }\n     }\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-types\\\">\\\n-            Associated Types</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"associated-types\",\n+        \"Associated Types\",\n         |m| m.is_associated_type(),\n-        |out, sym| write!(out, \"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-const\\\">\\\n-            Associated Constants</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"associated-const\",\n+        \"Associated Constants\",\n         |m| m.is_associated_const(),\n-        |out, sym| write!(out, \"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#required-methods\\\">\\\n-            Required Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"required-methods\",\n+        \"Required Methods\",\n         |m| m.is_ty_method(),\n-        |out, sym| write!(out, \"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#provided-methods\\\">\\\n-            Provided Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"provided-methods\",\n+        \"Provided Methods\",\n         |m| m.is_method(),\n-        |out, sym| write!(out, \"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n     );\n \n     let cache = cx.cache();\n@@ -2295,37 +2289,31 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n         if !res.is_empty() {\n             res.sort();\n-            buf.push_str(\n-                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#foreign-impls\\\">\\\n-                    Implementations on Foreign Types</a></h3>\\\n-                 <div class=\\\"sidebar-links\\\">\",\n+            print_sidebar_block(\n+                buf,\n+                \"foreign-impls\",\n+                \"Implementations on Foreign Types\",\n+                res.iter().map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name))),\n             );\n-            for (name, id) in res.into_iter() {\n-                write!(buf, \"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name));\n-            }\n-            buf.push_str(\"</div>\");\n         }\n     }\n \n     sidebar_assoc_items(cx, buf, it);\n \n-    buf.push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementors\\\">Implementors</a></h3>\");\n+    print_sidebar_title(buf, \"implementors\", \"Implementors\");\n     if t.is_auto {\n-        buf.push_str(\n-            \"<h3 class=\\\"sidebar-title\\\"><a \\\n-                href=\\\"#synthetic-implementors\\\">Auto Implementors</a></h3>\",\n-        );\n+        print_sidebar_title(buf, \"synthetic-implementors\", \"Auto Implementors\");\n     }\n \n-    buf.push_str(\"</div>\")\n+    buf.push_str(\"</section>\")\n }\n \n fn sidebar_primitive(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     let mut sidebar = Buffer::new();\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2334,7 +2322,7 @@ fn sidebar_typedef(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2355,22 +2343,13 @@ fn sidebar_union(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, u: &clean\n     let fields = get_struct_fields_name(&u.fields);\n \n     if !fields.is_empty() {\n-        sidebar.push_str(\n-            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n-            <div class=\\\"sidebar-links\\\">\",\n-        );\n-\n-        for field in fields {\n-            sidebar.push_str(&field);\n-        }\n-\n-        sidebar.push_str(\"</div>\");\n+        print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2388,17 +2367,13 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n         .collect::<Vec<_>>();\n     if !variants.is_empty() {\n         variants.sort_unstable();\n-        sidebar.push_str(&format!(\n-            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#variants\\\">Variants</a></h3>\\\n-             <div class=\\\"sidebar-links\\\">{}</div>\",\n-            variants.join(\"\"),\n-        ));\n+        print_sidebar_block(&mut sidebar, \"variants\", \"Variants\", variants.iter());\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2569,7 +2544,15 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\"><ul>{}</ul></div>\", sidebar);\n+        write!(\n+            buf,\n+            \"<section>\\\n+                 <div class=\\\"block\\\">\\\n+                     <ul>{}</ul>\\\n+                 </div>\\\n+             </section>\",\n+            sidebar\n+        );\n     }\n }\n \n@@ -2578,7 +2561,7 @@ fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n "}, {"sha": "e84dc6c72409f6ee2bc98089a3ad6144a8e77503", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1752,9 +1752,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                             <ul>\",\n                     );\n \n-                    let adt = if let Adt(adt, _) = ty_layout.ty.kind() {\n-                        adt\n-                    } else {\n+                    let Adt(adt, _) = ty_layout.ty.kind() else {\n                         span_bug!(tcx.def_span(ty_def_id), \"not an adt\")\n                     };\n "}, {"sha": "f1e0a89883ab8d2915c862304aa0ed126ee2c3d5", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -484,10 +484,6 @@ h2.location a {\n \toverflow: hidden;\n }\n \n-.sidebar-links a {\n-\twhite-space: nowrap;\n-}\n-\n .sidebar h2 {\n \tborder-bottom: none;\n \tfont-weight: 500;\n@@ -504,11 +500,14 @@ h2.location a {\n \tmargin: 0;\n }\n \n-.sidebar-links,\n-.block {\n+.sidebar-elems .block {\n \tmargin-bottom: 2em;\n }\n \n+.sidebar-elems .block li a {\n+\twhite-space: nowrap;\n+}\n+\n .mobile-topbar {\n \tdisplay: none;\n }"}, {"sha": "33a1530d588efc031e8af5254abdaffe75d0f7ba", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1226,9 +1226,7 @@ impl LinkCollector<'_, '_> {\n         let base_node =\n             if item.is_mod() && inner_docs { self.mod_ids.last().copied() } else { parent_node };\n \n-        let mut module_id = if let Some(id) = base_node {\n-            id\n-        } else {\n+        let Some(mut module_id) = base_node else {\n             // This is a bug.\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);\n             resolution_failure(\n@@ -1977,9 +1975,7 @@ fn resolution_failure(\n                     // If so, report it and say the first which failed; if not, say the first path segment didn't resolve.\n                     let mut name = path_str;\n                     'outer: loop {\n-                        let (start, end) = if let Some(x) = split(name) {\n-                            x\n-                        } else {\n+                        let Some((start, end)) = split(name) else {\n                             // avoid bug that marked [Quux::Z] as missing Z, not Quux\n                             if partial_res.is_none() {\n                                 *unresolved = name.into();"}, {"sha": "f9e91c299eabb32bb398519ad3bdf385f11dd0cb", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -152,9 +152,7 @@ where\n             }\n             hir::ExprKind::MethodCall(_, _, span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n-                let def_id = if let Some(def_id) = types.type_dependent_def_id(ex.hir_id) {\n-                    def_id\n-                } else {\n+                let Some(def_id) = types.type_dependent_def_id(ex.hir_id) else {\n                     trace!(\"type_dependent_def_id({}) = None\", ex.hir_id);\n                     return;\n                 };"}, {"sha": "e8b3a0929db61c3022a9c6e5160f07d006b9256c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -188,9 +188,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n         let tcx = self.cx.tcx;\n-        let res_did = if let Some(did) = res.opt_def_id() {\n-            did\n-        } else {\n+        let Some(res_did) = res.opt_def_id() else {\n             return false;\n         };\n "}, {"sha": "a680635ef8ae411f068db93f530ee913be1a2903", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -5,7 +5,7 @@ assert-attribute: (\"#blanket-implementations-list > details:nth-child(2)\", {\"ope\n // We first check that the impl block is open by default.\n assert-attribute: (\"#implementations + details\", {\"open\": \"\"})\n // To ensure that we will click on the currently hidden method.\n-assert-text: (\".sidebar-links > a\", \"must_use\")\n-click: \".sidebar-links > a\"\n+assert-text: (\".sidebar-elems section .block li > a\", \"must_use\")\n+click: \".sidebar-elems section .block li > a\"\n // We check that the impl block was opened as expected so that we can see the method.\n assert-attribute: (\"#implementations + details\", {\"open\": \"\"})"}, {"sha": "79f18db8fc7cde424abeb23607bedd19a005a963", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -33,7 +33,7 @@ assert-property: (\".mobile-topbar\", {\"clientHeight\": \"45\"})\n // Check that clicking an element from the sidebar scrolls to the right place\n // so the target is not obscured by the topbar.\n click: \".sidebar-menu-toggle\"\n-click: \".sidebar-links a\"\n+click: \".sidebar-elems section .block li > a\"\n assert-position: (\"#method\\.must_use\", {\"y\": 45})\n \n // Check that the bottom-most item on the sidebar menu can be scrolled fully into view."}, {"sha": "6b79b00d3f7862589a765b0da9fca70aa12dc33c", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -13,15 +13,15 @@ assert-css: (\"#all-types\", {\"color\": \"rgb(53, 109, 164)\"})\n // We check that we have the crates list and that the \"current\" on is \"test_docs\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"test_docs\")\n // And we're also supposed to have the list of items in the current module.\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(2)\", \"Macros\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(3)\", \"Structs\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(4)\", \"Enums\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(5)\", \"Traits\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(6)\", \"Functions\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(7)\", \"Type Definitions\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(8)\", \"Unions\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(9)\", \"Keywords\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(1)\", \"Modules\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(2)\", \"Macros\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(3)\", \"Structs\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(4)\", \"Enums\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(5)\", \"Traits\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(6)\", \"Functions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(7)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Unions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Keywords\")\n assert-text: (\"#structs + .item-table .item-left > a\", \"Foo\")\n click: \"#structs + .item-table .item-left > a\"\n \n@@ -30,7 +30,7 @@ assert-count: (\".sidebar .location\", 2)\n // We check that there is no crate listed outside of the top level.\n assert-false: \".sidebar-elems > .crate\"\n \n-click: \".sidebar-links a\"\n+click: \".sidebar-elems section .block li > a\"\n assert-property-false: (\"html\", {\"scrollTop\": \"0\"})\n \n click: \".sidebar h2.location a\"\n@@ -47,11 +47,11 @@ assert-text: (\".sidebar > .location\", \"Crate lib2\")\n // We check that we have the crates list and that the \"current\" on is now \"lib2\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"lib2\")\n // We now go to the \"foobar\" function page.\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(2)\", \"Structs\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(3)\", \"Traits\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(4)\", \"Functions\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(5)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(1)\", \"Modules\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(2)\", \"Structs\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(3)\", \"Traits\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(4)\", \"Functions\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(5)\", \"Type Definitions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foobar\")\n click: \"#functions + .item-table .item-left > a\"\n \n@@ -72,12 +72,12 @@ goto: ./sub_module/sub_sub_module/index.html\n assert-text: (\".sidebar > .location\", \"Module sub_sub_module\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems .crate\"\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(1)\", \"Functions\")\n+assert-text: (\".sidebar-elems > section ul > li:nth-child(1)\", \"Functions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n \n // Links to trait implementations in the sidebar should not wrap even if they are long.\n goto: file://|DOC_PATH|/lib2/struct.HasALongTraitWithParams.html\n-assert-property: (\".sidebar-links a\", {\"offsetHeight\": 29})\n+assert-property: (\".sidebar-elems section .block li > a\", {\"offsetHeight\": 29})\n \n // Test that clicking on of the \"In <module>\" headings in the sidebar links to the\n // appropriate anchor in index.html."}, {"sha": "d77d1dca483e0e0cbbb03cb169d98e08f9314bc0", "filename": "src/test/rustdoc-gui/trait-sidebar-item-order.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,8 +1,8 @@\n // Checks that the elements in the sidebar are alphabetically sorted.\n goto: file://|DOC_PATH|/test_docs/trait.AnotherOne.html\n-assert-text: (\".sidebar-links a:nth-of-type(1)\", \"another\")\n-assert-text: (\".sidebar-links a:nth-of-type(2)\", \"func1\")\n-assert-text: (\".sidebar-links a:nth-of-type(3)\", \"func2\")\n-assert-text: (\".sidebar-links a:nth-of-type(4)\", \"func3\")\n-assert-text: (\".sidebar-links a:nth-of-type(5)\", \"hello\")\n-assert-text: (\".sidebar-links a:nth-of-type(6)\", \"why_not\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(1) > a\", \"another\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(2) > a\", \"func1\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(3) > a\", \"func2\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(4) > a\", \"func3\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(5) > a\", \"hello\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(6) > a\", \"why_not\")"}, {"sha": "da50fb86cd581a57bf6694df89e97a591677d2ec", "filename": "src/test/rustdoc/associated-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassociated-consts.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -10,7 +10,7 @@ pub struct Bar;\n \n // @has 'foo/struct.Bar.html'\n // @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n-// @has - '//div[@class=\"sidebar-elems\"]//div[@class=\"sidebar-links\"]/a' 'FOO'\n+// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Bar {\n     const FOO: u32 = 1;\n \n@@ -23,7 +23,7 @@ pub enum Foo {\n \n // @has 'foo/enum.Foo.html'\n // @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n-// @has - '//div[@class=\"sidebar-elems\"]//div[@class=\"sidebar-links\"]/a' 'FOO'\n+// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Foo {\n     const FOO: u32 = 1;\n "}, {"sha": "fdf8434224f839b0a00453f32ae77eb2b147b3bf", "filename": "src/test/rustdoc/deref-mut-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-mut-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-mut-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-mut-methods.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -9,7 +9,7 @@ impl Foo {\n }\n \n // @has foo/struct.Bar.html\n-// @has - '//div[@class=\"sidebar-links\"]/a[@href=\"#method.foo\"]' 'foo'\n+// @has - '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.foo\"]' 'foo'\n pub struct Bar {\n     foo: Foo,\n }"}, {"sha": "746df9c804ebb37a876355449063ff06a309dcbe", "filename": "src/test/rustdoc/deref-recursive-pathbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -8,9 +8,9 @@\n // @has '-' '//*[@id=\"deref-methods-Path\"]' 'Methods from Deref<Target = Path>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.exists\"]' 'pub fn exists(&self)'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-PathBuf\"]' 'Methods from Deref<Target=PathBuf>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.as_path\"]' 'as_path'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.as_path\"]' 'as_path'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Path\"]' 'Methods from Deref<Target=Path>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.exists\"]' 'exists'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.exists\"]' 'exists'\n \n #![crate_name = \"foo\"]\n "}, {"sha": "d5f8473f2842d255754d90d44bb6a16cedaafc2f", "filename": "src/test/rustdoc/deref-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -8,9 +8,9 @@\n // @has '-' '//*[@id=\"deref-methods-Baz\"]' 'Methods from Deref<Target = Baz>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.baz\"]' 'pub fn baz(&self)'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Bar\"]' 'Methods from Deref<Target=Bar>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.bar\"]' 'bar'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.bar\"]' 'bar'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Baz\"]' 'Methods from Deref<Target=Baz>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.baz\"]' 'baz'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.baz\"]' 'baz'\n \n #![crate_name = \"foo\"]\n "}, {"sha": "28f977e315abf4aabe9b53f880767d09386dfdad", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -7,10 +7,10 @@\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-FooJ\"]' 'Methods from Deref<Target=FooJ>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_j\"]' 'foo_j'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_a\"]' 'foo_a'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_b\"]' 'foo_b'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_c\"]' 'foo_c'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_j\"]' 'foo_j'\n \n pub struct FooA;\n pub type FooB = FooA;"}, {"sha": "b7bbf140cfd00309faba4d42d4c9b582010c6335", "filename": "src/test/rustdoc/double-quote-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -8,5 +8,5 @@ pub trait Foo<T> {\n pub struct Bar;\n \n // @has foo/struct.Bar.html\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo%3Cunsafe%20extern%20%22C%22%20fn()%3E\"]' 'Foo<unsafe extern \"C\" fn()>'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo%3Cunsafe%20extern%20%22C%22%20fn()%3E\"]' 'Foo<unsafe extern \"C\" fn()>'\n impl Foo<unsafe extern \"C\" fn()> for Bar {}"}, {"sha": "1268c9587f84724f3c0349ab6335567f4ac67347", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -7,7 +7,7 @@ pub struct Bar;\n \n // @has foo/struct.Foo.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Foo;\n-// @has foo/struct.Foo.html '//div[@class=\"sidebar-links\"]/a[@href=\"#impl-ToString\"]' 'ToString'\n+// @has foo/struct.Foo.html '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-ToString\"]' 'ToString'\n \n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "50f4af3aaafef91a61c64eb786846e1486544bad", "filename": "src/test/rustdoc/method-list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmethod-list.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,8 +1,8 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'super_long_name'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Disp'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'super_long_name'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Disp'\n pub struct Foo(usize);\n \n impl Foo {"}, {"sha": "b995fff1f9aa70633373f937aa762100917c57f0", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -5,5 +5,5 @@ pub struct Foo;\n \n // @has foo/struct.Foo.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n-// @has - '//*[@class=\"sidebar-links\"]/a' '!Sync'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' '!Sync'\n impl !Sync for Foo {}"}, {"sha": "619f40eff8984fc6ee45fdf1f58fa233b23e60c2", "filename": "src/test/rustdoc/recursive-deref-sidebar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -9,13 +9,13 @@ impl B { pub fn foo_b(&self) {} }\n pub struct C {}\n impl C { pub fn foo_c(&self) {} }\n \n-// @has recursive_deref_sidebar/struct.A.html '//div[@class=\"sidebar-links\"]' 'foo_b'\n+// @has recursive_deref_sidebar/struct.A.html '//*[@class=\"sidebar-elems\"]//section' 'foo_b'\n impl Deref for A {\n     type Target = B;\n     fn deref(&self) -> &B { todo!() }\n }\n \n-// @has recursive_deref_sidebar/struct.A.html '//div[@class=\"sidebar-links\"]' 'foo_c'\n+// @has recursive_deref_sidebar/struct.A.html '//*[@class=\"sidebar-elems\"]//section' 'foo_c'\n impl Deref for B {\n     type Target = C;\n     fn deref(&self) -> &C { todo!() }"}, {"sha": "375cad9da7f88010070b87b326750d55e63c5dc7", "filename": "src/test/rustdoc/sidebar-items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-items.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -2,13 +2,13 @@\n \n // @has foo/trait.Foo.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#required-methods\"]' 'Required Methods'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'bar'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'bar'\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#provided-methods\"]' 'Provided Methods'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'foo'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'foo'\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#associated-const\"]' 'Associated Constants'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'BAR'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'BAR'\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#associated-types\"]' 'Associated Types'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Output'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Output'\n pub trait Foo {\n     const BAR: u32 = 0;\n     type Output: ?Sized;\n@@ -19,9 +19,9 @@ pub trait Foo {\n \n // @has foo/struct.Bar.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f\"]' 'f'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.u\"]' 'u'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f\"]' 'f'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.u\"]' 'u'\n+// @!has - '//*[@class=\"sidebar-elems\"]//section//a' 'waza'\n pub struct Bar {\n     pub f: u32,\n     pub u: u32,\n@@ -30,18 +30,18 @@ pub struct Bar {\n \n // @has foo/enum.En.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#variants\"]' 'Variants'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Foo'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Bar'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Foo'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Bar'\n pub enum En {\n     Foo,\n     Bar,\n }\n \n // @has foo/union.MyUnion.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f1\"]' 'f1'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f2\"]' 'f2'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f1\"]' 'f1'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f2\"]' 'f2'\n+// @!has - '//*[@class=\"sidebar-elems\"]//section//a' 'waza'\n pub union MyUnion {\n     pub f1: u32,\n     pub f2: f32,"}, {"sha": "7858f35a2616e57c3d61802956c3900683ba08c3", "filename": "src/test/rustdoc/sidebar-link-generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.SomeStruct.html '//*[@class=\"sidebar-links\"]/a[@href=\"#method.some_fn-1\"]' \\\n+// @has foo/struct.SomeStruct.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.some_fn-1\"]' \\\n //          \"some_fn\"\n pub struct SomeStruct<T> { _inner: T }\n "}, {"sha": "15515039659991b29fffeeb81e80ef975c974597", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -5,9 +5,9 @@\n // @has foo/trait.Foo.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n // @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n // @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n "}, {"sha": "89f75fea15b1d8cf72a21c71befe2323df64dce9", "filename": "src/test/ui/box/issue-78459-ice.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Fbox%2Fissue-78459-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Fbox%2Fissue-78459-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fissue-78459-ice.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+#![feature(allocator_api)]\n+\n+fn main() {\n+    Box::new_in((), &std::alloc::Global);\n+}"}, {"sha": "0202ccbe5a2d232339977f87fb5ea352c66d8d1d", "filename": "src/test/ui/feature-gates/feature-gate-asm_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const operands for inline assembly are unstable\n LL |         asm!(\"mov eax, {}\", const 123);\n    |                             ^^^^^^^^^\n    |\n-   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = note: see issue #93332 <https://github.com/rust-lang/rust/issues/93332> for more information\n    = help: add `#![feature(asm_const)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "4a859430e044d988de37753e72d126173b5db2ed", "filename": "src/test/ui/feature-gates/feature-gate-asm_experimental_arch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.stderr?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -4,7 +4,7 @@ error[E0658]: inline assembly is not stable yet on this architecture\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n    |\n-   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = note: see issue #93335 <https://github.com/rust-lang/rust/issues/93335> for more information\n    = help: add `#![feature(asm_experimental_arch)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "68f2d0f6c18b0bb6e78594abfa27e46b4b909db4", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -4,7 +4,7 @@ error[E0658]: sym operands for inline assembly are unstable\n LL |         asm!(\"mov eax, {}\", sym main);\n    |                             ^^^^^^^^\n    |\n-   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n    = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "05e66acb556ada58da467b685bf863c7a7c30acc", "filename": "src/test/ui/feature-gates/feature-gate-asm_unwind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.stderr?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `may_unwind` option is unstable\n LL |         asm!(\"\", options(may_unwind));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = note: see issue #93334 <https://github.com/rust-lang/rust/issues/93334> for more information\n    = help: add `#![feature(asm_unwind)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "fe3911983421b34f383384c939e82c308cde86b6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -528,7 +528,7 @@ fn is_auto_reborrow_position(parent: Option<Node<'_>>) -> bool {\n fn is_auto_borrow_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n     if let Some(Node::Expr(parent)) = parent {\n         match parent.kind {\n-            ExprKind::MethodCall(_, [self_arg, ..], _) => self_arg.hir_id == child_id,\n+            // ExprKind::MethodCall(_, [self_arg, ..], _) => self_arg.hir_id == child_id,\n             ExprKind::Field(..) => true,\n             ExprKind::Call(f, _) => f.hir_id == child_id,\n             _ => false,"}, {"sha": "efeb5cf5b2b25aedb3ad0cb7a06edc97c84ad29b", "filename": "src/tools/clippy/tests/ui/needless_borrow.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -64,9 +64,9 @@ fn main() {\n     *x = 5;\n \n     let s = String::new();\n-    let _ = s.len();\n-    let _ = s.capacity();\n-    let _ = s.capacity();\n+    // let _ = (&s).len();\n+    // let _ = (&s).capacity();\n+    // let _ = (&&s).capacity();\n \n     let x = (1, 2);\n     let _ = x.0;"}, {"sha": "3e416a0eb84aaa6ea38a285f0cefa7ca911e2904", "filename": "src/tools/clippy/tests/ui/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -64,9 +64,9 @@ fn main() {\n     *x = 5;\n \n     let s = String::new();\n-    let _ = (&s).len();\n-    let _ = (&s).capacity();\n-    let _ = (&&s).capacity();\n+    // let _ = (&s).len();\n+    // let _ = (&s).capacity();\n+    // let _ = (&&s).capacity();\n \n     let x = (1, 2);\n     let _ = (&x).0;"}, {"sha": "05591ce4117b2e3937fca808cd4adaab9c218ff7", "filename": "src/tools/clippy/tests/ui/needless_borrow.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a7423e77b49a99e270531fbadda5b8899df3f6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr?ref=73a7423e77b49a99e270531fbadda5b8899df3f6", "patch": "@@ -84,24 +84,6 @@ error: this expression creates a reference which is immediately dereferenced by\n LL |     let y: &mut i32 = &mut &mut x;\n    |                       ^^^^^^^^^^^ help: change this to: `x`\n \n-error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:67:13\n-   |\n-LL |     let _ = (&s).len();\n-   |             ^^^^ help: change this to: `s`\n-\n-error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:68:13\n-   |\n-LL |     let _ = (&s).capacity();\n-   |             ^^^^ help: change this to: `s`\n-\n-error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:69:13\n-   |\n-LL |     let _ = (&&s).capacity();\n-   |             ^^^^^ help: change this to: `s`\n-\n error: this expression borrows a value the compiler would automatically borrow\n   --> $DIR/needless_borrow.rs:72:13\n    |\n@@ -114,5 +96,5 @@ error: this expression borrows a value the compiler would automatically borrow\n LL |     let _ = unsafe { (&*x).0 };\n    |                      ^^^^^ help: change this to: `(*x)`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 16 previous errors\n "}]}