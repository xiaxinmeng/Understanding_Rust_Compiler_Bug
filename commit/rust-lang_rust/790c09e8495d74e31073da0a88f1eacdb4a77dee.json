{"sha": "790c09e8495d74e31073da0a88f1eacdb4a77dee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MGMwOWU4NDk1ZDc0ZTMxMDczZGEwYTg4ZjFlYWNkYjRhNzdkZWU=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-11T00:50:21Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-11T10:53:37Z"}, "message": "suggest on new snippet", "tree": {"sha": "85123ef2adc5b6d835dc1c2594ce0686eea5f03f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85123ef2adc5b6d835dc1c2594ce0686eea5f03f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790c09e8495d74e31073da0a88f1eacdb4a77dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790c09e8495d74e31073da0a88f1eacdb4a77dee", "html_url": "https://github.com/rust-lang/rust/commit/790c09e8495d74e31073da0a88f1eacdb4a77dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790c09e8495d74e31073da0a88f1eacdb4a77dee/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f475c8083f668218f93afa88eab4410769cdcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f475c8083f668218f93afa88eab4410769cdcd", "html_url": "https://github.com/rust-lang/rust/commit/88f475c8083f668218f93afa88eab4410769cdcd"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "1c6f0089503e20d0e1c003ce45b0467916f6c256", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/790c09e8495d74e31073da0a88f1eacdb4a77dee/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790c09e8495d74e31073da0a88f1eacdb4a77dee/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=790c09e8495d74e31073da0a88f1eacdb4a77dee", "patch": "@@ -12,51 +12,51 @@ use syntax::ast;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::symbol::Symbol;\n-use syntax_pos;\n use syntax::tokenstream;\n+use syntax_pos;\n \n use std::string::String;\n \n-pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n-                         sp: syntax_pos::Span,\n-                         tts: &[tokenstream::TokenTree])\n-                         -> Box<base::MacResult + 'static> {\n+pub fn expand_syntax_ext(\n+    cx: &mut base::ExtCtxt,\n+    sp: syntax_pos::Span,\n+    tts: &[tokenstream::TokenTree],\n+) -> Box<base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,\n         None => return base::DummyResult::expr(sp),\n     };\n     let mut accumulator = String::new();\n     for e in es {\n         match e.node {\n-            ast::ExprKind::Lit(ref lit) => {\n-                match lit.node {\n-                    ast::LitKind::Str(ref s, _) |\n-                    ast::LitKind::Float(ref s, _) |\n-                    ast::LitKind::FloatUnsuffixed(ref s) => {\n-                        accumulator.push_str(&s.as_str());\n-                    }\n-                    ast::LitKind::Char(c) => {\n-                        accumulator.push(c);\n-                    }\n-                    ast::LitKind::Int(i, ast::LitIntType::Unsigned(_)) |\n-                    ast::LitKind::Int(i, ast::LitIntType::Signed(_)) |\n-                    ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) => {\n-                        accumulator.push_str(&format!(\"{}\", i));\n-                    }\n-                    ast::LitKind::Bool(b) => {\n-                        accumulator.push_str(&format!(\"{}\", b));\n-                    }\n-                    ast::LitKind::Byte(..) |\n-                    ast::LitKind::ByteStr(..) => {\n-                        cx.span_err(e.span, \"cannot concatenate a byte string literal\");\n-                    }\n+            ast::ExprKind::Lit(ref lit) => match lit.node {\n+                ast::LitKind::Str(ref s, _)\n+                | ast::LitKind::Float(ref s, _)\n+                | ast::LitKind::FloatUnsuffixed(ref s) => {\n+                    accumulator.push_str(&s.as_str());\n                 }\n-            }\n+                ast::LitKind::Char(c) => {\n+                    accumulator.push(c);\n+                }\n+                ast::LitKind::Int(i, ast::LitIntType::Unsigned(_))\n+                | ast::LitKind::Int(i, ast::LitIntType::Signed(_))\n+                | ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) => {\n+                    accumulator.push_str(&format!(\"{}\", i));\n+                }\n+                ast::LitKind::Bool(b) => {\n+                    accumulator.push_str(&format!(\"{}\", b));\n+                }\n+                ast::LitKind::Byte(..) | ast::LitKind::ByteStr(..) => {\n+                    cx.span_err(e.span, \"cannot concatenate a byte string literal\");\n+                }\n+            },\n             _ => {\n                 let mut err = cx.struct_span_err(e.span, \"expected a literal\");\n-                err.span_help(\n+                let snippet = cx.codemap().span_to_snippet(e.span).unwrap();\n+                err.span_suggestion(\n                     e.span,\n                     \"you might be missing a string literal to format with\",\n+                    format!(\"\\\"{{}}\\\", {}\", snippet),\n                 );\n                 err.emit();\n             }"}, {"sha": "0bfb060f84416783187b263866d6aa886b2d34f2", "filename": "src/test/ui/macros/bad_hello.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/790c09e8495d74e31073da0a88f1eacdb4a77dee/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/790c09e8495d74e31073da0a88f1eacdb4a77dee/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr?ref=790c09e8495d74e31073da0a88f1eacdb4a77dee", "patch": "@@ -3,12 +3,10 @@ error: expected a literal\n    |\n LL |     println!(3 + 4); //~ ERROR expected a literal\n    |              ^^^^^\n-   |\n help: you might be missing a string literal to format with\n-  --> $DIR/bad_hello.rs:12:14\n    |\n-LL |     println!(3 + 4); //~ ERROR expected a literal\n-   |              ^^^^^\n+LL |     println!(\"{}\", 3 + 4); //~ ERROR expected a literal\n+   |              ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}