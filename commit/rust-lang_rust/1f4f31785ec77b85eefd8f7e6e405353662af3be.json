{"sha": "1f4f31785ec77b85eefd8f7e6e405353662af3be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGYzMTc4NWVjNzdiODVlZWZkOGY3ZTZlNDA1MzUzNjYyYWYzYmU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-19T06:54:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T06:54:26Z"}, "message": "Rollup merge of #75049 - janriemer:patch-1, r=poliorcetics\n\ndocs(marker/copy): provide example for `&T` being `Copy`\n\n### Edited 2020-08-16 (most recent)\nIn the current documentation about the `Copy` marker trait, there is a section\nwith examples of structs that can implement `Copy`. Currently there is no example for\nshowing that shared references (`&T`) are also `Copy`.\nIt is worth to have a dedicated example for `&T` being `Copy`, because shared\nreferences are an integral part of the language and it being `Copy` is not as\nintuitive as other types that share this behaviour like `i32` or `bool`.\n\nThe example picks up on the previous non-`Copy` struct and shows that\nstructs can be `Copy`, even when they hold a shared reference to a non-`Copy` type.\n\n-----------------------------------------\n### Edited 2020-08-02, 3:28 p.m.\nI've just realized that it says \"in addition to the **implementors listed below**\", which makes this PR kind of \"wrong\", because `&T` is indeed in the \"implementors listed below\".\nMaybe we can instead show an example with `&T` in the [When can my type be Copy](https://doc.rust-lang.org/std/marker/trait.Copy.html#when-can-my-type-be-copy) section.\n\nWhat I really want to achieve is that it becomes more obvious that `&T` is also `Copy`, because, I think, it is very valuable to know and it wasn't obvious for me, until I read something about it in a forum post.\n\nWhat do you think? I would create another PR for that.\n**Please feel free to close this PR.**\n\n-----------------------------------\n### Original post\nIn the current documentation about the `Copy` marker trait, there is a section\nabout \"additional implementors\", which list additional implementors of the `Copy` trait.\nThe fact that shared references are also `Copy` is mixed with another point,\nwhich makes it hard to recognize and make it seem not as important.\n\nThis clarifies the fact that shared references are also `Copy`, by mentioning it as a\nseparate item in the list of \"additional implementors\".", "tree": {"sha": "9fce7439b5d6b917e3b8b057c786062a1398cbfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fce7439b5d6b917e3b8b057c786062a1398cbfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4f31785ec77b85eefd8f7e6e405353662af3be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPMyiCRBK7hj4Ov3rIwAAdHIIAAvbysfLbNviSt5qmIRO0J5j\n30QL8xJADdXY5jjEUQD5phoQpK+mTMu19pxoYnrj2QU6nGfS7lrZ1p4EMvBiY9hH\nvKkGXeH6TzG7o8Kb5F5GUk3e+7ghQQhrBDmrCuOmkOB8njqlzujARCGS38CS+gxi\nSWNPJYUt+hgUNfA+bPt8969DOrpBVpH6KxsKiDwW+04lUglK5ydqsYqWW+0EFfSg\n1TqxWeTpk3TyQZqvC/ayn1YK8Nz2DX+5Tjcj01FWKiMeB8Uv4AE/BroLks0/x1vo\nI+ktHmyzervBm821gTNsBFEne4d5WtaWbUuItT9TAkwtT8AR77hfJW+CqY7a5TU=\n=doX/\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fce7439b5d6b917e3b8b057c786062a1398cbfb\nparent 17d3ce457fa3aa29546ace82d7ebb32b3541d5e4\nparent 522d177f34e683b16d3548446aa3ff7ddd2c531c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597820066 +0900\ncommitter GitHub <noreply@github.com> 1597820066 +0900\n\nRollup merge of #75049 - janriemer:patch-1, r=poliorcetics\n\ndocs(marker/copy): provide example for `&T` being `Copy`\n\n### Edited 2020-08-16 (most recent)\nIn the current documentation about the `Copy` marker trait, there is a section\nwith examples of structs that can implement `Copy`. Currently there is no example for\nshowing that shared references (`&T`) are also `Copy`.\nIt is worth to have a dedicated example for `&T` being `Copy`, because shared\nreferences are an integral part of the language and it being `Copy` is not as\nintuitive as other types that share this behaviour like `i32` or `bool`.\n\nThe example picks up on the previous non-`Copy` struct and shows that\nstructs can be `Copy`, even when they hold a shared reference to a non-`Copy` type.\n\n-----------------------------------------\n### Edited 2020-08-02, 3:28 p.m.\nI've just realized that it says \"in addition to the **implementors listed below**\", which makes this PR kind of \"wrong\", because `&T` is indeed in the \"implementors listed below\".\nMaybe we can instead show an example with `&T` in the [When can my type be Copy](https://doc.rust-lang.org/std/marker/trait.Copy.html#when-can-my-type-be-copy) section.\n\nWhat I really want to achieve is that it becomes more obvious that `&T` is also `Copy`, because, I think, it is very valuable to know and it wasn't obvious for me, until I read something about it in a forum post.\n\nWhat do you think? I would create another PR for that.\n**Please feel free to close this PR.**\n\n-----------------------------------\n### Original post\nIn the current documentation about the `Copy` marker trait, there is a section\nabout \"additional implementors\", which list additional implementors of the `Copy` trait.\nThe fact that shared references are also `Copy` is mixed with another point,\nwhich makes it hard to recognize and make it seem not as important.\n\nThis clarifies the fact that shared references are also `Copy`, by mentioning it as a\nseparate item in the list of \"additional implementors\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4f31785ec77b85eefd8f7e6e405353662af3be", "html_url": "https://github.com/rust-lang/rust/commit/1f4f31785ec77b85eefd8f7e6e405353662af3be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4f31785ec77b85eefd8f7e6e405353662af3be/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d3ce457fa3aa29546ace82d7ebb32b3541d5e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d3ce457fa3aa29546ace82d7ebb32b3541d5e4", "html_url": "https://github.com/rust-lang/rust/commit/17d3ce457fa3aa29546ace82d7ebb32b3541d5e4"}, {"sha": "522d177f34e683b16d3548446aa3ff7ddd2c531c", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d177f34e683b16d3548446aa3ff7ddd2c531c", "html_url": "https://github.com/rust-lang/rust/commit/522d177f34e683b16d3548446aa3ff7ddd2c531c"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "9326aaf56847c577f59e2e86b299f9c67bf6082f", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f31785ec77b85eefd8f7e6e405353662af3be/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f31785ec77b85eefd8f7e6e405353662af3be/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=1f4f31785ec77b85eefd8f7e6e405353662af3be", "patch": "@@ -291,6 +291,7 @@ pub trait StructuralEq {\n ///\n /// ```\n /// # #[allow(dead_code)]\n+/// #[derive(Copy, Clone)]\n /// struct Point {\n ///    x: i32,\n ///    y: i32,\n@@ -315,6 +316,20 @@ pub trait StructuralEq {\n /// the trait `Copy` may not be implemented for this type; field `points` does not implement `Copy`\n /// ```\n ///\n+/// Shared references (`&T`) are also `Copy`, so a type can be `Copy`, even when it holds\n+/// shared references of types `T` that are *not* `Copy`. Consider the following struct,\n+/// which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`\n+/// type `PointList` from above:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// # struct PointList;\n+/// #[derive(Copy, Clone)]\n+/// struct PointListWrapper<'a> {\n+///     point_list_ref: &'a PointList,\n+/// }\n+/// ```\n+///\n /// ## When *can't* my type be `Copy`?\n ///\n /// Some types can't be copied safely. For example, copying `&mut T` would create an aliased"}]}