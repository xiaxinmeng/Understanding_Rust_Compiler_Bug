{"sha": "affb081fa0810494165fbfb8d308a0f02a290fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZmIwODFmYTA4MTA0OTQxNjVmYmZiOGQzMDhhMGYwMmEyOTBmZWQ=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-16T00:18:03Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-16T00:18:03Z"}, "message": "revert changes from #83118 to mark zst return place as unused", "tree": {"sha": "beaf7024c927d9bda6466883c219090856344ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beaf7024c927d9bda6466883c219090856344ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/affb081fa0810494165fbfb8d308a0f02a290fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/affb081fa0810494165fbfb8d308a0f02a290fed", "html_url": "https://github.com/rust-lang/rust/commit/affb081fa0810494165fbfb8d308a0f02a290fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/affb081fa0810494165fbfb8d308a0f02a290fed/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107896c32d5dda4db508968ff34997a39d286966", "url": "https://api.github.com/repos/rust-lang/rust/commits/107896c32d5dda4db508968ff34997a39d286966", "html_url": "https://github.com/rust-lang/rust/commit/107896c32d5dda4db508968ff34997a39d286966"}], "stats": {"total": 79, "additions": 27, "deletions": 52}, "files": [{"sha": "a5764d9bf4e3dfbb6c2dc77cce3d2cc4bf5c40bd", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 27, "deletions": 52, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/affb081fa0810494165fbfb8d308a0f02a290fed/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb081fa0810494165fbfb8d308a0f02a290fed/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=affb081fa0810494165fbfb8d308a0f02a290fed", "patch": "@@ -31,10 +31,10 @@ use crate::transform::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::ParamEnv;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n-use std::{borrow::Cow, convert::TryInto};\n+use std::borrow::Cow;\n+use std::convert::TryInto;\n \n pub struct SimplifyCfg {\n     label: String,\n@@ -326,7 +326,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n \n pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n     // First, we're going to get a count of *actual* uses for every `Local`.\n-    let mut used_locals = UsedLocals::new(body, tcx);\n+    let mut used_locals = UsedLocals::new(body);\n \n     // Next, we're going to remove any `Local` with zero actual uses. When we remove those\n     // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`\n@@ -336,8 +336,7 @@ pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n     remove_unused_definitions(&mut used_locals, body);\n \n     // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n-    let arg_count = body.arg_count.try_into().unwrap();\n-    let map = make_local_map(&mut body.local_decls, &used_locals, arg_count);\n+    let map = make_local_map(&mut body.local_decls, &used_locals);\n \n     // Only bother running the `LocalUpdater` if we actually found locals to remove.\n     if map.iter().any(Option::is_none) {\n@@ -350,61 +349,54 @@ pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n }\n \n /// Construct the mapping while swapping out unused stuff out from the `vec`.\n-fn make_local_map<'tcx, V>(\n+fn make_local_map<V>(\n     local_decls: &mut IndexVec<Local, V>,\n-    used_locals: &UsedLocals<'tcx>,\n-    arg_count: u32,\n+    used_locals: &UsedLocals,\n ) -> IndexVec<Local, Option<Local>> {\n-    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, local_decls);\n+    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);\n     let mut used = Local::new(0);\n \n     for alive_index in local_decls.indices() {\n-        // When creating the local map treat the `RETURN_PLACE` and arguments as used.\n-        if alive_index.as_u32() <= arg_count || used_locals.is_used(alive_index) {\n-            map[alive_index] = Some(used);\n-            if alive_index != used {\n-                local_decls.swap(alive_index, used);\n-            }\n-            used.increment_by(1);\n+        // `is_used` treats the `RETURN_PLACE` and arguments as used.\n+        if !used_locals.is_used(alive_index) {\n+            continue;\n         }\n+\n+        map[alive_index] = Some(used);\n+        if alive_index != used {\n+            local_decls.swap(alive_index, used);\n+        }\n+        used.increment_by(1);\n     }\n     local_decls.truncate(used.index());\n     map\n }\n \n /// Keeps track of used & unused locals.\n-struct UsedLocals<'tcx> {\n+struct UsedLocals {\n     increment: bool,\n+    arg_count: u32,\n     use_count: IndexVec<Local, u32>,\n-    is_static: bool,\n-    local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n-    param_env: ParamEnv<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n }\n \n-impl UsedLocals<'tcx> {\n+impl UsedLocals {\n     /// Determines which locals are used & unused in the given body.\n-    fn new(body: &Body<'tcx>, tcx: TyCtxt<'tcx>) -> Self {\n-        let def_id = body.source.def_id();\n-        let is_static = tcx.is_static(def_id);\n-        let param_env = tcx.param_env(def_id);\n-        let local_decls = body.local_decls.clone();\n+    fn new(body: &Body<'_>) -> Self {\n         let mut this = Self {\n             increment: true,\n+            arg_count: body.arg_count.try_into().unwrap(),\n             use_count: IndexVec::from_elem(0, &body.local_decls),\n-            is_static,\n-            local_decls,\n-            param_env,\n-            tcx,\n         };\n         this.visit_body(body);\n         this\n     }\n \n     /// Checks if local is used.\n+    ///\n+    /// Return place and arguments are always considered used.\n     fn is_used(&self, local: Local) -> bool {\n         trace!(\"is_used({:?}): use_count: {:?}\", local, self.use_count[local]);\n-        self.use_count[local] != 0\n+        local.as_u32() <= self.arg_count || self.use_count[local] != 0\n     }\n \n     /// Updates the use counts to reflect the removal of given statement.\n@@ -432,7 +424,7 @@ impl UsedLocals<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for UsedLocals<'tcx> {\n+impl Visitor<'_> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::LlvmInlineAsm(..)\n@@ -459,21 +451,7 @@ impl Visitor<'tcx> for UsedLocals<'tcx> {\n         }\n     }\n \n-    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _location: Location) {\n-        debug!(\"local: {:?} is_static: {:?}, ctx: {:?}\", local, self.is_static, ctx);\n-        // Do not count _0 as a used in `return;` if it is a ZST.\n-        let return_place = *local == RETURN_PLACE\n-            && matches!(ctx, PlaceContext::NonMutatingUse(visit::NonMutatingUseContext::Move));\n-        if !self.is_static && return_place {\n-            let ty = self.local_decls[*local].ty;\n-            let param_env_and = self.param_env.and(ty);\n-            if let Ok(layout) = self.tcx.layout_of(param_env_and) {\n-                debug!(\"layout.is_zst: {:?}\", layout.is_zst());\n-                if layout.is_zst() {\n-                    return;\n-                }\n-            }\n-        }\n+    fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {\n         if self.increment {\n             self.use_count[*local] += 1;\n         } else {\n@@ -484,10 +462,7 @@ impl Visitor<'tcx> for UsedLocals<'tcx> {\n }\n \n /// Removes unused definitions. Updates the used locals to reflect the changes made.\n-fn remove_unused_definitions<'a, 'tcx>(\n-    used_locals: &'a mut UsedLocals<'tcx>,\n-    body: &mut Body<'tcx>,\n-) {\n+fn remove_unused_definitions<'a, 'tcx>(used_locals: &'a mut UsedLocals, body: &mut Body<'tcx>) {\n     // The use counts are updated as we remove the statements. A local might become unused\n     // during the retain operation, leading to a temporary inconsistency (storage statements or\n     // definitions referencing the local might remain). For correctness it is crucial that this"}]}