{"sha": "9e472c2acea2b7714985390abb6b7fe420a4f346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDcyYzJhY2VhMmI3NzE0OTg1MzkwYWJiNmI3ZmU0MjBhNGYzNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T08:50:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T08:50:12Z"}, "message": "Auto merge of #52450 - PramodBisht:issue/52413, r=estebank\n\nCloses #52413: Provide structured suggestion instead of label\n\nProvide structured suggestion instead of label\nr? @estebank", "tree": {"sha": "0c62c12671d80d97bfece58c1f6640266a110054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c62c12671d80d97bfece58c1f6640266a110054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e472c2acea2b7714985390abb6b7fe420a4f346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e472c2acea2b7714985390abb6b7fe420a4f346", "html_url": "https://github.com/rust-lang/rust/commit/9e472c2acea2b7714985390abb6b7fe420a4f346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e472c2acea2b7714985390abb6b7fe420a4f346/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a902431b8e66da8486b3b9a2d8527746c6ab1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a902431b8e66da8486b3b9a2d8527746c6ab1a", "html_url": "https://github.com/rust-lang/rust/commit/11a902431b8e66da8486b3b9a2d8527746c6ab1a"}, {"sha": "49b0a1e073f708edb172cba50d8cb352204cfdc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b0a1e073f708edb172cba50d8cb352204cfdc4", "html_url": "https://github.com/rust-lang/rust/commit/49b0a1e073f708edb172cba50d8cb352204cfdc4"}], "stats": {"total": 114, "additions": 62, "deletions": 52}, "files": [{"sha": "ca71b0aeed9a56b3309f2c6d5bd5f2211993ba67", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -65,9 +65,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             region_info\n         );\n \n-        let (arg, new_ty, br, is_first, scope_def_id, is_impl_item) = (\n+        let (arg, new_ty, new_ty_span, br, is_first, scope_def_id, is_impl_item) = (\n             anon_arg_info.arg,\n             anon_arg_info.arg_ty,\n+            anon_arg_info.arg_ty_span,\n             anon_arg_info.bound_region,\n             anon_arg_info.is_first,\n             region_info.def_id,\n@@ -110,9 +111,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             E0621,\n             \"explicit lifetime required in {}\",\n             error_var\n-        ).span_label(\n-            arg.pat.span,\n-            format!(\"consider changing {} to `{}`\", span_label_var, new_ty),\n+        ).span_suggestion(\n+            new_ty_span,\n+            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n+            new_ty.to_string()\n         )\n             .span_label(span, format!(\"lifetime `{}` required\", named))\n             .emit();"}, {"sha": "28320ce3ad1ba8392e4805952c0d591209fc2ac9", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -27,6 +27,8 @@ pub(super) struct AnonymousArgInfo<'tcx> {\n     pub arg_ty: Ty<'tcx>,\n     // the ty::BoundRegion corresponding to the anonymous region\n     pub bound_region: ty::BoundRegion,\n+    // arg_ty_span contains span of argument type\n+    pub arg_ty_span : Span,\n     // corresponds to id the argument is the first parameter\n     // in the declaration\n     pub is_first: bool,\n@@ -74,12 +76,16 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         if let Some(node_id) = hir.as_local_node_id(id) {\n             if let Some(body_id) = hir.maybe_body_owned_by(node_id) {\n                 let body = hir.body(body_id);\n+                let owner_id = hir.body_owner(body_id);\n+                let fn_decl = hir.fn_decl(owner_id).unwrap();\n                 if let Some(tables) = self.tables {\n                     body.arguments\n                         .iter()\n                         .enumerate()\n                         .filter_map(|(index, arg)| {\n                             // May return None; sometimes the tables are not yet populated.\n+                            let ty_hir_id = fn_decl.inputs[index].hir_id;\n+                            let arg_ty_span = hir.span(hir.hir_to_node_id(ty_hir_id));\n                             let ty = tables.node_id_to_type_opt(arg.hir_id)?;\n                             let mut found_anon_region = false;\n                             let new_arg_ty = self.tcx.fold_regions(&ty, &mut false, |r, _| {\n@@ -95,6 +101,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                                 Some(AnonymousArgInfo {\n                                     arg: arg,\n                                     arg_ty: new_arg_ty,\n+                                    arg_ty_span : arg_ty_span,\n                                     bound_region: bound_region,\n                                     is_first: is_first,\n                                 })"}, {"sha": "1470783c20671f9abf62c90a3747c118343dce79", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -14,9 +14,9 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/mismatched.rs:14:42\n    |\n LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n-   |                    -                     ^ lifetime `'a` required\n-   |                    |\n-   |                    consider changing the type of `y` to `&'a u32`\n+   |                       ----               ^ lifetime `'a` required\n+   |                       |\n+   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/mismatched.rs:16:46"}, {"sha": "ed932a97ba465dcfdc6f3694fef3e86314fe85f7", "filename": "src/test/ui/in-band-lifetimes/mismatched.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,9 +2,9 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/mismatched.rs:14:42\n    |\n LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n-   |                    -                     ^ lifetime `'a` required\n-   |                    |\n-   |                    consider changing the type of `y` to `&'a u32`\n+   |                       ----               ^ lifetime `'a` required\n+   |                       |\n+   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched.rs:16:46"}, {"sha": "a01f3219dc5e4f9026da9c16faafc83d1e5968b8", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/mismatched_trait.rs:16:9\n    |\n LL |     fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n-   |                               - consider changing the type of `y` to `&'a u32`\n+   |                                  ---- help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n LL |         y //~ ERROR explicit lifetime required\n    |         ^ lifetime `'a` required\n "}, {"sha": "745b82c20b4eb53a6c10e5c8e32e6880d80422e6", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/mismatched_trait.rs:16:9\n    |\n LL |     fn baz(&self, x: &'a u32, y: &u32) -> &'a u32 {\n-   |                               - consider changing the type of `y` to `&'a u32`\n+   |                                  ---- help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n LL |         y //~ ERROR explicit lifetime required\n    |         ^ lifetime `'a` required\n "}, {"sha": "5e8319d26ad3ca42ba3277d07f7d35e619934535", "filename": "src/test/ui/issue-13058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-13058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-13058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `cont`\n   --> $DIR/issue-13058.rs:24:26\n    |\n LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n-   |                                                               ---- consider changing the type of `cont` to `&'r T`\n+   |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`\n LL | {\n LL |     let cont_iter = cont.iter();\n    |                          ^^^^ lifetime `'r` required"}, {"sha": "c95d540b25cdd0b50e2b7ecf60f955cb1a14501f", "filename": "src/test/ui/issue-14285.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-14285.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-14285.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-14285.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `a`\n   --> $DIR/issue-14285.rs:22:7\n    |\n LL | fn foo<'a>(a: &Foo) -> B<'a> {\n-   |            - consider changing the type of `a` to `&'a (dyn Foo + 'a)`\n+   |               ---- help: add explicit lifetime `'a` to the type of `a`: `&'a (dyn Foo + 'a)`\n LL |     B(a)    //~ ERROR 22:5: 22:9: explicit lifetime required in the type of `a` [E0621]\n    |       ^ lifetime `'a` required\n "}, {"sha": "52163f81b7bf42c08c0d653c9198ebeabe4c1eac", "filename": "src/test/ui/issue-14285.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-14285.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-14285.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-14285.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `a`\n   --> $DIR/issue-14285.rs:22:5\n    |\n LL | fn foo<'a>(a: &Foo) -> B<'a> {\n-   |            - consider changing the type of `a` to `&'a (dyn Foo + 'a)`\n+   |               ---- help: add explicit lifetime `'a` to the type of `a`: `&'a (dyn Foo + 'a)`\n LL |     B(a)    //~ ERROR 22:5: 22:9: explicit lifetime required in the type of `a` [E0621]\n    |     ^^^^ lifetime `'a` required\n "}, {"sha": "4c8482630c50c46e428c205352038db77e3c71e9", "filename": "src/test/ui/issue-15034.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15034.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `lexer`\n   --> $DIR/issue-15034.rs:27:25\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n-   |                ----- consider changing the type of `lexer` to `&'a mut Lexer<'a>`\n+   |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n LL |         Parser { lexer: lexer }\n    |                         ^^^^^ lifetime `'a` required\n "}, {"sha": "c87bec00d9527b9e3a20ef0dcc56a6745390f65b", "filename": "src/test/ui/issue-15034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-15034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-15034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15034.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `lexer`\n   --> $DIR/issue-15034.rs:27:25\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n-   |                ----- consider changing the type of `lexer` to `&'a mut Lexer<'a>`\n+   |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n LL |         Parser { lexer: lexer }\n    |                         ^^^^^ lifetime `'a` required\n "}, {"sha": "1bd26faedaae3000e6ebfe89a50307f57ce9e0ea", "filename": "src/test/ui/issue-16922.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-16922.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-16922.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16922.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `value`\n   --> $DIR/issue-16922.rs:14:5\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<Any> {\n-   |                ----- consider changing the type of `value` to `&'static T`\n+   |                       -- help: add explicit lifetime `'static` to the type of `value`: `&'static T`\n LL |     Box::new(value) as Box<Any>\n    |     ^^^^^^^^^^^^^^^ lifetime `'static` required\n "}, {"sha": "e70869eb1838dbff13e8d542fb11ff041cd5804b", "filename": "src/test/ui/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16922.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `value`\n   --> $DIR/issue-16922.rs:14:5\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<Any> {\n-   |                ----- consider changing the type of `value` to `&'static T`\n+   |                       -- help: add explicit lifetime `'static` to the type of `value`: `&'static T`\n LL |     Box::new(value) as Box<Any>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n "}, {"sha": "91010bd3209352662929f30dee3664fbaab0cb4a", "filename": "src/test/ui/issue-3154.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-3154.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-3154.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3154.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -14,7 +14,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/issue-3154.rs:16:15\n    |\n LL | fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n-   |                - consider changing the type of `x` to `&'a Q`\n+   |                   -- help: add explicit lifetime `'a` to the type of `x`: `&'a Q`\n LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the type of `x` [E0621]\n    |               ^ lifetime `'a` required\n "}, {"sha": "01299d74808628d2910bedb7e71dc40ebc7e162b", "filename": "src/test/ui/issue-3154.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-3154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-3154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3154.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/issue-3154.rs:16:5\n    |\n LL | fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n-   |                - consider changing the type of `x` to `&'a Q`\n+   |                   -- help: add explicit lifetime `'a` to the type of `x`: `&'a Q`\n LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the type of `x` [E0621]\n    |     ^^^^^^^^^^^^^ lifetime `'a` required\n "}, {"sha": "dcc9e0a8a65a54551e82073e5f44f7873ad3349f", "filename": "src/test/ui/issue-40288-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-40288-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-40288-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40288-2.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -38,7 +38,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/issue-40288-2.rs:17:9\n    |\n LL | fn lifetime_transmute_slice<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n-   |                                                      - consider changing the type of `y` to `&'a T`\n+   |                                                         -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n ...\n LL |         slice[0] = y;\n    |         ^^^^^^^^^^^^ lifetime `'a` required\n@@ -47,7 +47,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/issue-40288-2.rs:32:9\n    |\n LL | fn lifetime_transmute_struct<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n-   |                                                       - consider changing the type of `y` to `&'a T`\n+   |                                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n ...\n LL |         dst.head = y;\n    |         ^^^^^^^^^^^^ lifetime `'a` required"}, {"sha": "fd0b4c01636d10b1c334ca50731d848870b02a69", "filename": "src/test/ui/issue-40288-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-40288-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-40288-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40288-2.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/issue-40288-2.rs:19:5\n    |\n LL | fn lifetime_transmute_slice<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n-   |                                                      - consider changing the type of `y` to `&'a T`\n+   |                                                         -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n ...\n LL |     out[0]\n    |     ^^^^^^ lifetime `'a` required\n@@ -11,7 +11,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/issue-40288-2.rs:34:5\n    |\n LL | fn lifetime_transmute_struct<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n-   |                                                       - consider changing the type of `y` to `&'a T`\n+   |                                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n ...\n LL |     out.head\n    |     ^^^^^^^^ lifetime `'a` required"}, {"sha": "c4f2b3eba7ddacea3fb282da466ee6f97daed9ca", "filename": "src/test/ui/issue-46983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46983.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/issue-46983.rs:14:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n-   |        - consider changing the type of `x` to `&'static u32`\n+   |           ---- help: add explicit lifetime `'static` to the type of `x`: `&'static u32`\n LL |     &*x\n    |     ^^^ lifetime `'static` required\n "}, {"sha": "89313f898d5dd130dc53783b00a2146d65e16f7c", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/42701_one_named_and_one_anonymous.rs:16:5\n    |\n LL |   fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n-   |                           - consider changing the type of `x` to `&'a i32`\n+   |                              ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL | /     if true {\n LL | |         let p: &i32 = &a.field;\n LL | |         &*p"}, {"sha": "b886450336d269091e3a04b7fcc912f51fb5eec4", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/42701_one_named_and_one_anonymous.rs:20:9\n    |\n LL | fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n-   |                         - consider changing the type of `x` to `&'a i32`\n+   |                            ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n ...\n LL |         &*x //~ ERROR explicit lifetime\n    |         ^^^ lifetime `'a` required"}, {"sha": "3976cb304268798462eb83b3a2d538af86368dc6", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `other`\n   --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:18:15\n    |\n LL |     fn bar(&self, other: Foo) -> Foo<'a> {\n-   |                   ----- consider changing the type of `other` to `Foo<'a>`\n+   |                          --- help: add explicit lifetime `'a` to the type of `other`: `Foo<'a>`\n LL |         match *self {\n    |               ^^^^^ lifetime `'a` required\n "}, {"sha": "5847f755b3ca67b5a2cef8c6935fdb6a19342557", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `other`\n   --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n    |\n LL |     fn bar(&self, other: Foo) -> Foo<'a> {\n-   |                   ----- consider changing the type of `other` to `Foo<'a>`\n+   |                          --- help: add explicit lifetime `'a` to the type of `other`: `Foo<'a>`\n ...\n LL |                     other //~ ERROR explicit lifetime\n    |                     ^^^^^ lifetime `'a` required"}, {"sha": "00eff2fe3ae7f0e0cddf731a623e0e63e2ad6c7c", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:8\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-   |            - consider changing the type of `x` to `&'a i32`\n+   |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |        ^^^^^ lifetime `'a` required\n "}, {"sha": "a4e1fe5e183770f6d1d49b92b8b1ab40b5ff13ea", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:16\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-   |            - consider changing the type of `x` to `&'a i32`\n+   |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                ^ lifetime `'a` required\n "}, {"sha": "a3b46aa04a6ef88ed00ae573ebaac0533007cbce", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,10 +8,9 @@ error[E0621]: explicit lifetime required in parameter type\n   --> $DIR/ex1-return-one-existing-name-if-else-3.rs:11:16\n    |\n LL | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n-   |            ----^-\n-   |            |   |\n-   |            |   lifetime `'a` required\n-   |            consider changing type to `(&'a i32, &'a i32)`\n+   |                ^   --------------- help: add explicit lifetime `'a` to type: `(&'a i32, &'a i32)`\n+   |                |\n+   |                lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "a260c7bf7e957f97ba345cf64bbad902503639d2", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in parameter type\n   --> $DIR/ex1-return-one-existing-name-if-else-3.rs:12:27\n    |\n LL | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n-   |            ------ consider changing type to `(&'a i32, &'a i32)`\n+   |                    --------------- help: add explicit lifetime `'a` to type: `(&'a i32, &'a i32)`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^ lifetime `'a` required\n "}, {"sha": "465b33be2d0b7be00d4c68914c1ba36b3f172bc8", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:7\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-   |            - consider changing the type of `x` to `&'a i32`\n+   |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n    |       ^^^^^ lifetime `'a` required\n "}, {"sha": "8eac8761bd4e15ba874ca76124cd2f5cdefa3494", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-   |            - consider changing the type of `x` to `&'a i32`\n+   |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n    |               ^ lifetime `'a` required\n "}, {"sha": "a62d7cc5a6fd1b8ae12b43361bb2a0186b476915", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:5\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n-   |                        - consider changing the type of `x` to `&'a i32`\n+   |                           ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL | \n LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required"}, {"sha": "0ae98aeb8438d180e088745e5a46b81651d43bd5", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n-   |                        - consider changing the type of `x` to `&'a i32`\n+   |                           ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL | \n LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n    |                                    ^ lifetime `'a` required"}, {"sha": "93f8254f8251ebaa66239b465448dd8b35355ed1", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:12:8\n    |\n LL | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-   |                        - consider changing the type of `y` to `&'a i32`\n+   |                           ---- help: add explicit lifetime `'a` to the type of `y`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |        ^^^^^ lifetime `'a` required\n "}, {"sha": "b68b90e77dee5e97576e03e778d89db77e838c9b", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n    |\n LL | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-   |                        - consider changing the type of `y` to `&'a i32`\n+   |                           ---- help: add explicit lifetime `'a` to the type of `y`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^ lifetime `'a` required\n "}, {"sha": "a5fa83266a3db9d5eada3853bfdb7ea558cf201e", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex2a-push-one-existing-name-2.rs:16:5\n    |\n LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n-   |            - consider changing the type of `x` to `Ref<'a, i32>`\n+   |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`\n LL |     y.push(x); //~ ERROR explicit lifetime\n    |     ^^^^^^^^^ lifetime `'a` required\n "}, {"sha": "6f0a5179d6b0a28356bd796c03337077ca97a06b", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/ex2a-push-one-existing-name-2.rs:16:12\n    |\n LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n-   |            - consider changing the type of `x` to `Ref<'a, i32>`\n+   |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`\n LL |     y.push(x); //~ ERROR explicit lifetime\n    |            ^ lifetime `'a` required\n "}, {"sha": "a8286ba2952fcf3c7997ff4ce51a1a6a0a5ff76e", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:12\n    |\n LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n-   |                                       - consider changing the type of `y` to `&'a T`\n+   |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n ...\n LL |     x.push(y); //~ ERROR explicit lifetime required\n    |            ^ lifetime `'a` required"}, {"sha": "294a9106619a0a1f70f1f72362b915549d423bd0", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex2a-push-one-existing-name.rs:16:5\n    |\n LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-   |                                       - consider changing the type of `y` to `Ref<'a, i32>`\n+   |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`\n LL |     x.push(y); //~ ERROR explicit lifetime\n    |     ^^^^^^^^^ lifetime `'a` required\n "}, {"sha": "ebe465aa5815263734e41f3cf64140651d060871", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -2,7 +2,7 @@ error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex2a-push-one-existing-name.rs:16:12\n    |\n LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-   |                                       - consider changing the type of `y` to `Ref<'a, i32>`\n+   |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`\n LL |     x.push(y); //~ ERROR explicit lifetime\n    |            ^ lifetime `'a` required\n "}, {"sha": "a019a7224c630da316deac9de44ab2b7cd8321f8", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -8,7 +8,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n-   |        - consider changing the type of `x` to `&ReStatic u32`\n+   |           ---- help: add explicit lifetime `ReStatic` to the type of `x`: `&ReStatic u32`\n LL |     &*x\n    |     ^^^ lifetime `ReStatic` required\n "}, {"sha": "6fc4812998681249f4c6ce02581361c0f772ddf4", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -13,7 +13,7 @@ error[E0621]: explicit lifetime required in the type of `s`\n   --> $DIR/guarantor-issue-46974.rs:25:5\n    |\n LL | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n-   |        - consider changing the type of `s` to `&'static std::boxed::Box<(i32,)>`\n+   |           ------------ help: add explicit lifetime `'static` to the type of `s`: `&'static std::boxed::Box<(i32,)>`\n LL |     // FIXME(#46983): error message should be better\n LL |     &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n    |     ^^^^ lifetime `'static` required"}, {"sha": "a4f0e53386f9f045016f90b53116a723782ef935", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e472c2acea2b7714985390abb6b7fe420a4f346/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=9e472c2acea2b7714985390abb6b7fe420a4f346", "patch": "@@ -7,10 +7,12 @@ LL |     x\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/impl-trait-captures.rs:21:5\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |               - consider changing the type of `x` to `&ReEarlyBound(0, 'a) T`\n LL |     x\n    |     ^ lifetime `ReEarlyBound(0, 'a)` required\n+help: add explicit lifetime `ReEarlyBound(0, 'a)` to the type of `x`\n+   |\n+LL | fn foo<'a, T>(x: &ReEarlyBound(0, 'a) T) -> impl Foo<'a> {\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}