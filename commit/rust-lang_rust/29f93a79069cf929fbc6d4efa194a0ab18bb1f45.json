{"sha": "29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjkzYTc5MDY5Y2Y5MjlmYmM2ZDRlZmExOTRhMGFiMThiYjFmNDU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-25T08:21:01Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-25T08:55:23Z"}, "message": "Add static type inference", "tree": {"sha": "84c7e7bbff03b649287bb55c8c9488e4c6597068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c7e7bbff03b649287bb55c8c9488e4c6597068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "html_url": "https://github.com/rust-lang/rust/commit/29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b0bd9bffeeeaf664f4a21894d5bfff51e82b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b0bd9bffeeeaf664f4a21894d5bfff51e82b32", "html_url": "https://github.com/rust-lang/rust/commit/18b0bd9bffeeeaf664f4a21894d5bfff51e82b32"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "d668b883c63f6247915e8672dc6387f5b75a1c00", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "patch": "@@ -612,6 +612,16 @@ impl Static {\n     pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n         self.id.module(db)\n     }\n+\n+    pub fn signature(&self, db: &impl HirDatabase) -> Arc<ConstSignature> {\n+        db.static_signature(*self)\n+    }\n+\n+    /// Builds a resolver for code inside this item.\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        // take the outer scope...\n+        self.module(db).resolver(db)\n+    }\n }\n \n impl Docs for Static {"}, {"sha": "d7722ccc209dc64ebd4bd32e93b7794313ea16a4", "filename": "crates/ra_hir/src/code_model_impl/konst.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs?ref=29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n use ra_syntax::ast::{NameOwner};\r\n \r\n use crate::{\r\n-    Name, AsName, Const, ConstSignature,\r\n+    Name, AsName, Const, ConstSignature, Static,\r\n     type_ref::{TypeRef},\r\n     PersistentHirDatabase,\r\n };\r\n@@ -23,4 +23,19 @@ impl ConstSignature {\n \r\n         Arc::new(sig)\r\n     }\r\n+\r\n+    pub(crate) fn static_signature_query(\r\n+        db: &impl PersistentHirDatabase,\r\n+        konst: Static,\r\n+    ) -> Arc<ConstSignature> {\r\n+        let (_, node) = konst.source(db);\r\n+\r\n+        let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\r\n+\r\n+        let type_ref = TypeRef::from_ast_opt(node.type_ref());\r\n+\r\n+        let sig = ConstSignature { name, type_ref };\r\n+\r\n+        Arc::new(sig)\r\n+    }\r\n }\r"}, {"sha": "ec848f1b2d5dee616735a682d77149da788d42f7", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     SourceFileItems, SourceItemId, Crate, Module, HirInterner,\n     Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n-    Const, ConstSignature,\n+    Const, ConstSignature, Static,\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n     nameres::{ItemMap, lower::{LoweredModule, ImportSourceMap}},\n@@ -86,6 +86,9 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n \n     #[salsa::invoke(crate::ConstSignature::const_signature_query)]\n     fn const_signature(&self, konst: Const) -> Arc<ConstSignature>;\n+\n+    #[salsa::invoke(crate::ConstSignature::static_signature_query)]\n+    fn static_signature(&self, konst: Static) -> Arc<ConstSignature>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "5e4d49ffbf137f15d0574ba32a1ef31ef986c445", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "patch": "@@ -485,7 +485,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             TypableDef::TypeAlias(_)\n             | TypableDef::Function(_)\n             | TypableDef::Enum(_)\n-            | TypableDef::Const(_) => (Ty::Unknown, None),\n+            | TypableDef::Const(_)\n+            | TypableDef::Static(_) => (Ty::Unknown, None),\n         }\n     }\n "}, {"sha": "f4e055feba1d46e9e875d2a238ac5ffbce875963", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "patch": "@@ -11,7 +11,7 @@ use std::sync::Arc;\n use crate::{\n     Function, Struct, StructField, Enum, EnumVariant, Path, Name,\n     ModuleDef, TypeAlias,\n-    Const,\n+    Const, Static,\n     HirDatabase,\n     type_ref::TypeRef,\n     name::KnownName,\n@@ -126,7 +126,7 @@ impl Ty {\n             TypableDef::Enum(e) => e.generic_params(db),\n             TypableDef::EnumVariant(var) => var.parent_enum(db).generic_params(db),\n             TypableDef::TypeAlias(t) => t.generic_params(db),\n-            TypableDef::Const(_) => GenericParams::default().into(),\n+            TypableDef::Const(_) | TypableDef::Static(_) => GenericParams::default().into(),\n         };\n         let parent_param_count = def_generics.count_parent_params();\n         substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n@@ -166,6 +166,7 @@ impl Ty {\n             | TypableDef::Struct(_)\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n+            | TypableDef::Static(_)\n             | TypableDef::TypeAlias(_) => last,\n             TypableDef::EnumVariant(_) => {\n                 // the generic args for an enum variant may be either specified\n@@ -201,13 +202,15 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n+        (TypableDef::Static(c), Namespace::Values) => type_for_static(db, c),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::Const(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::Static(_), Namespace::Types) => Ty::Unknown,\n     }\n }\n \n@@ -246,6 +249,14 @@ fn type_for_const(db: &impl HirDatabase, def: Const) -> Ty {\n     Ty::from_hir(db, &resolver, signature.type_ref())\n }\n \n+/// Build the declared type of a static.\n+fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n+    let signature = def.signature(db);\n+    let resolver = def.resolver(db);\n+\n+    Ty::from_hir(db, &resolver, signature.type_ref())\n+}\n+\n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     let var_data = def.variant_data(db);\n@@ -332,8 +343,9 @@ pub enum TypableDef {\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n     Const(Const),\n+    Static(Static),\n }\n-impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, TypeAlias, Const);\n+impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, TypeAlias, Const, Static);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n@@ -344,7 +356,8 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::EnumVariant(v) => v.into(),\n             ModuleDef::TypeAlias(t) => t.into(),\n             ModuleDef::Const(v) => v.into(),\n-            ModuleDef::Static(_) | ModuleDef::Module(_) | ModuleDef::Trait(_) => return None,\n+            ModuleDef::Static(v) => v.into(),\n+            ModuleDef::Module(_) | ModuleDef::Trait(_) => return None,\n         };\n         Some(res)\n     }"}, {"sha": "5d90f56edacf0dd74d74b9a42890340ab501981e", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_static.snap", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap", "raw_url": "https://github.com/rust-lang/rust/raw/29f93a79069cf929fbc6d4efa194a0ab18bb1f45/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap?ref=29f93a79069cf929fbc6d4efa194a0ab18bb1f45", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-02-25T07:26:41.480764900Z\"\n+created: \"2019-02-25T08:20:17.807316Z\"\n creator: insta@0.6.3\n source: crates/ra_hir/src/ty/tests.rs\n expression: \"&result\"\n@@ -9,8 +9,8 @@ expression: \"&result\"\n [177; 189) 'LOCAL_STATIC': [unknown]\n [199; 200) 'y': [unknown]\n [203; 219) 'LOCAL_...IC_MUT': [unknown]\n-[229; 230) 'z': [unknown]\n-[233; 246) 'GLOBAL_STATIC': [unknown]\n-[256; 257) 'w': [unknown]\n-[260; 277) 'GLOBAL...IC_MUT': [unknown]\n+[229; 230) 'z': u32\n+[233; 246) 'GLOBAL_STATIC': u32\n+[256; 257) 'w': u32\n+[260; 277) 'GLOBAL...IC_MUT': u32\n "}]}