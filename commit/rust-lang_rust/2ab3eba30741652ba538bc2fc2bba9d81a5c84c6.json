{"sha": "2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYjNlYmEzMDc0MTY1MmJhNTM4YmMyZmMyYmJhOWQ4MWE1Yzg0YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-14T19:52:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-14T19:52:13Z"}, "message": "Auto merge of #54201 - eddyb:reflexive-disambiguation, r=petrochenkov\n\nrustc_resolve: don't treat uniform_paths canaries as ambiguities unless they resolve to distinct Def's.\n\nIn particular, this allows this pattern that @cramertj mentioned in https://github.com/rust-lang/rust/issues/53130#issuecomment-420848814:\n```rust\nuse log::{debug, log};\nfn main() {\n    use log::{debug, log};\n    debug!(...);\n}\n```\nThe canaries for the inner `use log::...;`, *in the macro namespace*, see the `log` macro imported at the module scope, and the (same) `log` macro, imported in the block scope inside `main`.\n\nPreviously, these two possible (macro namspace) `log` resolutions would be considered ambiguous (from a forwards-compat standpoint, where we might make imports aware of block scopes).\n\nWith this PR, such a case is allowed *if and only if* all the possible resolutions refer to the same definition (more specifically, because the *same* `log` macro is being imported twice).\nThis condition subsumes previous (weaker) checks like #54005 and the second commit of #54011.\n\nOnly the last commit is the main change, the other two are cleanups.\n\nr? @petrochenkov cc @Centril @joshtriplett", "tree": {"sha": "4049f656ba168c91ebd8a4be13c9b08d798387d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4049f656ba168c91ebd8a4be13c9b08d798387d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "html_url": "https://github.com/rust-lang/rust/commit/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052d24e6c827577dadac28fb2b782dbe5445eab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/052d24e6c827577dadac28fb2b782dbe5445eab7", "html_url": "https://github.com/rust-lang/rust/commit/052d24e6c827577dadac28fb2b782dbe5445eab7"}, {"sha": "514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "html_url": "https://github.com/rust-lang/rust/commit/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb"}], "stats": {"total": 162, "additions": 89, "deletions": 73}, "files": [{"sha": "e7d3a8ef661673f4d98afddd55d8ea9930e4cbcd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "patch": "@@ -630,15 +630,16 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             self.finalize_resolutions_in(module);\n         }\n \n-        #[derive(Default)]\n-        struct UniformPathsCanaryResult<'a> {\n+        struct UniformPathsCanaryResults<'a> {\n+            name: Name,\n             module_scope: Option<&'a NameBinding<'a>>,\n             block_scopes: Vec<&'a NameBinding<'a>>,\n         }\n+\n         // Collect all tripped `uniform_paths` canaries separately.\n         let mut uniform_paths_canaries: BTreeMap<\n-            (Span, NodeId),\n-            (Name, PerNS<UniformPathsCanaryResult>),\n+            (Span, NodeId, Namespace),\n+            UniformPathsCanaryResults,\n         > = BTreeMap::new();\n \n         let mut errors = false;\n@@ -665,21 +666,25 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                     import.module_path.len() > 0 &&\n                     import.module_path[0].name == keywords::SelfValue.name();\n \n-                let (prev_name, canary_results) =\n-                    uniform_paths_canaries.entry((import.span, import.id))\n-                        .or_insert((name, PerNS::default()));\n-\n-                // All the canaries with the same `id` should have the same `name`.\n-                assert_eq!(*prev_name, name);\n-\n                 self.per_ns(|_, ns| {\n                     if let Some(result) = result[ns].get().ok() {\n+                        let canary_results =\n+                            uniform_paths_canaries.entry((import.span, import.id, ns))\n+                                .or_insert(UniformPathsCanaryResults {\n+                                    name,\n+                                    module_scope: None,\n+                                    block_scopes: vec![],\n+                                });\n+\n+                        // All the canaries with the same `id` should have the same `name`.\n+                        assert_eq!(canary_results.name, name);\n+\n                         if has_explicit_self {\n                             // There should only be one `self::x` (module-scoped) canary.\n-                            assert!(canary_results[ns].module_scope.is_none());\n-                            canary_results[ns].module_scope = Some(result);\n+                            assert!(canary_results.module_scope.is_none());\n+                            canary_results.module_scope = Some(result);\n                         } else {\n-                            canary_results[ns].block_scopes.push(result);\n+                            canary_results.block_scopes.push(result);\n                         }\n                     }\n                 });\n@@ -720,77 +725,72 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         }\n \n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n-        for ((span, _), (name, results)) in uniform_paths_canaries {\n-            self.per_ns(|this, ns| {\n-                let external_crate = if ns == TypeNS && this.extern_prelude.contains(&name) {\n-                    let crate_id =\n-                        this.crate_loader.process_path_extern(name, span);\n-                    Some(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n-                } else {\n-                    None\n-                };\n-                let result_filter = |result: &&NameBinding| {\n-                    // Ignore canaries that resolve to an import of the same crate.\n-                    // That is, we allow `use crate_name; use crate_name::foo;`.\n-                    if let Some(def_id) = external_crate {\n-                        if let Some(module) = result.module() {\n-                            if module.normal_ancestor_id == def_id {\n-                                return false;\n-                            }\n-                        }\n-                    }\n+        for ((span, _, ns), results) in uniform_paths_canaries {\n+            let name = results.name;\n+            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n+                let crate_id =\n+                    self.crate_loader.process_path_extern(name, span);\n+                Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))\n+            } else {\n+                None\n+            };\n \n-                    true\n-                };\n-                let module_scope = results[ns].module_scope.filter(result_filter);\n-                let block_scopes = || {\n-                    results[ns].block_scopes.iter().cloned().filter(result_filter)\n-                };\n+            // Currently imports can't resolve in non-module scopes,\n+            // we only have canaries in them for future-proofing.\n+            if external_crate.is_none() && results.module_scope.is_none() {\n+                return;\n+            }\n+\n+            {\n+                let mut all_results = external_crate.into_iter().chain(\n+                    results.module_scope.iter()\n+                        .chain(&results.block_scopes)\n+                        .map(|binding| binding.def())\n+                );\n+                let first = all_results.next().unwrap();\n \n-                // An ambiguity requires more than one possible resolution.\n+                // An ambiguity requires more than one *distinct* possible resolution.\n                 let possible_resultions =\n-                    (external_crate.is_some() as usize) +\n-                    (module_scope.is_some() as usize) +\n-                    (block_scopes().next().is_some() as usize);\n+                    1 + all_results.filter(|&def| def != first).count();\n                 if possible_resultions <= 1 {\n                     return;\n                 }\n+            }\n \n-                errors = true;\n+            errors = true;\n \n-                let msg = format!(\"`{}` import is ambiguous\", name);\n-                let mut err = this.session.struct_span_err(span, &msg);\n-                let mut suggestion_choices = String::new();\n-                if external_crate.is_some() {\n-                    write!(suggestion_choices, \"`::{}`\", name);\n-                    err.span_label(span,\n-                        format!(\"can refer to external crate `::{}`\", name));\n-                }\n-                if let Some(result) = module_scope {\n-                    if !suggestion_choices.is_empty() {\n-                        suggestion_choices.push_str(\" or \");\n-                    }\n-                    write!(suggestion_choices, \"`self::{}`\", name);\n-                    if uniform_paths_feature {\n-                        err.span_label(result.span,\n-                            format!(\"can refer to `self::{}`\", name));\n-                    } else {\n-                        err.span_label(result.span,\n-                            format!(\"may refer to `self::{}` in the future\", name));\n-                    }\n-                }\n-                for result in block_scopes() {\n-                    err.span_label(result.span,\n-                        format!(\"shadowed by block-scoped `{}`\", name));\n+            let msg = format!(\"`{}` import is ambiguous\", name);\n+            let mut err = self.session.struct_span_err(span, &msg);\n+            let mut suggestion_choices = String::new();\n+            if external_crate.is_some() {\n+                write!(suggestion_choices, \"`::{}`\", name);\n+                err.span_label(span,\n+                    format!(\"can refer to external crate `::{}`\", name));\n+            }\n+            if let Some(result) = results.module_scope {\n+                if !suggestion_choices.is_empty() {\n+                    suggestion_choices.push_str(\" or \");\n                 }\n-                err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n+                write!(suggestion_choices, \"`self::{}`\", name);\n                 if uniform_paths_feature {\n-                    err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+                    err.span_label(result.span,\n+                        format!(\"can refer to `self::{}`\", name));\n                 } else {\n-                    err.note(\"in the future, `#![feature(uniform_paths)]` may become the default\");\n+                    err.span_label(result.span,\n+                        format!(\"may refer to `self::{}` in the future\", name));\n                 }\n-                err.emit();\n-            });\n+            }\n+            for result in results.block_scopes {\n+                err.span_label(result.span,\n+                    format!(\"shadowed by block-scoped `{}`\", name));\n+            }\n+            err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n+            if uniform_paths_feature {\n+                err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+            } else {\n+                err.note(\"in the future, `#![feature(uniform_paths)]` may become the default\");\n+            }\n+            err.emit();\n         }\n \n         if !error_vec.is_empty() {"}, {"sha": "1aaa1e70726c88295a352c3959f50b23bbd4fe37", "filename": "src/test/ui/run-pass/uniform-paths/basic-nested.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs?ref=2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "patch": "@@ -59,4 +59,12 @@ fn main() {\n     bar::io::stdout();\n     bar::std();\n     bar::std!();\n+\n+    {\n+        // Test that having `io` in a module scope and a non-module\n+        // scope is allowed, when both resolve to the same definition.\n+        use std::io;\n+        use io::stdout;\n+        stdout();\n+    }\n }"}, {"sha": "fbdac98d2582e9f3e87860e0c59617356c95ea49", "filename": "src/test/ui/run-pass/uniform-paths/basic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab3eba30741652ba538bc2fc2bba9d81a5c84c6/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs?ref=2ab3eba30741652ba538bc2fc2bba9d81a5c84c6", "patch": "@@ -33,4 +33,12 @@ fn main() {\n     Foo(());\n     std_io::stdout();\n     local_io(());\n+\n+    {\n+        // Test that having `std_io` in a module scope and a non-module\n+        // scope is allowed, when both resolve to the same definition.\n+        use std::io as std_io;\n+        use std_io::stdout;\n+        stdout();\n+    }\n }"}]}