{"sha": "bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTBlZjdiMjdlN2M2YWI2ZTRlNjg4OThhYTZjY2QyNDBmYzU3ZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-10T14:54:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-12T19:47:31Z"}, "message": "rustc_typeck/check/closure: rustfmt", "tree": {"sha": "f8fee6ff4ae81a4c4653648e569fcf6726869322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8fee6ff4ae81a4c4653648e569fcf6726869322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3", "html_url": "https://github.com/rust-lang/rust/commit/bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16362c737fe740f630ada06349fa9004e2a51bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16362c737fe740f630ada06349fa9004e2a51bb7", "html_url": "https://github.com/rust-lang/rust/commit/16362c737fe740f630ada06349fa9004e2a51bb7"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "5e9c283a0c6e813e9d1e09e9f434e39a38d7ff39", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=bd10ef7b27e7c6ab6e4e68898aa6ccd240fc57f3", "patch": "@@ -42,8 +42,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     ) -> Ty<'tcx> {\n         debug!(\n             \"check_expr_closure(expr={:?},expected={:?})\",\n-            expr,\n-            expected\n+            expr, expected\n         );\n \n         // It's always helpful for inference if we know the kind of\n@@ -68,8 +67,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     ) -> Ty<'tcx> {\n         debug!(\n             \"check_closure(opt_kind={:?}, expected_sig={:?})\",\n-            opt_kind,\n-            expected_sig\n+            opt_kind, expected_sig\n         );\n \n         let expr_def_id = self.tcx.hir.local_def_id(expr.id);\n@@ -109,19 +107,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n         if let Some(GeneratorTypes { yield_ty, interior }) = generator_types {\n-            self.demand_eqtype(expr.span,\n-                               yield_ty,\n-                               substs.generator_yield_ty(expr_def_id, self.tcx));\n-            self.demand_eqtype(expr.span,\n-                               liberated_sig.output(),\n-                               substs.generator_return_ty(expr_def_id, self.tcx));\n+            self.demand_eqtype(\n+                expr.span,\n+                yield_ty,\n+                substs.generator_yield_ty(expr_def_id, self.tcx),\n+            );\n+            self.demand_eqtype(\n+                expr.span,\n+                liberated_sig.output(),\n+                substs.generator_return_ty(expr_def_id, self.tcx),\n+            );\n             return self.tcx.mk_generator(expr_def_id, substs, interior);\n         }\n \n         debug!(\n             \"check_closure: expr.id={:?} closure_type={:?}\",\n-            expr.id,\n-            closure_type\n+            expr.id, closure_type\n         );\n \n         // Tuple up the arguments and insert the resulting function type into\n@@ -138,20 +139,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\n             \"check_closure: expr_def_id={:?}, sig={:?}, opt_kind={:?}\",\n-            expr_def_id,\n-            sig,\n-            opt_kind\n+            expr_def_id, sig, opt_kind\n         );\n \n         let sig_fn_ptr_ty = self.tcx.mk_fn_ptr(sig);\n-        self.demand_eqtype(expr.span,\n-                           sig_fn_ptr_ty,\n-                           substs.closure_sig_ty(expr_def_id, self.tcx));\n+        self.demand_eqtype(\n+            expr.span,\n+            sig_fn_ptr_ty,\n+            substs.closure_sig_ty(expr_def_id, self.tcx),\n+        );\n \n         if let Some(kind) = opt_kind {\n-            self.demand_eqtype(expr.span,\n-                               kind.to_ty(self.tcx),\n-                               substs.closure_kind_ty(expr_def_id, self.tcx));\n+            self.demand_eqtype(\n+                expr.span,\n+                kind.to_ty(self.tcx),\n+                substs.closure_kind_ty(expr_def_id, self.tcx),\n+            );\n         }\n \n         closure_type\n@@ -314,8 +317,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let self_ty = self.shallow_resolve(trait_ref.self_ty());\n         debug!(\n             \"self_type_matches_expected_vid(trait_ref={:?}, self_ty={:?})\",\n-            trait_ref,\n-            self_ty\n+            trait_ref, self_ty\n         );\n         match self_ty.sty {\n             ty::TyInfer(ty::TyVar(v)) if expected_vid == v => Some(trait_ref),\n@@ -564,7 +566,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         body: &hir::Body,\n         bound_sig: ty::PolyFnSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n-        let liberated_sig = self.tcx().liberate_late_bound_regions(expr_def_id, &bound_sig);\n+        let liberated_sig = self.tcx()\n+            .liberate_late_bound_regions(expr_def_id, &bound_sig);\n         let liberated_sig = self.inh.normalize_associated_types_in(\n             body.value.span,\n             body.value.id,"}]}