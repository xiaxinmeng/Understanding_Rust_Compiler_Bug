{"sha": "3251bd690eadc41f4163bdb11975b15ff739fa47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNTFiZDY5MGVhZGM0MWY0MTYzYmRiMTE5NzViMTVmZjczOWZhNDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-07T02:38:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-07T02:38:56Z"}, "message": "Fix some copy-paste bugs in visit glue, un-xfail reflect-visit-type.", "tree": {"sha": "f28d253ef7ae3e1ad31e416215c1faa2d9b2a23c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28d253ef7ae3e1ad31e416215c1faa2d9b2a23c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3251bd690eadc41f4163bdb11975b15ff739fa47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3251bd690eadc41f4163bdb11975b15ff739fa47", "html_url": "https://github.com/rust-lang/rust/commit/3251bd690eadc41f4163bdb11975b15ff739fa47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3251bd690eadc41f4163bdb11975b15ff739fa47/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4fb0f9eea00c619c2b91f83072306e89549c260", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fb0f9eea00c619c2b91f83072306e89549c260", "html_url": "https://github.com/rust-lang/rust/commit/f4fb0f9eea00c619c2b91f83072306e89549c260"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "c1d05bf39da1f0f7a2c2339fba8e4994e1d3ff8b", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3251bd690eadc41f4163bdb11975b15ff739fa47/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3251bd690eadc41f4163bdb11975b15ff739fa47/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3251bd690eadc41f4163bdb11975b15ff739fa47", "patch": "@@ -1186,7 +1186,7 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: uint,\n               }\n             }\n         } else if field == abi::tydesc_field_visit_glue {\n-            alt ti.free_glue {\n+            alt ti.visit_glue {\n               some(_) { }\n               none {\n                 #debug(\"+++ lazily_emit_tydesc_glue VISIT %s\",\n@@ -1222,6 +1222,8 @@ fn call_tydesc_glue_full(cx: block, v: ValueRef, tydesc: ValueRef,\n             static_glue_fn = sti.drop_glue;\n         } else if field == abi::tydesc_field_free_glue {\n             static_glue_fn = sti.free_glue;\n+        } else if field == abi::tydesc_field_visit_glue {\n+            static_glue_fn = sti.visit_glue;\n         }\n       }\n     }"}, {"sha": "09c5ebbf96aaac54cc79545132297a7f8f6b2053", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3251bd690eadc41f4163bdb11975b15ff739fa47/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3251bd690eadc41f4163bdb11975b15ff739fa47/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3251bd690eadc41f4163bdb11975b15ff739fa47", "patch": "@@ -24,29 +24,30 @@ fn visit_ty_steps(bcx: block, t: ty::t,\n       ty::ty_bool { step(bcx, \"visit_bool\", []) }\n       ty::ty_int(ast::ty_i) { step(bcx, \"visit_int\", []) }\n       ty::ty_int(ast::ty_char) { step(bcx, \"visit_char\", []) }\n-          ty::ty_int(ast::ty_i8) { step(bcx, \"visit_i8\", []) }\n-          ty::ty_int(ast::ty_i16) { step(bcx, \"visit_i16\", []) }\n-          ty::ty_int(ast::ty_i32) { step(bcx, \"visit_i32\", []) }\n-          ty::ty_int(ast::ty_i64) { step(bcx, \"visit_i64\", []) }\n-          ty::ty_uint(ast::ty_u) { step(bcx, \"visit_uint\", []) }\n-          ty::ty_uint(ast::ty_u8) { step(bcx, \"visit_u8\", []) }\n-          ty::ty_uint(ast::ty_u16) { step(bcx, \"visit_u16\", []) }\n-          ty::ty_uint(ast::ty_u32) { step(bcx, \"visit_u32\", []) }\n-          ty::ty_uint(ast::ty_u64) { step(bcx, \"visit_u64\", []) }\n-          ty::ty_float(ast::ty_f) { step(bcx, \"visit_float\", []) }\n-          ty::ty_float(ast::ty_f32) { step(bcx, \"visit_f32\", []) }\n-          ty::ty_float(ast::ty_f64) { step(bcx, \"visit_f64\", []) }\n-          ty::ty_str { step(bcx, \"visit_str\", []) }\n+      ty::ty_int(ast::ty_i8) { step(bcx, \"visit_i8\", []) }\n+      ty::ty_int(ast::ty_i16) { step(bcx, \"visit_i16\", []) }\n+      ty::ty_int(ast::ty_i32) { step(bcx, \"visit_i32\", []) }\n+      ty::ty_int(ast::ty_i64) { step(bcx, \"visit_i64\", []) }\n+      ty::ty_uint(ast::ty_u) { step(bcx, \"visit_uint\", []) }\n+      ty::ty_uint(ast::ty_u8) { step(bcx, \"visit_u8\", []) }\n+      ty::ty_uint(ast::ty_u16) { step(bcx, \"visit_u16\", []) }\n+      ty::ty_uint(ast::ty_u32) { step(bcx, \"visit_u32\", []) }\n+      ty::ty_uint(ast::ty_u64) { step(bcx, \"visit_u64\", []) }\n+      ty::ty_float(ast::ty_f) { step(bcx, \"visit_float\", []) }\n+      ty::ty_float(ast::ty_f32) { step(bcx, \"visit_f32\", []) }\n+      ty::ty_float(ast::ty_f64) { step(bcx, \"visit_f64\", []) }\n+      ty::ty_str { step(bcx, \"visit_str\", []) }\n \n-          ty::ty_vec(mt) {\n-            let bcx = step(bcx, \"visit_vec_of\",\n-                           [C_uint(ccx, mt.mutbl as uint)]);\n-            sub(bcx, mt.ty)\n-          }\n+      ty::ty_vec(mt) {\n+        let bcx = step(bcx, \"visit_vec_of\",\n+                       [C_uint(ccx, mt.mutbl as uint)]);\n+        sub(bcx, mt.ty)\n+      }\n \n       _ {\n-        bcx.sess().unimpl(\"trans::reflect::visit_ty_args on \"\n-                          + ty_to_str(bcx.ccx().tcx, t));\n+        // Ideally this would be an unimpl, but sadly we have\n+        // to pretend we can visit everything at this point.\n+        step(bcx, \"visit_bot\", [])\n       }\n     }\n }"}, {"sha": "4b92e518b2e49ddc0a1d8296b22c212e97c8989d", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3251bd690eadc41f4163bdb11975b15ff739fa47/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3251bd690eadc41f4163bdb11975b15ff739fa47/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=3251bd690eadc41f4163bdb11975b15ff739fa47", "patch": "@@ -1,7 +1,3 @@\n-// xfail-test\n-//\n-// This doesn't work quite yet in check-fast mode. Not sure why. Crashes.\n-\n enum my_visitor = @{ mut types: [str] };\n \n impl of intrinsic::ty_visitor for my_visitor {"}]}