{"sha": "e3d98020727992dc72973ba55e9bdbfbf8f966a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZDk4MDIwNzI3OTkyZGM3Mjk3M2JhNTVlOWJkYmZiZjhmOTY2YTM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-24T20:05:37Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-24T20:05:37Z"}, "message": "Merge pull request #706 from mcarton/and_then\n\n`span_suggestion` and macro checks", "tree": {"sha": "7839f1dc5c1ccfd1fa47a6a412dfbe63cdba8a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7839f1dc5c1ccfd1fa47a6a412dfbe63cdba8a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d98020727992dc72973ba55e9bdbfbf8f966a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d98020727992dc72973ba55e9bdbfbf8f966a3", "html_url": "https://github.com/rust-lang/rust/commit/e3d98020727992dc72973ba55e9bdbfbf8f966a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d98020727992dc72973ba55e9bdbfbf8f966a3/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d299b5d4d9c6d66cfe7f9ba081a1de646b6dc310", "url": "https://api.github.com/repos/rust-lang/rust/commits/d299b5d4d9c6d66cfe7f9ba081a1de646b6dc310", "html_url": "https://github.com/rust-lang/rust/commit/d299b5d4d9c6d66cfe7f9ba081a1de646b6dc310"}, {"sha": "783437eef0380dff8e1a6a4d049366aa54011f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/783437eef0380dff8e1a6a4d049366aa54011f48", "html_url": "https://github.com/rust-lang/rust/commit/783437eef0380dff8e1a6a4d049366aa54011f48"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "f63e733d65b922f4e3eb767ba4067f75c6eaf53a", "filename": "src/len_zero.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e3d98020727992dc72973ba55e9bdbfbf8f966a3/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d98020727992dc72973ba55e9bdbfbf8f966a3/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=e3d98020727992dc72973ba55e9bdbfbf8f966a3", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n \n use syntax::ast::{Lit, LitKind};\n \n-use utils::{get_item_name, snippet, span_lint, walk_ptrs_ty};\n+use utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_then, walk_ptrs_ty};\n \n /// **What it does:** This lint checks for getting the length of something via `.len()` just to compare to zero, and suggests using `.is_empty()` where applicable.\n ///\n@@ -51,6 +51,10 @@ impl LintPass for LenZero {\n \n impl LateLintPass for LenZero {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if in_macro(cx, item.span) {\n+            return;\n+        }\n+\n         match item.node {\n             ItemTrait(_, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n             ItemImpl(_, _, _, None, _, ref impl_items) => check_impl_items(cx, item, impl_items),\n@@ -59,6 +63,10 @@ impl LateLintPass for LenZero {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if in_macro(cx, expr.span) {\n+            return;\n+        }\n+\n         if let ExprBinary(Spanned{node: cmp, ..}, ref left, ref right) = expr.node {\n             match cmp {\n                 BiEq => check_cmp(cx, expr.span, left, right, \"\"),\n@@ -80,7 +88,6 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItem]) {\n     }\n \n     if !trait_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n-        // span_lint(cx, LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident));\n         for i in trait_items {\n             if is_named_self(i, \"len\") {\n                 span_lint(cx,\n@@ -151,12 +158,17 @@ fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str)\n fn check_len_zero(cx: &LateContext, span: Span, name: &Name, args: &[P<Expr>], lit: &Lit, op: &str) {\n     if let Spanned{node: LitKind::Int(0, _), ..} = *lit {\n         if name.as_str() == \"len\" && args.len() == 1 && has_is_empty(cx, &args[0]) {\n-            span_lint(cx,\n-                      LEN_ZERO,\n-                      span,\n-                      &format!(\"consider replacing the len comparison with `{}{}.is_empty()`\",\n-                               op,\n-                               snippet(cx, args[0].span, \"_\")));\n+            span_lint_and_then(cx,\n+                               LEN_ZERO,\n+                               span,\n+                               \"length comparison to zero\",\n+                               |db| {\n+                                   db.span_suggestion(span,\n+                                                      \"consider using `is_empty`\",\n+                                                       format!(\"{}{}.is_empty()\",\n+                                                               op,\n+                                                               snippet(cx, args[0].span, \"_\")));\n+                               });\n         }\n     }\n }"}, {"sha": "602de0eebcb554760414f98016142a23e91c29c0", "filename": "src/loops.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3d98020727992dc72973ba55e9bdbfbf8f966a3/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d98020727992dc72973ba55e9bdbfbf8f966a3/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=e3d98020727992dc72973ba55e9bdbfbf8f966a3", "patch": "@@ -271,14 +271,17 @@ impl LateLintPass for LoopsPass {\n                                 } else {\n                                     expr_block(cx, &arms[0].body, Some(other_stuff.join(\"\\n    \")), \"..\")\n                                 };\n-                                span_help_and_lint(cx,\n+                                span_lint_and_then(cx,\n                                                    WHILE_LET_LOOP,\n                                                    expr.span,\n                                                    \"this loop could be written as a `while let` loop\",\n-                                                   &format!(\"try\\nwhile let {} = {} {}\",\n-                                                            snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                                            snippet(cx, matchexpr.span, \"..\"),\n-                                                            loop_body));\n+                                                   |db| {\n+                                                       let sug = format!(\"while let {} = {} {}\",\n+                                                                         snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                                                         snippet(cx, matchexpr.span, \"..\"),\n+                                                                         loop_body);\n+                                                       db.span_suggestion(expr.span, \"try\", sug);\n+                                                   });\n                             }\n                         }\n                         _ => (),"}, {"sha": "9814a1c2d7d1d2ce78729ddf50350a007ae7dff8", "filename": "tests/compile-fail/len_zero.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3d98020727992dc72973ba55e9bdbfbf8f966a3/tests%2Fcompile-fail%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d98020727992dc72973ba55e9bdbfbf8f966a3/tests%2Fcompile-fail%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flen_zero.rs?ref=e3d98020727992dc72973ba55e9bdbfbf8f966a3", "patch": "@@ -69,7 +69,10 @@ impl HasWrongIsEmpty {\n #[deny(len_zero)]\n fn main() {\n     let x = [1, 2];\n-    if x.len() == 0 { //~ERROR consider replacing the len comparison\n+    if x.len() == 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION x.is_empty()\n         println!(\"This should not happen!\");\n     }\n \n@@ -84,19 +87,31 @@ fn main() {\n     }\n \n     let hie = HasIsEmpty;\n-    if hie.len() == 0 { //~ERROR consider replacing the len comparison\n+    if hie.len() == 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION hie.is_empty()\n         println!(\"Or this!\");\n     }\n-    if hie.len() != 0 { //~ERROR consider replacing the len comparison\n+    if hie.len() != 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION !hie.is_empty()\n         println!(\"Or this!\");\n     }\n-    if hie.len() > 0 { //~ERROR consider replacing the len comparison\n+    if hie.len() > 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION !hie.is_empty()\n         println!(\"Or this!\");\n     }\n     assert!(!hie.is_empty());\n \n     let wie : &WithIsEmpty = &Wither;\n-    if wie.len() == 0 { //~ERROR consider replacing the len comparison\n+    if wie.len() == 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION wie.is_empty()\n         println!(\"Or this!\");\n     }\n     assert!(!wie.is_empty());"}, {"sha": "bbb76cfbfafbfd2b35741041c1cb48c144dd548d", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3d98020727992dc72973ba55e9bdbfbf8f966a3/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d98020727992dc72973ba55e9bdbfbf8f966a3/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=e3d98020727992dc72973ba55e9bdbfbf8f966a3", "patch": "@@ -6,7 +6,10 @@\n \n fn main() {\n     let y = Some(true);\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(_x) = y {\n         if let Some(_x) = y {\n             let _v = 1;\n         } else {\n@@ -19,21 +22,30 @@ fn main() {\n         }\n         break;\n     }\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(_x) = y {\n         match y {\n             Some(_x) => true,\n             None => break\n         };\n     }\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(x) = y {\n         let x = match y {\n             Some(x) => x,\n             None => break\n         };\n         let _x = x;\n         let _str = \"foo\";\n     }\n-    loop { //~ERROR\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(x) = y {\n         let x = match y {\n             Some(x) => x,\n             None => break,"}]}