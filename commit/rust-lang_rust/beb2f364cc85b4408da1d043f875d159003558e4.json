{"sha": "beb2f364cc85b4408da1d043f875d159003558e4", "node_id": "C_kwDOAAsO6NoAKGJlYjJmMzY0Y2M4NWI0NDA4ZGExZDA0M2Y4NzVkMTU5MDAzNTU4ZTQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-20T21:31:40Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-20T21:39:26Z"}, "message": "Fix panic by checking if `CStore` has the crate data we want before actually querying it", "tree": {"sha": "8da8322708b4be76db453800a02bd259d811fa2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da8322708b4be76db453800a02bd259d811fa2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb2f364cc85b4408da1d043f875d159003558e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb2f364cc85b4408da1d043f875d159003558e4", "html_url": "https://github.com/rust-lang/rust/commit/beb2f364cc85b4408da1d043f875d159003558e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb2f364cc85b4408da1d043f875d159003558e4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987c73158e2120ef75b4b7fc46dcd88a621106d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/987c73158e2120ef75b4b7fc46dcd88a621106d8", "html_url": "https://github.com/rust-lang/rust/commit/987c73158e2120ef75b4b7fc46dcd88a621106d8"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "555db5846edd09978a5ecfab7a7ac1eb6dc62798", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb2f364cc85b4408da1d043f875d159003558e4/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2f364cc85b4408da1d043f875d159003558e4/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=beb2f364cc85b4408da1d043f875d159003558e4", "patch": "@@ -133,6 +133,10 @@ impl CStore {\n         CrateNum::new(self.metas.len() - 1)\n     }\n \n+    pub fn has_crate_data(&self, cnum: CrateNum) -> bool {\n+        self.metas[cnum].is_some()\n+    }\n+\n     pub(crate) fn get_crate_data(&self, cnum: CrateNum) -> CrateMetadataRef<'_> {\n         let cdata = self.metas[cnum]\n             .as_ref()"}, {"sha": "056eda089c1de6b8c7003e39113c0ae71cda304a", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/beb2f364cc85b4408da1d043f875d159003558e4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2f364cc85b4408da1d043f875d159003558e4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=beb2f364cc85b4408da1d043f875d159003558e4", "patch": "@@ -565,7 +565,7 @@ fn generate_macro_def_id_path(\n     def_id: DefId,\n     cx: &Context<'_>,\n     root_path: Option<&str>,\n-) -> (String, ItemType, Vec<Symbol>) {\n+) -> Result<(String, ItemType, Vec<Symbol>), HrefError> {\n     let tcx = cx.shared.tcx;\n     let crate_name = tcx.crate_name(def_id.krate).to_string();\n     let cache = cx.cache();\n@@ -583,9 +583,15 @@ fn generate_macro_def_id_path(\n         })\n         .collect();\n     let relative = fqp.iter().map(|elem| elem.to_string());\n+    let cstore = CStore::from_tcx(tcx);\n+    // We need this to prevent a `panic` when this function is used from intra doc links...\n+    if !cstore.has_crate_data(def_id.krate) {\n+        debug!(\"No data for crate {}\", crate_name);\n+        return Err(HrefError::NotInExternalCache);\n+    }\n     // Check to see if it is a macro 2.0 or built-in macro.\n     // More information in <https://rust-lang.github.io/rfcs/1584-macros.html>.\n-    let is_macro_2 = match CStore::from_tcx(tcx).load_macro_untracked(def_id, tcx.sess) {\n+    let is_macro_2 = match cstore.load_macro_untracked(def_id, tcx.sess) {\n         LoadedMacro::MacroDef(def, _) => {\n             // If `ast_def.macro_rules` is `true`, then it's not a macro 2.0.\n             matches!(&def.kind, ast::ItemKind::MacroDef(ast_def) if !ast_def.macro_rules)\n@@ -601,7 +607,8 @@ fn generate_macro_def_id_path(\n     if path.len() < 2 {\n         // The minimum we can have is the crate name followed by the macro name. If shorter, then\n         // it means that that `relative` was empty, which is an error.\n-        panic!(\"macro path cannot be empty!\");\n+        debug!(\"macro path cannot be empty!\");\n+        return Err(HrefError::NotInExternalCache);\n     }\n \n     if let Some(last) = path.last_mut() {\n@@ -618,10 +625,11 @@ fn generate_macro_def_id_path(\n             format!(\"{}{}/{}\", root_path.unwrap_or(\"\"), crate_name, path.join(\"/\"))\n         }\n         ExternalLocation::Unknown => {\n-            panic!(\"crate {} not in cache when linkifying macros\", crate_name)\n+            debug!(\"crate {} not in cache when linkifying macros\", crate_name);\n+            return Err(HrefError::NotInExternalCache);\n         }\n     };\n-    (url, ItemType::Macro, fqp)\n+    Ok((url, ItemType::Macro, fqp))\n }\n \n pub(crate) fn href_with_root_path(\n@@ -680,7 +688,7 @@ pub(crate) fn href_with_root_path(\n                     },\n                 )\n             } else if matches!(def_kind, DefKind::Macro(_)) {\n-                return Ok(generate_macro_def_id_path(did, cx, root_path));\n+                return generate_macro_def_id_path(did, cx, root_path);\n             } else {\n                 return Err(HrefError::NotInExternalCache);\n             }"}]}