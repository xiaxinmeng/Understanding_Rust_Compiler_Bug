{"sha": "9c2d83a4c809b0b11ca389bb454e197859e5116c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMmQ4M2E0YzgwOWIwYjExY2EzODliYjQ1NGUxOTc4NTllNTExNmM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-16T16:47:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "Add crude implementation of tuplestruct pattern inference", "tree": {"sha": "36fd28ab25e05276559d5a1086e63cb58aae8673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36fd28ab25e05276559d5a1086e63cb58aae8673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c2d83a4c809b0b11ca389bb454e197859e5116c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2d83a4c809b0b11ca389bb454e197859e5116c", "html_url": "https://github.com/rust-lang/rust/commit/9c2d83a4c809b0b11ca389bb454e197859e5116c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c2d83a4c809b0b11ca389bb454e197859e5116c/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "html_url": "https://github.com/rust-lang/rust/commit/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a"}], "stats": {"total": 129, "additions": 89, "deletions": 40}, "files": [{"sha": "cdecbd0642c0046760dd97dd5fc2a3e2af99563e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9c2d83a4c809b0b11ca389bb454e197859e5116c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2d83a4c809b0b11ca389bb454e197859e5116c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9c2d83a4c809b0b11ca389bb454e197859e5116c", "patch": "@@ -877,50 +877,79 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn infer_pat(&mut self, pat: PatId, expected: &Expectation) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n-        match (&body[pat], &expected.ty) {\n+        let ty = match (&body[pat], &expected.ty) {\n             (Pat::Tuple(ref args), &Ty::Tuple(ref tuple_args))\n                 if args.len() == tuple_args.len() =>\n             {\n                 for (&pat, ty) in args.iter().zip(tuple_args.iter()) {\n                     // FIXME: can we do w/o cloning?\n                     self.infer_pat(pat, &Expectation::has_type(ty.clone()));\n                 }\n+                expected.ty.clone()\n             }\n             (&Pat::Ref { pat, mutability }, &Ty::Ref(ref sub_ty, ty_mut))\n                 if mutability == ty_mut =>\n             {\n                 self.infer_pat(pat, &Expectation::has_type((&**sub_ty).clone()));\n+                expected.ty.clone()\n             }\n-            (pattern, &Ty::Adt { def_id, .. }) => {\n-                let adt_def = def_id.resolve(self.db);\n-                match (pattern, adt_def) {\n-                    (&Pat::Struct, Def::Struct(s)) => {}\n-                    (\n-                        &Pat::TupleStruct {\n-                            path: ref p,\n-                            args: ref sub_pats,\n-                        },\n-                        Def::Enum(ref e),\n-                    ) => {\n-                        // TODO: resolve enum\n-                    }\n-                    (\n-                        &Pat::TupleStruct {\n-                            path: ref p,\n-                            args: ref sub_pats,\n-                        },\n-                        Def::EnumVariant(ref e),\n-                    ) => {\n-                        let variant_data = self.db.enum_variant_data(e.def_id);\n+            (\n+                &Pat::TupleStruct {\n+                    path: ref p,\n+                    args: ref sub_pats,\n+                },\n+                _expected,\n+            ) => {\n+                let def = p\n+                    .as_ref()\n+                    .and_then(|path| self.module.resolve_path(self.db, &path).take_types())\n+                    .map(|def_id| def_id.resolve(self.db));\n+\n+                if let Some(def) = def {\n+                    let (ty, fields) = match def {\n+                        Def::Struct(s) => {\n+                            let fields: Vec<_> = self\n+                                .db\n+                                .struct_data(s.def_id())\n+                                .variant_data\n+                                .fields()\n+                                .iter()\n+                                .cloned()\n+                                .collect();\n+                            (type_for_struct(self.db, s), fields)\n+                        }\n+                        Def::EnumVariant(ev) => {\n+                            let fields: Vec<_> =\n+                                ev.variant_data(self.db).fields().iter().cloned().collect();\n+                            (type_for_enum_variant(self.db, ev), fields)\n+                        }\n+                        _ => unreachable!(),\n+                    };\n+                    // walk subpats\n+                    if fields.len() == sub_pats.len() {\n+                        for (&sub_pat, field) in sub_pats.iter().zip(fields.iter()) {\n+                            let sub_ty = Ty::from_hir(\n+                                self.db,\n+                                &self.module,\n+                                self.impl_block.as_ref(),\n+                                &field.type_ref,\n+                            );\n+\n+                            self.infer_pat(sub_pat, &Expectation::has_type(sub_ty));\n+                        }\n+\n+                        ty\n+                    } else {\n+                        expected.ty.clone()\n                     }\n-                    _ => {}\n+                } else {\n+                    expected.ty.clone()\n                 }\n             }\n-            // TODO: implement more\n-            (_, ref _expected_ty) => {}\n+            (_, ref _expected_ty) => expected.ty.clone(),\n         };\n         // use a new type variable if we got Ty::Unknown here\n-        let ty = self.insert_type_vars_shallow(expected.ty.clone());\n+        let ty = self.insert_type_vars_shallow(ty);\n         self.unify(&ty, &expected.ty);\n         let ty = self.resolve_ty_as_possible(ty);\n         self.write_pat_ty(pat, ty.clone());"}, {"sha": "75fe2cc6e56911b61e4261f3a35541fcdba9ad05", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9c2d83a4c809b0b11ca389bb454e197859e5116c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2d83a4c809b0b11ca389bb454e197859e5116c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=9c2d83a4c809b0b11ca389bb454e197859e5116c", "patch": "@@ -359,31 +359,39 @@ fn test(x: &str, y: isize) {\n }\n \n #[test]\n-fn infer_pattern() {\n+fn infer_simple_pattern() {\n     check_inference(\n         r#\"\n-enum E {\n-    A { x: usize },\n-    B\n-}\n-\n fn test(x: &i32) {\n     let y = x;\n     let &z = x;\n     let a = z;\n     let (c, d) = (1, \"hello\");\n+}\n+\"#,\n+        \"pattern.txt\",\n+    );\n+}\n+\n+#[test]\n+fn infer_adt_pattern() {\n+    check_inference(\n+        r#\"\n+enum E {\n+    A { x: usize },\n+    B\n+}\n+\n+struct S(u32, E);\n \n+fn test() {\n     let e = E::A { x: 3 };\n-    if let E::A { x: x } = e {\n-        x\n-    };\n-    match e {\n-        E::A { x } => x,\n-        E::B => 1,\n-    };\n+\n+    let S(y, z) = foo;\n+    let E::A { x: new_var } = e;\n }\n \"#,\n-        \"pattern.txt\",\n+        \"adt_pattern.txt\",\n     );\n }\n "}, {"sha": "d23b865a0360c064a38b08640864a04f203b7155", "filename": "crates/ra_hir/src/ty/tests/data/adt_pattern.txt", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c2d83a4c809b0b11ca389bb454e197859e5116c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fadt_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9c2d83a4c809b0b11ca389bb454e197859e5116c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fadt_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fadt_pattern.txt?ref=9c2d83a4c809b0b11ca389bb454e197859e5116c", "patch": "@@ -0,0 +1,12 @@\n+[49; 192) '{     ...  }; }': ()\n+[59; 60) 'e': E\n+[63; 76) 'E::A { x: 3 }': E\n+[73; 74) '3': usize\n+[82; 124) 'if let...     }': [unknown]\n+[105; 106) 'e': E\n+[107; 124) '{     ...     }': [unknown]\n+[117; 118) 'x': [unknown]\n+[130; 189) 'match ...     }': [unknown]\n+[136; 137) 'e': E\n+[162; 163) 'x': [unknown]\n+[181; 182) '1': i32"}]}