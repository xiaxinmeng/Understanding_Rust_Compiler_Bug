{"sha": "a6c4025fac3c3a60581af72998230d46aa6f5ade", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzQwMjVmYWMzYzNhNjA1ODFhZjcyOTk4MjMwZDQ2YWE2ZjVhZGU=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-11T02:22:36Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-13T18:47:45Z"}, "message": "perf: eagerly convert literals to consts, this avoids creating loads on unevaluated consts\nwhich requires a lot of unnecessary work to evaluate them further down the line.", "tree": {"sha": "e1e162084cf9245c2b0419b4895fa9a84ca3865f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1e162084cf9245c2b0419b4895fa9a84ca3865f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c4025fac3c3a60581af72998230d46aa6f5ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4025fac3c3a60581af72998230d46aa6f5ade", "html_url": "https://github.com/rust-lang/rust/commit/a6c4025fac3c3a60581af72998230d46aa6f5ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4025fac3c3a60581af72998230d46aa6f5ade/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf84eb538fd16743240434b3e837b36c35719fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf84eb538fd16743240434b3e837b36c35719fee", "html_url": "https://github.com/rust-lang/rust/commit/bf84eb538fd16743240434b3e837b36c35719fee"}], "stats": {"total": 266, "additions": 175, "deletions": 91}, "files": [{"sha": "9df8e28254cf5bdebf3402793101eda3371b4839", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -52,7 +52,7 @@\n use crate::hir::map::DefPathHash;\n use crate::ich::{Fingerprint, StableHashingContext};\n use crate::mir;\n-use crate::mir::interpret::GlobalId;\n+use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,"}, {"sha": "21cc54a6e6b2d23eaa81342932f90b81ec3fca5b", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -119,7 +119,7 @@ use crate::mir;\n use crate::ty::codec::TyDecoder;\n use crate::ty::layout::{self, Size};\n use crate::ty::subst::GenericArgKind;\n-use crate::ty::{self, Instance, TyCtxt};\n+use crate::ty::{self, Instance, Ty, TyCtxt};\n use byteorder::{BigEndian, LittleEndian, ReadBytesExt, WriteBytesExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock};\n@@ -131,6 +131,7 @@ use std::fmt;\n use std::io;\n use std::num::NonZeroU32;\n use std::sync::atomic::{AtomicU32, Ordering};\n+use syntax::ast::LitKind;\n \n /// Uniquely identifies one of the following:\n /// - A constant\n@@ -147,6 +148,24 @@ pub struct GlobalId<'tcx> {\n     pub promoted: Option<mir::Promoted>,\n }\n \n+/// Input argument for `tcx.lit_to_const`\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, HashStable)]\n+pub struct LitToConstInput<'tcx> {\n+    /// The absolute value of the resultant constant\n+    pub lit: &'tcx LitKind,\n+    /// The type of the constant\n+    pub ty: Ty<'tcx>,\n+    /// If the constant is negative\n+    pub neg: bool,\n+}\n+\n+/// Error type for `tcx.lit_to_const`\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, HashStable)]\n+pub enum LitToConstError {\n+    UnparseableFloat,\n+    Reported,\n+}\n+\n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n "}, {"sha": "f4c262fbac1d47d40b8d25b451f2c947761baab2", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -1,6 +1,6 @@\n use crate::dep_graph::{DepKind, DepNode, RecoverKey, SerializedDepNodeIndex};\n use crate::mir;\n-use crate::mir::interpret::GlobalId;\n+use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -518,6 +518,13 @@ rustc_queries! {\n             no_force\n             desc { \"get a &core::panic::Location referring to a span\" }\n         }\n+\n+        query lit_to_const(\n+            key: LitToConstInput<'tcx>\n+        ) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n+            no_force\n+            desc { \"converting literal to const\" }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "cbf335ad607ef3e9f1ae84ed3825cde3a0f32df9", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -52,6 +52,16 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl Key for CrateNum {\n     fn query_crate(&self) -> CrateNum {\n         *self"}, {"sha": "0f09a08b199f11fa16564a2c3c9e645833f30014", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -15,6 +15,7 @@ use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult};\n+use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use crate::session::CrateDisambiguator;"}, {"sha": "1c25b269b18fd1fd15f2479e2957e618f36f6b3e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -62,5 +62,5 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)\n-    }\n+    };\n }"}, {"sha": "266f4738c50a6ff044dc755a1675723eec5a4835", "filename": "src/librustc_mir_build/hair/constant.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -1,21 +1,15 @@\n-use rustc::mir::interpret::{ConstValue, Scalar};\n-use rustc::ty::{self, layout::Size, ParamEnv, Ty, TyCtxt};\n+use rustc::mir::interpret::{\n+    truncate, Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n+};\n+use rustc::ty::{self, layout::Size, ParamEnv, TyCtxt};\n use rustc_span::symbol::Symbol;\n use syntax::ast;\n \n-#[derive(PartialEq)]\n-crate enum LitToConstError {\n-    UnparseableFloat,\n-    Reported,\n-}\n-\n crate fn lit_to_const<'tcx>(\n-    lit: &'tcx ast::LitKind,\n     tcx: TyCtxt<'tcx>,\n-    ty: Ty<'tcx>,\n-    neg: bool,\n+    lit_input: LitToConstInput<'tcx>,\n ) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n-    use syntax::ast::*;\n+    let LitToConstInput { lit, ty, neg } = lit_input;\n \n     let trunc = |n| {\n         let param_ty = ParamEnv::reveal_all().and(ty);\n@@ -26,35 +20,50 @@ crate fn lit_to_const<'tcx>(\n         Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n     };\n \n-    use rustc::mir::interpret::*;\n     let lit = match *lit {\n-        LitKind::Str(ref s, _) => {\n+        ast::LitKind::Str(ref s, _) => {\n             let s = s.as_str();\n             let allocation = Allocation::from_byte_aligned_bytes(s.as_bytes());\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n         }\n-        LitKind::ByteStr(ref data) => {\n-            let id = tcx.allocate_bytes(data);\n-            ConstValue::Scalar(Scalar::Ptr(id.into()))\n+        ast::LitKind::ByteStr(ref data) => {\n+            if let ty::Ref(_, ref_ty, _) = ty.kind {\n+                match ref_ty.kind {\n+                    ty::Slice(_) => {\n+                        let allocation = Allocation::from_byte_aligned_bytes(data as &Vec<u8>);\n+                        let allocation = tcx.intern_const_alloc(allocation);\n+                        ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n+                    }\n+                    ty::Array(_, _) => {\n+                        let id = tcx.allocate_bytes(data);\n+                        ConstValue::Scalar(Scalar::Ptr(id.into()))\n+                    }\n+                    _ => {\n+                        bug!(\"bytestring should have type of either &[u8] or &[u8; _], not {}\", ty)\n+                    }\n+                }\n+            } else {\n+                bug!(\"bytestring should have type of either &[u8] or &[u8; _], not {}\", ty)\n+            }\n         }\n-        LitKind::Byte(n) => ConstValue::Scalar(Scalar::from_uint(n, Size::from_bytes(1))),\n-        LitKind::Int(n, _) if neg => {\n+        ast::LitKind::Byte(n) => ConstValue::Scalar(Scalar::from_uint(n, Size::from_bytes(1))),\n+        ast::LitKind::Int(n, _) if neg => {\n             let n = n as i128;\n             let n = n.overflowing_neg().0;\n             trunc(n as u128)?\n         }\n-        LitKind::Int(n, _) => trunc(n)?,\n-        LitKind::Float(n, _) => {\n+        ast::LitKind::Int(n, _) => trunc(n)?,\n+        ast::LitKind::Float(n, _) => {\n             let fty = match ty.kind {\n                 ty::Float(fty) => fty,\n                 _ => bug!(),\n             };\n             parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n         }\n-        LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n-        LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n-        LitKind::Err(_) => unreachable!(),\n+        ast::LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n+        ast::LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n+        ast::LitKind::Err(_) => return Err(LitToConstError::Reported),\n     };\n     Ok(tcx.mk_const(ty::Const { val: ty::ConstKind::Value(lit), ty }))\n }"}, {"sha": "497c6610550f3b3e6791086e20e5d28a0b6916f1", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -5,9 +5,9 @@\n use crate::hair::util::UserAnnotatedTyHelpers;\n use crate::hair::*;\n \n-use crate::hair::constant::{lit_to_const, LitToConstError};\n use rustc::infer::InferCtxt;\n use rustc::middle::region;\n+use rustc::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{GenericArg, InternalSubsts};\n@@ -136,7 +136,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n     ) -> &'tcx ty::Const<'tcx> {\n         trace!(\"const_eval_literal: {:#?}, {:?}, {:?}, {:?}\", lit, ty, sp, neg);\n \n-        match lit_to_const(lit, self.tcx, ty, neg) {\n+        match self.tcx.at(sp).lit_to_const(LitToConstInput { lit, ty, neg }) {\n             Ok(c) => c,\n             Err(LitToConstError::UnparseableFloat) => {\n                 // FIXME(#31407) this is only necessary because float parsing is buggy"}, {"sha": "0f2c76152edae5a42e18c1585d1e283a41f2460c", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -16,7 +16,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n \n-mod constant;\n+crate mod constant;\n crate mod cx;\n \n crate mod pattern;"}, {"sha": "8645abe5c1acce12aa8084edad4989e7b82e1f90", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -6,10 +6,11 @@ mod const_to_pat;\n \n pub(crate) use self::check_match::check_match;\n \n-use crate::hair::constant::*;\n use crate::hair::util::UserAnnotatedTyHelpers;\n \n-use rustc::mir::interpret::{get_slice_bytes, sign_extend, ConstValue, ErrorHandled};\n+use rustc::mir::interpret::{\n+    get_slice_bytes, sign_extend, ConstValue, ErrorHandled, LitToConstError, LitToConstInput,\n+};\n use rustc::mir::UserTypeProjection;\n use rustc::mir::{BorrowKind, Field, Mutability};\n use rustc::ty::layout::VariantIdx;\n@@ -822,35 +823,30 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     /// which would overflow if we tried to evaluate `128_i8` and then negate\n     /// afterwards.\n     fn lower_lit(&mut self, expr: &'tcx hir::Expr<'tcx>) -> PatKind<'tcx> {\n-        match expr.kind {\n-            hir::ExprKind::Lit(ref lit) => {\n-                let ty = self.tables.expr_ty(expr);\n-                match lit_to_const(&lit.node, self.tcx, ty, false) {\n-                    Ok(val) => *self.const_to_pat(val, expr.hir_id, lit.span).kind,\n-                    Err(LitToConstError::UnparseableFloat) => {\n-                        self.errors.push(PatternError::FloatBug);\n-                        PatKind::Wild\n-                    }\n-                    Err(LitToConstError::Reported) => PatKind::Wild,\n+        if let hir::ExprKind::Path(ref qpath) = expr.kind {\n+            *self.lower_path(qpath, expr.hir_id, expr.span).kind\n+        } else {\n+            let (lit, neg) = match expr.kind {\n+                hir::ExprKind::Lit(ref lit) => (lit, false),\n+                hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n+                    let lit = match expr.kind {\n+                        hir::ExprKind::Lit(ref lit) => lit,\n+                        _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n+                    };\n+                    (lit, true)\n                 }\n-            }\n-            hir::ExprKind::Path(ref qpath) => *self.lower_path(qpath, expr.hir_id, expr.span).kind,\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n-                let ty = self.tables.expr_ty(expr);\n-                let lit = match expr.kind {\n-                    hir::ExprKind::Lit(ref lit) => lit,\n-                    _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n-                };\n-                match lit_to_const(&lit.node, self.tcx, ty, true) {\n-                    Ok(val) => *self.const_to_pat(val, expr.hir_id, lit.span).kind,\n-                    Err(LitToConstError::UnparseableFloat) => {\n-                        self.errors.push(PatternError::FloatBug);\n-                        PatKind::Wild\n-                    }\n-                    Err(LitToConstError::Reported) => PatKind::Wild,\n+                _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n+            };\n+\n+            let lit_input = LitToConstInput { lit: &lit.node, ty: self.tables.expr_ty(expr), neg };\n+            match self.tcx.at(expr.span).lit_to_const(lit_input) {\n+                Ok(val) => *self.const_to_pat(val, expr.hir_id, lit.span).kind,\n+                Err(LitToConstError::UnparseableFloat) => {\n+                    self.errors.push(PatternError::FloatBug);\n+                    PatKind::Wild\n                 }\n+                Err(LitToConstError::Reported) => PatKind::Wild,\n             }\n-            _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n         }\n     }\n }"}, {"sha": "5a17f36e1da25a3c80b7ffd6f3f248b143b1c50b", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -22,5 +22,6 @@ use rustc::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     providers.check_match = hair::pattern::check_match;\n+    providers.lit_to_const = hair::constant::lit_to_const;\n     providers.mir_built = build::mir_built;\n }"}, {"sha": "920ffaa4c3a0b04e9604d78f7055652689265297", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength FIXME(#67418) Split up this file\n //! Conversion from AST representation of types to the `ty.rs` representation.\n //! The main routine here is `ast_ty_to_ty()`; each use is parameterized by an\n //! instance of `AstConv`.\n@@ -37,6 +38,7 @@ use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n \n+use rustc::mir::interpret::LitToConstInput;\n use rustc_error_codes::*;\n \n #[derive(Debug)]\n@@ -2699,17 +2701,28 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let tcx = self.tcx();\n         let def_id = tcx.hir().local_def_id(ast_const.hir_id);\n \n-        let mut const_ = ty::Const {\n-            val: ty::ConstKind::Unevaluated(\n-                def_id,\n-                InternalSubsts::identity_for_item(tcx, def_id),\n-                None,\n-            ),\n-            ty,\n+        let expr = &tcx.hir().body(ast_const.body).value;\n+\n+        let lit_input = match expr.kind {\n+            hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n+            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => match expr.kind {\n+                hir::ExprKind::Lit(ref lit) => {\n+                    Some(LitToConstInput { lit: &lit.node, ty, neg: true })\n+                }\n+                _ => None,\n+            },\n+            _ => None,\n         };\n \n-        let expr = &tcx.hir().body(ast_const.body).value;\n-        if let Some(def_id) = self.const_param_def_id(expr) {\n+        if let Some(lit_input) = lit_input {\n+            // If an error occurred, ignore that it's a literal and leave reporting the error up to\n+            // mir\n+            if let Ok(c) = tcx.at(expr.span).lit_to_const(lit_input) {\n+                return c;\n+            }\n+        }\n+\n+        let kind = if let Some(def_id) = self.const_param_def_id(expr) {\n             // Find the name and index of the const parameter by indexing the generics of the\n             // parent item and construct a `ParamConst`.\n             let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -2718,10 +2731,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n             let name = tcx.hir().name(hir_id);\n-            const_.val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n-        }\n-\n-        tcx.mk_const(const_)\n+            ty::ConstKind::Param(ty::ParamConst::new(index, name))\n+        } else {\n+            ty::ConstKind::Unevaluated(def_id, InternalSubsts::identity_for_item(tcx, def_id), None)\n+        };\n+        tcx.mk_const(ty::Const { val: kind, ty })\n     }\n \n     pub fn impl_trait_ty_to_ty("}, {"sha": "ace12a7ffd2080fc16576b16cae7ead6cd77aead", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -1441,8 +1441,17 @@ pub struct MacroDef {\n     pub legacy: bool,\n }\n \n-// Clippy uses Hash and PartialEq\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq, HashStable_Generic)]\n+#[derive(\n+    Clone,\n+    RustcEncodable,\n+    RustcDecodable,\n+    Debug,\n+    Copy,\n+    Hash,\n+    Eq,\n+    PartialEq,\n+    HashStable_Generic\n+)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`.\n     Cooked,\n@@ -1491,9 +1500,18 @@ impl StrLit {\n     }\n }\n \n-// Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n+#[derive(\n+    Clone,\n+    Copy,\n+    RustcEncodable,\n+    RustcDecodable,\n+    Debug,\n+    Hash,\n+    Eq,\n+    PartialEq,\n+    HashStable_Generic\n+)]\n pub enum LitIntType {\n     /// e.g. `42_i32`.\n     Signed(IntTy),\n@@ -1504,7 +1522,17 @@ pub enum LitIntType {\n }\n \n /// Type of the float literal based on provided suffix.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n+#[derive(\n+    Clone,\n+    Copy,\n+    RustcEncodable,\n+    RustcDecodable,\n+    Debug,\n+    Hash,\n+    Eq,\n+    PartialEq,\n+    HashStable_Generic\n+)]\n pub enum LitFloatType {\n     /// A float literal with a suffix (`1f32` or `1E10f32`).\n     Suffixed(FloatTy),\n@@ -1515,8 +1543,7 @@ pub enum LitFloatType {\n /// Literal kind.\n ///\n /// E.g., `\"foo\"`, `42`, `12.34`, or `bool`.\n-// Clippy uses Hash and PartialEq\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, Eq, PartialEq, HashStable_Generic)]\n pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),"}, {"sha": "c2446d140401917cf6bec1c2a38870d32dcef2b1", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 9 which has size 1\n+   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 8 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "7d3c99bda6b6a0dab22e67b4c4ed2111fb3cef71", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -59,7 +59,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n    |\n LL | type A = [u8; 4]::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<[u8; _] as Trait>::AssocTy`\n+   |          ^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<[u8; 4] as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:5:10"}, {"sha": "8e498e4b394775cbaa3637966128cf8b4b74741a", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -46,25 +46,25 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17hf07584432cd4d8beE)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h62e540f14f879d56E)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::hf07584432cd4d8be)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::h62e540f14f879d56)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n+error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{{closure}}#1::Bar>::method)\n   --> $DIR/impl1.rs:69:13\n    |\n LL |             #[rustc_def_path]"}, {"sha": "b054c1373e66c07b190dd3353b039456105ee159", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -60,15 +60,15 @@ fn main() {\n         // Test type mangling, by putting them in an `impl` header.\n         impl Bar for [&'_ (dyn Foo<Assoc = extern fn(&u8, ...)> + AutoTrait); 3] {\n             #[rustc_symbol_name]\n-            //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n-            //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method\n-            //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n+            //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n+            //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method\n+            //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n              //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n                 //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n-            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n-               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{{closure}}#1::Bar>::method)\n+               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{{closure}}#1::Bar>::method)\n             fn method(&self) {}\n         }\n     };"}, {"sha": "111c360b36080d89bea595cddbe2917df0fead3b", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4025fac3c3a60581af72998230d46aa6f5ade/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=a6c4025fac3c3a60581af72998230d46aa6f5ade", "patch": "@@ -64,7 +64,7 @@ error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ..\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{{closure}}#1::Bar>::method)\n   --> $DIR/impl1.rs:69:13\n    |\n LL |             #[rustc_def_path]"}]}