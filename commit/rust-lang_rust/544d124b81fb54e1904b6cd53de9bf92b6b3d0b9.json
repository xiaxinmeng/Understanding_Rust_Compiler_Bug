{"sha": "544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGQxMjRiODFmYjU0ZTE5MDRiNmNkNTNkZTliZjkyYjZiM2QwYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T12:26:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T12:26:46Z"}, "message": "Auto merge of #85079 - petrochenkov:sessclean, r=davidtwco\n\nrustc_session: Move more option building code from the `options!` macro\n\nThe moved code doesn't need to be generated by a macro, it can use a regular (generic) function and type aliases instead.\n\n(The refactoring is salvaged from a branch with different now abandoned work.)", "tree": {"sha": "0585f66ff0048606106ac857dfef46185c6eedc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0585f66ff0048606106ac857dfef46185c6eedc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "html_url": "https://github.com/rust-lang/rust/commit/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b30245ea1286df96d673015c4519c861e06977a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b30245ea1286df96d673015c4519c861e06977a", "html_url": "https://github.com/rust-lang/rust/commit/1b30245ea1286df96d673015c4519c861e06977a"}, {"sha": "273e0a2a051526b98b989a52405d9b6a626e0cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/273e0a2a051526b98b989a52405d9b6a626e0cad", "html_url": "https://github.com/rust-lang/rust/commit/273e0a2a051526b98b989a52405d9b6a626e0cad"}], "stats": {"total": 158, "additions": 85, "deletions": 73}, "files": [{"sha": "f517c483758d27b4127312335f3835b0cbd0efb6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "patch": "@@ -685,10 +685,10 @@ impl Default for Options {\n             target_triple: TargetTriple::from_triple(host_triple()),\n             test: false,\n             incremental: None,\n-            debugging_opts: basic_debugging_options(),\n+            debugging_opts: Default::default(),\n             prints: Vec::new(),\n             borrowck_mode: BorrowckMode::Migrate,\n-            cg: basic_codegen_options(),\n+            cg: Default::default(),\n             error_format: ErrorOutputType::default(),\n             externs: Externs(BTreeMap::new()),\n             extern_dep_specs: ExternDepSpecs(BTreeMap::new()),\n@@ -1925,7 +1925,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n-    let mut debugging_opts = build_debugging_options(matches, error_format);\n+    let mut debugging_opts = DebuggingOptions::build(matches, error_format);\n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n     if !debugging_opts.unstable_options && json_unused_externs {\n@@ -1938,7 +1938,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let output_types = parse_output_types(&debugging_opts, matches, error_format);\n \n-    let mut cg = build_codegen_options(matches, error_format);\n+    let mut cg = CodegenOptions::build(matches, error_format);\n     let (disable_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n         &output_types,\n         matches,"}, {"sha": "10e195f4f2548e1e197edea4372e8f5491186ada", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 78, "deletions": 62, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "patch": "@@ -210,9 +210,7 @@ top_level_options!(\n /// generated code to parse an option into its respective field in the struct. There are a few\n /// hand-written parsers for parsing specific types of values in this module.\n macro_rules! options {\n-    ($struct_name:ident, $setter_name:ident, $defaultfn:ident,\n-     $buildfn:ident, $prefix:expr, $outputname:expr,\n-     $stat:ident,\n+    ($struct_name:ident, $stat:ident, $prefix:expr, $outputname:expr,\n      $($( #[$attr:meta] )* $opt:ident : $t:ty = (\n         $init:expr,\n         $parse:ident,\n@@ -223,50 +221,20 @@ macro_rules! options {\n     #[derive(Clone)]\n     pub struct $struct_name { $(pub $opt: $t),* }\n \n-    pub fn $defaultfn() -> $struct_name {\n-        $struct_name { $( $( #[$attr] )* $opt: $init),* }\n-    }\n-\n-    pub fn $buildfn(matches: &getopts::Matches, error_format: ErrorOutputType) -> $struct_name\n-    {\n-        let mut op = $defaultfn();\n-        for option in matches.opt_strs($prefix) {\n-            let (key, value) = match option.split_once('=') {\n-                None => (option, None),\n-                Some((k, v)) => (k.to_string(), Some(v)),\n-            };\n-            let option_to_lookup = key.replace(\"-\", \"_\");\n-            let mut found = false;\n-            for &(candidate, setter, type_desc, _) in $stat {\n-                if option_to_lookup != candidate { continue }\n-                if !setter(&mut op, value) {\n-                    match value {\n-                        None => {\n-                            early_error(error_format, &format!(\"{0} option `{1}` requires \\\n-                                                                {2} ({3} {1}=<value>)\",\n-                                                               $outputname, key,\n-                                                               type_desc, $prefix))\n-                        }\n-                        Some(value) => {\n-                            early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n-                                                                option `{}` - {} was expected\",\n-                                                               value, $outputname,\n-                                                               key, type_desc))\n-                        }\n-                    }\n-                }\n-                found = true;\n-                break;\n-            }\n-            if !found {\n-                early_error(error_format, &format!(\"unknown {} option: `{}`\",\n-                                                   $outputname, key));\n-            }\n+    impl Default for $struct_name {\n+        fn default() -> $struct_name {\n+            $struct_name { $( $( #[$attr] )* $opt: $init),* }\n         }\n-        return op;\n     }\n \n     impl $struct_name {\n+        pub fn build(\n+            matches: &getopts::Matches,\n+            error_format: ErrorOutputType,\n+        ) -> $struct_name {\n+            build_options(matches, $stat, $prefix, $outputname, error_format)\n+        }\n+\n         fn dep_tracking_hash(&self, _for_crate_hash: bool, error_format: ErrorOutputType) -> u64 {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n@@ -284,26 +252,76 @@ macro_rules! options {\n         }\n     }\n \n-    pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n-    pub const $stat: &[(&str, $setter_name, &str, &str)] =\n-        &[ $( (stringify!($opt), $crate::options::parse::$opt, $crate::options::desc::$parse, $desc) ),* ];\n-\n-    // Sometimes different options need to build a common structure.\n-    // That structure can kept in one of the options' fields, the others become dummy.\n-    macro_rules! redirect_field {\n-        ($cg:ident.link_arg) => { $cg.link_args };\n-        ($cg:ident.pre_link_arg) => { $cg.pre_link_args };\n-        ($cg:ident.$field:ident) => { $cg.$field };\n-    }\n+    pub const $stat: OptionDescrs<$struct_name> =\n+        &[ $( (stringify!($opt), $opt, desc::$parse, $desc) ),* ];\n \n     $(\n-        pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n-            $crate::options::parse::$parse(&mut redirect_field!(cg.$opt), v)\n+        fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n+            parse::$parse(&mut redirect_field!(cg.$opt), v)\n         }\n     )*\n \n ) }\n \n+// Sometimes different options need to build a common structure.\n+// That structure can be kept in one of the options' fields, the others become dummy.\n+macro_rules! redirect_field {\n+    ($cg:ident.link_arg) => {\n+        $cg.link_args\n+    };\n+    ($cg:ident.pre_link_arg) => {\n+        $cg.pre_link_args\n+    };\n+    ($cg:ident.$field:ident) => {\n+        $cg.$field\n+    };\n+}\n+\n+type OptionSetter<O> = fn(&mut O, v: Option<&str>) -> bool;\n+type OptionDescrs<O> = &'static [(&'static str, OptionSetter<O>, &'static str, &'static str)];\n+\n+fn build_options<O: Default>(\n+    matches: &getopts::Matches,\n+    descrs: OptionDescrs<O>,\n+    prefix: &str,\n+    outputname: &str,\n+    error_format: ErrorOutputType,\n+) -> O {\n+    let mut op = O::default();\n+    for option in matches.opt_strs(prefix) {\n+        let (key, value) = match option.split_once('=') {\n+            None => (option, None),\n+            Some((k, v)) => (k.to_string(), Some(v)),\n+        };\n+\n+        let option_to_lookup = key.replace(\"-\", \"_\");\n+        match descrs.iter().find(|(name, ..)| *name == option_to_lookup) {\n+            Some((_, setter, type_desc, _)) => {\n+                if !setter(&mut op, value) {\n+                    match value {\n+                        None => early_error(\n+                            error_format,\n+                            &format!(\n+                                \"{0} option `{1}` requires {2} ({3} {1}=<value>)\",\n+                                outputname, key, type_desc, prefix\n+                            ),\n+                        ),\n+                        Some(value) => early_error(\n+                            error_format,\n+                            &format!(\n+                                \"incorrect value `{}` for {} option `{}` - {} was expected\",\n+                                value, outputname, key, type_desc\n+                            ),\n+                        ),\n+                    }\n+                }\n+            }\n+            None => early_error(error_format, &format!(\"unknown {} option: `{}`\", outputname, key)),\n+        }\n+    }\n+    return op;\n+}\n+\n #[allow(non_upper_case_globals)]\n mod desc {\n     pub const parse_no_flag: &str = \"no value\";\n@@ -847,9 +865,8 @@ mod parse {\n     }\n }\n \n-options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n-          build_codegen_options, \"C\", \"codegen\",\n-          CG_OPTIONS,\n+options! {\n+    CodegenOptions, CG_OPTIONS, \"C\", \"codegen\",\n \n     // This list is in alphabetical order.\n     //\n@@ -957,9 +974,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     // - src/doc/rustc/src/codegen-options/index.md\n }\n \n-options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n-          build_debugging_options, \"Z\", \"debugging\",\n-          DB_OPTIONS,\n+options! {\n+    DebuggingOptions, DB_OPTIONS, \"Z\", \"debugging\",\n \n     // This list is in alphabetical order.\n     //"}, {"sha": "045b42d0dcaf75b8efbe3fe2827a211e803c5472", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "patch": "@@ -7,10 +7,7 @@ use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n-use rustc_session::config::{\n-    build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n-    nightly_options,\n-};\n+use rustc_session::config::{get_cmd_lint_options, host_triple, nightly_options};\n use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n@@ -360,8 +357,8 @@ impl Options {\n             config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n-        let codegen_options = build_codegen_options(matches, error_format);\n-        let debugging_opts = build_debugging_options(matches, error_format);\n+        let codegen_options = CodegenOptions::build(matches, error_format);\n+        let debugging_opts = DebuggingOptions::build(matches, error_format);\n \n         let diag = new_handler(error_format, None, &debugging_opts);\n "}, {"sha": "03e3fe52f71ee3535b3d733e2429a3713031f501", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544d124b81fb54e1904b6cd53de9bf92b6b3d0b9/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=544d124b81fb54e1904b6cd53de9bf92b6b3d0b9", "patch": "@@ -76,7 +76,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         externs: options.externs.clone(),\n         unstable_features: options.render_options.unstable_features,\n         actually_rustdoc: true,\n-        debugging_opts: config::DebuggingOptions { ..config::basic_debugging_options() },\n         edition: options.edition,\n         target_triple: options.target.clone(),\n         crate_name: options.crate_name.clone(),"}]}