{"sha": "2daa013290e054151424849e51c0b1f24db7e7f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYWEwMTMyOTBlMDU0MTUxNDI0ODQ5ZTUxYzBiMWYyNGRiN2U3Zjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-05-23T04:05:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-05-24T11:16:13Z"}, "message": "Underline multiple suggested replacements in the same line\n\nFollow up to #50943.\n\nFix #50977.", "tree": {"sha": "492876ce95c03d8575c4b2137d339e7702c9c6ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/492876ce95c03d8575c4b2137d339e7702c9c6ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2daa013290e054151424849e51c0b1f24db7e7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2daa013290e054151424849e51c0b1f24db7e7f9", "html_url": "https://github.com/rust-lang/rust/commit/2daa013290e054151424849e51c0b1f24db7e7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2daa013290e054151424849e51c0b1f24db7e7f9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7426f5ccf7b362785a5abeb365674d3da3d4df2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7426f5ccf7b362785a5abeb365674d3da3d4df2e", "html_url": "https://github.com/rust-lang/rust/commit/7426f5ccf7b362785a5abeb365674d3da3d4df2e"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "123b6abab5048d0c7eef6f8f71f7a167c643b717", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2daa013290e054151424849e51c0b1f24db7e7f9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daa013290e054151424849e51c0b1f24db7e7f9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=2daa013290e054151424849e51c0b1f24db7e7f9", "patch": "@@ -1215,19 +1215,20 @@ impl EmitterWriter {\n \n             let mut row_num = 2;\n             for &(ref complete, ref parts) in suggestions.iter().take(MAX_SUGGESTIONS) {\n-                let show_underline = parts.len() == 1\n-                    && complete.lines().count() == 1\n-                    && parts[0].snippet.trim() != complete.trim();\n+                // Only show underline if the suggestion spans a single line and doesn't cover the\n+                // entirety of the code output. If you have multiple replacements in the same line\n+                // of code, show the underline.\n+                let show_underline = !(parts.len() == 1\n+                    && parts[0].snippet.trim() == complete.trim())\n+                    && complete.lines().count() == 1;\n \n                 let lines = cm.span_to_lines(parts[0].span).unwrap();\n \n                 assert!(!lines.lines.is_empty());\n \n-                let span_start_pos = cm.lookup_char_pos(parts[0].span.lo());\n-                let line_start = span_start_pos.line;\n+                let line_start = cm.lookup_char_pos(parts[0].span.lo()).line;\n                 draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n                 let mut line_pos = 0;\n-                // Only show underline if there's a single suggestion and it is a single line\n                 let mut lines = complete.lines();\n                 for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n                     // Print the span column to avoid confusion\n@@ -1241,22 +1242,50 @@ impl EmitterWriter {\n                     line_pos += 1;\n                     row_num += 1;\n                 }\n+                let mut extra = 0;\n                 // Only show an underline in the suggestions if the suggestion is not the\n                 // entirety of the code being shown and the displayed code is not multiline.\n                 if show_underline {\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n-                    let start = parts[0].snippet.len() - parts[0].snippet.trim_left().len();\n-                    // account for substitutions containing unicode characters\n-                    let sub_len = parts[0].snippet.trim().chars().fold(0, |acc, ch| {\n-                        acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n-                    });\n-                    let underline_start = span_start_pos.col_display + start;\n-                    let underline_end = span_start_pos.col_display + start + sub_len;\n-                    for p in underline_start..underline_end {\n-                        buffer.putc(row_num,\n-                                    max_line_num_len + 3 + p,\n-                                    '^',\n-                                    Style::UnderlinePrimary);\n+                    for part in parts {\n+                        let span_start_pos = cm.lookup_char_pos(part.span.lo());\n+                        let span_end_pos = cm.lookup_char_pos(part.span.hi());\n+                        // length of the code to be substituted\n+                        let snippet_len = span_end_pos.col_display - span_start_pos.col_display;\n+\n+                        // Do not underline the leading or trailing spaces.\n+                        let start = part.snippet.len() - part.snippet.trim_left().len();\n+                        // account for substitutions containing unicode characters\n+                        let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                        });\n+\n+                        let underline_start = span_start_pos.col_display + start + extra;\n+                        let underline_end = span_start_pos.col_display + start + sub_len + extra;\n+                        for p in underline_start..underline_end {\n+                            buffer.putc(row_num,\n+                                        max_line_num_len + 3 + p,\n+                                        '^',\n+                                        Style::UnderlinePrimary);\n+                        }\n+                        // underline removals too\n+                        if underline_start == underline_end {\n+                            for p in underline_start-1..underline_start+1 {\n+                                buffer.putc(row_num,\n+                                            max_line_num_len + 3 + p,\n+                                            '-',\n+                                            Style::UnderlineSecondary);\n+                            }\n+                        }\n+\n+                        // length of the code after substitution\n+                        let full_sub_len = part.snippet.chars().fold(0, |acc, ch| {\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                        });\n+\n+                        // For multiple substitutions, use the position *after* the previous\n+                        // substitutions have happened.\n+                        extra += full_sub_len - snippet_len;\n                     }\n                     row_num += 1;\n                 }"}]}