{"sha": "9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMjg5ZmEwYWE5M2QzYTNlYTgwYzdlZGQwYjZlMDM1ZmEzNjAzODc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-30T07:04:17Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-30T07:04:17Z"}, "message": "Fully handle RawNullablePointer layout.", "tree": {"sha": "6b2f7f640a2c97577c8c8b2c75ecec46af5cfdbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b2f7f640a2c97577c8c8b2c75ecec46af5cfdbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "html_url": "https://github.com/rust-lang/rust/commit/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f07f3d7ff1b44ac96af5e03e4882ff913e3f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f07f3d7ff1b44ac96af5e03e4882ff913e3f85", "html_url": "https://github.com/rust-lang/rust/commit/30f07f3d7ff1b44ac96af5e03e4882ff913e3f85"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "4ab2413e0ffe2b70097dc6abb27e913e6ec6ee17", "filename": "src/interpreter.rs", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "patch": "@@ -256,18 +256,34 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             Switch { ref discr, ref targets, adt_def } => {\n                 let adt_ptr = try!(self.eval_lvalue(discr)).to_ptr();\n                 let adt_layout = self.type_layout(self.lvalue_ty(discr));\n-                let discr_size = match *adt_layout {\n-                    Layout::General { discr, .. } => discr.size().bytes(),\n-                    _ => panic!(\"attmpted to switch on non-aggregate type\"),\n-                };\n-                let discr_val = try!(self.memory.read_uint(adt_ptr, discr_size as usize));\n \n-                let matching = adt_def.variants.iter()\n-                    .position(|v| discr_val == v.disr_val.to_u64_unchecked());\n+                 match *adt_layout {\n+                    Layout::General { discr, .. } => {\n+                        let discr_size = discr.size().bytes();\n+                        let discr_val = try!(self.memory.read_uint(adt_ptr, discr_size as usize));\n+\n+                        let matching = adt_def.variants.iter()\n+                            .position(|v| discr_val == v.disr_val.to_u64_unchecked());\n \n-                match matching {\n-                    Some(i) => TerminatorTarget::Block(targets[i]),\n-                    None => return Err(EvalError::InvalidDiscriminant),\n+                        match matching {\n+                            Some(i) => TerminatorTarget::Block(targets[i]),\n+                            None => return Err(EvalError::InvalidDiscriminant),\n+                        }\n+                    }\n+\n+                    Layout::RawNullablePointer { nndiscr, .. } => {\n+                        let is_null = match self.memory.read_usize(adt_ptr) {\n+                            Ok(0) => true,\n+                            Ok(_) | Err(EvalError::ReadPointerAsBytes) => false,\n+                            Err(e) => return Err(e),\n+                        };\n+\n+                        assert!(nndiscr == 0 || nndiscr == 1);\n+                        let target = if is_null { 1 - nndiscr } else { nndiscr };\n+                        TerminatorTarget::Block(targets[target as usize])\n+                    }\n+\n+                    _ => panic!(\"attmpted to switch on non-aggregate type\"),\n                 }\n             }\n \n@@ -633,7 +649,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                     Layout::Array { .. } => {\n                         let elem_size = match dest_ty.sty {\n                             ty::TyArray(elem_ty, _) => self.type_size(elem_ty) as u64,\n-                            _ => panic!(\"tried to assign {:?} aggregate to non-array type {:?}\",\n+                            _ => panic!(\"tried to assign {:?} to non-array type {:?}\",\n                                         kind, dest_ty),\n                         };\n                         let offsets = (0..).map(|i| i * elem_size);\n@@ -650,7 +666,24 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                                 .map(|s| s.bytes());\n                             try!(self.assign_fields(dest, offsets, operands));\n                         } else {\n-                            panic!(\"tried to assign {:?} aggregate to Layout::General dest\", kind);\n+                            panic!(\"tried to assign {:?} to Layout::General\", kind);\n+                        }\n+                    }\n+\n+                    Layout::RawNullablePointer { nndiscr, .. } => {\n+                        if let mir::AggregateKind::Adt(_, variant, _) = *kind {\n+                            if nndiscr == variant as u64 {\n+                                assert_eq!(operands.len(), 1);\n+                                let operand = &operands[0];\n+                                let src = try!(self.eval_operand(operand));\n+                                let src_ty = self.operand_ty(operand);\n+                                try!(self.move_(src, dest, src_ty));\n+                            } else {\n+                                assert_eq!(operands.len(), 0);\n+                                try!(self.memory.write_isize(dest, 0));\n+                            }\n+                        } else {\n+                            panic!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n                         }\n                     }\n \n@@ -788,6 +821,10 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                                     panic!(\"field access on enum had no variant index\");\n                                 }\n                             }\n+                            Layout::RawNullablePointer { .. } => {\n+                                assert_eq!(field.index(), 0);\n+                                return Ok(base);\n+                            }\n                             _ => panic!(\"field access on non-product type: {:?}\", base_layout),\n                         };\n \n@@ -802,6 +839,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                                 extra: LvalueExtra::DowncastVariant(variant),\n                             });\n                         }\n+                        Layout::RawNullablePointer { .. } => return Ok(base),\n                         _ => panic!(\"variant downcast on non-aggregate type: {:?}\", base_layout),\n                     },\n "}, {"sha": "f48d5a9b8e8f75f018dbfc6cebb8b6cc29566f64", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "patch": "@@ -403,7 +403,7 @@ impl Memory {\n     // Undefined bytes\n     ////////////////////////////////////////////////////////////////////////////////\n \n-    // FIXME(tsino): This is a very naive, slow version.\n+    // FIXME(tsion): This is a very naive, slow version.\n     fn copy_undef_mask(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<()> {\n         // The bits have to be saved locally before writing to dest in case src and dest overlap.\n         let mut v = Vec::with_capacity(size);"}, {"sha": "55beb11edd4497c26dcd8f1c2384d5c057bb80bf", "filename": "tests/run-pass/option_box_transmute_ptr.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/tests%2Frun-pass%2Foption_box_transmute_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387/tests%2Frun-pass%2Foption_box_transmute_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Foption_box_transmute_ptr.rs?ref=9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "patch": "@@ -1,11 +1,13 @@\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n+// This tests that the size of Option<Box<i32>> is the same as *const i32.\n+\n #[miri_run]\n fn option_box_deref() -> i32 {\n     let val = Some(Box::new(42));\n     unsafe {\n-        let ptr: *const i32 = std::mem::transmute(val); //~ ERROR: pointer offset outside bounds of allocation\n+        let ptr: *const i32 = std::mem::transmute::<Option<Box<i32>>, *const i32>(val);\n         *ptr\n     }\n }", "previous_filename": "tests/compile-fail/bugs/option_box_transmute_ptr.rs"}]}