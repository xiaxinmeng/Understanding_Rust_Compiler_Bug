{"sha": "9ba772657950cb8353f37bc2576b78c4f0c8996f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTc3MjY1Nzk1MGNiODM1M2YzN2JjMjU3NmI3OGM0ZjBjODk5NmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T11:50:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T11:50:27Z"}, "message": "Allow iterating fields in the ItemTree", "tree": {"sha": "cc63a79f90006ad761202ca7b2a38c3c16be394f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc63a79f90006ad761202ca7b2a38c3c16be394f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba772657950cb8353f37bc2576b78c4f0c8996f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba772657950cb8353f37bc2576b78c4f0c8996f", "html_url": "https://github.com/rust-lang/rust/commit/9ba772657950cb8353f37bc2576b78c4f0c8996f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba772657950cb8353f37bc2576b78c4f0c8996f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2465ee2e949d81f98270c57afa17666dac6afa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2465ee2e949d81f98270c57afa17666dac6afa4", "html_url": "https://github.com/rust-lang/rust/commit/e2465ee2e949d81f98270c57afa17666dac6afa4"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "f99e0543280d5034cee04ce082c9df1b3b5d6a94", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9ba772657950cb8353f37bc2576b78c4f0c8996f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba772657950cb8353f37bc2576b78c4f0c8996f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=9ba772657950cb8353f37bc2576b78c4f0c8996f", "patch": "@@ -681,10 +681,28 @@ pub struct Variant {\n     pub fields: Fields,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct FieldIds {\n+    range: Range<u32>,\n+}\n+\n+impl FieldIds {\n+    fn new(range: Range<Idx<Field>>) -> Self {\n+        Self { range: range.start.into_raw().into()..range.end.into_raw().into() }\n+    }\n+}\n+\n+impl Iterator for FieldIds {\n+    type Item = Idx<Field>;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.range.next().map(|raw| Idx::from_raw(raw.into()))\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum Fields {\n-    Record(Range<Idx<Field>>),\n-    Tuple(Range<Idx<Field>>),\n+    Record(FieldIds),\n+    Tuple(FieldIds),\n     Unit,\n }\n "}, {"sha": "e2e00323c26631a0e6640b2569bbbeeaee25b2f0", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ba772657950cb8353f37bc2576b78c4f0c8996f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba772657950cb8353f37bc2576b78c4f0c8996f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=9ba772657950cb8353f37bc2576b78c4f0c8996f", "patch": "@@ -196,15 +196,15 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_record_fields(&mut self, fields: &ast::RecordFieldDefList) -> Range<Idx<Field>> {\n+    fn lower_record_fields(&mut self, fields: &ast::RecordFieldDefList) -> FieldIds {\n         let start = self.next_field_idx();\n         for field in fields.fields() {\n             if let Some(data) = self.lower_record_field(&field) {\n                 self.data().fields.alloc(data);\n             }\n         }\n         let end = self.next_field_idx();\n-        start..end\n+        FieldIds::new(start..end)\n     }\n \n     fn lower_record_field(&mut self, field: &ast::RecordFieldDef) -> Option<Field> {\n@@ -215,15 +215,15 @@ impl Ctx {\n         Some(res)\n     }\n \n-    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldDefList) -> Range<Idx<Field>> {\n+    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldDefList) -> FieldIds {\n         let start = self.next_field_idx();\n         for (i, field) in fields.fields().enumerate() {\n             if let Some(data) = self.lower_tuple_field(i, &field) {\n                 self.data().fields.alloc(data);\n             }\n         }\n         let end = self.next_field_idx();\n-        start..end\n+        FieldIds::new(start..end)\n     }\n \n     fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleFieldDef) -> Option<Field> {\n@@ -242,7 +242,7 @@ impl Ctx {\n             Some(record_field_def_list) => {\n                 self.lower_fields(&StructKind::Record(record_field_def_list))\n             }\n-            None => Fields::Record(self.next_field_idx()..self.next_field_idx()),\n+            None => Fields::Record(FieldIds::new(self.next_field_idx()..self.next_field_idx())),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(union);\n         let res = Union { name, visibility, generic_params, fields, ast_id };"}, {"sha": "fd7ffee248685c9f916eea2da93a1fd9964ab614", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba772657950cb8353f37bc2576b78c4f0c8996f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba772657950cb8353f37bc2576b78c4f0c8996f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=9ba772657950cb8353f37bc2576b78c4f0c8996f", "patch": "@@ -237,13 +237,13 @@ Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generi\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(FieldIds { range: 0..1 }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(FieldIds { range: 1..2 }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n-Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(FieldIds { range: 3..4 }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n     \"###);\n }\n "}]}