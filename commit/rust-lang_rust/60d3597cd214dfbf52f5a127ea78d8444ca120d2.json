{"sha": "60d3597cd214dfbf52f5a127ea78d8444ca120d2", "node_id": "C_kwDOAAsO6NoAKDYwZDM1OTdjZDIxNGRmYmY1MmY1YTEyN2VhNzhkODQ0NGNhMTIwZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-24T00:03:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-24T00:03:40Z"}, "message": "Auto merge of #8315 - dswij:8306, r=giraffate\n\n`trait_duplication_in_bounds` checks path segments for trait items\n\ncloses #8306\n\nchangelog: [`trait_duplication_in_bounds`] Fix FP when path segments exists for trait items", "tree": {"sha": "63fa2a3ba245bd61edabdbb3ac73cee59990240d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63fa2a3ba245bd61edabdbb3ac73cee59990240d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60d3597cd214dfbf52f5a127ea78d8444ca120d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60d3597cd214dfbf52f5a127ea78d8444ca120d2", "html_url": "https://github.com/rust-lang/rust/commit/60d3597cd214dfbf52f5a127ea78d8444ca120d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60d3597cd214dfbf52f5a127ea78d8444ca120d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d976d8ad876aa5abaf929f7798024b814ac8a5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d976d8ad876aa5abaf929f7798024b814ac8a5cb", "html_url": "https://github.com/rust-lang/rust/commit/d976d8ad876aa5abaf929f7798024b814ac8a5cb"}, {"sha": "4c1549ecc8111cc6d3e42b309e3e71fe78d16958", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1549ecc8111cc6d3e42b309e3e71fe78d16958", "html_url": "https://github.com/rust-lang/rust/commit/4c1549ecc8111cc6d3e42b309e3e71fe78d16958"}], "stats": {"total": 104, "additions": 68, "deletions": 36}, "files": [{"sha": "5257f5302cd90d87c2ced61cd1f582cb2b4d1dd7", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/60d3597cd214dfbf52f5a127ea78d8444ca120d2/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d3597cd214dfbf52f5a127ea78d8444ca120d2/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=60d3597cd214dfbf52f5a127ea78d8444ca120d2", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{SpanlessEq, SpanlessHash};\n use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n         let Generics { where_clause, .. } = &item.generics;\n-        let mut self_bounds_set = FxHashSet::default();\n+        let mut self_bounds_map = FxHashMap::default();\n \n         for predicate in where_clause.predicates {\n             if_chain! {\n@@ -108,27 +108,29 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n                         )\n                     ) = cx.tcx.hir().get_if_local(*def_id);\n                 then {\n-                    if self_bounds_set.is_empty() {\n+                    if self_bounds_map.is_empty() {\n                         for bound in self_bounds.iter() {\n-                            let Some((self_res, _)) = get_trait_res_span_from_bound(bound) else { continue };\n-                            self_bounds_set.insert(self_res);\n+                            let Some((self_res, self_segments, _)) = get_trait_info_from_bound(bound) else { continue };\n+                            self_bounds_map.insert(self_res, self_segments);\n                         }\n                     }\n \n                     bound_predicate\n                         .bounds\n                         .iter()\n-                        .filter_map(get_trait_res_span_from_bound)\n-                        .for_each(|(trait_item_res, span)| {\n-                            if self_bounds_set.get(&trait_item_res).is_some() {\n-                                span_lint_and_help(\n-                                    cx,\n-                                    TRAIT_DUPLICATION_IN_BOUNDS,\n-                                    span,\n-                                    \"this trait bound is already specified in trait declaration\",\n-                                    None,\n-                                    \"consider removing this trait bound\",\n-                                );\n+                        .filter_map(get_trait_info_from_bound)\n+                        .for_each(|(trait_item_res, trait_item_segments, span)| {\n+                            if let Some(self_segments) = self_bounds_map.get(&trait_item_res) {\n+                                if SpanlessEq::new(cx).eq_path_segments(self_segments, trait_item_segments) {\n+                                    span_lint_and_help(\n+                                        cx,\n+                                        TRAIT_DUPLICATION_IN_BOUNDS,\n+                                        span,\n+                                        \"this trait bound is already specified in trait declaration\",\n+                                        None,\n+                                        \"consider removing this trait bound\",\n+                                    );\n+                                }\n                             }\n                         });\n                 }\n@@ -137,14 +139,6 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     }\n }\n \n-fn get_trait_res_span_from_bound(bound: &GenericBound<'_>) -> Option<(Res, Span)> {\n-    if let GenericBound::Trait(t, _) = bound {\n-        Some((t.trait_ref.path.res, t.span))\n-    } else {\n-        None\n-    }\n-}\n-\n impl TraitBounds {\n     fn check_type_repetition<'tcx>(self, cx: &LateContext<'tcx>, gen: &'tcx Generics<'_>) {\n         struct SpanlessTy<'cx, 'tcx> {\n@@ -231,7 +225,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n             let res = param\n                 .bounds\n                 .iter()\n-                .filter_map(get_trait_res_span_from_bound)\n+                .filter_map(get_trait_info_from_bound)\n                 .collect::<Vec<_>>();\n             map.insert(*ident, res);\n         }\n@@ -245,10 +239,10 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n             if let Some(segment) = segments.first();\n             if let Some(trait_resolutions_direct) = map.get(&segment.ident);\n             then {\n-                for (res_where, _) in bound_predicate.bounds.iter().filter_map(get_trait_res_span_from_bound) {\n-                    if let Some((_, span_direct)) = trait_resolutions_direct\n+                for (res_where, _,  _) in bound_predicate.bounds.iter().filter_map(get_trait_info_from_bound) {\n+                    if let Some((_, _, span_direct)) = trait_resolutions_direct\n                                                 .iter()\n-                                                .find(|(res_direct, _)| *res_direct == res_where) {\n+                                                .find(|(res_direct, _, _)| *res_direct == res_where) {\n                         span_lint_and_help(\n                             cx,\n                             TRAIT_DUPLICATION_IN_BOUNDS,\n@@ -263,3 +257,11 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         }\n     }\n }\n+\n+fn get_trait_info_from_bound<'a>(bound: &'a GenericBound<'_>) -> Option<(Res, &'a [PathSegment<'a>], Span)> {\n+    if let GenericBound::Trait(t, _) = bound {\n+        Some((t.trait_ref.path.res, t.trait_ref.path.segments, t.span))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "21de19a26014755f493dff4dbf1927798c78aa70", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/60d3597cd214dfbf52f5a127ea78d8444ca120d2/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d3597cd214dfbf52f5a127ea78d8444ca120d2/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=60d3597cd214dfbf52f5a127ea78d8444ca120d2", "patch": "@@ -1,5 +1,6 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n \n+use std::collections::BTreeMap;\n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n \n fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n@@ -73,4 +74,25 @@ impl U for Life {\n     fn f() {}\n }\n \n+// should not warn\n+trait Iter: Iterator {\n+    fn into_group_btreemap<K, V>(self) -> BTreeMap<K, Vec<V>>\n+    where\n+        Self: Iterator<Item = (K, V)> + Sized,\n+        K: Ord + Eq,\n+    {\n+        unimplemented!();\n+    }\n+}\n+\n+struct Foo {}\n+\n+trait FooIter: Iterator<Item = Foo> {\n+    fn bar()\n+    where\n+        Self: Iterator<Item = Foo>,\n+    {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "6f8c8e47dfbf1fe56589a06f80017513e69167e8", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/60d3597cd214dfbf52f5a127ea78d8444ca120d2/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60d3597cd214dfbf52f5a127ea78d8444ca120d2/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=60d3597cd214dfbf52f5a127ea78d8444ca120d2", "patch": "@@ -1,5 +1,5 @@\n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:5:15\n+  --> $DIR/trait_duplication_in_bounds.rs:6:15\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |               ^^^^^\n@@ -12,52 +12,60 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:5:23\n+  --> $DIR/trait_duplication_in_bounds.rs:6:23\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |                       ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:34:15\n+  --> $DIR/trait_duplication_in_bounds.rs:35:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:48:15\n+  --> $DIR/trait_duplication_in_bounds.rs:49:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:54:15\n+  --> $DIR/trait_duplication_in_bounds.rs:55:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:54:25\n+  --> $DIR/trait_duplication_in_bounds.rs:55:25\n    |\n LL |         Self: Default + Clone;\n    |                         ^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds.rs:57:15\n+  --> $DIR/trait_duplication_in_bounds.rs:58:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n-error: aborting due to 7 previous errors\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds.rs:93:15\n+   |\n+LL |         Self: Iterator<Item = Foo>,\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: aborting due to 8 previous errors\n "}]}