{"sha": "255927bc0c77d275ee176f47dd7a47001cc40b56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTkyN2JjMGM3N2QyNzVlZTE3NmY0N2RkN2E0NzAwMWNjNDBiNTY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-02-28T06:49:27Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-02-28T06:49:27Z"}, "message": "WIP: Support unary integer ops again.", "tree": {"sha": "02e637195c86f30fa06e01e46b20d3f2a947a075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e637195c86f30fa06e01e46b20d3f2a947a075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/255927bc0c77d275ee176f47dd7a47001cc40b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/255927bc0c77d275ee176f47dd7a47001cc40b56", "html_url": "https://github.com/rust-lang/rust/commit/255927bc0c77d275ee176f47dd7a47001cc40b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/255927bc0c77d275ee176f47dd7a47001cc40b56/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f97a436b94865cf9afd8a75a52c694e3d5e57e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f97a436b94865cf9afd8a75a52c694e3d5e57e", "html_url": "https://github.com/rust-lang/rust/commit/21f97a436b94865cf9afd8a75a52c694e3d5e57e"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "b4933365db809c01886e741db1804e0c56caf6d7", "filename": "src/interpreter.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/255927bc0c77d275ee176f47dd7a47001cc40b56/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255927bc0c77d275ee176f47dd7a47001cc40b56/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=255927bc0c77d275ee176f47dd7a47001cc40b56", "patch": "@@ -423,12 +423,14 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             }\n \n             mir::Rvalue::UnaryOp(un_op, ref operand) => {\n-                unimplemented!()\n-                // match (un_op, self.operand_to_ptr(operand)) {\n-                //     (mir::UnOp::Not, Value::Int(n)) => Value::Int(!n),\n-                //     (mir::UnOp::Neg, Value::Int(n)) => Value::Int(-n),\n-                //     _ => unimplemented!(),\n-                // }\n+                let ptr = self.operand_to_ptr(operand);\n+                let m = byteorder::NativeEndian::read_i64(&self.memory.value(ptr.alloc_id).unwrap().bytes);\n+                let n = match (un_op, ptr.repr) {\n+                    (mir::UnOp::Not, Repr::Int) => !m,\n+                    (mir::UnOp::Neg, Repr::Int) => -m,\n+                    _ => unimplemented!(),\n+                };\n+                byteorder::NativeEndian::write_i64(&mut self.memory.value_mut(out.alloc_id).unwrap().bytes, n);\n             }\n \n             // mir::Rvalue::Ref(_region, _kind, ref lvalue) => {\n@@ -477,7 +479,6 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     fn const_to_ptr(&mut self, const_val: &const_eval::ConstVal) -> Pointer {\n         match *const_val {\n             const_eval::ConstVal::Float(_f)         => unimplemented!(),\n-            // const_eval::ConstVal::Int(i)            => Value::new_int(i),\n             const_eval::ConstVal::Int(i)            => Pointer {\n                 alloc_id: self.memory.allocate_int(i),\n                 offset: 0,"}, {"sha": "160840138ec1d9a98cb218d14f3b12ae096a300a", "filename": "test/new_values.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/255927bc0c77d275ee176f47dd7a47001cc40b56/test%2Fnew_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255927bc0c77d275ee176f47dd7a47001cc40b56/test%2Fnew_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fnew_values.rs?ref=255927bc0c77d275ee176f47dd7a47001cc40b56", "patch": "@@ -6,10 +6,10 @@ fn ret() -> i32 {\n     1\n }\n \n-// #[miri_run(expected = \"Int(-1)\")]\n-// fn neg() -> i32 {\n-//     -1\n-// }\n+#[miri_run(expected = \"Int(-1)\")]\n+fn neg() -> i32 {\n+    -1\n+}\n \n #[miri_run(expected = \"Int(3)\")]\n fn add() -> i32 {"}]}