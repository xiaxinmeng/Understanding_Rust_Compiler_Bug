{"sha": "75140e813f3701e76ab64e091653395ec397f68d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MTQwZTgxM2YzNzAxZTc2YWI2NGUwOTE2NTMzOTVlYzM5N2Y2OGQ=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-12-04T14:36:07Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-12-04T14:36:07Z"}, "message": "Fix a style of texts in `size_of_in_element_count`", "tree": {"sha": "4d4face8cbe6ddb3c53edce2bc2f4adb50cdf109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d4face8cbe6ddb3c53edce2bc2f4adb50cdf109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75140e813f3701e76ab64e091653395ec397f68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75140e813f3701e76ab64e091653395ec397f68d", "html_url": "https://github.com/rust-lang/rust/commit/75140e813f3701e76ab64e091653395ec397f68d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75140e813f3701e76ab64e091653395ec397f68d/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c1a01936605ebd615ee458a7eb02ca89f9ebdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c1a01936605ebd615ee458a7eb02ca89f9ebdb", "html_url": "https://github.com/rust-lang/rust/commit/13c1a01936605ebd615ee458a7eb02ca89f9ebdb"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "ea7a76146f52c3bf9aad1eaac7b9824f5594aca8", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75140e813f3701e76ab64e091653395ec397f68d/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75140e813f3701e76ab64e091653395ec397f68d/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=75140e813f3701e76ab64e091653395ec397f68d", "patch": "@@ -11,27 +11,26 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Detects expressions where\n-    /// size_of::<T> or size_of_val::<T> is used as a\n-    /// count of elements of type T\n+    /// `size_of::<T>` or `size_of_val::<T>` is used as a\n+    /// count of elements of type `T`\n     ///\n     /// **Why is this bad?** These functions expect a count\n-    /// of T and not a number of bytes\n+    /// of `T` and not a number of bytes\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust,no_run\n     /// # use std::ptr::copy_nonoverlapping;\n     /// # use std::mem::size_of;\n-    ///\n     /// const SIZE: usize = 128;\n     /// let x = [2u8; SIZE];\n     /// let mut y = [2u8; SIZE];\n     /// unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n     /// ```\n     pub SIZE_OF_IN_ELEMENT_COUNT,\n     correctness,\n-    \"using size_of::<T> or size_of_val::<T> where a count of elements of T is expected\"\n+    \"using `size_of::<T>` or `size_of_val::<T>` where a count of elements of `T` is expected\"\n }\n \n declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n@@ -120,7 +119,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n             , it already gets multiplied by the size of the type\";\n \n         const LINT_MSG: &str = \"found a count of bytes \\\n-             instead of a count of elements of T\";\n+             instead of a count of elements of `T`\";\n \n         if_chain! {\n             // Find calls to functions with an element count parameter and get"}, {"sha": "8cf3612abda36a1dab853a18bece3bb3e48d77d8", "filename": "tests/ui/size_of_in_element_count.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/75140e813f3701e76ab64e091653395ec397f68d/tests%2Fui%2Fsize_of_in_element_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75140e813f3701e76ab64e091653395ec397f68d/tests%2Fui%2Fsize_of_in_element_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count.stderr?ref=75140e813f3701e76ab64e091653395ec397f68d", "patch": "@@ -1,4 +1,4 @@\n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:18:68\n    |\n LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n@@ -7,183 +7,183 @@ LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of:\n    = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:19:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:21:49\n    |\n LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:22:64\n    |\n LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:23:51\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n    |                                                   ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:24:66\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n    |                                                                  ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:26:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                               ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:27:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:29:46\n    |\n LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:30:47\n    |\n LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:32:66\n    |\n LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:34:46\n    |\n LL |     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:35:38\n    |\n LL |     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:37:49\n    |\n LL |     unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:38:41\n    |\n LL |     unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:40:33\n    |\n LL |     unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n    |                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:41:29\n    |\n LL |     y.as_ptr().wrapping_sub(size_of::<u8>());\n    |                             ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:42:29\n    |\n LL |     unsafe { y.as_ptr().add(size_of::<u8>()) };\n    |                             ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:43:33\n    |\n LL |     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n    |                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:44:32\n    |\n LL |     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:45:36\n    |\n LL |     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:48:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:51:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of T\n+error: found a count of bytes instead of a count of elements of `T`\n   --> $DIR/size_of_in_element_count.rs:54:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };"}]}