{"sha": "40f3ee2a01ef24d57430726c098de905c7c6e04a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZjNlZTJhMDFlZjI0ZDU3NDMwNzI2YzA5OGRlOTA1YzdjNmUwNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-04T01:59:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-04T01:59:47Z"}, "message": "Auto merge of #34520 - Manishearth:fix-unsafecell-docs, r=steveklabnik\n\nClarify UnsafeCell docs; fix #34496\n\nNone", "tree": {"sha": "5b820c072c83c5ab85f4660b69c402ccb5815e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b820c072c83c5ab85f4660b69c402ccb5815e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f3ee2a01ef24d57430726c098de905c7c6e04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f3ee2a01ef24d57430726c098de905c7c6e04a", "html_url": "https://github.com/rust-lang/rust/commit/40f3ee2a01ef24d57430726c098de905c7c6e04a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f3ee2a01ef24d57430726c098de905c7c6e04a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3180baab7c361ee85958c88d971190649c3b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3180baab7c361ee85958c88d971190649c3b70", "html_url": "https://github.com/rust-lang/rust/commit/0a3180baab7c361ee85958c88d971190649c3b70"}, {"sha": "3873402805288fb032050ba15606f393736a993d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3873402805288fb032050ba15606f393736a993d", "html_url": "https://github.com/rust-lang/rust/commit/3873402805288fb032050ba15606f393736a993d"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "06af200e47839b9c5a5d5ed6aa6c249264a71fb5", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/40f3ee2a01ef24d57430726c098de905c7c6e04a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f3ee2a01ef24d57430726c098de905c7c6e04a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=40f3ee2a01ef24d57430726c098de905c7c6e04a", "patch": "@@ -847,6 +847,20 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefM\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n /// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n ///\n+/// The compiler makes optimizations based on the knowledge that `&T` is not mutably aliased or\n+/// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n+/// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n+/// to do this. When `UnsafeCell<T>` is immutably aliased, it is still safe to obtain a mutable\n+/// reference to its interior and/or to mutate it. However, it is up to the abstraction designer\n+/// to ensure that no two mutable references obtained this way are active at the same time, and\n+/// that there are no active mutable references or mutations when an immutable reference is obtained\n+/// from the cell. This is often done via runtime checks.\n+///\n+/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n+/// okay (provided you enforce the invariants some other way); it is still undefined behavior\n+/// to have multiple `&mut UnsafeCell<T>` aliases.\n+///\n+///\n /// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n ///\n /// # Examples\n@@ -916,6 +930,11 @@ impl<T> UnsafeCell<T> {\n impl<T: ?Sized> UnsafeCell<T> {\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n+    /// This can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique when casting to\n+    /// `&mut T`, and ensure that there are no mutations or mutable\n+    /// aliases going on when casting to `&T`\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}