{"sha": "55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTNlMjFhYzRjZDI0ZGQ3OTc5YTQ0YzM3Y2QxZTdhM2QxYjg1ZmQ=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-26T21:35:03Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-26T21:35:03Z"}, "message": "Support attributes on let statements", "tree": {"sha": "082a2cfaba26d870e564954ff6c74d6f0ece732d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082a2cfaba26d870e564954ff6c74d6f0ece732d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "html_url": "https://github.com/rust-lang/rust/commit/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0974e6abeb9c3f047e21c3e23769b93c9e7dcaf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0974e6abeb9c3f047e21c3e23769b93c9e7dcaf3", "html_url": "https://github.com/rust-lang/rust/commit/0974e6abeb9c3f047e21c3e23769b93c9e7dcaf3"}], "stats": {"total": 128, "additions": 108, "deletions": 20}, "files": [{"sha": "0b2f7b11695b2048f817dc5a5d53c025accd280e", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "patch": "@@ -54,6 +54,7 @@ pub(crate) fn block(p: &mut Parser) {\n             _ => {\n                 // test block_items\n                 // fn a() { fn b() {} }\n+                let has_attrs = p.at(POUND);\n                 let m = p.start();\n                 match items::maybe_item(p, items::ItemFlavor::Mod) {\n                     items::MaybeItem::Item(kind) => {\n@@ -66,30 +67,39 @@ pub(crate) fn block(p: &mut Parser) {\n                     // test pub_expr\n                     // fn foo() { pub 92; } //FIXME\n                     items::MaybeItem::None => {\n-                        let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n-                        if p.at(R_CURLY) {\n+                        if has_attrs {\n                             m.abandon(p);\n+                            if p.at(LET_KW) {\n+                                let_stmt(p);\n+                            } else {\n+                                p.error(\"expected a let statement\");\n+                            }\n                         } else {\n-                            // test no_semi_after_block\n-                            // fn foo() {\n-                            //     if true {}\n-                            //     loop {}\n-                            //     match () {}\n-                            //     while true {}\n-                            //     for _ in () {}\n-                            //     {}\n-                            //     {}\n-                            //     macro_rules! test {\n-                            //          () => {}\n-                            //     }\n-                            //     test!{}\n-                            // }\n-                            if is_blocklike {\n-                                p.eat(SEMI);\n+                            let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n+                            if p.at(R_CURLY) {\n+                                m.abandon(p);\n                             } else {\n-                                p.expect(SEMI);\n+                                // test no_semi_after_block\n+                                // fn foo() {\n+                                //     if true {}\n+                                //     loop {}\n+                                //     match () {}\n+                                //     while true {}\n+                                //     for _ in () {}\n+                                //     {}\n+                                //     {}\n+                                //     macro_rules! test {\n+                                //          () => {}\n+                                //     }\n+                                //     test!{}\n+                                // }\n+                                if is_blocklike {\n+                                    p.eat(SEMI);\n+                                } else {\n+                                    p.expect(SEMI);\n+                                }\n+                                m.complete(p, EXPR_STMT);\n                             }\n-                            m.complete(p, EXPR_STMT);\n                         }\n                     }\n                 }"}, {"sha": "325a97aebdcb517839b91ca6af381f96275d5fbe", "filename": "crates/ra_syntax/tests/data/parser/ok/0044_let_attrs.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.rs?ref=55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "patch": "@@ -0,0 +1,5 @@\n+// https://github.com/rust-analyzer/rust-analyzer/issues/677\n+fn main() {\n+    #[cfg(feature = \"backtrace\")]\n+    let exit_code = panic::catch_unwind(move || main());\n+}"}, {"sha": "b3f37dd96fc002eccd9ab932fcc707031da5811e", "filename": "crates/ra_syntax/tests/data/parser/ok/0044_let_attrs.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt?ref=55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "patch": "@@ -0,0 +1,73 @@\n+SOURCE_FILE@[0; 166)\n+  FN_DEF@[0; 165)\n+    COMMENT@[0; 60)\n+    WHITESPACE@[60; 61)\n+    FN_KW@[61; 63)\n+    WHITESPACE@[63; 64)\n+    NAME@[64; 68)\n+      IDENT@[64; 68) \"main\"\n+    PARAM_LIST@[68; 70)\n+      L_PAREN@[68; 69)\n+      R_PAREN@[69; 70)\n+    WHITESPACE@[70; 71)\n+    BLOCK@[71; 165)\n+      L_CURLY@[71; 72)\n+      WHITESPACE@[72; 77)\n+      ATTR@[77; 106)\n+        POUND@[77; 78)\n+        TOKEN_TREE@[78; 106)\n+          L_BRACK@[78; 79)\n+          IDENT@[79; 82) \"cfg\"\n+          TOKEN_TREE@[82; 105)\n+            L_PAREN@[82; 83)\n+            IDENT@[83; 90) \"feature\"\n+            WHITESPACE@[90; 91)\n+            EQ@[91; 92)\n+            WHITESPACE@[92; 93)\n+            STRING@[93; 104)\n+            R_PAREN@[104; 105)\n+          R_BRACK@[105; 106)\n+      WHITESPACE@[106; 111)\n+      LET_STMT@[111; 163)\n+        LET_KW@[111; 114)\n+        WHITESPACE@[114; 115)\n+        BIND_PAT@[115; 124)\n+          NAME@[115; 124)\n+            IDENT@[115; 124) \"exit_code\"\n+        WHITESPACE@[124; 125)\n+        EQ@[125; 126)\n+        WHITESPACE@[126; 127)\n+        CALL_EXPR@[127; 162)\n+          PATH_EXPR@[127; 146)\n+            PATH@[127; 146)\n+              PATH@[127; 132)\n+                PATH_SEGMENT@[127; 132)\n+                  NAME_REF@[127; 132)\n+                    IDENT@[127; 132) \"panic\"\n+              COLONCOLON@[132; 134)\n+              PATH_SEGMENT@[134; 146)\n+                NAME_REF@[134; 146)\n+                  IDENT@[134; 146) \"catch_unwind\"\n+          ARG_LIST@[146; 162)\n+            L_PAREN@[146; 147)\n+            LAMBDA_EXPR@[147; 161)\n+              MOVE_KW@[147; 151)\n+              WHITESPACE@[151; 152)\n+              PARAM_LIST@[152; 154)\n+                PIPE@[152; 153)\n+                PIPE@[153; 154)\n+              WHITESPACE@[154; 155)\n+              CALL_EXPR@[155; 161)\n+                PATH_EXPR@[155; 159)\n+                  PATH@[155; 159)\n+                    PATH_SEGMENT@[155; 159)\n+                      NAME_REF@[155; 159)\n+                        IDENT@[155; 159) \"main\"\n+                ARG_LIST@[159; 161)\n+                  L_PAREN@[159; 160)\n+                  R_PAREN@[160; 161)\n+            R_PAREN@[161; 162)\n+        SEMI@[162; 163)\n+      WHITESPACE@[163; 164)\n+      R_CURLY@[164; 165)\n+  WHITESPACE@[165; 166)"}]}