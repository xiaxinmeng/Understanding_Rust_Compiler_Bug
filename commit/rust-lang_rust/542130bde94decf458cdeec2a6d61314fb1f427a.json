{"sha": "542130bde94decf458cdeec2a6d61314fb1f427a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MjEzMGJkZTk0ZGVjZjQ1OGNkZWVjMmE2ZDYxMzE0ZmIxZjQyN2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-01T03:04:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "add tests for structured suggestion", "tree": {"sha": "894699d92a7920888dd82f80542c84a1775885d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894699d92a7920888dd82f80542c84a1775885d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542130bde94decf458cdeec2a6d61314fb1f427a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542130bde94decf458cdeec2a6d61314fb1f427a", "html_url": "https://github.com/rust-lang/rust/commit/542130bde94decf458cdeec2a6d61314fb1f427a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542130bde94decf458cdeec2a6d61314fb1f427a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a52ec87a1720bda5a2aac437a909af01cd35e3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a52ec87a1720bda5a2aac437a909af01cd35e3f7", "html_url": "https://github.com/rust-lang/rust/commit/a52ec87a1720bda5a2aac437a909af01cd35e3f7"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "07bf053e996658196f5c9bb3258b82d3219b0812", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.rs?ref=542130bde94decf458cdeec2a6d61314fb1f427a", "patch": "@@ -0,0 +1,12 @@\n+trait Trait {\n+    fn baz(&self, _: Self) {}\n+    fn bat(&self) -> Self {}\n+}\n+\n+fn bar(x: &dyn Trait) {} //~ ERROR the trait `Trait` cannot be made into an object\n+\n+trait Other: Sized {}\n+\n+fn foo(x: &dyn Other) {} //~ ERROR the trait `Other` cannot be made into an object\n+\n+fn main() {}"}, {"sha": "c3cfad70bf43067ad9c4b15b2abbc38d950d465c", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr?ref=542130bde94decf458cdeec2a6d61314fb1f427a", "patch": "@@ -0,0 +1,30 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-references-self.rs:6:11\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn baz(&self, _: Self) {}\n+   |                      ---- ...because method `baz` references the `Self` type in this parameter\n+LL |     fn bat(&self) -> Self {}\n+   |                      ---- ...because method `bat` references the `Self` type in its return type\n+...\n+LL | fn bar(x: &dyn Trait) {}\n+   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = help: consider moving `baz` to another trait\n+   = help: consider moving `bat` to another trait\n+\n+error[E0038]: the trait `Other` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-references-self.rs:10:11\n+   |\n+LL | trait Other: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+LL | \n+LL | fn foo(x: &dyn Other) {}\n+   |           ^^^^^^^^^^ the trait `Other` cannot be made into an object\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "c4b8960b65e4adc9456bd7cf33d3e15a45ee6244", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed?ref=542130bde94decf458cdeec2a6d61314fb1f427a", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n+\n+trait Trait {\n+    fn foo() where Self: Other, Self: Sized, { }\n+    fn bar(self: &Self) {} //~ ERROR invalid `self` parameter type\n+}\n+\n+fn bar(x: &dyn Trait) {} //~ ERROR the trait `Trait` cannot be made into an object\n+\n+trait Other {}\n+\n+fn main() {}"}, {"sha": "38d9aea16ebf6293529e67152304218320ec4d28", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.rs?ref=542130bde94decf458cdeec2a6d61314fb1f427a", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n+\n+trait Trait {\n+    fn foo() where Self: Other, { }\n+    fn bar(self: ()) {} //~ ERROR invalid `self` parameter type\n+}\n+\n+fn bar(x: &dyn Trait) {} //~ ERROR the trait `Trait` cannot be made into an object\n+\n+trait Other {}\n+\n+fn main() {}"}, {"sha": "6466a768ecbe9096004cdda89cc47196ec8817b4", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/542130bde94decf458cdeec2a6d61314fb1f427a/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=542130bde94decf458cdeec2a6d61314fb1f427a", "patch": "@@ -0,0 +1,35 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:9:11\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn foo() where Self: Other, { }\n+   |        --- ...because associated function `foo` has no `self` parameter\n+LL |     fn bar(self: ()) {}\n+   |                  -- ...because method `bar`'s `self` parameter cannot be dispatched on\n+...\n+LL | fn bar(x: &dyn Trait) {}\n+   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Other, Self: Sized, { }\n+   |                               ^^^^^^^^^^^^^\n+help: consider changing method `bar`'s `self` parameter to be `&self`\n+   |\n+LL |     fn bar(self: &Self) {}\n+   |                  ^^^^^\n+\n+error[E0307]: invalid `self` parameter type: ()\n+  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:6:18\n+   |\n+LL |     fn bar(self: ()) {}\n+   |                  ^^\n+   |\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0038, E0307.\n+For more information about an error, try `rustc --explain E0038`."}]}