{"sha": "0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjI0MmY2ZDYyZDZkNDliZjhhMmQxODYwYTQxMjczYzFmZGZhMGQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-06T11:51:48Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-06T11:51:48Z"}, "message": "Add assert_approx_eq! macro", "tree": {"sha": "885dcc297588b43cf7a3fb910274228a58ecde58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/885dcc297588b43cf7a3fb910274228a58ecde58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "html_url": "https://github.com/rust-lang/rust/commit/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02118330084539fdc87533d46aabeef2257ee835", "url": "https://api.github.com/repos/rust-lang/rust/commits/02118330084539fdc87533d46aabeef2257ee835", "html_url": "https://github.com/rust-lang/rust/commit/02118330084539fdc87533d46aabeef2257ee835"}], "stats": {"total": 498, "additions": 275, "deletions": 223}, "files": [{"sha": "7c13f136a80f27ef4c761eb0f1975b2d7ca0ce69", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 65, "deletions": 74, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -826,15 +826,6 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n-    macro_rules! assert_fuzzy_eq(\n-        ($a:expr, $b:expr) => ({\n-            let a = $a, b = $b;\n-            if !((a - b).abs() < 1.0e-6) {\n-                fail!(fmt!(\"The values were not approximately equal. Found: %? and %?\", a, b));\n-            }\n-        })\n-    )\n-\n     #[test]\n     fn test_num() {\n         num::test_num(10f32, 2f32);\n@@ -864,91 +855,91 @@ mod tests {\n \n     #[test]\n     fn test_floor() {\n-        assert_fuzzy_eq!(1.0f32.floor(), 1.0f32);\n-        assert_fuzzy_eq!(1.3f32.floor(), 1.0f32);\n-        assert_fuzzy_eq!(1.5f32.floor(), 1.0f32);\n-        assert_fuzzy_eq!(1.7f32.floor(), 1.0f32);\n-        assert_fuzzy_eq!(0.0f32.floor(), 0.0f32);\n-        assert_fuzzy_eq!((-0.0f32).floor(), -0.0f32);\n-        assert_fuzzy_eq!((-1.0f32).floor(), -1.0f32);\n-        assert_fuzzy_eq!((-1.3f32).floor(), -2.0f32);\n-        assert_fuzzy_eq!((-1.5f32).floor(), -2.0f32);\n-        assert_fuzzy_eq!((-1.7f32).floor(), -2.0f32);\n+        assert_approx_eq!(1.0f32.floor(), 1.0f32);\n+        assert_approx_eq!(1.3f32.floor(), 1.0f32);\n+        assert_approx_eq!(1.5f32.floor(), 1.0f32);\n+        assert_approx_eq!(1.7f32.floor(), 1.0f32);\n+        assert_approx_eq!(0.0f32.floor(), 0.0f32);\n+        assert_approx_eq!((-0.0f32).floor(), -0.0f32);\n+        assert_approx_eq!((-1.0f32).floor(), -1.0f32);\n+        assert_approx_eq!((-1.3f32).floor(), -2.0f32);\n+        assert_approx_eq!((-1.5f32).floor(), -2.0f32);\n+        assert_approx_eq!((-1.7f32).floor(), -2.0f32);\n     }\n \n     #[test]\n     fn test_ceil() {\n-        assert_fuzzy_eq!(1.0f32.ceil(), 1.0f32);\n-        assert_fuzzy_eq!(1.3f32.ceil(), 2.0f32);\n-        assert_fuzzy_eq!(1.5f32.ceil(), 2.0f32);\n-        assert_fuzzy_eq!(1.7f32.ceil(), 2.0f32);\n-        assert_fuzzy_eq!(0.0f32.ceil(), 0.0f32);\n-        assert_fuzzy_eq!((-0.0f32).ceil(), -0.0f32);\n-        assert_fuzzy_eq!((-1.0f32).ceil(), -1.0f32);\n-        assert_fuzzy_eq!((-1.3f32).ceil(), -1.0f32);\n-        assert_fuzzy_eq!((-1.5f32).ceil(), -1.0f32);\n-        assert_fuzzy_eq!((-1.7f32).ceil(), -1.0f32);\n+        assert_approx_eq!(1.0f32.ceil(), 1.0f32);\n+        assert_approx_eq!(1.3f32.ceil(), 2.0f32);\n+        assert_approx_eq!(1.5f32.ceil(), 2.0f32);\n+        assert_approx_eq!(1.7f32.ceil(), 2.0f32);\n+        assert_approx_eq!(0.0f32.ceil(), 0.0f32);\n+        assert_approx_eq!((-0.0f32).ceil(), -0.0f32);\n+        assert_approx_eq!((-1.0f32).ceil(), -1.0f32);\n+        assert_approx_eq!((-1.3f32).ceil(), -1.0f32);\n+        assert_approx_eq!((-1.5f32).ceil(), -1.0f32);\n+        assert_approx_eq!((-1.7f32).ceil(), -1.0f32);\n     }\n \n     #[test]\n     fn test_round() {\n-        assert_fuzzy_eq!(1.0f32.round(), 1.0f32);\n-        assert_fuzzy_eq!(1.3f32.round(), 1.0f32);\n-        assert_fuzzy_eq!(1.5f32.round(), 2.0f32);\n-        assert_fuzzy_eq!(1.7f32.round(), 2.0f32);\n-        assert_fuzzy_eq!(0.0f32.round(), 0.0f32);\n-        assert_fuzzy_eq!((-0.0f32).round(), -0.0f32);\n-        assert_fuzzy_eq!((-1.0f32).round(), -1.0f32);\n-        assert_fuzzy_eq!((-1.3f32).round(), -1.0f32);\n-        assert_fuzzy_eq!((-1.5f32).round(), -2.0f32);\n-        assert_fuzzy_eq!((-1.7f32).round(), -2.0f32);\n+        assert_approx_eq!(1.0f32.round(), 1.0f32);\n+        assert_approx_eq!(1.3f32.round(), 1.0f32);\n+        assert_approx_eq!(1.5f32.round(), 2.0f32);\n+        assert_approx_eq!(1.7f32.round(), 2.0f32);\n+        assert_approx_eq!(0.0f32.round(), 0.0f32);\n+        assert_approx_eq!((-0.0f32).round(), -0.0f32);\n+        assert_approx_eq!((-1.0f32).round(), -1.0f32);\n+        assert_approx_eq!((-1.3f32).round(), -1.0f32);\n+        assert_approx_eq!((-1.5f32).round(), -2.0f32);\n+        assert_approx_eq!((-1.7f32).round(), -2.0f32);\n     }\n \n     #[test]\n     fn test_trunc() {\n-        assert_fuzzy_eq!(1.0f32.trunc(), 1.0f32);\n-        assert_fuzzy_eq!(1.3f32.trunc(), 1.0f32);\n-        assert_fuzzy_eq!(1.5f32.trunc(), 1.0f32);\n-        assert_fuzzy_eq!(1.7f32.trunc(), 1.0f32);\n-        assert_fuzzy_eq!(0.0f32.trunc(), 0.0f32);\n-        assert_fuzzy_eq!((-0.0f32).trunc(), -0.0f32);\n-        assert_fuzzy_eq!((-1.0f32).trunc(), -1.0f32);\n-        assert_fuzzy_eq!((-1.3f32).trunc(), -1.0f32);\n-        assert_fuzzy_eq!((-1.5f32).trunc(), -1.0f32);\n-        assert_fuzzy_eq!((-1.7f32).trunc(), -1.0f32);\n+        assert_approx_eq!(1.0f32.trunc(), 1.0f32);\n+        assert_approx_eq!(1.3f32.trunc(), 1.0f32);\n+        assert_approx_eq!(1.5f32.trunc(), 1.0f32);\n+        assert_approx_eq!(1.7f32.trunc(), 1.0f32);\n+        assert_approx_eq!(0.0f32.trunc(), 0.0f32);\n+        assert_approx_eq!((-0.0f32).trunc(), -0.0f32);\n+        assert_approx_eq!((-1.0f32).trunc(), -1.0f32);\n+        assert_approx_eq!((-1.3f32).trunc(), -1.0f32);\n+        assert_approx_eq!((-1.5f32).trunc(), -1.0f32);\n+        assert_approx_eq!((-1.7f32).trunc(), -1.0f32);\n     }\n \n     #[test]\n     fn test_fract() {\n-        assert_fuzzy_eq!(1.0f32.fract(), 0.0f32);\n-        assert_fuzzy_eq!(1.3f32.fract(), 0.3f32);\n-        assert_fuzzy_eq!(1.5f32.fract(), 0.5f32);\n-        assert_fuzzy_eq!(1.7f32.fract(), 0.7f32);\n-        assert_fuzzy_eq!(0.0f32.fract(), 0.0f32);\n-        assert_fuzzy_eq!((-0.0f32).fract(), -0.0f32);\n-        assert_fuzzy_eq!((-1.0f32).fract(), -0.0f32);\n-        assert_fuzzy_eq!((-1.3f32).fract(), -0.3f32);\n-        assert_fuzzy_eq!((-1.5f32).fract(), -0.5f32);\n-        assert_fuzzy_eq!((-1.7f32).fract(), -0.7f32);\n+        assert_approx_eq!(1.0f32.fract(), 0.0f32);\n+        assert_approx_eq!(1.3f32.fract(), 0.3f32);\n+        assert_approx_eq!(1.5f32.fract(), 0.5f32);\n+        assert_approx_eq!(1.7f32.fract(), 0.7f32);\n+        assert_approx_eq!(0.0f32.fract(), 0.0f32);\n+        assert_approx_eq!((-0.0f32).fract(), -0.0f32);\n+        assert_approx_eq!((-1.0f32).fract(), -0.0f32);\n+        assert_approx_eq!((-1.3f32).fract(), -0.3f32);\n+        assert_approx_eq!((-1.5f32).fract(), -0.5f32);\n+        assert_approx_eq!((-1.7f32).fract(), -0.7f32);\n     }\n \n     #[test]\n     fn test_real_consts() {\n-        assert_fuzzy_eq!(Real::two_pi::<f32>(), 2f32 * Real::pi::<f32>());\n-        assert_fuzzy_eq!(Real::frac_pi_2::<f32>(), Real::pi::<f32>() / 2f32);\n-        assert_fuzzy_eq!(Real::frac_pi_3::<f32>(), Real::pi::<f32>() / 3f32);\n-        assert_fuzzy_eq!(Real::frac_pi_4::<f32>(), Real::pi::<f32>() / 4f32);\n-        assert_fuzzy_eq!(Real::frac_pi_6::<f32>(), Real::pi::<f32>() / 6f32);\n-        assert_fuzzy_eq!(Real::frac_pi_8::<f32>(), Real::pi::<f32>() / 8f32);\n-        assert_fuzzy_eq!(Real::frac_1_pi::<f32>(), 1f32 / Real::pi::<f32>());\n-        assert_fuzzy_eq!(Real::frac_2_pi::<f32>(), 2f32 / Real::pi::<f32>());\n-        assert_fuzzy_eq!(Real::frac_2_sqrtpi::<f32>(), 2f32 / Real::pi::<f32>().sqrt());\n-        assert_fuzzy_eq!(Real::sqrt2::<f32>(), 2f32.sqrt());\n-        assert_fuzzy_eq!(Real::frac_1_sqrt2::<f32>(), 1f32 / 2f32.sqrt());\n-        assert_fuzzy_eq!(Real::log2_e::<f32>(), Real::e::<f32>().log2());\n-        assert_fuzzy_eq!(Real::log10_e::<f32>(), Real::e::<f32>().log10());\n-        assert_fuzzy_eq!(Real::log_2::<f32>(), 2f32.log());\n-        assert_fuzzy_eq!(Real::log_10::<f32>(), 10f32.log());\n+        assert_approx_eq!(Real::two_pi::<f32>(), 2f32 * Real::pi::<f32>());\n+        assert_approx_eq!(Real::frac_pi_2::<f32>(), Real::pi::<f32>() / 2f32);\n+        assert_approx_eq!(Real::frac_pi_3::<f32>(), Real::pi::<f32>() / 3f32);\n+        assert_approx_eq!(Real::frac_pi_4::<f32>(), Real::pi::<f32>() / 4f32);\n+        assert_approx_eq!(Real::frac_pi_6::<f32>(), Real::pi::<f32>() / 6f32);\n+        assert_approx_eq!(Real::frac_pi_8::<f32>(), Real::pi::<f32>() / 8f32);\n+        assert_approx_eq!(Real::frac_1_pi::<f32>(), 1f32 / Real::pi::<f32>());\n+        assert_approx_eq!(Real::frac_2_pi::<f32>(), 2f32 / Real::pi::<f32>());\n+        assert_approx_eq!(Real::frac_2_sqrtpi::<f32>(), 2f32 / Real::pi::<f32>().sqrt());\n+        assert_approx_eq!(Real::sqrt2::<f32>(), 2f32.sqrt());\n+        assert_approx_eq!(Real::frac_1_sqrt2::<f32>(), 1f32 / 2f32.sqrt());\n+        assert_approx_eq!(Real::log2_e::<f32>(), Real::e::<f32>().log2());\n+        assert_approx_eq!(Real::log10_e::<f32>(), Real::e::<f32>().log10());\n+        assert_approx_eq!(Real::log_2::<f32>(), 2f32.log());\n+        assert_approx_eq!(Real::log_10::<f32>(), 10f32.log());\n     }\n \n     #[test]"}, {"sha": "e5f10c23ecd8755e66f61cf203d1cd6fb332532e", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 65, "deletions": 75, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -869,16 +869,6 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n-    macro_rules! assert_fuzzy_eq(\n-        ($a:expr, $b:expr) => ({\n-            let a = $a, b = $b;\n-            if !((a - b).abs() < 1.0e-6) {\n-                fail!(fmt!(\"The values were not approximately equal. \\\n-                            Found: %? and expected %?\", a, b));\n-            }\n-        })\n-    )\n-\n     #[test]\n     fn test_num() {\n         num::test_num(10f64, 2f64);\n@@ -912,91 +902,91 @@ mod tests {\n \n     #[test]\n     fn test_floor() {\n-        assert_fuzzy_eq!(1.0f64.floor(), 1.0f64);\n-        assert_fuzzy_eq!(1.3f64.floor(), 1.0f64);\n-        assert_fuzzy_eq!(1.5f64.floor(), 1.0f64);\n-        assert_fuzzy_eq!(1.7f64.floor(), 1.0f64);\n-        assert_fuzzy_eq!(0.0f64.floor(), 0.0f64);\n-        assert_fuzzy_eq!((-0.0f64).floor(), -0.0f64);\n-        assert_fuzzy_eq!((-1.0f64).floor(), -1.0f64);\n-        assert_fuzzy_eq!((-1.3f64).floor(), -2.0f64);\n-        assert_fuzzy_eq!((-1.5f64).floor(), -2.0f64);\n-        assert_fuzzy_eq!((-1.7f64).floor(), -2.0f64);\n+        assert_approx_eq!(1.0f64.floor(), 1.0f64);\n+        assert_approx_eq!(1.3f64.floor(), 1.0f64);\n+        assert_approx_eq!(1.5f64.floor(), 1.0f64);\n+        assert_approx_eq!(1.7f64.floor(), 1.0f64);\n+        assert_approx_eq!(0.0f64.floor(), 0.0f64);\n+        assert_approx_eq!((-0.0f64).floor(), -0.0f64);\n+        assert_approx_eq!((-1.0f64).floor(), -1.0f64);\n+        assert_approx_eq!((-1.3f64).floor(), -2.0f64);\n+        assert_approx_eq!((-1.5f64).floor(), -2.0f64);\n+        assert_approx_eq!((-1.7f64).floor(), -2.0f64);\n     }\n \n     #[test]\n     fn test_ceil() {\n-        assert_fuzzy_eq!(1.0f64.ceil(), 1.0f64);\n-        assert_fuzzy_eq!(1.3f64.ceil(), 2.0f64);\n-        assert_fuzzy_eq!(1.5f64.ceil(), 2.0f64);\n-        assert_fuzzy_eq!(1.7f64.ceil(), 2.0f64);\n-        assert_fuzzy_eq!(0.0f64.ceil(), 0.0f64);\n-        assert_fuzzy_eq!((-0.0f64).ceil(), -0.0f64);\n-        assert_fuzzy_eq!((-1.0f64).ceil(), -1.0f64);\n-        assert_fuzzy_eq!((-1.3f64).ceil(), -1.0f64);\n-        assert_fuzzy_eq!((-1.5f64).ceil(), -1.0f64);\n-        assert_fuzzy_eq!((-1.7f64).ceil(), -1.0f64);\n+        assert_approx_eq!(1.0f64.ceil(), 1.0f64);\n+        assert_approx_eq!(1.3f64.ceil(), 2.0f64);\n+        assert_approx_eq!(1.5f64.ceil(), 2.0f64);\n+        assert_approx_eq!(1.7f64.ceil(), 2.0f64);\n+        assert_approx_eq!(0.0f64.ceil(), 0.0f64);\n+        assert_approx_eq!((-0.0f64).ceil(), -0.0f64);\n+        assert_approx_eq!((-1.0f64).ceil(), -1.0f64);\n+        assert_approx_eq!((-1.3f64).ceil(), -1.0f64);\n+        assert_approx_eq!((-1.5f64).ceil(), -1.0f64);\n+        assert_approx_eq!((-1.7f64).ceil(), -1.0f64);\n     }\n \n     #[test]\n     fn test_round() {\n-        assert_fuzzy_eq!(1.0f64.round(), 1.0f64);\n-        assert_fuzzy_eq!(1.3f64.round(), 1.0f64);\n-        assert_fuzzy_eq!(1.5f64.round(), 2.0f64);\n-        assert_fuzzy_eq!(1.7f64.round(), 2.0f64);\n-        assert_fuzzy_eq!(0.0f64.round(), 0.0f64);\n-        assert_fuzzy_eq!((-0.0f64).round(), -0.0f64);\n-        assert_fuzzy_eq!((-1.0f64).round(), -1.0f64);\n-        assert_fuzzy_eq!((-1.3f64).round(), -1.0f64);\n-        assert_fuzzy_eq!((-1.5f64).round(), -2.0f64);\n-        assert_fuzzy_eq!((-1.7f64).round(), -2.0f64);\n+        assert_approx_eq!(1.0f64.round(), 1.0f64);\n+        assert_approx_eq!(1.3f64.round(), 1.0f64);\n+        assert_approx_eq!(1.5f64.round(), 2.0f64);\n+        assert_approx_eq!(1.7f64.round(), 2.0f64);\n+        assert_approx_eq!(0.0f64.round(), 0.0f64);\n+        assert_approx_eq!((-0.0f64).round(), -0.0f64);\n+        assert_approx_eq!((-1.0f64).round(), -1.0f64);\n+        assert_approx_eq!((-1.3f64).round(), -1.0f64);\n+        assert_approx_eq!((-1.5f64).round(), -2.0f64);\n+        assert_approx_eq!((-1.7f64).round(), -2.0f64);\n     }\n \n     #[test]\n     fn test_trunc() {\n-        assert_fuzzy_eq!(1.0f64.trunc(), 1.0f64);\n-        assert_fuzzy_eq!(1.3f64.trunc(), 1.0f64);\n-        assert_fuzzy_eq!(1.5f64.trunc(), 1.0f64);\n-        assert_fuzzy_eq!(1.7f64.trunc(), 1.0f64);\n-        assert_fuzzy_eq!(0.0f64.trunc(), 0.0f64);\n-        assert_fuzzy_eq!((-0.0f64).trunc(), -0.0f64);\n-        assert_fuzzy_eq!((-1.0f64).trunc(), -1.0f64);\n-        assert_fuzzy_eq!((-1.3f64).trunc(), -1.0f64);\n-        assert_fuzzy_eq!((-1.5f64).trunc(), -1.0f64);\n-        assert_fuzzy_eq!((-1.7f64).trunc(), -1.0f64);\n+        assert_approx_eq!(1.0f64.trunc(), 1.0f64);\n+        assert_approx_eq!(1.3f64.trunc(), 1.0f64);\n+        assert_approx_eq!(1.5f64.trunc(), 1.0f64);\n+        assert_approx_eq!(1.7f64.trunc(), 1.0f64);\n+        assert_approx_eq!(0.0f64.trunc(), 0.0f64);\n+        assert_approx_eq!((-0.0f64).trunc(), -0.0f64);\n+        assert_approx_eq!((-1.0f64).trunc(), -1.0f64);\n+        assert_approx_eq!((-1.3f64).trunc(), -1.0f64);\n+        assert_approx_eq!((-1.5f64).trunc(), -1.0f64);\n+        assert_approx_eq!((-1.7f64).trunc(), -1.0f64);\n     }\n \n     #[test]\n     fn test_fract() {\n-        assert_fuzzy_eq!(1.0f64.fract(), 0.0f64);\n-        assert_fuzzy_eq!(1.3f64.fract(), 0.3f64);\n-        assert_fuzzy_eq!(1.5f64.fract(), 0.5f64);\n-        assert_fuzzy_eq!(1.7f64.fract(), 0.7f64);\n-        assert_fuzzy_eq!(0.0f64.fract(), 0.0f64);\n-        assert_fuzzy_eq!((-0.0f64).fract(), -0.0f64);\n-        assert_fuzzy_eq!((-1.0f64).fract(), -0.0f64);\n-        assert_fuzzy_eq!((-1.3f64).fract(), -0.3f64);\n-        assert_fuzzy_eq!((-1.5f64).fract(), -0.5f64);\n-        assert_fuzzy_eq!((-1.7f64).fract(), -0.7f64);\n+        assert_approx_eq!(1.0f64.fract(), 0.0f64);\n+        assert_approx_eq!(1.3f64.fract(), 0.3f64);\n+        assert_approx_eq!(1.5f64.fract(), 0.5f64);\n+        assert_approx_eq!(1.7f64.fract(), 0.7f64);\n+        assert_approx_eq!(0.0f64.fract(), 0.0f64);\n+        assert_approx_eq!((-0.0f64).fract(), -0.0f64);\n+        assert_approx_eq!((-1.0f64).fract(), -0.0f64);\n+        assert_approx_eq!((-1.3f64).fract(), -0.3f64);\n+        assert_approx_eq!((-1.5f64).fract(), -0.5f64);\n+        assert_approx_eq!((-1.7f64).fract(), -0.7f64);\n     }\n \n     #[test]\n     fn test_real_consts() {\n-        assert_fuzzy_eq!(Real::two_pi::<f64>(), 2.0 * Real::pi::<f64>());\n-        assert_fuzzy_eq!(Real::frac_pi_2::<f64>(), Real::pi::<f64>() / 2f64);\n-        assert_fuzzy_eq!(Real::frac_pi_3::<f64>(), Real::pi::<f64>() / 3f64);\n-        assert_fuzzy_eq!(Real::frac_pi_4::<f64>(), Real::pi::<f64>() / 4f64);\n-        assert_fuzzy_eq!(Real::frac_pi_6::<f64>(), Real::pi::<f64>() / 6f64);\n-        assert_fuzzy_eq!(Real::frac_pi_8::<f64>(), Real::pi::<f64>() / 8f64);\n-        assert_fuzzy_eq!(Real::frac_1_pi::<f64>(), 1f64 / Real::pi::<f64>());\n-        assert_fuzzy_eq!(Real::frac_2_pi::<f64>(), 2f64 / Real::pi::<f64>());\n-        assert_fuzzy_eq!(Real::frac_2_sqrtpi::<f64>(), 2f64 / Real::pi::<f64>().sqrt());\n-        assert_fuzzy_eq!(Real::sqrt2::<f64>(), 2f64.sqrt());\n-        assert_fuzzy_eq!(Real::frac_1_sqrt2::<f64>(), 1f64 / 2f64.sqrt());\n-        assert_fuzzy_eq!(Real::log2_e::<f64>(), Real::e::<f64>().log2());\n-        assert_fuzzy_eq!(Real::log10_e::<f64>(), Real::e::<f64>().log10());\n-        assert_fuzzy_eq!(Real::log_2::<f64>(), 2f64.log());\n-        assert_fuzzy_eq!(Real::log_10::<f64>(), 10f64.log());\n+        assert_approx_eq!(Real::two_pi::<f64>(), 2.0 * Real::pi::<f64>());\n+        assert_approx_eq!(Real::frac_pi_2::<f64>(), Real::pi::<f64>() / 2f64);\n+        assert_approx_eq!(Real::frac_pi_3::<f64>(), Real::pi::<f64>() / 3f64);\n+        assert_approx_eq!(Real::frac_pi_4::<f64>(), Real::pi::<f64>() / 4f64);\n+        assert_approx_eq!(Real::frac_pi_6::<f64>(), Real::pi::<f64>() / 6f64);\n+        assert_approx_eq!(Real::frac_pi_8::<f64>(), Real::pi::<f64>() / 8f64);\n+        assert_approx_eq!(Real::frac_1_pi::<f64>(), 1f64 / Real::pi::<f64>());\n+        assert_approx_eq!(Real::frac_2_pi::<f64>(), 2f64 / Real::pi::<f64>());\n+        assert_approx_eq!(Real::frac_2_sqrtpi::<f64>(), 2f64 / Real::pi::<f64>().sqrt());\n+        assert_approx_eq!(Real::sqrt2::<f64>(), 2f64.sqrt());\n+        assert_approx_eq!(Real::frac_1_sqrt2::<f64>(), 1f64 / 2f64.sqrt());\n+        assert_approx_eq!(Real::log2_e::<f64>(), Real::e::<f64>().log2());\n+        assert_approx_eq!(Real::log10_e::<f64>(), Real::e::<f64>().log10());\n+        assert_approx_eq!(Real::log_2::<f64>(), 2f64.log());\n+        assert_approx_eq!(Real::log_10::<f64>(), 10f64.log());\n     }\n \n     #[test]"}, {"sha": "a54816532639666faa931c32fa4ab7b0928bc26c", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 65, "deletions": 74, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -837,15 +837,6 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n-    macro_rules! assert_fuzzy_eq(\n-        ($a:expr, $b:expr) => ({\n-            let a = $a, b = $b;\n-            if !((a - b).abs() < 1.0e-6) {\n-                fail!(fmt!(\"The values were not approximately equal. Found: %? and %?\", a, b));\n-            }\n-        })\n-    )\n-\n     #[test]\n     fn test_num() {\n         num::test_num(10f, 2f);\n@@ -875,91 +866,91 @@ mod tests {\n \n     #[test]\n     fn test_floor() {\n-        assert_fuzzy_eq!(1.0f.floor(), 1.0f);\n-        assert_fuzzy_eq!(1.3f.floor(), 1.0f);\n-        assert_fuzzy_eq!(1.5f.floor(), 1.0f);\n-        assert_fuzzy_eq!(1.7f.floor(), 1.0f);\n-        assert_fuzzy_eq!(0.0f.floor(), 0.0f);\n-        assert_fuzzy_eq!((-0.0f).floor(), -0.0f);\n-        assert_fuzzy_eq!((-1.0f).floor(), -1.0f);\n-        assert_fuzzy_eq!((-1.3f).floor(), -2.0f);\n-        assert_fuzzy_eq!((-1.5f).floor(), -2.0f);\n-        assert_fuzzy_eq!((-1.7f).floor(), -2.0f);\n+        assert_approx_eq!(1.0f.floor(), 1.0f);\n+        assert_approx_eq!(1.3f.floor(), 1.0f);\n+        assert_approx_eq!(1.5f.floor(), 1.0f);\n+        assert_approx_eq!(1.7f.floor(), 1.0f);\n+        assert_approx_eq!(0.0f.floor(), 0.0f);\n+        assert_approx_eq!((-0.0f).floor(), -0.0f);\n+        assert_approx_eq!((-1.0f).floor(), -1.0f);\n+        assert_approx_eq!((-1.3f).floor(), -2.0f);\n+        assert_approx_eq!((-1.5f).floor(), -2.0f);\n+        assert_approx_eq!((-1.7f).floor(), -2.0f);\n     }\n \n     #[test]\n     fn test_ceil() {\n-        assert_fuzzy_eq!(1.0f.ceil(), 1.0f);\n-        assert_fuzzy_eq!(1.3f.ceil(), 2.0f);\n-        assert_fuzzy_eq!(1.5f.ceil(), 2.0f);\n-        assert_fuzzy_eq!(1.7f.ceil(), 2.0f);\n-        assert_fuzzy_eq!(0.0f.ceil(), 0.0f);\n-        assert_fuzzy_eq!((-0.0f).ceil(), -0.0f);\n-        assert_fuzzy_eq!((-1.0f).ceil(), -1.0f);\n-        assert_fuzzy_eq!((-1.3f).ceil(), -1.0f);\n-        assert_fuzzy_eq!((-1.5f).ceil(), -1.0f);\n-        assert_fuzzy_eq!((-1.7f).ceil(), -1.0f);\n+        assert_approx_eq!(1.0f.ceil(), 1.0f);\n+        assert_approx_eq!(1.3f.ceil(), 2.0f);\n+        assert_approx_eq!(1.5f.ceil(), 2.0f);\n+        assert_approx_eq!(1.7f.ceil(), 2.0f);\n+        assert_approx_eq!(0.0f.ceil(), 0.0f);\n+        assert_approx_eq!((-0.0f).ceil(), -0.0f);\n+        assert_approx_eq!((-1.0f).ceil(), -1.0f);\n+        assert_approx_eq!((-1.3f).ceil(), -1.0f);\n+        assert_approx_eq!((-1.5f).ceil(), -1.0f);\n+        assert_approx_eq!((-1.7f).ceil(), -1.0f);\n     }\n \n     #[test]\n     fn test_round() {\n-        assert_fuzzy_eq!(1.0f.round(), 1.0f);\n-        assert_fuzzy_eq!(1.3f.round(), 1.0f);\n-        assert_fuzzy_eq!(1.5f.round(), 2.0f);\n-        assert_fuzzy_eq!(1.7f.round(), 2.0f);\n-        assert_fuzzy_eq!(0.0f.round(), 0.0f);\n-        assert_fuzzy_eq!((-0.0f).round(), -0.0f);\n-        assert_fuzzy_eq!((-1.0f).round(), -1.0f);\n-        assert_fuzzy_eq!((-1.3f).round(), -1.0f);\n-        assert_fuzzy_eq!((-1.5f).round(), -2.0f);\n-        assert_fuzzy_eq!((-1.7f).round(), -2.0f);\n+        assert_approx_eq!(1.0f.round(), 1.0f);\n+        assert_approx_eq!(1.3f.round(), 1.0f);\n+        assert_approx_eq!(1.5f.round(), 2.0f);\n+        assert_approx_eq!(1.7f.round(), 2.0f);\n+        assert_approx_eq!(0.0f.round(), 0.0f);\n+        assert_approx_eq!((-0.0f).round(), -0.0f);\n+        assert_approx_eq!((-1.0f).round(), -1.0f);\n+        assert_approx_eq!((-1.3f).round(), -1.0f);\n+        assert_approx_eq!((-1.5f).round(), -2.0f);\n+        assert_approx_eq!((-1.7f).round(), -2.0f);\n     }\n \n     #[test]\n     fn test_trunc() {\n-        assert_fuzzy_eq!(1.0f.trunc(), 1.0f);\n-        assert_fuzzy_eq!(1.3f.trunc(), 1.0f);\n-        assert_fuzzy_eq!(1.5f.trunc(), 1.0f);\n-        assert_fuzzy_eq!(1.7f.trunc(), 1.0f);\n-        assert_fuzzy_eq!(0.0f.trunc(), 0.0f);\n-        assert_fuzzy_eq!((-0.0f).trunc(), -0.0f);\n-        assert_fuzzy_eq!((-1.0f).trunc(), -1.0f);\n-        assert_fuzzy_eq!((-1.3f).trunc(), -1.0f);\n-        assert_fuzzy_eq!((-1.5f).trunc(), -1.0f);\n-        assert_fuzzy_eq!((-1.7f).trunc(), -1.0f);\n+        assert_approx_eq!(1.0f.trunc(), 1.0f);\n+        assert_approx_eq!(1.3f.trunc(), 1.0f);\n+        assert_approx_eq!(1.5f.trunc(), 1.0f);\n+        assert_approx_eq!(1.7f.trunc(), 1.0f);\n+        assert_approx_eq!(0.0f.trunc(), 0.0f);\n+        assert_approx_eq!((-0.0f).trunc(), -0.0f);\n+        assert_approx_eq!((-1.0f).trunc(), -1.0f);\n+        assert_approx_eq!((-1.3f).trunc(), -1.0f);\n+        assert_approx_eq!((-1.5f).trunc(), -1.0f);\n+        assert_approx_eq!((-1.7f).trunc(), -1.0f);\n     }\n \n     #[test]\n     fn test_fract() {\n-        assert_fuzzy_eq!(1.0f.fract(), 0.0f);\n-        assert_fuzzy_eq!(1.3f.fract(), 0.3f);\n-        assert_fuzzy_eq!(1.5f.fract(), 0.5f);\n-        assert_fuzzy_eq!(1.7f.fract(), 0.7f);\n-        assert_fuzzy_eq!(0.0f.fract(), 0.0f);\n-        assert_fuzzy_eq!((-0.0f).fract(), -0.0f);\n-        assert_fuzzy_eq!((-1.0f).fract(), -0.0f);\n-        assert_fuzzy_eq!((-1.3f).fract(), -0.3f);\n-        assert_fuzzy_eq!((-1.5f).fract(), -0.5f);\n-        assert_fuzzy_eq!((-1.7f).fract(), -0.7f);\n+        assert_approx_eq!(1.0f.fract(), 0.0f);\n+        assert_approx_eq!(1.3f.fract(), 0.3f);\n+        assert_approx_eq!(1.5f.fract(), 0.5f);\n+        assert_approx_eq!(1.7f.fract(), 0.7f);\n+        assert_approx_eq!(0.0f.fract(), 0.0f);\n+        assert_approx_eq!((-0.0f).fract(), -0.0f);\n+        assert_approx_eq!((-1.0f).fract(), -0.0f);\n+        assert_approx_eq!((-1.3f).fract(), -0.3f);\n+        assert_approx_eq!((-1.5f).fract(), -0.5f);\n+        assert_approx_eq!((-1.7f).fract(), -0.7f);\n     }\n \n     #[test]\n     fn test_real_consts() {\n-        assert_fuzzy_eq!(Real::two_pi::<float>(), 2f * Real::pi::<float>());\n-        assert_fuzzy_eq!(Real::frac_pi_2::<float>(), Real::pi::<float>() / 2f);\n-        assert_fuzzy_eq!(Real::frac_pi_3::<float>(), Real::pi::<float>() / 3f);\n-        assert_fuzzy_eq!(Real::frac_pi_4::<float>(), Real::pi::<float>() / 4f);\n-        assert_fuzzy_eq!(Real::frac_pi_6::<float>(), Real::pi::<float>() / 6f);\n-        assert_fuzzy_eq!(Real::frac_pi_8::<float>(), Real::pi::<float>() / 8f);\n-        assert_fuzzy_eq!(Real::frac_1_pi::<float>(), 1f / Real::pi::<float>());\n-        assert_fuzzy_eq!(Real::frac_2_pi::<float>(), 2f / Real::pi::<float>());\n-        assert_fuzzy_eq!(Real::frac_2_sqrtpi::<float>(), 2f / Real::pi::<float>().sqrt());\n-        assert_fuzzy_eq!(Real::sqrt2::<float>(), 2f.sqrt());\n-        assert_fuzzy_eq!(Real::frac_1_sqrt2::<float>(), 1f / 2f.sqrt());\n-        assert_fuzzy_eq!(Real::log2_e::<float>(), Real::e::<float>().log2());\n-        assert_fuzzy_eq!(Real::log10_e::<float>(), Real::e::<float>().log10());\n-        assert_fuzzy_eq!(Real::log_2::<float>(), 2f.log());\n-        assert_fuzzy_eq!(Real::log_10::<float>(), 10f.log());\n+        assert_approx_eq!(Real::two_pi::<float>(), 2f * Real::pi::<float>());\n+        assert_approx_eq!(Real::frac_pi_2::<float>(), Real::pi::<float>() / 2f);\n+        assert_approx_eq!(Real::frac_pi_3::<float>(), Real::pi::<float>() / 3f);\n+        assert_approx_eq!(Real::frac_pi_4::<float>(), Real::pi::<float>() / 4f);\n+        assert_approx_eq!(Real::frac_pi_6::<float>(), Real::pi::<float>() / 6f);\n+        assert_approx_eq!(Real::frac_pi_8::<float>(), Real::pi::<float>() / 8f);\n+        assert_approx_eq!(Real::frac_1_pi::<float>(), 1f / Real::pi::<float>());\n+        assert_approx_eq!(Real::frac_2_pi::<float>(), 2f / Real::pi::<float>());\n+        assert_approx_eq!(Real::frac_2_sqrtpi::<float>(), 2f / Real::pi::<float>().sqrt());\n+        assert_approx_eq!(Real::sqrt2::<float>(), 2f.sqrt());\n+        assert_approx_eq!(Real::frac_1_sqrt2::<float>(), 1f / 2f.sqrt());\n+        assert_approx_eq!(Real::log2_e::<float>(), Real::e::<float>().log2());\n+        assert_approx_eq!(Real::log10_e::<float>(), Real::e::<float>().log10());\n+        assert_approx_eq!(Real::log_2::<float>(), 2f.log());\n+        assert_approx_eq!(Real::log_10::<float>(), 10f.log());\n     }\n \n     #[test]"}, {"sha": "9363807ab9b9e42fd7cb201e54df0e45380da470", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -483,6 +483,42 @@ pub fn core_macros() -> ~str {\n         )\n     )\n \n+    macro_rules! assert_approx_eq (\n+        ($given:expr , $expected:expr) => (\n+            {\n+                use core::cmp::ApproxEq;\n+\n+                let given_val = $given;\n+                let expected_val = $expected;\n+                // check both directions of equality....\n+                if !(\n+                    given_val.approx_eq(&expected_val) &&\n+                    expected_val.approx_eq(&given_val)\n+                ) {\n+                    fail!(\\\"left: %? does not approximately equal right: %?\\\",\n+                          given_val, expected_val);\n+                }\n+            }\n+        );\n+        ($given:expr , $expected:expr , $epsilon:expr) => (\n+            {\n+                use core::cmp::ApproxEq;\n+\n+                let given_val = $given;\n+                let expected_val = $expected;\n+                let epsilon_val = $epsilon;\n+                // check both directions of equality....\n+                if !(\n+                    given_val.approx_eq_eps(&expected_val, &epsilon_val) &&\n+                    expected_val.approx_eq_eps(&given_val, &epsilon_val)\n+                ) {\n+                    fail!(\\\"left: %? does not approximately equal right: %? with epsilon: %?\\\",\n+                          given_val, expected_val, epsilon_val);\n+                }\n+            }\n+        )\n+    )\n+\n     macro_rules! condition (\n \n         { $c:ident: $in:ty -> $out:ty; } => {"}, {"sha": "c0c20f7af43515392695c6080827ae282d7b2dff", "filename": "src/test/run-fail/assert-approx-eq-eps-macro-fail.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Ftest%2Frun-fail%2Fassert-approx-eq-eps-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Ftest%2Frun-fail%2Fassert-approx-eq-eps-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-approx-eq-eps-macro-fail.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:left: 1.0000001 does not approximately equal right: 1 with epsilon: 0.0000001\n+pub fn main() {\n+    assert_approx_eq!(1.0000001f, 1.0f, 1.0e-7);\n+}"}, {"sha": "43de4f92b63b1adf8a62de2f2f6327b6bccfc09b", "filename": "src/test/run-fail/assert-approx-eq-macro-fail.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Ftest%2Frun-fail%2Fassert-approx-eq-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Ftest%2Frun-fail%2Fassert-approx-eq-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-approx-eq-macro-fail.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:left: 1.00001 does not approximately equal right: 1\n+pub fn main() {\n+    assert_approx_eq!(1.00001f, 1.0f);\n+}"}, {"sha": "5c7c11ef503431bb53ba5fd69eecade97a1d8fbb", "filename": "src/test/run-pass/assert-approx-eq-macro-success.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Ftest%2Frun-pass%2Fassert-approx-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d/src%2Ftest%2Frun-pass%2Fassert-approx-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-approx-eq-macro-success.rs?ref=0e2242f6d62d6d49bf8a2d1860a41273c1fdfa0d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    assert_approx_eq!(1.0f, 1.0f);\n+    assert_approx_eq!(1.0000001f, 1.0f);\n+    assert_approx_eq!(1.0000001f, 1.0f, 1.0e-6);\n+    assert_approx_eq!(1.000001f, 1.0f, 1.0e-5);\n+}"}]}