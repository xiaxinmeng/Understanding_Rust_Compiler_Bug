{"sha": "cb0e270c026987e8863894a96fd19d33d7db1ef1", "node_id": "C_kwDOAAsO6NoAKGNiMGUyNzBjMDI2OTg3ZTg4NjM4OTRhOTZmZDE5ZDMzZDdkYjFlZjE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-23T12:43:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-23T12:43:54Z"}, "message": "Merge #11106\n\n11106: internal: Remove network access from Code extension r=lnicola a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "49cca357401f52c14ffb733434bf52e4d6af6627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cca357401f52c14ffb733434bf52e4d6af6627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb0e270c026987e8863894a96fd19d33d7db1ef1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhxG8KCRBK7hj4Ov3rIwAA4yEIAE+XoEhQkdL1MFv6eUC1xpjI\nX77ay8cxBvGCyAZgAytvGjzayBsPm+ZauGdojdYA/2RtCM2JaOCHgooJH08bwyvf\nh4wlloyT0Lr/I21mvTRhITfwDMmUGvQ4J53t0akPzYEYAxjIv2q72jTjoi70H4rB\npjDgXwQE/mdxwas3Zj9bl1MneM23S0v+4T3lPJVi/gb8LofdRTPnjXGGElRuKrII\nGas8ZNQnkRCt3Hth1qaCuKbGfZDVhJW25brvYqg1//z46U1P+eOv+ul1/WoIwVbs\nB6ByBE8HZK6L/+71lQO+vRzXjdNjMd4Tc2UualrwXos9AWeryG+wzkZXC+OXvlQ=\n=kLzp\n-----END PGP SIGNATURE-----\n", "payload": "tree 49cca357401f52c14ffb733434bf52e4d6af6627\nparent 4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e\nparent af2bbce8d97ef58de4681493509837de38b8b7fe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640263434 +0000\ncommitter GitHub <noreply@github.com> 1640263434 +0000\n\nMerge #11106\n\n11106: internal: Remove network access from Code extension r=lnicola a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb0e270c026987e8863894a96fd19d33d7db1ef1", "html_url": "https://github.com/rust-lang/rust/commit/cb0e270c026987e8863894a96fd19d33d7db1ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb0e270c026987e8863894a96fd19d33d7db1ef1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e", "html_url": "https://github.com/rust-lang/rust/commit/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e"}, {"sha": "af2bbce8d97ef58de4681493509837de38b8b7fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2bbce8d97ef58de4681493509837de38b8b7fe", "html_url": "https://github.com/rust-lang/rust/commit/af2bbce8d97ef58de4681493509837de38b8b7fe"}], "stats": {"total": 721, "additions": 54, "deletions": 667}, "files": [{"sha": "89e252be731d0d190a02e2e33368842e7c823eac", "filename": "PRIVACY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/PRIVACY.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/PRIVACY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/PRIVACY.md?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -1 +1 @@\n-See the [Privacy](https://rust-analyzer.github.io/manual.html#security) section of the user manual.\n+See the [Privacy](https://rust-analyzer.github.io/manual.html#privacy) section of the user manual."}, {"sha": "13165e8d3f0f88f2e04b175ca096445cd72af065", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -653,10 +653,12 @@ Here is a **non-exhaustive** list of ways to make rust-analyzer execute arbitrar\n The LSP server performs no network access in itself, but runs `cargo metadata` which will update or download the crate registry and the source code of the project dependencies.\n If enabled (the default), build scripts and procedural macros can do anything.\n \n-The Code extension automatically connects to GitHub to download updated LSP binaries and, if the nightly channel is selected, to perform update checks using the GitHub API. For `rust-analyzer` developers, using `cargo xtask release` uses the same API to put together the release notes.\n+The Code extension does not access the network.\n \n Any other editor plugins are not under the control of the `rust-analyzer` developers. For any privacy concerns, you should check with their respective developers.\n \n+For `rust-analyzer` developers, `cargo xtask release` uses the GitHub API to put together the release notes.\n+\n == Features\n \n include::./generated_features.adoc[]"}, {"sha": "4aa9ac9d4301c13d6b4c589a0bee80c8f77e6047", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 10, "deletions": 105, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -11,8 +11,6 @@\n             \"dependencies\": {\n                 \"d3\": \"^7.2.0\",\n                 \"d3-graphviz\": \"^4.0.0\",\n-                \"https-proxy-agent\": \"^5.0.0\",\n-                \"node-fetch\": \"^3.0.3\",\n                 \"vscode-languageclient\": \"8.0.0-next.2\"\n             },\n             \"devDependencies\": {\n@@ -345,6 +343,7 @@\n             \"version\": \"6.0.2\",\n             \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz\",\n             \"integrity\": \"sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==\",\n+            \"dev\": true,\n             \"dependencies\": {\n                 \"debug\": \"4\"\n             },\n@@ -1274,18 +1273,11 @@\n                 \"node\": \">=12\"\n             }\n         },\n-        \"node_modules/data-uri-to-buffer\": {\n-            \"version\": \"4.0.0\",\n-            \"resolved\": \"https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.0.tgz\",\n-            \"integrity\": \"sha512-Vr3mLBA8qWmcuschSLAOogKgQ/Jwxulv3RNE4FXnYWRGujzrRWQI4m12fQqRkwX06C0KanhLr4hK+GydchZsaA==\",\n-            \"engines\": {\n-                \"node\": \">= 12\"\n-            }\n-        },\n         \"node_modules/debug\": {\n             \"version\": \"4.3.3\",\n             \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.3.tgz\",\n             \"integrity\": \"sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==\",\n+            \"dev\": true,\n             \"dependencies\": {\n                 \"ms\": \"2.1.2\"\n             },\n@@ -2059,27 +2051,6 @@\n                 \"pend\": \"~1.2.0\"\n             }\n         },\n-        \"node_modules/fetch-blob\": {\n-            \"version\": \"3.1.3\",\n-            \"resolved\": \"https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.1.3.tgz\",\n-            \"integrity\": \"sha512-ax1Y5I9w+9+JiM+wdHkhBoxew+zG4AJ2SvAD1v1szpddUIiPERVGBxrMcB2ZqW0Y3PP8bOWYv2zqQq1Jp2kqUQ==\",\n-            \"funding\": [\n-                {\n-                    \"type\": \"github\",\n-                    \"url\": \"https://github.com/sponsors/jimmywarting\"\n-                },\n-                {\n-                    \"type\": \"paypal\",\n-                    \"url\": \"https://paypal.me/jimmywarting\"\n-                }\n-            ],\n-            \"dependencies\": {\n-                \"web-streams-polyfill\": \"^3.0.3\"\n-            },\n-            \"engines\": {\n-                \"node\": \"^12.20 || >= 14.13\"\n-            }\n-        },\n         \"node_modules/file-entry-cache\": {\n             \"version\": \"6.0.1\",\n             \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz\",\n@@ -2123,17 +2094,6 @@\n             \"integrity\": \"sha512-8/sOawo8tJ4QOBX8YlQBMxL8+RLZfxMQOif9o0KUKTNTjMYElWPE0r/m5VNFxTRd0NSw8qSy8dajrwX4RYI1Hw==\",\n             \"dev\": true\n         },\n-        \"node_modules/formdata-polyfill\": {\n-            \"version\": \"4.0.10\",\n-            \"resolved\": \"https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz\",\n-            \"integrity\": \"sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==\",\n-            \"dependencies\": {\n-                \"fetch-blob\": \"^3.1.2\"\n-            },\n-            \"engines\": {\n-                \"node\": \">=12.20.0\"\n-            }\n-        },\n         \"node_modules/fs-constants\": {\n             \"version\": \"1.0.0\",\n             \"resolved\": \"https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz\",\n@@ -2403,6 +2363,7 @@\n             \"version\": \"5.0.0\",\n             \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz\",\n             \"integrity\": \"sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==\",\n+            \"dev\": true,\n             \"dependencies\": {\n                 \"agent-base\": \"6\",\n                 \"debug\": \"4\"\n@@ -2770,7 +2731,8 @@\n         \"node_modules/ms\": {\n             \"version\": \"2.1.2\",\n             \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n-            \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\"\n+            \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\n+            \"dev\": true\n         },\n         \"node_modules/mute-stream\": {\n             \"version\": \"0.0.8\",\n@@ -2814,23 +2776,6 @@\n             \"integrity\": \"sha512-mmcei9JghVNDYydghQmeDX8KoAm0FAiYyIcUt/N4nhyAipB17pllZQDOJD2fotxABnt4Mdz+dKTO7eftLg4d0A==\",\n             \"dev\": true\n         },\n-        \"node_modules/node-fetch\": {\n-            \"version\": \"3.1.0\",\n-            \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-3.1.0.tgz\",\n-            \"integrity\": \"sha512-QU0WbIfMUjd5+MUzQOYhenAazakV7Irh1SGkWCsRzBwvm4fAhzEUaHMJ6QLP7gWT6WO9/oH2zhKMMGMuIrDyKw==\",\n-            \"dependencies\": {\n-                \"data-uri-to-buffer\": \"^4.0.0\",\n-                \"fetch-blob\": \"^3.1.2\",\n-                \"formdata-polyfill\": \"^4.0.10\"\n-            },\n-            \"engines\": {\n-                \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n-            },\n-            \"funding\": {\n-                \"type\": \"opencollective\",\n-                \"url\": \"https://opencollective.com/node-fetch\"\n-            }\n-        },\n         \"node_modules/npmlog\": {\n             \"version\": \"4.1.2\",\n             \"resolved\": \"https://registry.npmjs.org/npmlog/-/npmlog-4.1.2.tgz\",\n@@ -3866,14 +3811,6 @@\n             \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.3.tgz\",\n             \"integrity\": \"sha512-VQcXnhKYxUW6OiRMhG++SzmZYMJwusXknJGd+FfdOnS1yHAo734OHyR0e2eEHDlv0/oWc8RZPgx/VKSKyondVg==\"\n         },\n-        \"node_modules/web-streams-polyfill\": {\n-            \"version\": \"3.2.0\",\n-            \"resolved\": \"https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.0.tgz\",\n-            \"integrity\": \"sha512-EqPmREeOzttaLRm5HS7io98goBgZ7IVz79aDvqjD0kYXLtFZTc0T/U6wHTPKyIjb+MdN7DFIIX6hgdBEpWmfPA==\",\n-            \"engines\": {\n-                \"node\": \">= 8\"\n-            }\n-        },\n         \"node_modules/which\": {\n             \"version\": \"2.0.2\",\n             \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n@@ -4170,6 +4107,7 @@\n             \"version\": \"6.0.2\",\n             \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz\",\n             \"integrity\": \"sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==\",\n+            \"dev\": true,\n             \"requires\": {\n                 \"debug\": \"4\"\n             }\n@@ -4874,15 +4812,11 @@\n                 \"d3-transition\": \"2 - 3\"\n             }\n         },\n-        \"data-uri-to-buffer\": {\n-            \"version\": \"4.0.0\",\n-            \"resolved\": \"https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.0.tgz\",\n-            \"integrity\": \"sha512-Vr3mLBA8qWmcuschSLAOogKgQ/Jwxulv3RNE4FXnYWRGujzrRWQI4m12fQqRkwX06C0KanhLr4hK+GydchZsaA==\"\n-        },\n         \"debug\": {\n             \"version\": \"4.3.3\",\n             \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.3.tgz\",\n             \"integrity\": \"sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==\",\n+            \"dev\": true,\n             \"requires\": {\n                 \"ms\": \"2.1.2\"\n             }\n@@ -5434,14 +5368,6 @@\n                 \"pend\": \"~1.2.0\"\n             }\n         },\n-        \"fetch-blob\": {\n-            \"version\": \"3.1.3\",\n-            \"resolved\": \"https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.1.3.tgz\",\n-            \"integrity\": \"sha512-ax1Y5I9w+9+JiM+wdHkhBoxew+zG4AJ2SvAD1v1szpddUIiPERVGBxrMcB2ZqW0Y3PP8bOWYv2zqQq1Jp2kqUQ==\",\n-            \"requires\": {\n-                \"web-streams-polyfill\": \"^3.0.3\"\n-            }\n-        },\n         \"file-entry-cache\": {\n             \"version\": \"6.0.1\",\n             \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz\",\n@@ -5476,14 +5402,6 @@\n             \"integrity\": \"sha512-8/sOawo8tJ4QOBX8YlQBMxL8+RLZfxMQOif9o0KUKTNTjMYElWPE0r/m5VNFxTRd0NSw8qSy8dajrwX4RYI1Hw==\",\n             \"dev\": true\n         },\n-        \"formdata-polyfill\": {\n-            \"version\": \"4.0.10\",\n-            \"resolved\": \"https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz\",\n-            \"integrity\": \"sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==\",\n-            \"requires\": {\n-                \"fetch-blob\": \"^3.1.2\"\n-            }\n-        },\n         \"fs-constants\": {\n             \"version\": \"1.0.0\",\n             \"resolved\": \"https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz\",\n@@ -5696,6 +5614,7 @@\n             \"version\": \"5.0.0\",\n             \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz\",\n             \"integrity\": \"sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==\",\n+            \"dev\": true,\n             \"requires\": {\n                 \"agent-base\": \"6\",\n                 \"debug\": \"4\"\n@@ -5978,7 +5897,8 @@\n         \"ms\": {\n             \"version\": \"2.1.2\",\n             \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n-            \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\"\n+            \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\n+            \"dev\": true\n         },\n         \"mute-stream\": {\n             \"version\": \"0.0.8\",\n@@ -6021,16 +5941,6 @@\n             \"integrity\": \"sha512-mmcei9JghVNDYydghQmeDX8KoAm0FAiYyIcUt/N4nhyAipB17pllZQDOJD2fotxABnt4Mdz+dKTO7eftLg4d0A==\",\n             \"dev\": true\n         },\n-        \"node-fetch\": {\n-            \"version\": \"3.1.0\",\n-            \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-3.1.0.tgz\",\n-            \"integrity\": \"sha512-QU0WbIfMUjd5+MUzQOYhenAazakV7Irh1SGkWCsRzBwvm4fAhzEUaHMJ6QLP7gWT6WO9/oH2zhKMMGMuIrDyKw==\",\n-            \"requires\": {\n-                \"data-uri-to-buffer\": \"^4.0.0\",\n-                \"fetch-blob\": \"^3.1.2\",\n-                \"formdata-polyfill\": \"^4.0.10\"\n-            }\n-        },\n         \"npmlog\": {\n             \"version\": \"4.1.2\",\n             \"resolved\": \"https://registry.npmjs.org/npmlog/-/npmlog-4.1.2.tgz\",\n@@ -6827,11 +6737,6 @@\n             \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.3.tgz\",\n             \"integrity\": \"sha512-VQcXnhKYxUW6OiRMhG++SzmZYMJwusXknJGd+FfdOnS1yHAo734OHyR0e2eEHDlv0/oWc8RZPgx/VKSKyondVg==\"\n         },\n-        \"web-streams-polyfill\": {\n-            \"version\": \"3.2.0\",\n-            \"resolved\": \"https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.0.tgz\",\n-            \"integrity\": \"sha512-EqPmREeOzttaLRm5HS7io98goBgZ7IVz79aDvqjD0kYXLtFZTc0T/U6wHTPKyIjb+MdN7DFIIX6hgdBEpWmfPA==\"\n-        },\n         \"which\": {\n             \"version\": \"2.0.2\",\n             \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\","}, {"sha": "550b28e1cdb2aea14ce708882bc2a08f46d06e64", "filename": "editors/code/package.json", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -36,8 +36,6 @@\n         \"test\": \"node ./out/tests/runTests.js\"\n     },\n     \"dependencies\": {\n-        \"https-proxy-agent\": \"^5.0.0\",\n-        \"node-fetch\": \"^3.0.3\",\n         \"vscode-languageclient\": \"8.0.0-next.2\",\n         \"d3\": \"^7.2.0\",\n         \"d3-graphviz\": \"^4.0.0\"\n@@ -305,24 +303,6 @@\n                     \"default\": true,\n                     \"description\": \"Whether inlay hints font size should be smaller than editor's font size.\"\n                 },\n-                \"rust-analyzer.updates.channel\": {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"stable\",\n-                        \"nightly\"\n-                    ],\n-                    \"default\": \"stable\",\n-                    \"markdownEnumDescriptions\": [\n-                        \"`stable` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general.\",\n-                        \"`nightly` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**.\"\n-                    ],\n-                    \"markdownDescription\": \"Choose `nightly` updates to get the latest features and bug fixes every day. While `stable` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs.\"\n-                },\n-                \"rust-analyzer.updates.askBeforeDownload\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"description\": \"Whether to ask for permission before downloading any files from the Internet.\"\n-                },\n                 \"rust-analyzer.server.path\": {\n                     \"type\": [\n                         \"null\","}, {"sha": "cdbaa67fe22cdb65fb7752cfcb108ed6d073c8fd", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -8,11 +8,6 @@ const NIGHTLY_TAG = \"nightly\";\n \n export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string; env: Record<string, string> }[];\n \n-export class ProxySettings {\n-    proxy?: string = undefined;\n-    strictSSL: boolean = true;\n-}\n-\n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n \n@@ -24,7 +19,6 @@ export class Config {\n         \"procMacro\",\n         \"files\",\n         \"highlighting\",\n-        \"updates.channel\",\n         \"lens\", // works as lens.*\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n@@ -36,11 +30,9 @@ export class Config {\n     } = vscode.extensions.getExtension(this.extensionId)!.packageJSON;\n \n     readonly globalStorageUri: vscode.Uri;\n-    readonly installUri: vscode.Uri;\n \n     constructor(ctx: vscode.ExtensionContext) {\n         this.globalStorageUri = ctx.globalStorageUri;\n-        this.installUri = ctx.extensionUri;\n         vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n         this.refreshLogging();\n     }\n@@ -103,21 +95,7 @@ export class Config {\n         return this.get<null | string>(\"server.path\") ?? this.get<null | string>(\"serverPath\");\n     }\n     get serverExtraEnv() { return this.get<Env | null>(\"server.extraEnv\") ?? {}; }\n-    get channel() { return this.get<UpdatesChannel>(\"updates.channel\"); }\n-    get askBeforeDownload() { return this.get<boolean>(\"updates.askBeforeDownload\"); }\n     get traceExtension() { return this.get<boolean>(\"trace.extension\"); }\n-    get proxySettings(): ProxySettings {\n-        const proxy = vscode\n-            .workspace\n-            .getConfiguration('http')\n-            .get<null | string>(\"proxy\")! || process.env[\"https_proxy\"] || process.env[\"HTTPS_PROXY\"];\n-        const strictSSL = vscode.workspace.getConfiguration(\"http\").get<boolean>(\"proxyStrictSSL\") ?? true;\n-\n-        return {\n-            proxy: proxy,\n-            strictSSL: strictSSL,\n-        };\n-    }\n \n     get inlayHints() {\n         return {"}, {"sha": "df7580b9bc524b05f1a6afc8a33aa404cd637f7f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 37, "deletions": 255, "changes": 292, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -5,12 +5,11 @@ import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n import { Ctx } from './ctx';\n import { Config } from './config';\n-import { log, assert, isValidExecutable, isRustDocument } from './util';\n+import { log, isValidExecutable, isRustDocument } from './util';\n import { PersistentState } from './persistent_state';\n-import { fetchRelease, download } from './net';\n import { activateTaskProvider } from './tasks';\n import { setContextValue } from './util';\n-import { exec, spawnSync } from 'child_process';\n+import { exec } from 'child_process';\n \n let ctx: Ctx | undefined;\n \n@@ -28,14 +27,9 @@ export async function activate(context: vscode.ExtensionContext) {\n async function tryActivate(context: vscode.ExtensionContext) {\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n-    const serverPath = await bootstrap(config, state).catch(err => {\n+    const serverPath = await bootstrap(context, config, state).catch(err => {\n         let message = \"bootstrap error. \";\n \n-        if (err.code === \"EBUSY\" || err.code === \"ETXTBSY\" || err.code === \"EPERM\") {\n-            message += \"Other vscode windows might be using rust-analyzer, \";\n-            message += \"you should close them and reload this window to retry. \";\n-        }\n-\n         message += 'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n         message += 'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n \n@@ -111,10 +105,6 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n         await activate(context).catch(log.error);\n     });\n \n-    ctx.registerCommand('updateGithubToken', ctx => async () => {\n-        await queryForGithubToken(new PersistentState(ctx.globalState));\n-    });\n-\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('memoryUsage', commands.memoryUsage);\n     ctx.registerCommand('shuffleCrateGraph', commands.shuffleCrateGraph);\n@@ -161,99 +151,8 @@ export async function deactivate() {\n     ctx = undefined;\n }\n \n-async function bootstrap(config: Config, state: PersistentState): Promise<string> {\n-    await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n-\n-    if (!config.currentExtensionIsNightly) {\n-        await state.updateNightlyReleaseId(undefined);\n-    }\n-    await bootstrapExtension(config, state);\n-    const path = await bootstrapServer(config, state);\n-    return path;\n-}\n-\n-async function bootstrapExtension(config: Config, state: PersistentState): Promise<void> {\n-    if (config.package.releaseTag === null) return;\n-    if (config.channel === \"stable\") {\n-        if (config.currentExtensionIsNightly) {\n-            void vscode.window.showWarningMessage(\n-                `You are running a nightly version of rust-analyzer extension. ` +\n-                `To switch to stable, uninstall the extension and re-install it from the marketplace`\n-            );\n-        }\n-        return;\n-    };\n-    if (serverPath(config)) return;\n-\n-    const now = Date.now();\n-    const isInitialNightlyDownload = state.nightlyReleaseId === undefined;\n-    if (config.currentExtensionIsNightly) {\n-        // Check if we should poll github api for the new nightly version\n-        // if we haven't done it during the past hour\n-        const lastCheck = state.lastCheck;\n-\n-        const anHour = 60 * 60 * 1000;\n-        const shouldCheckForNewNightly = isInitialNightlyDownload || (now - (lastCheck ?? 0)) > anHour;\n-\n-        if (!shouldCheckForNewNightly) return;\n-    }\n-\n-    const latestNightlyRelease = await downloadWithRetryDialog(state, async () => {\n-        return await fetchRelease(\"nightly\", state.githubToken, config.proxySettings);\n-    }).catch(async (e) => {\n-        log.error(e);\n-        if (isInitialNightlyDownload) {\n-            await vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly: ${e}`);\n-        }\n-        return;\n-    });\n-    if (latestNightlyRelease === undefined) {\n-        if (isInitialNightlyDownload) {\n-            await vscode.window.showErrorMessage(\"Failed to download rust-analyzer nightly: empty release contents returned\");\n-        }\n-        return;\n-    }\n-    if (config.currentExtensionIsNightly && latestNightlyRelease.id === state.nightlyReleaseId) return;\n-\n-    const userResponse = await vscode.window.showInformationMessage(\n-        \"New version of rust-analyzer (nightly) is available (requires reload).\",\n-        \"Update\"\n-    );\n-    if (userResponse !== \"Update\") return;\n-\n-    let arch = process.arch;\n-    if (arch === \"ia32\") {\n-        arch = \"x64\";\n-    }\n-    let platform = process.platform as string;\n-    if (platform === \"linux\" && isMusl()) {\n-        platform = \"alpine\";\n-    }\n-    const artifactName = `rust-analyzer-${platform}-${arch}.vsix`;\n-\n-    const artifact = latestNightlyRelease.assets.find(artifact => artifact.name === artifactName);\n-    assert(!!artifact, `Bad release: ${JSON.stringify(latestNightlyRelease)}`);\n-    const dest = vscode.Uri.joinPath(config.globalStorageUri, \"rust-analyzer.vsix\");\n-\n-    await downloadWithRetryDialog(state, async () => {\n-        await download({\n-            url: artifact.browser_download_url,\n-            dest,\n-            progressTitle: \"Downloading rust-analyzer extension\",\n-            proxySettings: config.proxySettings,\n-        });\n-    });\n-\n-    await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", dest);\n-    await vscode.workspace.fs.delete(dest);\n-\n-    await state.updateNightlyReleaseId(latestNightlyRelease.id);\n-    await state.updateLastCheck(now);\n-    await vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n-}\n-\n-async function bootstrapServer(config: Config, state: PersistentState): Promise<string> {\n-    const path = await getServer(config, state);\n+async function bootstrap(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string> {\n+    const path = await getServer(context, config, state);\n     if (!path) {\n         throw new Error(\n             \"Rust Analyzer Language Server is not available. \" +\n@@ -318,7 +217,7 @@ async function patchelf(dest: vscode.Uri): Promise<void> {\n     );\n }\n \n-async function getServer(config: Config, state: PersistentState): Promise<string | undefined> {\n+async function getServer(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string | undefined> {\n     const explicitPath = serverPath(config);\n     if (explicitPath) {\n         if (explicitPath.startsWith(\"~/\")) {\n@@ -328,85 +227,39 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     };\n     if (config.package.releaseTag === null) return \"rust-analyzer\";\n \n-    const platforms: { [key: string]: string } = {\n-        \"ia32 win32\": \"x86_64-pc-windows-msvc\",\n-        \"x64 win32\": \"x86_64-pc-windows-msvc\",\n-        \"x64 linux\": \"x86_64-unknown-linux-gnu\",\n-        \"x64 darwin\": \"x86_64-apple-darwin\",\n-        \"arm64 win32\": \"aarch64-pc-windows-msvc\",\n-        \"arm64 linux\": \"aarch64-unknown-linux-gnu\",\n-        \"arm64 darwin\": \"aarch64-apple-darwin\",\n-    };\n-    let platform = platforms[`${process.arch} ${process.platform}`];\n-    if (platform === undefined) {\n-        await vscode.window.showErrorMessage(\n-            \"Unfortunately we don't ship binaries for your platform yet. \" +\n-            \"You need to manually clone rust-analyzer repository and \" +\n-            \"run `cargo xtask install --server` to build the language server from sources. \" +\n-            \"If you feel that your platform should be supported, please create an issue \" +\n-            \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n-            \"will consider it.\"\n-        );\n-        return undefined;\n-    }\n-    if (platform === \"x86_64-unknown-linux-gnu\" && isMusl()) {\n-        platform = \"x86_64-unknown-linux-musl\";\n-    }\n-    const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";\n-    const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer-${platform}${ext}`);\n-    const bundled = vscode.Uri.joinPath(config.installUri, \"server\", `rust-analyzer${ext}`);\n+    const ext = process.platform === \"win32\" ? \".exe\" : \"\";\n+    const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n     const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n-    let exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n     if (bundledExists) {\n-        await state.updateServerVersion(config.package.version);\n-        if (!await isNixOs()) {\n-            return bundled.fsPath;\n-        }\n-        if (!exists) {\n-            await vscode.workspace.fs.copy(bundled, dest);\n-            await patchelf(dest);\n-            exists = true;\n+        let server = bundled;\n+        if (await isNixOs()) {\n+            await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n+            const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer${ext}`);\n+            let exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n+            if (exists && config.package.version !== state.serverVersion) {\n+                await vscode.workspace.fs.delete(dest);\n+                exists = false;\n+            }\n+            if (!exists) {\n+                await vscode.workspace.fs.copy(bundled, dest);\n+                await patchelf(dest);\n+                server = dest;\n+            }\n         }\n-    }\n-    if (!exists) {\n-        await state.updateServerVersion(undefined);\n-    }\n-\n-    if (state.serverVersion === config.package.version) return dest.fsPath;\n-\n-    if (config.askBeforeDownload) {\n-        const userResponse = await vscode.window.showInformationMessage(\n-            `Language server version ${config.package.version} for rust-analyzer is not installed.`,\n-            \"Download now\"\n-        );\n-        if (userResponse !== \"Download now\") return dest.fsPath;\n-    }\n-\n-    const releaseTag = config.package.releaseTag;\n-    const release = await downloadWithRetryDialog(state, async () => {\n-        return await fetchRelease(releaseTag, state.githubToken, config.proxySettings);\n-    });\n-    const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n-    assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n-\n-    await downloadWithRetryDialog(state, async () => {\n-        await download({\n-            url: artifact.browser_download_url,\n-            dest,\n-            progressTitle: \"Downloading rust-analyzer server\",\n-            gunzip: true,\n-            mode: 0o755,\n-            proxySettings: config.proxySettings,\n-        });\n-    });\n-\n-    // Patching executable if that's NixOS.\n-    if (await isNixOs()) {\n-        await patchelf(dest);\n+        await state.updateServerVersion(config.package.version);\n+        return server.fsPath;\n     }\n \n-    await state.updateServerVersion(config.package.version);\n-    return dest.fsPath;\n+    await state.updateServerVersion(undefined);\n+    await vscode.window.showErrorMessage(\n+        \"Unfortunately we don't ship binaries for your platform yet. \" +\n+        \"You need to manually clone the rust-analyzer repository and \" +\n+        \"run `cargo xtask install --server` to build the language server from sources. \" +\n+        \"If you feel that your platform should be supported, please create an issue \" +\n+        \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n+        \"will consider it.\"\n+    );\n+    return undefined;\n }\n \n function serverPath(config: Config): string | null {\n@@ -422,85 +275,14 @@ async function isNixOs(): Promise<boolean> {\n     }\n }\n \n-function isMusl(): boolean {\n-    // We can detect Alpine by checking `/etc/os-release` but not Void Linux musl.\n-    // Instead, we run `ldd` since it advertises the libc which it belongs to.\n-    const res = spawnSync(\"ldd\", [\"--version\"]);\n-    return res.stderr != null && res.stderr.indexOf(\"musl libc\") >= 0;\n-}\n-\n-async function downloadWithRetryDialog<T>(state: PersistentState, downloadFunc: () => Promise<T>): Promise<T> {\n-    while (true) {\n-        try {\n-            return await downloadFunc();\n-        } catch (e) {\n-            const selected = await vscode.window.showErrorMessage(\"Failed to download: \" + e.message, {}, {\n-                title: \"Update Github Auth Token\",\n-                updateToken: true,\n-            }, {\n-                title: \"Retry download\",\n-                retry: true,\n-            }, {\n-                title: \"Dismiss\",\n-            });\n-\n-            if (selected?.updateToken) {\n-                await queryForGithubToken(state);\n-                continue;\n-            } else if (selected?.retry) {\n-                continue;\n-            }\n-            throw e;\n-        };\n-    }\n-}\n-\n-async function queryForGithubToken(state: PersistentState): Promise<void> {\n-    const githubTokenOptions: vscode.InputBoxOptions = {\n-        value: state.githubToken,\n-        password: true,\n-        prompt: `\n-            This dialog allows to store a Github authorization token.\n-            The usage of an authorization token will increase the rate\n-            limit on the use of Github APIs and can thereby prevent getting\n-            throttled.\n-            Auth tokens can be created at https://github.com/settings/tokens`,\n-    };\n-\n-    const newToken = await vscode.window.showInputBox(githubTokenOptions);\n-    if (newToken === undefined) {\n-        // The user aborted the dialog => Do not update the stored token\n-        return;\n-    }\n-\n-    if (newToken === \"\") {\n-        log.info(\"Clearing github token\");\n-        await state.updateGithubToken(undefined);\n-    } else {\n-        log.info(\"Storing new github token\");\n-        await state.updateGithubToken(newToken);\n-    }\n-}\n-\n function warnAboutExtensionConflicts() {\n-    const conflicting = [\n-        [\"rust-analyzer\", \"matklad.rust-analyzer\"],\n-        [\"Rust\", \"rust-lang.rust\"],\n-        [\"Rust\", \"kalitaalexey.vscode-rust\"],\n-    ];\n-\n-    const found = conflicting.filter(\n-        nameId => vscode.extensions.getExtension(nameId[1]) !== undefined);\n-\n-    if (found.length > 1) {\n-        const fst = found[0];\n-        const sec = found[1];\n+    if (vscode.extensions.getExtension(\"rust-lang.rust\")) {\n         vscode.window.showWarningMessage(\n-            `You have both the ${fst[0]} (${fst[1]}) and ${sec[0]} (${sec[1]}) ` +\n+            `You have both the rust-analyzer (matklad.rust-analyzer) and Rust (rust-lang.rust) ` +\n             \"plugins enabled. These are known to conflict and cause various functions of \" +\n             \"both plugins to not work correctly. You should disable one of them.\", \"Got it\")\n             .then(() => { }, console.error);\n-    };\n+    }\n }\n \n /**"}, {"sha": "bd1bb5f8a8a817500a569504826fcaf5cf6d54d1", "filename": "editors/code/src/net.ts", "status": "removed", "additions": 0, "deletions": 228, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e", "patch": "@@ -1,228 +0,0 @@\n-import fetch from \"node-fetch\";\n-var HttpsProxyAgent = require('https-proxy-agent');\n-\n-import * as vscode from \"vscode\";\n-import * as stream from \"stream\";\n-import * as crypto from \"crypto\";\n-import * as fs from \"fs\";\n-import * as zlib from \"zlib\";\n-import * as util from \"util\";\n-import * as path from \"path\";\n-import { log, assert } from \"./util\";\n-import * as https from \"https\";\n-import { ProxySettings } from \"./config\";\n-\n-const pipeline = util.promisify(stream.pipeline);\n-\n-const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n-const OWNER = \"rust-analyzer\";\n-const REPO = \"rust-analyzer\";\n-\n-function makeHttpAgent(proxy: string | null | undefined, options?: https.AgentOptions) {\n-    if (proxy) {\n-        return new HttpsProxyAgent({ ...options, ...new URL(proxy) });\n-    } else {\n-        return new https.Agent(options);\n-    }\n-}\n-\n-export async function fetchRelease(\n-    releaseTag: string,\n-    githubToken: string | null | undefined,\n-    proxySettings: ProxySettings,\n-): Promise<GithubRelease> {\n-\n-    const apiEndpointPath = `/repos/${OWNER}/${REPO}/releases/tags/${releaseTag}`;\n-\n-    const requestUrl = GITHUB_API_ENDPOINT_URL + apiEndpointPath;\n-\n-    log.debug(\"Issuing request for released artifacts metadata to\", requestUrl);\n-\n-    const headers: Record<string, string> = { Accept: \"application/vnd.github.v3+json\" };\n-    if (githubToken != null) {\n-        headers.Authorization = \"token \" + githubToken;\n-    }\n-\n-    const response = await (() => {\n-        if (proxySettings.proxy) {\n-            log.debug(`Fetching release metadata via proxy: ${proxySettings.proxy}`);\n-        }\n-        const options: any = {};\n-        if (proxySettings.strictSSL) {\n-            options[\"rejectUnauthorized\"] = false;\n-        }\n-        const agent = makeHttpAgent(proxySettings.proxy, options);\n-        return fetch(requestUrl, { headers: headers, agent: agent });\n-    })();\n-\n-    if (!response.ok) {\n-        log.error(\"Error fetching artifact release info\", {\n-            requestUrl,\n-            releaseTag,\n-            response: {\n-                headers: response.headers,\n-                status: response.status,\n-                body: await response.text(),\n-            }\n-        });\n-\n-        throw new Error(\n-            `Got response ${response.status} when trying to fetch ` +\n-            `release info for ${releaseTag} release`\n-        );\n-    }\n-\n-    // We skip runtime type checks for simplicity (here we cast from `unknown` to `GithubRelease`)\n-    const release = await response.json() as GithubRelease;\n-    return release;\n-}\n-\n-// We omit declaration of tremendous amount of fields that we are not using here\n-export interface GithubRelease {\n-    name: string;\n-    id: number;\n-    // eslint-disable-next-line camelcase\n-    published_at: string;\n-    assets: Array<{\n-        name: string;\n-        // eslint-disable-next-line camelcase\n-        browser_download_url: vscode.Uri;\n-    }>;\n-}\n-\n-interface DownloadOpts {\n-    progressTitle: string;\n-    url: vscode.Uri;\n-    dest: vscode.Uri;\n-    mode?: number;\n-    gunzip?: boolean;\n-    proxySettings: ProxySettings;\n-}\n-\n-export async function download(opts: DownloadOpts) {\n-    // Put artifact into a temporary file (in the same dir for simplicity)\n-    // to prevent partially downloaded files when user kills vscode\n-    // This also avoids overwriting running executables\n-    const randomHex = crypto.randomBytes(5).toString(\"hex\");\n-    const rawDest = path.parse(opts.dest.fsPath);\n-    const oldServerPath = vscode.Uri.joinPath(vscode.Uri.file(rawDest.dir), `${rawDest.name}-stale-${randomHex}${rawDest.ext}`);\n-    const tempFilePath = vscode.Uri.joinPath(vscode.Uri.file(rawDest.dir), `${rawDest.name}${randomHex}`);\n-\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            cancellable: false,\n-            title: opts.progressTitle\n-        },\n-        async (progress, _cancellationToken) => {\n-            let lastPercentage = 0;\n-            await downloadFile(opts.url, tempFilePath, opts.mode, !!opts.gunzip, opts.proxySettings, (readBytes, totalBytes) => {\n-                const newPercentage = Math.round((readBytes / totalBytes) * 100);\n-                if (newPercentage !== lastPercentage) {\n-                    progress.report({\n-                        message: `${newPercentage.toFixed(0)}%`,\n-                        increment: newPercentage - lastPercentage\n-                    });\n-\n-                    lastPercentage = newPercentage;\n-                }\n-            });\n-        }\n-    );\n-\n-    // Try to rename a running server to avoid EPERM on Windows\n-    // NB: this can lead to issues if a running Code instance tries to restart the server.\n-    try {\n-        await vscode.workspace.fs.rename(opts.dest, oldServerPath, { overwrite: true });\n-        log.info(`Renamed old server binary ${opts.dest.fsPath} to ${oldServerPath.fsPath}`);\n-    } catch (err) {\n-        const fsErr = err as vscode.FileSystemError;\n-\n-        // This is supposed to return `FileNotFound` (spelled as `EntryNotFound`)\n-        // but instead `code` is `Unknown` and `name` is `EntryNotFound (FileSystemError) (FileSystemError)`.\n-        // https://github.com/rust-analyzer/rust-analyzer/pull/10222\n-        if (!fsErr.code || fsErr.code !== \"EntryNotFound\" && fsErr.name.indexOf(\"EntryNotFound\") === -1) {\n-            log.error(`Cannot rename existing server instance: ${err}\"`);\n-        }\n-    }\n-    try {\n-        await vscode.workspace.fs.rename(tempFilePath, opts.dest, { overwrite: true });\n-    } catch (err) {\n-        log.error(`Cannot update server binary: ${err}`);\n-    }\n-\n-    // Now try to remove any stale server binaries\n-    const serverDir = vscode.Uri.file(rawDest.dir);\n-    try {\n-        const entries = await vscode.workspace.fs.readDirectory(serverDir);\n-        for (const [entry, _] of entries) {\n-            try {\n-                if (entry.includes(`${rawDest.name}-stale-`)) {\n-                    const uri = vscode.Uri.joinPath(serverDir, entry);\n-                    try {\n-                        await vscode.workspace.fs.delete(uri);\n-                        log.info(`Removed old server binary ${uri.fsPath}`);\n-                    } catch (err) {\n-                        log.error(`Unable to remove old server binary ${uri.fsPath}`);\n-                    }\n-                }\n-            } catch (err) {\n-                log.error(`Unable to parse ${entry}`);\n-            }\n-        }\n-    } catch (err) {\n-        log.error(`Unable to enumerate contents of ${serverDir.fsPath}`);\n-    }\n-}\n-\n-async function downloadFile(\n-    url: vscode.Uri,\n-    destFilePath: vscode.Uri,\n-    mode: number | undefined,\n-    gunzip: boolean,\n-    proxySettings: ProxySettings,\n-    onProgress: (readBytes: number, totalBytes: number) => void\n-): Promise<void> {\n-    const urlString = url.toString();\n-\n-    const res = await (() => {\n-        if (proxySettings.proxy) {\n-            log.debug(`Downloading ${urlString} via proxy: ${proxySettings.proxy}`);\n-        }\n-        const options: any = {};\n-        if (proxySettings.strictSSL) {\n-            options[\"rejectUnauthorized\"] = false;\n-        }\n-        const agent = makeHttpAgent(proxySettings.proxy, options);\n-        return fetch(urlString, { agent: agent });\n-    })();\n-\n-    if (!res.ok) {\n-        log.error(\"Error\", res.status, \"while downloading file from\", urlString);\n-        log.error({ body: await res.text(), headers: res.headers });\n-\n-        throw new Error(`Got response ${res.status} when trying to download a file.`);\n-    }\n-\n-    if (!res.body) {\n-        log.error(\"Empty body while downloading file from\", urlString);\n-        log.error({ headers: res.headers });\n-        throw new Error(`Got empty body when trying to download a file.`);\n-    }\n-\n-    const totalBytes = Number(res.headers.get('content-length'));\n-    assert(!Number.isNaN(totalBytes), \"Sanity check of content-length protocol\");\n-\n-    log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", urlString, \"to\", destFilePath.fsPath);\n-\n-    let readBytes = 0;\n-    res.body.on(\"data\", (chunk: Buffer) => {\n-        readBytes += chunk.length;\n-        onProgress(readBytes, totalBytes);\n-    });\n-\n-    const destFileStream = fs.createWriteStream(destFilePath.fsPath, { mode });\n-    const srcStream = gunzip ? res.body.pipe(zlib.createGunzip()) : res.body;\n-\n-    await pipeline(srcStream, destFileStream);\n-}"}, {"sha": "3e86ed1e32317b3adff1151917a23e434c91ca92", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cb0e270c026987e8863894a96fd19d33d7db1ef1/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=cb0e270c026987e8863894a96fd19d33d7db1ef1", "patch": "@@ -3,50 +3,18 @@ import { log } from './util';\n \n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {\n-        const { lastCheck, nightlyReleaseId, serverVersion } = this;\n-        log.info(\"PersistentState:\", { lastCheck, nightlyReleaseId, serverVersion });\n-    }\n-\n-    /**\n-     * Used to check for *nightly* updates once an hour.\n-     */\n-    get lastCheck(): number | undefined {\n-        return this.globalState.get(\"lastCheck\");\n-    }\n-    async updateLastCheck(value: number) {\n-        await this.globalState.update(\"lastCheck\", value);\n-    }\n-\n-    /**\n-     * Release id of the *nightly* extension.\n-     * Used to check if we should update.\n-     */\n-    get nightlyReleaseId(): number | undefined {\n-        return this.globalState.get(\"releaseId\");\n-    }\n-    async updateNightlyReleaseId(value: number | undefined) {\n-        await this.globalState.update(\"releaseId\", value);\n+        const { serverVersion } = this;\n+        log.info(\"PersistentState:\", { serverVersion });\n     }\n \n     /**\n      * Version of the extension that installed the server.\n-     * Used to check if we need to update the server.\n+     * Used to check if we need to run patchelf again on NixOS.\n      */\n     get serverVersion(): string | undefined {\n         return this.globalState.get(\"serverVersion\");\n     }\n     async updateServerVersion(value: string | undefined) {\n         await this.globalState.update(\"serverVersion\", value);\n     }\n-\n-    /**\n-     * Github authorization token.\n-     * This is used for API requests against the Github API.\n-     */\n-    get githubToken(): string | undefined {\n-        return this.globalState.get(\"githubToken\");\n-    }\n-    async updateGithubToken(value: string | undefined) {\n-        await this.globalState.update(\"githubToken\", value);\n-    }\n }"}]}