{"sha": "d0623cf7bda44849ab5df78a06b22f9108cf821a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjIzY2Y3YmRhNDQ4NDlhYjVkZjc4YTA2YjIyZjkxMDhjZjgyMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-27T00:44:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-27T00:44:25Z"}, "message": "Auto merge of #36678 - TimNN:fix-dist, r=alexcrichton\n\nemit feature help in cheat mode (fix nightlies)\n\nThis should fix the `distcheck` failure in the latest nightly.\n\ncc #36539\n\nIt's probably not ideal to check the environment that often and the code ist duplicated from `librustc/session/config.rs` but this was the easiest fix I could think of.\n\nA cleaner solution would probably be to move the `unstable_features` from `Options` to `ParseSess` and change the `diag` parameter of `emit_feature_err` to take `ParseSess` instead of a `Handler`.", "tree": {"sha": "9cdc98941940328cb7208f074f8529b81c88d3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cdc98941940328cb7208f074f8529b81c88d3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0623cf7bda44849ab5df78a06b22f9108cf821a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0623cf7bda44849ab5df78a06b22f9108cf821a", "html_url": "https://github.com/rust-lang/rust/commit/d0623cf7bda44849ab5df78a06b22f9108cf821a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0623cf7bda44849ab5df78a06b22f9108cf821a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388c3f25f95c55add63d436a8e8bb207d003c63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/388c3f25f95c55add63d436a8e8bb207d003c63b", "html_url": "https://github.com/rust-lang/rust/commit/388c3f25f95c55add63d436a8e8bb207d003c63b"}, {"sha": "f0e1738e5188b53d6af809481bea58f578bfdbe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e1738e5188b53d6af809481bea58f578bfdbe2", "html_url": "https://github.com/rust-lang/rust/commit/f0e1738e5188b53d6af809481bea58f578bfdbe2"}], "stats": {"total": 157, "additions": 79, "deletions": 78}, "files": [{"sha": "ccab4279232b5f4e8b9b56412c77bea0175087da", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -411,8 +411,8 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                                                &feature, &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n-                    emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n-                                      &feature, span, GateIssue::Library(Some(issue)), &msg);\n+                    emit_feature_err(&self.tcx.sess.parse_sess, &feature, span,\n+                                     GateIssue::Library(Some(issue)), &msg);\n                 }\n             }\n             Some(&Stability { ref level, ref feature, .. }) => {"}, {"sha": "87f0c8b67a0ec93eddfcb622b56b4974e3825496", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -37,7 +37,6 @@ use std::collections::btree_map::Iter as BTreeMapIter;\n use std::collections::btree_map::Keys as BTreeMapKeysIter;\n use std::collections::btree_map::Values as BTreeMapValuesIter;\n \n-use std::env;\n use std::fmt;\n use std::hash::{Hasher, SipHasher};\n use std::iter::FromIterator;\n@@ -1525,27 +1524,12 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         crate_name: crate_name,\n         alt_std_name: None,\n         libs: libs,\n-        unstable_features: get_unstable_features_setting(),\n+        unstable_features: UnstableFeatures::from_environment(),\n         debug_assertions: debug_assertions,\n     },\n     cfg)\n }\n \n-pub fn get_unstable_features_setting() -> UnstableFeatures {\n-    // Whether this is a feature-staged build, i.e. on the beta or stable channel\n-    let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n-    // The secret key needed to get through the rustc build itself by\n-    // subverting the unstable features lints\n-    let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n-    // The matching key to the above, only known by the build system\n-    let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n-    match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n-        (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n-        (true, ..) => UnstableFeatures::Disallow,\n-        (false, ..) => UnstableFeatures::Allow\n-    }\n-}\n-\n pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n     for unparsed_crate_type in &list_list {\n@@ -1575,26 +1559,21 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n pub mod nightly_options {\n     use getopts;\n     use syntax::feature_gate::UnstableFeatures;\n-    use super::{ErrorOutputType, OptionStability, RustcOptGroup, get_unstable_features_setting};\n+    use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n     use session::{early_error, early_warn};\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build() && matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\")\n     }\n \n     pub fn is_nightly_build() -> bool {\n-        match get_unstable_features_setting() {\n-            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n-            _ => false,\n-        }\n+        UnstableFeatures::from_environment().is_nightly_build()\n     }\n \n     pub fn check_nightly_options(matches: &getopts::Matches, flags: &[RustcOptGroup]) {\n         let has_z_unstable_option = matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\");\n-        let really_allows_unstable_options = match get_unstable_features_setting() {\n-            UnstableFeatures::Disallow => false,\n-            _ => true,\n-        };\n+        let really_allows_unstable_options = UnstableFeatures::from_environment()\n+            .is_nightly_build();\n \n         for opt in flags.iter() {\n             if opt.stability == OptionStability::Stable {"}, {"sha": "5089af892859bca93e63c7922f077c05b9d19dda", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -73,7 +73,7 @@ use rustc_trans::back::write::{create_target_machine, RELOC_MODEL_ARGS, CODE_GEN\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n-use rustc::session::config::{get_unstable_features_setting, nightly_options};\n+use rustc::session::config::nightly_options;\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc_metadata::loader;\n@@ -649,10 +649,8 @@ impl RustcDefaultCalls {\n                     }\n                 }\n                 PrintRequest::Cfg => {\n-                    let allow_unstable_cfg = match get_unstable_features_setting() {\n-                        UnstableFeatures::Disallow => false,\n-                        _ => true,\n-                    };\n+                    let allow_unstable_cfg = UnstableFeatures::from_environment()\n+                        .is_nightly_build();\n \n                     for cfg in cfg {\n                         if !allow_unstable_cfg && GatedCfg::gate(&*cfg).is_some() {"}, {"sha": "0336c3063d83f69c0ec63315be60e62a17b745b4", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n             });\n             if any_static {\n                 if !self.sess.features.borrow().static_recursion {\n-                    emit_feature_err(&self.sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.sess.parse_sess,\n                                      \"static_recursion\",\n                                      *self.root_span,\n                                      GateIssue::Language,"}, {"sha": "3a9fb845190d2078a373beefbdd8583c1c20f83d", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -149,9 +149,9 @@ impl<'a> Resolver<'a> {\n \n     fn insert_custom_derive(&mut self, name: &str, ext: Rc<MultiItemModifier>, sp: Span) {\n         if !self.session.features.borrow().rustc_macro {\n-            let diagnostic = &self.session.parse_sess.span_diagnostic;\n+            let sess = &self.session.parse_sess;\n             let msg = \"loading custom derive macro crates is experimentally supported\";\n-            emit_feature_err(diagnostic, \"rustc_macro\", sp, feature_gate::GateIssue::Language, msg);\n+            emit_feature_err(sess, \"rustc_macro\", sp, feature_gate::GateIssue::Language, msg);\n         }\n         if self.derive_modes.insert(token::intern(name), ext).is_some() {\n             self.session.span_err(sp, &format!(\"cannot shadow existing derive mode `{}`\", name));"}, {"sha": "f5e289c33028e3010044b751c8ee4499cf5a9a3e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -795,7 +795,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // For now, require that parenthetical notation be used\n                 // only with `Fn()` etc.\n                 if !self.tcx().sess.features.borrow().unboxed_closures && trait_def.paren_sugar {\n-                    emit_feature_err(&self.tcx().sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.tcx().sess.parse_sess,\n                                      \"unboxed_closures\", span, GateIssue::Language,\n                                      \"\\\n                         the precise format of `Fn`-family traits' \\\n@@ -807,7 +807,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // For now, require that parenthetical notation be used\n                 // only with `Fn()` etc.\n                 if !self.tcx().sess.features.borrow().unboxed_closures && !trait_def.paren_sugar {\n-                    emit_feature_err(&self.tcx().sess.parse_sess.span_diagnostic,\n+                    emit_feature_err(&self.tcx().sess.parse_sess,\n                                      \"unboxed_closures\", span, GateIssue::Language,\n                                      \"\\\n                         parenthetical notation is only stable when used with `Fn`-family traits\");"}, {"sha": "543fdca84edf2620c99032c1b015bb321cec57c5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -3255,7 +3255,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some((def_id, variant)) = variant {\n             if variant.kind == ty::VariantKind::Tuple &&\n                     !self.tcx.sess.features.borrow().relaxed_adts {\n-                emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n+                emit_feature_err(&self.tcx.sess.parse_sess,\n                                  \"relaxed_adts\", span, GateIssue::Language,\n                                  \"tuple structs and variants in struct patterns are unstable\");\n             }"}, {"sha": "e9a1f650c9b2f30d4d5250960366cc29725e36ed", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -27,7 +27,6 @@\n #![allow(non_camel_case_types)]\n \n use libc;\n-use rustc::session::config::get_unstable_features_setting;\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::default::Default;\n@@ -478,13 +477,10 @@ impl LangString {\n         let mut data = LangString::all_false();\n         let mut allow_compile_fail = false;\n         let mut allow_error_code_check = false;\n-        match get_unstable_features_setting() {\n-            UnstableFeatures::Allow | UnstableFeatures::Cheat => {\n-                allow_compile_fail = true;\n-                allow_error_code_check = true;\n-            }\n-            _ => {},\n-        };\n+        if UnstableFeatures::from_environment().is_nightly_build() {\n+            allow_compile_fail = true;\n+            allow_error_code_check = true;\n+        }\n \n         let tokens = string.split(|c: char|\n             !(c == '_' || c == '-' || c.is_alphanumeric())"}, {"sha": "9c80f6e98c39c31d494dc2e940311c667a2f76fd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -58,7 +58,6 @@ use syntax::feature_gate::UnstableFeatures;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc::session::config::get_unstable_features_setting;\n use rustc::hir;\n use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n use rustc_data_structures::flock;\n@@ -1971,7 +1970,7 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     // FIXME(#24111): remove when `const_fn` is stabilized\n-    let vis_constness = match get_unstable_features_setting() {\n+    let vis_constness = match UnstableFeatures::from_environment() {\n         UnstableFeatures::Allow => f.constness,\n         _ => hir::Constness::NotConst\n     };\n@@ -2250,7 +2249,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n             }\n         };\n         // FIXME(#24111): remove when `const_fn` is stabilized\n-        let vis_constness = match get_unstable_features_setting() {\n+        let vis_constness = match UnstableFeatures::from_environment() {\n             UnstableFeatures::Allow => constness,\n             _ => hir::Constness::NotConst\n         };"}, {"sha": "1ab86cf7e8920fc4fe9cef6db4aedab43cd769bc", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -25,8 +25,7 @@ use rustc_lint;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n-use rustc::session::config::{get_unstable_features_setting, OutputType,\n-                             OutputTypes, Externs};\n+use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n@@ -35,6 +34,7 @@ use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::codemap::CodeMap;\n+use syntax::feature_gate::UnstableFeatures;\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -68,7 +68,7 @@ pub fn run(input: &str,\n         search_paths: libs.clone(),\n         crate_types: vec!(config::CrateTypeDylib),\n         externs: externs.clone(),\n-        unstable_features: get_unstable_features_setting(),\n+        unstable_features: UnstableFeatures::from_environment(),\n         ..config::basic_options().clone()\n     };\n \n@@ -197,7 +197,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n             .. config::basic_codegen_options()\n         },\n         test: as_test_harness,\n-        unstable_features: get_unstable_features_setting(),\n+        unstable_features: UnstableFeatures::from_environment(),\n         ..config::basic_options().clone()\n     };\n "}, {"sha": "78d047c7651f9aca90a5b29c226bfcf6b41d5e3e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -157,7 +157,7 @@ impl<'a> StripUnconfigured<'a> {\n         // flag the offending attributes\n         for attr in attrs.iter() {\n             if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n-                emit_feature_err(&self.sess.span_diagnostic,\n+                emit_feature_err(&self.sess,\n                                  \"stmt_expr_attributes\",\n                                  attr.span,\n                                  GateIssue::Language,"}, {"sha": "43c622189632a3eaa63880f36993b905683006a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Detect use of feature-gated or invalid attributes on macro invoations\n         // since they will not be detected after macro expansion.\n         for attr in attrs.iter() {\n-            feature_gate::check_attribute(&attr, &self.cx.parse_sess.span_diagnostic,\n+            feature_gate::check_attribute(&attr, &self.cx.parse_sess,\n                                           &self.cx.parse_sess.codemap(),\n                                           &self.cx.ecfg.features.unwrap());\n         }"}, {"sha": "b687e4f92be739805b8ce05800bca81b2862b4cd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -36,6 +36,7 @@ use parse::ParseSess;\n use parse::token::InternedString;\n \n use std::ascii::AsciiExt;\n+use std::env;\n \n macro_rules! setter {\n     ($field: ident) => {{\n@@ -679,16 +680,15 @@ impl GatedCfg {\n     pub fn check_and_emit(&self, sess: &ParseSess, features: &Features) {\n         let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n         if !has_feature(features) && !sess.codemap().span_allows_unstable(self.span) {\n-            let diagnostic = &sess.span_diagnostic;\n             let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-            emit_feature_err(diagnostic, feature, self.span, GateIssue::Language, &explain);\n+            emit_feature_err(sess, feature, self.span, GateIssue::Language, &explain);\n         }\n     }\n }\n \n struct Context<'a> {\n     features: &'a Features,\n-    span_handler: &'a Handler,\n+    parse_sess: &'a ParseSess,\n     cm: &'a CodeMap,\n     plugin_attributes: &'a [(String, AttributeType)],\n }\n@@ -699,7 +699,7 @@ macro_rules! gate_feature_fn {\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !cx.cm.span_allows_unstable(span) {\n-            emit_feature_err(cx.span_handler, name, span, GateIssue::Language, explain);\n+            emit_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain);\n         }\n     }}\n }\n@@ -756,10 +756,10 @@ impl<'a> Context<'a> {\n     }\n }\n \n-pub fn check_attribute(attr: &ast::Attribute, handler: &Handler,\n+pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess,\n                        cm: &CodeMap, features: &Features) {\n     let cx = Context {\n-        features: features, span_handler: handler,\n+        features: features, parse_sess: parse_sess,\n         cm: cm, plugin_attributes: &[]\n     };\n     cx.check_attribute(attr, true);\n@@ -788,8 +788,10 @@ pub enum GateIssue {\n     Library(Option<u32>)\n }\n \n-pub fn emit_feature_err(diag: &Handler, feature: &str, span: Span, issue: GateIssue,\n+pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: GateIssue,\n                         explain: &str) {\n+    let diag = &sess.span_diagnostic;\n+\n     let issue = match issue {\n         GateIssue::Language => find_lang_feature_issue(feature),\n         GateIssue::Library(lib) => lib,\n@@ -802,13 +804,12 @@ pub fn emit_feature_err(diag: &Handler, feature: &str, span: Span, issue: GateIs\n     };\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n-    if option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some() {\n-        err.emit();\n-        return;\n+    if sess.unstable_features.is_nightly_build() {\n+        err.help(&format!(\"add #![feature({})] to the \\\n+                           crate attributes to enable\",\n+                          feature));\n     }\n-    err.help(&format!(\"add #![feature({})] to the \\\n-                       crate attributes to enable\",\n-                      feature));\n+\n     err.emit();\n }\n \n@@ -962,9 +963,10 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 if attr::contains_name(&i.attrs[..], \"simd\") {\n                     gate_feature_post!(&self, simd, i.span,\n                                        \"SIMD types are experimental and possibly buggy\");\n-                    self.context.span_handler.span_warn(i.span,\n-                                                        \"the `#[simd]` attribute is deprecated, \\\n-                                                         use `#[repr(simd)]` instead\");\n+                    self.context.parse_sess.span_diagnostic.span_warn(i.span,\n+                                                                      \"the `#[simd]` attribute \\\n+                                                                       is deprecated, use \\\n+                                                                       `#[repr(simd)]` instead\");\n                 }\n                 for attr in &i.attrs {\n                     if attr.name() == \"repr\" {\n@@ -1273,7 +1275,7 @@ pub fn check_crate(krate: &ast::Crate,\n     maybe_stage_features(&sess.span_diagnostic, krate, unstable);\n     let ctx = Context {\n         features: features,\n-        span_handler: &sess.span_diagnostic,\n+        parse_sess: sess,\n         cm: sess.codemap(),\n         plugin_attributes: plugin_attributes,\n     };\n@@ -1294,6 +1296,30 @@ pub enum UnstableFeatures {\n     Cheat\n }\n \n+impl UnstableFeatures {\n+    pub fn from_environment() -> UnstableFeatures {\n+        // Whether this is a feature-staged build, i.e. on the beta or stable channel\n+        let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+        // The secret key needed to get through the rustc build itself by\n+        // subverting the unstable features lints\n+        let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n+        // The matching key to the above, only known by the build system\n+        let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n+        match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n+            (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n+            (true, _, _) => UnstableFeatures::Disallow,\n+            (false, _, _) => UnstableFeatures::Allow\n+        }\n+    }\n+\n+    pub fn is_nightly_build(&self) -> bool {\n+        match *self {\n+            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate,\n                         unstable: UnstableFeatures) {\n     let allow_features = match unstable {"}, {"sha": "1e286c143de9b4b5ad97718343f6f1ea2c9ed053", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -14,6 +14,7 @@ use ast;\n use codemap::CodeMap;\n use syntax_pos::{self, Span, FileMap};\n use errors::{Handler, ColorConfig, DiagnosticBuilder};\n+use feature_gate::UnstableFeatures;\n use parse::parser::Parser;\n use parse::token::InternedString;\n use ptr::P;\n@@ -42,6 +43,7 @@ pub mod obsolete;\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler, // better be the same as the one in the reader!\n+    pub unstable_features: UnstableFeatures,\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<PathBuf>>,\n     code_map: Rc<CodeMap>,\n@@ -60,6 +62,7 @@ impl ParseSess {\n     pub fn with_span_handler(handler: Handler, code_map: Rc<CodeMap>) -> ParseSess {\n         ParseSess {\n             span_diagnostic: handler,\n+            unstable_features: UnstableFeatures::from_environment(),\n             included_mod_stack: RefCell::new(vec![]),\n             code_map: code_map\n         }"}, {"sha": "cc4fb604d6ccb76799c0db76a044352b7029807d", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -53,7 +53,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<base::MacResult + 'cx> {\n     if !cx.ecfg.enable_asm() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"asm\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}, {"sha": "e56c6e2229a75630657eedd7bcc164635b033541", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -23,7 +23,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                               tts: &[TokenTree])\n                               -> Box<base::MacResult + 'cx> {\n     if !cx.ecfg.enable_concat_idents() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"concat_idents\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}, {"sha": "e3a38d568d313d8f77a0780c1f2af5e40c6c3f0c", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -221,7 +221,7 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n         // the old custom derive mechanism. If the feature isn't enabled, we\n         // issue an error, otherwise manufacture the `derive_Foo` attribute.\n         } else if !cx.ecfg.enable_custom_derive() {\n-            feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+            feature_gate::emit_feature_err(&cx.parse_sess,\n                                            \"custom_derive\",\n                                            titem.span,\n                                            feature_gate::GateIssue::Language,"}, {"sha": "71f1951d5d455c168d7c9d23d784d8ed8a19691b", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -19,7 +19,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<base::MacResult + 'cx> {\n     if !cx.ecfg.enable_log_syntax() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"log_syntax\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}, {"sha": "9578af68100782d0611ba79239c4643908b7eda0", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0623cf7bda44849ab5df78a06b22f9108cf821a/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=d0623cf7bda44849ab5df78a06b22f9108cf821a", "patch": "@@ -20,7 +20,7 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            tt: &[TokenTree])\n                            -> Box<base::MacResult + 'static> {\n     if !cx.ecfg.enable_trace_macros() {\n-        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+        feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"trace_macros\",\n                                        sp,\n                                        feature_gate::GateIssue::Language,"}]}