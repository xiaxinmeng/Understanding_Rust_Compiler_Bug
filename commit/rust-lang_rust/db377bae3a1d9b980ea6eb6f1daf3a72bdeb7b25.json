{"sha": "db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMzc3YmFlM2ExZDliOTgwZWE2ZWI2ZjFkYWYzYTcyYmRlYjdiMjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T22:36:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T22:36:48Z"}, "message": "Accumulate number tokens properly, handle newline, EQ and EQEQ in rustc lexer.", "tree": {"sha": "f3eb44c3fea0946bd4566bfb9090e8588f3e076e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3eb44c3fea0946bd4566bfb9090e8588f3e076e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25", "html_url": "https://github.com/rust-lang/rust/commit/db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f191d6d9135960f0f706c39c2b2840298a29e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f191d6d9135960f0f706c39c2b2840298a29e2", "html_url": "https://github.com/rust-lang/rust/commit/08f191d6d9135960f0f706c39c2b2840298a29e2"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "b0ee557dde67365a455282ddd89b9bca2b9db208", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=db377bae3a1d9b980ea6eb6f1daf3a72bdeb7b25", "patch": "@@ -24,13 +24,14 @@ fn is_bin_digit(char c) -> bool {\n }\n \n fn is_whitespace(char c) -> bool {\n-    ret c == ' ' || c == '\\t' || c == '\\r';\n+    ret c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n }\n \n fn next_token(stdio_reader rdr) -> token.token {\n     auto eof = (-1) as char;\n     auto c = rdr.getc() as char;\n-    auto accum = \"\";\n+    auto accum_str = \"\";\n+    auto accum_int = 0;\n \n     while (is_whitespace(c) && c != eof) {\n         c = rdr.getc() as char;\n@@ -40,38 +41,48 @@ fn next_token(stdio_reader rdr) -> token.token {\n \n     if (is_alpha(c)) {\n         while (is_alpha(c)) {\n-            accum += (c as u8);\n+            accum_str += (c as u8);\n             c = rdr.getc() as char;\n         }\n         rdr.ungetc(c as int);\n-        ret token.IDENT(accum);\n+        ret token.IDENT(accum_str);\n     }\n \n     if (is_dec_digit(c)) {\n         if (c == '0') {\n         } else {\n             while (is_dec_digit(c)) {\n-                accum += (c as u8);\n+                accum_int *= 10;\n+                accum_int += (c as int) - ('0' as int);\n                 c = rdr.getc() as char;\n             }\n             rdr.ungetc(c as int);\n-            ret token.LIT_INT(0);\n+            ret token.LIT_INT(accum_int);\n         }\n     }\n \n     // One-byte structural symbols.\n     alt (c) {\n-    case (';') { ret token.SEMI(); }\n-    case (',') { ret token.COMMA(); }\n-    case ('.') { ret token.DOT(); }\n-    case ('(') { ret token.LPAREN(); }\n-    case (')') { ret token.RPAREN(); }\n-    case ('{') { ret token.LBRACE(); }\n-    case ('}') { ret token.RBRACE(); }\n-    case ('[') { ret token.LBRACKET(); }\n-    case (']') { ret token.RBRACKET(); }\n-    case ('@') { ret token.AT(); }\n-    case ('#') { ret token.POUND(); }\n+        case (';') { ret token.SEMI(); }\n+        case (',') { ret token.COMMA(); }\n+        case ('.') { ret token.DOT(); }\n+        case ('(') { ret token.LPAREN(); }\n+        case (')') { ret token.RPAREN(); }\n+        case ('{') { ret token.LBRACE(); }\n+        case ('}') { ret token.RBRACE(); }\n+        case ('[') { ret token.LBRACKET(); }\n+        case (']') { ret token.RBRACKET(); }\n+        case ('@') { ret token.AT(); }\n+        case ('#') { ret token.POUND(); }\n+        case ('=') {\n+            auto c2 = rdr.getc() as char;\n+            if (c2 == '=') {\n+                ret token.OP(token.EQEQ());\n+            } else {\n+                rdr.ungetc(c2 as int);\n+                ret token.OP(token.EQ());\n+            }\n+        }\n     }\n \n     log \"lexer stopping at \";"}]}