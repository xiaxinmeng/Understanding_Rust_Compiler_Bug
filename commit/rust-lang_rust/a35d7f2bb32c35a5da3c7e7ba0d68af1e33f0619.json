{"sha": "a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNWQ3ZjJiYjMyYzM1YTVkYTNjN2U3YmEwZDY4YWYxZTMzZjA2MTk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-05T00:41:13Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-06T14:30:47Z"}, "message": "Remove special case for statement `NodeId` assignment\n\nWe now let `noop_flat_map_stmt` assign `NodeId`s (via `visit_id`),\njust as we do for other AST nodes.", "tree": {"sha": "0ac6032a9a4514a6623c38ad9f54727abdd4d2a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac6032a9a4514a6623c38ad9f54727abdd4d2a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmENR5gACgkQtAh+UQ6Y\nsWTQyw//T3RHRvzwqMGuMIGz1LCazFKN07FtkjYF6DiVRVqcYWT437jMasOh9Fyi\nMvDgBgR/1dgVpWxRQti1n62V+4B6Upz5TiJzk05fL/Cdp3/5Sn58WVSn8SoHvH0T\nJRNId+t4MO4KKOnK+gm/ABQAzquzQMdpPgfxiJU1yGzPREfPmfHPt+GLzGx/AvyX\nqTVHBA+DxOsJxICQdd/CIE3FpMndjmOcFCi4K0qg9074lnBvp+YgPzvejS5rJcJG\nmI/WNUqivh0dR8cHjhvpRLL+31B4q/SL6m1fXtUbEYndBgJdFkjob2VLEya172J+\nVI6VOpz/kMAZe/gLnYRwQKCoKj6zGgfNKR9Mtae8H6BGv0Lga8kxBvldL5V4gi93\nc7/+6ajn/N5ZXDAsBSDW0S7PHYHdLMEbiWI5xdXiiL/ABgusayFM+PI0c4lnMzzF\nZLPIfDUnA29uk3BvqPfMC2oZYjQcpi21zGwT9r77OrjwIult8sVsH4HKteBjfxGX\noi9X+DjobIGv6scwXfS3wl+JEbdZBVHcR5GDTypGPzZjzG//z7NGEeX03nUAvw5q\njVFL0zVuqchJ8rRa35o/MfUwGb4SqIM1z46oDVDNgvjMwVu3zAEirR3SpkZu/jxF\npBdcYePanteSWdf4v5Eb7MJc3ZViVWHKGO+1xAQFawTBtTjlaoU=\n=TvTj\n-----END PGP SIGNATURE-----", "payload": "tree 0ac6032a9a4514a6623c38ad9f54727abdd4d2a5\nparent 1f94abcda6884893d4723304102089198caa0839\nauthor Aaron Hill <aa1ronham@gmail.com> 1628124073 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1628260247 -0500\n\nRemove special case for statement `NodeId` assignment\n\nWe now let `noop_flat_map_stmt` assign `NodeId`s (via `visit_id`),\njust as we do for other AST nodes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "html_url": "https://github.com/rust-lang/rust/commit/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f94abcda6884893d4723304102089198caa0839", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f94abcda6884893d4723304102089198caa0839", "html_url": "https://github.com/rust-lang/rust/commit/1f94abcda6884893d4723304102089198caa0839"}], "stats": {"total": 35, "additions": 7, "deletions": 28}, "files": [{"sha": "3629e668fa9f8989b4637058d1fe8b3463ea1b81", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         self.cx.force_mode = orig_force_mode;\n \n         // Finally incorporate all the expanded macros into the input AST fragment.\n-        let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n+        let mut placeholder_expander = PlaceholderExpander::default();\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {\n                 placeholder_expander\n@@ -1341,14 +1341,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n         }\n \n-        // The placeholder expander gives ids to statements, so we avoid folding the id here.\n         // We don't use `assign_id!` - it will be called when we visit statement's contents\n         // (e.g. an expression, item, or local)\n-        let ast::Stmt { id, kind, span } = stmt;\n-        let res = noop_flat_map_stmt_kind(kind, self)\n-            .into_iter()\n-            .map(|kind| ast::Stmt { id, kind, span })\n-            .collect();\n+        let res = noop_flat_map_stmt(stmt, self);\n \n         self.cx.current_expansion.is_trailing_mac = false;\n         res"}, {"sha": "43287984050d4726f7ceb7f1200551757576dc64", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "patch": "@@ -7,6 +7,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n+#![recursion_limit = \"256\"]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "8e78fcbb8dbc14a40110def4bda0c03506a63947", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "patch": "@@ -1,4 +1,3 @@\n-use crate::base::ExtCtxt;\n use crate::expand::{AstFragment, AstFragmentKind};\n \n use rustc_ast as ast;\n@@ -175,17 +174,12 @@ pub fn placeholder(\n     }\n }\n \n-pub struct PlaceholderExpander<'a, 'b> {\n+#[derive(Default)]\n+pub struct PlaceholderExpander {\n     expanded_fragments: FxHashMap<ast::NodeId, AstFragment>,\n-    cx: &'a mut ExtCtxt<'b>,\n-    monotonic: bool,\n }\n \n-impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n-    pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n-        PlaceholderExpander { cx, expanded_fragments: FxHashMap::default(), monotonic }\n-    }\n-\n+impl PlaceholderExpander {\n     pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment) {\n         fragment.mut_visit_with(self);\n         self.expanded_fragments.insert(id, fragment);\n@@ -196,7 +190,7 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n+impl MutVisitor for PlaceholderExpander {\n     fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n         if arm.is_placeholder {\n             self.remove(arm.id).make_arms()\n@@ -360,15 +354,4 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             _ => noop_visit_ty(ty, self),\n         }\n     }\n-\n-    fn visit_block(&mut self, block: &mut P<ast::Block>) {\n-        noop_visit_block(block, self);\n-\n-        for stmt in block.stmts.iter_mut() {\n-            if self.monotonic {\n-                assert_eq!(stmt.id, ast::DUMMY_NODE_ID);\n-                stmt.id = self.cx.resolver.next_node_id();\n-            }\n-        }\n-    }\n }"}]}