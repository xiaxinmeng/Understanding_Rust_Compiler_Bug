{"sha": "3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTZhMzgzYmIxZDFmZGFkOGNlZWI3NGYxNmNmMDhlMGJkNjJhMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T01:42:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T01:42:03Z"}, "message": "Auto merge of #85178 - cjgillot:local-crate, r=oli-obk\n\nRemove CrateNum parameter for queries that only work on local crate\n\nThe pervasive `CrateNum` parameter is a remnant of the multi-crate rustc idea.\n\nUsing `()` as query key in those cases avoids having to worry about the validity of the query key.", "tree": {"sha": "912246be6d9298983c099d904ee9260e77695a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912246be6d9298983c099d904ee9260e77695a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "html_url": "https://github.com/rust-lang/rust/commit/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55748ffe94e71f841c7b1d752779b0db138b342", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55748ffe94e71f841c7b1d752779b0db138b342", "html_url": "https://github.com/rust-lang/rust/commit/a55748ffe94e71f841c7b1d752779b0db138b342"}, {"sha": "1ebf6d12426152dc1ce76c174ee0ff69b1a4c5b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ebf6d12426152dc1ce76c174ee0ff69b1a4c5b4", "html_url": "https://github.com/rust-lang/rust/commit/1ebf6d12426152dc1ce76c174ee0ff69b1a4c5b4"}], "stats": {"total": 683, "additions": 280, "deletions": 403}, "files": [{"sha": "357a9f2daf746e67e4f9bdea0e38a37637251e27", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn codegen(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n-    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });"}, {"sha": "24d933728db693b804325b232d664f33b65f77d0", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -42,7 +42,7 @@ fn emit_module(\n \n     unwind_context.emit(&mut product);\n \n-    let tmp_file = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&name));\n+    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n     let obj = product.object.write().unwrap();\n     if let Err(err) = std::fs::write(&tmp_file, obj) {\n         tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n@@ -74,7 +74,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out = tcx\n-            .output_filenames(LOCAL_CRATE)\n+            .output_filenames(())\n             .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n@@ -190,7 +190,7 @@ pub(crate) fn run_aot(\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n-        tcx.collect_and_partition_mono_items(LOCAL_CRATE).1\n+        tcx.collect_and_partition_mono_items(()).1\n     } else {\n         // If only `--emit metadata` is used, we shouldn't perform any codegen.\n         // Also `tcx.collect_and_partition_mono_items` may panic in that case.\n@@ -276,7 +276,7 @@ pub(crate) fn run_aot(\n                 .to_string();\n \n             let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n+                .output_filenames(())\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n@@ -353,7 +353,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .join(\"\\n\");\n \n     let output_object_file =\n-        tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(cgu_name));\n+        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}, {"sha": "632e86da736ab235530d52e7d25512fefe83b590", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -8,7 +8,6 @@ use std::os::raw::{c_char, c_int};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n-use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -66,7 +65,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n     );\n \n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(());\n     let mono_items = cgus\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n@@ -179,7 +178,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     let mut dylib_paths = Vec::new();\n \n     let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let formats = tcx.dependency_formats(());\n     let data = &formats\n         .iter()\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)"}, {"sha": "d1958c5f96b86b7be79f1a2c1129e4e57a82f1a6", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     unwind_context: &mut UnwindContext,\n     is_jit: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(LOCAL_CRATE) {\n+    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {"}, {"sha": "cd8c5b516083611ee316c93c816c523d29863fa3", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -214,7 +214,7 @@ pub(crate) fn write_ir_file(\n         return;\n     }\n \n-    let clif_output_dir = tcx.output_filenames(LOCAL_CRATE).with_extension(\"clif\");\n+    let clif_output_dir = tcx.output_filenames(()).with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n         Ok(()) => {}"}, {"sha": "5b4a187a1d56f16ed41afc7964987339718a8f58", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -20,7 +20,6 @@ use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler, Level};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, SwitchWithOptPath};\n@@ -92,13 +91,12 @@ pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm:\n \n pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut llvm::TargetMachine {\n     let split_dwarf_file = if tcx.sess.target_can_use_split_dwarf() {\n-        tcx.output_filenames(LOCAL_CRATE)\n-            .split_dwarf_path(tcx.sess.split_debuginfo(), Some(mod_name))\n+        tcx.output_filenames(()).split_dwarf_path(tcx.sess.split_debuginfo(), Some(mod_name))\n     } else {\n         None\n     };\n     let config = TargetMachineFactoryConfig { split_dwarf_file };\n-    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE))(config)\n+    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(()))(config)\n         .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n }\n "}, {"sha": "d2a2e739ff31ef450117a7729737b14e4fcef61c", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,7 +6,7 @@ use llvm::coverageinfo::CounterMappingRegion;\n use rustc_codegen_ssa::coverageinfo::map::{Counter, CounterExpression};\n use rustc_codegen_ssa::traits::{ConstMethods, CoverageInfoMethods};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_llvm::RustString;\n use rustc_middle::mir::coverage::CodeRegion;\n use rustc_span::Symbol;\n@@ -265,7 +265,7 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     let ignore_unused_generics = tcx.sess.instrument_coverage_except_unused_generics();\n \n     let all_def_ids: DefIdSet = tcx\n-        .mir_keys(LOCAL_CRATE)\n+        .mir_keys(())\n         .iter()\n         .filter_map(|local_def_id| {\n             let def_id = local_def_id.to_def_id();\n@@ -276,7 +276,7 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n         })\n         .collect();\n \n-    let codegenned_def_ids = tcx.codegened_and_inlined_items(LOCAL_CRATE);\n+    let codegenned_def_ids = tcx.codegened_and_inlined_items(());\n \n     let mut unused_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {"}, {"sha": "0db6659f8e256e467d46213c7363b55384d3d021", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -995,9 +995,10 @@ pub fn compile_unit_metadata(\n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n     let work_dir = tcx.sess.working_dir.to_string_lossy(false);\n     let flags = \"\\0\";\n-    let out_dir = &tcx.output_filenames(LOCAL_CRATE).out_directory;\n+    let output_filenames = tcx.output_filenames(());\n+    let out_dir = &output_filenames.out_directory;\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {\n-        tcx.output_filenames(LOCAL_CRATE)\n+        output_filenames\n             .split_dwarf_path(tcx.sess.split_debuginfo(), Some(codegen_unit_name))\n             .map(|f| out_dir.join(f))\n     } else {\n@@ -1058,15 +1059,12 @@ pub fn compile_unit_metadata(\n         if tcx.sess.opts.debugging_opts.profile {\n             let cu_desc_metadata =\n                 llvm::LLVMRustMetadataAsValue(debug_context.llcontext, unit_metadata);\n-            let default_gcda_path = &tcx.output_filenames(LOCAL_CRATE).with_extension(\"gcda\");\n+            let default_gcda_path = &output_filenames.with_extension(\"gcda\");\n             let gcda_path =\n                 tcx.sess.opts.debugging_opts.profile_emit.as_ref().unwrap_or(default_gcda_path);\n \n             let gcov_cu_info = [\n-                path_to_mdstring(\n-                    debug_context.llcontext,\n-                    &tcx.output_filenames(LOCAL_CRATE).with_extension(\"gcno\"),\n-                ),\n+                path_to_mdstring(debug_context.llcontext, &output_filenames.with_extension(\"gcno\")),\n                 path_to_mdstring(debug_context.llcontext, &gcda_path),\n                 cu_desc_metadata,\n             ];"}, {"sha": "2b99a2ebad979227ff6b6068f6cf69da962ff8d6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -23,7 +23,7 @@ use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, Variab\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::HasTyCtxt;\n@@ -343,7 +343,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         if self.sess().opts.optimize != config::OptLevel::No {\n             spflags |= DISPFlags::SPFlagOptimized;\n         }\n-        if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n+        if let Some((id, _)) = self.tcx.entry_fn(()) {\n             if id == def_id {\n                 spflags |= DISPFlags::SPFlagMainSubprogram;\n             }"}, {"sha": "ea4564c2a6bea68a14bff5ca144785d511c1ef16", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1303,7 +1303,7 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n         }\n     }\n \n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let formats = tcx.dependency_formats(());\n     let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n \n     for (index, dep_format) in deps.iter().enumerate() {"}, {"sha": "14d6f0ba147b53773c15ed6509d46d4270ef4f89", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n@@ -60,7 +60,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n         tcx.is_panic_runtime(LOCAL_CRATE) || tcx.is_compiler_builtins(LOCAL_CRATE);\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n-        .reachable_set(LOCAL_CRATE)\n+        .reachable_set(())\n         .iter()\n         .filter_map(|&def_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -133,12 +133,12 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n         })\n         .collect();\n \n-    if let Some(id) = tcx.proc_macro_decls_static(LOCAL_CRATE) {\n-        reachable_non_generics.insert(id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.proc_macro_decls_static(()) {\n+        reachable_non_generics.insert(id.to_def_id(), SymbolExportLevel::C);\n     }\n \n-    if let Some(id) = tcx.plugin_registrar_fn(LOCAL_CRATE) {\n-        reachable_non_generics.insert(id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.plugin_registrar_fn(()) {\n+        reachable_non_generics.insert(id.to_def_id(), SymbolExportLevel::C);\n     }\n \n     reachable_non_generics\n@@ -174,7 +174,7 @@ fn exported_symbols_provider_local(\n         .map(|(&def_id, &level)| (ExportedSymbol::NonGeneric(def_id), level))\n         .collect();\n \n-    if tcx.entry_fn(LOCAL_CRATE).is_some() {\n+    if tcx.entry_fn(()).is_some() {\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n \n         symbols.push((exported_symbol, SymbolExportLevel::C));\n@@ -230,7 +230,7 @@ fn exported_symbols_provider_local(\n         // external linkage is enough for monomorphization to be linked to.\n         let need_visibility = tcx.sess.target.dynamic_linking && !tcx.sess.target.only_cdylib;\n \n-        let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+        let (_, cgus) = tcx.collect_and_partition_mono_items(());\n \n         for (mono_item, &(linkage, visibility)) in cgus.iter().flat_map(|cgu| cgu.items().iter()) {\n             if linkage != Linkage::External {\n@@ -275,11 +275,9 @@ fn exported_symbols_provider_local(\n \n fn upstream_monomorphizations_provider(\n     tcx: TyCtxt<'_>,\n-    cnum: CrateNum,\n+    (): (),\n ) -> DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n-    debug_assert!(cnum == LOCAL_CRATE);\n-\n-    let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n+    let cnums = tcx.all_crate_nums(());\n \n     let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n \n@@ -341,7 +339,7 @@ fn upstream_monomorphizations_for_provider(\n     def_id: DefId,\n ) -> Option<&FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(!def_id.is_local());\n-    tcx.upstream_monomorphizations(LOCAL_CRATE).get(&def_id)\n+    tcx.upstream_monomorphizations(()).get(&def_id)\n }\n \n fn upstream_drop_glue_for_provider<'tcx>(\n@@ -355,12 +353,8 @@ fn upstream_drop_glue_for_provider<'tcx>(\n     }\n }\n \n-fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    if let Some(def_id) = def_id.as_local() {\n-        !tcx.reachable_set(LOCAL_CRATE).contains(&def_id)\n-    } else {\n-        bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\", def_id)\n-    }\n+fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+    !tcx.reachable_set(()).contains(&def_id)\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "49774dc6d5c7d4626dfcfd556d6a98cd169e93c5", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -482,7 +482,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         codegen_worker_receive,\n         shared_emitter_main,\n         future: coordinator_thread,\n-        output_filenames: tcx.output_filenames(LOCAL_CRATE),\n+        output_filenames: tcx.output_filenames(()),\n     }\n }\n \n@@ -1042,7 +1042,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         // If we know that we won\u2019t be doing codegen, create target machines without optimisation.\n         config::OptLevel::No\n     } else {\n-        tcx.backend_optimization_level(LOCAL_CRATE)\n+        tcx.backend_optimization_level(())\n     };\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n@@ -1061,7 +1061,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         cgu_reuse_tracker: sess.cgu_reuse_tracker.clone(),\n         coordinator_send,\n         diag_emitter: shared_emitter.clone(),\n-        output_filenames: tcx.output_filenames(LOCAL_CRATE),\n+        output_filenames: tcx.output_filenames(()),\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,"}, {"sha": "b44e74d5ae8209d430a523b82286781049c05aa8", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -347,7 +347,7 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n ) -> Option<Bx::Function> {\n-    let main_def_id = cx.tcx().entry_fn(LOCAL_CRATE).map(|(def_id, _)| def_id)?;\n+    let (main_def_id, entry_type) = cx.tcx().entry_fn(())?;\n     let main_is_local = main_def_id.is_local();\n     let instance = Instance::mono(cx.tcx(), main_def_id);\n \n@@ -364,10 +364,9 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let main_llfn = cx.get_fn_addr(instance);\n \n-    return cx.tcx().entry_fn(LOCAL_CRATE).map(|(_, et)| {\n-        let use_start_lang_item = EntryFnType::Start != et;\n-        create_entry_fn::<Bx>(cx, main_llfn, main_def_id, use_start_lang_item)\n-    });\n+    let use_start_lang_item = EntryFnType::Start != entry_type;\n+    let entry_fn = create_entry_fn::<Bx>(cx, main_llfn, main_def_id, use_start_lang_item);\n+    return Some(entry_fn);\n \n     fn create_entry_fn<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx: &'a Bx::CodegenCx,\n@@ -487,7 +486,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Run the monomorphization collector and partition the collected items into\n     // codegen units.\n-    let codegen_units = tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n+    let codegen_units = tcx.collect_and_partition_mono_items(()).1;\n \n     // Force all codegen_unit queries so they are already either red or green\n     // when compile_codegen_unit accesses them. We are not able to re-execute\n@@ -512,7 +511,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // linkage, then it's already got an allocator shim and we'll be using that\n     // one instead. If nothing exists then it's our job to generate the\n     // allocator!\n-    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });\n@@ -769,7 +768,7 @@ impl CrateInfo {\n             used_crate_source: Default::default(),\n             lang_item_to_crate: Default::default(),\n             missing_lang_items: Default::default(),\n-            dependency_formats: tcx.dependency_formats(LOCAL_CRATE),\n+            dependency_formats: tcx.dependency_formats(()),\n         };\n         let lang_items = tcx.lang_items();\n "}, {"sha": "c9b36dd0c24ca9cd40c39a3bada9207640cc2c31", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -21,7 +21,6 @@ use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_feature::find_gated_cfg;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{self, collect_crate_types, get_builtin_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n@@ -389,7 +388,7 @@ fn run_compiler(\n             }\n \n             queries.global_ctxt()?.peek_mut().enter(|tcx| {\n-                let result = tcx.analysis(LOCAL_CRATE);\n+                let result = tcx.analysis(());\n                 if sess.opts.debugging_opts.save_analysis {\n                     let crate_name = queries.crate_name()?.peek().clone();\n                     sess.time(\"save_analysis\", || {"}, {"sha": "370ec053cbbcbbcc62b59486e9f79249b6296024", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -4,7 +4,6 @@ use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -74,7 +73,7 @@ where\n             f(&annotation, tcx.hir().krate())\n         }\n         PpHirMode::Typed => {\n-            abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n+            abort_on_err(tcx.analysis(()), tcx.sess);\n \n             let annotation = TypedAnnotation { tcx, maybe_typeck_results: Cell::new(None) };\n             tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n@@ -475,7 +474,7 @@ fn print_with_analysis(\n     ppm: PpMode,\n     ofile: Option<&Path>,\n ) -> Result<(), ErrorReported> {\n-    tcx.analysis(LOCAL_CRATE)?;\n+    tcx.analysis(())?;\n \n     let out = match ppm {\n         Mir => {"}, {"sha": "8220eb6c6570f5bfbe29df85a1dd35907e6579f5", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -36,7 +36,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n         }\n \n         let available_cgus = tcx\n-            .collect_and_partition_mono_items(LOCAL_CRATE)\n+            .collect_and_partition_mono_items(())\n             .1\n             .iter()\n             .map(|cgu| cgu.name().to_string())"}, {"sha": "e2220e3b60de10cb08427cff2bf29c46ead02900", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n-use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n@@ -805,9 +805,7 @@ pub fn create_global_ctxt<'tcx>(\n \n /// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate.\n-fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     rustc_passes::hir_id_validator::check_crate(tcx);\n \n     let sess = tcx.sess;\n@@ -816,14 +814,13 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     sess.time(\"misc_checking_1\", || {\n         parallel!(\n             {\n-                entry_point = sess\n-                    .time(\"looking_for_entry_point\", || rustc_passes::entry::find_entry_point(tcx));\n+                entry_point = sess.time(\"looking_for_entry_point\", || tcx.entry_fn(()));\n \n-                sess.time(\"looking_for_plugin_registrar\", || {\n-                    plugin::build::find_plugin_registrar(tcx)\n-                });\n+                sess.time(\"looking_for_plugin_registrar\", || tcx.ensure().plugin_registrar_fn(()));\n \n-                sess.time(\"looking_for_derive_registrar\", || proc_macro_decls::find(tcx));\n+                sess.time(\"looking_for_derive_registrar\", || {\n+                    tcx.ensure().proc_macro_decls_static(())\n+                });\n \n                 let cstore = tcx\n                     .cstore_as_any()\n@@ -903,11 +900,11 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     sess.time(\"misc_checking_3\", || {\n         parallel!(\n             {\n-                tcx.ensure().privacy_access_levels(LOCAL_CRATE);\n+                tcx.ensure().privacy_access_levels(());\n \n                 parallel!(\n                     {\n-                        tcx.ensure().check_private_in_public(LOCAL_CRATE);\n+                        tcx.ensure().check_private_in_public(());\n                     },\n                     {\n                         sess.time(\"death_checking\", || rustc_passes::dead::check_crate(tcx));"}, {"sha": "88cf6275ebbd07ff72a4c0b8f42351c456462bed", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,21 +1,15 @@\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n-pub fn find(tcx: TyCtxt<'_>) -> Option<DefId> {\n-    tcx.proc_macro_decls_static(LOCAL_CRATE)\n-}\n-\n-fn proc_macro_decls_static(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn proc_macro_decls_static(tcx: TyCtxt<'_>, (): ()) -> Option<LocalDefId> {\n     let mut finder = Finder { tcx, decls: None };\n     tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n-    finder.decls.map(|id| tcx.hir().local_def_id(id).to_def_id())\n+    finder.decls.map(|id| tcx.hir().local_def_id(id))\n }\n \n struct Finder<'tcx> {"}, {"sha": "92d05e4806871e5e50be8113c761697f2d313a84", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -285,7 +285,7 @@ impl<'tcx> Queries<'tcx> {\n         self.ongoing_codegen.compute(|| {\n             let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n-                tcx.analysis(LOCAL_CRATE).ok();\n+                tcx.analysis(()).ok();\n \n                 // Don't do code generation if there were any errors\n                 self.session().compile_status()?;\n@@ -302,7 +302,7 @@ impl<'tcx> Queries<'tcx> {\n     /// to write UI tests that actually test that compilation succeeds without reporting\n     /// an error.\n     fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n-        let def_id = match tcx.entry_fn(LOCAL_CRATE) {\n+        let def_id = match tcx.entry_fn(()) {\n             Some((def_id, _)) => def_id,\n             _ => return,\n         };"}, {"sha": "e504662bb5eae73ebb3069bd47da4f37c85e6f13", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -18,7 +18,7 @@ use crate::{passes::LateLintPassObject, LateContext, LateLintPass, LintStore};\n use rustc_ast as ast;\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::map::Map;\n@@ -375,7 +375,7 @@ fn late_lint_mod_pass<'tcx, T: LateLintPass<'tcx>>(\n     module_def_id: LocalDefId,\n     pass: T,\n ) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     let context = LateContext {\n         tcx,\n@@ -423,7 +423,7 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n }\n \n fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     let krate = tcx.hir().krate();\n "}, {"sha": "91cdef9b089fa7544b31c255378049d140a467ff", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,8 +6,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::{intravisit, HirId};\n+use rustc_hir::{intravisit, HirId, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n@@ -28,10 +27,9 @@ use tracing::debug;\n \n use std::cmp;\n \n-fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> LintLevelMap {\n-    assert_eq!(cnum, LOCAL_CRATE);\n+fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n-    let crate_attrs = tcx.get_attrs(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n+    let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n     let levels = LintLevelsBuilder::new(tcx.sess, false, &store, crate_attrs);\n     let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();"}, {"sha": "e25b22c83317433bf3d1f9186d56a78828991708", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -185,19 +185,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n-    plugin_registrar_fn => {\n-        cdata.root.plugin_registrar_fn.map(|index| {\n-            DefId { krate: def_id.krate, index }\n-        })\n-    }\n-    proc_macro_decls_static => {\n-        cdata.root.proc_macro_data.as_ref().map(|data| {\n-            DefId {\n-                krate: def_id.krate,\n-                index: data.proc_macro_decls_static,\n-            }\n-        })\n-    }\n     crate_disambiguator => { cdata.root.disambiguator }\n     crate_hash => { cdata.root.hash }\n     crate_host_hash => { cdata.host_hash }\n@@ -296,11 +283,10 @@ pub fn provide(providers: &mut Providers) {\n         // external item that is visible from at least one local module) to a\n         // sufficiently visible parent (considering modules that re-export the\n         // external item to be parents).\n-        visible_parent_map: |tcx, cnum| {\n+        visible_parent_map: |tcx, ()| {\n             use std::collections::hash_map::Entry;\n             use std::collections::vec_deque::VecDeque;\n \n-            assert_eq!(cnum, LOCAL_CRATE);\n             let mut visible_parent_map: DefIdMap<DefId> = Default::default();\n \n             // Issue 46112: We want the map to prefer the shortest\n@@ -348,7 +334,7 @@ pub fn provide(providers: &mut Providers) {\n                                 Entry::Occupied(mut entry) => {\n                                     // If `child` is defined in crate `cnum`, ensure\n                                     // that it is mapped to a parent in `cnum`.\n-                                    if child.krate == cnum && entry.get().krate != cnum {\n+                                    if child.is_local() && entry.get().is_local() {\n                                         entry.insert(parent);\n                                     }\n                                 }\n@@ -370,17 +356,14 @@ pub fn provide(providers: &mut Providers) {\n             visible_parent_map\n         },\n \n-        dependency_formats: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            Lrc::new(crate::dependency_format::calculate(tcx))\n-        },\n+        dependency_formats: |tcx, ()| Lrc::new(crate::dependency_format::calculate(tcx)),\n         has_global_allocator: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             CStore::from_tcx(tcx).has_global_allocator()\n         },\n-        postorder_cnums: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            tcx.arena.alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(cnum))\n+        postorder_cnums: |tcx, ()| {\n+            tcx.arena\n+                .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n \n         ..*providers"}, {"sha": "0c31430598a98d73e3dcc6e0a9bcd914299bae91", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -678,7 +678,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator,\n-            plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_data,\n             compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),\n             needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),\n@@ -970,13 +969,12 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));\n             }\n         }\n-        let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n+        let inherent_impls = tcx.crate_inherent_impls(());\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n-            assert!(def_id.is_local());\n             if implementations.is_empty() {\n                 continue;\n             }\n-            record!(self.tables.inherent_impls[def_id] <- implementations.iter().map(|&def_id| {\n+            record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {\n                 assert!(def_id.is_local());\n                 def_id.index\n             }));\n@@ -1263,7 +1261,7 @@ impl EncodeContext<'a, 'tcx> {\n \n         let mut keys_and_jobs = self\n             .tcx\n-            .mir_keys(LOCAL_CRATE)\n+            .mir_keys(())\n             .iter()\n             .filter_map(|&def_id| {\n                 let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);\n@@ -1601,7 +1599,7 @@ impl EncodeContext<'a, 'tcx> {\n             let tcx = self.tcx;\n             let hir = tcx.hir();\n \n-            let proc_macro_decls_static = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap().index;\n+            let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;\n             let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();\n             let macros = self.lazy(hir.krate().proc_macros.iter().map(|p| p.owner.local_def_index));\n             let spans = self.tcx.sess.parse_sess.proc_macro_quoted_spans();\n@@ -1798,7 +1796,7 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {\n         empty_proc_macro!(self);\n-        let formats = self.tcx.dependency_formats(LOCAL_CRATE);\n+        let formats = self.tcx.dependency_formats(());\n         for (ty, arr) in formats.iter() {\n             if *ty != CrateType::Dylib {\n                 continue;\n@@ -2028,7 +2026,7 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n         return;\n     }\n \n-    par_iter(tcx.mir_keys(LOCAL_CRATE)).for_each(|&def_id| {\n+    par_iter(tcx.mir_keys(())).for_each(|&def_id| {\n         let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n \n         if encode_const {"}, {"sha": "04fe5cf5890a00ad24d46855137195fc01f18efa", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -209,7 +209,6 @@ crate struct CrateRoot<'tcx> {\n     has_global_allocator: bool,\n     has_panic_handler: bool,\n     has_default_lib_allocator: bool,\n-    plugin_registrar_fn: Option<DefIndex>,\n \n     crate_deps: Lazy<[CrateDep]>,\n     dylib_dependency_formats: Lazy<[Option<LinkagePreference>]>,"}, {"sha": "d154b7804f052afa3f8fb02571a3a420f4e64269", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -150,7 +150,7 @@ impl<'hir> Iterator for ParentOwnerIterator<'_, 'hir> {\n \n impl<'hir> Map<'hir> {\n     pub fn krate(&self) -> &'hir Crate<'hir> {\n-        self.tcx.hir_crate(LOCAL_CRATE)\n+        self.tcx.hir_crate(())\n     }\n \n     #[inline]\n@@ -489,7 +489,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {\n-        self.tcx.all_local_trait_impls(LOCAL_CRATE).get(&trait_did).map_or(&[], |xs| &xs[..])\n+        self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     /// Gets the attributes on the crate. This is preferable to\n@@ -928,9 +928,7 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n     }\n }\n \n-pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx IndexedHir<'tcx> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tcx> {\n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n     let hcx = tcx.create_stable_hashing_context();\n@@ -943,10 +941,12 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n }\n \n pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+\n     let mut hcx = tcx.create_stable_hashing_context();\n \n     let mut hir_body_nodes: Vec<_> = tcx\n-        .index_hir(crate_num)\n+        .index_hir(())\n         .map\n         .iter_enumerated()\n         .filter_map(|(def_id, hod)| {"}, {"sha": "879372c65eaa1c8bf68430c38ebd1991e5858b0b", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::Attribute;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::DUMMY_SP;\n@@ -123,14 +123,14 @@ pub fn provide(providers: &mut Providers) {\n         let hir = tcx.hir();\n         hir.local_def_id(hir.get_module_parent_node(hir.local_def_id_to_hir_id(id)))\n     };\n-    providers.hir_crate = |tcx, _| tcx.untracked_crate;\n+    providers.hir_crate = |tcx, ()| tcx.untracked_crate;\n     providers.index_hir = map::index_hir;\n     providers.crate_hash = map::crate_hash;\n     providers.hir_module_items = |tcx, id| &tcx.untracked_crate.modules[&id];\n-    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n-    providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n+    providers.hir_owner = |tcx, id| tcx.index_hir(()).map[id].signature;\n+    providers.hir_owner_nodes = |tcx, id| tcx.index_hir(()).map[id].with_bodies.as_deref();\n     providers.hir_owner_parent = |tcx, id| {\n-        let index = tcx.index_hir(LOCAL_CRATE);\n+        let index = tcx.index_hir(());\n         index.parenting.get(&id).copied().unwrap_or(CRATE_HIR_ID)\n     };\n     providers.hir_attrs = |tcx, id| AttributeMap { map: &tcx.untracked_crate.attrs, prefix: id };\n@@ -151,4 +151,5 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n+    providers.all_local_trait_impls = |tcx, ()| &tcx.hir_crate(()).trait_impls;\n }"}, {"sha": "d63116e29c86f4b541a04e93896ff9796bee72a9", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -251,7 +251,7 @@ pub fn used_crates(tcx: TyCtxt<'_>, prefer: LinkagePreference) -> Vec<(CrateNum,\n             Some((cnum, path))\n         })\n         .collect::<Vec<_>>();\n-    let mut ordering = tcx.postorder_cnums(LOCAL_CRATE).to_owned();\n+    let mut ordering = tcx.postorder_cnums(()).to_owned();\n     ordering.reverse();\n     libs.sort_by_cached_key(|&(a, _)| ordering.iter().position(|x| *x == a));\n     libs"}, {"sha": "edf2e5397654189cdbb2cdb0eb8a64b4a7b74f4a", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> MonoItem<'tcx> {\n \n         match *self {\n             MonoItem::Fn(ref instance) => {\n-                let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n+                let entry_def_id = tcx.entry_fn(()).map(|(id, _)| id);\n                 // If this function isn't inlined or otherwise has an extern\n                 // indicator, then we'll be creating a globally shared version.\n                 if tcx.codegen_fn_attrs(instance.def_id()).contains_extern_indicator()"}, {"sha": "70f70788bca81c2c0bf30504ffcc1b0267ef11e4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 38, "deletions": 53, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -20,15 +20,15 @@ rustc_queries! {\n     /// This is because the `hir_crate` query gives you access to all other items.\n     /// To avoid this fate, do not call `tcx.hir().krate()`; instead,\n     /// prefer wrappers like `tcx.visit_all_items_in_krate()`.\n-    query hir_crate(key: CrateNum) -> &'tcx Crate<'tcx> {\n+    query hir_crate(key: ()) -> &'tcx Crate<'tcx> {\n         eval_always\n         no_hash\n         desc { \"get the crate HIR\" }\n     }\n \n     /// The indexed HIR. This can be conveniently accessed by `tcx.hir()`.\n     /// Avoid calling this query directly.\n-    query index_hir(_: CrateNum) -> &'tcx crate::hir::IndexedHir<'tcx> {\n+    query index_hir(_: ()) -> &'tcx crate::hir::IndexedHir<'tcx> {\n         eval_always\n         no_hash\n         desc { \"index HIR\" }\n@@ -114,7 +114,7 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n-    query analysis(key: CrateNum) -> Result<(), ErrorReported> {\n+    query analysis(key: ()) -> Result<(), ErrorReported> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }\n     }\n@@ -199,7 +199,7 @@ rustc_queries! {\n         desc { \"looking up the native libraries of a linked crate\" }\n     }\n \n-    query lint_levels(_: CrateNum) -> LintLevelMap {\n+    query lint_levels(_: ()) -> LintLevelMap {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"computing the lint levels for items in this crate\" }\n@@ -223,7 +223,7 @@ rustc_queries! {\n     /// Set of all the `DefId`s in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct\n     /// constructors.\n-    query mir_keys(_: CrateNum) -> FxHashSet<LocalDefId> {\n+    query mir_keys(_: ()) -> FxHashSet<LocalDefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"getting a list of all mir_keys\" }\n     }\n@@ -543,7 +543,7 @@ rustc_queries! {\n     }\n \n     /// Gets a map with the variance of every item; use `item_variance` instead.\n-    query crate_variances(_: CrateNum) -> ty::CrateVariancesMap<'tcx> {\n+    query crate_variances(_: ()) -> ty::CrateVariancesMap<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"computing the variances for items in this crate\" }\n     }\n@@ -554,8 +554,7 @@ rustc_queries! {\n     }\n \n     /// Maps from thee `DefId` of a type to its (inferred) outlives.\n-    query inferred_outlives_crate(_: CrateNum)\n-        -> ty::CratePredicatesMap<'tcx> {\n+    query inferred_outlives_crate(_: ()) -> ty::CratePredicatesMap<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"computing the inferred outlives predicates for items in this crate\" }\n     }\n@@ -694,7 +693,7 @@ rustc_queries! {\n             desc { |tcx| \"computing CoerceUnsized info for `{}`\", tcx.def_path_str(key) }\n         }\n \n-    query typeck_item_bodies(_: CrateNum) -> () {\n+    query typeck_item_bodies(_: ()) -> () {\n         desc { \"type-checking all item bodies\" }\n     }\n \n@@ -753,18 +752,15 @@ rustc_queries! {\n \n     /// Gets a complete map from all types to their inherent impls.\n     /// Not meant to be used directly outside of coherence.\n-    /// (Defined only for `LOCAL_CRATE`.)\n-    query crate_inherent_impls(k: CrateNum)\n-        -> CrateInherentImpls {\n+    query crate_inherent_impls(k: ()) -> CrateInherentImpls {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n-        desc { \"all inherent impls defined in crate `{:?}`\", k }\n+        desc { \"all inherent impls defined in crate\" }\n     }\n \n     /// Checks all types in the crate for overlap in their inherent impls. Reports errors.\n     /// Not meant to be used directly outside of coherence.\n-    /// (Defined only for `LOCAL_CRATE`.)\n-    query crate_inherent_impls_overlap_check(_: CrateNum)\n+    query crate_inherent_impls_overlap_check(_: ())\n         -> () {\n         eval_always\n         desc { \"check for overlap between inherent impls defined in this crate\" }\n@@ -858,16 +854,16 @@ rustc_queries! {\n     }\n \n     /// Performs part of the privacy check and computes \"access levels\".\n-    query privacy_access_levels(_: CrateNum) -> &'tcx AccessLevels {\n+    query privacy_access_levels(_: ()) -> &'tcx AccessLevels {\n         eval_always\n         desc { \"privacy access levels\" }\n     }\n-    query check_private_in_public(_: CrateNum) -> () {\n+    query check_private_in_public(_: ()) -> () {\n         eval_always\n         desc { \"checking for private elements in public interfaces\" }\n     }\n \n-    query reachable_set(_: CrateNum) -> FxHashSet<LocalDefId> {\n+    query reachable_set(_: ()) -> FxHashSet<LocalDefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"reachability\" }\n     }\n@@ -977,7 +973,7 @@ rustc_queries! {\n     /// Passing in any other crate will cause an ICE.\n     ///\n     /// [`LOCAL_CRATE`]: rustc_hir::def_id::LOCAL_CRATE\n-    query all_local_trait_impls(local_crate: CrateNum) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n+    query all_local_trait_impls(_: ()) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n         desc { \"local trait impls\" }\n     }\n \n@@ -1080,9 +1076,7 @@ rustc_queries! {\n         desc { \"dylib dependency formats of crate\" }\n     }\n \n-    query dependency_formats(_: CrateNum)\n-        -> Lrc<crate::middle::dependency_format::Dependencies>\n-    {\n+    query dependency_formats(_: ()) -> Lrc<crate::middle::dependency_format::Dependencies> {\n         desc { \"get the linkage format of all dependencies\" }\n     }\n \n@@ -1170,10 +1164,10 @@ rustc_queries! {\n     query is_reachable_non_generic(def_id: DefId) -> bool {\n         desc { |tcx| \"checking whether `{}` is an exported symbol\", tcx.def_path_str(def_id) }\n     }\n-    query is_unreachable_local_definition(def_id: DefId) -> bool {\n+    query is_unreachable_local_definition(def_id: LocalDefId) -> bool {\n         desc { |tcx|\n             \"checking whether `{}` is reachable from outside the crate\",\n-            tcx.def_path_str(def_id),\n+            tcx.def_path_str(def_id.to_def_id()),\n         }\n     }\n \n@@ -1183,11 +1177,9 @@ rustc_queries! {\n     /// added or removed in any upstream crate. Instead use the narrower\n     /// `upstream_monomorphizations_for`, `upstream_drop_glue_for`, or, even\n     /// better, `Instance::upstream_monomorphization()`.\n-    query upstream_monomorphizations(\n-        k: CrateNum\n-    ) -> DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+    query upstream_monomorphizations(_: ()) -> DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n         storage(ArenaCacheSelector<'tcx>)\n-        desc { \"collecting available upstream monomorphizations `{:?}`\", k }\n+        desc { \"collecting available upstream monomorphizations\" }\n     }\n \n     /// Returns the set of upstream monomorphizations available for the\n@@ -1230,13 +1222,13 @@ rustc_queries! {\n \n     /// Identifies the entry-point (e.g., the `main` function) for a given\n     /// crate, returning `None` if there is no entry point (such as for library crates).\n-    query entry_fn(_: CrateNum) -> Option<(DefId, EntryFnType)> {\n+    query entry_fn(_: ()) -> Option<(DefId, EntryFnType)> {\n         desc { \"looking up the entry function of a crate\" }\n     }\n-    query plugin_registrar_fn(_: CrateNum) -> Option<DefId> {\n+    query plugin_registrar_fn(_: ()) -> Option<LocalDefId> {\n         desc { \"looking up the plugin registrar for a crate\" }\n     }\n-    query proc_macro_decls_static(_: CrateNum) -> Option<DefId> {\n+    query proc_macro_decls_static(_: ()) -> Option<LocalDefId> {\n         desc { \"looking up the derive registrar for a crate\" }\n     }\n     query crate_disambiguator(_: CrateNum) -> CrateDisambiguator {\n@@ -1363,7 +1355,7 @@ rustc_queries! {\n         desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query get_lib_features(_: CrateNum) -> LibFeatures {\n+    query get_lib_features(_: ()) -> LibFeatures {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the lib features map\" }\n@@ -1373,16 +1365,14 @@ rustc_queries! {\n         desc { \"calculating the lib features defined in a crate\" }\n     }\n     /// Returns the lang items defined in another crate by loading it from metadata.\n-    // FIXME: It is illegal to pass a `CrateNum` other than `LOCAL_CRATE` here, just get rid\n-    // of that argument?\n-    query get_lang_items(_: CrateNum) -> LanguageItems {\n+    query get_lang_items(_: ()) -> LanguageItems {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the lang items map\" }\n     }\n \n     /// Returns all diagnostic items defined in all crates.\n-    query all_diagnostic_items(_: CrateNum) -> FxHashMap<Symbol, DefId> {\n+    query all_diagnostic_items(_: ()) -> FxHashMap<Symbol, DefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the diagnostic items map\" }\n@@ -1402,13 +1392,11 @@ rustc_queries! {\n     query missing_lang_items(_: CrateNum) -> &'tcx [LangItem] {\n         desc { \"calculating the missing lang items in a crate\" }\n     }\n-    query visible_parent_map(_: CrateNum)\n-        -> DefIdMap<DefId> {\n+    query visible_parent_map(_: ()) -> DefIdMap<DefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating the visible parent map\" }\n     }\n-    query trimmed_def_paths(_: CrateNum)\n-        -> FxHashMap<DefId, Symbol> {\n+    query trimmed_def_paths(_: ()) -> FxHashMap<DefId, Symbol> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating trimmed def paths\" }\n     }\n@@ -1420,7 +1408,7 @@ rustc_queries! {\n         eval_always\n         desc { \"looking at the source for a crate\" }\n     }\n-    query postorder_cnums(_: CrateNum) -> &'tcx [CrateNum] {\n+    query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }\n     }\n@@ -1433,8 +1421,7 @@ rustc_queries! {\n         eval_always\n         desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n-    query maybe_unused_extern_crates(_: CrateNum)\n-        -> &'tcx [(LocalDefId, Span)] {\n+    query maybe_unused_extern_crates(_: ()) -> &'tcx [(LocalDefId, Span)] {\n         eval_always\n         desc { \"looking up all possibly unused extern crates\" }\n     }\n@@ -1444,20 +1431,20 @@ rustc_queries! {\n         desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query stability_index(_: CrateNum) -> stability::Index<'tcx> {\n+    query stability_index(_: ()) -> stability::Index<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the stability index for the local crate\" }\n     }\n-    query all_crate_nums(_: CrateNum) -> &'tcx [CrateNum] {\n+    query all_crate_nums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"fetching all foreign CrateNum instances\" }\n     }\n \n     /// A vector of every trait accessible in the whole crate\n     /// (i.e., including those from subcrates). This is used only for\n     /// error reporting.\n-    query all_traits(_: CrateNum) -> &'tcx [DefId] {\n+    query all_traits(_: ()) -> &'tcx [DefId] {\n         desc { \"fetching all foreign and local traits\" }\n     }\n \n@@ -1471,8 +1458,7 @@ rustc_queries! {\n         desc { \"exported_symbols\" }\n     }\n \n-    query collect_and_partition_mono_items(_: CrateNum)\n-        -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n+    query collect_and_partition_mono_items(_: ()) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n         eval_always\n         desc { \"collect_and_partition_mono_items\" }\n     }\n@@ -1481,8 +1467,7 @@ rustc_queries! {\n     }\n \n     /// All items participating in code generation together with items inlined into them.\n-    query codegened_and_inlined_items(_: CrateNum)\n-        -> &'tcx DefIdSet {\n+    query codegened_and_inlined_items(_: ()) -> &'tcx DefIdSet {\n         eval_always\n        desc { \"codegened_and_inlined_items\" }\n     }\n@@ -1497,11 +1482,11 @@ rustc_queries! {\n                 tcx.def_path_str(key)\n         }\n     }\n-    query backend_optimization_level(_: CrateNum) -> OptLevel {\n+    query backend_optimization_level(_: ()) -> OptLevel {\n         desc { \"optimization level used by backend\" }\n     }\n \n-    query output_filenames(_: CrateNum) -> Arc<OutputFilenames> {\n+    query output_filenames(_: ()) -> Arc<OutputFilenames> {\n         eval_always\n         desc { \"output_filenames\" }\n     }\n@@ -1677,7 +1662,7 @@ rustc_queries! {\n         desc { |tcx| \"estimating size for `{}`\", tcx.def_path_str(def.def_id()) }\n     }\n \n-    query features_query(_: CrateNum) -> &'tcx rustc_feature::Features {\n+    query features_query(_: ()) -> &'tcx rustc_feature::Features {\n         eval_always\n         desc { \"looking up enabled feature gates\" }\n     }"}, {"sha": "dde5cbadbd965ae7feb3ef3549cc0a775251efc9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1218,18 +1218,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn lib_features(self) -> &'tcx middle::lib_features::LibFeatures {\n-        self.get_lib_features(LOCAL_CRATE)\n+        self.get_lib_features(())\n     }\n \n     /// Obtain all lang items of this crate and all dependencies (recursively)\n     pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {\n-        self.get_lang_items(LOCAL_CRATE)\n+        self.get_lang_items(())\n     }\n \n     /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to\n     /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.\n     pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {\n-        self.all_diagnostic_items(LOCAL_CRATE).get(&name).copied()\n+        self.all_diagnostic_items(()).get(&name).copied()\n     }\n \n     /// Check whether the diagnostic item with the given `name` has the given `DefId`.\n@@ -1238,19 +1238,19 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn stability(self) -> &'tcx stability::Index<'tcx> {\n-        self.stability_index(LOCAL_CRATE)\n+        self.stability_index(())\n     }\n \n     pub fn crates(self) -> &'tcx [CrateNum] {\n-        self.all_crate_nums(LOCAL_CRATE)\n+        self.all_crate_nums(())\n     }\n \n     pub fn allocator_kind(self) -> Option<AllocatorKind> {\n         self.cstore.allocator_kind()\n     }\n \n     pub fn features(self) -> &'tcx rustc_feature::Features {\n-        self.features_query(LOCAL_CRATE)\n+        self.features_query(())\n     }\n \n     pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n@@ -2623,7 +2623,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint: &'static Lint,\n         mut id: hir::HirId,\n     ) -> (Level, LintLevelSource) {\n-        let sets = self.lint_levels(LOCAL_CRATE);\n+        let sets = self.lint_levels(());\n         loop {\n             if let Some(pair) = sets.level_and_source(lint, id, self.sess) {\n                 return pair;\n@@ -2795,10 +2795,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         tcx.crate_name\n     };\n     providers.maybe_unused_trait_import = |tcx, id| tcx.maybe_unused_trait_imports.contains(&id);\n-    providers.maybe_unused_extern_crates = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        &tcx.maybe_unused_extern_crates[..]\n-    };\n+    providers.maybe_unused_extern_crates = |tcx, ()| &tcx.maybe_unused_extern_crates[..];\n     providers.names_imported_by_glob_use =\n         |tcx, id| tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default());\n \n@@ -2815,18 +2812,9 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         tcx.stability().local_deprecation_entry(id)\n     };\n     providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n-    providers.all_crate_nums = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())\n-    };\n-    providers.output_filenames = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.output_filenames.clone()\n-    };\n-    providers.features_query = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.sess.features_untracked()\n-    };\n+    providers.all_crate_nums = |tcx, ()| tcx.arena.alloc_slice(&tcx.cstore.crates_untracked());\n+    providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();\n+    providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)"}, {"sha": "94e325e9e8784fcf38ae38ce1a962a72ca87d122", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n use rustc_hir::{Constness, Node};\n use rustc_macros::HashStable;\n use rustc_span::hygiene::ExpnId;\n@@ -1970,7 +1970,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     super::util::bug::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n-        all_local_trait_impls: trait_def::all_local_trait_impls,\n         type_uninhabited_from: inhabitedness::type_uninhabited_from,\n         const_param_default: consts::const_param_default,\n         ..*providers\n@@ -1984,7 +1983,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n /// (constructing this map requires touching the entire crate).\n #[derive(Clone, Debug, Default, HashStable)]\n pub struct CrateInherentImpls {\n-    pub inherent_impls: DefIdMap<Vec<DefId>>,\n+    pub inherent_impls: LocalDefIdMap<Vec<DefId>>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]"}, {"sha": "76c48597092140de5ca021bdcc26fff44ee178ff", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::ItemKind;\n use rustc_session::config::TrimmedDefPaths;\n@@ -285,7 +285,7 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok((self, false));\n         }\n \n-        match self.tcx().trimmed_def_paths(LOCAL_CRATE).get(&def_id) {\n+        match self.tcx().trimmed_def_paths(()).get(&def_id) {\n             None => Ok((self, false)),\n             Some(symbol) => {\n                 self.write_str(&symbol.as_str())?;\n@@ -361,7 +361,7 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok((self, false));\n         }\n \n-        let visible_parent_map = self.tcx().visible_parent_map(LOCAL_CRATE);\n+        let visible_parent_map = self.tcx().visible_parent_map(());\n \n         let mut cur_def_key = self.tcx().def_key(def_id);\n         debug!(\"try_print_visible_def_path: cur_def_key={:?}\", cur_def_key);\n@@ -2302,9 +2302,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n /// `std::vec::Vec` to just `Vec`, as long as there is no other `Vec` importable anywhere.\n ///\n /// The implementation uses similar import discovery logic to that of 'use' suggestions.\n-fn trimmed_def_paths(tcx: TyCtxt<'_>, crate_num: CrateNum) -> FxHashMap<DefId, Symbol> {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-\n+fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n     let mut map = FxHashMap::default();\n \n     if let TrimmedDefPaths::GoodPath = tcx.sess.opts.trimmed_def_paths {"}, {"sha": "a688b816e9af9b95a60b7218746727f2af35c7bc", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -579,7 +579,7 @@ impl<'sess> OnDiskCache<'sess> {\n     ) -> IndexVec<CrateNum, Option<CrateNum>> {\n         tcx.dep_graph.with_ignore(|| {\n             let current_cnums = tcx\n-                .all_crate_nums(LOCAL_CRATE)\n+                .all_crate_nums(())\n                 .iter()\n                 .map(|&cnum| {\n                     let crate_name = tcx.original_crate_name(cnum).to_string();"}, {"sha": "79166472acf0430955698b00aa6820e2e7e1a6b4", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -4,14 +4,13 @@ use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_macros::HashStable;\n-use std::collections::BTreeMap;\n \n /// A trait's definition with type information.\n #[derive(HashStable)]\n@@ -209,14 +208,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-// Query provider for `all_local_trait_impls`.\n-pub(super) fn all_local_trait_impls<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    krate: CrateNum,\n-) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n-    &tcx.hir_crate(krate).trait_impls\n-}\n-\n // Query provider for `trait_impls_of`.\n pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> TraitImpls {\n     let mut impls = TraitImpls::default();"}, {"sha": "ef79f36b3b5aaa62ff91feb06e8c15c0f1b2c19a", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -184,7 +184,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n use rustc_errors::{ErrorReported, FatalError};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n@@ -322,7 +322,7 @@ fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<\n     let mut roots = Vec::new();\n \n     {\n-        let entry_fn = tcx.entry_fn(LOCAL_CRATE);\n+        let entry_fn = tcx.entry_fn(());\n \n         debug!(\"collect_roots: entry_fn = {:?}\", entry_fn);\n \n@@ -468,7 +468,7 @@ fn shrunk_instance_name(\n             after = &s[positions().rev().nth(after).unwrap_or(0)..],\n         );\n \n-        let path = tcx.output_filenames(LOCAL_CRATE).temp_path_ext(\"long-type.txt\", None);\n+        let path = tcx.output_filenames(()).temp_path_ext(\"long-type.txt\", None);\n         let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n \n         (shrunk, written_to_path)"}, {"sha": "541c825416ce2b74ddba7dc333e871dc0f1ec821", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -451,7 +451,9 @@ fn mono_item_visibility(\n     let is_generic = instance.substs.non_erasable_generics().next().is_some();\n \n     // Upstream `DefId` instances get different handling than local ones.\n-    if !def_id.is_local() {\n+    let def_id = if let Some(def_id) = def_id.as_local() {\n+        def_id\n+    } else {\n         return if export_generics && is_generic {\n             // If it is a upstream monomorphization and we export generics, we must make\n             // it available to downstream crates.\n@@ -460,7 +462,7 @@ fn mono_item_visibility(\n         } else {\n             Visibility::Hidden\n         };\n-    }\n+    };\n \n     if is_generic {\n         if export_generics {\n@@ -470,7 +472,7 @@ fn mono_item_visibility(\n             } else {\n                 // This instance might be useful in a downstream crate.\n                 *can_be_internalized = false;\n-                default_visibility(tcx, def_id, true)\n+                default_visibility(tcx, def_id.to_def_id(), true)\n             }\n         } else {\n             // We are not exporting generics or the definition is not reachable\n@@ -481,10 +483,10 @@ fn mono_item_visibility(\n         // If this isn't a generic function then we mark this a `Default` if\n         // this is a reachable item, meaning that it's a symbol other crates may\n         // access when they link to us.\n-        if tcx.is_reachable_non_generic(def_id) {\n+        if tcx.is_reachable_non_generic(def_id.to_def_id()) {\n             *can_be_internalized = false;\n             debug_assert!(!is_generic);\n-            return default_visibility(tcx, def_id, false);\n+            return default_visibility(tcx, def_id.to_def_id(), false);\n         }\n \n         // If this isn't reachable then we're gonna tag this with `Hidden`"}, {"sha": "6ed0ab8be41ee95a1dcc0518c92adffbf24eaaa9", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -97,7 +97,7 @@ mod merging;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n-use rustc_hir::def_id::{CrateNum, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::DefIdSet;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -311,10 +311,8 @@ where\n \n fn collect_and_partition_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    cnum: CrateNum,\n+    (): (),\n ) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n         Some(ref s) => {\n             let mode_string = s.to_lowercase();\n@@ -426,8 +424,8 @@ fn collect_and_partition_mono_items<'tcx>(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n-fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx DefIdSet {\n-    let (items, cgus) = tcx.collect_and_partition_mono_items(cnum);\n+fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx DefIdSet {\n+    let (items, cgus) = tcx.collect_and_partition_mono_items(());\n     let mut visited = DefIdSet::default();\n     let mut result = items.clone();\n \n@@ -455,12 +453,12 @@ pub fn provide(providers: &mut Providers) {\n     providers.codegened_and_inlined_items = codegened_and_inlined_items;\n \n     providers.is_codegened_item = |tcx, def_id| {\n-        let (all_mono_items, _) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+        let (all_mono_items, _) = tcx.collect_and_partition_mono_items(());\n         all_mono_items.contains(&def_id)\n     };\n \n     providers.codegen_unit = |tcx, name| {\n-        let (_, all) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+        let (_, all) = tcx.collect_and_partition_mono_items(());\n         all.iter()\n             .find(|cgu| cgu.name() == name)\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))"}, {"sha": "2201223e13eabd92b0314a4bd20ed5c01b3ddae0", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -3,7 +3,7 @@ use required_consts::RequiredConstsVisitor;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n@@ -98,14 +98,13 @@ pub(crate) fn provide(providers: &mut Providers) {\n }\n \n fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    tcx.mir_keys(def_id.krate).contains(&def_id.expect_local())\n+    let def_id = def_id.expect_local();\n+    tcx.mir_keys(()).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> FxHashSet<LocalDefId> {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n+fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     let mut set = FxHashSet::default();\n \n     // All body-owners have MIR associated with them."}, {"sha": "b01d25ab3a40202bfd73b805829fdb03dd4d40ab", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -10,7 +10,7 @@ use super::spanview::write_mir_fn_spanview;\n use crate::transform::MirSource;\n use either::Either;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, Pointer,\n@@ -1020,6 +1020,6 @@ pub fn dump_mir_def_ids(tcx: TyCtxt<'_>, single: Option<DefId>) -> Vec<DefId> {\n     if let Some(i) = single {\n         vec![i]\n     } else {\n-        tcx.mir_keys(LOCAL_CRATE).iter().map(|def_id| def_id.to_def_id()).collect()\n+        tcx.mir_keys(()).iter().map(|def_id| def_id.to_def_id()).collect()\n     }\n }"}, {"sha": "bef56bbc2875fa1326b85c7693302f7611aa106d", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -5,7 +5,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n@@ -480,7 +480,7 @@ fn create_and_seed_worklist<'tcx>(\n         )\n         .chain(\n             // Seed entry point\n-            tcx.entry_fn(LOCAL_CRATE).and_then(|(def_id, _)| {\n+            tcx.entry_fn(()).and_then(|(def_id, _)| {\n                 def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n             }),\n         )\n@@ -717,7 +717,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n }\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx, live_symbols };"}, {"sha": "f345d45d17808b93c49e1f4b76a8942257a1c4e7", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n@@ -99,7 +99,9 @@ fn extract(sess: &Session, attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n+fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol, DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n     // Initialize the collector.\n     let mut collector = DiagnosticItemCollector::new(tcx);\n \n@@ -114,7 +116,7 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n+fn all_diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = FxHashMap::default();\n \n@@ -129,12 +131,6 @@ fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect(tcx)\n-    };\n-    providers.all_diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect_all(tcx)\n-    };\n+    providers.diagnostic_items = diagnostic_items;\n+    providers.all_diagnostic_items = all_diagnostic_items;\n }"}, {"sha": "ca6a7561f3e7743050824efa687a101dd8d521a5", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n@@ -48,9 +48,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n     let any_exe = tcx.sess.crate_types().iter().any(|ty| *ty == CrateType::Executable);\n     if !any_exe {\n         // No need to find a main function.\n@@ -227,10 +225,6 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     err.emit();\n }\n \n-pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(DefId, EntryFnType)> {\n-    tcx.entry_fn(LOCAL_CRATE)\n-}\n-\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers { entry_fn, ..*providers };\n }"}, {"sha": "cfc18062d53a303ab528ba2e49a332e688ce79b9", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::TyCtxt;\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n@@ -183,7 +183,7 @@ impl LanguageItemCollector<'tcx> {\n }\n \n /// Traverses and collects all the lang items in all crates.\n-fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n+fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n     // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n \n@@ -207,8 +207,5 @@ fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.get_lang_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect(tcx)\n-    };\n+    providers.get_lang_items = get_lang_items;\n }"}, {"sha": "363a6417f99d3407b69bf2e965801e13bda35894", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,7 +6,6 @@\n \n use rustc_ast::{Attribute, MetaItem, MetaItemKind};\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::lib_features::LibFeatures;\n@@ -127,7 +126,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n+fn get_lib_features(tcx: TyCtxt<'_>, (): ()) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n     for attr in krate.non_exported_macro_attrs {\n@@ -138,8 +137,5 @@ fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.get_lib_features = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        collect(tcx)\n-    };\n+    providers.get_lib_features = get_lib_features;\n }"}, {"sha": "0b3227abb5f8b4892d213f0b02ecf8b5d5624669", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -8,8 +8,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node;\n@@ -385,10 +384,8 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> FxHashSet<LocalDefId> {\n-    debug_assert!(crate_num == LOCAL_CRATE);\n-\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     let any_library =\n         tcx.sess.crate_types().iter().any(|ty| {"}, {"sha": "f41e0e0370680f4b3cafb8eb8c0c5ef2acadd2ee", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -629,7 +629,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n-fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n+fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n     let is_staged_api =\n         tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n     let mut staged_api = FxHashMap::default();\n@@ -704,11 +704,7 @@ fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n-    *providers = Providers { check_mod_unstable_api_usage, ..*providers };\n-    providers.stability_index = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        new_index(tcx)\n-    };\n+    *providers = Providers { check_mod_unstable_api_usage, stability_index, ..*providers };\n }\n \n struct Checker<'tcx> {\n@@ -880,7 +876,7 @@ impl Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();"}, {"sha": "b95c4a720195a4daabdf7627aae16c74e37fb4c9", "filename": "compiler/rustc_plugin_impl/src/build.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,7 +1,7 @@\n //! Used by `rustc` when compiling a plugin crate.\n \n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -31,33 +31,25 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for RegistrarFinder<'tcx> {\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar(tcx: TyCtxt<'_>) -> Option<DefId> {\n-    tcx.plugin_registrar_fn(LOCAL_CRATE)\n-}\n-\n-fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn plugin_registrar_fn(tcx: TyCtxt<'_>, (): ()) -> Option<LocalDefId> {\n     let mut finder = RegistrarFinder { tcx, registrars: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n-    match finder.registrars.len() {\n-        0 => None,\n-        1 => {\n-            let (def_id, _) = finder.registrars.pop().unwrap();\n-            Some(def_id.to_def_id())\n-        }\n-        _ => {\n-            let diagnostic = tcx.sess.diagnostic();\n-            let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n-            for &(_, span) in &finder.registrars {\n-                e.span_note(span, \"one is here\");\n-            }\n-            e.emit();\n-            diagnostic.abort_if_errors();\n-            unreachable!();\n+    let (def_id, span) = finder.registrars.pop()?;\n+\n+    if !finder.registrars.is_empty() {\n+        let diagnostic = tcx.sess.diagnostic();\n+        let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n+        e.span_note(span, \"one is here\");\n+        for &(_, span) in &finder.registrars {\n+            e.span_note(span, \"one is here\");\n         }\n+        e.emit();\n+        diagnostic.abort_if_errors();\n+        unreachable!();\n     }\n+\n+    Some(def_id)\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "1342762bb07a783e2409318a65571e5ff542fb31", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_middle::bug;\n@@ -2092,9 +2092,7 @@ fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     intravisit::walk_mod(&mut visitor, module, hir_id);\n }\n \n-fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n+fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n@@ -2117,10 +2115,8 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n     tcx.arena.alloc(visitor.access_levels)\n }\n \n-fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n-    let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n+fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n+    let access_levels = tcx.privacy_access_levels(());\n \n     let krate = tcx.hir().krate();\n "}, {"sha": "27a0dc47682a5532c1b9aff54beae26a1a0c8ca5", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -21,6 +21,16 @@ pub trait Key {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span;\n }\n \n+impl Key for () {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "6c308ad89db5197386dd1ef8b0c79fab08433244", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -95,7 +95,7 @@ impl<'tcx> SaveContext<'tcx> {\n         let sess = &self.tcx.sess;\n         // Save-analysis is emitted per whole session, not per each crate type\n         let crate_type = sess.crate_types()[0];\n-        let outputs = &*self.tcx.output_filenames(LOCAL_CRATE);\n+        let outputs = &*self.tcx.output_filenames(());\n \n         if outputs.outputs.contains_key(&OutputType::Metadata) {\n             filename_for_metadata(sess, crate_name, outputs)\n@@ -1000,7 +1000,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n             // Privacy checking requires and is done after type checking; use a\n             // fallback in case the access levels couldn't have been correctly computed.\n             let access_levels = match tcx.sess.compile_status() {\n-                Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n+                Ok(..) => tcx.privacy_access_levels(()),\n                 Err(..) => tcx.arena.alloc(AccessLevels::default()),\n             };\n "}, {"sha": "7fb24ad1ed8e3fdf5c068b57e68cb179a8e70151", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -165,11 +165,11 @@ fn compute_symbol_name(\n \n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n     let is_foreign = if let Some(def_id) = def_id.as_local() {\n-        if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id.to_def_id()) {\n+        if tcx.plugin_registrar_fn(()) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n-        if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id.to_def_id()) {\n+        if tcx.proc_macro_decls_static(()) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n         }"}, {"sha": "db396356d67111adc9ed9175f5bbc49d745e33df", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -14,7 +14,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n@@ -1427,7 +1427,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n-        let all_traits = self.tcx.all_traits(LOCAL_CRATE);\n+        let all_traits = self.tcx.all_traits(());\n         let traits_with_same_path: std::collections::BTreeSet<_> = all_traits\n             .iter()\n             .filter(|trait_def_id| **trait_def_id != trait_ref.def_id())"}, {"sha": "2320a29e6d823a8c362fcd82638c0b4ae3a5c482", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::intravisit;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n@@ -1440,11 +1440,11 @@ impl Ord for TraitInfo {\n \n /// Retrieves all traits in this crate and any dependent crates.\n pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n-    tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n+    tcx.all_traits(()).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n+fn compute_all_traits(tcx: TyCtxt<'_>, (): ()) -> &[DefId] {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];\n@@ -1503,14 +1503,11 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n         handle_external_res(tcx, &mut traits, &mut external_mods, Res::Def(DefKind::Mod, def_id));\n     }\n \n-    traits\n+    tcx.arena.alloc_from_iter(traits)\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.all_traits = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        &tcx.arena.alloc(compute_all_traits(tcx))[..]\n-    }\n+    providers.all_traits = compute_all_traits;\n }\n \n struct UsePlacementFinder<'tcx> {"}, {"sha": "d6db2e1d76f89528f871fb3ff052ea2e107772c0", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -105,7 +105,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdMap, ImplicitSelfKind, Node};\n@@ -1160,8 +1160,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n-fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n-    debug_assert!(crate_num == LOCAL_CRATE);\n+fn typeck_item_bodies(tcx: TyCtxt<'_>, (): ()) {\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck(body_owner_def_id);\n     });"}, {"sha": "836bed2a156354e43a1c9ca863169fe460d565de", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n@@ -77,7 +77,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     // can always suggest removing (no matter which edition we are\n     // in).\n     let unused_extern_crates: FxHashMap<LocalDefId, Span> = tcx\n-        .maybe_unused_extern_crates(LOCAL_CRATE)\n+        .maybe_unused_extern_crates(())\n         .iter()\n         .filter(|&&(def_id, _)| {\n             // The `def_id` here actually was calculated during resolution (at least"}, {"sha": "51698437a305b8916ff185846812f5d0f3bcb036", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -9,16 +9,14 @@\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::{self, CrateInherentImpls, TyCtxt};\n \n use rustc_span::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateInherentImpls {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-\n+pub fn crate_inherent_impls(tcx: TyCtxt<'_>, (): ()) -> CrateInherentImpls {\n     let krate = tcx.hir().krate();\n     let mut collect = InherentCollect { tcx, impls_map: Default::default() };\n     krate.visit_all_item_likes(&mut collect);\n@@ -27,9 +25,9 @@ pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateInhere\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: DefId) -> &[DefId] {\n-    assert!(ty_def_id.is_local());\n+    let ty_def_id = ty_def_id.expect_local();\n \n-    let crate_map = tcx.crate_inherent_impls(ty_def_id.krate);\n+    let crate_map = tcx.crate_inherent_impls(());\n     match crate_map.inherent_impls.get(&ty_def_id) {\n         Some(v) => &v[..],\n         None => &[],\n@@ -364,7 +362,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n \n impl InherentCollect<'tcx> {\n     fn check_def_id(&mut self, item: &hir::Item<'_>, def_id: DefId) {\n-        if def_id.is_local() {\n+        if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and\n             // the implementation does not have any associated traits."}, {"sha": "f039790eca118a5dd1d0b4afd9145b55198ff7b2", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,16 +1,15 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n use rustc_trait_selection::traits::{self, SkipLeakCheck};\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n \n-pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n+pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, (): ()) {\n     let krate = tcx.hir().krate();\n     krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });\n }"}, {"sha": "03a9fe01795f5c70a76735257e4993d106b6effc", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,7 +6,7 @@\n // mappings. That mapping code resides here.\n \n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n@@ -203,8 +203,8 @@ pub fn check_coherence(tcx: TyCtxt<'_>) {\n     tcx.sess.time(\"orphan_checking\", || orphan::check(tcx));\n \n     // these queries are executed for side-effects (error reporting):\n-    tcx.ensure().crate_inherent_impls(LOCAL_CRATE);\n-    tcx.ensure().crate_inherent_impls_overlap_check(LOCAL_CRATE);\n+    tcx.ensure().crate_inherent_impls(());\n+    tcx.ensure().crate_inherent_impls_overlap_check(());\n }\n \n /// Checks whether an impl overlaps with the automatic `impl Trait for dyn Trait`."}, {"sha": "472997223251aa25d639552c4eee29f3b4140048", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -97,7 +97,7 @@ mod variance;\n \n use rustc_errors::{struct_span_err, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n@@ -449,7 +449,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n }\n \n fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n-    match tcx.entry_fn(LOCAL_CRATE) {\n+    match tcx.entry_fn(()) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n         _ => {}\n@@ -510,7 +510,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n         }\n     });\n \n-    tcx.sess.time(\"item_bodies_checking\", || tcx.typeck_item_bodies(LOCAL_CRATE));\n+    tcx.sess.time(\"item_bodies_checking\", || tcx.typeck_item_bodies(()));\n \n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);"}, {"sha": "d7eb31c2abef51b927b9c759443a71e66dba2ad7", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,6 +1,6 @@\n use hir::Node;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, CratePredicatesMap, ToPredicate, TyCtxt};\n@@ -23,7 +23,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n     match tcx.hir().get(id) {\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {\n-                let crate_map = tcx.inferred_outlives_crate(LOCAL_CRATE);\n+                let crate_map = tcx.inferred_outlives_crate(());\n \n                 let predicates = crate_map.predicates.get(&item_def_id).copied().unwrap_or(&[]);\n \n@@ -58,9 +58,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n     }\n }\n \n-fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CratePredicatesMap<'_> {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-\n+fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     // Compute a map from each struct/enum/union S to the **explicit**\n     // outlives predicates (`T: 'a`, `'a: 'b`) that the user wrote.\n     // Typically there won't be many of these, except in older code where"}, {"sha": "66fb9eb86931b3bd8357a2ebf24e025a608ec0fb", "filename": "compiler/rustc_typeck/src/variance/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,7 +6,7 @@\n use hir::Node;\n use rustc_arena::DroplessArena;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, CrateVariancesMap, TyCtxt};\n \n@@ -30,8 +30,7 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers { variances_of, crate_variances, ..*providers };\n }\n \n-fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateVariancesMap<'_> {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n+fn crate_variances(tcx: TyCtxt<'_>, (): ()) -> CrateVariancesMap<'_> {\n     let arena = DroplessArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n@@ -79,6 +78,6 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n \n     // Everything else must be inferred.\n \n-    let crate_map = tcx.crate_variances(LOCAL_CRATE);\n+    let crate_map = tcx.crate_variances(());\n     crate_map.variances.get(&item_def_id).copied().unwrap_or(&[])\n }"}, {"sha": "3f2fae1aca33b30eeb654d6f77a68721c27b075a", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1,6 +1,5 @@\n use crate::rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::ty::subst::Subst;\n@@ -20,7 +19,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n \n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n-        for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n+        for &trait_def_id in self.cx.tcx.all_traits(()).iter() {\n             if !self.cx.cache.access_levels.is_public(trait_def_id)\n                 || self.cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n             {"}, {"sha": "3dd13a8f17072940d1812cd71038339a69c31b55", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::HirId;\n use rustc_hir::{\n     intravisit::{self, NestedVisitorMap, Visitor},\n@@ -348,7 +348,7 @@ crate fn run_global_ctxt(\n     });\n     rustc_passes::stability::check_unused_or_stable_features(tcx);\n \n-    let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = tcx.privacy_access_levels(());\n     // Convert from a HirId set to a DefId set since we don't always have easy access\n     // to the map from defid -> hirid\n     let access_levels = AccessLevels {\n@@ -371,7 +371,7 @@ crate fn run_global_ctxt(\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits: tcx\n-            .all_traits(LOCAL_CRATE)\n+            .all_traits(())\n             .iter()\n             .cloned()\n             .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))"}, {"sha": "81c90f4eaa75b3c0cb846e17710b79d0600486ee", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -1208,13 +1208,11 @@ impl LinkCollector<'_, '_> {\n                     item.def_id.expect_real().as_local().map(|src_id| (src_id, dst_id))\n                 })\n             {\n-                use rustc_hir::def_id::LOCAL_CRATE;\n-\n                 let hir_src = self.cx.tcx.hir().local_def_id_to_hir_id(src_id);\n                 let hir_dst = self.cx.tcx.hir().local_def_id_to_hir_id(dst_id);\n \n-                if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n-                    && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n+                if self.cx.tcx.privacy_access_levels(()).is_exported(hir_src)\n+                    && !self.cx.tcx.privacy_access_levels(()).is_exported(hir_dst)\n                 {\n                     privacy_error(self.cx, &diag_info, &path_str);\n                 }"}, {"sha": "4e621e100e354383c41d1b104949c6ed9d83d916", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -4,7 +4,7 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::DefIdTree;\n use rustc_span::symbol::sym;\n \n@@ -56,7 +56,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     // `tcx.crates()` doesn't include the local crate, and `tcx.all_trait_implementations`\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     let mut extra_attrs = Vec::new();\n-    for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n+    for &trait_did in cx.tcx.all_traits(()).iter() {\n         for &impl_did in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = impl_did.to_def_id();\n             cx.tcx.sess.prof.generic_activity(\"build_local_trait_impl\").run(|| {"}, {"sha": "4f1612759559d95bb5e53a3712af6a378545323c", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -6,9 +6,9 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-#![rustc_if_this_changed(hir_crate)]\n fn main() {}\n \n+#[rustc_if_this_changed]\n struct Foo<T> {\n     f: T,\n }"}, {"sha": "7b86d762e318cc5fda697c6a9e0a388f43d58422", "filename": "src/test/ui/multiple-plugin-registrars.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -15,14 +15,14 @@ LL | #[plugin_registrar]\n error: multiple plugin registration functions found\n    |\n note: one is here\n-  --> $DIR/multiple-plugin-registrars.rs:7:1\n+  --> $DIR/multiple-plugin-registrars.rs:10:1\n    |\n-LL | pub fn one() {}\n+LL | pub fn two() {}\n    | ^^^^^^^^^^^^^^^\n note: one is here\n-  --> $DIR/multiple-plugin-registrars.rs:10:1\n+  --> $DIR/multiple-plugin-registrars.rs:7:1\n    |\n-LL | pub fn two() {}\n+LL | pub fn one() {}\n    | ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted"}, {"sha": "e742cd626ab06352b58410721247e3f867090417", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -12,7 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{def_id::LOCAL_CRATE, source_map::Span};\n+use rustc_span::{source_map::Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n@@ -312,7 +312,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &T\n         if ty_subs.non_erasable_generics().next().is_some() {\n             let has_copy_impl = cx\n                 .tcx\n-                .all_local_trait_impls(LOCAL_CRATE)\n+                .all_local_trait_impls(())\n                 .get(&copy_id)\n                 .map_or(false, |impls| {\n                     impls"}, {"sha": "4e0b1ae78dfe39886b6c7ce2f36e8da726619569", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::in_macro;\n use rustc_hir::def_id::DefIdMap;\n-use rustc_hir::{def_id, Crate, Impl, Item, ItemKind};\n+use rustc_hir::{Crate, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, krate: &'tcx Crate<'_>) {\n         if !krate.items.is_empty() {\n             // Retrieve all inherent implementations from the crate, grouped by type\n-            for impls in cx.tcx.crate_inherent_impls(def_id::LOCAL_CRATE).inherent_impls.values() {\n+            for impls in cx.tcx.crate_inherent_impls(()).inherent_impls.values() {\n                 // Filter out implementations that have generic params (type or lifetime)\n                 let mut impl_spans = impls.iter().filter_map(|impl_def| self.impls.get(impl_def));\n                 if let Some(initial_span) = impl_spans.next() {"}, {"sha": "9ac9500b4eb7637208725e9633f18ff793534f02", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b", "patch": "@@ -60,7 +60,7 @@ use rustc_ast::ast::{self, Attribute, BorrowKind, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n use rustc_hir::{\n@@ -677,7 +677,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n /// Returns `true` if the provided `def_id` is an entrypoint to a program.\n pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     cx.tcx\n-        .entry_fn(LOCAL_CRATE)\n+        .entry_fn(())\n         .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n }\n "}]}