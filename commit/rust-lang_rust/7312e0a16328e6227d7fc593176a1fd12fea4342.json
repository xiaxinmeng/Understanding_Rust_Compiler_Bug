{"sha": "7312e0a16328e6227d7fc593176a1fd12fea4342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTJlMGExNjMyOGU2MjI3ZDdmYzU5MzE3NmExZmQxMmZlYTQzNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-06T09:00:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-06T09:00:57Z"}, "message": "Auto merge of #30692 - michaelwoerister:mir-overloaded-fn-calls, r=nikomatsakis\n\nSo far, calls going through `Fn::call`, `FnMut::call_mut`, or `FnOnce::call_once` have not been translated properly into MIR:\nThe call `f(a, b, c)` where `f: Fn(T1, T2, T3)` would end up in MIR as:\n```\ncall `f` with arguments  `a`, `b`, `c`\n```\nWhat we really want is:\n```\ncall `Fn::call` with arguments  `f`, `a`, `b`, `c`\n```\nThis PR transforms these kinds of overloaded calls during `HIR -> HAIR` translation.\n\nWhat's still a bit funky is that the `Fn` traits expect arguments to be tupled but due to special handling type-checking and trans, we do not actually tuple arguments and everything still checks out fine. So, after this PR we end up with MIR containing calls where function signature and arguments seemingly don't match:\n```\ncall Fn::call(&self, args: (T1, T2, T3)) with arguments `f`, `a`, `b`, `c`\n```\ninstead of\n```\ncall Fn::call(&self, args: (T1, T2, T3)) with arguments `f`, (`a`, `b`, `c`)  //  <- args tupled!\n```\nIt would be nice if the call traits could go without special handling in MIR and later on.", "tree": {"sha": "ee92eacaf624f1e6bf5b777f61ea97f96ae77325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee92eacaf624f1e6bf5b777f61ea97f96ae77325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7312e0a16328e6227d7fc593176a1fd12fea4342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7312e0a16328e6227d7fc593176a1fd12fea4342", "html_url": "https://github.com/rust-lang/rust/commit/7312e0a16328e6227d7fc593176a1fd12fea4342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7312e0a16328e6227d7fc593176a1fd12fea4342/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f442634c2e37a8b80d59e27edcc24b5614d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f442634c2e37a8b80d59e27edcc24b5614d4e", "html_url": "https://github.com/rust-lang/rust/commit/dc1f442634c2e37a8b80d59e27edcc24b5614d4e"}, {"sha": "e281509dcee2ef1ca06b333b6a40e8520c642d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/e281509dcee2ef1ca06b333b6a40e8520c642d15", "html_url": "https://github.com/rust-lang/rust/commit/e281509dcee2ef1ca06b333b6a40e8520c642d15"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "aa6257345fe445a31a147ce12cc2619315306826", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7312e0a16328e6227d7fc593176a1fd12fea4342", "patch": "@@ -46,6 +46,26 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 }\n             }\n \n+            hir::ExprCall(ref fun, ref args) => {\n+                if cx.tcx.is_method_call(self.id) {\n+                    // The callee is something implementing Fn, FnMut, or FnOnce.\n+                    // Find the actual method implementation being called and\n+                    // build the appropriate UFCS call expression with the\n+                    // callee-object as self parameter.\n+\n+                    let method = method_callee(cx, self, ty::MethodCall::expr(self.id));\n+                    let mut argrefs = vec![fun.to_ref()];\n+                    argrefs.extend(args.iter().map(|a| a.to_ref()));\n+\n+                    ExprKind::Call {\n+                        fun: method.to_ref(),\n+                        args: argrefs,\n+                    }\n+                } else {\n+                    ExprKind::Call { fun: fun.to_ref(), args: args.to_ref() }\n+                }\n+            }\n+\n             hir::ExprAddrOf(mutbl, ref expr) => {\n                 let region = match expr_ty.sty {\n                     ty::TyRef(r, _) => r,\n@@ -328,8 +348,6 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 ExprKind::Vec { fields: fields.to_ref() },\n             hir::ExprTup(ref fields) =>\n                 ExprKind::Tuple { fields: fields.to_ref() },\n-            hir::ExprCall(ref fun, ref args) =>\n-                ExprKind::Call { fun: fun.to_ref(), args: args.to_ref() },\n         };\n \n         let temp_lifetime = cx.tcx.region_maps.temporary_scope(self.id);"}, {"sha": "0f4a0407298c8da5a071226262017d4321fb7786", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=7312e0a16328e6227d7fc593176a1fd12fea4342", "patch": "@@ -89,8 +89,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     {\n         let ty = bcx.monomorphize(&constant.ty);\n         match constant.literal {\n-            mir::Literal::Item { def_id, kind, substs } =>\n-                self.trans_item_ref(bcx, ty, kind, substs, def_id),\n+            mir::Literal::Item { def_id, kind, substs } => {\n+                let substs = bcx.tcx().mk_substs(bcx.monomorphize(&substs));\n+                self.trans_item_ref(bcx, ty, kind, substs, def_id)\n+            }\n             mir::Literal::Value { ref value } => {\n                 self.trans_constval(bcx, value, ty)\n             }"}, {"sha": "737c3dace2efe138e3d8b5fa0d6a2e2db5c4ec90", "filename": "src/librustc_trans/trans/mir/did.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs?ref=7312e0a16328e6227d7fc593176a1fd12fea4342", "patch": "@@ -21,6 +21,7 @@ use rustc::middle::traits;\n use rustc::mir::repr::ItemKind;\n use trans::common::{Block, fulfill_obligation};\n use trans::base;\n+use trans::closure;\n use trans::expr;\n use trans::monomorphize;\n use trans::meth;\n@@ -38,6 +39,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                           substs: &'tcx Substs<'tcx>,\n                           did: DefId)\n                           -> OperandRef<'tcx> {\n+        debug!(\"trans_item_ref(ty={:?}, kind={:?}, substs={:?}, did={})\",\n+            ty, kind, substs, bcx.tcx().item_path_str(did));\n+\n         match kind {\n             ItemKind::Function => self.trans_fn_ref(bcx, ty, substs, did),\n             ItemKind::Method => match bcx.tcx().impl_or_trait_item(did).container() {\n@@ -68,6 +72,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         substs: &'tcx Substs<'tcx>,\n                         did: DefId)\n                         -> OperandRef<'tcx> {\n+        debug!(\"trans_fn_ref(ty={:?}, substs={:?}, did={})\",\n+            ty, substs, bcx.tcx().item_path_str(did));\n+\n         let did = inline::maybe_instantiate_inline(bcx.ccx(), did);\n \n         if !substs.types.is_empty() || is_named_tuple_constructor(bcx.tcx(), did) {\n@@ -101,9 +108,14 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                trait_id: DefId,\n                                substs: &'tcx Substs<'tcx>)\n                                -> OperandRef<'tcx> {\n+        debug!(\"trans_static_method(ty={:?}, method={}, trait={}, substs={:?})\",\n+                ty,\n+                bcx.tcx().item_path_str(method_id),\n+                bcx.tcx().item_path_str(trait_id),\n+                substs);\n+\n         let ccx = bcx.ccx();\n         let tcx = bcx.tcx();\n-        let mname = tcx.item_name(method_id);\n         let subst::SeparateVecsPerParamSpace {\n             types: rcvr_type,\n             selfs: rcvr_self,\n@@ -118,6 +130,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         match vtbl {\n             traits::VtableImpl(traits::VtableImplData { impl_def_id, substs: imp_substs, .. }) => {\n                 assert!(!imp_substs.types.needs_infer());\n+\n+                let mname = tcx.item_name(method_id);\n+\n                 let subst::SeparateVecsPerParamSpace {\n                     types: impl_type,\n                     selfs: impl_self,\n@@ -130,6 +145,17 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let mthsubsts = tcx.mk_substs(mth.substs);\n                 self.trans_fn_ref(bcx, ty, mthsubsts, mth.method.def_id)\n             },\n+            traits::VtableClosure(data) => {\n+                let trait_closure_kind = bcx.tcx().lang_items.fn_trait_kind(trait_id).unwrap();\n+                let llfn = closure::trans_closure_method(bcx.ccx(),\n+                                                         data.closure_def_id,\n+                                                         data.substs,\n+                                                         trait_closure_kind);\n+                OperandRef {\n+                    ty: ty,\n+                    val: OperandValue::Immediate(llfn)\n+                }\n+            },\n             traits::VtableObject(ref data) => {\n                 let idx = traits::get_vtable_index_of_object_method(tcx, data, method_id);\n                 OperandRef::from_rvalue_datum("}, {"sha": "bd236e95d1c0a9db2d877ad2b7df2a0a3a2742bf", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7312e0a16328e6227d7fc593176a1fd12fea4342/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=7312e0a16328e6227d7fc593176a1fd12fea4342", "patch": "@@ -93,6 +93,26 @@ fn test8() -> isize {\n     Two::two()\n }\n \n+#[rustc_mir]\n+fn test_closure<F>(f: &F, x: i32, y: i32) -> i32\n+    where F: Fn(i32, i32) -> i32\n+{\n+    f(x, y)\n+}\n+\n+#[rustc_mir]\n+fn test_fn_object(f: &Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+    f(x, y)\n+}\n+\n+#[rustc_mir]\n+fn test_fn_impl(f: &&Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+    // This call goes through the Fn implementation for &Fn provided in\n+    // core::ops::impls. It expands to a static Fn::call() that calls the\n+    // Fn::call() implemenation of the object shim underneath.\n+    f(x, y)\n+}\n+\n fn main() {\n     assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n     assert_eq!(test2(98), 98);\n@@ -103,4 +123,10 @@ fn main() {\n     // assert_eq!(test6(&Foo, 12367), 12367);\n     assert_eq!(test7(), 1);\n     assert_eq!(test8(), 2);\n+\n+    let closure = |x: i32, y: i32| { x + y };\n+    assert_eq!(test_closure(&closure, 100, 1), 101);\n+    let function_object = &closure as &Fn(i32, i32) -> i32;\n+    assert_eq!(test_fn_object(function_object, 100, 2), 102);\n+    assert_eq!(test_fn_impl(&function_object, 100, 3), 103);\n }"}]}