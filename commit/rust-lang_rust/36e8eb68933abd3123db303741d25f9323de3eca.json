{"sha": "36e8eb68933abd3123db303741d25f9323de3eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZThlYjY4OTMzYWJkMzEyM2RiMzAzNzQxZDI1ZjkzMjNkZTNlY2E=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:50:50Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:55:12Z"}, "message": "Use push-approach over format! in rewrite_segment", "tree": {"sha": "7badd869ee3df2abe18d74a9c7e032331e0c8402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7badd869ee3df2abe18d74a9c7e032331e0c8402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e8eb68933abd3123db303741d25f9323de3eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e8eb68933abd3123db303741d25f9323de3eca", "html_url": "https://github.com/rust-lang/rust/commit/36e8eb68933abd3123db303741d25f9323de3eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e8eb68933abd3123db303741d25f9323de3eca/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57f182cd1087ccfb855d9393e691cd5c4ff690a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f182cd1087ccfb855d9393e691cd5c4ff690a9", "html_url": "https://github.com/rust-lang/rust/commit/57f182cd1087ccfb855d9393e691cd5c4ff690a9"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "204b5869f03643ac7771eeda1c86858c13801090", "filename": "rustfmt-core/src/types.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36e8eb68933abd3123db303741d25f9323de3eca/rustfmt-core%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e8eb68933abd3123db303741d25f9323de3eca/rustfmt-core%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ftypes.rs?ref=36e8eb68933abd3123db303741d25f9323de3eca", "patch": "@@ -200,10 +200,13 @@ fn rewrite_segment(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let ident_len = segment.identifier.to_string().len();\n+    let mut result = String::with_capacity(128);\n+    result.push_str(&segment.identifier.name.as_str());\n+\n+    let ident_len = result.len();\n     let shape = shape.shrink_left(ident_len)?;\n \n-    let params = if let Some(ref params) = segment.parameters {\n+    if let Some(ref params) = segment.parameters {\n         match **params {\n             ast::PathParameters::AngleBracketed(ref data)\n                 if !data.lifetimes.is_empty() || !data.types.is_empty()\n@@ -225,6 +228,7 @@ fn rewrite_segment(\n                 } else {\n                     \"\"\n                 };\n+                result.push_str(separator);\n \n                 let generics_shape =\n                     generics_shape_from_config(context.config, shape, separator.len())?;\n@@ -247,29 +251,27 @@ fn rewrite_segment(\n                 // Update position of last bracket.\n                 *span_lo = next_span_lo;\n \n-                format!(\"{}{}\", separator, generics_str)\n+                result.push_str(&generics_str)\n             }\n             ast::PathParameters::Parenthesized(ref data) => {\n                 let output = match data.output {\n                     Some(ref ty) => FunctionRetTy::Ty(ty.clone()),\n                     None => FunctionRetTy::Default(codemap::DUMMY_SP),\n                 };\n-                format_function_type(\n+                result.push_str(&format_function_type(\n                     data.inputs.iter().map(|x| &**x),\n                     &output,\n                     false,\n                     data.span,\n                     context,\n                     shape,\n-                )?\n+                )?);\n             }\n-            _ => String::new(),\n+            _ => (),\n         }\n-    } else {\n-        String::new()\n-    };\n+    }\n \n-    Some(format!(\"{}{}\", segment.identifier, params))\n+    Some(result)\n }\n \n fn format_function_type<'a, I>("}]}