{"sha": "dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMmYxNDI5ZTczZWRkMjNiMTczNmIzMWQyYjZjZTQ4YWI1ZDBlOWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-09T02:18:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-09T02:18:53Z"}, "message": "Merge pull request #2521 from topecongiro/issue-2520\n\nFix bugs when rewriting doc comments with code block", "tree": {"sha": "ede6303357046c74a2ca3f6325e3ea6f3e83cf3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ede6303357046c74a2ca3f6325e3ea6f3e83cf3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaoe8NCRBK7hj4Ov3rIwAAdHIIAHMlMkNbhNx/CILUQahU+yDG\nDY8sy0fXR9VJUyMIXnFuAkeKBjCSUfNmgB/MvCAc7VRiL4TK8IHHRViQlhNGdiKj\n7IQsnhRxdQUde8QMnQWt2ed0pjp0GFoREWM3SIG0/QTenSkNILLQkTEwlysOZvLw\nO5Vm+YE3UcRsx0FuA7vjL6M1dpcbvtn5aD//I2Hl6PdQeMWaB5vCB8NWSuI5ay8P\nU32Wkv0t48la6HWMpwgq1ArqzLboNu8p9Wl0lxXY1Wh6Q2x22bAhG5OLAle9Hd8Q\nZuBoaWPpoXRMx//HexooYW8wlF2FkwHqG9UFUHdnxM8UPJ+0I5Cdu2zmSaSlWec=\n=HwS7\n-----END PGP SIGNATURE-----\n", "payload": "tree ede6303357046c74a2ca3f6325e3ea6f3e83cf3e\nparent 58fb47a8cab589a2d0547cb4121d78dd7912cae3\nparent 484469899b1dc99c55826aa6c261fb3d3b1d7570\nauthor Nick Cameron <nrc@ncameron.org> 1520561933 +1300\ncommitter GitHub <noreply@github.com> 1520561933 +1300\n\nMerge pull request #2521 from topecongiro/issue-2520\n\nFix bugs when rewriting doc comments with code block"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "html_url": "https://github.com/rust-lang/rust/commit/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fb47a8cab589a2d0547cb4121d78dd7912cae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fb47a8cab589a2d0547cb4121d78dd7912cae3", "html_url": "https://github.com/rust-lang/rust/commit/58fb47a8cab589a2d0547cb4121d78dd7912cae3"}, {"sha": "484469899b1dc99c55826aa6c261fb3d3b1d7570", "url": "https://api.github.com/repos/rust-lang/rust/commits/484469899b1dc99c55826aa6c261fb3d3b1d7570", "html_url": "https://github.com/rust-lang/rust/commit/484469899b1dc99c55826aa6c261fb3d3b1d7570"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "2e4a46326201964e55375542c9c855e089219da5", "filename": "src/attr.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "patch": "@@ -21,8 +21,6 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use utils::{count_newlines, mk_sp};\n \n-use std::cmp;\n-\n /// Returns attributes on the given statement.\n pub fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n     match stmt.node {\n@@ -98,27 +96,26 @@ fn take_while_with_pred<'a, P>(\n where\n     P: Fn(&ast::Attribute) -> bool,\n {\n-    let mut last_index = 0;\n-    let mut iter = attrs.iter().enumerate().peekable();\n-    while let Some((i, attr)) = iter.next() {\n-        if !pred(attr) {\n+    let mut len = 0;\n+    let mut iter = attrs.iter().peekable();\n+\n+    while let Some(attr) = iter.next() {\n+        if pred(attr) {\n+            len += 1;\n+        } else {\n             break;\n         }\n-        if let Some(&(_, next_attr)) = iter.peek() {\n+        if let Some(next_attr) = iter.peek() {\n             // Extract comments between two attributes.\n             let span_between_attr = mk_sp(attr.span.hi(), next_attr.span.lo());\n             let snippet = context.snippet(span_between_attr);\n             if count_newlines(snippet) >= 2 || snippet.contains('/') {\n                 break;\n             }\n         }\n-        last_index = i;\n-    }\n-    if last_index == 0 {\n-        &[]\n-    } else {\n-        &attrs[..last_index + 1]\n     }\n+\n+    &attrs[..len]\n }\n \n /// Rewrite the same kind of attributes at the same time. This includes doc\n@@ -141,7 +138,7 @@ fn rewrite_first_group_attrs(\n             .join(\"\\n\");\n         return Some((\n             sugared_docs.len(),\n-            rewrite_doc_comment(&snippet, shape, context.config)?,\n+            rewrite_doc_comment(&snippet, shape.comment(context.config), context.config)?,\n         ));\n     }\n     // Rewrite `#[derive(..)]`s.\n@@ -250,13 +247,7 @@ impl Rewrite for ast::Attribute {\n         };\n         let snippet = context.snippet(self.span);\n         if self.is_sugared_doc {\n-            let doc_shape = Shape {\n-                width: cmp::min(shape.width, context.config.comment_width())\n-                    .checked_sub(shape.indent.width())\n-                    .unwrap_or(0),\n-                ..shape\n-            };\n-            rewrite_doc_comment(snippet, doc_shape, context.config)\n+            rewrite_doc_comment(snippet, shape.comment(context.config), context.config)\n         } else {\n             if contains_comment(snippet) {\n                 return Some(snippet.to_owned());"}, {"sha": "b0cdadaddd7760b2e18eb3f012dbf24467ff8554", "filename": "src/comment.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "patch": "@@ -391,6 +391,15 @@ fn rewrite_comment_inner(\n             } else {\n                 code_block_buffer.push_str(line);\n                 code_block_buffer.push('\\n');\n+\n+                if is_last {\n+                    // There is an code block that is not properly enclosed by backticks.\n+                    // We will leave them untouched.\n+                    result.push_str(&comment_line_separator);\n+                    result.push_str(&join_code_block_with_comment_line_separator(\n+                        &code_block_buffer,\n+                    ));\n+                }\n             }\n \n             continue;"}, {"sha": "047a50340eb18594b5d39e1baa3df2be8e299242", "filename": "src/shape.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n+use std::cmp::min;\n use std::ops::{Add, Sub};\n \n use Config;\n@@ -276,6 +277,17 @@ impl Shape {\n             .checked_sub(self.used_width() + self.width)\n             .unwrap_or(0)\n     }\n+\n+    pub fn comment(&self, config: &Config) -> Shape {\n+        let width = min(\n+            self.width,\n+            config\n+                .comment_width()\n+                .checked_sub(self.indent.width())\n+                .unwrap_or(0),\n+        );\n+        Shape { width, ..*self }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "d8ecf1f7d695d0f6f2768291cdeaca4f08fc891e", "filename": "tests/source/issue-2520.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/tests%2Fsource%2Fissue-2520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/tests%2Fsource%2Fissue-2520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2520.rs?ref=dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-normalize_comments: true\n+\n+//! ```rust\n+//! println!( \"hello, world\" );\n+//! ```\n+\n+#![deny( missing_docs )]\n+\n+//! ```rust\n+//! println!(\"hello, world\");\n+\n+#![deny( missing_docs )]"}, {"sha": "50d1037fe09424b8972002d95001fe842cd26e12", "filename": "tests/target/enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "patch": "@@ -145,8 +145,9 @@ pub enum Bencoding<'i> {\n     Str(&'i [u8]),\n     Int(i64),\n     List(Vec<Bencoding<'i>>),\n-    /// A bencoded dict value. The first element the slice of bytes in the source that the dict is\n-    /// composed of. The second is the dict, decoded into an ordered map.\n+    /// A bencoded dict value. The first element the slice of bytes in the\n+    /// source that the dict is composed of. The second is the dict,\n+    /// decoded into an ordered map.\n     // TODO make Dict \"structlike\" AKA name the two values.\n     Dict(&'i [u8], BTreeMap<&'i [u8], Bencoding<'i>>),\n }"}, {"sha": "012921f441c98f26e966a4e716efb8513b747053", "filename": "tests/target/issue-2520.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/tests%2Ftarget%2Fissue-2520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c/tests%2Ftarget%2Fissue-2520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2520.rs?ref=dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-normalize_comments: true\n+\n+//! ```rust\n+//! println!(\"hello, world\");\n+//! ```\n+\n+#![deny(missing_docs)]\n+\n+//! ```rust\n+//! println!(\"hello, world\");\n+\n+#![deny(missing_docs)]"}]}