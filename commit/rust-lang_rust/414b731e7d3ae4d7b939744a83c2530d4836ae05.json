{"sha": "414b731e7d3ae4d7b939744a83c2530d4836ae05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNGI3MzFlN2QzYWU0ZDdiOTM5NzQ0YTgzYzI1MzBkNDgzNmFlMDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T10:31:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T10:31:20Z"}, "message": "Merge #5024 #5026\n\n5024: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\n5026: Disable file watching when running slow tests r=matklad a=matklad\n\nThis should rid us of the intermittent test failure\n\nhttps://github.com/rust-analyzer/rust-analyzer/pull/5017#issuecomment-648717983\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "68b559beb5a2a4a653ed9596fe5820792c50900a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68b559beb5a2a4a653ed9596fe5820792c50900a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/414b731e7d3ae4d7b939744a83c2530d4836ae05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8yt4CRBK7hj4Ov3rIwAAdHIIAC+WECTQNUZ0KCSFkYiY4Mpd\nR+J8OQhEPJ5Kx3r5ZUS6tWHCgnkxUO/5wBI1Dw9kI6JXL4xHUxcji0YwGissBSwK\npNkEUQReVvfAruvBGzs+tzKRoj9MVlg2O5yxBmOvAe1ZoynOrbxqahfAIotdoyLc\nZIoE/Jcv4QwPzH1jt+DEz1oBZ0yoe1N/tNqwpKll9ZrV1eP5ICu+ry6wbC+04HdY\n73ikMjBr2+lCvcjotORrwGsEKF8Z3GuxSL3BwuGvDiatAwoVf4Aznv+hhJnxZ4sw\n3NMU5wNkKDG0BnhFx8DZfxlfWGEG6oWoJTekxi55U73719xfZtWGThWQih6JAFY=\n=+xUS\n-----END PGP SIGNATURE-----\n", "payload": "tree 68b559beb5a2a4a653ed9596fe5820792c50900a\nparent 5d84e27ba961e03c3f394b9a6ef2a035dcc183be\nparent 0a2b6087ec060bbf61330f0eec90cf5ca00c4f90\nparent a0b76161ab8507fd8abe0c1895aa5dd784978ae2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592994680 +0000\ncommitter GitHub <noreply@github.com> 1592994680 +0000\n\nMerge #5024 #5026\n\n5024: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\n5026: Disable file watching when running slow tests r=matklad a=matklad\n\nThis should rid us of the intermittent test failure\n\nhttps://github.com/rust-analyzer/rust-analyzer/pull/5017#issuecomment-648717983\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/414b731e7d3ae4d7b939744a83c2530d4836ae05", "html_url": "https://github.com/rust-lang/rust/commit/414b731e7d3ae4d7b939744a83c2530d4836ae05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/414b731e7d3ae4d7b939744a83c2530d4836ae05/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "html_url": "https://github.com/rust-lang/rust/commit/5d84e27ba961e03c3f394b9a6ef2a035dcc183be"}, {"sha": "0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90", "html_url": "https://github.com/rust-lang/rust/commit/0a2b6087ec060bbf61330f0eec90cf5ca00c4f90"}, {"sha": "a0b76161ab8507fd8abe0c1895aa5dd784978ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b76161ab8507fd8abe0c1895aa5dd784978ae2", "html_url": "https://github.com/rust-lang/rust/commit/a0b76161ab8507fd8abe0c1895aa5dd784978ae2"}], "stats": {"total": 182, "additions": 65, "deletions": 117}, "files": [{"sha": "05fb799d602a8e0c29de02e39ab21f5284cce55c", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=414b731e7d3ae4d7b939744a83c2530d4836ae05", "patch": "@@ -573,10 +573,9 @@ mod tests {\n \n             impl Expr {\n                 fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-                    Expr::Bin { <|> }\n+                    Expr::Bin { }\n                 }\n             }\n-\n         \";\n         let after = r\"\n             enum Expr {\n@@ -585,10 +584,9 @@ mod tests {\n \n             impl Expr {\n                 fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-                    Expr::Bin { lhs: (), rhs: () <|> }\n+                    Expr::Bin { lhs: (), rhs: () }\n                 }\n             }\n-\n         \";\n         check_apply_diagnostic_fix(before, after);\n     }"}, {"sha": "889b84c590561e838b75c1aa04f80eacec1c76ba", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 41, "deletions": 97, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=414b731e7d3ae4d7b939744a83c2530d4836ae05", "patch": "@@ -1,81 +1,19 @@\n //! FIXME: write short doc here\n-use std::{str::FromStr, sync::Arc};\n+use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n use ra_db::{CrateName, Env, FileSet, SourceRoot, VfsPath};\n-use test_utils::{extract_offset, extract_range, Fixture, CURSOR_MARKER};\n+use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER};\n \n use crate::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n };\n \n-#[derive(Debug)]\n-enum MockFileData {\n-    Plain { path: String, content: String },\n-    Fixture(Fixture),\n-}\n-\n-impl MockFileData {\n-    fn new(path: String, content: String) -> Self {\n-        // `Self::Plain` causes a false warning: 'variant is never constructed: `Plain` '\n-        // see https://github.com/rust-lang/rust/issues/69018\n-        MockFileData::Plain { path, content }\n-    }\n-\n-    fn path(&self) -> &str {\n-        match self {\n-            MockFileData::Plain { path, .. } => path.as_str(),\n-            MockFileData::Fixture(f) => f.path.as_str(),\n-        }\n-    }\n-\n-    fn content(&self) -> &str {\n-        match self {\n-            MockFileData::Plain { content, .. } => content,\n-            MockFileData::Fixture(f) => f.text.as_str(),\n-        }\n-    }\n-\n-    fn cfg_options(&self) -> CfgOptions {\n-        match self {\n-            MockFileData::Fixture(f) => {\n-                let mut cfg = CfgOptions::default();\n-                f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n-                f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n-                cfg\n-            }\n-            _ => CfgOptions::default(),\n-        }\n-    }\n-\n-    fn edition(&self) -> Edition {\n-        match self {\n-            MockFileData::Fixture(f) => {\n-                f.edition.as_ref().map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap())\n-            }\n-            _ => Edition::Edition2018,\n-        }\n-    }\n-\n-    fn env(&self) -> Env {\n-        match self {\n-            MockFileData::Fixture(f) => Env::from(f.env.iter()),\n-            _ => Env::default(),\n-        }\n-    }\n-}\n-\n-impl From<Fixture> for MockFileData {\n-    fn from(fixture: Fixture) -> Self {\n-        Self::Fixture(fixture)\n-    }\n-}\n-\n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n #[derive(Debug, Default)]\n pub struct MockAnalysis {\n-    files: Vec<MockFileData>,\n+    files: Vec<Fixture>,\n }\n \n impl MockAnalysis {\n@@ -89,52 +27,53 @@ impl MockAnalysis {\n     /// //- /foo.rs\n     /// struct Baz;\n     /// ```\n-    pub fn with_files(fixture: &str) -> MockAnalysis {\n-        let mut res = MockAnalysis::default();\n-        for entry in Fixture::parse(fixture) {\n-            res.add_file_fixture(entry);\n-        }\n+    pub fn with_files(ra_fixture: &str) -> MockAnalysis {\n+        let (res, pos) = MockAnalysis::with_fixture(ra_fixture);\n+        assert!(pos.is_none());\n         res\n     }\n \n     /// Same as `with_files`, but requires that a single file contains a `<|>` marker,\n     /// whose position is also returned.\n     pub fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n+        let (res, position) = MockAnalysis::with_fixture(fixture);\n+        let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n+        let offset = match range_or_offset {\n+            RangeOrOffset::Range(_) => panic!(),\n+            RangeOrOffset::Offset(it) => it,\n+        };\n+        (res, FilePosition { file_id, offset })\n+    }\n+\n+    fn with_fixture(fixture: &str) -> (MockAnalysis, Option<(FileId, RangeOrOffset)>) {\n         let mut position = None;\n         let mut res = MockAnalysis::default();\n         for mut entry in Fixture::parse(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n                 assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                let (offset, text) = extract_offset(&entry.text);\n+                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n                 entry.text = text;\n                 let file_id = res.add_file_fixture(entry);\n-                position = Some(FilePosition { file_id, offset });\n+                position = Some((file_id, range_or_offset));\n             } else {\n                 res.add_file_fixture(entry);\n             }\n         }\n-        let position = position.expect(\"expected a marker (<|>)\");\n         (res, position)\n     }\n \n     fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n-        let file_id = self.next_id();\n-        self.files.push(MockFileData::from(fixture));\n+        let file_id = FileId((self.files.len() + 1) as u32);\n+        self.files.push(fixture);\n         file_id\n     }\n \n-    fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n-        let (range, text) = extract_range(text);\n-        let file_id = self.next_id();\n-        self.files.push(MockFileData::new(path.to_string(), text));\n-        FileRange { file_id, range }\n-    }\n     pub fn id_of(&self, path: &str) -> FileId {\n         let (idx, _) = self\n             .files\n             .iter()\n             .enumerate()\n-            .find(|(_, data)| path == data.path())\n+            .find(|(_, data)| path == data.path)\n             .expect(\"no file in this mock\");\n         FileId(idx as u32 + 1)\n     }\n@@ -145,18 +84,23 @@ impl MockAnalysis {\n         let mut crate_graph = CrateGraph::default();\n         let mut root_crate = None;\n         for (i, data) in self.files.into_iter().enumerate() {\n-            let path = data.path();\n+            let path = data.path;\n             assert!(path.starts_with('/'));\n-            let cfg_options = data.cfg_options();\n+\n+            let mut cfg = CfgOptions::default();\n+            data.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n+            data.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n+            let edition: Edition =\n+                data.edition.and_then(|it| it.parse().ok()).unwrap_or(Edition::Edition2018);\n+\n             let file_id = FileId(i as u32 + 1);\n-            let edition = data.edition();\n-            let env = data.env();\n+            let env = Env::from(data.env.iter());\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n                 root_crate = Some(crate_graph.add_crate_root(\n                     file_id,\n                     edition,\n                     None,\n-                    cfg_options,\n+                    cfg,\n                     env,\n                     Default::default(),\n                 ));\n@@ -167,7 +111,7 @@ impl MockAnalysis {\n                     file_id,\n                     edition,\n                     Some(CrateName::new(crate_name).unwrap()),\n-                    cfg_options,\n+                    cfg,\n                     env,\n                     Default::default(),\n                 );\n@@ -179,7 +123,7 @@ impl MockAnalysis {\n             }\n             let path = VfsPath::new_virtual_path(path.to_string());\n             file_set.insert(file_id, path);\n-            change.change_file(file_id, Some(Arc::new(data.content().to_owned())));\n+            change.change_file(file_id, Some(Arc::new(data.text).to_owned()));\n         }\n         change.set_crate_graph(crate_graph);\n         change.set_roots(vec![SourceRoot::new_local(file_set)]);\n@@ -189,10 +133,6 @@ impl MockAnalysis {\n     pub fn analysis(self) -> Analysis {\n         self.analysis_host().analysis()\n     }\n-\n-    fn next_id(&self) -> FileId {\n-        FileId((self.files.len() + 1) as u32)\n-    }\n }\n \n /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n@@ -209,8 +149,12 @@ pub fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n }\n \n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n-pub fn single_file_with_range(ra_fixture: &str) -> (Analysis, FileRange) {\n-    let mut mock = MockAnalysis::default();\n-    let pos = mock.add_file_with_range(\"/main.rs\", ra_fixture);\n-    (mock.analysis(), pos)\n+pub fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n+    let (res, position) = MockAnalysis::with_fixture(ra_fixture);\n+    let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n+    let range = match range_or_offset {\n+        RangeOrOffset::Range(it) => it,\n+        RangeOrOffset::Offset(_) => panic!(),\n+    };\n+    (res.analysis(), FileRange { file_id, range })\n }"}, {"sha": "e3e0c763923c0b8279ac831983aa7f3564a62d2c", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=414b731e7d3ae4d7b939744a83c2530d4836ae05", "patch": "@@ -125,12 +125,12 @@ mod tests {\n     #[test]\n     fn test_resolve_crate_root() {\n         let mock = MockAnalysis::with_files(\n-            \"\n-        //- /bar.rs\n-        mod foo;\n-        //- /foo.rs\n-        // empty <|>\n-    \",\n+            r#\"\n+//- /bar.rs\n+mod foo;\n+//- /foo.rs\n+// empty\n+\"#,\n         );\n         let root_file = mock.id_of(\"/bar.rs\");\n         let mod_file = mock.id_of(\"/foo.rs\");"}, {"sha": "f716a3861678f048c5e2fa85413f50d95ff10c74", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=414b731e7d3ae4d7b939744a83c2530d4836ae05", "patch": "@@ -104,7 +104,7 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n mod tests {\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{single_file, single_file_with_range};\n+    use crate::mock_analysis::{analysis_and_range, single_file};\n \n     #[test]\n     fn test_syntax_tree_without_range() {\n@@ -184,7 +184,7 @@ SOURCE_FILE@0..60\n \n     #[test]\n     fn test_syntax_tree_with_range() {\n-        let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\n+        let (analysis, range) = analysis_and_range(r#\"<|>fn foo() {}<|>\"#.trim());\n         let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n \n         assert_eq_text!(\n@@ -206,7 +206,7 @@ FN_DEF@0..11\n             .trim()\n         );\n \n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r#\"fn test() {\n     <|>assert!(\"\n     fn foo() {\n@@ -242,7 +242,7 @@ EXPR_STMT@16..58\n \n     #[test]\n     fn test_syntax_tree_inside_string() {\n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r#\"fn test() {\n     assert!(\"\n <|>fn foo() {\n@@ -276,7 +276,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r###\"fn test() {\n     assert!(r#\"\n <|>fn foo() {\n@@ -310,7 +310,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r###\"fn test() {\n     assert!(r<|>#\"\n fn foo() {"}, {"sha": "8d88f992dd2c0a278b41f003cee1c973403efd18", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414b731e7d3ae4d7b939744a83c2530d4836ae05/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=414b731e7d3ae4d7b939744a83c2530d4836ae05", "patch": "@@ -19,7 +19,7 @@ use test_utils::{find_mismatch, Fixture};\n \n use ra_project_model::ProjectManifest;\n use rust_analyzer::{\n-    config::{ClientCapsConfig, Config, LinkedProject},\n+    config::{ClientCapsConfig, Config, FilesConfig, FilesWatcher, LinkedProject},\n     main_loop,\n };\n \n@@ -90,9 +90,9 @@ impl<'a> Project<'a> {\n             },\n             with_sysroot: self.with_sysroot,\n             linked_projects,\n+            files: FilesConfig { watcher: FilesWatcher::Client, exclude: Vec::new() },\n             ..Config::default()\n         };\n-\n         if let Some(f) = &self.config {\n             f(&mut config)\n         }\n@@ -173,8 +173,14 @@ impl Server {\n         self.client.sender.send(r.into()).unwrap();\n         while let Some(msg) = self.recv() {\n             match msg {\n-                Message::Request(req) if req.method == \"window/workDoneProgress/create\" => (),\n-                Message::Request(req) => panic!(\"unexpected request: {:?}\", req),\n+                Message::Request(req) => {\n+                    if req.method != \"window/workDoneProgress/create\"\n+                        && !(req.method == \"client/registerCapability\"\n+                            && req.params.to_string().contains(\"workspace/didChangeWatchedFiles\"))\n+                    {\n+                        panic!(\"unexpected request: {:?}\", req)\n+                    }\n+                }\n                 Message::Notification(_) => (),\n                 Message::Response(res) => {\n                     assert_eq!(res.id, id);"}]}