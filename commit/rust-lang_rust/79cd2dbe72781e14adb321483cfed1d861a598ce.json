{"sha": "79cd2dbe72781e14adb321483cfed1d861a598ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Y2QyZGJlNzI3ODFlMTRhZGIzMjE0ODNjZmVkMWQ4NjFhNTk4Y2U=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-15T22:02:05Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-15T22:02:05Z"}, "message": "iterator: work around method resolve bug", "tree": {"sha": "4044a2bb6d7c0b5b1125d41a0e0f707502fd7bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4044a2bb6d7c0b5b1125d41a0e0f707502fd7bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79cd2dbe72781e14adb321483cfed1d861a598ce", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79cd2dbe72781e14adb321483cfed1d861a598ce", "html_url": "https://github.com/rust-lang/rust/commit/79cd2dbe72781e14adb321483cfed1d861a598ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79cd2dbe72781e14adb321483cfed1d861a598ce/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2df66a84cd64211c22e58c48df07ce63bf5469a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df66a84cd64211c22e58c48df07ce63bf5469a3", "html_url": "https://github.com/rust-lang/rust/commit/2df66a84cd64211c22e58c48df07ce63bf5469a3"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "a505c5523598628ff2ff4e92c76cc421388f1688", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79cd2dbe72781e14adb321483cfed1d861a598ce/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd2dbe72781e14adb321483cfed1d861a598ce/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=79cd2dbe72781e14adb321483cfed1d861a598ce", "patch": "@@ -310,10 +310,10 @@ pub trait IteratorUtil<A> {\n     fn any_(&mut self, f: &fn(A) -> bool) -> bool;\n \n     /// Return the first element satisfying the specified predicate\n-    fn find(&mut self, predicate: &fn(&A) -> bool) -> Option<A>;\n+    fn find_(&mut self, predicate: &fn(&A) -> bool) -> Option<A>;\n \n     /// Return the index of the first element satisfying the specified predicate\n-    fn position(&mut self, predicate: &fn(A) -> bool) -> Option<uint>;\n+    fn position_(&mut self, predicate: &fn(A) -> bool) -> Option<uint>;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -448,7 +448,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n \n     /// Return the first element satisfying the specified predicate\n     #[inline(always)]\n-    fn find(&mut self, predicate: &fn(&A) -> bool) -> Option<A> {\n+    fn find_(&mut self, predicate: &fn(&A) -> bool) -> Option<A> {\n         for self.advance |x| {\n             if predicate(&x) { return Some(x) }\n         }\n@@ -457,7 +457,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n \n     /// Return the index of the first element satisfying the specified predicate\n     #[inline]\n-    fn position(&mut self, predicate: &fn(A) -> bool) -> Option<uint> {\n+    fn position_(&mut self, predicate: &fn(A) -> bool) -> Option<uint> {\n         let mut i = 0;\n         for self.advance |x| {\n             if predicate(x) {\n@@ -1087,16 +1087,16 @@ mod tests {\n     #[test]\n     fn test_find() {\n         let v = &[1, 3, 9, 27, 103, 14, 11];\n-        assert_eq!(*v.iter().find(|x| *x & 1 == 0).unwrap(), 14);\n-        assert_eq!(*v.iter().find(|x| *x % 3 == 0).unwrap(), 3);\n-        assert!(v.iter().find(|x| *x % 12 == 0).is_none());\n+        assert_eq!(*v.iter().find_(|x| *x & 1 == 0).unwrap(), 14);\n+        assert_eq!(*v.iter().find_(|x| *x % 3 == 0).unwrap(), 3);\n+        assert!(v.iter().find_(|x| *x % 12 == 0).is_none());\n     }\n \n     #[test]\n     fn test_position() {\n         let v = &[1, 3, 9, 27, 103, 14, 11];\n-        assert_eq!(v.iter().position(|x| *x & 1 == 0).unwrap(), 5);\n-        assert_eq!(v.iter().position(|x| *x % 3 == 0).unwrap(), 1);\n-        assert!(v.iter().position(|x| *x % 12 == 0).is_none());\n+        assert_eq!(v.iter().position_(|x| *x & 1 == 0).unwrap(), 5);\n+        assert_eq!(v.iter().position_(|x| *x % 3 == 0).unwrap(), 1);\n+        assert!(v.iter().position_(|x| *x % 12 == 0).is_none());\n     }\n }"}]}