{"sha": "fed12499e7d91f9cdfba5833e34d20e8fd19b898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZDEyNDk5ZTdkOTFmOWNkZmJhNTgzM2UzNGQyMGU4ZmQxOWI4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-03T20:17:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-03T20:17:08Z"}, "message": "Auto merge of #23002 - pnkfelix:fsk-box-place-runway, r=nikomatsakis\n\nRunway for RFC 809 (overloaded box/placement-in) by adding type annotations or explicit calls to `Box::new` where I found it necessary on PR #22086.\r\n\r\nI have broken this up into more than one PR because the entire commit chain (see PR #22086) is long, widespread and unwieldy to rebase frequently.\r\n\r\nTo my knowledge this is not a breaking change.  Also, there is in principle nothing stopping someone from reverting some/all of these annotations, since without the rest of the commit chain in #22086, the associated code would continue to compile.\r\n\r\nAll I can do is ask: Try to discourage others from removing seemingly \"unnecessary\" uses of the `Box` type or the `Box::new()` function, until the rest of RFC 809 lands.", "tree": {"sha": "2c5b377f6a53498f2555965e4903b77e4c8aad30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c5b377f6a53498f2555965e4903b77e4c8aad30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed12499e7d91f9cdfba5833e34d20e8fd19b898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed12499e7d91f9cdfba5833e34d20e8fd19b898", "html_url": "https://github.com/rust-lang/rust/commit/fed12499e7d91f9cdfba5833e34d20e8fd19b898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed12499e7d91f9cdfba5833e34d20e8fd19b898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "129173f1980e9ac03f7ef0fc0193c41235d07649", "url": "https://api.github.com/repos/rust-lang/rust/commits/129173f1980e9ac03f7ef0fc0193c41235d07649", "html_url": "https://github.com/rust-lang/rust/commit/129173f1980e9ac03f7ef0fc0193c41235d07649"}, {"sha": "cb1b0dd589c80c3edb94b8982ea33e000978f572", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1b0dd589c80c3edb94b8982ea33e000978f572", "html_url": "https://github.com/rust-lang/rust/commit/cb1b0dd589c80c3edb94b8982ea33e000978f572"}], "stats": {"total": 1270, "additions": 632, "deletions": 638}, "files": [{"sha": "e56706500a004f394e4bcc0b6a28c839a3f2ed5a", "filename": "src/doc/trpl/pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fdoc%2Ftrpl%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fdoc%2Ftrpl%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpointers.md?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -709,7 +709,7 @@ fn main() {\n         one_hundred: 100,\n     });\n \n-    let y = box foo(x);\n+    let y: Box<BigStruct> = box foo(x);\n }\n ```\n "}, {"sha": "dc1938cac1ada7b51f3d12e264d9e85245f9773d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -69,6 +69,8 @@\n //! }\n //! ```\n \n+use boxed::Box;\n+\n use core::prelude::*;\n \n use core::atomic;\n@@ -170,7 +172,7 @@ impl<T> Arc<T> {\n     pub fn new(data: T) -> Arc<T> {\n         // Start the weak pointer count as 1 which is the weak pointer that's\n         // held by all the strong pointers (kinda), see std/rc.rs for more info\n-        let x = box ArcInner {\n+        let x: Box<_> = box ArcInner {\n             strong: atomic::AtomicUsize::new(1),\n             weak: atomic::AtomicUsize::new(1),\n             data: data,"}, {"sha": "630ca837daac8eb2ca5b75d56a14ba825f316cd3", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -94,6 +94,7 @@ impl<T> Box<T> {\n     /// let x = Box::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline(always)]\n     pub fn new(x: T) -> Box<T> {\n         box x\n     }\n@@ -156,7 +157,7 @@ impl<T: Default> Default for Box<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Box<[T]> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn default() -> Box<[T]> { box [] }\n+    fn default() -> Box<[T]> { Box::<[T; 0]>::new([]) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3b93171386a076e13d1f77a83e31756f2e8fb4a0", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -387,6 +387,7 @@ mod test {\n     extern crate test;\n     use self::test::Bencher;\n     use core::ptr::PtrExt;\n+    use boxed::Box;\n     use heap;\n \n     #[test]\n@@ -404,7 +405,7 @@ mod test {\n     #[bench]\n     fn alloc_owned_small(b: &mut Bencher) {\n         b.iter(|| {\n-            box 10\n+            let _: Box<_> = box 10;\n         })\n     }\n }"}, {"sha": "b1fdf139b0c51c739ac10325c00f93857eb538f8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -96,9 +96,15 @@ pub mod heap;\n \n // Primitive types using the heaps above\n \n+// Need to conditionally define the mod from `boxed.rs` to avoid\n+// duplicating the lang-items when building in test cfg; but also need\n+// to allow code to have `use boxed::HEAP;`\n+// and `use boxed::Box;` declarations.\n #[cfg(not(test))]\n pub mod boxed;\n #[cfg(test)]\n+mod boxed { pub use std::boxed::{Box, HEAP}; }\n+#[cfg(test)]\n mod boxed_test;\n pub mod arc;\n pub mod rc;"}, {"sha": "763dcc7f256e91534ac4a6c07e8745c8f91767fc", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -795,6 +795,7 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n #[cfg(test)]\n mod tests {\n     use super::{Rc, Weak, weak_count, strong_count};\n+    use std::boxed::Box;\n     use std::cell::RefCell;\n     use std::option::Option;\n     use std::option::Option::{Some, None};\n@@ -826,7 +827,7 @@ mod tests {\n \n     #[test]\n     fn test_destructor() {\n-        let x = Rc::new(box 5);\n+        let x: Rc<Box<_>> = Rc::new(box 5);\n         assert_eq!(**x, 5);\n     }\n "}, {"sha": "4678fe15c8b7ba91efe53d6f9da1525a0ff5dbd1", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -581,11 +581,11 @@ mod tests {\n     #[bench]\n     pub fn bench_copy_nonarena(b: &mut Bencher) {\n         b.iter(|| {\n-            box Point {\n+            let _: Box<_> = box Point {\n                 x: 1,\n                 y: 2,\n                 z: 3,\n-            }\n+            };\n         })\n     }\n \n@@ -634,10 +634,10 @@ mod tests {\n     #[bench]\n     pub fn bench_noncopy_nonarena(b: &mut Bencher) {\n         b.iter(|| {\n-            box Noncopy {\n+            let _: Box<_> = box Noncopy {\n                 string: \"hello world\".to_string(),\n                 array: vec!( 1, 2, 3, 4, 5 ),\n-            }\n+            };\n         })\n     }\n "}, {"sha": "2e575ddb00a3275bb23cf8c33fedea0857050192", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -790,7 +790,7 @@ mod tests {\n \n     #[test]\n     fn test_push_unique() {\n-        let mut heap = BinaryHeap::from_vec(vec![box 2, box 4, box 9]);\n+        let mut heap = BinaryHeap::<Box<_>>::from_vec(vec![box 2, box 4, box 9]);\n         assert_eq!(heap.len(), 3);\n         assert!(*heap.peek().unwrap() == box 9);\n         heap.push(box 11);"}, {"sha": "5ca3cb380583bc3e5580048b779d9a9ac42e8ccc", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -984,7 +984,7 @@ mod tests {\n \n     #[test]\n     fn test_basic() {\n-        let mut m = LinkedList::new();\n+        let mut m = LinkedList::<Box<_>>::new();\n         assert_eq!(m.pop_front(), None);\n         assert_eq!(m.pop_back(), None);\n         assert_eq!(m.pop_front(), None);"}, {"sha": "ecff2c7cc4bb54d1fe2035eed31aaddc06fabfd6", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -1509,6 +1509,7 @@ fn merge_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Order\n \n #[cfg(test)]\n mod tests {\n+    use alloc::boxed::Box;\n     use core::cmp::Ordering::{Greater, Less, Equal};\n     use core::prelude::{Some, None, Clone};\n     use core::prelude::{Iterator, IteratorExt};\n@@ -1799,7 +1800,7 @@ mod tests {\n     #[test]\n     fn test_swap_remove_noncopyable() {\n         // Tests that we don't accidentally run destructors twice.\n-        let mut v = Vec::new();\n+        let mut v: Vec<Box<_>> = Vec::new();\n         v.push(box 0u8);\n         v.push(box 0u8);\n         v.push(box 0u8);\n@@ -1828,7 +1829,7 @@ mod tests {\n \n     #[test]\n     fn test_truncate() {\n-        let mut v = vec![box 6,box 5,box 4];\n+        let mut v: Vec<Box<_>> = vec![box 6,box 5,box 4];\n         v.truncate(1);\n         let v = v;\n         assert_eq!(v.len(), 1);\n@@ -1838,7 +1839,7 @@ mod tests {\n \n     #[test]\n     fn test_clear() {\n-        let mut v = vec![box 6,box 5,box 4];\n+        let mut v: Vec<Box<_>> = vec![box 6,box 5,box 4];\n         v.clear();\n         assert_eq!(v.len(), 0);\n         // If the unsafe block didn't drop things properly, we blow up here.\n@@ -1863,11 +1864,11 @@ mod tests {\n \n     #[test]\n     fn test_dedup_unique() {\n-        let mut v0 = vec![box 1, box 1, box 2, box 3];\n+        let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n         v0.dedup();\n-        let mut v1 = vec![box 1, box 2, box 2, box 3];\n+        let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n         v1.dedup();\n-        let mut v2 = vec![box 1, box 2, box 3, box 3];\n+        let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n         v2.dedup();\n         /*\n          * If the boxed pointers were leaked or otherwise misused, valgrind\n@@ -1877,11 +1878,11 @@ mod tests {\n \n     #[test]\n     fn test_dedup_shared() {\n-        let mut v0 = vec![box 1, box 1, box 2, box 3];\n+        let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n         v0.dedup();\n-        let mut v1 = vec![box 1, box 2, box 2, box 3];\n+        let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n         v1.dedup();\n-        let mut v2 = vec![box 1, box 2, box 3, box 3];\n+        let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n         v2.dedup();\n         /*\n          * If the pointers were leaked or otherwise misused, valgrind and/or\n@@ -2254,8 +2255,9 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_permute_fail() {\n-        let v = [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n-                 (box 0, Rc::new(0)), (box 0, Rc::new(0))];\n+        let v: [(Box<_>, Rc<_>); 4] =\n+            [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n+             (box 0, Rc::new(0)), (box 0, Rc::new(0))];\n         let mut i = 0;\n         for _ in v.permutations() {\n             if i == 2 {\n@@ -2849,7 +2851,7 @@ mod tests {\n \n     #[test]\n     fn test_to_vec() {\n-        let xs = box [1, 2, 3];\n+        let xs: Box<_> = box [1, 2, 3];\n         let ys = xs.to_vec();\n         assert_eq!(ys, [1, 2, 3]);\n     }"}, {"sha": "2e947ea24602aafdedb64848032d87ab8b53dc6a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -2130,8 +2130,8 @@ mod tests {\n     #[test]\n     fn test_clone_from() {\n         let mut v = vec!();\n-        let three = vec!(box 1, box 2, box 3);\n-        let two = vec!(box 4, box 5);\n+        let three: Vec<Box<_>> = vec!(box 1, box 2, box 3);\n+        let two: Vec<Box<_>> = vec!(box 4, box 5);\n         // zero, long\n         v.clone_from(&three);\n         assert_eq!(v, three);"}, {"sha": "515de74e340ac9d5fd6f7b3c78d784a1e05d82a2", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -1205,7 +1205,7 @@ mod test_map {\n \n     #[test]\n     fn test_move_iter() {\n-        let mut m = VecMap::new();\n+        let mut m: VecMap<Box<_>> = VecMap::new();\n         m.insert(1, box 2);\n         let mut called = false;\n         for (k, v) in m {"}, {"sha": "39f5d237a2b7364501ab7a52bbccc5ca2b8df2c4", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -68,7 +68,7 @@ fn any_downcast_ref() {\n #[test]\n fn any_downcast_mut() {\n     let mut a = 5_usize;\n-    let mut b = box 7_usize;\n+    let mut b: Box<_> = box 7_usize;\n \n     let a_r = &mut a as &mut Any;\n     let tmp: &mut uint = &mut *b;"}, {"sha": "da96680d84b50991dd541eedcca412a578b4d903", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -64,7 +64,8 @@ fn test_writer_hasher() {\n     //assert_eq!(hasher.hash(& s), 97 + 0xFF);\n     let cs: &[u8] = &[1u8, 2u8, 3u8];\n     assert_eq!(hash(& cs), 9);\n-    let cs: Box<[u8]> = box [1u8, 2u8, 3u8];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let cs: Box<[u8]> = Box::new([1u8, 2u8, 3u8]);\n     assert_eq!(hash(& cs), 9);\n \n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>"}, {"sha": "b1b10b582e55c5437ba1758ff65d4bbc853e121a", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -404,7 +404,8 @@ fn test_collect() {\n \n #[test]\n fn test_all() {\n-    let v: Box<[int]> = box [1, 2, 3, 4, 5];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let v: Box<[int]> = Box::new([1, 2, 3, 4, 5]);\n     assert!(v.iter().all(|&x| x < 10));\n     assert!(!v.iter().all(|&x| x % 2 == 0));\n     assert!(!v.iter().all(|&x| x > 100));\n@@ -413,7 +414,8 @@ fn test_all() {\n \n #[test]\n fn test_any() {\n-    let v: Box<[int]> = box [1, 2, 3, 4, 5];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let v: Box<[int]> = Box::new([1, 2, 3, 4, 5]);\n     assert!(v.iter().any(|&x| x < 10));\n     assert!(v.iter().any(|&x| x % 2 == 0));\n     assert!(!v.iter().any(|&x| x > 100));\n@@ -581,8 +583,9 @@ fn test_rposition() {\n #[test]\n #[should_fail]\n fn test_rposition_panic() {\n-    let v = [(box 0, box 0), (box 0, box 0),\n-             (box 0, box 0), (box 0, box 0)];\n+    let v: [(Box<_>, Box<_>); 4] =\n+        [(box 0, box 0), (box 0, box 0),\n+         (box 0, box 0), (box 0, box 0)];\n     let mut i = 0;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "59116f23d44b64ab7dbe50ba8e69702d4c557e41", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,7 +16,7 @@ use core::clone::Clone;\n #[test]\n fn test_get_ptr() {\n     unsafe {\n-        let x = box 0;\n+        let x: Box<_> = box 0;\n         let addr_x: *const int = mem::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();"}, {"sha": "ae43738d471eb8dc8ac833473aa920f9f72544d3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -79,7 +79,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n-            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            Box::new(|a, b, c, d| astencode::decode_inlined_item(a, b, c, d))) {\n             csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n@@ -119,7 +119,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n-            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            Box::new(|a, b, c, d| astencode::decode_inlined_item(a, b, c, d))) {\n             csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None"}, {"sha": "6f98b79e782c0bcd7841427fd7a0bd795fcb9e01", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -99,7 +99,7 @@ impl<'a> Registry<'a> {\n     /// It builds for you a `NormalTT` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(token::intern(name), NormalTT(box expander, None));\n+        self.register_syntax_extension(token::intern(name), NormalTT(Box::new(expander), None));\n     }\n \n     /// Register a compiler lint pass."}, {"sha": "844920ad5ece1a8d7ec7731df38714ee054eebfd", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -606,7 +606,7 @@ mod tests {\n \n         let tests = wikipedia_tests;\n \n-        let mut sh = box Sha256::new();\n+        let mut sh: Box<_> = box Sha256::new();\n \n         test_hash(&mut *sh, &tests);\n     }"}, {"sha": "13f882bc36318c79d895c651c043158505afdb6b", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -2969,7 +2969,7 @@ pub fn write_metadata(cx: &SharedCrateContext, krate: &ast::Crate) -> Vec<u8> {\n     }\n \n     let encode_inlined_item: encoder::EncodeInlinedItem =\n-        box |ecx, rbml_w, ii| astencode::encode_inlined_item(ecx, rbml_w, ii);\n+        Box::new(|ecx, rbml_w, ii| astencode::encode_inlined_item(ecx, rbml_w, ii));\n \n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let metadata = encoder::encode_metadata(encode_parms, krate);"}, {"sha": "14f92334073720d38d212e1d787cf1641408b517", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -40,7 +40,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     let csearch_result =\n         csearch::maybe_get_item_ast(\n             ccx.tcx(), fn_id,\n-            box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n+            Box::new(|a,b,c,d| astencode::decode_inlined_item(a, b, c, d)));\n \n     let inline_def = match csearch_result {\n         csearch::FoundAst::NotFound => {"}, {"sha": "f31dbf5138bb601ce6f6e13689cdec546055624b", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -152,12 +152,12 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                                           &closure_ty.sig).0;\n                 fcx.record_deferred_call_resolution(\n                     def_id,\n-                    box CallResolution {call_expr: call_expr,\n-                                        callee_expr: callee_expr,\n-                                        adjusted_ty: adjusted_ty,\n-                                        autoderefref: autoderefref,\n-                                        fn_sig: fn_sig.clone(),\n-                                        closure_def_id: def_id});\n+                    Box::new(CallResolution {call_expr: call_expr,\n+                                         callee_expr: callee_expr,\n+                                         adjusted_ty: adjusted_ty,\n+                                         autoderefref: autoderefref,\n+                                         fn_sig: fn_sig.clone(),\n+                                         closure_def_id: def_id}));\n                 return Some(CallStep::DeferredClosure(fn_sig));\n             }\n         }"}, {"sha": "f1634cd422935db42c534236ab13e3abced87055", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -323,22 +323,22 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n-        let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr();\n-        let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr();\n-        self.read_or(&mut [box ipv4_addr, box ipv6_addr])\n+        let ipv4_addr: Box<_> = box |p: &mut Parser| p.read_ipv4_addr();\n+        let ipv6_addr: Box<_> = box |p: &mut Parser| p.read_ipv6_addr();\n+        self.read_or(&mut [ipv4_addr, ipv6_addr])\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n         let ip_addr = |p: &mut Parser| {\n-            let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n-            let ipv6_p = |p: &mut Parser| {\n+            let ipv4_p: Box<_> = box |p: &mut Parser| p.read_ip_addr();\n+            let ipv6_p: Box<_> = box |p: &mut Parser| {\n                 let open_br = |p: &mut Parser| p.read_given_char('[');\n                 let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n                 let clos_br = |p: &mut Parser| p.read_given_char(']');\n                 p.read_seq_3::<char, IpAddr, char, _, _, _>(open_br, ip_addr, clos_br)\n                         .map(|t| match t { (_, ip, _) => ip })\n             };\n-            p.read_or(&mut [box ipv4_p, box ipv6_p])\n+            p.read_or(&mut [ipv4_p, ipv6_p])\n         };\n         let colon = |p: &mut Parser| p.read_given_char(':');\n         let port  = |p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);"}, {"sha": "85bf4908f8397bf5ffe65c9835134109a8b4b84e", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -547,8 +547,9 @@ mod tests {\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let _t = thread::spawn(move|| {\n-            set_stdout(box w);\n+            set_stdout(Box::new(w));\n             println!(\"hello!\");\n         });\n         assert_eq!(r.read_to_string().unwrap(), \"hello!\\n\");\n@@ -560,8 +561,9 @@ mod tests {\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let _t = thread::spawn(move || -> () {\n-            set_stderr(box w);\n+            set_stderr(Box::new(w));\n             panic!(\"my special message\");\n         });\n         let s = r.read_to_string().unwrap();"}, {"sha": "de5f2141095f30705e99a467f9c5b16e746a04d6", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,6 +15,7 @@\n \n // FIXME: These functions take Durations but only pass ms to the backend impls.\n \n+use boxed::Box;\n use sync::mpsc::{Receiver, Sender, channel};\n use time::Duration;\n use old_io::IoResult;\n@@ -143,7 +144,7 @@ impl Timer {\n         let (tx, rx) = channel();\n         // Short-circuit the timer backend for 0 duration\n         if in_ms_u64(duration) != 0 {\n-            self.inner.oneshot(in_ms_u64(duration), box TimerCallback { tx: tx });\n+            self.inner.oneshot(in_ms_u64(duration), Box::new(TimerCallback { tx: tx }));\n         } else {\n             tx.send(()).unwrap();\n         }\n@@ -204,7 +205,7 @@ impl Timer {\n         // not clear what use a 0ms period is anyway...\n         let ms = if ms == 0 { 1 } else { ms };\n         let (tx, rx) = channel();\n-        self.inner.period(ms, box TimerCallback { tx: tx });\n+        self.inner.period(ms, Box::new(TimerCallback { tx: tx }));\n         return rx\n     }\n }"}, {"sha": "ebb2a2e4827a10770098405b7c2b3e9d44c60c21", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -166,7 +166,7 @@ fn rust_panic(cause: Box<Any + Send + 'static>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n     unsafe {\n-        let exception = box Exception {\n+        let exception: Box<_> = box Exception {\n             uwe: uw::_Unwind_Exception {\n                 exception_class: rust_exception_class(),\n                 exception_cleanup: exception_cleanup,\n@@ -506,7 +506,7 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, uint)) -\n \n     let mut s = String::new();\n     let _ = write!(&mut s, \"{}\", msg);\n-    begin_unwind_inner(box s, file_line)\n+    begin_unwind_inner(Box::new(s), file_line)\n }\n \n /// This is the entry point of unwinding for panic!() and assert!().\n@@ -521,7 +521,7 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, uint)) ->\n     // panicking.\n \n     // see below for why we do the `Any` coercion here.\n-    begin_unwind_inner(box msg, file_line)\n+    begin_unwind_inner(Box::new(msg), file_line)\n }\n \n /// The core of the unwinding."}, {"sha": "1a1e9e69e71122eabe6254036f1e174fcb1a8aaa", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -1044,13 +1044,13 @@ mod test {\n \n     #[test]\n     fn drop_full() {\n-        let (tx, _rx) = channel();\n+        let (tx, _rx) = channel::<Box<int>>();\n         tx.send(box 1).unwrap();\n     }\n \n     #[test]\n     fn drop_full_shared() {\n-        let (tx, _rx) = channel();\n+        let (tx, _rx) = channel::<Box<int>>();\n         drop(tx.clone());\n         drop(tx.clone());\n         tx.send(box 1).unwrap();\n@@ -1389,7 +1389,7 @@ mod test {\n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n         for _ in 0..stress_factor() {\n-            let (tx, rx) = channel();\n+            let (tx, rx) = channel::<Box<int>>();\n             let _t = thread::spawn(move|| {\n                 tx.send(box 10).unwrap();\n             });\n@@ -1566,7 +1566,7 @@ mod sync_tests {\n \n     #[test]\n     fn drop_full() {\n-        let (tx, _rx) = sync_channel(1);\n+        let (tx, _rx) = sync_channel::<Box<int>>(1);\n         tx.send(box 1).unwrap();\n     }\n "}, {"sha": "14ed253d8e27ef8f056d7c1e62a4dd5edeb7be09", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -164,7 +164,7 @@ mod tests {\n \n     #[test]\n     fn test_full() {\n-        let q = Queue::new();\n+        let q: Queue<Box<_>> = Queue::new();\n         q.push(box 1);\n         q.push(box 2);\n     }"}, {"sha": "3fb13739aa75af4b0a4cc766791a73fc7b39da81", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -289,7 +289,7 @@ mod test {\n     #[test]\n     fn drop_full() {\n         unsafe {\n-            let q = Queue::new(0);\n+            let q: Queue<Box<_>> = Queue::new(0);\n             q.push(box 1);\n             q.push(box 2);\n         }"}, {"sha": "9be77e78ed1f3cb910a7fb5f542fba12b162e542", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -804,7 +804,7 @@ mod test {\n     fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk<'static>) {\n         let (tx, rx) = channel();\n \n-        let x = box 1;\n+        let x: Box<_> = box 1;\n         let x_in_parent = (&*x) as *const i32 as usize;\n \n         spawnfn(Thunk::new(move|| {"}, {"sha": "a9cb05b368f02a200acd64526b82dee685153639", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -33,7 +33,7 @@ impl<'a,A,R> Thunk<'a,A,R> {\n         where F : FnOnce(A) -> R, F : Send + 'a\n     {\n         Thunk {\n-            invoke: box func\n+            invoke: Box::<F>::new(func)\n         }\n     }\n "}, {"sha": "e094cbcac5378a8b3aa59ab8332e13057c12d596", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -223,7 +223,7 @@ pub fn mk_span_handler(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n pub fn default_handler(color_config: ColorConfig,\n                        registry: Option<diagnostics::registry::Registry>,\n                        can_emit_warnings: bool) -> Handler {\n-    mk_handler(can_emit_warnings, box EmitterWriter::stderr(color_config, registry))\n+    mk_handler(can_emit_warnings, Box::new(EmitterWriter::stderr(color_config, registry)))\n }\n \n pub fn mk_handler(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n@@ -352,11 +352,11 @@ impl EmitterWriter {\n         if use_color {\n             let dst = match term::stderr() {\n                 Some(t) => Terminal(t),\n-                None    => Raw(box stderr),\n+                None    => Raw(Box::new(stderr)),\n             };\n             EmitterWriter { dst: dst, registry: registry }\n         } else {\n-            EmitterWriter { dst: Raw(box stderr), registry: registry }\n+            EmitterWriter { dst: Raw(Box::new(stderr)), registry: registry }\n         }\n     }\n "}, {"sha": "ad5ca627a935ad7dd77b1c0b2e910293de921a98", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -465,7 +465,7 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n                                         -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n-        NormalTT(box f, None)\n+        NormalTT(Box::new(f), None)\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n@@ -489,9 +489,9 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"derive\"),\n-                            Decorator(box ext::deriving::expand_meta_derive));\n+                            Decorator(Box::new(ext::deriving::expand_meta_derive)));\n     syntax_expanders.insert(intern(\"deriving\"),\n-                            Decorator(box ext::deriving::expand_deprecated_deriving));\n+                            Decorator(Box::new(ext::deriving::expand_deprecated_deriving)));\n \n     if ecfg.enable_quotes() {\n         // Quasi-quoting expanders"}, {"sha": "f89f3ab55f3f90ec064847743f893c2143e4ebf5", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -40,9 +40,9 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self_,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |c, s, sub| {\n+                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n                     cs_clone(\"Clone\", c, s, sub)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "c02af437b1c7b987fdca37f696231b14740941bc", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiAnd, subexpr, eq)\n             },\n             cx.expr_bool(span, true),\n-            box |cx, span, _, _| cx.expr_bool(span, false),\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, false)),\n             cx, span, substr)\n     }\n     fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n@@ -57,7 +57,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiOr, subexpr, eq)\n             },\n             cx.expr_bool(span, false),\n-            box |cx, span, _, _| cx.expr_bool(span, true),\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, true)),\n             cx, span, substr)\n     }\n \n@@ -72,9 +72,9 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     $f(a, b, c)\n-                })\n+                }))\n             }\n         } }\n     }"}, {"sha": "b2b2654801863daa9512e5f9d029332282f3ffbc", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -38,9 +38,9 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |cx, span, substr| {\n+                combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n-                })\n+                }))\n             }\n         } }\n     }\n@@ -61,9 +61,9 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         args: vec![borrowed_self()],\n         ret_ty: ret_ty,\n         attributes: attrs,\n-        combine_substructure: combine_substructure(box |cx, span, substr| {\n+        combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n-        })\n+        }))\n     };\n \n     let trait_def = TraitDef {\n@@ -175,13 +175,13 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         equals_expr.clone(),\n-        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 some_ordering_collapsed(cx, span, PartialCmpOp, tag_tuple)\n             }\n-        },\n+        }),\n         cx, span, substr)\n }\n \n@@ -223,7 +223,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             cx.expr_binary(span, ast::BiOr, cmp, and)\n         },\n         cx.expr_bool(span, equal),\n-        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n@@ -233,6 +233,6 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n                 };\n                 some_ordering_collapsed(cx, span, op, tag_tuple)\n             }\n-        },\n+        }),\n         cx, span, substr)\n }"}, {"sha": "83164d242e8fbd730fdcc9784bc4a4bb104403f0", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -32,7 +32,8 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in derive(Eq)?\"),\n+                       Box::new(|cx, sp, _, _| {\n+                           cx.span_bug(sp, \"non matching enums in derive(Eq)?\") }),\n                        cx,\n                        span,\n                        substr)\n@@ -57,9 +58,9 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n                 args: vec!(),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     cs_total_eq_assert(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "1de955856e712c208d5375574ccf3e7de76096c4", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -41,9 +41,9 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(path_std!(cx, core::cmp::Ordering)),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     cs_cmp(a, b, c)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),\n@@ -131,12 +131,12 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         cx.expr_path(equals_path.clone()),\n-        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derives(Ord)`\")\n             } else {\n                 ordering_collapsed(cx, span, tag_tuple)\n             }\n-        },\n+        }),\n         cx, span, substr)\n }"}, {"sha": "6ce68948e4b010615b338836b0e85b49cd853a8b", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -82,9 +82,9 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     decodable_substructure(a, b, c, krate)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "f9991a233547c9dbc24511005df9643b38f65802", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -40,9 +40,9 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self_,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     default_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "d7961d7da00f1e2e296bfd2e1f04c0a2b4a18398", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -158,9 +158,9 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     encodable_substructure(a, b, c)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "da80c7a0e6d15553f240e727654559bb33b71342", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -45,9 +45,9 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(arg), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n                 attributes: vec![],\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     hash_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "b2d0a9f6b51ad329a30b044332f2d32cbcc37880", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -45,9 +45,9 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs.clone(),\n-                combine_substructure: combine_substructure(box |c, s, sub| {\n+                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n                     cs_from(\"i64\", c, s, sub)\n-                }),\n+                })),\n             },\n             MethodDef {\n                 name: \"from_u64\",\n@@ -60,9 +60,9 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |c, s, sub| {\n+                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n                     cs_from(\"u64\", c, s, sub)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "8a764fded6fd9d3cf3aca73028cffb07146ae51f", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -55,9 +55,9 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 ),\n                 ret_ty: Self_,\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     rand_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "ce89c541fd44b89f6677d9193c266c834b80ac30", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -46,9 +46,9 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 args: vec!(fmtr),\n                 ret_ty: Literal(path_std!(cx, core::fmt::Result)),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     show_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ],\n         associated_types: Vec::new(),"}, {"sha": "0ac78209b6f4f212fbc039444e04a226720c6c30", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -479,7 +479,7 @@ pub fn parse(sess: &ParseSess,\n                 }\n                 rdr.next_token();\n             } else /* bb_eis.len() == 1 */ {\n-                let mut rust_parser = Parser::new(sess, cfg.clone(), box rdr.clone());\n+                let mut rust_parser = Parser::new(sess, cfg.clone(), Box::new(rdr.clone()));\n \n                 let mut ei = bb_eis.pop().unwrap();\n                 match ei.top_elts.get_tt(ei.idx) {"}, {"sha": "db7db4b83ace2176f387d431738744031beaca60", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -180,7 +180,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            Some(named_matches),\n                                            imported_from,\n                                            rhs);\n-                let mut p = Parser::new(cx.parse_sess(), cx.cfg(), box trncbr);\n+                let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n                 p.check_unknown_macro_variable();\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n@@ -267,7 +267,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         _ => cx.span_bug(def.span, \"wrong-structured rhs\")\n     };\n \n-    let exp = box MacroRulesMacroExpander {\n+    let exp: Box<_> = box MacroRulesMacroExpander {\n         name: def.ident,\n         imported_from: def.imported_from,\n         lhses: lhses,"}, {"sha": "25f1f9b8480a1204d71129325688b6f1d43c72be", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -30,7 +30,7 @@ impl<T:fmt::Debug> fmt::Debug for OwnedSlice<T> {\n \n impl<T> OwnedSlice<T> {\n     pub fn empty() -> OwnedSlice<T> {\n-        OwnedSlice  { data: box [] }\n+        OwnedSlice  { data: Box::new([]) }\n     }\n \n     #[inline(never)]"}, {"sha": "bbe1ddfd4cfc511de66e6e556ea78177d0ed1cdd", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -1484,8 +1484,9 @@ mod test {\n     use std::old_io::util;\n \n     fn mk_sh() -> diagnostic::SpanHandler {\n-        let emitter = diagnostic::EmitterWriter::new(box util::NullWriter, None);\n-        let handler = diagnostic::mk_handler(true, box emitter);\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let emitter = diagnostic::EmitterWriter::new(Box::new(util::NullWriter), None);\n+        let handler = diagnostic::mk_handler(true, Box::new(emitter));\n         diagnostic::mk_span_handler(handler, CodeMap::new())\n     }\n "}, {"sha": "d9afc1df28ebf79348ec3bb8255a3d803ba78519", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -36,10 +36,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         token::intern(\"into_foo\"),\n-        Modifier(box expand_into_foo));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        Modifier(Box::new(expand_into_foo)));\n     reg.register_syntax_extension(\n         token::intern(\"into_multi_foo\"),\n-        MultiModifier(box expand_into_foo_multi));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        MultiModifier(Box::new(expand_into_foo_multi)));\n }\n \n fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])"}, {"sha": "20c84c4ba5b4a9863d9623e558bb940d9cc7bb98", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -46,5 +46,6 @@ impl TTMacroExpander for Expander {\n pub fn plugin_registrar(reg: &mut Registry) {\n     let args = reg.args().clone();\n     reg.register_syntax_extension(token::intern(\"plugin_args\"),\n-        NormalTT(box Expander { args: args, }, None));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        NormalTT(Box::new(Expander { args: args, }), None));\n }"}, {"sha": "5cfe62d967c580b9face83b4cb4c074fe79fd429", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -146,7 +146,7 @@ impl Table {\n     fn search_remainder<C:TableCallback>(item: &mut Entry, key: Code, c: C) {\n         match item.next {\n             None => {\n-                let mut entry = box Entry {\n+                let mut entry: Box<_> = box Entry {\n                     code: key,\n                     count: 0,\n                     next: None,\n@@ -170,7 +170,7 @@ impl Table {\n \n         {\n             if self.items[index as usize].is_none() {\n-                let mut entry = box Entry {\n+                let mut entry: Box<_> = box Entry {\n                     code: key,\n                     count: 0,\n                     next: None,"}, {"sha": "f308743ad136d276fbf2c472bbc5690ad0a2ac69", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -124,7 +124,7 @@ impl Sudoku {\n     fn next_color(&mut self, row: u8, col: u8, start_color: u8) -> bool {\n         if start_color < 10u8 {\n             // colors not yet used\n-            let mut avail = box Colors::new(start_color);\n+            let mut avail: Box<_> = box Colors::new(start_color);\n \n             // drop colors already in use in neighbourhood\n             self.drop_colors(&mut *avail, row, col);"}, {"sha": "b1abbad525356a5ff43f6a894b765ff3d5a20290", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,7 +16,7 @@ struct Foo(Box<isize>, isize);\n struct Bar(isize, isize);\n \n fn main() {\n-    let x = (box 1, 2);\n+    let x: (Box<_>, _) = (box 1, 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n "}, {"sha": "7913f9ac90300c80f9a54abf4e6dc5a62432fe79", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -23,7 +23,7 @@ fn add(v: &usize, w: usize) -> usize {\n }\n \n fn implicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n \n     // Note the danger here:\n     //\n@@ -36,7 +36,7 @@ fn implicit() {\n }\n \n fn explicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n     add(\n         &*a,\n         rewrite(&mut a)); //~ ERROR cannot borrow"}, {"sha": "e24d4e87add83613a27f3d3acc7480cd79c84fd7", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -23,7 +23,7 @@ fn add(v: &usize, w: Box<usize>) -> usize {\n }\n \n fn implicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n \n     // Note the danger here:\n     //\n@@ -36,7 +36,7 @@ fn implicit() {\n }\n \n fn explicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n     add(\n         &*a,\n         a); //~ ERROR cannot move"}, {"sha": "3662e23a4122f71da9c7e74be2b7aa23773cb9b6", "filename": "src/test/compile-fail/borrowck-borrow-immut-deref-of-box-as-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -18,7 +18,7 @@ impl A {\n }\n \n pub fn main() {\n-    let a = box A;\n+    let a: Box<_> = box A;\n     a.foo();\n     //~^ ERROR cannot borrow immutable `Box` content `*a` as mutable\n }"}, {"sha": "8bbecfd48c6dca78c5b74dd6762f232319edb426", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,9 +16,10 @@ extern crate collections;\n use std::collections::HashMap;\n \n fn main() {\n-    let tmp;\n+    let tmp: Box<_>;\n     let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n-    buggy_map.insert(42, &*box 1); //~ ERROR borrowed value does not live long enough\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n \n     // but it is ok if we use a temporary\n     tmp = box 2;"}, {"sha": "59514f75a77d8b07bb39f68791677173a108fbd4", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -31,100 +31,100 @@ struct D {\n }\n \n fn copy_after_move() {\n-    let a = box A { x: box 0, y: 1 };\n+    let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n     let _y = a.y; //~ ERROR use of moved\n     //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn move_after_move() {\n-    let a = box B { x: box 0, y: box 1 };\n+    let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n     let _y = a.y; //~ ERROR use of moved\n     //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn borrow_after_move() {\n-    let a = box A { x: box 0, y: 1 };\n+    let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n     let _y = &a.y; //~ ERROR use of moved\n     //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn move_after_borrow() {\n-    let a = box B { x: box 0, y: box 1 };\n+    let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn copy_after_mut_borrow() {\n-    let mut a = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = a.y; //~ ERROR cannot use\n }\n \n fn move_after_mut_borrow() {\n-    let mut a = box B { x: box 0, y: box 1 };\n+    let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn borrow_after_mut_borrow() {\n-    let mut a = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = &a.y; //~ ERROR cannot borrow\n }\n \n fn mut_borrow_after_borrow() {\n-    let mut a = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n     let _y = &mut a.y; //~ ERROR cannot borrow\n }\n \n fn copy_after_move_nested() {\n-    let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n     let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_move_nested() {\n-    let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n     let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn borrow_after_move_nested() {\n-    let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n     let _y = &a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_borrow_nested() {\n-    let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn copy_after_mut_borrow_nested() {\n-    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y; //~ ERROR cannot use\n }\n \n fn move_after_mut_borrow_nested() {\n-    let mut a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn borrow_after_mut_borrow_nested() {\n-    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n     let _y = &a.y; //~ ERROR cannot borrow\n }\n \n fn mut_borrow_after_borrow_nested() {\n-    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n     let _y = &mut a.y; //~ ERROR cannot borrow\n }"}, {"sha": "7626f354eb46415a13575402bf74991f11b65bc5", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,19 +11,19 @@\n // Ensure that invoking a closure counts as a unique immutable borrow\n \n #![feature(unboxed_closures)]\n-#![feature(box_syntax)]\n \n type Fn<'a> = Box<FnMut() + 'a>;\n \n struct Test<'a> {\n     f: Box<FnMut() + 'a>\n }\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n fn call<F>(mut f: F) where F: FnMut(Fn) {\n-    f(box || {\n+    f(Box::new(|| {\n     //~^ ERROR: cannot borrow `f` as mutable more than once\n-        f(box || {})\n-    });\n+        f((Box::new(|| {})))\n+    }));\n }\n \n fn test1() {\n@@ -58,11 +58,12 @@ fn test6() {\n fn test7() {\n     fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n-    f(box |a| {\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    f(Box::new(|a| {\n         foo(f);\n         //~^ ERROR cannot move `f` into closure because it is borrowed\n         //~| ERROR cannot move out of captured outer variable in an `FnMut` closure\n-    }, 3);\n+    }), 3);\n }\n \n fn main() {}"}, {"sha": "aaa0766121543fc5c4b0f2a000fb424b2d2ff106", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -52,7 +52,7 @@ fn e() {\n }\n \n fn f() {\n-    let mut x = box 3;\n+    let mut x: Box<_> = box 3;\n     let c1 = || get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }\n@@ -62,7 +62,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x = box Foo { f: box 3 };\n+    let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n     *x.f = 5; //~ ERROR cannot assign to `*x.f`\n }\n@@ -72,7 +72,7 @@ fn h() {\n         f: Box<isize>\n     }\n \n-    let mut x = box Foo { f: box 3 };\n+    let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n     let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n }"}, {"sha": "29546abe0bb20bb66b40b284ea23a686840e61af", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -50,7 +50,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x = box Foo { f: box 3 };\n+    let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "bb474342a7c6f5bcb61fbab51b66e4ba8105f189", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,7 +25,7 @@ impl Drop for Foo {\n }\n \n fn main() {\n-  let mut ptr = box Foo { x: 0 };\n+  let mut ptr: Box<_> = box Foo { x: 0 };\n   let mut test = |foo: &Foo| {\n     ptr = box Foo { x: ptr.x + 1 };\n   };"}, {"sha": "b6b260065557a16baac6f2de819475bba376c8a4", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     for &a in &f.a {  //~ ERROR cannot move out\n     }\n \n-    let x = Some(box 1);\n+    let x: Option<Box<_>> = Some(box 1);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n }"}, {"sha": "deae1fbad20c8484f65d2d6b47b9d7c3ac78b71f", "filename": "src/test/compile-fail/borrowck-issue-14498.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -18,7 +18,7 @@ struct B<'a> { a: Box<&'a mut isize> }\n \n fn borrow_in_var_from_var() {\n     let mut x: isize = 1;\n-    let y = box &mut x;\n+    let y: Box<_> = box &mut x;\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n@@ -28,7 +28,7 @@ fn borrow_in_var_from_var() {\n \n fn borrow_in_var_from_field() {\n     let mut x = A { a: 1 };\n-    let y = box &mut x.a;\n+    let y: Box<_> = box &mut x.a;\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed"}, {"sha": "0e1712137d34e27c554732cd7aa48e869ef3ee16", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1);\n+    let x: Option<Box<_>> = Some(box 1);\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move"}, {"sha": "a389a4a5593f07ca879ecbb53f9b6d200636da51", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1);\n+    let x: Option<Box<_>> = Some(box 1);\n     match x {\n       Some(ref y) => {\n         let _b = *y; //~ ERROR cannot move out"}, {"sha": "0efe8622621785c0e762210c11463bd3b51db05c", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -30,7 +30,7 @@ fn pre_freeze_cond() {\n     // In this instance, the freeze is conditional and starts before\n     // the mut borrow.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w;\n     if cond() {\n         _w = &v;\n@@ -42,7 +42,7 @@ fn pre_freeze_else() {\n     // In this instance, the freeze and mut borrow are on separate sides\n     // of the if.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w;\n     if cond() {\n         _w = &v;"}, {"sha": "f841fedf75af913cd03a0e26fe7f17c3b3dfaf5b", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -28,7 +28,7 @@ fn inc(v: &mut Box<isize>) {\n fn loop_overarching_alias_mut() {\n     // In this instance, the borrow encompasses the entire loop.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n@@ -39,7 +39,7 @@ fn loop_overarching_alias_mut() {\n fn block_overarching_alias_mut() {\n     // In this instance, the borrow encompasses the entire closure call.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     for _ in 0..3 {\n         borrow(&*v); //~ ERROR cannot borrow\n@@ -50,8 +50,8 @@ fn block_overarching_alias_mut() {\n fn loop_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n         borrow_mut(&mut *v); //~ ERROR cannot borrow\n@@ -62,8 +62,8 @@ fn loop_aliased_mut() {\n fn while_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n         borrow_mut(&mut *v); //~ ERROR cannot borrow\n@@ -75,8 +75,8 @@ fn while_aliased_mut() {\n fn loop_aliased_mut_break() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n         borrow_mut(&mut *v);\n@@ -89,8 +89,8 @@ fn loop_aliased_mut_break() {\n fn while_aliased_mut_break() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n         borrow_mut(&mut *v);\n@@ -101,8 +101,8 @@ fn while_aliased_mut_break() {\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut x = &mut w;\n     while cond {\n         **x += 1;"}, {"sha": "6da8f088b3279005474b3368b9d6cd4e5f745784", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -29,15 +29,15 @@ fn inc(v: &mut Box<isize>) {\n fn pre_freeze() {\n     // In this instance, the freeze starts before the mut borrow.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w = &v;\n     borrow_mut(&mut *v); //~ ERROR cannot borrow\n }\n \n fn post_freeze() {\n     // In this instance, the const alias starts after the borrow.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     borrow_mut(&mut *v);\n     let _w = &v;\n }"}, {"sha": "57b584a89599f0a88512b043d7ec66dc34047eff", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,7 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n }\n \n fn box_imm() {\n-    let v = box 3;\n+    let v: Box<_> = box 3;\n     let _w = &v;\n     thread::spawn(move|| {\n         println!(\"v={}\", *v);\n@@ -26,7 +26,7 @@ fn box_imm() {\n }\n \n fn box_imm_explicit() {\n-    let v = box 3;\n+    let v: Box<_> = box 3;\n     let _w = &v;\n     thread::spawn(move|| {\n         println!(\"v={}\", *v);"}, {"sha": "32d8088549d4fb9fd113ffe82313bee07ab7c4d0", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,7 +15,7 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n }\n \n fn box_imm() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     borrow(&*v,\n            |w| { //~ ERROR cannot borrow `v` as mutable\n             v = box 4;"}, {"sha": "bad521210439ff2f68f3773bea6e627feeb15ad6", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n pub fn main() {\n-    let bar = box 3;\n+    let bar: Box<_> = box 3;\n     let _g = to_fn_mut(|| {\n         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n     });"}, {"sha": "c02c6a7151428fbedb7e79b8e3b2ff89cde5308d", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let a = box box 2;\n+    let a: Box<Box<_>> = box box 2;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "c46bcbb32b9cf13bd796b10637762629bd7af739", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,7 +15,7 @@ fn call_f<F:FnOnce() -> isize>(f: F) -> isize {\n }\n \n fn main() {\n-    let t = box 3;\n+    let t: Box<_> = box 3;\n \n     call_f(move|| { *t + 1 });\n     call_f(move|| { *t + 1 }); //~ ERROR capture of moved value"}, {"sha": "f417416e7b53e6c860c13f70722845dc9573fa8a", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,9 +15,9 @@ use std::thread;\n fn borrow<T>(_: &T) { }\n \n fn different_vars_after_borrows() {\n-    let x1 = box 1;\n+    let x1: Box<_> = box 1;\n     let p1 = &x1;\n-    let x2 = box 2;\n+    let x2: Box<_> = box 2;\n     let p2 = &x2;\n     thread::spawn(move|| {\n         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n@@ -28,9 +28,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1 = box 1;\n+    let x1: Box<_> = box 1;\n     drop(x1);\n-    let x2 = box 2;\n+    let x2: Box<_> = box 2;\n     drop(x2);\n     thread::spawn(move|| {\n         drop(x1); //~ ERROR capture of moved value: `x1`\n@@ -39,7 +39,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     let p = &x;\n     thread::spawn(move|| {\n         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n@@ -49,7 +49,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     drop(x);\n     thread::spawn(move|| {\n         drop(x); //~ ERROR capture of moved value: `x`"}, {"sha": "8cb7423f3cb5efc1aa4bf349ba25c0b1821f0c31", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -19,7 +19,7 @@ enum cycle {\n     empty\n }\n fn main() {\n-    let mut x = box cycle::node(node_ {a: box cycle::empty});\n+    let mut x: Box<_> = box cycle::node(node_ {a: box cycle::empty});\n     // Create a cycle!\n     match *x {\n       cycle::node(ref mut y) => {"}, {"sha": "58668b73cbffbc609681893e986472ba282117de", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,7 +25,7 @@ impl<T> Index<usize> for MyVec<T> {\n }\n \n fn main() {\n-    let v = MyVec { data: vec!(box 1, box 2, box 3) };\n+    let v = MyVec::<Box<_>> { data: vec!(box 1, box 2, box 3) };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of indexed content"}, {"sha": "f36dc0ca43fa25beaa03a6ac3bd03bbbcbaa1f07", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,7 @@\n fn borrow(_v: &isize) {}\n \n fn local() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     borrow(&*v);\n }\n \n@@ -32,27 +32,27 @@ fn local_recs() {\n }\n \n fn aliased_imm() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w = &v;\n     borrow(&*v);\n }\n \n fn aliased_mut() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let _x = &mut w;\n     borrow(&*v);\n }\n \n fn aliased_other_reassign() {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &mut w;\n     _x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`"}, {"sha": "871f52cbebddc35fa026b3f2ca19c55986428014", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,14 +11,13 @@\n // Test that cross-borrowing (implicitly converting from `Box<T>` to `&T`) is\n // forbidden when `T` is a trait.\n \n-#![feature(box_syntax)]\n-\n struct Foo;\n trait Trait { fn foo(&self) {} }\n impl Trait for Foo {}\n \n pub fn main() {\n-    let x: Box<Trait> = box Foo;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~  ERROR mismatched types\n                         //~| expected `&Trait`\n                         //~| found `Box<Trait>`"}, {"sha": "8441f3a99e1aa6b3430191b4672c1303de85d3c4", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,8 +10,6 @@\n \n // Forbid assignment into a dynamically sized type.\n \n-#![feature(box_syntax)]\n-\n struct Fat<T: ?Sized> {\n     f1: isize,\n     f2: &'static str,\n@@ -43,7 +41,8 @@ impl ToBar for Bar1 {\n pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = box Bar1 {f: 36};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "d3029bc6a99801a785754a1a9b8ac6bf92e05ec0", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,8 +10,6 @@\n \n // Forbid assignment into a dynamically sized type.\n \n-#![feature(box_syntax)]\n-\n struct Fat<T: ?Sized> {\n     f1: isize,\n     f2: &'static str,\n@@ -43,7 +41,8 @@ impl ToBar for Bar1 {\n pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = box Bar1 {f: 36};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected `ToBar`"}, {"sha": "9711d760ae666ccb54409aa5fdb6dd90f43f3478", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n fn test<'x>(x: &'x isize) {\n-    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(box |z| {\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         x\n         //~^ ERROR cannot infer an appropriate lifetime\n-    });\n+    }));\n }\n \n fn main() {}"}, {"sha": "08e8effc626f5bd68b7e6bda91e97b9fb3fa3aa5", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     let f = move|| {\n         let _a = x;\n         drop(x);"}, {"sha": "7313d357ffc1a09f2a068e53e1667be3e953f38c", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -21,7 +21,7 @@ impl Drop for Foo {\n }\n \n fn main() {\n-    let mut ptr = box Foo { x: 0 };\n+    let mut ptr: Box<_> = box Foo { x: 0 };\n     let mut test = |foo: &Foo| {\n         println!(\"access {}\", foo.x);\n         ptr = box Foo { x: ptr.x + 1 };"}, {"sha": "f682d618ab646131735f3cf47ff98976be17369c", "filename": "src/test/compile-fail/issue-11515.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,6 +15,7 @@ struct Test {\n }\n \n fn main() {\n-    let closure: Box<Fn()+'static> = box || ();\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let closure: Box<Fn()+'static> = Box::new(|| ());\n     let test = box Test { func: closure }; //~ ERROR mismatched types\n }"}, {"sha": "7bd072c6268cdfcc7520130b545a62fc46a8a95b", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let r = {\n-        let x = box 42;\n+        let x: Box<_> = box 42;\n         let f = to_fn_once(move|| &x); //~ ERROR: `x` does not live long enough\n         f()\n     };"}, {"sha": "5565a9a5761166d0a52fb7649d241990b546c492", "filename": "src/test/compile-fail/issue-12127.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn do_it(x: &isize) { }\n \n fn main() {\n-    let x = box 22;\n+    let x: Box<_> = box 22;\n     let f = to_fn_once(move|| do_it(&*x));\n     to_fn_once(move|| {\n         f();"}, {"sha": "f40d51f1d2fd3c59c3aef358a2ca1de3b5aef372", "filename": "src/test/compile-fail/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,12 +13,12 @@\n struct Foo { a: isize, b: isize }\n \n fn main() {\n-    let mut x = box Foo { a: 1, b: 2 };\n+    let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n     //~^ ERROR cannot borrow `x` (here through borrowing `x.b`) as mutable more than once at a time\n     //~^^ NOTE previous borrow of `x` occurs here (through borrowing `x.a`)\n \n-    let mut foo = box Foo { a: 1, b: 2 };\n+    let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n     //~^ ERROR cannot borrow `foo` (here through borrowing `foo.b`) as immutable\n     //~^^ NOTE previous borrow of `foo` occurs here (through borrowing `foo.a`)"}, {"sha": "68ddef671887852f14b200910d6a2529ccf9be92", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n fn main() {\n     let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n-    let _bar = box 1_usize as std::fmt::Debug;\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let _bar = Box::new(1_usize) as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Debug`\n     //~^^ HELP did you mean `Box<core::fmt::Debug>`?\n+\n     let _baz = 1_usize as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `usize` as `core::fmt::Debug`\n     //~^^ HELP consider using a box or reference as appropriate\n+\n     let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`\n     //~^^ HELP consider using a box or reference as appropriate"}, {"sha": "d6471ca018deec2c8c1eea7c26aa1f97090b7905", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,10 +11,8 @@\n // Test that moves of unsized values within closures are caught\n // and rejected.\n \n-#![feature(box_syntax)]\n-\n fn main() {\n-    (|| box *[0_usize].as_slice())();\n-    //~^ ERROR cannot move out of borrowed content\n-    //~^^ ERROR cannot move a value of type [usize]\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    (|| Box::new(*[0_usize].as_slice()))();\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[usize]`\n }"}, {"sha": "80e5f2b6e2157917e943bc88a1397a720c917abd", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,13 +16,13 @@\n #[cfg(target_pointer_width = \"64\")]\n fn main() {\n     let n = 0_usize;\n-    let a = box [&n; 0xF000000000000000_usize];\n+    let a: Box<_> = box [&n; 0xF000000000000000_usize];\n     println!(\"{}\", a[0xFFFFFF_usize]);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n fn main() {\n     let n = 0_usize;\n-    let a = box [&n; 0xFFFFFFFF_usize];\n+    let a: Box<_> = box [&n; 0xFFFFFFFF_usize];\n     println!(\"{}\", a[0xFFFFFF_usize]);\n }"}, {"sha": "f6a3da81857750fd5937f66b5632e08f8471aafb", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n fn main() {\n     let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n-    c.push(box || y = 0);\n-    c.push(box || y = 0);\n+    c.push(Box::new(|| y = 0));\n+    c.push(Box::new(|| y = 0));\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n     let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n \n-    Push::push(&c, box || y = 0);\n-    Push::push(&c, box || y = 0);\n+    Push::push(&c, Box::new(|| y = 0));\n+    Push::push(&c, Box::new(|| y = 0));\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n "}, {"sha": "085b4e76afbf71650fece23c0481522a9d9de5da", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n mod my_mod {\n     pub struct MyStruct {\n         priv_field: isize\n@@ -26,10 +24,15 @@ fn main() {\n     let my_struct = my_mod::MyStruct();\n     let _woohoo = (&my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n-    let _woohoo = (box my_struct).priv_field;\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let _woohoo = (Box::new(my_struct)).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n+\n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n-    (box my_struct).happyfun();            //~ ERROR method `happyfun` is private\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    (Box::new(my_struct)).happyfun();          //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "55a793f7480a42e1db237844f544e8271d6c0a10", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n-#![feature(box_syntax)]\n \n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-    id(box || *v)\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    id(Box::new(|| *v))\n         //~^ ERROR `v` does not live long enough\n         //~| ERROR cannot move out of borrowed content\n }"}, {"sha": "c27362eea3e3c6cea897f9fe8ac073de693fc3d6", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n trait Foo { fn foo(&self) {} }\n impl Foo for u8 {}\n \n fn main() {\n-    let r: Box<Foo> = box 5;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let r: Box<Foo> = Box::new(5);\n     let _m: Box<Foo> = r as Box<Foo>;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `Foo`\n }"}, {"sha": "fd0789421e0045fb4a5c45f25076c139a8ac7e2c", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -21,7 +21,7 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn main() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     take_param(&x);\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "52ca24d0f547a7fe20a4177bdd25f5f19453c630", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -24,12 +24,12 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n }\n \n fn b() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     let y = &x;\n     let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n }"}, {"sha": "6fcab380030331417ffe56711e8eb3630ce9a15f", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 5;\n+    let x: Box<_> = box 5;\n     let y = x;\n     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n     y.clone();"}, {"sha": "e298a0f62cd81882ab9e47920f4ac74347b58e82", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -26,6 +26,7 @@ impl<K, V> Map<K, V> for HashMap<K, V> {}\n fn main() {\n     let x: Box<HashMap<isize, isize>> = box HashMap::new();\n     let x: Box<Map<isize, isize>> = x;\n-    let y: Box<Map<usize, isize>> = box x;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let y: Box<Map<usize, isize>> = Box::new(x);\n     //~^ ERROR the trait `Map<usize, isize>` is not implemented\n }"}, {"sha": "068bfa3cd7c7b0728cdee3600590a4d9182e5292", "filename": "src/test/compile-fail/move-in-guard-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-1.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n \n     let v = (1, 2);\n "}, {"sha": "984963b2f830ee2246e297175db744f6d1d3eb47", "filename": "src/test/compile-fail/move-in-guard-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n \n     let v = (1, 2);\n "}, {"sha": "b7393666719630029aa400475ed9bb880ac0acae", "filename": "src/test/compile-fail/move-out-of-tuple-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,7 @@\n struct Foo(Box<isize>);\n \n fn main() {\n-    let x = (box 1,);\n+    let x: (Box<_>,) = (box 1,);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n "}, {"sha": "5af326b4298499ed42bfdd5bb505e75657b104d9", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,6 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct R<'a> {\n@@ -41,7 +40,8 @@ fn innocent_looking_victim() {\n }\n \n fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n-    let mut r = R {c: box f};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mut r = R {c: Box::new(f)};\n     f(&mut r, false) //~ ERROR use of moved value\n }\n "}, {"sha": "6829cd574e1b00114c716a17c851bf14ec930405", "filename": "src/test/compile-fail/mut-cross-borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,7 @@\n fn f(_: &mut isize) {}\n \n fn main() {\n-    let mut x = box 3;\n+    let mut x: Box<_> = box 3;\n     f(x)    //~ ERROR mismatched types\n }\n "}, {"sha": "1bb2bb5a15450f3aa774ded692b1ac6f0e610626", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,32 +11,36 @@\n // Test that attempts to implicitly coerce a value into an\n // object respect the lifetime bound on the object type.\n \n-#![feature(box_syntax)]\n-\n trait Foo : ::std::marker::MarkerTrait {}\n impl<'a> Foo for &'a [u8] {}\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n fn a(v: &[u8]) -> Box<Foo + 'static> {\n-    let x: Box<Foo + 'static> = box v; //~ ERROR does not fulfill the required lifetime\n+    let x: Box<Foo + 'static> = Box::new(v);\n+    //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n     x\n }\n \n fn b(v: &[u8]) -> Box<Foo + 'static> {\n-    box v //~ ERROR does not fulfill the required lifetime\n+    Box::new(v)\n+        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn c(v: &[u8]) -> Box<Foo> {\n     // same as previous case due to RFC 599\n \n-    box v //~ ERROR does not fulfill the required lifetime\n+    Box::new(v)\n+        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-    box v //~ ERROR does not fulfill the required lifetime\n+    Box::new(v)\n+        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn e<'a:'b,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-    box v // OK, thanks to 'a:'b\n+    Box::new(v) // OK, thanks to 'a:'b\n }\n \n fn main() { }"}, {"sha": "72a024e563c6f6bc06caa285fe9b20879752c471", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(box_syntax)]\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n use std::marker::MarkerTrait;\n \n trait X : MarkerTrait {}\n@@ -24,48 +26,48 @@ trait Iter {\n fn bad1<T: Iter>(v: T) -> Box<X+'static>\n {\n     let item = v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn bad2<T: Iter>(v: T) -> Box<X+'static>\n     where Box<T::Item> : X\n {\n-    let item = box v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    let item: Box<_> = box v.into_item();\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn bad3<'a, T: Iter>(v: T) -> Box<X+'a>\n {\n     let item = v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn bad4<'a, T: Iter>(v: T) -> Box<X+'a>\n     where Box<T::Item> : X\n {\n-    let item = box v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    let item: Box<_> = box v.into_item();\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn ok1<'a, T: Iter>(v: T) -> Box<X+'a>\n     where T::Item : 'a\n {\n     let item = v.into_item();\n-    box item // OK, T::Item : 'a is declared\n+    Box::new(item) // OK, T::Item : 'a is declared\n }\n \n fn ok2<'a, T: Iter>(v: &T, w: &'a T::Item) -> Box<X+'a>\n     where T::Item : Clone\n {\n     let item = Clone::clone(w);\n-    box item // OK, T::Item : 'a is implied\n+    Box::new(item) // OK, T::Item : 'a is implied\n }\n \n fn ok3<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n     where T::Item : Clone + 'a\n {\n     let item = Clone::clone(v.as_item());\n-    box item // OK, T::Item : 'a was declared\n+    Box::new(item) // OK, T::Item : 'a was declared\n }\n \n fn meh1<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n@@ -78,7 +80,7 @@ fn meh1<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n     // T::Item`. But we're not that smart at present.\n \n     let item = Clone::clone(v.as_item());\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live\n }\n \n fn main() {}"}, {"sha": "eebf93bc89377995173e7a3098eb7b4790203f53", "filename": "src/test/compile-fail/regions-close-param-into-object.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,32 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n trait X { fn foo(&self) {} }\n \n fn p1<T>(v: T) -> Box<X+'static>\n     where T : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn p2<T>(v: Box<T>) -> Box<X+'static>\n     where Box<T> : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn p3<'a,T>(v: T) -> Box<X+'a>\n     where T : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn p4<'a,T>(v: Box<T>) -> Box<X+'a>\n     where Box<T> : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "f114a8bc7ce668bfe6a35ac4e3141cf41709bed1", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,25 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x isize) {\n     let y = 3;\n     let mut ay = &y;\n \n-    ignore::<Box<for<'z> FnMut(&'z isize)>>(box |z| {\n+    ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n         ay = x; //~ ERROR cannot infer\n         ay = &y;\n         ay = z;\n-    });\n+    }));\n \n-    ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(box |z| {\n+    ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         if false { return x; }  //~ ERROR cannot infer an appropriate lifetime for automatic\n         if false { return ay; }\n         return z;\n-    });\n+    }));\n }\n \n fn main() {}"}, {"sha": "3c137133c9867ca077ec86420b3d0c6e3716cce6", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn borrowed_proc<'a>(x: &'a isize) -> Box<FnMut()->(isize) + 'a> {\n     // This is legal, because the region bound on `proc`\n     // states that it captures `x`.\n-    box move|| { *x }\n+    Box::new(move|| { *x })\n }\n \n fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    box move|| { *x } //~ ERROR captured variable `x` does not outlive the enclosing closure\n+    Box::new(move|| { *x }) //~ ERROR captured variable `x` does not outlive the enclosing closure\n }\n \n fn main() { }"}, {"sha": "a30d8471a31788e6136a8498f009b8539722a075", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {\n@@ -22,7 +21,8 @@ fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n fn main() {\n     let mut cl_box = {\n         let mut i = 3;\n-        box_it(box || i += 1) //~ ERROR `i` does not live long enough\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        box_it(Box::new(|| i += 1)) //~ ERROR `i` does not live long enough\n     };\n     cl_box.cl.call_mut(());\n }"}, {"sha": "eca22bfdda07a8a1579af54dd3cb380d5d450c6d", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,7 @@\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     f(x);\n     let x = &3; //~ ERROR borrowed value does not live long enough\n     f(x);"}, {"sha": "b25af522b2476e35759af8a255ade6225020a8c0", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n struct Struct {\n     person: &'static str\n }\n@@ -25,7 +23,8 @@ impl Trait<&'static str> for Struct {\n }\n \n fn main() {\n-    let s: Box<Trait<isize>> = box Struct { person: \"Fred\" };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let s: Box<Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n     //~^ ERROR the trait `Trait<isize>` is not implemented for the type `Struct`\n     s.f(1);\n }"}, {"sha": "bbe256d1c8fd20cd36d5e0ce303556a72ecea839", "filename": "src/test/compile-fail/trait-coercion-generic-regions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n struct Struct {\n     person: &'static str\n }\n@@ -27,6 +25,7 @@ impl Trait<&'static str> for Struct {\n fn main() {\n     let person = \"Fred\".to_string();\n     let person: &str = &person;  //~ ERROR `person` does not live long enough\n-    let s: Box<Trait<&'static str>> = box Struct { person: person };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let s: Box<Trait<&'static str>> = Box::new(Struct { person: person });\n }\n "}, {"sha": "86e326f3c5a8b7f4b15f708491a39f15c225ccea", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Tests that we can't move out of an unboxed closure environment\n@@ -19,31 +18,33 @@ fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n fn main() {\n     // By-ref cases\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_once(|| drop(x)); // OK -- FnOnce\n     }\n     // By-value cases\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_once(move || drop(x)); // this one is ok\n     }\n }"}, {"sha": "2ec10d08bb41d5ff92087c2eae36c4a410fd15a9", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n #[derive(Debug)]\n struct r {\n   b: bool,\n@@ -20,7 +18,8 @@ impl Drop for r {\n }\n \n fn main() {\n-    let i = box r { b: true };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let i = Box::new(r { b: true });\n     let _j = i.clone(); //~ ERROR not implement\n     println!(\"{:?}\", i);\n }"}, {"sha": "86fe4da3429d084f23d164d47fe024fc4811ae79", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n use std::rc::Rc;\n \n fn f<T:Send>(__isize: T) {\n }\n \n fn main() {\n-    let i = box Rc::new(100);\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let i = Box::new(Rc::new(100));\n     f(i);\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "938abbf2c2018952a44739b07b3a7c027c866598", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(unsafe_destructor)]\n \n-#![feature(box_syntax)]\n-\n use std::cell::Cell;\n \n #[derive(Debug)]\n@@ -36,8 +34,9 @@ fn clone<T: Clone>(t: &T) -> T { t.clone() }\n fn main() {\n     let i1 = &Cell::new(0);\n     let i2 = &Cell::new(1);\n-    let r1 = vec!(box r { i: i1 });\n-    let r2 = vec!(box r { i: i2 });\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let r1 = vec!(Box::new(r { i: i1 }));\n+    let r2 = vec!(Box::new(r { i: i2 }));\n     f(clone(&r1), clone(&r2));\n     //~^ ERROR the trait `core::clone::Clone` is not implemented for the type\n     //~^^ ERROR the trait `core::clone::Clone` is not implemented for the type"}, {"sha": "26d22b072eb48ce3eda25139d5348ebe21141180", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -34,8 +34,8 @@ impl List {\n }\n \n fn main() {\n-    let n = box Number { n: 42 };\n-    let mut l = box List { list: Vec::new() };\n+    let n: Box<_> = box Number { n: 42 };\n+    let mut l: Box<_> = box List { list: Vec::new() };\n     l.push(n);\n     let x = n.to_string();\n     //~^ ERROR: use of moved value: `n`"}, {"sha": "4430ea9380d43585a8c11ef49edbaf7febd4a074", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -78,7 +78,7 @@ fn main() {\n     let stack_val_interior_ref_2: &f64 = &stack_val.y;\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n-    let unique_val = box SomeStruct { x: 13, y: 26.5 };\n+    let unique_val: Box<_> = box SomeStruct { x: 13, y: 26.5 };\n     let unique_val_ref: &SomeStruct = &*unique_val;\n     let unique_val_interior_ref_1: &int = &unique_val.x;\n     let unique_val_interior_ref_2: &f64 = &unique_val.y;"}, {"sha": "9c6e197e65e23ebd495db0996f15fe8ed50c762e", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -57,9 +57,9 @@ impl Drop for StructWithDestructor {\n \n fn main() {\n \n-    let unique = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n+    let unique: Box<_> = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n \n-    let unique_dtor = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n+    let unique_dtor: Box<_> = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n     zzz(); // #break\n }\n "}, {"sha": "448e157a251b211494910338d7a26a639e0c5ff1", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -60,7 +60,7 @@ fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n fn main() {\n     some_generic_fun(0.5f64, 10);\n-    some_generic_fun(&29, box 110);\n+    some_generic_fun(&29, Box::new(110));\n }\n \n fn zzz() { () }"}, {"sha": "8b698d900af0428cb2ec8ce8fbb90a71cc80d3fd", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -142,7 +142,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned = box Struct { x: 1234.5f64 };\n+    let owned: Box<_> = box Struct { x: 1234.5f64 };\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "638d73f0d4e3c09e222663576a4a4fb22f8d5bac", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -144,7 +144,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Enum::Variant1{ x: 1799, y: 1799 };\n+    let owned: Box<_> = box Enum::Variant1{ x: 1799, y: 1799 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "784d60eec9a1ad953787b9cb7ee984a0710067bf", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -143,7 +143,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 1234.5f64 };\n+    let owned: Box<_> = box Struct { x: 1234.5f64 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "a91586a6aa6bee4e335b0a27433c34f2788f7e0c", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -143,7 +143,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 200 };\n+    let owned: Box<_> = box Struct { x: 200 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "e2c827ee5170f0f8af4b08fbd025a56862556734", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -149,7 +149,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 200 };\n+    let owned: Box<_> = box Struct { x: 200 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "e8bc40f1810f3b921df98a481eaf00eaa01d76eb", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -141,7 +141,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box TupleStruct(200, -200.5);\n+    let owned: Box<_> = box TupleStruct(200, -200.5);\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "03a799933421c0d35c629f62507033ccea7dd905", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -143,7 +143,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 200 };\n+    let owned: Box<_> = box Struct { x: 200 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "5869625bafe597feeeb2c24470d2b3230d608d16", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -144,7 +144,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned = box Struct { x: 879 };\n+    let owned: Box<_> = box Struct { x: 879 };\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "607a237d22e41ee1b4624cb0e1710b253e13864c", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -67,15 +67,15 @@ fn main() {\n     // 0b01111100011111000111110001111100 = 2088533116\n     // 0b0111110001111100 = 31868\n     // 0b01111100 = 124\n-    let the_a = box ABC::TheA { x: 0, y: 8970181431921507452 };\n+    let the_a: Box<_> = box ABC::TheA { x: 0, y: 8970181431921507452 };\n \n     // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n     // 0b00010001000100010001000100010001 = 286331153\n     // 0b0001000100010001 = 4369\n     // 0b00010001 = 17\n-    let the_b = box ABC::TheB (0, 286331153, 286331153);\n+    let the_b: Box<_> = box ABC::TheB (0, 286331153, 286331153);\n \n-    let univariant = box Univariant::TheOnlyCase(123234);\n+    let univariant: Box<_> = box Univariant::TheOnlyCase(123234);\n \n     zzz(); // #break\n }"}, {"sha": "05872e3fc36b2fb8072e01ab07fe29b931041864", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -98,7 +98,7 @@ fn main() {\n     };\n \n     let struct_ref = &a_struct;\n-    let owned = box 6;\n+    let owned: Box<_> = box 6;\n \n     let mut closure = || {\n         let closure_local = 8;"}, {"sha": "295d57f4cfa97fc22acc1926bbba4b5bf40d20d4", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -58,7 +58,7 @@ fn main() {\n         c: 4\n     };\n \n-    let owned = box 5;\n+    let owned: Box<_> = box 5;\n \n     let closure = move || {\n         zzz(); // #break"}, {"sha": "57dcac409bab8ad6cd39e22d5081dfccd84708cc", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -90,7 +90,7 @@ fn main() {\n     };\n \n     let struct_ref = &a_struct;\n-    let owned = box 6;\n+    let owned: Box<_> = box 6;\n \n     {\n         let mut first_closure = || {"}, {"sha": "4d0f7c29cb9df4ead4e9e10ff50fb7c2e2d7e386", "filename": "src/test/run-fail/panic-macro-any-wrapped.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,9 +10,6 @@\n \n // error-pattern:panicked at 'Box<Any>'\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn main() {\n-    panic!(box 612_i64);\n+    panic!(Box::new(612_i64));\n }"}, {"sha": "83b2bb91f0073a59ba3418da547d8df276e47677", "filename": "src/test/run-fail/unique-panic.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-fail%2Funique-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-fail%2Funique-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funique-panic.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,7 +10,4 @@\n \n // error-pattern: panic\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn main() { box panic!(); }\n+fn main() { Box::new(panic!()); }"}, {"sha": "f4ba789d6bf7be1c92b6bb1b7e2114c4936aae4f", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,14 +10,11 @@\n \n // error-pattern:fail\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn failfn() {\n     panic!();\n }\n \n fn main() {\n-    box 0;\n+    Box::new(0);\n     failfn();\n }"}, {"sha": "7d94f4c7b172a0b09be5dbf7727cb78351db7a6e", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -245,9 +245,10 @@ fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    let s: Box<SomeTrait> = box some_fields {field1: 43};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let s: Box<SomeTrait> = Box::new(some_fields {field1: 43});\n     let s2: Box<some_fields> =  box some_fields {field1: 43};\n-    let s3 = box nofields;\n+    let s3: Box<_> = box nofields;\n \n     s.Method(43);\n     s3.Method(43);\n@@ -282,7 +283,7 @@ pub struct blah {\n }\n \n fn main() { // foo\n-    let s = box some_fields {field1: 43};\n+    let s: Box<_> = box some_fields {field1: 43};\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();"}, {"sha": "d051b7b491b946d775b677ca982c4e7fba40dc1a", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n static mut DROP_RAN: bool = false;\n \n struct Foo;\n@@ -28,7 +26,8 @@ struct Fat<T: ?Sized> {\n \n pub fn main() {\n     {\n-        let _x: Box<Fat<Trait>> = box Fat { f: Foo };\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let _x: Box<Fat<Trait>> = Box::<Fat<Foo>>::new(Fat { f: Foo });\n     }\n     unsafe {\n         assert!(DROP_RAN);"}, {"sha": "2cb5f77fdc3f3b0e7385a08478c60d6d2def0862", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n static mut DROP_RAN: int = 0;\n \n struct Foo;\n@@ -25,7 +23,8 @@ struct Fat<T: ?Sized> {\n \n pub fn main() {\n     {\n-        let _x: Box<Fat<[Foo]>> = box Fat { f: [Foo, Foo, Foo] };\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let _x: Box<Fat<[Foo]>> = Box::<Fat<[Foo; 3]>>::new(Fat { f: [Foo, Foo, Foo] });\n     }\n     unsafe {\n         assert!(DROP_RAN == 3);"}, {"sha": "c52e04322e911b24ce1e881e0a119c3f3d968243", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n #[derive(PartialEq, Debug)]\n struct Point { x : int }\n \n pub fn main() {\n     assert_eq!(14,14);\n     assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n-    assert_eq!(box Point{x:34},box Point{x:34});\n+    assert_eq!(Box::new(Point{x:34}),Box::new(Point{x:34}));\n     assert_eq!(&Point{x:34},&Point{x:34});\n }"}, {"sha": "941e9a84538025b34d0b0b3e030cee1d90449a7a", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,6 +25,7 @@ fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=int>>) -> int {\n \n fn main() {\n     let v = vec!(1, 2, 3, 4, 5, 6);\n-    let r = pairwise_sub(box v.into_iter());\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let r = pairwise_sub(Box::new(v.into_iter()));\n     assert_eq!(r, 9);\n }"}, {"sha": "8121edfd2cc6ddc621aca2bede107744482bd06b", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,6 +20,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = box() (box 3_usize as Box<double>);\n+    let x: Box<_> = box() (box 3_usize as Box<double>);\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "537894bfd158dffdeb71cd5d8e90fb7166525f38", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -24,6 +24,6 @@ impl double for Box<uint> {\n }\n \n pub fn main() {\n-    let x = box 3_usize;\n+    let x: Box<_> = box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "2ffdd576ffb783aae0c29ca52d55cf35a8719c79", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,6 +20,6 @@ impl double for Box<uint> {\n }\n \n pub fn main() {\n-    let x = box box box box box 3_usize;\n+    let x: Box<Box<Box<Box<Box<_>>>>> = box box box box box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "82510aea162b8bb733610bf96d781b9abe3351fa", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,6 +20,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = box box 3_usize;\n+    let x: Box<Box<_>> = box box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "c9aa1133101788ef3fafad86029e04a25b1e4417", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,6 +20,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = box 3_usize;\n+    let x: Box<_> = box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "6e6e58a7ddf104796a2d5895cc16f1bcd6f574e0", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -29,6 +29,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = box 3_usize;\n+    let x: Box<_> = box 3_usize;\n     assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "24bfbd9eb44088b54b901caaa95587d5653255e7", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,8 +16,8 @@ extern crate collections;\n use std::collections::BitVec;\n \n fn bitv_test() {\n-    let mut v1 = box BitVec::from_elem(31, false);\n-    let v2 = box BitVec::from_elem(31, true);\n+    let mut v1: Box<_> = box BitVec::from_elem(31, false);\n+    let v2: Box<_> = box BitVec::from_elem(31, true);\n     v1.union(&*v2);\n }\n "}, {"sha": "27fbfc9641088137c6abe59aa178e9c854d45d96", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,7 @@\n #![feature(unboxed_closures)]\n \n pub fn main() {\n-    let bar = box 3;\n+    let bar: Box<_> = box 3;\n     let h = || -> int *bar;\n     assert_eq!(h(), 3);\n }"}, {"sha": "499650a6e51db82718408d3a71225b5d6e437f1e", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -30,7 +30,7 @@ fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n }\n \n pub fn main() {\n-    let mut ints = box Ints {sum: box 0, values: Vec::new()};\n+    let mut ints: Box<_> = box Ints {sum: box 0, values: Vec::new()};\n     add_int(&mut *ints, 22);\n     add_int(&mut *ints, 44);\n "}, {"sha": "89babb8f7221d4fdf2120ee1e218f77ec3c1ab2c", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,7 @@ extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {\n-    let p = box 22_usize;\n+    let p: Box<_> = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22_usize);"}, {"sha": "ff883294fd3940b4c115ef22e195b433b37e788b", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -43,7 +43,7 @@ fn get_bar(x: uint) -> Vec<uint> { vec!(x * 2) }\n \n pub fn fails() {\n     let x = 2;\n-    let mut y = Vec::new();\n+    let mut y: Vec<Box<_>> = Vec::new();\n     y.push(box Conzabble::Bickwick(do_it(&get_bar(x))));\n }\n "}, {"sha": "5cc567cb14c6efda9c6561f00cdcced39a449d0d", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -19,7 +19,7 @@ struct Pair {\n }\n \n pub fn main() {\n-    let z = box Pair { a : 10, b : 12};\n+    let z: Box<_> = box Pair { a : 10, b : 12};\n \n     let _t = Thread::spawn(move|| {\n         assert_eq!(z.a, 10);"}, {"sha": "8a9325aecb1438832904b9deb3b6990dafdb91dd", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,12 +17,21 @@ use std::fmt::Debug;\n // rvalue expressions to be unsized. See #20169 for more information.\n \n pub fn main() {\n-    let _: Box<[int]> = box { [1, 2, 3] };\n-    let _: Box<[int]> = box if true { [1, 2, 3] } else { [1, 3, 4] };\n-    let _: Box<[int]> = box match true { true => [1, 2, 3], false => [1, 3, 4] };\n-    let _: Box<Fn(int) -> _> = box { |x| (x as u8) };\n-    let _: Box<Debug> = box if true { false } else { true };\n-    let _: Box<Debug> = box match true { true => 'a', false => 'b' };\n+    // FIXME #22405: We cannot infer the type `Box<[int; k]>` for\n+    // the r-value expression from the context `Box<[int]>`, and\n+    // therefore the `box EXPR` desugaring breaks down.\n+    //\n+    // One could reasonably claim that the `box EXPR` desugaring is\n+    // effectively regressing half of Issue #20169. Hopefully we will\n+    // eventually fix that, at which point the `Box::new` calls below\n+    // should be replaced wth uses of `box`.\n+\n+    let _: Box<[int]> = Box::new({ [1, 2, 3] });\n+    let _: Box<[int]> = Box::new(if true { [1, 2, 3] } else { [1, 3, 4] });\n+    let _: Box<[int]> = Box::new(match true { true => [1, 2, 3], false => [1, 3, 4] });\n+    let _: Box<Fn(int) -> _> = Box::new({ |x| (x as u8) });\n+    let _: Box<Debug> = Box::new(if true { false } else { true });\n+    let _: Box<Debug> = Box::new(match true { true => 'a', false => 'b' });\n \n     let _: &[int] = &{ [1, 2, 3] };\n     let _: &[int] = &if true { [1, 2, 3] } else { [1, 3, 4] };\n@@ -36,6 +45,6 @@ pub fn main() {\n \n     let _: Vec<Box<Fn(int) -> _>> = vec![\n         Box::new(|x| (x as u8)),\n-        box |x| (x as i16 as u8),\n+        Box::new(|x| (x as i16 as u8)),\n     ];\n }"}, {"sha": "2592957b738596541d5bdd1afc5058d2787e9e5f", "filename": "src/test/run-pass/coerce-match.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,9 +14,13 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _: Box<[int]> = if true { box [1, 2, 3] } else { box [1] };\n+    let _: Box<[int]> =\n+        if true { let b: Box<_> = box [1, 2, 3]; b } else { let b: Box<_> = box [1]; b };\n \n-    let _: Box<[int]> = match true { true => box [1, 2, 3], false => box [1] };\n+    let _: Box<[int]> = match true {\n+        true => { let b: Box<_> = box [1, 2, 3]; b }\n+        false => { let b: Box<_> = box [1]; b }\n+    };\n \n     // Check we don't get over-keen at propagating coercions in the case of casts.\n     let x = if true { 42 } else { 42u8 } as u16;"}, {"sha": "3a64f53dbb01e4ef7d76a4b230af19904f5b845b", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,9 +11,6 @@\n // Make sure const bounds work on things, and test that a few types\n // are const.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn foo<T: Sync>(x: T) -> T { x }\n \n struct F { field: int }\n@@ -25,5 +22,5 @@ pub fn main() {\n     foo(F{field: 42});\n     foo((1, 2_usize));\n     foo(@1);*/\n-    foo(box 1);\n+    foo(Box::new(1));\n }"}, {"sha": "043bfe429add3286620f4eefd503d6d66767e09d", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -22,7 +22,7 @@ extern crate crate_method_reexport_grrrrrrr2;\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x = box() ();\n+    let x: Box<_> = box () ();\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "fc97b22a4a99e3cedd167e1789ca91091854e4b6", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n use std::cell::Cell;\n \n pub fn main() {\n-    let x = box Cell::new(5);\n+    let x: Box<_> = box Cell::new(5);\n     x.set(1000);\n     println!(\"{}\", x.get());\n }"}, {"sha": "4d157f64fb9eda85553d93f8141692b990783a73", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,6 +20,7 @@ struct A {\n \n pub fn main() {\n     let a: A = Default::default();\n-    let b: Box<[_]> = box [];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let b: Box<[_]> = Box::<[bool; 0]>::new([]);\n     assert_eq!(a.foo, b);\n }"}, {"sha": "454156b4c9e3fa25b9c0ddcbfff14a15f9738afd", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -23,7 +23,8 @@ struct A {\n }\n \n fn main() {\n-    let obj = A { foo: box [true, false] };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let obj = A { foo: Box::new([true, false]) };\n     let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(&s).unwrap();\n     assert!(obj.foo == obj2.foo);"}, {"sha": "03c93d3ab949b1efa06265c00e3989819f0b0bb1", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n #[derive(PartialEq, PartialOrd, Eq, Ord)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n-    let a = Foo(box [0, 1, 2]);\n-    let b = Foo(box [0, 1, 2]);\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let a = Foo(Box::new([0, 1, 2]));\n+    let b = Foo(Box::new([0, 1, 2]));\n     assert!(a == b);\n     println!(\"{}\", a != b);\n     println!(\"{}\", a < b);"}, {"sha": "33548d5e298cd16600594173574b8549a810dc42", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,9 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n use std::ops::{Deref, DerefMut};\n \n pub struct Arr {\n@@ -41,6 +38,7 @@ pub fn foo(arr: &mut Arr) {\n }\n \n fn main() {\n-    let mut a = Arr { ptr: box [1, 2, 3] };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mut a = Arr { ptr: Box::new([1, 2, 3]) };\n     foo(&mut a);\n }"}, {"sha": "147a27afa80ed69b683fcc0a59d994675d6c307c", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,9 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n use std::ops::Deref;\n \n pub struct Arr {\n@@ -36,6 +33,7 @@ pub fn foo(arr: &Arr) {\n }\n \n fn main() {\n-    let a = Arr { ptr: box [1, 2, 3] };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let a = Arr { ptr: Box::new([1, 2, 3]) };\n     foo(&a);\n }"}, {"sha": "15558414bf58ebeeffc68cb9b478e2dcf218b0c2", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -115,7 +115,7 @@ pub fn main() {\n     foo3(f5);\n \n     // Box.\n-    let f1 = box [1, 2, 3];\n+    let f1 = Box::new([1, 2, 3]);\n     assert!((*f1)[1] == 2);\n     let f2: Box<[int]> = f1;\n     assert!((*f2)[1] == 2);\n@@ -125,6 +125,9 @@ pub fn main() {\n     foo(&*f1);\n     let f2 : Box<Fat<[int]>> = f1;\n     foo(&*f2);\n-    let f3 : Box<Fat<[int]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let f3 : Box<Fat<[int]>> =\n+        Box::<Fat<[_; 3]>>::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f3);\n }"}, {"sha": "6590a8e1847dca828bc8446200ddeff140a5bae2", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -95,7 +95,9 @@ pub fn main() {\n     assert!(f6.ptr.to_bar() == Bar);\n \n     // &*\n-    let f7: Box<ToBar> = box Bar1 {f :42};\n+    //\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n \n     // Deep nesting"}, {"sha": "0459206c5b910854504bfeaa5227e69079d0a479", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n pub fn main() {\n-    assert!(Some(box() ()).is_some());\n+    assert!(Some(Box::new(())).is_some());\n \n-    let xs: Box<[()]> = box [];\n+    let xs: Box<[()]> = Box::<[(); 0]>::new([]);\n     assert!(Some(xs).is_some());\n \n     struct Foo;\n-    assert!(Some(box Foo).is_some());\n+    assert!(Some(Box::new(Foo)).is_some());\n \n-    let ys: Box<[Foo]> = box [];\n+    let ys: Box<[Foo]> = Box::<[Foo; 0]>::new([]);\n     assert!(Some(ys).is_some());\n }"}, {"sha": "f56d8843acd3fae7fc37fc4ecdca227b8a064f68", "filename": "src/test/run-pass/empty-allocation-rvalue-non-null.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let x = *box() ();\n+    let x = *Box::new(());\n }"}, {"sha": "865fccbc3fa3a865e65dbdfebcee08ea08a1c390", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -33,6 +33,6 @@ impl<K,V> HashMap<K,V> {\n }\n \n pub fn main() {\n-    let mut m = box linear_map::<(),()>();\n+    let mut m: Box<_> = box linear_map::<(),()>();\n     assert_eq!(m.len(), 0);\n }"}, {"sha": "3d06a5562034cc0c383bcfba68ad93a498f66bc8", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -70,7 +70,7 @@ trait Nus { fn f(&self); }\n impl Nus for thing { fn f(&self) {} }\n \n pub fn main() {\n-    let y = box thing(A {a: 10});\n+    let y: Box<_> = box thing(A {a: 10});\n     assert_eq!(y.clone().bar(), 10);\n     assert_eq!(y.quux(), 10);\n "}, {"sha": "d7d5a39f452f3dee030474b068d7e7ba05c4fd0d", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,4 +12,4 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub fn main() { let x = { box 100 }; assert!((*x == 100)); }\n+pub fn main() { let x: Box<_> = { box 100 }; assert!((*x == 100)); }"}, {"sha": "a58161277989870bf9da7f8a5230ecf9ec836897", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,7 +15,7 @@\n \n // Tests for if as expressions returning boxed types\n fn test_box() {\n-    let rs = if true { box 100 } else { box 101 };\n+    let rs: Box<_> = if true { box 100 } else { box 101 };\n     assert_eq!(*rs, 100);\n }\n "}, {"sha": "9641cacddc0a682e22cc498188ed097e172df876", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,7 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { box 100 }, _ => panic!() };\n+    let res: Box<_> = match true { true => { box 100 }, _ => panic!() };\n     assert_eq!(*res, 100);\n }\n "}, {"sha": "581f71a737651a59f5fe1abfcac2eda76e3fd6a8", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,7 +25,7 @@ fn foo(Foo {x, ..}: Foo) -> *const uint {\n }\n \n pub fn main() {\n-    let obj = box 1;\n+    let obj: Box<_> = box 1;\n     let objptr: *const uint = &*obj;\n     let f = Foo {x: obj, y: box 2};\n     let xptr = foo(f);"}, {"sha": "799b865bd2d7aa5c91d50d27cadd4b42f05716c0", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -28,7 +28,7 @@ fn checkval(box ref x: Box<uint>) -> uint {\n }\n \n pub fn main() {\n-    let obj = box 1;\n+    let obj: Box<_> = box 1;\n     let objptr: *const uint = &*obj;\n     let xptr = getaddr(obj);\n     assert_eq!(objptr, xptr);"}, {"sha": "42062b89cfd2fe459eb7d2c86612ec88cab8a7dc", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {\n-    let expected = box 100;\n+    let expected: Box<_> = box 100;\n     let actual = id::<Box<int>>(expected.clone());\n     println!(\"{}\", *actual);\n     assert_eq!(*expected, *actual);"}, {"sha": "81c4054d0091013a9d9ff2fccddb52e32f327965", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n /**\n@@ -61,7 +60,8 @@ mod map_reduce {\n         }\n \n         let ctrl_clone = ctrl.clone();\n-        ::map(input, box |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        ::map(input, Box::new(|a,b| emit(&mut intermediates, ctrl.clone(), a, b)));\n         ctrl_clone.send(ctrl_proto::mapper_done).unwrap();\n     }\n "}, {"sha": "f4daf9a4f629789696ce65177ad9f18ea75235b3", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Test that `Fn(int) -> int + 'static` parses as `(Fn(int) -> int) +\n // 'static` and not `Fn(int) -> (int + 'static)`. The latter would\n // cause a compilation error. Issue #18772.\n \n fn adder(y: int) -> Box<Fn(int) -> int + 'static> {\n-    box move |x| y + x\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(move |x| y + x)\n }\n \n fn main() {}"}, {"sha": "41c859214e96b188cdc19f970946831ad3bf30f2", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -154,7 +154,7 @@ pub fn main() {\n     test_order();\n \n     // make sure that format! doesn't move out of local variables\n-    let a = box 3;\n+    let a: Box<_> = box 3;\n     format!(\"{}\", a);\n     format!(\"{}\", a);\n "}, {"sha": "4ee06d44e65656a1f8957c09f0722f8619a5a9ad", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -67,15 +67,15 @@ fn test_tup() {\n fn test_unique() {\n     let i = &Cell::new(0);\n     {\n-        let _a = box r(i);\n+        let _a: Box<_> = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique_rec() {\n     let i = &Cell::new(0);\n     {\n-        let _a = box BoxR {\n+        let _a: Box<_> = box BoxR {\n             x: r(i)\n         };\n     }"}, {"sha": "1d7a74b042fac815fb7dbc48a9f70873122d607c", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -40,7 +40,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let mut x = box 1;\n+        let mut x: Box<_> = box 1;\n \n         assert_eq!(rusti::atomic_load(&*x), 1);\n         *x = 5;"}, {"sha": "09dd5304ec5c21a2a75bdb0bf22c4c270507ff47", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -23,7 +23,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let x = box 1;\n+        let x: Box<_> = box 1;\n         let mut y = rusti::init();\n         let mut z: *const uint = transmute(&x);\n         rusti::move_val_init(&mut y, x);"}, {"sha": "48ea00e47d696a70c2ef4bd6c72eb7b1e6d12a2d", "filename": "src/test/run-pass/issue-10802.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10802.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -42,13 +42,13 @@ impl  Whatever {\n \n fn main() {\n     {\n-        let f = box DroppableStruct;\n+        let f: Box<_> = box DroppableStruct;\n         let _a = Whatever::new(box f as Box<MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n     unsafe { DROPPED = false; }\n     {\n-        let f = box DroppableEnum::DroppableVariant1;\n+        let f: Box<_> = box DroppableEnum::DroppableVariant1;\n         let _a = Whatever::new(box f as Box<MyTrait>);\n     }\n     assert!(unsafe { DROPPED });"}, {"sha": "c67ce92ee0a9acebcc4bb53e0b876e0fd3728656", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n+\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n trait Foo { fn dummy(&self) { } }\n impl Foo for int {}\n@@ -39,16 +39,16 @@ fn main() {\n     let r = &1;\n     foog(x, &[r]);\n \n-    let x: [Box<Foo>; 2] = [box 1, box 2];\n+    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n     bar(x);\n-    bar([box 1, box 2]);\n+    bar([Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo>] = &[box 1, box 2];\n+    let x: &[Box<Foo>] = &[Box::new(1), Box::new(2)];\n     bars(x);\n-    bars(&[box 1, box 2]);\n+    bars(&[Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo>] = &[box 1, box 2];\n-    foog(x, &[box 1]);\n+    let x: &[Box<Foo>] = &[Box::new(1), Box::new(2)];\n+    foog(x, &[Box::new(1)]);\n \n     struct T<'a> {\n         t: [&'a (Foo+'a); 2]\n@@ -85,9 +85,9 @@ fn main() {\n         t: &'a [Box<Foo+'static>]\n     }\n     let _n = M {\n-        t: &[box 1, box 2]\n+        t: &[Box::new(1), Box::new(2)]\n     };\n-    let x: [Box<Foo>; 2] = [box 1, box 2];\n+    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n     let _n = M {\n         t: &x\n     };"}, {"sha": "4b2b3e8702427fc8725405d37e887b1831faff2f", "filename": "src/test/run-pass/issue-11677.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11677.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n \n // this code used to cause an ICE\n \n@@ -28,5 +26,6 @@ impl X<int> for F {\n }\n \n fn main() {\n-  S {f: box F, g: box F};\n+  // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+  S {f: Box::new(F), g: Box::new(F) };\n }"}, {"sha": "56d1d3599c7fde3dcb7e3cfd8a49c5a88cc46d2f", "filename": "src/test/run-pass/issue-12744.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12744.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn main() {\n-    fn test() -> Box<std::any::Any + 'static> { box 1 }\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    fn test() -> Box<std::any::Any + 'static> { Box::new(1) }\n     println!(\"{:?}\", test())\n }"}, {"sha": "96e2a0dc48539c71f620dfdf434145e038d9d119", "filename": "src/test/run-pass/issue-13808.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n struct Foo<'a> {\n     listener: Box<FnMut() + 'a>,\n }\n \n impl<'a> Foo<'a> {\n     fn new<F>(listener: F) -> Foo<'a> where F: FnMut() + 'a {\n-        Foo { listener: box listener }\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        Foo { listener: Box::new(listener) }\n     }\n }\n "}, {"sha": "d413e323a09997738ede945cb2b603abb11e2b08", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -23,6 +23,6 @@ trait A { fn foo(&self) {} }\n impl A for B1 {}\n \n fn main() {\n-    let v = box B1;\n+    let v: Box<_> = box B1;\n     let _c: Box<A> = v.clone();\n }"}, {"sha": "5924aa44d4d63c672dc701041d446289fdd8cfc6", "filename": "src/test/run-pass/issue-14589.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14589.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,13 +11,12 @@\n // All 3 expressions should work in that the argument gets\n // coerced to a trait object\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn main() {\n-    send::<Box<Foo>>(box Output(0));\n-    Test::<Box<Foo>>::foo(box Output(0));\n-    Test::<Box<Foo>>::new().send(box Output(0));\n+    send::<Box<Foo>>(Box::new(Output(0)));\n+    Test::<Box<Foo>>::foo(Box::new(Output(0)));\n+    Test::<Box<Foo>>::new().send(Box::new(Output(0)));\n }\n \n fn send<T>(_: T) {}"}, {"sha": "fbf08ab564d3510d9ba11ed64340cee2d1f47a3d", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n trait Matcher {\n     fn next_match(&mut self) -> Option<(uint, uint)>;\n }\n@@ -32,9 +29,10 @@ trait IntoMatcher<'a, T> {\n \n impl<'a, 'b, F> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for F where F: FnMut(char) -> bool + 'b {\n     fn into_matcher(self, s: &'a str) -> CharPredMatcher<'a, 'b> {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         CharPredMatcher {\n             str: s,\n-            pred: box self,\n+            pred: Box::new(self),\n         }\n     }\n }"}, {"sha": "5b093d16cbf838a3f7c0a5b0735a3b3fcdef4f3d", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn match_on_local() {\n-    let mut foo = Some(box 5);\n+    let mut foo: Option<Box<_>> = Some(box 5);\n     match foo {\n         None => {},\n         Some(x) => {\n@@ -33,7 +33,7 @@ fn match_on_arg(mut foo: Option<Box<i32>>) {\n }\n \n fn match_on_binding() {\n-    match Some(box 7) {\n+    match Some(Box::new(7)) {\n         mut foo => {\n             match foo {\n                 None => {},\n@@ -47,7 +47,7 @@ fn match_on_binding() {\n }\n \n fn match_on_upvar() {\n-    let mut foo = Some(box 8i32);\n+    let mut foo: Option<Box<_>> = Some(box 8i32);\n     let f = move|| {\n         match foo {\n             None => {},"}, {"sha": "786c701a0427bf0808c321b14002c872c25f1c4e", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,6 @@\n // ignore-pretty\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct Parser<'a, I, O> {\n@@ -20,13 +19,14 @@ struct Parser<'a, I, O> {\n \n impl<'a, I: 'a, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         Parser {\n-            parse: box move |x: I| {\n+            parse: Box::new(move |x: I| {\n                 match (self.parse)(x) {\n                     Ok(r) => (rhs.parse)(r),\n                     Err(e) => Err(e)\n                 }\n-            }\n+            })\n         }\n     }\n }"}, {"sha": "497361969bfc3cffa1eddd796358c4c8a496eb05", "filename": "src/test/run-pass/issue-17734.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17734.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,16 +10,15 @@\n \n // Test that generating drop glue for Box<str> doesn't ICE\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn f(s: Box<str>) -> Box<str> {\n     s\n }\n \n fn main() {\n     // There is currently no safe way to construct a `Box<str>`, so improvise\n-    let box_arr: Box<[u8]> = box ['h' as u8, 'e' as u8, 'l' as u8, 'l' as u8, 'o' as u8];\n+    //\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let box_arr: Box<[u8]> = Box::new(['h' as u8, 'e' as u8, 'l' as u8, 'l' as u8, 'o' as u8]);\n     let box_str: Box<str> = unsafe { std::mem::transmute(box_arr) };\n     assert_eq!(&*box_str, \"hello\");\n     f(box_str);"}, {"sha": "2011b87e731021a96761aaea10b2d56ff5d963fd", "filename": "src/test/run-pass/issue-18425.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18425.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,9 +11,6 @@\n // Check that trans doesn't ICE when translating an array repeat\n // expression with a count of 1 and a non-Copy element type.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let _ = [box 1_usize; 1];\n+    let _ = [Box::new(1_usize); 1];\n }"}, {"sha": "9ebd96a685eafefbccb7c421098bee23a51cc7ba", "filename": "src/test/run-pass/issue-20575.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20575.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,10 +10,9 @@\n \n // Test that overloaded calls work with zero arity closures\n \n-#![feature(box_syntax)]\n-\n fn main() {\n-    let functions: [Box<Fn() -> Option<()>>; 1] = [box || None];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n     let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "0bef42b6202edfaec0291b7706f2b8a63ed10452", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,6 +17,6 @@ fn a_val(x: Box<int>, y: Box<int>) -> int {\n }\n \n pub fn main() {\n-    let z = box 22;\n+    let z: Box<_> = box 22;\n     a_val(z.clone(), z.clone());\n }"}, {"sha": "6aeec228c0d3e2f9a1bf4f3564b21daece451fa0", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -31,5 +31,5 @@ fn Font() -> Font {\n }\n \n pub fn main() {\n-    let _f = box Font();\n+    let _f: Box<_> = box Font();\n }"}, {"sha": "ae146d8d35356960d45f15ec5ec1642f2e870bb4", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,8 +11,6 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unsafe_destructor)]\n \n pub type Task = int;\n@@ -52,11 +50,11 @@ pub mod pipes {\n \n     pub fn packet<T:Send>() -> *const packet<T> {\n         unsafe {\n-            let p: *const packet<T> = mem::transmute(box Stuff{\n+            let p: *const packet<T> = mem::transmute(Box::new(Stuff{\n                 state: empty,\n                 blocked_task: None::<Task>,\n                 payload: None::<T>\n-            });\n+            }));\n             p\n         }\n     }"}, {"sha": "e653dda8de5f00591470368694d1b2ad82b4aac8", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n   //   let y = box ({a: 4});\n   //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n-    let z = box() (box true as Box<it>);\n+    let z: Box<_> = box () (box true as Box<it>);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "6f107a37e9b25b9bec97cb09f671e76b61017910", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,5 +20,5 @@ use socketlib::socket;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;\n-    let _sock = box socket::socket_handle(fd);\n+    let _sock: Box<_> = box socket::socket_handle(fd);\n }"}, {"sha": "98c9f3d5ec5ade97e045bbbe8973429857c07078", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,7 @@ extern crate collections;\n use std::collections::HashMap;\n \n pub fn main() {\n-    let x;\n+    let x: Box<_>;\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new();\n     x = box 1;\n     buggy_map.insert(42, &*x);"}, {"sha": "0784c8be883c84dd39abde8723b1fd19404c1282", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n type Connection = Box<FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = box |_| {};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mock_connection: Connection = Box::new(|_| {});\n     Some(mock_connection)\n }\n "}, {"sha": "1c1b329e314c1d7ad96109c6467d138005685926", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-   let mut x = box 3;\n+   let mut x: Box<_> = box 3;\n    x = x;\n    assert_eq!(*x, 3);\n }"}, {"sha": "e039be058defec1a6f6d1502da16eeda8172bcc5", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,6 @@\n // rustc --test ignores2.rs && ./ignores2\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::old_path::{Path};\n@@ -23,9 +22,10 @@ type rsrc_loader = Box<FnMut(&Path) -> (result::Result<String, String>) + 'stati\n \n fn tester()\n {\n-    let mut loader: rsrc_loader = box move|_path| {\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mut loader: rsrc_loader = Box::new(move|_path| {\n         result::Result::Ok(\"more blah\".to_string())\n-    };\n+    });\n \n     let path = old_path::Path::new(\"blah\");\n     assert!(loader(&path).is_ok());"}, {"sha": "28e44536892a5a5d1be7919b0e4561bfb2e2a6b0", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n \n use std::thread::Thread;\n use std::sync::mpsc::Sender;\n@@ -27,8 +26,8 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n     let _t = Thread::spawn(move|| {\n         let mut samples_chan = samples_chan;\n \n-        // `box() (...)` syntax is needed to make pretty printer converge in one try:\n-        let callback: SamplesFn = box() (move |buffer| {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let callback: SamplesFn = Box::new(move |buffer| {\n             for i in 0_usize..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])\n             }"}, {"sha": "1f53d9ce5422fc4831c540c3725beb2c424debf6", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,6 +13,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let y = box 1;\n+    let y: Box<_> = box 1;\n     y;\n }"}, {"sha": "7e773cd799476c12f9b46b0a53c991ba0d8c57f4", "filename": "src/test/run-pass/issue-5718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5718.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,7 +16,7 @@ struct Element;\n macro_rules! foo {\n     ($tag: expr, $string: expr) => {\n         if $tag == $string {\n-            let element = box Element;\n+            let element: Box<_> = box Element;\n             unsafe {\n                 return std::mem::transmute::<_, uint>(element);\n             }"}, {"sha": "562e2b68af174391bd71ddbf093f919bb22445db", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Either::Left(box 17) {\n+    match Either::Left(Box::new(17)) {\n         Either::Right(()) => {}\n         _ => {}\n     }"}, {"sha": "d4d2603bfe2449b2626257b4e9504bcbdbe550b2", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,26 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    match &[(box 5,box 7)] {\n+    match &[(Box::new(5),Box::new(7))] {\n         ps => {\n            let (ref y, _) = ps[0];\n            assert!(**y == 5);\n         }\n     }\n \n-    match Some(&[(box 5,)]) {\n+    match Some(&[(Box::new(5),)]) {\n         Some(ps) => {\n            let (ref y,) = ps[0];\n            assert!(**y == 5);\n         }\n         None => ()\n     }\n \n-    match Some(&[(box 5,box 7)]) {\n+    match Some(&[(Box::new(5),Box::new(7))]) {\n         Some(ps) => {\n            let (ref y, ref z) = ps[0];\n            assert!(**y == 5);"}, {"sha": "74ddb990c31cb839928d1da2fffdd1a64cb0a06c", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,11 +17,12 @@\n struct A { a: Box<isize> }\n \n fn foo() -> Box<FnMut() -> isize + 'static> {\n-    let k = box 22;\n+    let k: Box<_> = box 22;\n     let _u = A {a: k.clone()};\n     // FIXME(#16640) suffix in `22_isize` suffix shouldn't be necessary\n     let result  = || 22_isize;\n-    box result\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(result)\n }\n \n pub fn main() {"}, {"sha": "7b11aae168ca965744ccbb01a9423e799947db1f", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,7 @@ struct A { a: Box<int> }\n \n pub fn main() {\n     fn invoke<F>(f: F) where F: FnOnce() { f(); }\n-    let k = box 22;\n+    let k: Box<_> = box 22;\n     let _u = A {a: k.clone()};\n     invoke(|| println!(\"{}\", k.clone()) )\n }"}, {"sha": "1500edce779c371d5baa8ee5d069b95a2695c4f8", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn f() {\n-    let a = box 1;\n+    let a: Box<_> = box 1;\n     let b: &int = &*a;\n     println!(\"{}\", b);\n }"}, {"sha": "cd4802f4b397a6407f5e4525f459b842d415b99b", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n struct Pair { a: Box<int>, b: Box<int> }\n \n pub fn main() {\n-    let mut x = box Pair {a: box 10, b: box 20};\n+    let mut x: Box<_> = box Pair {a: box 10, b: box 20};\n     let x_internal = &mut *x;\n     match *x_internal {\n       Pair {a: ref mut a, b: ref mut _b} => {"}, {"sha": "a49ce82617007e2921b3fb5f207af537c0b1eccb", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -39,7 +39,7 @@ fn call_foo_copy() -> int {\n }\n \n fn call_foo_other() -> int {\n-    let mut x = Vec::new();\n+    let mut x: Vec<Box<_>> = Vec::new();\n     let y = x.foo();\n     x.push(box 0);\n     y"}, {"sha": "ff06df079b05e029717153c437d1d7a6ff28432f", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -26,7 +26,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n }\n \n pub fn main() {\n-    let x = box Triple{x: 1, y: 2, z: 3};\n+    let x: Box<_> = box Triple{x: 1, y: 2, z: 3};\n     assert_eq!(test(true, x.clone()), 2);\n     assert_eq!(test(true, x.clone()), 2);\n     assert_eq!(test(true, x.clone()), 2);"}, {"sha": "590caff3c2dc850c168fb376c7c72b8137efba7a", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n struct X { x: int, y: int, z: int }\n \n pub fn main() {\n-    let x = box X{x: 1, y: 2, z: 3};\n+    let x: Box<_> = box X{x: 1, y: 2, z: 3};\n     let y = x;\n     assert!((y.y == 2));\n }"}, {"sha": "0bff2c2292e74be2caf7c884473571bc40f038f0", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,4 +13,4 @@\n \n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }\n+pub fn main() { let x: Box<_> = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }"}, {"sha": "8241424124e0e0e3373913c695927e0cd14a61f4", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -26,7 +26,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n }\n \n pub fn main() {\n-    let x = box Triple{x: 1, y: 2, z: 3};\n+    let x: Box<_> = box Triple{x: 1, y: 2, z: 3};\n     for _ in 0_usize..10000_usize {\n         assert_eq!(test(true, x.clone()), 2);\n     }"}, {"sha": "d68a7c831f212ca4ae683e5e4469e4cc9c818d83", "filename": "src/test/run-pass/move-guard-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-guard-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fmove-guard-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-guard-const.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n \n     let v = (1, 2);\n "}, {"sha": "039e53cab8044805db0dd51f51c63c482867bcd0", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,10 +11,8 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn unique() -> Box<FnMut()+'static> { return box || (); }\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+fn unique() -> Box<FnMut()+'static> { return Box::new(|| ()); }\n \n pub fn main() {\n }"}, {"sha": "b7216c87c30bbc22a7f174ca07c3f25ea4447d61", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,10 +11,8 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn unique() -> Box<FnMut()+'static> { box || () }\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+fn unique() -> Box<FnMut()+'static> { Box::new(|| ()) }\n \n pub fn main() {\n }"}, {"sha": "6436165968d678801130a581164d5a9e85b9f6fa", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -22,9 +22,10 @@ struct Point {\n }\n \n pub fn main() {\n-    let box_5 = box 5_usize;\n+    let box_5: Box<_> = box 5_usize;\n     assert_eq!(Rc::new(5_usize).to_uint(), Some(5));\n-    assert_eq!((box &box &Rc::new(box box &box_5)).to_uint(), Some(5));\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    assert_eq!((Box::new(&Box::new(&Rc::new(Box::new(Box::new(&box_5)))))).to_uint(), Some(5));\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);\n     assert_eq!(point.y, 4);"}, {"sha": "bb1694be5e29b7765b8d2ae00449fbb84fa948a0", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;\n@@ -23,7 +20,7 @@ struct Point {\n \n pub fn main() {\n     assert_eq!(*Rc::new(5), 5);\n-    assert_eq!(***Rc::new(box box 5), 5);\n+    assert_eq!(***Rc::new(Box::new(Box::new(5))), 5);\n     assert_eq!(*Rc::new(Point {x: 2, y: 4}), Point {x: 2, y: 4});\n \n     let i = Rc::new(RefCell::new(2));"}, {"sha": "8f655f0517ddf47fe56224d420ba0e0a34992a59", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -55,7 +55,7 @@ impl Int for int {\n }\n \n fn main() {\n-    let mut f = box Foo {\n+    let mut f: Box<_> = box Foo {\n         x: 1,\n         y: 2,\n     };"}, {"sha": "9be6b212a3caabd0b7259800b96999d68cf5ceee", "filename": "src/test/run-pass/owned-implies-static.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn f<T: 'static>(_x: T) {}\n \n pub fn main() {\n-    f(box 5);\n+    f(Box::new(5));\n }"}, {"sha": "1fd83041f62077ca3c824706e7ae3bf9eef4904d", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,7 +25,7 @@ fn sums_to(v: Vec<int> , sum: int) -> bool {\n \n fn sums_to_using_uniq(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0_usize;\n-    let mut sum0 = box 0;\n+    let mut sum0: Box<_> = box 0;\n     while i < v.len() {\n         *sum0 += v[i];\n         i += 1_usize;\n@@ -47,7 +47,7 @@ struct F<T> { f: T }\n \n fn sums_to_using_uniq_rec(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0_usize;\n-    let mut sum0 = F {f: box 0};\n+    let mut sum0 = F::<Box<_>> {f: box 0};\n     while i < v.len() {\n         *sum0.f += v[i];\n         i += 1_usize;"}, {"sha": "7bc761d2f606d06119d9b83a25196ade1b54c10b", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,7 +25,7 @@ impl<'a> get for &'a int {\n }\n \n pub fn main() {\n-    let x = box 6;\n+    let x: Box<_> = box 6;\n     let y = x.get();\n     println!(\"y={}\", y);\n     assert_eq!(y, 6);"}, {"sha": "1e91ab7e921d32aeeba7361bbca7c4d7cb109806", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,7 +16,7 @@ fn foo(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let p = box 22_usize;\n+    let p: Box<_> = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22_usize);"}, {"sha": "7c9b1ae226f5aca97a6f091b970149367bda301c", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -16,7 +16,7 @@ fn foo(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let p = box 3_usize;\n+    let p: Box<_> = box 3_usize;\n     let r = foo(&*p);\n     assert_eq!(r, 3_usize);\n }"}, {"sha": "3704fc1d8d1a30dcec80b0b287195eb9d94d2963", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {\n@@ -25,7 +24,8 @@ pub fn main() {\n     assert_eq!(i, 3);\n     {\n         let cl = || i += 1;\n-        let mut cl_box = box_it(box cl);\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let mut cl_box = box_it(Box::new(cl));\n         cl_box.cl.call_mut(());\n     }\n     assert_eq!(i, 4);"}, {"sha": "0ca17e218d2f637751d3dd781f4f131a0c515f5d", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,6 +15,6 @@ fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n-    let p = box 3_usize;\n+    let p: Box<_> = box 3_usize;\n     assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "0057a51012dd0bdaef6fdeda53b048a37e14aaf0", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,7 +13,8 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n // Should pass region checking.\n fn ok(f: Box<FnMut(&uint)>) {\n@@ -23,14 +24,14 @@ fn ok(f: Box<FnMut(&uint)>) {\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: Box<for<'r> FnMut(&'r uint)> = box |x| { };\n+    let mut g: Box<for<'r> FnMut(&'r uint)> = Box::new(|x| { });\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n fn ok_inferred(f: Box<FnMut(&uint)>) {\n-    let mut g: Box<for<'r> FnMut(&'r uint)> = box |_| {};\n+    let mut g: Box<for<'r> FnMut(&'r uint)> = Box::new(|_| {});\n     g = f;\n }\n "}, {"sha": "86f4f2dd18e643377501f2444adadfce20133a99", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     loop {\n         let y = borrow(&*x);\n         assert_eq!(*x, *y);"}, {"sha": "ebbc5b70f604153934b97bcd208ee3b1413dd42f", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -18,7 +18,7 @@ fn x_coord(p: &Point) -> &int {\n }\n \n pub fn main() {\n-    let p = box Point {x: 3, y: 4};\n+    let p: Box<_> = box Point {x: 3, y: 4};\n     let xc = x_coord(&*p);\n     assert_eq!(*xc, 3);\n }"}, {"sha": "1ad96d4bc55933e7c1d783b5e777027dda87ca0a", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -30,7 +30,8 @@ struct Foo<'a,'tcx:'a> {\n \n impl<'a,'tcx> Foo<'a,'tcx> {\n     fn bother(&mut self) -> int {\n-        self.elaborate_bounds(box |this| {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        self.elaborate_bounds(Box::new(|this| {\n             // (*) Here: type of `this` is `&'f0 Foo<&'f1, '_2>`,\n             // where `'f0` and `'f1` are fresh, free regions that\n             // result from the bound regions on the closure, and `'2`\n@@ -44,7 +45,7 @@ impl<'a,'tcx> Foo<'a,'tcx> {\n             // `region_inference.rs` file (and the `givens` field, in\n             // particular) for more details.\n             this.foo()\n-        })\n+        }))\n     }\n \n     fn foo(&mut self) -> int {"}, {"sha": "1bcde77261b930d9ada9754a9a7e290f19bb7e61", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -25,6 +25,7 @@ fn call_static_closure(mut cl: closure_box<'static>) {\n }\n \n pub fn main() {\n-    let cl_box = box_it(box || println!(\"Hello, world!\"));\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let cl_box = box_it(Box::new(|| println!(\"Hello, world!\")));\n     call_static_closure(cl_box);\n }"}, {"sha": "92582177989b6d234d5dc26eb664898ce7dcc411", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n     let new_x = x.change();\n     assert_eq!(new_x.a, 55);\n \n-    let x = box new_x;\n+    let x: Box<_> = box new_x;\n     let new_x = x.change_again();\n     assert_eq!(new_x.a, 45);\n }"}, {"sha": "b71b907fcf0432b23ae33ca4bee943041ccf282f", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,7 @@\n use std::rc::Rc;\n \n pub fn main() {\n-   let mut x = box 3;\n+   let mut x: Box<_> = box 3;\n    x = x;\n    assert!(*x == 3);\n "}, {"sha": "264ee5f55b9771814b3907724d1d0209f3f85a1c", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -20,7 +20,7 @@ fn test05_start<F:FnOnce(int)>(f: F) {\n }\n \n fn test05() {\n-    let three = box 3;\n+    let three: Box<_> = box 3;\n     let fn_to_send = move|n:int| {\n         println!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);"}, {"sha": "03971668182acd98ff8d1607b2f6dad8033dfa98", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n #[derive(Debug)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n-    println!(\"{:?}\", Foo(box [0, 1, 2]));\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    println!(\"{:?}\", Foo(Box::new([0, 1, 2])));\n }"}, {"sha": "46f9e991347e42bc601c200cf0fd39d8b8fcb9c4", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,7 @@ use std::sync::mpsc::channel;\n pub fn main() {\n     let (tx, rx) = channel::<uint>();\n \n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     let x_in_parent = &(*x) as *const int as uint;\n \n     let _t = Thread::spawn(move || {"}, {"sha": "cf23785b844482d226a02b63ee008f5042505076", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -104,9 +104,10 @@ fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n }\n fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     for pet in &*arc {\n-        pet.name(box |name| {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        pet.name(Box::new(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n-        })\n+        }))\n     }\n }\n fn check_pedigree(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {"}, {"sha": "1565ccfe459d26a11b8fa25a5c6faaee5596d53b", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n trait Trait<T> {\n     fn f(&self, x: T);\n }\n@@ -29,7 +26,8 @@ impl Trait<&'static str> for Struct {\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait<&'static str>> = box a;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let b: Box<Trait<&'static str>> = Box::new(a);\n     b.f(\"Mary\");\n     let c: &Trait<&'static str> = &a;\n     c.f(\"Joe\");"}, {"sha": "6db7113b0504cb169b1f350b984fc43fc81ba7c4", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -33,14 +33,16 @@ fn foo(mut a: Box<Writer>) {\n     a.write(b\"Hello\\n\");\n }\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait> = box a;\n+    let b: Box<Trait> = Box::new(a);\n     b.f();\n     let c: &Trait = &a;\n     c.f();\n \n     let out = old_io::stdout();\n-    foo(box out);\n+    foo(Box::new(out));\n }\n "}, {"sha": "650688dd9088fc9d8da4f90ff55c98233e0111d8", "filename": "src/test/run-pass/traits-conditional-dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -35,5 +35,5 @@ fn main() {\n     assert_eq!(get_it(&1_u32), 1_u32);\n     assert_eq!(get_it(&1_u16), 1_u16);\n     assert_eq!(get_it(&Some(1_u16)), Some(1_u16));\n-    assert_eq!(get_it(&box 1), box 1);\n+    assert_eq!(get_it(&Box::new(1)), Box::new(1));\n }"}, {"sha": "432dbd72a294887c30c2f8d3ac7820077a9aac06", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -32,13 +32,13 @@ fn r(i:int) -> r {\n pub fn main() {\n     p_foo(r(10));\n \n-    p_foo(box r(10));\n-    p_foo(box 10);\n+    p_foo::<Box<_>>(box r(10));\n+    p_foo::<Box<_>>(box 10);\n     p_foo(10);\n \n-    s_foo(box 10);\n+    s_foo::<Box<_>>(box 10);\n     s_foo(10);\n \n-    u_foo(box 10);\n+    u_foo::<Box<_>>(box 10);\n     u_foo(10);\n }"}, {"sha": "832c1f8802d1ff9ab3a67a5d0f5d303eb481b042", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -46,11 +46,11 @@ impl<T> Bar<T> {\n }\n \n fn main() {\n-    let foo = box Foo {\n+    let foo: Box<_> = box Foo {\n         f: 1,\n     };\n     println!(\"{} {} {}\", foo.foo(2), foo.bar(2), foo.baz(2));\n-    let bar = box Bar {\n+    let bar: Box<_> = box Bar {\n         f: 1,\n     };\n     println!(\"{} {} {}\", bar.foo(2), bar.bar(2), bar.baz(2));"}, {"sha": "52311544297ae1d52149caa20415d55f7a76ecdf", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -11,13 +11,13 @@\n // Test that the call operator autoderefs when calling to an object type.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n \n fn make_adder(x: int) -> Box<FnMut(int)->int + 'static> {\n-    box move |y| { x + y }\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(move |y| { x + y })\n }\n \n pub fn main() {"}, {"sha": "a34799fdcc543b8adc9a1720da70be8ccf8a326a", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n \n fn make_adder(x: int) -> Box<FnMut(int)->int + 'static> {\n-    box move |y| { x + y }\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(move |y| { x + y })\n }\n \n pub fn main() {"}, {"sha": "056ae63b68488d5773ea9fb23d7a484744790367", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -17,7 +17,8 @@\n \n fn main(){\n     fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n-        box move || t.clone()\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        Box::new(move || t.clone())\n     }\n \n     let mut f = bar(42_u32);"}, {"sha": "16a55ab550d2fcd46d501ae729bd98110af418de", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -15,10 +15,11 @@\n #![feature(unboxed_closures)]\n \n fn main() {\n-    let task: Box<Fn(int) -> int> = box |x| x;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let task: Box<Fn(int) -> int> = Box::new(|x| x);\n     task.call((0, ));\n \n-    let mut task: Box<FnMut(int) -> int> = box |x| x;\n+    let mut task: Box<FnMut(int) -> int> = Box::new(|x| x);\n     task(0);\n \n     call(|x| x, 22);"}, {"sha": "d44a8cdcc24756ec1968e787bdb5270c6c9940fd", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -27,7 +27,7 @@ impl Changer for X {\n }\n \n pub fn main() {\n-    let x = box X { a: 32 };\n+    let x: Box<_> = box X { a: 32 };\n     let new_x = x.change();\n     assert_eq!(new_x.a, 55);\n }"}, {"sha": "78578bdb3c3a1159d8badf59cea88674fe9f5ba1", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i = box 1;\n+    let mut i: Box<_> = box 1;\n     // Should be a copy\n     let mut j;\n     j = i.clone();"}, {"sha": "9edd83d2c7cb96a4ed107a70cf9ccf181d4a85da", "filename": "src/test/run-pass/unique-assign-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,8 +13,8 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 1;\n-    let mut j = box 2;\n+    let i: Box<_> = box 1;\n+    let mut j: Box<_> = box 2;\n     // Should drop the previous value of j\n     j = i;\n     assert_eq!(*j, 1);"}, {"sha": "64f8b998096ed6e76a8e62fdd84eca1a5ccf03d0", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -18,6 +18,6 @@ fn f<T>(t: T) -> T {\n }\n \n pub fn main() {\n-    let t = f(box 100);\n+    let t = f::<Box<_>>(box 100);\n     assert_eq!(t, box 100);\n }"}, {"sha": "c9cbaf27c4f2ff73d0d0edd3a32ce41da3d3f31b", "filename": "src/test/run-pass/unique-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i;\n+    let mut i: Box<_>;\n     i = box 1;\n     assert_eq!(*i, 1);\n }"}, {"sha": "3bab3a6b79a116b0d7f8b950fe7454a1cedc8c82", "filename": "src/test/run-pass/unique-autoderef-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n struct J { j: int }\n \n pub fn main() {\n-    let i = box J {\n+    let i: Box<_> = box J {\n         j: 100\n     };\n     assert_eq!(i.j, 100);"}, {"sha": "1c94447392160ce0226f5fde8364eed03241ce18", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box vec!(100);\n+    let i: Box<_> = box vec!(100);\n     assert_eq!((*i)[0], 100);\n }"}, {"sha": "8fe86455b4525785601685136f34b1d7b838131c", "filename": "src/test/run-pass/unique-cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-cmp.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     assert!(i == box 100);\n     assert!(i < box 101);\n     assert!(i <= box 100);"}, {"sha": "cb6e84ae1aa7387b052dc45a76bbb86854298ef7", "filename": "src/test/run-pass/unique-containing-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n pub fn main() {\n     enum t { t1(int), t2(int), }\n \n-    let _x = box t::t1(10);\n+    let _x: Box<_> = box t::t1(10);\n \n     /*alt *x {\n       t1(a) {"}, {"sha": "7264b9fee9524d672ba809b9bc1ae003091fe114", "filename": "src/test/run-pass/unique-create.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-create.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    box 100;\n+    let _: Box<_> = box 100;\n }\n \n fn vec() {"}, {"sha": "14bb72f4412bed49871b612cb5a0605b049d0f28", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i = box 1;\n+    let mut i: Box<_> = box 1;\n     // Should be a copy\n     let mut j = i.clone();\n     *i = 2;"}, {"sha": "803e7ba16ed4003aaeadc0f692cb8e809a81a579", "filename": "src/test/run-pass/unique-decl-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 1;\n+    let i: Box<_> = box 1;\n     let j = i;\n     assert_eq!(*j, 1);\n }"}, {"sha": "360adaa638f96fcbcd9c5bec045948da8dfda016", "filename": "src/test/run-pass/unique-decl-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     let j = i;\n     assert_eq!(*j, 100);\n }"}, {"sha": "1c1228f924145090952bc7958017b50612cc777d", "filename": "src/test/run-pass/unique-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-deref.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     assert_eq!(*i, 100);\n }"}, {"sha": "745a55e06510facf894e3764eb21c3ed045bb6fb", "filename": "src/test/run-pass/unique-drop-complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,5 +12,5 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _x = box vec!(0,0,0,0,0);\n+    let _x: Box<_> = box vec!(0,0,0,0,0);\n }"}, {"sha": "20bf4bef1714dae413a5f886f154cab440456fe8", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut a = vec!(box 10);\n+    let mut a: Vec<Box<_>> = vec!(box 10);\n     let b = a.clone();\n \n     assert_eq!(*a[0], 10);"}, {"sha": "c24ec8fe44a3c396c9c2ad99128d0b098b949fa2", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let vect = vec!(box 100);\n+    let vect : Vec<Box<_>> = vec!(box 100);\n     assert!(vect[0] == box 100);\n }"}, {"sha": "44e8703aaf2febcf6f662c84c43a7721b4c2ee05", "filename": "src/test/run-pass/unique-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-init.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,5 +12,5 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _i = box 100;\n+    let _i: Box<_> = box 100;\n }"}, {"sha": "6bb1fdcf5627a5b72a20644832bff3bc7171a848", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -23,11 +23,11 @@ fn sendable() {\n         assert!(i != j);\n     }\n \n-    let i = box 100;\n-    let j = box 100;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 100;\n     f(i, j);\n-    let i = box 100;\n-    let j = box 101;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 101;\n     g(i, j);\n }\n \n@@ -41,11 +41,11 @@ fn copyable() {\n         assert!(i != j);\n     }\n \n-    let i = box 100;\n-    let j = box 100;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 100;\n     f(i, j);\n-    let i = box 100;\n-    let j = box 101;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 101;\n     g(i, j);\n }\n \n@@ -59,11 +59,11 @@ fn noncopyable() {\n         assert!(i != j);\n     }\n \n-    let i = box 100;\n-    let j = box 100;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 100;\n     f(i, j);\n-    let i = box 100;\n-    let j = box 101;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 101;\n     g(i, j);\n }\n "}, {"sha": "148ca4757ae927eccb8f1c5cb89e20f19a27c52f", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     println!(\"{}\", i);\n }"}, {"sha": "93614e86c7303fb0cebe3aa5ddf3352126599a97", "filename": "src/test/run-pass/unique-match-discrim.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -10,11 +10,8 @@\n \n // Issue #961\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn altsimple() {\n-    match box true {\n+    match Box::new(true) {\n       _ => { }\n     }\n }"}, {"sha": "126cc646833a14b83bb938680b83ee1341096da3", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -13,8 +13,8 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n-    let j = box 200;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 200;\n     let j = i;\n     assert_eq!(*j, 100);\n }"}, {"sha": "9ac5e86f87b54af426e54b9182a065020a2e9d13", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i;\n+    let mut i: Box<_>;\n     i = box 100;\n     assert_eq!(*i, 100);\n }"}, {"sha": "a54b343f2fa3d21862d88f6b412bdc9ea358fe6d", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     let mut j;\n     j = i;\n     assert_eq!(*j, 100);"}, {"sha": "ca01c07ab80431e73f6dabfe2866e71a16eab114", "filename": "src/test/run-pass/unique-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-mutable.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i = box 0;\n+    let mut i: Box<_> = box 0;\n     *i = 1;\n     assert_eq!(*i, 1);\n }"}, {"sha": "c20604406b94c823769c184dbb1287848f003279", "filename": "src/test/run-pass/unique-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-rec.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n struct X { x: int }\n \n pub fn main() {\n-    let x = box X {x: 1};\n+    let x: Box<_> = box X {x: 1};\n     let bar = x;\n     assert_eq!(bar.x, 1);\n }"}, {"sha": "72022afe5fd99a489415f631fd9a1ea35e3ac0ce", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n use std::sync::mpsc::channel;\n \n pub fn main() {\n-    let (tx, rx) = channel();\n+    let (tx, rx) = channel::<Box<_>>();\n     tx.send(box 100).unwrap();\n     let v = rx.recv().unwrap();\n     assert_eq!(v, box 100);"}, {"sha": "1315e443816228c61613df4cf6a0eace2977d742", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,8 +14,8 @@\n use std::mem::swap;\n \n pub fn main() {\n-    let mut i = box 100;\n-    let mut j = box 200;\n+    let mut i: Box<_> = box 100;\n+    let mut j: Box<_> = box 200;\n     swap(&mut i, &mut j);\n     assert_eq!(i, box 200);\n     assert_eq!(j, box 100);"}, {"sha": "c9a9d6ad1474ee6e86e8863685296aad740cdf53", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -66,7 +66,7 @@ pub fn main() {\n             f: [T; 3]\n         }\n \n-        let data = box Foo_{f: [1i32, 2, 3] };\n+        let data: Box<_> = box Foo_{f: [1i32, 2, 3] };\n         let x: &Foo<i32> = mem::transmute(raw::Slice { len: 3, data: &*data });\n         assert!(x.f.len() == 3);\n         assert!(x.f[0] == 1);\n@@ -78,7 +78,8 @@ pub fn main() {\n             f2: [u8; 5],\n         }\n \n-        let data = box Baz_{ f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n+        let data: Box<_> = box Baz_ {\n+            f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n         let x: &Baz = mem::transmute( raw::Slice { len: 5, data: &*data } );\n         assert!(x.f1 == 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n@@ -96,7 +97,7 @@ pub fn main() {\n         let obj: Box<St> = box St { f: 42 };\n         let obj: &Tr = &*obj;\n         let obj: raw::TraitObject = mem::transmute(&*obj);\n-        let data = box Qux_{ f: St { f: 234 } };\n+        let data: Box<_> = box Qux_{ f: St { f: 234 } };\n         let x: &Qux = mem::transmute(raw::TraitObject { vtable: obj.vtable,\n                                                         data: mem::transmute(&*data) });\n         assert!(x.f.foo() == 234);"}, {"sha": "9f20426aa218ecbb1ddb4e62558d6201a87e0198", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _x = box 1;\n+    let _x: Box<_> = box 1;\n     let lam_move = || {};\n     lam_move();\n }"}, {"sha": "57534feec31214ac1377fae6bc1ad209cd19bd35", "filename": "src/test/run-pass/unused-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funused-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funused-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -18,6 +18,6 @@\n \n pub fn main()\n {\n-    let y = box 1;\n+    let y: Box<_> = box 1;\n     y;\n }"}, {"sha": "b7229a00480cb0c112e73b150090b3197fed1eec", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed12499e7d91f9cdfba5833e34d20e8fd19b898/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=fed12499e7d91f9cdfba5833e34d20e8fd19b898", "patch": "@@ -14,7 +14,7 @@\n use std::thread;\n \n fn f() {\n-    let _a = box 0;\n+    let _a: Box<_> = box 0;\n     panic!();\n }\n "}]}