{"sha": "4d2e25a034385f57f2cfc6b4f4e725f827cff923", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMmUyNWEwMzQzODVmNTdmMmNmYzZiNGY0ZTcyNWY4MjdjZmY5MjM=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T19:47:44Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T19:47:44Z"}, "message": "move trait body gen code to utils", "tree": {"sha": "b8ad432ae12e7692c15cf5193e79e960a3245df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ad432ae12e7692c15cf5193e79e960a3245df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d2e25a034385f57f2cfc6b4f4e725f827cff923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2e25a034385f57f2cfc6b4f4e725f827cff923", "html_url": "https://github.com/rust-lang/rust/commit/4d2e25a034385f57f2cfc6b4f4e725f827cff923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d2e25a034385f57f2cfc6b4f4e725f827cff923/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4fb4f5184ba69927bd155d38b76cb8f4a45b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4fb4f5184ba69927bd155d38b76cb8f4a45b37", "html_url": "https://github.com/rust-lang/rust/commit/8e4fb4f5184ba69927bd155d38b76cb8f4a45b37"}], "stats": {"total": 303, "additions": 154, "deletions": 149}, "files": [{"sha": "a52592581b1098975177438d87d6e01a0b7d5790", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 2, "deletions": 149, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e25a034385f57f2cfc6b4f4e725f827cff923/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e25a034385f57f2cfc6b4f4e725f827cff923/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=4d2e25a034385f57f2cfc6b4f4e725f827cff923", "patch": "@@ -2,13 +2,12 @@ use hir::ModuleDef;\n use ide_db::helpers::{import_assets::NameToImport, mod_path_to_ast};\n use ide_db::items_locator;\n use itertools::Itertools;\n-use syntax::ast::edit::AstNodeEdit;\n-use syntax::ted;\n use syntax::{\n     ast::{self, make, AstNode, NameOwner},\n     SyntaxKind::{IDENT, WHITESPACE},\n };\n \n+use crate::utils::gen_trait_body;\n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n     utils::{\n@@ -169,158 +168,12 @@ fn impl_def_from_trait(\n \n     // Generate a default `impl` function body for the derived trait.\n     if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n-        let _ = gen_trait_body_impl(func, trait_path, adt, annotated_name);\n+        let _ = gen_trait_body(func, trait_path, adt, annotated_name);\n     };\n \n     Some((impl_def, first_assoc_item))\n }\n \n-/// Generate custom trait bodies where possible.\n-///\n-/// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n-/// `None` means that generating a custom trait body failed, and the body will remain\n-/// as `todo!` instead.\n-fn gen_trait_body_impl(\n-    func: &ast::Fn,\n-    trait_path: &ast::Path,\n-    adt: &ast::Adt,\n-    annotated_name: &ast::Name,\n-) -> Option<()> {\n-    match trait_path.segment()?.name_ref()?.text().as_str() {\n-        \"Debug\" => gen_debug_impl(adt, func, annotated_name),\n-        \"Default\" => gen_default_impl(adt, func),\n-        _ => None,\n-    }\n-}\n-\n-/// Generate a `Debug` impl based on the fields and members of the target type.\n-fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) -> Option<()> {\n-    match adt {\n-        // `Debug` cannot be derived for unions, so no default impl can be provided.\n-        ast::Adt::Union(_) => None,\n-\n-        // => match self { Self::Variant => write!(f, \"Variant\") }\n-        ast::Adt::Enum(enum_) => {\n-            let list = enum_.variant_list()?;\n-            let mut arms = vec![];\n-            for variant in list.variants() {\n-                let name = variant.name()?;\n-                let left = make::ext::ident_path(\"Self\");\n-                let right = make::ext::ident_path(&format!(\"{}\", name));\n-                let variant_name = make::path_pat(make::path_concat(left, right));\n-\n-                let target = make::expr_path(make::ext::ident_path(\"f\").into());\n-                let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n-                let args = make::arg_list(vec![target, fmt_string]);\n-                let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n-                let macro_call = make::expr_macro_call(macro_name, args);\n-\n-                arms.push(make::match_arm(Some(variant_name.into()), None, macro_call.into()));\n-            }\n-\n-            let match_target = make::expr_path(make::ext::ident_path(\"self\"));\n-            let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n-            let match_expr = make::expr_match(match_target, list);\n-\n-            let body = make::block_expr(None, Some(match_expr));\n-            let body = body.indent(ast::edit::IndentLevel(1));\n-            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n-            Some(())\n-        }\n-\n-        ast::Adt::Struct(strukt) => {\n-            let name = format!(\"\\\"{}\\\"\", annotated_name);\n-            let args = make::arg_list(Some(make::expr_literal(&name).into()));\n-            let target = make::expr_path(make::ext::ident_path(\"f\"));\n-\n-            let expr = match strukt.field_list() {\n-                // => f.debug_struct(\"Name\").finish()\n-                None => make::expr_method_call(target, make::name_ref(\"debug_struct\"), args),\n-\n-                // => f.debug_struct(\"Name\").field(\"foo\", &self.foo).finish()\n-                Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                    let method = make::name_ref(\"debug_struct\");\n-                    let mut expr = make::expr_method_call(target, method, args);\n-                    for field in field_list.fields() {\n-                        let name = field.name()?;\n-                        let f_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n-                        let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n-                        let f_path = make::expr_ref(f_path, false);\n-                        let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n-                        let args = make::arg_list(vec![f_name, f_path]);\n-                        expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n-                    }\n-                    expr\n-                }\n-\n-                // => f.debug_tuple(\"Name\").field(self.0).finish()\n-                Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                    let method = make::name_ref(\"debug_tuple\");\n-                    let mut expr = make::expr_method_call(target, method, args);\n-                    for (idx, _) in field_list.fields().enumerate() {\n-                        let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n-                        let f_path = make::expr_ref(f_path, false);\n-                        let f_path = make::expr_field(f_path, &format!(\"{}\", idx)).into();\n-                        let method = make::name_ref(\"field\");\n-                        expr = make::expr_method_call(expr, method, make::arg_list(Some(f_path)));\n-                    }\n-                    expr\n-                }\n-            };\n-\n-            let method = make::name_ref(\"finish\");\n-            let expr = make::expr_method_call(expr, method, make::arg_list(None));\n-            let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n-            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n-            Some(())\n-        }\n-    }\n-}\n-\n-/// Generate a `Debug` impl based on the fields and members of the target type.\n-fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    fn gen_default_call() -> ast::Expr {\n-        let trait_name = make::ext::ident_path(\"Default\");\n-        let method_name = make::ext::ident_path(\"default\");\n-        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n-        make::expr_call(fn_name, make::arg_list(None))\n-    }\n-    match adt {\n-        // `Debug` cannot be derived for unions, so no default impl can be provided.\n-        ast::Adt::Union(_) => None,\n-        // Deriving `Debug` for enums is not stable yet.\n-        ast::Adt::Enum(_) => None,\n-        ast::Adt::Struct(strukt) => {\n-            let expr = match strukt.field_list() {\n-                Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                    let mut fields = vec![];\n-                    for field in field_list.fields() {\n-                        let method_call = gen_default_call();\n-                        let name_ref = make::name_ref(&field.name()?.to_string());\n-                        let field = make::record_expr_field(name_ref, Some(method_call));\n-                        fields.push(field);\n-                    }\n-                    let struct_name = make::ext::ident_path(\"Self\");\n-                    let fields = make::record_expr_field_list(fields);\n-                    make::record_expr(struct_name, fields).into()\n-                }\n-                Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                    let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n-                    let fields = field_list.fields().map(|_| gen_default_call());\n-                    make::expr_call(struct_name, make::arg_list(fields))\n-                }\n-                None => {\n-                    let struct_name = make::ext::ident_path(\"Self\");\n-                    let fields = make::record_expr_field_list(None);\n-                    make::record_expr(struct_name, fields).into()\n-                }\n-            };\n-            let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n-            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n-            Some(())\n-        }\n-    }\n-}\n fn update_attribute(\n     builder: &mut AssistBuilder,\n     input: &ast::TokenTree,"}, {"sha": "6552c1feb966958c9a982a08c47f6c2bcc3f9bb3", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e25a034385f57f2cfc6b4f4e725f827cff923/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e25a034385f57f2cfc6b4f4e725f827cff923/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=4d2e25a034385f57f2cfc6b4f4e725f827cff923", "patch": "@@ -1,6 +1,7 @@\n //! Assorted functions shared by several assists.\n \n pub(crate) mod suggest_name;\n+mod gen_trait_body;\n \n use std::ops;\n \n@@ -25,6 +26,8 @@ use syntax::{\n \n use crate::assist_context::{AssistBuilder, AssistContext};\n \n+pub(crate) use gen_trait_body::gen_trait_body;\n+\n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)\n         .filter(|expr| !expr.syntax().text().contains_char('\\n'))"}, {"sha": "996cbc842e96f2bc2b907180706f101e0cea7d42", "filename": "crates/ide_assists/src/utils/gen_trait_body.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e25a034385f57f2cfc6b4f4e725f827cff923/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e25a034385f57f2cfc6b4f4e725f827cff923/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_body.rs?ref=4d2e25a034385f57f2cfc6b4f4e725f827cff923", "patch": "@@ -0,0 +1,149 @@\n+use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner};\n+use syntax::ted;\n+\n+/// Generate custom trait bodies where possible.\n+///\n+/// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n+/// `None` means that generating a custom trait body failed, and the body will remain\n+/// as `todo!` instead.\n+pub(crate) fn gen_trait_body(\n+    func: &ast::Fn,\n+    trait_path: &ast::Path,\n+    adt: &ast::Adt,\n+    annotated_name: &ast::Name,\n+) -> Option<()> {\n+    match trait_path.segment()?.name_ref()?.text().as_str() {\n+        \"Debug\" => gen_debug_impl(adt, func, annotated_name),\n+        \"Default\" => gen_default_impl(adt, func),\n+        _ => None,\n+    }\n+}\n+\n+/// Generate a `Debug` impl based on the fields and members of the target type.\n+fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) -> Option<()> {\n+    match adt {\n+        // `Debug` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => None,\n+\n+        // => match self { Self::Variant => write!(f, \"Variant\") }\n+        ast::Adt::Enum(enum_) => {\n+            let list = enum_.variant_list()?;\n+            let mut arms = vec![];\n+            for variant in list.variants() {\n+                let name = variant.name()?;\n+                let left = make::ext::ident_path(\"Self\");\n+                let right = make::ext::ident_path(&format!(\"{}\", name));\n+                let variant_name = make::path_pat(make::path_concat(left, right));\n+\n+                let target = make::expr_path(make::ext::ident_path(\"f\").into());\n+                let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n+                let args = make::arg_list(vec![target, fmt_string]);\n+                let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n+                let macro_call = make::expr_macro_call(macro_name, args);\n+\n+                arms.push(make::match_arm(Some(variant_name.into()), None, macro_call.into()));\n+            }\n+\n+            let match_target = make::expr_path(make::ext::ident_path(\"self\"));\n+            let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n+            let match_expr = make::expr_match(match_target, list);\n+\n+            let body = make::block_expr(None, Some(match_expr));\n+            let body = body.indent(ast::edit::IndentLevel(1));\n+            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+            Some(())\n+        }\n+\n+        ast::Adt::Struct(strukt) => {\n+            let name = format!(\"\\\"{}\\\"\", annotated_name);\n+            let args = make::arg_list(Some(make::expr_literal(&name).into()));\n+            let target = make::expr_path(make::ext::ident_path(\"f\"));\n+\n+            let expr = match strukt.field_list() {\n+                // => f.debug_struct(\"Name\").finish()\n+                None => make::expr_method_call(target, make::name_ref(\"debug_struct\"), args),\n+\n+                // => f.debug_struct(\"Name\").field(\"foo\", &self.foo).finish()\n+                Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                    let method = make::name_ref(\"debug_struct\");\n+                    let mut expr = make::expr_method_call(target, method, args);\n+                    for field in field_list.fields() {\n+                        let name = field.name()?;\n+                        let f_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n+                        let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n+                        let f_path = make::expr_ref(f_path, false);\n+                        let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n+                        let args = make::arg_list(vec![f_name, f_path]);\n+                        expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n+                    }\n+                    expr\n+                }\n+\n+                // => f.debug_tuple(\"Name\").field(self.0).finish()\n+                Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                    let method = make::name_ref(\"debug_tuple\");\n+                    let mut expr = make::expr_method_call(target, method, args);\n+                    for (idx, _) in field_list.fields().enumerate() {\n+                        let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n+                        let f_path = make::expr_ref(f_path, false);\n+                        let f_path = make::expr_field(f_path, &format!(\"{}\", idx)).into();\n+                        let method = make::name_ref(\"field\");\n+                        expr = make::expr_method_call(expr, method, make::arg_list(Some(f_path)));\n+                    }\n+                    expr\n+                }\n+            };\n+\n+            let method = make::name_ref(\"finish\");\n+            let expr = make::expr_method_call(expr, method, make::arg_list(None));\n+            let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n+            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+            Some(())\n+        }\n+    }\n+}\n+\n+/// Generate a `Debug` impl based on the fields and members of the target type.\n+fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    fn gen_default_call() -> ast::Expr {\n+        let trait_name = make::ext::ident_path(\"Default\");\n+        let method_name = make::ext::ident_path(\"default\");\n+        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n+        make::expr_call(fn_name, make::arg_list(None))\n+    }\n+    match adt {\n+        // `Debug` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => None,\n+        // Deriving `Debug` for enums is not stable yet.\n+        ast::Adt::Enum(_) => None,\n+        ast::Adt::Struct(strukt) => {\n+            let expr = match strukt.field_list() {\n+                Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                    let mut fields = vec![];\n+                    for field in field_list.fields() {\n+                        let method_call = gen_default_call();\n+                        let name_ref = make::name_ref(&field.name()?.to_string());\n+                        let field = make::record_expr_field(name_ref, Some(method_call));\n+                        fields.push(field);\n+                    }\n+                    let struct_name = make::ext::ident_path(\"Self\");\n+                    let fields = make::record_expr_field_list(fields);\n+                    make::record_expr(struct_name, fields).into()\n+                }\n+                Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                    let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n+                    let fields = field_list.fields().map(|_| gen_default_call());\n+                    make::expr_call(struct_name, make::arg_list(fields))\n+                }\n+                None => {\n+                    let struct_name = make::ext::ident_path(\"Self\");\n+                    let fields = make::record_expr_field_list(None);\n+                    make::record_expr(struct_name, fields).into()\n+                }\n+            };\n+            let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n+            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+            Some(())\n+        }\n+    }\n+}"}]}