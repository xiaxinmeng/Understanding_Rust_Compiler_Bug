{"sha": "4fea5808e9209c385e915d9d060c18520ce081b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWE1ODA4ZTkyMDljMzg1ZTkxNWQ5ZDA2MGMxODUyMGNlMDgxYjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T13:24:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T13:24:07Z"}, "message": "Merge #3191\n\n3191: Remove two stage constuction r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b1b3be960ba393200c6676fa096f8c1e12e64cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b3be960ba393200c6676fa096f8c1e12e64cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fea5808e9209c385e915d9d060c18520ce081b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSpP3CRBK7hj4Ov3rIwAAdHIIAJSPD3sDhtlgne+uhLeQZBvQ\nBWH8xiZVCFjvA2cmdkD/yZeHxR5wtFUXVANI9bG39QcAIy7LWeRTeLY2KxYG4wib\n5AEEtGsazCHkILCYYBJ3RuKpXuewWPBuLGyeC3lJJr885BloI3nIuLKX8zpns32W\nMz08/J5YuvMK6Bgbxxc3JL8T4etTj8UyrA7diBGxCHh+8OhSk1FL3xgFmivC4dOP\nJhfxZD2XuQ8HVlpJRzFfKGeFG5YvxXoiIMZ+FcPy/abwmJiMakp+kJYKmTU6p75n\ntlNnJGNUAkTLupfosyNFYJP/02Rj1cIDGH2K9hO0HqtN7kTSwtvtI1TnzfSK05Y=\n=BXSQ\n-----END PGP SIGNATURE-----\n", "payload": "tree b1b3be960ba393200c6676fa096f8c1e12e64cc2\nparent 6167101302bcc2d7f1a345e0ee44e1411056b4b3\nparent 3717b0e03f2336dcccea34c5a362b20966151b18\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581945847 +0000\ncommitter GitHub <noreply@github.com> 1581945847 +0000\n\nMerge #3191\n\n3191: Remove two stage constuction r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fea5808e9209c385e915d9d060c18520ce081b3", "html_url": "https://github.com/rust-lang/rust/commit/4fea5808e9209c385e915d9d060c18520ce081b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fea5808e9209c385e915d9d060c18520ce081b3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6167101302bcc2d7f1a345e0ee44e1411056b4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6167101302bcc2d7f1a345e0ee44e1411056b4b3", "html_url": "https://github.com/rust-lang/rust/commit/6167101302bcc2d7f1a345e0ee44e1411056b4b3"}, {"sha": "3717b0e03f2336dcccea34c5a362b20966151b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3717b0e03f2336dcccea34c5a362b20966151b18", "html_url": "https://github.com/rust-lang/rust/commit/3717b0e03f2336dcccea34c5a362b20966151b18"}], "stats": {"total": 77, "additions": 26, "deletions": 51}, "files": [{"sha": "aaf2ef40e3e3f1ead29f524f2c8de33f729aa027", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -2,18 +2,14 @@ import * as lc from 'vscode-languageclient';\n import * as vscode from 'vscode';\n \n import { Config } from './config';\n-import { ensureServerBinary } from './installation/server';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n \n-export async function createClient(config: Config): Promise<null | lc.LanguageClient> {\n+export async function createClient(config: Config, serverPath: string): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const serverPath = await ensureServerBinary(config.serverSource);\n-    if (!serverPath) return null;\n-\n     const run: lc.Executable = {\n         command: serverPath,\n         options: { cwd: workspaceFolderPath },"}, {"sha": "6631e8db777accf7cdff822ff3d834afd0bc58bf", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -37,12 +37,10 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n-    private ctx: Ctx;\n     uri = vscode.Uri.parse('rust-analyzer-status://status');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n+    constructor(private readonly ctx: Ctx) {\n     }\n \n     provideTextDocumentContent("}, {"sha": "6fee6eb41ce636572f0f8f596ab7d43627be208c", "filename": "editors/code/src/commands/expand_macro.ts", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -42,12 +42,10 @@ function code_format(expanded: ExpandedMacro): string {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n-    private ctx: Ctx;\n     uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n+    constructor(private readonly ctx: Ctx) {\n     }\n \n     async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {"}, {"sha": "2887c96c8039f4975e214f65dd4463303d6fb5cf", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -68,12 +68,10 @@ interface SyntaxTreeParams {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n-    private ctx: Ctx;\n     uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n+    constructor(private readonly ctx: Ctx) {\n     }\n \n     provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {"}, {"sha": "dfc8aa7b9dae29da58841e1f42799525f5e8853f", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -1,43 +1,24 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import { strict as assert } from \"assert\";\n \n import { Config } from './config';\n import { createClient } from './client';\n \n export class Ctx {\n-    readonly config: Config;\n-    // Because we have \"reload server\" action, various listeners **will** face a\n-    // situation where the client is not ready yet, and should be prepared to\n-    // deal with it.\n-    //\n-    // Ideally, this should be replaced with async getter though.\n-    // FIXME: this actually needs syncronization of some kind (check how\n-    // vscode deals with `deactivate()` call when extension has some work scheduled\n-    // on the event loop to get a better picture of what we can do here)\n-    client: lc.LanguageClient | null = null;\n-    private extCtx: vscode.ExtensionContext;\n+    private constructor(\n+        readonly config: Config,\n+        private readonly extCtx: vscode.ExtensionContext,\n+        readonly client: lc.LanguageClient\n+    ) {\n \n-    constructor(extCtx: vscode.ExtensionContext) {\n-        this.config = new Config(extCtx);\n-        this.extCtx = extCtx;\n     }\n \n-    async startServer() {\n-        assert(this.client == null);\n-\n-        const client = await createClient(this.config);\n-        if (!client) {\n-            throw new Error(\n-                \"Rust Analyzer Language Server is not available. \" +\n-                \"Please, ensure its [proper installation](https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/user#vs-code).\"\n-            );\n-        }\n-\n-        this.pushCleanup(client.start());\n+    static async create(config: Config, extCtx: vscode.ExtensionContext, serverPath: string): Promise<Ctx> {\n+        const client = await createClient(config, serverPath);\n+        const res = new Ctx(config, extCtx, client);\n+        res.pushCleanup(client.start());\n         await client.onReady();\n-\n-        this.client = client;\n+        return res;\n     }\n \n     get activeRustEditor(): vscode.TextEditor | undefined {"}, {"sha": "f82df66aeda27c16a309affb47e016f011da0525", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -92,8 +92,6 @@ class HintsUpdater {\n \n     async refresh() {\n         if (!this.enabled) return;\n-        console.log(\"freshin!\");\n-\n         await Promise.all(this.allEditors.map(it => this.refreshEditor(it)));\n     }\n "}, {"sha": "0ad7ef1bbd0049aadd2cc576fb9a141623ae69b3", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4fea5808e9209c385e915d9d060c18520ce081b3/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=4fea5808e9209c385e915d9d060c18520ce081b3", "patch": "@@ -5,21 +5,27 @@ import { activateInlayHints } from './inlay_hints';\n import { activateStatusDisplay } from './status_display';\n import { Ctx } from './ctx';\n import { activateHighlighting } from './highlighting';\n+import { ensureServerBinary } from './installation/server';\n+import { Config } from './config';\n \n let ctx: Ctx | undefined;\n \n export async function activate(context: vscode.ExtensionContext) {\n-    ctx = new Ctx(context);\n+    const config = new Config(context)\n+\n+    const serverPath = await ensureServerBinary(config.serverSource);\n+    if (serverPath == null) {\n+        throw new Error(\n+            \"Rust Analyzer Language Server is not available. \" +\n+            \"Please, ensure its [proper installation](https://rust-analyzer.github.io/manual.html#installation).\"\n+        );\n+    }\n \n     // Note: we try to start the server before we activate type hints so that it\n     // registers its `onDidChangeDocument` handler before us.\n     //\n     // This a horribly, horribly wrong way to deal with this problem.\n-    try {\n-        await ctx.startServer();\n-    } catch (e) {\n-        vscode.window.showErrorMessage(e.message);\n-    }\n+    ctx = await Ctx.create(config, context, serverPath);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand('reload', (ctx) => {"}]}