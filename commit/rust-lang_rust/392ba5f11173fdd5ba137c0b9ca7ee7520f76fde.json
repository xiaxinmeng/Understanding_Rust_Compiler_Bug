{"sha": "392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "node_id": "C_kwDOAAsO6NoAKDM5MmJhNWYxMTE3M2ZkZDViYTEzN2MwYjljYTdlZTc1MjBmNzZmZGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-12T15:09:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-12T15:09:11Z"}, "message": "Rollup merge of #100229 - RalfJung:extra-const-ub-checks, r=lcnr\n\nadd -Zextra-const-ub-checks to enable more UB checking in const-eval\n\nCc https://github.com/rust-lang/rust/issues/99923\nr? `@oli-obk`", "tree": {"sha": "ab3eb1569056c9c3404723be9d52e87a4c7477fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab3eb1569056c9c3404723be9d52e87a4c7477fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9m0XCRBK7hj4Ov3rIwAAZb4IAADdN8mwEPTpmS8r7TPPsN/G\n0NV0DC71JXslyD4UKiL+oUlgrvyWZKoGKL9OWh9ew0meJv2HpXKjqG+iHxP/CRZi\n4AB53oJLW+GpyWYXj7RN6FWfhu9Tz4aP2421VAv3VrixK/D46w6i72qGx0poOfgR\n6kZiQasHDhbD3iN8SMdzv9rkL7fAxxdLCL4YaRaVTkLm2g2OZkfEVVSwMO18CRkv\nwAKDFd/lNtWyu28se6/ZbeSKzTD2u++LKOnqjAO2gg8cz7613XCOKSZqgIuCyGqe\nSuV32NWppY6TYlz/lsGTqTuTJ3CrKnXMxxAjTON0jm0GPp1k26Kn7yRbbe99R64=\n=Gl1Q\n-----END PGP SIGNATURE-----\n", "payload": "tree ab3eb1569056c9c3404723be9d52e87a4c7477fd\nparent 51eed00ca90ac8eb46d24c60de6b3e96aac096db\nparent 2bd947998497c0bf2dc91152528eb654bbe6091b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660316951 +0530\ncommitter GitHub <noreply@github.com> 1660316951 +0530\n\nRollup merge of #100229 - RalfJung:extra-const-ub-checks, r=lcnr\n\nadd -Zextra-const-ub-checks to enable more UB checking in const-eval\n\nCc https://github.com/rust-lang/rust/issues/99923\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "html_url": "https://github.com/rust-lang/rust/commit/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51eed00ca90ac8eb46d24c60de6b3e96aac096db", "url": "https://api.github.com/repos/rust-lang/rust/commits/51eed00ca90ac8eb46d24c60de6b3e96aac096db", "html_url": "https://github.com/rust-lang/rust/commit/51eed00ca90ac8eb46d24c60de6b3e96aac096db"}, {"sha": "2bd947998497c0bf2dc91152528eb654bbe6091b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd947998497c0bf2dc91152528eb654bbe6091b", "html_url": "https://github.com/rust-lang/rust/commit/2bd947998497c0bf2dc91152528eb654bbe6091b"}], "stats": {"total": 157, "additions": 145, "deletions": 12}, "files": [{"sha": "684877cae76776f025de733a7e9afea14017cdd1", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -236,6 +236,16 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     const PANIC_ON_ALLOC_FAIL: bool = false; // will be raised as a proper error\n \n+    #[inline(always)]\n+    fn enforce_alignment(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    }\n+\n+    #[inline(always)]\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    }\n+\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,"}, {"sha": "9b9919fcc2a3da2f695c836ef1c9b74307898374", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -436,24 +436,12 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type AllocExtra = ();\n     type FrameExtra = ();\n \n-    #[inline(always)]\n-    fn enforce_alignment(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n-        // We do not check for alignment to avoid having to carry an `Align`\n-        // in `ConstValue::ByRef`.\n-        false\n-    }\n-\n     #[inline(always)]\n     fn force_int_for_alignment_check(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         // We do not support `force_int`.\n         false\n     }\n \n-    #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n-        false // for now, we don't enforce validity\n-    }\n-\n     #[inline(always)]\n     fn enforce_number_init(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         true"}, {"sha": "f1b1855c3ec743193f4d75d9b2803072936afce2", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -1005,6 +1005,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// It will error if the bits at the destination do not match the ones described by the layout.\n     #[inline(always)]\n     pub fn validate_operand(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx> {\n+        // Note that we *could* actually be in CTFE here with `-Zextra-const-ub-checks`, but it's\n+        // still correct to not use `ctfe_mode`: that mode is for validation of the final constant\n+        // value, it rules out things like `UnsafeCell` in awkward places. It also can make checking\n+        // recurse through references which, for now, we don't want here, either.\n         self.validate_operand_internal(op, vec![], None, None)\n     }\n }"}, {"sha": "1c087b93b4965de083b51cdbb2f7398e47a1f129", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -183,6 +183,18 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n \n     type MemoryKind = !;\n \n+    #[inline(always)]\n+    fn enforce_alignment(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        // We do not check for alignment to avoid having to carry an `Align`\n+        // in `ConstValue::ByRef`.\n+        false\n+    }\n+\n+    #[inline(always)]\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        false // for now, we don't enforce validity\n+    }\n+\n     fn load_mir(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::InstanceDef<'tcx>,"}, {"sha": "0032dd7d113f8ea1bd448c9bf9d74772b6d7d909", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -1310,6 +1310,8 @@ options! {\n         \"emit the bc module with thin LTO info (default: yes)\"),\n     export_executable_symbols: bool = (false, parse_bool, [TRACKED],\n         \"export symbols from executables, as if they were dynamic libraries\"),\n+    extra_const_ub_checks: bool = (false, parse_bool, [TRACKED],\n+        \"turns on more checks to detect const UB, which can be slow (default: no)\"),\n     #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::fewer_names` instead of this field\"))]\n     fewer_names: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\"}, {"sha": "236469ce9797a643843f62a538ee68962571db55", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -38,6 +38,7 @@\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n     -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n     -Z               export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries\n+    -Z                   extra-const-ub-checks=val -- turns on more checks to detect const UB, which can be slow (default: no)\n     -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n     -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n     -Z                                    fuel=val -- set the optimization fuel quota for a crate"}, {"sha": "97c9e1505197f72c9f8554b6a133bff6bd8afa67", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -0,0 +1,45 @@\n+// revisions: no_flag with_flag\n+// [no_flag] check-pass\n+// [with_flag] compile-flags: -Zextra-const-ub-checks\n+#![feature(const_ptr_read)]\n+\n+use std::mem::transmute;\n+\n+const INVALID_BOOL: () = unsafe {\n+    let _x: bool = transmute(3u8);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const INVALID_PTR_IN_INT: () = unsafe {\n+    let _x: usize = transmute(&3u8);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n+    let x: &[u8] = &[0; 32];\n+    let _x: (usize, usize) = transmute(x);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const UNALIGNED_PTR: () = unsafe {\n+    let _x: &u32 = transmute(&[0u8; 4]);\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n+};\n+\n+const UNALIGNED_READ: () = {\n+    INNER; //[with_flag]~ERROR any use of this value will cause an error\n+    //[with_flag]~| previously accepted\n+    // There is an error here but its span is in the standard library so we cannot match it...\n+    // so we have this in a *nested* const, such that the *outer* const fails to use it.\n+    const INNER: () = unsafe {\n+        let x = &[0u8; 4];\n+        let ptr = x.as_ptr().cast::<u32>();\n+        ptr.read();\n+    };\n+};\n+\n+fn main() {}"}, {"sha": "1706db7ac43cac4993977dd90d28c658101f72fa", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/392ba5f11173fdd5ba137c0b9ca7ee7520f76fde/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=392ba5f11173fdd5ba137c0b9ca7ee7520f76fde", "patch": "@@ -0,0 +1,71 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:9:20\n+   |\n+LL |     let _x: bool = transmute(3u8);\n+   |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:15:21\n+   |\n+LL |     let _x: usize = transmute(&3u8);\n+   |                     ^^^^^^^^^^^^^^^ constructing invalid value: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:22:30\n+   |\n+LL |     let _x: (usize, usize) = transmute(x);\n+   |                              ^^^^^^^^^^^^ constructing invalid value at .0: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:28:20\n+   |\n+LL |     let _x: &u32 = transmute(&[0u8; 4]);\n+   |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         accessing memory with alignment 1, but alignment 4 is required\n+   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+  ::: $DIR/detect-extra-ub.rs:41:9\n+   |\n+LL |         ptr.read();\n+   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:41:9\n+\n+error: any use of this value will cause an error\n+  --> $DIR/detect-extra-ub.rs:34:5\n+   |\n+LL | const UNALIGNED_READ: () = {\n+   | ------------------------\n+LL |     INNER;\n+   |     ^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/detect-extra-ub.rs:34:5\n+   |\n+LL | const UNALIGNED_READ: () = {\n+   | ------------------------\n+LL |     INNER;\n+   |     ^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}]}