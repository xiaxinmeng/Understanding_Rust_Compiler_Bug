{"sha": "bc9877c5af5155174f1a517d41d997b446cc074e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTg3N2M1YWY1MTU1MTc0ZjFhNTE3ZDQxZDk5N2I0NDZjYzA3NGU=", "commit": {"author": {"name": "Theodore Luo Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-01T16:02:11Z"}, "committer": {"name": "Theodore Luo Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-01T16:02:11Z"}, "message": "Undo debug statements", "tree": {"sha": "036af6211e530de1f8b856b78645acf4666868f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/036af6211e530de1f8b856b78645acf4666868f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9877c5af5155174f1a517d41d997b446cc074e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9877c5af5155174f1a517d41d997b446cc074e", "html_url": "https://github.com/rust-lang/rust/commit/bc9877c5af5155174f1a517d41d997b446cc074e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9877c5af5155174f1a517d41d997b446cc074e/comments", "author": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce9e76528abea4d5bc8d360e3c6d40e61cffb889", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9e76528abea4d5bc8d360e3c6d40e61cffb889", "html_url": "https://github.com/rust-lang/rust/commit/ce9e76528abea4d5bc8d360e3c6d40e61cffb889"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "4463d2fc6c8da753bdf90b6e7ec38d75c73d2fc3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc9877c5af5155174f1a517d41d997b446cc074e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9877c5af5155174f1a517d41d997b446cc074e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=bc9877c5af5155174f1a517d41d997b446cc074e", "patch": "@@ -23,8 +23,6 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n use std::mem;\n \n-use tracing::debug;\n-\n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of\n /// macro expansion). Placement of these is not as complex as I feared it would\n@@ -165,24 +163,18 @@ impl<'a> Parser<'a> {\n             if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind) {\n                 return self.parse_prefix_range_expr(attrs);\n             } else {\n-                let result = self.parse_prefix_expr(attrs);\n-                debug!(\"parse_prefix_expr result: {:?}\", &result);\n-                result?\n+                self.parse_prefix_expr(attrs)?\n             }\n         };\n-        debug!(\"parse_assoc_expr_with(lhs = {:?})\", &lhs);\n         let last_type_ascription_set = self.last_type_ascription.is_some();\n \n         if !self.should_continue_as_assoc_expr(&lhs) {\n             self.last_type_ascription = None;\n             return Ok(lhs);\n         }\n \n-        debug!(\"continue_as_assoc_expr\");\n-\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = self.check_assoc_op() {\n-            debug!(\"op: {:?}\", op);\n             // Adjust the span for interpolated LHS to point to the `$lhs` token\n             // and not to what it refers to.\n             let lhs_span = match self.prev_token.kind {\n@@ -363,7 +355,6 @@ impl<'a> Parser<'a> {\n     /// but the next token implies this should be parsed as an expression.\n     /// For example: `if let Some(x) = x { x } else { 0 } / 2`.\n     fn error_found_expr_would_be_stmt(&self, lhs: &Expr) {\n-        debug!(\"error_found_expr_would_be_stmt(lhs: {:?})\", lhs);\n         let mut err = self.struct_span_err(\n             self.token.span,\n             &format!(\"expected expression, found `{}`\", pprust::token_to_string(&self.token),),\n@@ -526,7 +517,6 @@ impl<'a> Parser<'a> {\n                 make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))\n             }\n             token::BinOp(token::Plus) => {\n-                debug!(\"leading + detected: {:?}\", lo);\n                 let mut err = this.struct_span_err(lo, \"leading `+` is not supported\");\n                 err.span_label(lo, \"unexpected `+`\");\n "}, {"sha": "85515bd2a631459c6cf10ba8e60deb78f4e0d0a7", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9877c5af5155174f1a517d41d997b446cc074e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9877c5af5155174f1a517d41d997b446cc074e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=bc9877c5af5155174f1a517d41d997b446cc074e", "patch": "@@ -21,8 +21,6 @@ use rustc_span::symbol::{kw, sym};\n \n use std::mem;\n \n-use tracing::debug;\n-\n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items.\n     /// e.g., a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.\n@@ -420,7 +418,6 @@ impl<'a> Parser<'a> {\n             if self.token == token::Eof {\n                 break;\n             }\n-            debug!(\"parsing statements, stmts: {:?}\", &stmts);\n             let stmt = match self.parse_full_stmt(recover) {\n                 Err(mut err) if recover.yes() => {\n                     self.maybe_annotate_with_ascription(&mut err, false);"}]}