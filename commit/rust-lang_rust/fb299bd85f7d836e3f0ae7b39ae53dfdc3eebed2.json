{"sha": "fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjk5YmQ4NWY3ZDgzNmUzZjBhZTdiMzlhZTUzZGZkYzNlZWJlZDI=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-09-15T17:12:15Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-09-15T17:12:15Z"}, "message": "json: Properly handle trailing comma error in object decoding.\n\nCloses #16945", "tree": {"sha": "14d18ac5a3eeb7dfe4b259e183d70f254839d3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d18ac5a3eeb7dfe4b259e183d70f254839d3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2", "html_url": "https://github.com/rust-lang/rust/commit/fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5ee97184db63196713cf05fe834e6f32537e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5ee97184db63196713cf05fe834e6f32537e30", "html_url": "https://github.com/rust-lang/rust/commit/1f5ee97184db63196713cf05fe834e6f32537e30"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "c1068dd2096189a9530cfc4cc7a67a3e84e881c1", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=fb299bd85f7d836e3f0ae7b39ae53dfdc3eebed2", "patch": "@@ -234,6 +234,7 @@ pub enum ErrorCode {\n     KeyMustBeAString,\n     ExpectedColon,\n     TrailingCharacters,\n+    TrailingComma,\n     InvalidEscape,\n     InvalidUnicodeCodePoint,\n     LoneLeadingSurrogateInHexEscape,\n@@ -274,6 +275,7 @@ pub fn error_str(error: ErrorCode) -> &'static str {\n         KeyMustBeAString => \"key must be a string\",\n         ExpectedColon => \"expected `:`\",\n         TrailingCharacters => \"trailing characters\",\n+        TrailingComma => \"trailing comma\",\n         InvalidEscape => \"invalid escape\",\n         UnrecognizedHex => \"invalid \\\\u escape (unrecognized hex)\",\n         NotFourDigit => \"invalid \\\\u escape (not four digits)\",\n@@ -1681,7 +1683,11 @@ impl<T: Iterator<char>> Parser<T> {\n     fn parse_object(&mut self, first: bool) -> JsonEvent {\n         if self.ch_is('}') {\n             if !first {\n-                self.stack.pop();\n+                if self.stack.is_empty() {\n+                    return self.error_event(TrailingComma);\n+                } else {\n+                    self.stack.pop();\n+                }\n             }\n             if self.stack.is_empty() {\n                 self.state = ParseBeforeFinish;\n@@ -2377,7 +2383,7 @@ mod tests {\n                 F64Value, StringValue, NullValue, SyntaxError, Key, Index, Stack,\n                 InvalidSyntax, InvalidNumber, EOFWhileParsingObject, EOFWhileParsingList,\n                 EOFWhileParsingValue, EOFWhileParsingString, KeyMustBeAString, ExpectedColon,\n-                TrailingCharacters};\n+                TrailingCharacters, TrailingComma};\n     use std::{i64, u64, f32, f64, io};\n     use std::collections::TreeMap;\n \n@@ -3379,6 +3385,7 @@ mod tests {\n             }\n         }\n     }\n+\n     #[test]\n     #[ignore(cfg(target_word_size = \"32\"))] // FIXME(#14064)\n     fn test_read_object_streaming() {\n@@ -3393,6 +3400,7 @@ mod tests {\n         assert_eq!(last_event(\"{\\\"a\\\":1\"),   Error(SyntaxError(EOFWhileParsingObject, 1, 7)));\n         assert_eq!(last_event(\"{\\\"a\\\":1 1\"), Error(SyntaxError(InvalidSyntax,         1, 8)));\n         assert_eq!(last_event(\"{\\\"a\\\":1,\"),  Error(SyntaxError(EOFWhileParsingObject, 1, 8)));\n+        assert_eq!(last_event(\"{\\\"a\\\":1,}\"), Error(SyntaxError(TrailingComma, 1, 8)));\n \n         assert_stream_equal(\n             \"{}\","}]}