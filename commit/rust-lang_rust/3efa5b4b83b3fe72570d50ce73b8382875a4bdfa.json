{"sha": "3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZmE1YjRiODNiM2ZlNzI1NzBkNTBjZTczYjgzODI4NzVhNGJkZmE=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-06-15T02:43:19Z"}, "committer": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-06-15T02:43:19Z"}, "message": "Emit additional arguments in `future_prelude_collision` lint", "tree": {"sha": "bec77c1ab09fbb21df7498c153342167ef6bd140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec77c1ab09fbb21df7498c153342167ef6bd140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "html_url": "https://github.com/rust-lang/rust/commit/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ab9c0ff985dfa31235bcfd44b57ef15610e9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ab9c0ff985dfa31235bcfd44b57ef15610e9b9", "html_url": "https://github.com/rust-lang/rust/commit/17ab9c0ff985dfa31235bcfd44b57ef15610e9b9"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "28ab6b1513310b4eef2d7ee244f4cc923b1869a8", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "patch": "@@ -941,7 +941,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // no need to check for bot/err -- callee does that\n         let rcvr_t = self.structurally_resolved_type(args[0].span, rcvr_t);\n \n-        let method = match self.lookup_method(rcvr_t, segment, span, expr, rcvr) {\n+        let method = match self.lookup_method(rcvr_t, segment, span, expr, rcvr, args) {\n             Ok(method) => {\n                 // We could add a \"consider `foo::<params>`\" suggestion here, but I wasn't able to\n                 // trigger this codepath causing `structuraly_resolved_type` to emit an error."}, {"sha": "be6bc625d893ff5012eda2b63e1a19ac6c411436", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "patch": "@@ -174,14 +174,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// # Arguments\n     ///\n-    /// Given a method call like `foo.bar::<T1,...Tn>(...)`:\n+    /// Given a method call like `foo.bar::<T1,...Tn>(a, b + 1, ...)`:\n     ///\n     /// * `self`:                  the surrounding `FnCtxt` (!)\n     /// * `self_ty`:               the (unadjusted) type of the self expression (`foo`)\n     /// * `segment`:               the name and generic arguments of the method (`bar::<T1, ...Tn>`)\n     /// * `span`:                  the span for the method call\n     /// * `call_expr`:             the complete method call: (`foo.bar::<T1,...Tn>(...)`)\n     /// * `self_expr`:             the self expression (`foo`)\n+    /// * `args`:                  the expressions of the arguments (`a, b + 1, ...`)\n     #[instrument(level = \"debug\", skip(self, call_expr, self_expr))]\n     pub fn lookup_method(\n         &self,\n@@ -190,6 +191,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n         call_expr: &'tcx hir::Expr<'tcx>,\n         self_expr: &'tcx hir::Expr<'tcx>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) -> Result<MethodCallee<'tcx>, MethodError<'tcx>> {\n         debug!(\n             \"lookup(method_name={}, self_ty={:?}, call_expr={:?}, self_expr={:?})\",\n@@ -199,7 +201,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let pick =\n             self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n-        self.lint_dot_call_from_2018(self_ty, segment, span, call_expr, self_expr, &pick);\n+        self.lint_dot_call_from_2018(self_ty, segment, span, call_expr, self_expr, &pick, args);\n \n         for import_id in &pick.import_ids {\n             debug!(\"used_trait_import: {:?}\", import_id);"}, {"sha": "b7e41525bde47156a28cc55031a5d3237369618e", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "patch": "@@ -20,6 +20,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &'tcx hir::Expr<'tcx>,\n         self_expr: &'tcx hir::Expr<'tcx>,\n         pick: &Pick<'tcx>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) {\n         debug!(\n             \"lookup(method_name={}, self_ty={:?}, call_expr={:?}, self_expr={:?})\",\n@@ -75,10 +76,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         format!(\"{}{}{}\", autoref, derefs, self_expr)\n                     };\n+                    let args = args\n+                        .iter()\n+                        .skip(1)\n+                        .map(|arg| {\n+                            format!(\n+                                \", {}\",\n+                                self.sess().source_map().span_to_snippet(arg.span).unwrap()\n+                            )\n+                        })\n+                        .collect::<String>();\n+\n                     lint.span_suggestion(\n                         sp,\n                         \"disambiguate the associated function\",\n-                        format!(\"{}::{}({})\", trait_name, segment.ident.name, self_adjusted,),\n+                        format!(\n+                            \"{}::{}({}{})\",\n+                            trait_name, segment.ident.name, self_adjusted, args\n+                        ),\n                         Applicability::MachineApplicable,\n                     );\n                 } else {"}]}