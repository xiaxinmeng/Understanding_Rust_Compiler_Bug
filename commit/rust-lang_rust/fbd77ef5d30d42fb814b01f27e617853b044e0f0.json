{"sha": "fbd77ef5d30d42fb814b01f27e617853b044e0f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDc3ZWY1ZDMwZDQyZmI4MTRiMDFmMjdlNjE3ODUzYjA0NGUwZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T13:23:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T13:23:04Z"}, "message": "Auto merge of #7411 - camsteffen:use-self-visitor, r=flip1995\n\nSimplify use_self impl\n\nchangelog: none\n\nMainly to remove an extra visit and simplify the \"in body?\" logic.", "tree": {"sha": "569863f0142ac4e6da8a869eadc66978b6249508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569863f0142ac4e6da8a869eadc66978b6249508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd77ef5d30d42fb814b01f27e617853b044e0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd77ef5d30d42fb814b01f27e617853b044e0f0", "html_url": "https://github.com/rust-lang/rust/commit/fbd77ef5d30d42fb814b01f27e617853b044e0f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd77ef5d30d42fb814b01f27e617853b044e0f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c2ab75db80e33b687531de17b865a7988212c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c2ab75db80e33b687531de17b865a7988212c3", "html_url": "https://github.com/rust-lang/rust/commit/95c2ab75db80e33b687531de17b865a7988212c3"}, {"sha": "bae76f9c1756e0a8d25c8ddc0b2c8225df1b364e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bae76f9c1756e0a8d25c8ddc0b2c8225df1b364e", "html_url": "https://github.com/rust-lang/rust/commit/bae76f9c1756e0a8d25c8ddc0b2c8225df1b364e"}], "stats": {"total": 215, "additions": 64, "deletions": 151}, "files": [{"sha": "906ac10f4610b92f0c548f2445064dde896b6a87", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 64, "deletions": 151, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/fbd77ef5d30d42fb814b01f27e617853b044e0f0/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd77ef5d30d42fb814b01f27e617853b044e0f0/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fbd77ef5d30d42fb814b01f27e617853b044e0f0", "patch": "@@ -2,17 +2,18 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::same_type_and_consts;\n use clippy_utils::{in_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_ty, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, QPath, TyKind,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::{AssocKind, Ty};\n+use rustc_middle::ty::AssocKind;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -73,10 +74,9 @@ impl UseSelf {\n #[derive(Debug)]\n enum StackItem {\n     Check {\n-        hir_id: HirId,\n-        impl_trait_ref_def_id: Option<LocalDefId>,\n-        types_to_skip: Vec<HirId>,\n-        types_to_lint: Vec<HirId>,\n+        impl_id: LocalDefId,\n+        in_body: u32,\n+        types_to_skip: FxHashSet<HirId>,\n     },\n     NoCheck,\n }\n@@ -86,60 +86,41 @@ impl_lint_pass!(UseSelf => [USE_SELF]);\n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_item(&mut self, _cx: &LateContext<'_>, item: &Item<'_>) {\n+        if !is_item_interesting(item) {\n+            // This does two things:\n+            //  1) Reduce needless churn on `self.stack`\n+            //  2) Don't push `StackItem::NoCheck` when entering `ItemKind::OpaqueTy`,\n+            //     in order to lint `foo() -> impl <..>`\n+            return;\n+        }\n         // We push the self types of `impl`s on a stack here. Only the top type on the stack is\n         // relevant for linting, since this is the self type of the `impl` we're currently in. To\n         // avoid linting on nested items, we push `StackItem::NoCheck` on the stack to signal, that\n         // we're in an `impl` or nested item, that we don't want to lint\n-        //\n-        // NB: If you push something on the stack in this method, remember to also pop it in the\n-        // `check_item_post` method.\n-        match &item.kind {\n-            ItemKind::Impl(Impl {\n-                self_ty: hir_self_ty,\n-                of_trait,\n-                ..\n-            }) => {\n-                let should_check = if let TyKind::Path(QPath::Resolved(_, item_path)) = hir_self_ty.kind {\n-                    let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n-                    parameters.as_ref().map_or(true, |params| {\n-                        !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n-                    })\n-                } else {\n-                    false\n-                };\n-                let impl_trait_ref_def_id = of_trait.as_ref().map(|_| cx.tcx.hir().local_def_id(item.hir_id()));\n-                if should_check {\n-                    self.stack.push(StackItem::Check {\n-                        hir_id: hir_self_ty.hir_id,\n-                        impl_trait_ref_def_id,\n-                        types_to_lint: Vec::new(),\n-                        types_to_skip: Vec::new(),\n-                    });\n-                } else {\n-                    self.stack.push(StackItem::NoCheck);\n+        let stack_item = if_chain! {\n+            if let ItemKind::Impl(Impl { self_ty, .. }) = item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n+            let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n+            if parameters.as_ref().map_or(true, |params| {\n+                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+            });\n+            then {\n+                StackItem::Check {\n+                    impl_id: item.def_id,\n+                    in_body: 0,\n+                    types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n                 }\n-            },\n-            ItemKind::Static(..)\n-            | ItemKind::Const(..)\n-            | ItemKind::Fn(..)\n-            | ItemKind::Enum(..)\n-            | ItemKind::Struct(..)\n-            | ItemKind::Union(..)\n-            | ItemKind::Trait(..) => {\n-                self.stack.push(StackItem::NoCheck);\n-            },\n-            _ => (),\n-        }\n+            } else {\n+                StackItem::NoCheck\n+            }\n+        };\n+        self.stack.push(stack_item);\n     }\n \n     fn check_item_post(&mut self, _: &LateContext<'_>, item: &Item<'_>) {\n-        use ItemKind::{Const, Enum, Fn, Impl, Static, Struct, Trait, Union};\n-        match item.kind {\n-            Impl { .. } | Static(..) | Const(..) | Fn(..) | Enum(..) | Struct(..) | Union(..) | Trait(..) => {\n-                self.stack.pop();\n-            },\n-            _ => (),\n+        if is_item_interesting(item) {\n+            self.stack.pop();\n         }\n     }\n \n@@ -149,11 +130,11 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         if_chain! {\n             if let ImplItemKind::Fn(FnSig { decl, .. }, ..) = impl_item.kind;\n             if let Some(&mut StackItem::Check {\n-                impl_trait_ref_def_id: Some(def_id),\n+                impl_id,\n                 ref mut types_to_skip,\n                 ..\n             }) = self.stack.last_mut();\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_id);\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n                 // `Self`.\n@@ -201,52 +182,39 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         }\n     }\n \n-    fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx hir::Body<'_>) {\n+    fn check_body(&mut self, _: &LateContext<'_>, _: &hir::Body<'_>) {\n         // `hir_ty_to_ty` cannot be called in `Body`s or it will panic (sometimes). But in bodies\n         // we can use `cx.typeck_results.node_type(..)` to get the `ty::Ty` from a `hir::Ty`.\n         // However the `node_type()` method can *only* be called in bodies.\n-        //\n-        // This method implementation determines which types should get linted in a `Body` and\n-        // which shouldn't, with a visitor. We could directly lint in the visitor, but then we\n-        // could only allow this lint on item scope. And we would have to check if those types are\n-        // already dealt with in `check_ty` anyway.\n-        if let Some(StackItem::Check {\n-            hir_id,\n-            types_to_lint,\n-            types_to_skip,\n-            ..\n-        }) = self.stack.last_mut()\n-        {\n-            let self_ty = ty_from_hir_id(cx, *hir_id);\n+        if let Some(&mut StackItem::Check { ref mut in_body, .. }) = self.stack.last_mut() {\n+            *in_body = in_body.saturating_add(1);\n+        }\n+    }\n \n-            let mut visitor = LintTyCollector {\n-                cx,\n-                self_ty,\n-                types_to_lint: vec![],\n-                types_to_skip: vec![],\n-            };\n-            visitor.visit_expr(&body.value);\n-            types_to_lint.extend(visitor.types_to_lint);\n-            types_to_skip.extend(visitor.types_to_skip);\n+    fn check_body_post(&mut self, _: &LateContext<'_>, _: &hir::Body<'_>) {\n+        if let Some(&mut StackItem::Check { ref mut in_body, .. }) = self.stack.last_mut() {\n+            *in_body = in_body.saturating_sub(1);\n         }\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n         if_chain! {\n-            if !in_macro(hir_ty.span) && !in_impl(cx, hir_ty);\n+            if !in_macro(hir_ty.span);\n             if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n-            if let Some(StackItem::Check {\n-                hir_id,\n-                types_to_lint,\n-                types_to_skip,\n-                ..\n+            if let Some(&StackItem::Check {\n+                impl_id,\n+                in_body,\n+                ref types_to_skip,\n             }) = self.stack.last();\n+            if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n+            if !matches!(path.res, Res::SelfTy(..) | Res::Def(DefKind::TyParam, _));\n             if !types_to_skip.contains(&hir_ty.hir_id);\n-            if types_to_lint.contains(&hir_ty.hir_id)\n-                || {\n-                    let self_ty = ty_from_hir_id(cx, *hir_id);\n-                    should_lint_ty(hir_ty, hir_ty_to_ty(cx.tcx, hir_ty), self_ty)\n-                };\n+            let ty = if in_body > 0 {\n+                cx.typeck_results().node_type(hir_ty.hir_id)\n+            } else {\n+                hir_ty_to_ty(cx.tcx, hir_ty)\n+            };\n+            if same_type_and_consts(ty, cx.tcx.type_of(impl_id));\n             let hir = cx.tcx.hir();\n             let id = hir.get_parent_node(hir_ty.hir_id);\n             if !hir.opt_span(id).map_or(false, in_macro);\n@@ -260,8 +228,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         if_chain! {\n             if !in_macro(expr.span);\n             if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n-            if let Some(StackItem::Check { hir_id, .. }) = self.stack.last();\n-            if cx.typeck_results().expr_ty(expr) == ty_from_hir_id(cx, *hir_id);\n+            if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n+            if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n             then {} else { return; }\n         }\n         match expr.kind {\n@@ -309,35 +277,6 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     }\n }\n \n-struct LintTyCollector<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    self_ty: Ty<'tcx>,\n-    types_to_lint: Vec<HirId>,\n-    types_to_skip: Vec<HirId>,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n-        if_chain! {\n-            if let Some(ty) = self.cx.typeck_results().node_type_opt(hir_ty.hir_id);\n-            if should_lint_ty(hir_ty, ty, self.self_ty);\n-            then {\n-                self.types_to_lint.push(hir_ty.hir_id);\n-            } else {\n-                self.types_to_skip.push(hir_ty.hir_id);\n-            }\n-        }\n-\n-        walk_ty(self, hir_ty);\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n fn span_lint(cx: &LateContext<'_>, span: Span) {\n     span_lint_and_sugg(\n         cx,\n@@ -359,36 +298,10 @@ fn lint_path_to_variant(cx: &LateContext<'_>, path: &Path<'_>) {\n     }\n }\n \n-fn ty_from_hir_id<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Ty<'tcx> {\n-    if let Some(Node::Ty(hir_ty)) = cx.tcx.hir().find(hir_id) {\n-        hir_ty_to_ty(cx.tcx, hir_ty)\n-    } else {\n-        unreachable!(\"This function should only be called with `HirId`s that are for sure `Node::Ty`\")\n-    }\n-}\n-\n-fn in_impl(cx: &LateContext<'tcx>, hir_ty: &hir::Ty<'_>) -> bool {\n-    let map = cx.tcx.hir();\n-    let parent = map.get_parent_node(hir_ty.hir_id);\n-    if_chain! {\n-        if let Some(Node::Item(item)) = map.find(parent);\n-        if let ItemKind::Impl { .. } = item.kind;\n-        then {\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n-fn should_lint_ty(hir_ty: &hir::Ty<'_>, ty: Ty<'_>, self_ty: Ty<'_>) -> bool {\n-    if_chain! {\n-        if same_type_and_consts(ty, self_ty);\n-        if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n-        then {\n-            !matches!(path.res, Res::SelfTy(..) | Res::Def(DefKind::TyParam, _))\n-        } else {\n-            false\n-        }\n-    }\n+fn is_item_interesting(item: &Item<'_>) -> bool {\n+    use rustc_hir::ItemKind::{Const, Enum, Fn, Impl, Static, Struct, Trait, Union};\n+    matches!(\n+        item.kind,\n+        Impl { .. } | Static(..) | Const(..) | Fn(..) | Enum(..) | Struct(..) | Union(..) | Trait(..)\n+    )\n }"}]}