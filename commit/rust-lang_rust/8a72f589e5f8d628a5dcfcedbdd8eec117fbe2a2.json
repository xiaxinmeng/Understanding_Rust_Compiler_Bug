{"sha": "8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNzJmNTg5ZTVmOGQ2MjhhNWRjZmNlZGJkZDhlZWMxMTdmYmUyYTI=", "commit": {"author": {"name": "Jimmy Brush", "email": "code@jimmah.com", "date": "2018-02-10T18:16:59Z"}, "committer": {"name": "Jimmy Brush", "email": "code@jimmah.com", "date": "2018-02-14T03:10:26Z"}, "message": "pass correct pie args to gcc linker 2\n\nRecent versions of gcc default to creating a position independent\nexecutable and must be explicitly told not to with the -no-pie argument.\n\nOld versions of gcc don't understand -no-pie and will throw an error.\nCheck for that case and retry without -no-pie. This is safe because\nthese old versions of gcc should never default to creating a position\nindependent executable.", "tree": {"sha": "747884289dd4b8bd2713eaa562e77976f972b003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747884289dd4b8bd2713eaa562e77976f972b003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA1EtiBaDzGKsVzCxjAopB5kfVmQFAlqDqKIACgkQjAopB5kf\nVmTlkRAAw66AFATmXOqaHKtMuF9hbr4TdURd2jyQVZB3C8qVAtJq/JJoTbtOrbdQ\npuWfwuyUWvv+5XCK7ctLqu6elH0M2rjUxsdTOXwvpJqbsnSG5VWbeAlueoJzByOR\n6owg40uuqyaDRmlOiXl/CGZiUU6gF+ToeZ5heeh4m1A7SoBE0N95mVSW8izRP/kK\nPSi35JZXEzL1PDCPrag+zmRMP2VHWBO7i8fg2Fv5LPKkH4n0ERZyZW44uWg9nkmR\nrHeQpOQY7wOji2Ko58rjIHwtaMhZjOwQEHtyDr1yqsbFh7WKjk5cUEnIbSy7MUvl\ndFkWWPfiyH4QcuF1bhjnMdZ5gk443uzJmkcdrf3bDlemZbkQLHVwIFWpfMebxDpC\ndRXvysDtfN9zaxBkIzQNOzLN+TEunD7UIuK3x6qq9maICnylgqp2YoI5kdgEreiP\nsWBB/Bghb2LGXAk9rlunxeZfztyzDmdClM8WC96nDfjMr9tRQ3mNuKZPGuUk9nGs\n4W+KjZntmbrKAbBo3uDDDuaqw7B1SIlqwXZu7u5W5j6XxjD1EIzLGbWzO5NzAggy\n2OQfvLhuaqcdCjDEL++kdWjm6OHA1OKJBwcxApqvqfFBylhrlOhBWN8hmhDFJ3UK\nSmefVQitqFSFixaGmcLVBgwulpXw8G0Neh/sC+9P+NghtTSIqqY=\n=PRAt\n-----END PGP SIGNATURE-----", "payload": "tree 747884289dd4b8bd2713eaa562e77976f972b003\nparent 16350526d8d8b514327c62b904d26f74937a1b23\nauthor Jimmy Brush <code@jimmah.com> 1518286619 -0500\ncommitter Jimmy Brush <code@jimmah.com> 1518577826 -0500\n\npass correct pie args to gcc linker 2\n\nRecent versions of gcc default to creating a position independent\nexecutable and must be explicitly told not to with the -no-pie argument.\n\nOld versions of gcc don't understand -no-pie and will throw an error.\nCheck for that case and retry without -no-pie. This is safe because\nthese old versions of gcc should never default to creating a position\nindependent executable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2", "html_url": "https://github.com/rust-lang/rust/commit/8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2/comments", "author": {"login": "canarysnort01", "id": 24806352, "node_id": "MDQ6VXNlcjI0ODA2MzUy", "avatar_url": "https://avatars.githubusercontent.com/u/24806352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canarysnort01", "html_url": "https://github.com/canarysnort01", "followers_url": "https://api.github.com/users/canarysnort01/followers", "following_url": "https://api.github.com/users/canarysnort01/following{/other_user}", "gists_url": "https://api.github.com/users/canarysnort01/gists{/gist_id}", "starred_url": "https://api.github.com/users/canarysnort01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canarysnort01/subscriptions", "organizations_url": "https://api.github.com/users/canarysnort01/orgs", "repos_url": "https://api.github.com/users/canarysnort01/repos", "events_url": "https://api.github.com/users/canarysnort01/events{/privacy}", "received_events_url": "https://api.github.com/users/canarysnort01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canarysnort01", "id": 24806352, "node_id": "MDQ6VXNlcjI0ODA2MzUy", "avatar_url": "https://avatars.githubusercontent.com/u/24806352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canarysnort01", "html_url": "https://github.com/canarysnort01", "followers_url": "https://api.github.com/users/canarysnort01/followers", "following_url": "https://api.github.com/users/canarysnort01/following{/other_user}", "gists_url": "https://api.github.com/users/canarysnort01/gists{/gist_id}", "starred_url": "https://api.github.com/users/canarysnort01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canarysnort01/subscriptions", "organizations_url": "https://api.github.com/users/canarysnort01/orgs", "repos_url": "https://api.github.com/users/canarysnort01/repos", "events_url": "https://api.github.com/users/canarysnort01/events{/privacy}", "received_events_url": "https://api.github.com/users/canarysnort01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16350526d8d8b514327c62b904d26f74937a1b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/16350526d8d8b514327c62b904d26f74937a1b23", "html_url": "https://github.com/rust-lang/rust/commit/16350526d8d8b514327c62b904d26f74937a1b23"}], "stats": {"total": 66, "additions": 23, "deletions": 43}, "files": [{"sha": "d15450212ae376d32e581dea2b1bd7eff9e59246", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=8a72f589e5f8d628a5dcfcedbdd8eec117fbe2a2", "patch": "@@ -652,9 +652,6 @@ fn link_natively(sess: &Session,\n         prog = time(sess.time_passes(), \"running linker\", || {\n             exec_linker(sess, &mut cmd, tmpdir)\n         });\n-        if !retry_on_segfault || i > 3 {\n-            break\n-        }\n         let output = match prog {\n             Ok(ref output) => output,\n             Err(_) => break,\n@@ -665,6 +662,26 @@ fn link_natively(sess: &Session,\n         let mut out = output.stderr.clone();\n         out.extend(&output.stdout);\n         let out = String::from_utf8_lossy(&out);\n+\n+        // Check to see if the link failed with \"unrecognized command line option:\n+        // '-no-pie'\". If so, reperform the link step without the -no-pie option. This\n+        // is safe because if the linker doesn't support -no-pie then it should not\n+        // default to linking executables as pie. Different versions of gcc seem to\n+        // use different quotes in the error message so don't check for them.\n+        if out.contains(\"unrecognized command line option\") && out.contains(\"-no-pie\") {\n+            info!(\"linker output: {:?}\", out);\n+            warn!(\"Linker does not support -no-pie command line option. Retrying without.\");\n+            for arg in cmd.take_args() {\n+                if arg.to_string_lossy() != \"-no-pie\" {\n+                    cmd.arg(arg);\n+                }\n+            }\n+            info!(\"{:?}\", &cmd);\n+            continue;\n+        }\n+        if !retry_on_segfault || i > 3 {\n+            break\n+        }\n         let msg_segv = \"clang: error: unable to execute command: Segmentation fault: 11\";\n         let msg_bus  = \"clang: error: unable to execute command: Bus error: 10\";\n         if !(out.contains(msg_segv) || out.contains(msg_bus)) {\n@@ -912,18 +929,10 @@ fn link_args(cmd: &mut Linker,\n             }\n         }\n \n-        // Check to see if gcc defaults to generating a position independent\n-        // executable. If so, tell it when to disable pie. Otherwise, tell it\n-        // when to enable it. We can't do both because older versions of gcc\n-        // don't understand -no-pie and will blow up.\n-        if is_pie_default(sess) {\n-            if !position_independent_executable {\n-                cmd.no_position_independent_executable();\n-            }\n+        if position_independent_executable {\n+            cmd.position_independent_executable();\n         } else {\n-            if position_independent_executable {\n-                cmd.position_independent_executable();\n-            }\n+            cmd.no_position_independent_executable();\n         }\n     }\n \n@@ -1438,32 +1447,3 @@ fn is_full_lto_enabled(sess: &Session) -> bool {\n         Lto::ThinLocal => false,\n     }\n }\n-\n-fn is_pie_default(sess: &Session) -> bool {\n-    match sess.linker_flavor() {\n-        LinkerFlavor::Gcc => {\n-            let (_, mut cmd, envs) = get_linker(sess);\n-            // This will set PATH on windows\n-            cmd.envs(envs);\n-            cmd.arg(\"-v\");\n-\n-            info!(\"{:?}\", &cmd);\n-\n-            let output = cmd.command()\n-                .stdout(Stdio::piped()).stderr(Stdio::piped())\n-                .spawn()\n-                .unwrap()\n-                .wait_with_output()\n-                .unwrap();\n-\n-            let ret = String::from_utf8_lossy(&output.stderr)\n-                .contains(\"--enable-default-pie\");\n-\n-            info!(\"gcc {} compiled with --enable-default-pie\",\n-                  if ret { \"IS\" } else { \"is NOT\" });\n-\n-            ret\n-        },\n-        _ => false,\n-    }\n-}"}]}