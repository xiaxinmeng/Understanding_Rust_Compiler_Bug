{"sha": "ef32ef7baf2d36c4571f75ba124ae55b904f6142", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMzJlZjdiYWYyZDM2YzQ1NzFmNzViYTEyNGFlNTViOTA0ZjYxNDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-13T14:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-13T14:26:10Z"}, "message": "Rollup merge of #77996 - tkaitchuck:master, r=m-ou-se\n\nDoc change: Remove mention of `fnv` in HashMap\n\nDisclaimer: I am the author of [aHash](https://github.com/tkaitchuck/aHash).\n\nThis changes the Rustdoc in `HashMap` from mentioning the `fnv` crate to mentioning the `aHash` crate, as an alternative `Hasher` implementation.\n\n### Why\n\nFnv [has poor hash quality](https://github.com/rurban/smhasher), is [slow for larger keys](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#speed), and does not provide dos resistance, because it is unkeyed (this can also cause [other problems](https://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion)).\n\nFnv has acceptable performance for integers and has very poor performance with keys >32 bytes. This is the reason it was removed from the standard library in https://github.com/rust-lang/rust/pull/37229 .\n\nBecause regardless of which dimension you value, there are better alternatives, it does not make sense for anyone to consider using `fnv`.\n\nThe text mentioning `fnv` in the standard library continues to create confusion: https://github.com/rust-lang/hashbrown/issues/153  https://github.com/rust-lang/hashbrown/issues/9 . There are also a number of [crates using it](https://crates.io/crates/fnv/reverse_dependencies) a great many of which are hashing strings (Which is when Fnv is the [worst](https://github.com/cbreeden/fxhash#benchmarks), [possible](https://github.com/tkaitchuck/aHash#speed), [choice](http://cglab.ca/~abeinges/blah/hash-rs/).)\n\nI think aHash makes the most sense to mention as an alternative because it is the most credible option (in my obviously biased opinion). It offers [good performance on numbers and strings](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#speed), is [of high quality](https://github.com/tkaitchuck/aHash#hash-quality), and [provides dos resistance](https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks). It is popular (see [stats](https://crates.io/crates/ahash)) and is the default hasher for [hashbrown](https://crates.io/crates/hashbrown) and [dashmap](https://crates.io/crates/dashmap) which are the most popular alternative hashmaps. Finally it does not have any of the [`gotcha` cases](https://github.com/tkaitchuck/aHash#fxhash) that `FxHash` suffers from. (Which is the other popular hashing option when DOS attacks are not a concern)\n\nSigned-off-by: Tom Kaitchuck <tom.kaitchuck@emc.com>", "tree": {"sha": "00dd9355621397f680995bb9074d86d27e3b753e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00dd9355621397f680995bb9074d86d27e3b753e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef32ef7baf2d36c4571f75ba124ae55b904f6142", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrpeDCRBK7hj4Ov3rIwAAdHIIAIPBYjW8ZLBJgq8vPMRuDe3f\nNHeFuxo5JKws2hNOX8j1Zd7+knohIbWZDS8k8jTn2KTo9/GQamQM+G8gOqrSEbNF\nVjJewa1IxsNOV4cox9I8u5EPKhNN8sk1l6Bp4g4sm9XrHWJ57HRsyVq1rtGF4A7b\nxWLJNuxExTnRX/DTP42XKqtxjh9K+pm0Y+IPvohuaPdF1CeWJ2+Q0j2xFXqlpKTs\n6uDbu9wk2htQIb8eoAAtceCA/uxErjojay51krZLht6+FJsIHXuzFrT5rPwr3eZF\nh6dNTp68FUEFZcisM0Xx6wZrDTkiP1seWeqy06hZYktaBIXZr9n4AACU8Dbemp4=\n=Hgqf\n-----END PGP SIGNATURE-----\n", "payload": "tree 00dd9355621397f680995bb9074d86d27e3b753e\nparent c5a11ddec903e7be508bb381d247624131756816\nparent 4e5848349ce6f8b79dc9b2eba57e833431761bc7\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1605277570 +0100\ncommitter GitHub <noreply@github.com> 1605277570 +0100\n\nRollup merge of #77996 - tkaitchuck:master, r=m-ou-se\n\nDoc change: Remove mention of `fnv` in HashMap\n\nDisclaimer: I am the author of [aHash](https://github.com/tkaitchuck/aHash).\n\nThis changes the Rustdoc in `HashMap` from mentioning the `fnv` crate to mentioning the `aHash` crate, as an alternative `Hasher` implementation.\n\n### Why\n\nFnv [has poor hash quality](https://github.com/rurban/smhasher), is [slow for larger keys](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#speed), and does not provide dos resistance, because it is unkeyed (this can also cause [other problems](https://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion)).\n\nFnv has acceptable performance for integers and has very poor performance with keys >32 bytes. This is the reason it was removed from the standard library in https://github.com/rust-lang/rust/pull/37229 .\n\nBecause regardless of which dimension you value, there are better alternatives, it does not make sense for anyone to consider using `fnv`.\n\nThe text mentioning `fnv` in the standard library continues to create confusion: https://github.com/rust-lang/hashbrown/issues/153  https://github.com/rust-lang/hashbrown/issues/9 . There are also a number of [crates using it](https://crates.io/crates/fnv/reverse_dependencies) a great many of which are hashing strings (Which is when Fnv is the [worst](https://github.com/cbreeden/fxhash#benchmarks), [possible](https://github.com/tkaitchuck/aHash#speed), [choice](http://cglab.ca/~abeinges/blah/hash-rs/).)\n\nI think aHash makes the most sense to mention as an alternative because it is the most credible option (in my obviously biased opinion). It offers [good performance on numbers and strings](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#speed), is [of high quality](https://github.com/tkaitchuck/aHash#hash-quality), and [provides dos resistance](https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks). It is popular (see [stats](https://crates.io/crates/ahash)) and is the default hasher for [hashbrown](https://crates.io/crates/hashbrown) and [dashmap](https://crates.io/crates/dashmap) which are the most popular alternative hashmaps. Finally it does not have any of the [`gotcha` cases](https://github.com/tkaitchuck/aHash#fxhash) that `FxHash` suffers from. (Which is the other popular hashing option when DOS attacks are not a concern)\n\nSigned-off-by: Tom Kaitchuck <tom.kaitchuck@emc.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef32ef7baf2d36c4571f75ba124ae55b904f6142", "html_url": "https://github.com/rust-lang/rust/commit/ef32ef7baf2d36c4571f75ba124ae55b904f6142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef32ef7baf2d36c4571f75ba124ae55b904f6142/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a11ddec903e7be508bb381d247624131756816", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a11ddec903e7be508bb381d247624131756816", "html_url": "https://github.com/rust-lang/rust/commit/c5a11ddec903e7be508bb381d247624131756816"}, {"sha": "4e5848349ce6f8b79dc9b2eba57e833431761bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5848349ce6f8b79dc9b2eba57e833431761bc7", "html_url": "https://github.com/rust-lang/rust/commit/4e5848349ce6f8b79dc9b2eba57e833431761bc7"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "27d90e6613748bdadf34799a91a97984324d551a", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef32ef7baf2d36c4571f75ba124ae55b904f6142/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef32ef7baf2d36c4571f75ba124ae55b904f6142/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=ef32ef7baf2d36c4571f75ba124ae55b904f6142", "patch": "@@ -34,8 +34,8 @@ use crate::sys;\n /// attacks such as HashDoS.\n ///\n /// The hashing algorithm can be replaced on a per-`HashMap` basis using the\n-/// [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many\n-/// alternative algorithms are available on crates.io, such as the [`fnv`] crate.\n+/// [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods.\n+/// There are many alternative [hashing algorithms available on crates.io].\n ///\n /// It is required that the keys implement the [`Eq`] and [`Hash`] traits, although\n /// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\n@@ -57,6 +57,7 @@ use crate::sys;\n /// The original C++ version of SwissTable can be found [here], and this\n /// [CppCon talk] gives an overview of how the algorithm works.\n ///\n+/// [hashing algorithms available on crates.io]: https://crates.io/keywords/hasher\n /// [SwissTable]: https://abseil.io/blog/20180927-swisstables\n /// [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n /// [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\n@@ -154,7 +155,6 @@ use crate::sys;\n /// [`default`]: Default::default\n /// [`with_hasher`]: Self::with_hasher\n /// [`with_capacity_and_hasher`]: Self::with_capacity_and_hasher\n-/// [`fnv`]: https://crates.io/crates/fnv\n ///\n /// ```\n /// use std::collections::HashMap;"}]}