{"sha": "2186847f28b240b6f06515402789e3d8fc9205bd", "node_id": "C_kwDOAAsO6NoAKDIxODY4NDdmMjhiMjQwYjZmMDY1MTU0MDI3ODllM2Q4ZmM5MjA1YmQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-29T13:44:23Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-10T07:18:47Z"}, "message": "move `structural_traits` into `assembly`", "tree": {"sha": "9db763e5c4c87230a65239e0e311c757a0b2fa1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db763e5c4c87230a65239e0e311c757a0b2fa1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2186847f28b240b6f06515402789e3d8fc9205bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2186847f28b240b6f06515402789e3d8fc9205bd", "html_url": "https://github.com/rust-lang/rust/commit/2186847f28b240b6f06515402789e3d8fc9205bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2186847f28b240b6f06515402789e3d8fc9205bd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b0f5721c190ebb9b738713d578f3780eac46ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0f5721c190ebb9b738713d578f3780eac46ee6", "html_url": "https://github.com/rust-lang/rust/commit/2b0f5721c190ebb9b738713d578f3780eac46ee6"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "12ee80b6722b1f571958baa3f770a33e7cb5b895", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=2186847f28b240b6f06515402789e3d8fc9205bd", "patch": "@@ -1,8 +1,6 @@\n //! Code shared by trait and projection goals for candidate assembly.\n \n use super::search_graph::OverflowHandler;\n-#[cfg(doc)]\n-use super::trait_goals::structural_traits::*;\n use super::{EvalCtxt, SolverMode};\n use crate::solve::CanonicalResponseExt;\n use crate::traits::coherence;\n@@ -16,6 +14,8 @@ use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::fmt::Debug;\n \n+pub(super) mod structural_traits;\n+\n /// A candidate is a possible way to prove a goal.\n ///\n /// It consists of both the `source`, which describes how that goal would be proven,", "previous_filename": "compiler/rustc_trait_selection/src/solve/assembly.rs"}, {"sha": "2de556185e31557683535d367be6a7f250bbd7fd", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=2186847f28b240b6f06515402789e3d8fc9205bd", "patch": "@@ -11,7 +11,7 @@ use crate::solve::EvalCtxt;\n //\n // For types with an \"existential\" binder, i.e. generator witnesses, we also\n // instantiate the binder with placeholders eagerly.\n-pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n+pub(crate) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n@@ -87,7 +87,7 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     }\n }\n \n-fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n+pub(crate) fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> ty::Binder<'tcx, Ty<'tcx>> {\n@@ -108,7 +108,7 @@ fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n     ty::Binder::bind_with_vars(ty, bound_vars)\n }\n \n-pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n+pub(crate) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n@@ -158,7 +158,7 @@ pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     }\n }\n \n-pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n+pub(crate) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> Result<Vec<Ty<'tcx>>, NoSolution> {", "previous_filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs"}, {"sha": "2a47da81ec760aedea5abcdbd1f9543e7ccf7e89", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2186847f28b240b6f06515402789e3d8fc9205bd", "patch": "@@ -1,7 +1,6 @@\n use crate::traits::specialization_graph;\n \n-use super::assembly;\n-use super::trait_goals::structural_traits;\n+use super::assembly::{self, structural_traits};\n use super::EvalCtxt;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;"}, {"sha": "81f89fd950c8d29e29f2f338ef84ec9ba8ce39d9", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186847f28b240b6f06515402789e3d8fc9205bd/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=2186847f28b240b6f06515402789e3d8fc9205bd", "patch": "@@ -1,6 +1,7 @@\n //! Dealing with trait goals, i.e. `T: Trait<'a, U>`.\n \n-use super::{assembly, EvalCtxt, SolverMode};\n+use super::assembly::{self, structural_traits};\n+use super::{EvalCtxt, SolverMode};\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n use rustc_infer::traits::query::NoSolution;\n@@ -11,8 +12,6 @@ use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use rustc_middle::ty::{TraitPredicate, TypeVisitableExt};\n use rustc_span::DUMMY_SP;\n \n-pub mod structural_traits;\n-\n impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     fn self_ty(self) -> Ty<'tcx> {\n         self.self_ty()"}]}