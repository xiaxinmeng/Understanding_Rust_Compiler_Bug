{"sha": "39de03d8446f839791ae223446d54b67564a3684", "node_id": "C_kwDOAAsO6NoAKDM5ZGUwM2Q4NDQ2ZjgzOTc5MWFlMjIzNDQ2ZDU0YjY3NTY0YTM2ODQ", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-06-05T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-06-07T15:02:55Z"}, "message": "Change `Direction::{is_forward,is_backward}` functions into constants\n\nMake it explicit that the analysis direction is constant.\n\nThis also makes the value immediately available for optimizations.\nPreviously those functions were neither inline nor generic and so their\ndefinition was unavailable when using data flow framework from other\ncrates.", "tree": {"sha": "e356d1769b86492f95f32f3bea18b29f4a53fee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e356d1769b86492f95f32f3bea18b29f4a53fee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39de03d8446f839791ae223446d54b67564a3684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39de03d8446f839791ae223446d54b67564a3684", "html_url": "https://github.com/rust-lang/rust/commit/39de03d8446f839791ae223446d54b67564a3684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39de03d8446f839791ae223446d54b67564a3684/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe2c4b00dfbc33643e1af4b293eb057306a8339", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe2c4b00dfbc33643e1af4b293eb057306a8339", "html_url": "https://github.com/rust-lang/rust/commit/7fe2c4b00dfbc33643e1af4b293eb057306a8339"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "f3b5544aa8b9d4bc35710723d703c0461f076f83", "filename": "compiler/rustc_mir_dataflow/src/framework/cursor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs?ref=39de03d8446f839791ae223446d54b67564a3684", "patch": "@@ -109,7 +109,7 @@ where\n     /// For backward analyses, this is the state that will be propagated to its\n     /// predecessors (ignoring edge-specific effects).\n     pub fn seek_to_block_start(&mut self, block: BasicBlock) {\n-        if A::Direction::is_forward() {\n+        if A::Direction::IS_FORWARD {\n             self.seek_to_block_entry(block)\n         } else {\n             self.seek_after(Location { block, statement_index: 0 }, Effect::Primary)\n@@ -123,7 +123,7 @@ where\n     /// For forward analyses, this is the state that will be propagated to its\n     /// successors (ignoring edge-specific effects).\n     pub fn seek_to_block_end(&mut self, block: BasicBlock) {\n-        if A::Direction::is_backward() {\n+        if A::Direction::IS_BACKWARD {\n             self.seek_to_block_entry(block)\n         } else {\n             self.seek_after(self.body.terminator_loc(block), Effect::Primary)\n@@ -157,7 +157,7 @@ where\n             self.seek_to_block_entry(target.block);\n         } else if let Some(curr_effect) = self.pos.curr_effect_index {\n             let mut ord = curr_effect.statement_index.cmp(&target.statement_index);\n-            if A::Direction::is_backward() {\n+            if A::Direction::IS_BACKWARD {\n                 ord = ord.reverse()\n             }\n \n@@ -173,7 +173,7 @@ where\n         debug_assert_eq!(target.block, self.pos.block);\n \n         let block_data = &self.body[target.block];\n-        let next_effect = if A::Direction::is_forward() {\n+        let next_effect = if A::Direction::IS_FORWARD {\n             #[rustfmt::skip]\n             self.pos.curr_effect_index.map_or_else(\n                 || Effect::Before.at_index(0),"}, {"sha": "05a4d7bbf3e6fc692221a69be5e1bd14d304d8b2", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=39de03d8446f839791ae223446d54b67564a3684", "patch": "@@ -9,11 +9,9 @@ use super::{\n };\n \n pub trait Direction {\n-    fn is_forward() -> bool;\n+    const IS_FORWARD: bool;\n \n-    fn is_backward() -> bool {\n-        !Self::is_forward()\n-    }\n+    const IS_BACKWARD: bool = !Self::IS_FORWARD;\n \n     /// Applies all effects between the given `EffectIndex`s.\n     ///\n@@ -68,9 +66,7 @@ pub trait Direction {\n pub struct Backward;\n \n impl Direction for Backward {\n-    fn is_forward() -> bool {\n-        false\n-    }\n+    const IS_FORWARD: bool = false;\n \n     fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n@@ -338,9 +334,7 @@ where\n pub struct Forward;\n \n impl Direction for Forward {\n-    fn is_forward() -> bool {\n-        true\n-    }\n+    const IS_FORWARD: bool = true;\n \n     fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,"}, {"sha": "20e14a77c1e57b466705df31910a77a1c8faf29b", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=39de03d8446f839791ae223446d54b67564a3684", "patch": "@@ -147,7 +147,7 @@ where\n         let mut entry_sets = IndexVec::from_elem(bottom_value.clone(), body.basic_blocks());\n         analysis.initialize_start_block(body, &mut entry_sets[mir::START_BLOCK]);\n \n-        if A::Direction::is_backward() && entry_sets[mir::START_BLOCK] != bottom_value {\n+        if A::Direction::IS_BACKWARD && entry_sets[mir::START_BLOCK] != bottom_value {\n             bug!(\"`initialize_start_block` is not yet supported for backward dataflow analyses\");\n         }\n \n@@ -200,7 +200,7 @@ where\n         let mut dirty_queue: WorkQueue<BasicBlock> =\n             WorkQueue::with_none(body.basic_blocks().len());\n \n-        if A::Direction::is_forward() {\n+        if A::Direction::IS_FORWARD {\n             for (bb, _) in traversal::reverse_postorder(body) {\n                 dirty_queue.insert(bb);\n             }"}, {"sha": "59a2053ec7000879631a47939a99ae74b8edce7d", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=39de03d8446f839791ae223446d54b67564a3684", "patch": "@@ -216,7 +216,7 @@ where\n         // Write the full dataflow state immediately after the terminator if it differs from the\n         // state at block entry.\n         self.results.seek_to_block_end(block);\n-        if self.results.get() != &block_start_state || A::Direction::is_backward() {\n+        if self.results.get() != &block_start_state || A::Direction::IS_BACKWARD {\n             let after_terminator_name = match terminator.kind {\n                 mir::TerminatorKind::Call { target: Some(_), .. } => \"(on unwind)\",\n                 _ => \"(on end)\",\n@@ -390,7 +390,7 @@ where\n         let mut afters = diffs.after.into_iter();\n \n         let next_in_dataflow_order = |it: &mut std::vec::IntoIter<_>| {\n-            if A::Direction::is_forward() { it.next().unwrap() } else { it.next_back().unwrap() }\n+            if A::Direction::IS_FORWARD { it.next().unwrap() } else { it.next_back().unwrap() }\n         };\n \n         for (i, statement) in body[block].statements.iter().enumerate() {\n@@ -527,7 +527,7 @@ where\n         _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n-        if A::Direction::is_forward() {\n+        if A::Direction::IS_FORWARD {\n             self.prev_state.clone_from(state);\n         }\n     }\n@@ -538,7 +538,7 @@ where\n         _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n-        if A::Direction::is_backward() {\n+        if A::Direction::IS_BACKWARD {\n             self.prev_state.clone_from(state);\n         }\n     }"}, {"sha": "d9461fd3abd8164cbdb78e991ecc0f9ba7cdb477", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39de03d8446f839791ae223446d54b67564a3684/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=39de03d8446f839791ae223446d54b67564a3684", "patch": "@@ -140,7 +140,7 @@ impl<D: Direction> MockAnalysis<'_, D> {\n             SeekTarget::After(loc) => Effect::Primary.at_index(loc.statement_index),\n         };\n \n-        let mut pos = if D::is_forward() {\n+        let mut pos = if D::IS_FORWARD {\n             Effect::Before.at_index(0)\n         } else {\n             Effect::Before.at_index(self.body[block].statements.len())\n@@ -153,7 +153,7 @@ impl<D: Direction> MockAnalysis<'_, D> {\n                 return ret;\n             }\n \n-            if D::is_forward() {\n+            if D::IS_FORWARD {\n                 pos = pos.next_in_forward_order();\n             } else {\n                 pos = pos.next_in_backward_order();"}]}