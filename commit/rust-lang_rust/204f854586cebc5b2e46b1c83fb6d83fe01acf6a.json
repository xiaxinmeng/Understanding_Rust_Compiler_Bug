{"sha": "204f854586cebc5b2e46b1c83fb6d83fe01acf6a", "node_id": "C_kwDOAAsO6NoAKDIwNGY4NTQ1ODZjZWJjNWIyZTQ2YjFjODNmYjZkODNmZTAxYWNmNmE", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-02-18T14:21:56Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-05-02T08:07:51Z"}, "message": "Slightly tighten leak-on-panic test cases", "tree": {"sha": "c4cdcc1ae17d65c868efddbc7dcf091022811db9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4cdcc1ae17d65c868efddbc7dcf091022811db9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204f854586cebc5b2e46b1c83fb6d83fe01acf6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204f854586cebc5b2e46b1c83fb6d83fe01acf6a", "html_url": "https://github.com/rust-lang/rust/commit/204f854586cebc5b2e46b1c83fb6d83fe01acf6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204f854586cebc5b2e46b1c83fb6d83fe01acf6a/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "321247deb31545b41e29f703bf2f2770b6809f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/321247deb31545b41e29f703bf2f2770b6809f38", "html_url": "https://github.com/rust-lang/rust/commit/321247deb31545b41e29f703bf2f2770b6809f38"}], "stats": {"total": 101, "additions": 49, "deletions": 52}, "files": [{"sha": "4e54d7d5ab6216f21bf9fc4b15715355bd6630d5", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/204f854586cebc5b2e46b1c83fb6d83fe01acf6a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204f854586cebc5b2e46b1c83fb6d83fe01acf6a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=204f854586cebc5b2e46b1c83fb6d83fe01acf6a", "patch": "@@ -1,8 +1,8 @@\n use super::*;\n use crate::boxed::Box;\n+use crate::testing::crash_test::{CrashTestDummy, Panic};\n use std::iter::TrustedLen;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicU32, Ordering};\n \n #[test]\n fn test_iterator() {\n@@ -291,33 +291,30 @@ fn test_drain_sorted() {\n \n #[test]\n fn test_drain_sorted_leak() {\n-    static DROPS: AtomicU32 = AtomicU32::new(0);\n-\n-    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    struct D(u32, bool);\n-\n-    impl Drop for D {\n-        fn drop(&mut self) {\n-            DROPS.fetch_add(1, Ordering::SeqCst);\n-\n-            if self.1 {\n-                panic!(\"panic in `drop`\");\n-            }\n-        }\n-    }\n-\n+    let d0 = CrashTestDummy::new(0);\n+    let d1 = CrashTestDummy::new(1);\n+    let d2 = CrashTestDummy::new(2);\n+    let d3 = CrashTestDummy::new(3);\n+    let d4 = CrashTestDummy::new(4);\n+    let d5 = CrashTestDummy::new(5);\n     let mut q = BinaryHeap::from(vec![\n-        D(0, false),\n-        D(1, false),\n-        D(2, false),\n-        D(3, true),\n-        D(4, false),\n-        D(5, false),\n+        d0.spawn(Panic::Never),\n+        d1.spawn(Panic::Never),\n+        d2.spawn(Panic::Never),\n+        d3.spawn(Panic::InDrop),\n+        d4.spawn(Panic::Never),\n+        d5.spawn(Panic::Never),\n     ]);\n \n-    catch_unwind(AssertUnwindSafe(|| drop(q.drain_sorted()))).ok();\n+    catch_unwind(AssertUnwindSafe(|| drop(q.drain_sorted()))).unwrap_err();\n \n-    assert_eq!(DROPS.load(Ordering::SeqCst), 6);\n+    assert_eq!(d0.dropped(), 1);\n+    assert_eq!(d1.dropped(), 1);\n+    assert_eq!(d2.dropped(), 1);\n+    assert_eq!(d3.dropped(), 1);\n+    assert_eq!(d4.dropped(), 1);\n+    assert_eq!(d5.dropped(), 1);\n+    assert!(q.is_empty());\n }\n \n #[test]"}, {"sha": "bb98262684f4fe9714b6687d35b360068b8f9567", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/204f854586cebc5b2e46b1c83fb6d83fe01acf6a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204f854586cebc5b2e46b1c83fb6d83fe01acf6a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=204f854586cebc5b2e46b1c83fb6d83fe01acf6a", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+use crate::testing::crash_test::{CrashTestDummy, Panic};\n use crate::vec::Vec;\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -984,35 +985,34 @@ fn drain_filter_complex() {\n \n #[test]\n fn drain_filter_drop_panic_leak() {\n-    static mut DROPS: i32 = 0;\n-\n-    struct D(bool);\n-\n-    impl Drop for D {\n-        fn drop(&mut self) {\n-            unsafe {\n-                DROPS += 1;\n-            }\n-\n-            if self.0 {\n-                panic!(\"panic in `drop`\");\n-            }\n-        }\n-    }\n-\n+    let d0 = CrashTestDummy::new(0);\n+    let d1 = CrashTestDummy::new(1);\n+    let d2 = CrashTestDummy::new(2);\n+    let d3 = CrashTestDummy::new(3);\n+    let d4 = CrashTestDummy::new(4);\n+    let d5 = CrashTestDummy::new(5);\n+    let d6 = CrashTestDummy::new(6);\n+    let d7 = CrashTestDummy::new(7);\n     let mut q = LinkedList::new();\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_back(D(false));\n-    q.push_front(D(false));\n-    q.push_front(D(true));\n-    q.push_front(D(false));\n-\n-    catch_unwind(AssertUnwindSafe(|| drop(q.drain_filter(|_| true)))).ok();\n-\n-    assert_eq!(unsafe { DROPS }, 8);\n+    q.push_back(d3.spawn(Panic::Never));\n+    q.push_back(d4.spawn(Panic::Never));\n+    q.push_back(d5.spawn(Panic::Never));\n+    q.push_back(d6.spawn(Panic::Never));\n+    q.push_back(d7.spawn(Panic::Never));\n+    q.push_front(d2.spawn(Panic::Never));\n+    q.push_front(d1.spawn(Panic::InDrop));\n+    q.push_front(d0.spawn(Panic::Never));\n+\n+    catch_unwind(AssertUnwindSafe(|| drop(q.drain_filter(|_| true)))).unwrap_err();\n+\n+    assert_eq!(d0.dropped(), 1);\n+    assert_eq!(d1.dropped(), 1);\n+    assert_eq!(d2.dropped(), 1);\n+    assert_eq!(d3.dropped(), 1);\n+    assert_eq!(d4.dropped(), 1);\n+    assert_eq!(d5.dropped(), 1);\n+    assert_eq!(d6.dropped(), 1);\n+    assert_eq!(d7.dropped(), 1);\n     assert!(q.is_empty());\n }\n "}]}