{"sha": "234927e098fc5e86ded3ac46b8cfaa522235dcf8", "node_id": "C_kwDOAAsO6NoAKDIzNDkyN2UwOThmYzVlODZkZWQzYWM0NmI4Y2ZhYTUyMjIzNWRjZjg", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-23T13:33:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-23T13:33:34Z"}, "message": "Ignore \"non-real\" type Res in rustdoc intra doc link resolution", "tree": {"sha": "229c91ebbfa725308660a820fbb834f7d4e4d076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/229c91ebbfa725308660a820fbb834f7d4e4d076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/234927e098fc5e86ded3ac46b8cfaa522235dcf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/234927e098fc5e86ded3ac46b8cfaa522235dcf8", "html_url": "https://github.com/rust-lang/rust/commit/234927e098fc5e86ded3ac46b8cfaa522235dcf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/234927e098fc5e86ded3ac46b8cfaa522235dcf8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda5becc27cbc7106646fbc40aacea5e7896d954", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda5becc27cbc7106646fbc40aacea5e7896d954", "html_url": "https://github.com/rust-lang/rust/commit/cda5becc27cbc7106646fbc40aacea5e7896d954"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "e0611907613c4064ad23330e8f22c690354d4110", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/234927e098fc5e86ded3ac46b8cfaa522235dcf8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234927e098fc5e86ded3ac46b8cfaa522235dcf8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=234927e098fc5e86ded3ac46b8cfaa522235dcf8", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{Applicability, DiagnosticArgValue, DiagnosticId, IntoDiagnosticArg};\n use rustc_hir::def::Namespace::{self, *};\n-use rustc_hir::def::{self, CtorKind, DefKind, LifetimeRes, PartialRes, PerNS};\n+use rustc_hir::def::{self, CtorKind, DefKind, LifetimeRes, NonMacroAttrKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::{BindingAnnotation, PrimTy, TraitCandidate};\n use rustc_middle::middle::resolve_bound_vars::Set1;\n@@ -4287,12 +4287,12 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         }\n     }\n \n-    fn resolve_and_cache_rustdoc_path(&mut self, path_str: &str, ns: Namespace) -> bool {\n+    fn resolve_and_cache_rustdoc_path(&mut self, path_str: &str, ns: Namespace) -> Option<Res> {\n         // FIXME: This caching may be incorrect in case of multiple `macro_rules`\n         // items with the same name in the same module.\n         // Also hygiene is not considered.\n         let mut doc_link_resolutions = std::mem::take(&mut self.r.doc_link_resolutions);\n-        let res = doc_link_resolutions\n+        let res = *doc_link_resolutions\n             .entry(self.parent_scope.module.nearest_parent_mod().expect_local())\n             .or_default()\n             .entry((Symbol::intern(path_str), ns))\n@@ -4307,8 +4307,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     return None;\n                 }\n                 res\n-            })\n-            .is_some();\n+            });\n         self.r.doc_link_resolutions = doc_link_resolutions;\n         res\n     }\n@@ -4343,8 +4342,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             let mut any_resolved = false;\n             let mut need_assoc = false;\n             for ns in [TypeNS, ValueNS, MacroNS] {\n-                if self.resolve_and_cache_rustdoc_path(&path_str, ns) {\n-                    any_resolved = true;\n+                if let Some(res) = self.resolve_and_cache_rustdoc_path(&path_str, ns) {\n+                    // Rustdoc ignores tool attribute resolutions and attempts\n+                    // to resolve their prefixes for diagnostics.\n+                    any_resolved = !matches!(res, Res::NonMacroAttr(NonMacroAttrKind::Tool));\n                 } else if ns != MacroNS {\n                     need_assoc = true;\n                 }"}, {"sha": "9e6894a77dfa038d3854bc9f5e1fcae8f0c656cb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/234927e098fc5e86ded3ac46b8cfaa522235dcf8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234927e098fc5e86ded3ac46b8cfaa522235dcf8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=234927e098fc5e86ded3ac46b8cfaa522235dcf8", "patch": "@@ -149,7 +149,7 @@ impl TryFrom<ResolveRes> for Res {\n             Def(kind, id) => Ok(Res::Def(kind, id)),\n             PrimTy(prim) => Ok(Res::Primitive(PrimitiveType::from_hir(prim))),\n             // e.g. `#[derive]`\n-            NonMacroAttr(..) | Err => Result::Err(()),\n+            ToolMod | NonMacroAttr(..) | Err => Result::Err(()),\n             other => bug!(\"unrecognized res {:?}\", other),\n         }\n     }"}]}