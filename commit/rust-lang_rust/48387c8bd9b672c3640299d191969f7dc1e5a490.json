{"sha": "48387c8bd9b672c3640299d191969f7dc1e5a490", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Mzg3YzhiZDliNjcyYzM2NDAyOTlkMTkxOTY5ZjdkYzFlNWE0OTA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-09-24T15:23:46Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-26T19:41:17Z"}, "message": "refactor the `pat_is_catchall` logic", "tree": {"sha": "97316f60606553a31d11ce606744dbf5cdc3f57d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97316f60606553a31d11ce606744dbf5cdc3f57d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48387c8bd9b672c3640299d191969f7dc1e5a490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48387c8bd9b672c3640299d191969f7dc1e5a490", "html_url": "https://github.com/rust-lang/rust/commit/48387c8bd9b672c3640299d191969f7dc1e5a490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48387c8bd9b672c3640299d191969f7dc1e5a490/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "732f22745dbac22fad9e8f9c0f17d37a23db52f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/732f22745dbac22fad9e8f9c0f17d37a23db52f8", "html_url": "https://github.com/rust-lang/rust/commit/732f22745dbac22fad9e8f9c0f17d37a23db52f8"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "7878ffff48d3b314ce36faf7d9c9f22c51cb9786", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/48387c8bd9b672c3640299d191969f7dc1e5a490/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48387c8bd9b672c3640299d191969f7dc1e5a490/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=48387c8bd9b672c3640299d191969f7dc1e5a490", "patch": "@@ -74,21 +74,6 @@ impl<'a, 'tcx> Pattern<'a, 'tcx> {\n         return pat;\n     }\n \n-\n-    /// Checks for common cases of \"catchall\" patterns that may not be intended as such.\n-    fn is_catchall(self, dm: &DefMap) -> bool {\n-        fn is_catchall(dm: &DefMap, pat: &Pat) -> bool {\n-            match pat.node {\n-                PatKind::Binding(.., None) => true,\n-                PatKind::Binding(.., Some(ref s)) => is_catchall(dm, s),\n-                PatKind::Ref(ref s, _) => is_catchall(dm, s),\n-                PatKind::Tuple(ref v, _) => v.iter().all(|p|is_catchall(dm, &p)),\n-                _ => false\n-            }\n-        }\n-        is_catchall(dm, self.pat)\n-    }\n-\n     fn span(self) -> Span {\n         self.pat.span\n     }\n@@ -339,11 +324,25 @@ fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) {\n     });\n }\n \n+/// Checks for common cases of \"catchall\" patterns that may not be intended as such.\n+fn pat_is_catchall(dm: &DefMap, pat: &Pat) -> bool {\n+    match pat.node {\n+        PatKind::Binding(.., None) => true,\n+        PatKind::Binding(.., Some(ref s)) => pat_is_catchall(dm, s),\n+        PatKind::Ref(ref s, _) => pat_is_catchall(dm, s),\n+        PatKind::Tuple(ref v, _) => v.iter().all(|p| {\n+            pat_is_catchall(dm, &p)\n+        }),\n+        _ => false\n+    }\n+}\n+\n // Check for unreachable patterns\n fn check_arms(cx: &MatchCheckCtxt,\n               arms: &[(Vec<P<Pat>>, Option<&hir::Expr>)],\n               source: hir::MatchSource) {\n     let mut seen = Matrix(vec![]);\n+    let mut catchall = None;\n     let mut printed_if_let_err = false;\n     for &(ref pats, guard) in arms {\n         for pat in pats {\n@@ -393,11 +392,8 @@ fn check_arms(cx: &MatchCheckCtxt,\n                                                            \"unreachable pattern\");\n                             err.span_label(pat.span, &format!(\"this is an unreachable pattern\"));\n                             // if we had a catchall pattern, hint at that\n-                            for row in &seen.0 {\n-                                if row[0].is_catchall(&cx.tcx.def_map.borrow()) {\n-                                    span_note!(err, row[0].span(),\n-                                               \"this pattern matches any value\");\n-                                }\n+                            if let Some(catchall) = catchall {\n+                                err.span_note(catchall, \"this pattern matches any value\");\n                             }\n                             err.emit();\n                         },\n@@ -414,6 +410,10 @@ fn check_arms(cx: &MatchCheckCtxt,\n                 let Matrix(mut rows) = seen;\n                 rows.push(v);\n                 seen = Matrix(rows);\n+                if catchall.is_none() && pat_is_catchall(&cx.tcx.def_map.borrow(), pat) {\n+                    catchall = Some(pat.span);\n+                }\n+\n             }\n         }\n     }"}]}