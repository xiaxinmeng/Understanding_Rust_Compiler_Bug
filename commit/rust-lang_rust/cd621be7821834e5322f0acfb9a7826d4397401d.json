{"sha": "cd621be7821834e5322f0acfb9a7826d4397401d", "node_id": "C_kwDOAAsO6NoAKGNkNjIxYmU3ODIxODM0ZTUzMjJmMGFjZmI5YTc4MjZkNDM5NzQwMWQ", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-22T13:48:55Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-26T13:04:09Z"}, "message": "Convert all #[suggestion_*] attributes to #[suggestion(style = \"...\")]\n\nUsing the following command:\n\nfind compiler/ -type f -name '*.rs' -exec perl -i -gpe \\\n    's/(#\\[\\w*suggestion)_(short|verbose|hidden)\\(\\s*(\\S+,)?/\\1(\\3style = \"\\2\",/g' \\\n    '{}' +", "tree": {"sha": "cf852b2f6d6aa52c748f32a25d7b2b7df64c102e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf852b2f6d6aa52c748f32a25d7b2b7df64c102e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd621be7821834e5322f0acfb9a7826d4397401d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd621be7821834e5322f0acfb9a7826d4397401d", "html_url": "https://github.com/rust-lang/rust/commit/cd621be7821834e5322f0acfb9a7826d4397401d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd621be7821834e5322f0acfb9a7826d4397401d/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f2958b8af32dd08173272a7ede09aaa255c980", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f2958b8af32dd08173272a7ede09aaa255c980", "html_url": "https://github.com/rust-lang/rust/commit/20f2958b8af32dd08173272a7ede09aaa255c980"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "21c6a2d26f4c2e54f95ba1e0b99c6c8ac0dac71e", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -277,8 +277,9 @@ pub struct RegisterConflict<'a> {\n pub struct SubTupleBinding<'a> {\n     #[primary_span]\n     #[label]\n-    #[suggestion_verbose(\n+    #[suggestion(\n         ast_lowering_sub_tuple_binding_suggestion,\n+        style = \"verbose\",\n         code = \"..\",\n         applicability = \"maybe-incorrect\"\n     )]"}, {"sha": "fe24f85fae10a53545d1f0183f0326bb1381b632", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -49,7 +49,7 @@ pub(crate) struct GenericDoesNotLiveLongEnough {\n #[derive(LintDiagnostic)]\n #[diag(borrowck_var_does_not_need_mut)]\n pub(crate) struct VarNeedNotMut {\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"\")]\n     pub span: Span,\n }\n #[derive(Diagnostic)]"}, {"sha": "144421ac249ed740f06bfefb605a5348f8acc4d4", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -120,7 +120,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(code = \"{ty}\")]\n+    #[suggestion(style = \"verbose\", code = \"{ty}\")]\n     pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n@@ -237,7 +237,11 @@ pub struct UnusedExternCrate {\n #[derive(LintDiagnostic)]\n #[diag(hir_analysis_extern_crate_not_idiomatic)]\n pub struct ExternCrateNotIdiomatic {\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"{suggestion_code}\")]\n+    #[suggestion(\n+        style = \"short\",\n+        applicability = \"machine-applicable\",\n+        code = \"{suggestion_code}\"\n+    )]\n     pub span: Span,\n     pub msg_code: String,\n     pub suggestion_code: String,"}, {"sha": "cfb408396da05e4d0e55b42ce4b7a3981559e82d", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -113,8 +113,9 @@ pub struct MissingParentheseInRange {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion_verbose(\n+#[multipart_suggestion(\n     hir_analysis_add_missing_parentheses_in_range,\n+    style = \"verbose\",\n     applicability = \"maybe-incorrect\"\n )]\n pub struct AddMissingParenthesesInRange {"}, {"sha": "bb04e1c49baea08c6492b1f1467424c09142029b", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -109,8 +109,9 @@ pub struct InferenceBadError<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum SourceKindSubdiag<'a> {\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_source_kind_subdiag_let,\n+        style = \"verbose\",\n         code = \": {type_name}\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -135,8 +136,9 @@ pub enum SourceKindSubdiag<'a> {\n         parent_prefix: String,\n         parent_name: String,\n     },\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_source_kind_subdiag_generic_suggestion,\n+        style = \"verbose\",\n         code = \"::<{args}>\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -150,8 +152,9 @@ pub enum SourceKindSubdiag<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum SourceKindMultiSuggestion<'a> {\n-    #[multipart_suggestion_verbose(\n+    #[multipart_suggestion(\n         infer_source_kind_fully_qualified,\n+        style = \"verbose\",\n         applicability = \"has-placeholders\"\n     )]\n     FullyQualified {\n@@ -163,8 +166,9 @@ pub enum SourceKindMultiSuggestion<'a> {\n         adjustment: &'a str,\n         successor_pos: &'a str,\n     },\n-    #[multipart_suggestion_verbose(\n+    #[multipart_suggestion(\n         infer_source_kind_closure_return,\n+        style = \"verbose\",\n         applicability = \"has-placeholders\"\n     )]\n     ClosureReturn {\n@@ -478,8 +482,9 @@ pub enum ImplicitStaticLifetimeSubdiag {\n         #[primary_span]\n         span: Span,\n     },\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_implicit_static_lifetime_suggestion,\n+        style = \"verbose\",\n         code = \" + '_\",\n         applicability = \"maybe-incorrect\"\n     )]"}, {"sha": "1a769893f5520aa8771274b624907953b2004c5c", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -83,7 +83,7 @@ pub struct UnknownToolInScopedLint {\n pub struct BuiltinEllpisisInclusiveRangePatterns {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_short(code = \"{replace}\", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"short\", code = \"{replace}\", applicability = \"machine-applicable\")]\n     pub suggestion: Span,\n     pub replace: String,\n }"}, {"sha": "25ee0227428dab2035c99806e95fbc8573f41b72", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -150,8 +150,9 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_verbose(\n+#[suggestion(\n     lint_opaque_hidden_inferred_bound_sugg,\n+    style = \"verbose\",\n     applicability = \"machine-applicable\",\n     code = \" + {trait_ref}\"\n )]"}, {"sha": "78df0cd1d341ae7d05df7e783833a0e6efa5ce82", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -129,7 +129,7 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// }\n ///\n /// #[derive(Subdiagnostic)]\n-/// #[suggestion_verbose(parser::raw_identifier)]\n+/// #[suggestion(style = \"verbose\",parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n ///     span: Span,"}, {"sha": "ce7b1a979d7e8d1d2cce0481abf02d5d4bad2222", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -64,7 +64,7 @@ pub(crate) struct BadQPathStage2 {\n #[diag(parser_incorrect_semicolon)]\n pub(crate) struct IncorrectSemicolon<'a> {\n     #[primary_span]\n-    #[suggestion_short(code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"short\", code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n     #[help]\n     pub opt_help: Option<()>,\n@@ -136,7 +136,12 @@ pub(crate) struct InvalidComparisonOperator {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidComparisonOperatorSub {\n-    #[suggestion_short(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n+    #[suggestion(\n+        use_instead,\n+        style = \"short\",\n+        applicability = \"machine-applicable\",\n+        code = \"{correct}\"\n+    )]\n     Correctable {\n         #[primary_span]\n         span: Span,\n@@ -160,14 +165,16 @@ pub(crate) struct InvalidLogicalOperator {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidLogicalOperatorSub {\n-    #[suggestion_short(\n+    #[suggestion(\n         use_amp_amp_for_conjunction,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"&&\"\n     )]\n     Conjunction(#[primary_span] Span),\n-    #[suggestion_short(\n+    #[suggestion(\n         use_pipe_pipe_for_disjunction,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"||\"\n     )]\n@@ -178,7 +185,7 @@ pub(crate) enum InvalidLogicalOperatorSub {\n #[diag(parser_tilde_is_not_unary_operator)]\n pub(crate) struct TildeAsUnaryOperator(\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"!\")]\n     pub Span,\n );\n \n@@ -194,22 +201,25 @@ pub(crate) struct NotAsNegationOperator {\n \n #[derive(Subdiagnostic)]\n pub enum NotAsNegationOperatorSub {\n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_default,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n     SuggestNotDefault(#[primary_span] Span),\n \n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_bitwise,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n     SuggestNotBitwise(#[primary_span] Span),\n \n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_logical,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n@@ -249,7 +259,7 @@ pub(crate) struct UnexpectedTokenAfterLabel {\n     #[primary_span]\n     #[label(parser_unexpected_token_after_label)]\n     pub span: Span,\n-    #[suggestion_verbose(suggestion_remove_label, code = \"\")]\n+    #[suggestion(suggestion_remove_label, style = \"verbose\", code = \"\")]\n     pub remove_label: Option<Span>,\n     #[subdiagnostic]\n     pub enclose_in_block: Option<UnexpectedTokenAfterLabelSugg>,\n@@ -272,7 +282,7 @@ pub(crate) struct RequireColonAfterLabeledExpression {\n     pub span: Span,\n     #[label]\n     pub label: Span,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \": \")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \": \")]\n     pub label_end: Span,\n }\n \n@@ -354,7 +364,7 @@ pub(crate) struct IntLiteralTooLarge {\n pub(crate) struct MissingSemicolonBeforeArray {\n     #[primary_span]\n     pub open_delim: Span,\n-    #[suggestion_verbose(applicability = \"maybe-incorrect\", code = \";\")]\n+    #[suggestion(style = \"verbose\", applicability = \"maybe-incorrect\", code = \";\")]\n     pub semicolon: Span,\n }\n \n@@ -442,9 +452,9 @@ pub(crate) struct MissingInInForLoop {\n #[derive(Subdiagnostic)]\n pub(crate) enum MissingInInForLoopSub {\n     // Has been misleading, at least in the past (closed Issue #48492), thus maybe-incorrect\n-    #[suggestion_short(use_in_not_of, applicability = \"maybe-incorrect\", code = \"in\")]\n+    #[suggestion(use_in_not_of, style = \"short\", applicability = \"maybe-incorrect\", code = \"in\")]\n     InNotOf(#[primary_span] Span),\n-    #[suggestion_short(add_in, applicability = \"maybe-incorrect\", code = \" in \")]\n+    #[suggestion(add_in, style = \"short\", applicability = \"maybe-incorrect\", code = \" in \")]\n     AddIn(#[primary_span] Span),\n }\n \n@@ -470,7 +480,7 @@ pub(crate) struct CatchAfterTry {\n pub(crate) struct CommaAfterBaseStruct {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"\")]\n     pub comma: Span,\n }\n \n@@ -512,15 +522,15 @@ pub(crate) struct RemoveLet {\n #[diag(parser_use_eq_instead)]\n pub(crate) struct UseEqInstead {\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"=\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"=\")]\n     pub span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(parser_use_empty_block_not_semi)]\n pub(crate) struct UseEmptyBlockNotSemi {\n     #[primary_span]\n-    #[suggestion_hidden(applicability = \"machine-applicable\", code = \"{{}}\")]\n+    #[suggestion(style = \"hidden\", applicability = \"machine-applicable\", code = \"{{}}\")]\n     pub span: Span,\n }\n \n@@ -576,7 +586,12 @@ pub(crate) struct LeadingPlusNotSupported {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(suggestion_remove_plus, code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        suggestion_remove_plus,\n+        style = \"verbose\",\n+        code = \"\",\n+        applicability = \"machine-applicable\"\n+    )]\n     pub remove_plus: Option<Span>,\n     #[subdiagnostic]\n     pub add_parentheses: Option<ExprParenthesesNeeded>,\n@@ -843,7 +858,7 @@ pub(crate) struct InvalidCurlyInLetElse {\n #[help]\n pub(crate) struct CompoundAssignmentExpressionInLet {\n     #[primary_span]\n-    #[suggestion_short(code = \"=\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"short\", code = \"=\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n \n@@ -864,8 +879,9 @@ pub(crate) struct InvalidMetaItem {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_verbose(\n+#[suggestion(\n     parser_sugg_escape_to_use_as_identifier,\n+    style = \"verbose\",\n     applicability = \"maybe-incorrect\",\n     code = \"r#\"\n )]\n@@ -1003,7 +1019,12 @@ pub(crate) enum ExpectedSemiSugg {\n         applicability = \"machine-applicable\"\n     )]\n     ChangeToSemi(#[primary_span] Span),\n-    #[suggestion_short(parser_sugg_add_semi, code = \";\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        parser_sugg_add_semi,\n+        style = \"short\",\n+        code = \";\",\n+        applicability = \"machine-applicable\"\n+    )]\n     AddSemi(#[primary_span] Span),\n }\n \n@@ -1057,8 +1078,9 @@ pub(crate) struct GenericParamsWithoutAngleBracketsSugg {\n pub(crate) struct ComparisonOperatorsCannotBeChained {\n     #[primary_span]\n     pub span: Vec<Span>,\n-    #[suggestion_verbose(\n+    #[suggestion(\n         parser_sugg_turbofish_syntax,\n+        style = \"verbose\",\n         code = \"::\",\n         applicability = \"maybe-incorrect\"\n     )]\n@@ -1072,8 +1094,9 @@ pub(crate) struct ComparisonOperatorsCannotBeChained {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum ComparisonOperatorsCannotBeChainedSugg {\n-    #[suggestion_verbose(\n+    #[suggestion(\n         sugg_split_comparison,\n+        style = \"verbose\",\n         code = \" && {middle_term}\",\n         applicability = \"maybe-incorrect\"\n     )]\n@@ -1215,15 +1238,15 @@ pub(crate) enum UnexpectedConstParamDeclarationSugg {\n pub(crate) struct UnexpectedConstInGenericParam {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_verbose(code = \"\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"verbose\", code = \"\", applicability = \"maybe-incorrect\")]\n     pub to_remove: Option<Span>,\n }\n \n #[derive(Diagnostic)]\n #[diag(parser_async_move_order_incorrect)]\n pub(crate) struct AsyncMoveOrderIncorrect {\n     #[primary_span]\n-    #[suggestion_verbose(code = \"async move\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"verbose\", code = \"async move\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n "}, {"sha": "26e04ce8c101793ea4f440df4fd2aa995635ed3b", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd621be7821834e5322f0acfb9a7826d4397401d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=cd621be7821834e5322f0acfb9a7826d4397401d", "patch": "@@ -291,7 +291,7 @@ pub struct DocTestUnknownAny {\n #[note(no_op_note)]\n pub struct DocTestUnknownSpotlight {\n     pub path: String,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"notable_trait\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"notable_trait\")]\n     pub span: Span,\n }\n "}]}