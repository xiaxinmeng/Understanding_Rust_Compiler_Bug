{"sha": "209395284799bb86e34cf59493c539a35f6150dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTM5NTI4NDc5OWJiODZlMzRjZjU5NDkzYzUzOWEzNWY2MTUwZGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-26T04:55:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-27T02:41:17Z"}, "message": "Partial fix for #2687---impl method must only be subtype of trait method, not exact match.", "tree": {"sha": "828d32b5a4fb50baa315e51524fb9e5369c7b19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828d32b5a4fb50baa315e51524fb9e5369c7b19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209395284799bb86e34cf59493c539a35f6150dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209395284799bb86e34cf59493c539a35f6150dd", "html_url": "https://github.com/rust-lang/rust/commit/209395284799bb86e34cf59493c539a35f6150dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209395284799bb86e34cf59493c539a35f6150dd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab614f3569f34eee2fd70862e8f35548282fb11", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab614f3569f34eee2fd70862e8f35548282fb11", "html_url": "https://github.com/rust-lang/rust/commit/2ab614f3569f34eee2fd70862e8f35548282fb11"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "611edbb3236e35245062dfee63badc8c42b0f1e0", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/209395284799bb86e34cf59493c539a35f6150dd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209395284799bb86e34cf59493c539a35f6150dd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=209395284799bb86e34cf59493c539a35f6150dd", "patch": "@@ -288,15 +288,10 @@ fn compare_impl_method(tcx: ty::ctxt,\n \n     let impl_m = &cm.mty;\n \n-    if impl_m.fty.meta.purity != trait_m.fty.meta.purity {\n-        tcx.sess.span_err(\n-            cm.span,\n-            fmt!(\"method `%s`'s purity does \\\n-                  not match the trait method's \\\n-                  purity\", tcx.sess.str_of(impl_m.ident)));\n-    }\n-\n-    // is this check right?\n+    // FIXME(#2687)---this check is too strict.  For example, a trait\n+    // method with self type `&self` or `&mut self` should be\n+    // implementable by an `&const self` method (the impl assumes less\n+    // than the trait provides).\n     if impl_m.self_ty != trait_m.self_ty {\n         tcx.sess.span_err(\n             cm.span,\n@@ -328,6 +323,9 @@ fn compare_impl_method(tcx: ty::ctxt,\n         return;\n     }\n \n+    // FIXME(#2687)---we should be checking that the bounds of the\n+    // trait imply the bounds of the subtype, but it appears\n+    // we are...not checking this.\n     for trait_m.tps.eachi() |i, trait_param_bounds| {\n         // For each of the corresponding impl ty param's bounds...\n         let impl_param_bounds = impl_m.tps[i];\n@@ -389,11 +387,19 @@ fn compare_impl_method(tcx: ty::ctxt,\n         debug!(\"trait_fty (pre-subst): %s\", ty_to_str(tcx, trait_fty));\n         ty::subst(tcx, &substs, trait_fty)\n     };\n-    debug!(\"trait_fty: %s\", ty_to_str(tcx, trait_fty));\n-    require_same_types(\n-        tcx, None, false, cm.span, impl_fty, trait_fty,\n-        || fmt!(\"method `%s` has an incompatible type\",\n-                tcx.sess.str_of(trait_m.ident)));\n+\n+    let infcx = infer::new_infer_ctxt(tcx);\n+    match infer::mk_subty(infcx, false, cm.span, impl_fty, trait_fty) {\n+        result::Ok(()) => {}\n+        result::Err(ref terr) => {\n+            tcx.sess.span_err(\n+                cm.span,\n+                fmt!(\"method `%s` has an incompatible type: %s\",\n+                     tcx.sess.str_of(trait_m.ident),\n+                     ty::type_err_to_str(tcx, terr)));\n+            ty::note_and_explain_type_err(tcx, terr);\n+        }\n+    }\n     return;\n \n     // Replaces bound references to the self region with `with_r`."}, {"sha": "895aea49874997b33c296c0b6af7364189240708", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/209395284799bb86e34cf59493c539a35f6150dd/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209395284799bb86e34cf59493c539a35f6150dd/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=209395284799bb86e34cf59493c539a35f6150dd", "patch": "@@ -0,0 +1,25 @@\n+trait Mumbo {\n+    pure fn jumbo(&self, x: @uint) -> uint;\n+    fn jambo(&self, x: @const uint) -> uint;\n+    fn jbmbo(&self) -> @uint;\n+}\n+\n+impl uint: Mumbo {\n+    // Cannot have a larger effect than the trait:\n+    fn jumbo(&self, x: @uint) { *self + *x; }\n+    //~^ ERROR expected pure fn but found impure fn\n+\n+    // Cannot accept a narrower range of parameters:\n+    fn jambo(&self, x: @uint) { *self + *x; }\n+    //~^ ERROR values differ in mutability\n+\n+    // Cannot return a wider range of values:\n+    fn jbmbo(&self) -> @const uint { @const 0 }\n+    //~^ ERROR values differ in mutability\n+}\n+\n+fn main() {}\n+\n+\n+\n+"}, {"sha": "d1548b6c1867c1eee23711326db5aeb7276f1dcf", "filename": "src/test/compile-fail/trait-impl-subtype.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/209395284799bb86e34cf59493c539a35f6150dd/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209395284799bb86e34cf59493c539a35f6150dd/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs?ref=209395284799bb86e34cf59493c539a35f6150dd", "patch": "@@ -0,0 +1,21 @@\n+trait Mumbo {\n+    fn jumbo(&self, x: @uint) -> uint;\n+}\n+\n+impl uint: Mumbo {\n+    // Note: this method def is ok, it is more accepting and\n+    // less effecting than the trait method:\n+    pure fn jumbo(&self, x: @const uint) -> uint { *self + *x }\n+}\n+\n+fn main() {\n+    let a = 3u;\n+    let b = a.jumbo(@mut 6);\n+\n+    let x = @a as @Mumbo;\n+    let y = x.jumbo(@mut 6); //~ ERROR values differ in mutability\n+    let z = x.jumbo(@6);\n+}\n+\n+\n+"}]}