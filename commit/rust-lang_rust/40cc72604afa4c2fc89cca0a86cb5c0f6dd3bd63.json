{"sha": "40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2M3MjYwNGFmYTRjMmZjODljY2EwYTg2Y2I1YzBmNmRkM2JkNjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-24T17:18:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-24T17:18:21Z"}, "message": "update for bool/char being checked at binops", "tree": {"sha": "11009af15010a6398f3595f19f1dd03f1cd86a46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11009af15010a6398f3595f19f1dd03f1cd86a46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "html_url": "https://github.com/rust-lang/rust/commit/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bce6cb3605a36092ab86daffa52f8075e76a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bce6cb3605a36092ab86daffa52f8075e76a8b", "html_url": "https://github.com/rust-lang/rust/commit/42bce6cb3605a36092ab86daffa52f8075e76a8b"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "bd08c0ce4eb9d97175076854c8ff4eba01a6cb46", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "patch": "@@ -1,4 +1,6 @@\n //ignore-test FIXME (do some basic validation of invariants for all values in flight)\n+//This does currently not get caught becuase it compiles to SwitchInt, which\n+//has no knowledge about data invariants.\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };"}, {"sha": "47c4e8b410ebe89854c03ad71709f5ec6ba1e70a", "filename": "tests/compile-fail/invalid_bool2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Finvalid_bool2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Finvalid_bool2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool2.rs?ref=40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n+    let _x = b == true; //~ ERROR invalid boolean value read\n+}"}, {"sha": "fd4431992d9b603909434a3639c3f76629b8efd6", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "patch": "@@ -1,11 +1,13 @@\n // ignore-test FIXME: we are not checking these things on match any more?\n+//This does currently not get caught becuase it compiles to SwitchInt, which\n+//has no knowledge about data invariants.\n \n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error\n+    let _ = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error\n         //~^ NOTE tried to interpret an invalid 32-bit value as a char: 4294967295\n-        'a' => {},\n-        'b' => {},\n-        _ => {},\n-    }\n+        'a' => {true},\n+        'b' => {false},\n+        _ => {true},\n+    };\n }"}, {"sha": "786dd813a1eb9bb4e65ff4d5329082e2e1a70f80", "filename": "tests/compile-fail/match_char2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Fmatch_char2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Fcompile-fail%2Fmatch_char2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char2.rs?ref=40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    assert!(std::char::from_u32(-1_i32 as u32).is_none());\n+    let c = unsafe { std::mem::transmute::<i32, char>(-1) };\n+    let _x = c == 'x'; //~ ERROR tried to interpret an invalid 32-bit value as a char\n+}"}, {"sha": "30fc14704d9d0aece08f0e3b5a5067bc7249586d", "filename": "tests/run-pass/bools.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Frun-pass%2Fbools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63/tests%2Frun-pass%2Fbools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbools.rs?ref=40cc72604afa4c2fc89cca0a86cb5c0f6dd3bd63", "patch": "@@ -25,4 +25,5 @@ fn main() {\n     assert_eq!(if_false(), 0);\n     assert_eq!(if_true(), 1);\n     assert_eq!(match_bool(), 1);\n+    assert_eq!(true == true, true);\n }"}]}