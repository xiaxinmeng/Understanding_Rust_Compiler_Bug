{"sha": "0afebe63dd0b8e01cac824e86de7df6d6fd29bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZmViZTYzZGQwYjhlMDFjYWM4MjRlODZkZTdkZjZkNmZkMjliYmQ=", "commit": {"author": {"name": "Eunji Jeong", "email": "eun-ji.jeong@samsung.com", "date": "2015-02-24T09:15:03Z"}, "committer": {"name": "Eunji Jeong", "email": "eun-ji.jeong@samsung.com", "date": "2015-02-24T09:25:28Z"}, "message": "Replace deprecated getdtablesize() with sysconf(_SC_OPEN_MAX) for android aarch64", "tree": {"sha": "e34ea01675c9a1534351fd2155ca2456676671ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e34ea01675c9a1534351fd2155ca2456676671ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd", "html_url": "https://github.com/rust-lang/rust/commit/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd/comments", "author": {"login": "ejjeong", "id": 10492346, "node_id": "MDQ6VXNlcjEwNDkyMzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/10492346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejjeong", "html_url": "https://github.com/ejjeong", "followers_url": "https://api.github.com/users/ejjeong/followers", "following_url": "https://api.github.com/users/ejjeong/following{/other_user}", "gists_url": "https://api.github.com/users/ejjeong/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejjeong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejjeong/subscriptions", "organizations_url": "https://api.github.com/users/ejjeong/orgs", "repos_url": "https://api.github.com/users/ejjeong/repos", "events_url": "https://api.github.com/users/ejjeong/events{/privacy}", "received_events_url": "https://api.github.com/users/ejjeong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ejjeong", "id": 10492346, "node_id": "MDQ6VXNlcjEwNDkyMzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/10492346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejjeong", "html_url": "https://github.com/ejjeong", "followers_url": "https://api.github.com/users/ejjeong/followers", "following_url": "https://api.github.com/users/ejjeong/following{/other_user}", "gists_url": "https://api.github.com/users/ejjeong/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejjeong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejjeong/subscriptions", "organizations_url": "https://api.github.com/users/ejjeong/orgs", "repos_url": "https://api.github.com/users/ejjeong/repos", "events_url": "https://api.github.com/users/ejjeong/events{/privacy}", "received_events_url": "https://api.github.com/users/ejjeong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef56da541a90c62801440702a3e3c009e5332be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef56da541a90c62801440702a3e3c009e5332be", "html_url": "https://github.com/rust-lang/rust/commit/0ef56da541a90c62801440702a3e3c009e5332be"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "02e6d7dadb115b88a2e18e210459fcbc9edb3913", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=0afebe63dd0b8e01cac824e86de7df6d6fd29bbd", "patch": "@@ -69,7 +69,6 @@ impl Process {\n               K: BytesContainer + Eq + Hash, V: BytesContainer\n     {\n         use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n-        use libc::funcs::bsd44::getdtablesize;\n \n         mod rustrt {\n             extern {\n@@ -82,6 +81,15 @@ impl Process {\n             assert_eq!(ret, 0);\n         }\n \n+        #[cfg(all(target_os = \"android\", target_arch = \"aarch64\"))]\n+        unsafe fn getdtablesize() -> c_int {\n+            libc::sysconf(libc::consts::os::sysconf::_SC_OPEN_MAX) as c_int\n+        }\n+        #[cfg(not(all(target_os = \"android\", target_arch = \"aarch64\")))]\n+        unsafe fn getdtablesize() -> c_int {\n+            libc::funcs::bsd44::getdtablesize()\n+        }\n+\n         let dirp = cfg.cwd().map(|c| c.as_ptr()).unwrap_or(ptr::null());\n \n         // temporary until unboxed closures land"}, {"sha": "b7a1b002f55983a0048fc742f2a0167a8be32ecc", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afebe63dd0b8e01cac824e86de7df6d6fd29bbd/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=0afebe63dd0b8e01cac824e86de7df6d6fd29bbd", "patch": "@@ -141,7 +141,6 @@ impl Process {\n                  -> io::Result<Process>\n     {\n         use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n-        use libc::funcs::bsd44::getdtablesize;\n \n         mod rustrt {\n             extern {\n@@ -154,6 +153,16 @@ impl Process {\n             assert_eq!(ret, 0);\n         }\n \n+        #[cfg(all(target_os = \"android\", target_arch = \"aarch64\"))]\n+        unsafe fn getdtablesize() -> c_int {\n+            libc::sysconf(libc::consts::os::sysconf::_SC_OPEN_MAX) as c_int\n+        }\n+\n+        #[cfg(not(all(target_os = \"android\", target_arch = \"aarch64\")))]\n+        unsafe fn getdtablesize() -> c_int {\n+            libc::funcs::bsd44::getdtablesize()\n+        }\n+\n         let dirp = cfg.cwd.as_ref().map(|c| c.as_ptr()).unwrap_or(ptr::null());\n \n         with_envp(cfg.env.as_ref(), |envp: *const c_void| {"}]}