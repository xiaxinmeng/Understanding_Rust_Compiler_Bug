{"sha": "ab7155dd977e88bc275832d6733d1c5653338d7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzE1NWRkOTc3ZTg4YmMyNzU4MzJkNjczM2QxYzU2NTMzMzhkN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T06:17:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T06:17:38Z"}, "message": "Rollup merge of #63230 - tmandry:disallow-possibly-uninitialized, r=Centril\n\nMake use of possibly uninitialized data [E0381] a hard error\n\nThis is one of the behaviors we no longer allow in NLL. Since it can\nlead to undefined behavior, I think it's definitely worth making it a\nhard error without waiting to turn off migration mode (#58781).\n\nCloses #60450.\n\nMy ulterior motive here is making it impossible to leave variables\npartially initialized across a yield (see #60889, discussion at #63035), so\ntests are included for that.\n\ncc #54987\n\n---\n\nI'm not sure if bypassing the buffer is a good way of doing this. We could also make a `force_errors_buffer` or similar that gets recombined with all the errors as they are emitted. But this is simpler and seems fine to me.\n\nr? @Centril\ncc @cramertj @nikomatsakis @pnkfelix @RalfJung", "tree": {"sha": "29b4655fec86ea15de8b88ee5f19ec8d245b6f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b4655fec86ea15de8b88ee5f19ec8d245b6f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7155dd977e88bc275832d6733d1c5653338d7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSRuCCRBK7hj4Ov3rIwAAdHIIACFeFEZL7660PgES11rpmdwO\npWqoi4QeVNN6DjytHtJVBnwNu6Xj8S+cF/KIPJkBGTaOpEey0+/WUvCY2b8uRxYX\nBobD+p0JFH9KsQqEFjuGjDfmP3JDWvvJ1ROMg54Mbumi5/+8TUMGJPCOywSAyDDY\n6M5yJHhSuZDbJzDofhWar2Hvgy9fVpXKyVysdup80uHmNJKtmp0/4Bo/yYxtLS5F\nMjnCPHis93/XApIA2HxIlHsCJcKH4972n7oddRNZhq0DADjjnQTOhXuuCecbwC6a\n0zTbiQ9SckqCA5WldhoCsZweL6g0WySmTUdeNPF5dqzBYMvksUfp3bdmdNuv6y0=\n=z8uL\n-----END PGP SIGNATURE-----\n", "payload": "tree 29b4655fec86ea15de8b88ee5f19ec8d245b6f0a\nparent e98823025fe600dbe2d1385abec2804d0a8e0b2f\nparent 9058bf2100499649a285e49555e42fbe8fa3556d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565072258 +0200\ncommitter GitHub <noreply@github.com> 1565072258 +0200\n\nRollup merge of #63230 - tmandry:disallow-possibly-uninitialized, r=Centril\n\nMake use of possibly uninitialized data [E0381] a hard error\n\nThis is one of the behaviors we no longer allow in NLL. Since it can\nlead to undefined behavior, I think it's definitely worth making it a\nhard error without waiting to turn off migration mode (#58781).\n\nCloses #60450.\n\nMy ulterior motive here is making it impossible to leave variables\npartially initialized across a yield (see #60889, discussion at #63035), so\ntests are included for that.\n\ncc #54987\n\n---\n\nI'm not sure if bypassing the buffer is a good way of doing this. We could also make a `force_errors_buffer` or similar that gets recombined with all the errors as they are emitted. But this is simpler and seems fine to me.\n\nr? @Centril\ncc @cramertj @nikomatsakis @pnkfelix @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7155dd977e88bc275832d6733d1c5653338d7c", "html_url": "https://github.com/rust-lang/rust/commit/ab7155dd977e88bc275832d6733d1c5653338d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7155dd977e88bc275832d6733d1c5653338d7c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98823025fe600dbe2d1385abec2804d0a8e0b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98823025fe600dbe2d1385abec2804d0a8e0b2f", "html_url": "https://github.com/rust-lang/rust/commit/e98823025fe600dbe2d1385abec2804d0a8e0b2f"}, {"sha": "9058bf2100499649a285e49555e42fbe8fa3556d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9058bf2100499649a285e49555e42fbe8fa3556d", "html_url": "https://github.com/rust-lang/rust/commit/9058bf2100499649a285e49555e42fbe8fa3556d"}], "stats": {"total": 340, "additions": 209, "deletions": 131}, "files": [{"sha": "4217a29bc663cbf4e7a7b663360552306d9a8997", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -105,6 +105,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n \n+            // This error should not be downgraded to a warning,\n+            // even in migrate mode.\n+            self.disable_error_downgrading();\n             err.buffer(&mut self.errors_buffer);\n         } else {\n             if let Some((reported_place, _)) = self.move_error_reported.get(&move_out_indices) {"}, {"sha": "de27aec2b29902054420aae7cc6a8048d2b3e052", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -253,6 +253,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n+        disable_error_downgrading: false,\n         nonlexical_regioncx: regioncx,\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n@@ -364,7 +365,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     if !mbcx.errors_buffer.is_empty() {\n         mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n \n-        if tcx.migrate_borrowck() {\n+        if !mbcx.disable_error_downgrading && tcx.migrate_borrowck() {\n             // When borrowck=migrate, check if AST-borrowck would\n             // error on the given code.\n \n@@ -481,6 +482,9 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     uninitialized_error_reported: FxHashSet<PlaceRef<'cx, 'tcx>>,\n     /// Errors to be reported buffer\n     errors_buffer: Vec<Diagnostic>,\n+    /// If there are no errors reported by the HIR borrow checker, we downgrade\n+    /// all NLL errors to warnings. Setting this flag disables downgrading.\n+    disable_error_downgrading: bool,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n     used_mut: FxHashSet<Local>,\n@@ -921,6 +925,12 @@ impl InitializationRequiringAction {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n+    /// If there are no errors reported by the HIR borrow checker, we downgrade\n+    /// all NLL errors to warnings. Calling this disables downgrading.\n+    crate fn disable_error_downgrading(&mut self)  {\n+        self.disable_error_downgrading = true;\n+    }\n+\n     /// Checks an access to the given place to see if it is allowed. Examines the set of borrows\n     /// that are in scope, as well as which paths have been initialized, to ensure that (a) the\n     /// place is initialized and (b) it is not borrowed in some way that would prevent this"}, {"sha": "40f9f5202e77c5760da4943fd6df8b261a8c56f5", "filename": "src/test/ui/async-await/partial-initialization-across-await.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -0,0 +1,44 @@\n+// Test that we don't allow awaiting from an async fn while a local is partially\n+// initialized.\n+\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct S { x: i32, y: i32 }\n+struct T(i32, i32);\n+\n+async fn noop() {}\n+\n+async fn test_tuple() {\n+    let mut t: (i32, i32);\n+    t.0 = 42;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    noop().await;\n+    t.1 = 88;\n+    let _ = t;\n+}\n+\n+async fn test_tuple_struct() {\n+    let mut t: T;\n+    t.0 = 42;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    noop().await;\n+    t.1 = 88;\n+    let _ = t;\n+}\n+\n+async fn test_struct() {\n+    let mut t: S;\n+    t.x = 42;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    noop().await;\n+    t.y = 88;\n+    let _ = t;\n+}\n+\n+fn main() {\n+    let _ = test_tuple();\n+    let _ = test_tuple_struct();\n+    let _ = test_struct();\n+}"}, {"sha": "fe79eb08befaa5458fe642398b3d2a7ce735ec6d", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -0,0 +1,21 @@\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/partial-initialization-across-await.rs:15:5\n+   |\n+LL |     t.0 = 42;\n+   |     ^^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/partial-initialization-across-await.rs:24:5\n+   |\n+LL |     t.0 = 42;\n+   |     ^^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/partial-initialization-across-await.rs:33:5\n+   |\n+LL |     t.x = 42;\n+   |     ^^^^^^^^ use of possibly uninitialized `t`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "a987c00b091914f21a347be6c78bd96a52d2d8df", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -0,0 +1,22 @@\n+// Test that we don't allow partial initialization.\n+// This may be relaxed in the future (see #54987).\n+\n+fn main() {\n+    let mut t: (u64, u64);\n+    t.0 = 1;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    t.1 = 1;\n+\n+    let mut t: (u64, u64);\n+    t.1 = 1;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+    t.0 = 1;\n+\n+    let mut t: (u64, u64);\n+    t.0 = 1;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+\n+    let mut t: (u64,);\n+    t.0 = 1;\n+    //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+}"}, {"sha": "a32b17b165934f1f574c4b5f21a0ba2b9bb9f249", "filename": "src/test/ui/borrowck/disallow-possibly-uninitialized.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fdisallow-possibly-uninitialized.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -0,0 +1,27 @@\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/disallow-possibly-uninitialized.rs:6:5\n+   |\n+LL |     t.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/disallow-possibly-uninitialized.rs:11:5\n+   |\n+LL |     t.1 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/disallow-possibly-uninitialized.rs:16:5\n+   |\n+LL |     t.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/disallow-possibly-uninitialized.rs:20:5\n+   |\n+LL |     t.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `t`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "a61c9b0c9fef9995daa1542852cf39603ac42417", "filename": "src/test/ui/consts/const_let_refutable.nll.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr?ref=e98823025fe600dbe2d1385abec2804d0a8e0b2f", "patch": "@@ -1,31 +0,0 @@\n-error[E0005]: refutable pattern in function argument: `&[]` not covered\n-  --> $DIR/const_let_refutable.rs:3:16\n-   |\n-LL | const fn slice([a, b]: &[i32]) -> i32 {\n-   |                ^^^^^^ pattern `&[]` not covered\n-\n-error[E0723]: can only call other `const fn` within a `const fn`, but `const <&i32 as std::ops::Add>::add` is not stable as `const fn`\n-  --> $DIR/const_let_refutable.rs:4:5\n-   |\n-LL |     a + b\n-   |     ^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0381]: use of possibly uninitialized variable: `a`\n-  --> $DIR/const_let_refutable.rs:4:5\n-   |\n-LL |     a + b\n-   |     ^ use of possibly uninitialized `a`\n-\n-error[E0381]: use of possibly uninitialized variable: `b`\n-  --> $DIR/const_let_refutable.rs:4:9\n-   |\n-LL |     a + b\n-   |         ^ use of possibly uninitialized `b`\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0005, E0381, E0723.\n-For more information about an error, try `rustc --explain E0005`."}, {"sha": "7b3a591223025b85538db8d8f7e44d4646749370", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -2,10 +2,6 @@ fn main() {}\n \n const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n     a + b //~ ERROR can only call other `const fn` within a `const fn`\n-    //~^ WARN use of possibly uninitialized variable: `a`\n-    //~| WARN this error has been downgraded to a warning for backwards compatibility\n-    //~| WARN this represents potential undefined behavior in your code and this warning will\n-    //~| WARN use of possibly uninitialized variable: `b`\n-    //~| WARN this error has been downgraded to a warning for backwards compatibility\n-    //~| WARN this represents potential undefined behavior in your code and this warning will\n+    //~^ ERROR use of possibly uninitialized variable: `a`\n+    //~| ERROR use of possibly uninitialized variable: `b`\n }"}, {"sha": "a61c9b0c9fef9995daa1542852cf39603ac42417", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -13,27 +13,19 @@ LL |     a + b\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-warning[E0381]: use of possibly uninitialized variable: `a`\n+error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/const_let_refutable.rs:4:5\n    |\n LL |     a + b\n    |     ^ use of possibly uninitialized `a`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-warning[E0381]: use of possibly uninitialized variable: `b`\n+error[E0381]: use of possibly uninitialized variable: `b`\n   --> $DIR/const_let_refutable.rs:4:9\n    |\n LL |     a + b\n    |         ^ use of possibly uninitialized `b`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0005, E0381, E0723.\n For more information about an error, try `rustc --explain E0005`."}, {"sha": "01ee1c3a4d7fadbf7ec17219fcf79cff4a67648b", "filename": "src/test/ui/empty/empty-never-array.nll.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.nll.stderr?ref=e98823025fe600dbe2d1385abec2804d0a8e0b2f", "patch": "@@ -1,23 +0,0 @@\n-error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n-  --> $DIR/empty-never-array.rs:10:9\n-   |\n-LL | / enum Helper<T, U> {\n-LL | |     T(T, [!; 0]),\n-LL | |     #[allow(dead_code)]\n-LL | |     U(U),\n-LL | | }\n-   | |_- `Helper<T, U>` defined here\n-...\n-LL |       let Helper::U(u) = Helper::T(t, []);\n-   |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n-\n-error[E0381]: use of possibly uninitialized variable: `u`\n-  --> $DIR/empty-never-array.rs:12:5\n-   |\n-LL |     u\n-   |     ^ use of possibly uninitialized `u`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0005, E0381.\n-For more information about an error, try `rustc --explain E0005`."}, {"sha": "ffd2545b291e269b561ad8a3f766128cd8659e4a", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -10,9 +10,7 @@ fn transmute<T, U>(t: T) -> U {\n     let Helper::U(u) = Helper::T(t, []);\n     //~^ ERROR refutable pattern in local binding: `T(_, _)` not covered\n     u\n-    //~^ WARN use of possibly uninitialized variable: `u`\n-    //~| WARN this error has been downgraded to a warning for backwards compatibility\n-    //~| WARN this represents potential undefined behavior in your code and this warning will\n+    //~^ ERROR use of possibly uninitialized variable: `u`\n }\n \n fn main() {"}, {"sha": "01ee1c3a4d7fadbf7ec17219fcf79cff4a67648b", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -11,17 +11,13 @@ LL | | }\n LL |       let Helper::U(u) = Helper::T(t, []);\n    |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n \n-warning[E0381]: use of possibly uninitialized variable: `u`\n+error[E0381]: use of possibly uninitialized variable: `u`\n   --> $DIR/empty-never-array.rs:12:5\n    |\n LL |     u\n    |     ^ use of possibly uninitialized `u`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0005, E0381.\n For more information about an error, try `rustc --explain E0005`."}, {"sha": "1e4593002cb9a0b09c28661c0e54d9d1aa2ad5db", "filename": "src/test/ui/generator/partial-initialization-across-yield.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -0,0 +1,46 @@\n+// Test that we don't allow yielding from a generator while a local is partially\n+// initialized.\n+\n+#![feature(generators)]\n+\n+struct S { x: i32, y: i32 }\n+struct T(i32, i32);\n+\n+fn test_tuple() {\n+    let _ = || {\n+        let mut t: (i32, i32);\n+        t.0 = 42;\n+        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        yield;\n+        t.1 = 88;\n+        let _ = t;\n+    };\n+}\n+\n+fn test_tuple_struct() {\n+    let _ = || {\n+        let mut t: T;\n+        t.0 = 42;\n+        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        yield;\n+        t.1 = 88;\n+        let _ = t;\n+    };\n+}\n+\n+fn test_struct() {\n+    let _ = || {\n+        let mut t: S;\n+        t.x = 42;\n+        //~^ ERROR assign to part of possibly uninitialized variable: `t` [E0381]\n+        yield;\n+        t.y = 88;\n+        let _ = t;\n+    };\n+}\n+\n+fn main() {\n+    test_tuple();\n+    test_tuple_struct();\n+    test_struct();\n+}"}, {"sha": "8bf0037e0700946f1e4f14b7fb4716663b17fcbb", "filename": "src/test/ui/generator/partial-initialization-across-yield.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-initialization-across-yield.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -0,0 +1,21 @@\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/partial-initialization-across-yield.rs:12:9\n+   |\n+LL |         t.0 = 42;\n+   |         ^^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/partial-initialization-across-yield.rs:23:9\n+   |\n+LL |         t.0 = 42;\n+   |         ^^^^^^^^ use of possibly uninitialized `t`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `t`\n+  --> $DIR/partial-initialization-across-yield.rs:34:9\n+   |\n+LL |         t.x = 42;\n+   |         ^^^^^^^^ use of possibly uninitialized `t`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "a8495846b3610e544fd318ae296de9c89e3e4c8a", "filename": "src/test/ui/issues/issue-15381.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.nll.stderr?ref=e98823025fe600dbe2d1385abec2804d0a8e0b2f", "patch": "@@ -1,16 +0,0 @@\n-error[E0005]: refutable pattern in `for` loop binding: `&[]` not covered\n-  --> $DIR/issue-15381.rs:4:9\n-   |\n-LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n-   |         ^^^^^^^^ pattern `&[]` not covered\n-\n-error[E0381]: borrow of possibly uninitialized variable: `y`\n-  --> $DIR/issue-15381.rs:6:26\n-   |\n-LL |         println!(\"y={}\", y);\n-   |                          ^ use of possibly uninitialized `y`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0005, E0381.\n-For more information about an error, try `rustc --explain E0005`."}, {"sha": "d21c321b09399a79e9d7f5f365ccc3cb3db92fb4", "filename": "src/test/ui/issues/issue-15381.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -4,8 +4,6 @@ fn main() {\n     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n         //~^ ERROR refutable pattern in `for` loop binding: `&[]` not covered\n         println!(\"y={}\", y);\n-        //~^ WARN borrow of possibly uninitialized variable: `y`\n-        //~| WARN this error has been downgraded to a warning for backwards compatibility\n-        //~| WARN this represents potential undefined behavior in your code and this warning will\n+        //~^ ERROR borrow of possibly uninitialized variable: `y`\n     }\n }"}, {"sha": "a8495846b3610e544fd318ae296de9c89e3e4c8a", "filename": "src/test/ui/issues/issue-15381.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -4,17 +4,13 @@ error[E0005]: refutable pattern in `for` loop binding: `&[]` not covered\n LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n    |         ^^^^^^^^ pattern `&[]` not covered\n \n-warning[E0381]: borrow of possibly uninitialized variable: `y`\n+error[E0381]: borrow of possibly uninitialized variable: `y`\n   --> $DIR/issue-15381.rs:6:26\n    |\n LL |         println!(\"y={}\", y);\n    |                          ^ use of possibly uninitialized `y`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0005, E0381.\n For more information about an error, try `rustc --explain E0005`."}, {"sha": "eee331d95b9bc9c6f31a6241b21c2cd67d9290f2", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e98823025fe600dbe2d1385abec2804d0a8e0b2f/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.nll.stderr?ref=e98823025fe600dbe2d1385abec2804d0a8e0b2f", "patch": "@@ -1,16 +0,0 @@\n-error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/recursive-types-are-not-uninhabited.rs:6:9\n-   |\n-LL |     let Ok(x) = res;\n-   |         ^^^^^ pattern `Err(_)` not covered\n-\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/recursive-types-are-not-uninhabited.rs:8:5\n-   |\n-LL |     x\n-   |     ^ use of possibly uninitialized `x`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0005, E0381.\n-For more information about an error, try `rustc --explain E0005`."}, {"sha": "45910c3c3a8c6dbc945baf39253f1e7328c08c2d", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -6,9 +6,7 @@ fn foo(res: Result<u32, &R>) -> u32 {\n     let Ok(x) = res;\n     //~^ ERROR refutable pattern\n     x\n-    //~^ WARN use of possibly uninitialized variable: `x`\n-    //~| WARN this error has been downgraded to a warning for backwards compatibility\n-    //~| WARN this represents potential undefined behavior in your code and this warning will\n+    //~^ ERROR use of possibly uninitialized variable: `x`\n }\n \n fn main() {"}, {"sha": "eee331d95b9bc9c6f31a6241b21c2cd67d9290f2", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7155dd977e88bc275832d6733d1c5653338d7c/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=ab7155dd977e88bc275832d6733d1c5653338d7c", "patch": "@@ -4,17 +4,13 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n LL |     let Ok(x) = res;\n    |         ^^^^^ pattern `Err(_)` not covered\n \n-warning[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/recursive-types-are-not-uninhabited.rs:8:5\n    |\n LL |     x\n    |     ^ use of possibly uninitialized `x`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0005, E0381.\n For more information about an error, try `rustc --explain E0005`."}]}