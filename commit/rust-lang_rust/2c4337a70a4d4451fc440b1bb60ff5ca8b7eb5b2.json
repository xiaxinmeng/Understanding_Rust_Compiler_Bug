{"sha": "2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNDMzN2E3MGE0ZDQ0NTFmYzQ0MGIxYmI2MGZmNWNhOGI3ZWI1YjI=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-10T05:15:35Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-10T05:15:43Z"}, "message": "Comments :3", "tree": {"sha": "3f73aaf5484fe53ef6bffc03b61a4a204e725724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f73aaf5484fe53ef6bffc03b61a4a204e725724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "html_url": "https://github.com/rust-lang/rust/commit/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "html_url": "https://github.com/rust-lang/rust/commit/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "b5f37c8398ef388da32e16d9f81dc04876cfb72a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "patch": "@@ -29,19 +29,32 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         let parent_node = tcx.hir().get(parent_node_id);\n \n         match parent_node {\n+            // This matches on types who's paths couldn't be resolved without typeck'ing e.g.\n+            //\n+            // trait Foo {\n+            //   type Assoc<const N1: usize>;;\n+            //   fn foo() -> Self::Assoc<3>;\n+            //   // note: if the def_id argument is the 3 then in this example\n+            //   // parent_node would be the node for Self::Assoc<_>\n+            // }\n+            // We didnt write <Self as Foo>::Assoc so the Self::Assoc<_> is lowered to QPath::TypeRelative.\n+            // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n             Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n-                let id = tcx\n+                // Walk up from the parent_node to find an item so that\n+                // we can resolve the relative path to an actual associated type\n+                let item_hir_id = tcx\n                     .hir()\n                     .parent_iter(hir_id)\n                     .filter(|(_, node)| matches!(node, Node::Item(_)))\n                     .map(|(id, _)| id)\n                     .next()\n                     .unwrap();\n-\n-                let item_did = tcx.hir().local_def_id(id).to_def_id();\n+                let item_did = tcx.hir().local_def_id(item_hir_id).to_def_id();\n                 let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n-                let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n \n+                // This ty will be the actual associated type so that we can\n+                // go through its generics to find which param our def_id corresponds to\n+                let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n                 if let ty::Projection(projection) = ty.kind() {\n                     let generics = tcx.generics_of(projection.item_def_id);\n \n@@ -65,6 +78,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         .map(|param| param.def_id);\n                 }\n \n+                // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n                 tcx.sess.delay_span_bug(\n                     tcx.def_span(def_id),\n                     \"unexpected non-GAT usage of an anon const\","}]}