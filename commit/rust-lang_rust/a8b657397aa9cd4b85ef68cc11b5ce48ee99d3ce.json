{"sha": "a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YjY1NzM5N2FhOWNkNGI4NWVmNjhjYzExYjVjZTQ4ZWU5OWQzY2U=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-31T06:14:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T22:29:11Z"}, "message": "Add str::split_chars_iter and str::splitn_chars_iter", "tree": {"sha": "72c266454af359fb602fcfbbf97a2b8445522172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c266454af359fb602fcfbbf97a2b8445522172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce", "html_url": "https://github.com/rust-lang/rust/commit/a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf14cb3a95a872e1973074ed0b915e873fddf41", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf14cb3a95a872e1973074ed0b915e873fddf41", "html_url": "https://github.com/rust-lang/rust/commit/ebf14cb3a95a872e1973074ed0b915e873fddf41"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "1c7fe1a9ced9e62ae204273cddd98e4795c5fbe2", "filename": "src/libcore/str.rs", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=a8b657397aa9cd4b85ef68cc11b5ce48ee99d3ce", "patch": "@@ -65,6 +65,8 @@ export\n    map,\n    bytes_iter,\n    chars_iter,\n+   split_chars_iter,\n+   splitn_chars_iter,\n    words_iter,\n    lines_iter,\n \n@@ -818,8 +820,6 @@ fn map(ss: str, ff: fn(char) -> char) -> str {\n Function: bytes_iter\n \n Iterate over the bytes in a string\n-\n-FIXME: Should it really include the last byte '\\0'?\n */\n fn bytes_iter(ss: str, it: fn(u8)) {\n     let pos = 0u;\n@@ -845,6 +845,28 @@ fn chars_iter(s: str, it: fn(char)) {\n     }\n }\n \n+/*\n+Function: split_chars_iter\n+\n+Apply a function to each substring after splitting\n+by character\n+*/\n+fn split_chars_iter(ss: str, cc: char, ff: fn(&&str)) {\n+   vec::iter(split_char(ss, cc), ff)\n+}\n+\n+/*\n+Function: splitn_chars_iter\n+\n+Apply a function to each substring after splitting\n+by character, up to nn times\n+\n+FIXME: make this use chars when splitn/splitn_char is fixed\n+*/\n+fn splitn_chars_iter(ss: str, sep: u8, count: uint, ff: fn(&&str)) {\n+   vec::iter(splitn(ss, sep, count), ff)\n+}\n+\n /*\n Function: words_iter\n \n@@ -863,9 +885,6 @@ fn lines_iter(ss: str, ff: fn(&&str)) {\n     vec::iter(lines(ss), ff)\n }\n \n-// FIXME: ADD split_char_iter\n-// FIXME: ADD splitn_char_iter\n-\n /*\n Section: Searching\n */\n@@ -1862,6 +1881,41 @@ mod tests {\n         bytes_iter(\"\") {|bb| assert bb == 0u8; }\n     }\n \n+    #[test]\n+    fn test_split_chars_iter() {\n+        let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n+\n+        let ii = 0;\n+\n+        split_chars_iter(data, ' ') {|xx|\n+            alt ii {\n+              0 { assert \"\\nMary\" == xx; }\n+              1 { assert \"had\"    == xx; }\n+              2 { assert \"a\"      == xx; }\n+              3 { assert \"little\" == xx; }\n+              _ { () }\n+            }\n+            ii += 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_splitn_chars_iter() {\n+        let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n+\n+        let ii = 0;\n+\n+        splitn_chars_iter(data, ' ' as u8, 2u) {|xx|\n+            alt ii {\n+              0 { assert \"\\nMary\" == xx; }\n+              1 { assert \"had\"    == xx; }\n+              2 { assert \"a little lamb\\nLittle lamb\\n\" == xx; }\n+              _ { () }\n+            }\n+            ii += 1;\n+        }\n+    }\n+\n     #[test]\n     fn test_words_iter() {\n         let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";"}]}