{"sha": "b7706e891d60f63d61a1a90e6c25521699c6e74e", "node_id": "C_kwDOAAsO6NoAKGI3NzA2ZTg5MWQ2MGY2M2Q2MWExYTkwZTZjMjU1MjE2OTljNmU3NGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-13T05:02:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-13T05:02:28Z"}, "message": "Rollup merge of #111885 - compiler-errors:rust-call-abi-sized, r=eholk\n\nDon't ICE on unsized `extern \"rust-call\"` call\n\nConceptually builds on #111864, but doesn't depend on it.", "tree": {"sha": "e0d7cf452929c1136be92929f85313ca90206522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d7cf452929c1136be92929f85313ca90206522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7706e891d60f63d61a1a90e6c25521699c6e74e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkh/hkCRBK7hj4Ov3rIwAAD5cIADy+jOjd/ZSUkacj7w6WPRg0\nWOk6Xd+q1J4jLfQPTl5mD70+1MD9vIgoyGPehb1565oR0hpGPlxwe8tthmyPeXJy\nO67Jyal1/eVAypm44L9olDogGLE5on986CpLdYVmp5cg9E1ErzSmYFqad0HfstQq\n/tkM7d0rPuIiWVaLoTT7B/9/HtOm6nGIDGUUk6nV7935Xi0KEzm/usU+RarmVpdh\nNAbJgpcFb/RZvukTQTWbYZYuYimgs3roe0beo4GoL+FqYCQeMEm4gJhH+FBFtoMW\nWNJYZCEs3XZFCtgtpmAOtFuLeh9at2PItyBWrlqTx1EGGBFm5zrNEn2R3B2nz5o=\n=tON6\n-----END PGP SIGNATURE-----\n", "payload": "tree e0d7cf452929c1136be92929f85313ca90206522\nparent 5e8c53f1f660236bd88bfe40145646104f265846\nparent b95ea45a60faac4219226d13f9c6c7fffd0b8cef\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686632548 +0200\ncommitter GitHub <noreply@github.com> 1686632548 +0200\n\nRollup merge of #111885 - compiler-errors:rust-call-abi-sized, r=eholk\n\nDon't ICE on unsized `extern \"rust-call\"` call\n\nConceptually builds on #111864, but doesn't depend on it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7706e891d60f63d61a1a90e6c25521699c6e74e", "html_url": "https://github.com/rust-lang/rust/commit/b7706e891d60f63d61a1a90e6c25521699c6e74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7706e891d60f63d61a1a90e6c25521699c6e74e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8c53f1f660236bd88bfe40145646104f265846", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c53f1f660236bd88bfe40145646104f265846", "html_url": "https://github.com/rust-lang/rust/commit/5e8c53f1f660236bd88bfe40145646104f265846"}, {"sha": "b95ea45a60faac4219226d13f9c6c7fffd0b8cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95ea45a60faac4219226d13f9c6c7fffd0b8cef", "html_url": "https://github.com/rust-lang/rust/commit/b95ea45a60faac4219226d13f9c6c7fffd0b8cef"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "4554d167080bd91573b10063a5275408dd4dbe28", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7706e891d60f63d61a1a90e6c25521699c6e74e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7706e891d60f63d61a1a90e6c25521699c6e74e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b7706e891d60f63d61a1a90e6c25521699c6e74e", "patch": "@@ -1449,14 +1449,20 @@ fn check_fn_or_method<'tcx>(\n         let span = tcx.def_span(def_id);\n         let has_implicit_self = hir_decl.implicit_self != hir::ImplicitSelfKind::None;\n         let mut inputs = sig.inputs().iter().skip(if has_implicit_self { 1 } else { 0 });\n-        // Check that the argument is a tuple\n+        // Check that the argument is a tuple and is sized\n         if let Some(ty) = inputs.next() {\n             wfcx.register_bound(\n                 ObligationCause::new(span, wfcx.body_def_id, ObligationCauseCode::RustCall),\n                 wfcx.param_env,\n                 *ty,\n                 tcx.require_lang_item(hir::LangItem::Tuple, Some(span)),\n             );\n+            wfcx.register_bound(\n+                ObligationCause::new(span, wfcx.body_def_id, ObligationCauseCode::RustCall),\n+                wfcx.param_env,\n+                *ty,\n+                tcx.require_lang_item(hir::LangItem::Sized, Some(span)),\n+            );\n         } else {\n             tcx.sess.span_err(\n                 hir_decl.inputs.last().map_or(span, |input| input.span),"}, {"sha": "9da72aae77660d10c6dde008c08efa62f8d69256", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7706e891d60f63d61a1a90e6c25521699c6e74e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7706e891d60f63d61a1a90e6c25521699c6e74e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=b7706e891d60f63d61a1a90e6c25521699c6e74e", "patch": "@@ -470,6 +470,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx.require_lang_item(hir::LangItem::Tuple, Some(sp)),\n                     traits::ObligationCause::new(sp, self.body_id, traits::RustCall),\n                 );\n+                self.require_type_is_sized(ty, sp, traits::RustCall);\n             } else {\n                 self.tcx.sess.span_err(\n                         sp,"}, {"sha": "5783383e93e3eb089c402f9931bab9292fd09e45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7706e891d60f63d61a1a90e6c25521699c6e74e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7706e891d60f63d61a1a90e6c25521699c6e74e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b7706e891d60f63d61a1a90e6c25521699c6e74e", "patch": "@@ -2663,9 +2663,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             | ObligationCauseCode::LetElse\n             | ObligationCauseCode::BinOp { .. }\n             | ObligationCauseCode::AscribeUserTypeProvePredicate(..)\n-            | ObligationCauseCode::RustCall\n             | ObligationCauseCode::DropImpl\n             | ObligationCauseCode::ConstParam(_) => {}\n+            ObligationCauseCode::RustCall => {\n+                if let Some(pred) = predicate.to_opt_poly_trait_pred()\n+                    && Some(pred.def_id()) == self.tcx.lang_items().sized_trait()\n+                {\n+                    err.note(\"argument required to be sized due to `extern \\\"rust-call\\\"` ABI\");\n+                }\n+            }\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "ff4075aa4c03cc329ffbebac93bed36d877d02c7", "filename": "tests/ui/unsized-locals/rust-call.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7706e891d60f63d61a1a90e6c25521699c6e74e/tests%2Fui%2Funsized-locals%2Frust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7706e891d60f63d61a1a90e6c25521699c6e74e/tests%2Fui%2Funsized-locals%2Frust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Frust-call.rs?ref=b7706e891d60f63d61a1a90e6c25521699c6e74e", "patch": "@@ -0,0 +1,12 @@\n+#![feature(unsized_tuple_coercion)]\n+#![feature(unboxed_closures)]\n+#![feature(unsized_fn_params)]\n+\n+fn bad() -> extern \"rust-call\" fn(([u8],)) { todo!() }\n+\n+fn main() {\n+    let f = bad();\n+    let slice: Box<([u8],)> = Box::new(([1; 8],));\n+    f(*slice);\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}"}, {"sha": "fff7ef75b3322b044ea6af7de13ad5c9f1895cb5", "filename": "tests/ui/unsized-locals/rust-call.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7706e891d60f63d61a1a90e6c25521699c6e74e/tests%2Fui%2Funsized-locals%2Frust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7706e891d60f63d61a1a90e6c25521699c6e74e/tests%2Fui%2Funsized-locals%2Frust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Frust-call.stderr?ref=b7706e891d60f63d61a1a90e6c25521699c6e74e", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/rust-call.rs:10:7\n+   |\n+LL |     f(*slice);\n+   |       ^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `([u8],)`, the trait `Sized` is not implemented for `[u8]`\n+   = note: required because it appears within the type `([u8],)`\n+   = note: argument required to be sized due to `extern \"rust-call\"` ABI\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}