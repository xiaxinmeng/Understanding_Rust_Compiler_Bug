{"sha": "ad11856431ea3c0808951eed9fcbefbd82590ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTE4NTY0MzFlYTNjMDgwODk1MWVlZDlmY2JlZmJkODI1OTBlZjI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T07:56:41Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Fiddle a `HasDataLayout` through the allocation methods", "tree": {"sha": "fb3b2dc86c4483ec7f18ad8403385bf6785d71b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3b2dc86c4483ec7f18ad8403385bf6785d71b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad11856431ea3c0808951eed9fcbefbd82590ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad11856431ea3c0808951eed9fcbefbd82590ef2", "html_url": "https://github.com/rust-lang/rust/commit/ad11856431ea3c0808951eed9fcbefbd82590ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad11856431ea3c0808951eed9fcbefbd82590ef2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04210f3e169b31613f70e5de9550a4f46039e7bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/04210f3e169b31613f70e5de9550a4f46039e7bc", "html_url": "https://github.com/rust-lang/rust/commit/04210f3e169b31613f70e5de9550a4f46039e7bc"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "1856232573c2a449b1cf1209d9de366d1a736ec6", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ad11856431ea3c0808951eed9fcbefbd82590ef2/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad11856431ea3c0808951eed9fcbefbd82590ef2/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=ad11856431ea3c0808951eed9fcbefbd82590ef2", "patch": "@@ -18,6 +18,7 @@ use std::iter;\n use mir;\n use std::ops::{Deref, DerefMut};\n use rustc_data_structures::sorted_map::SortedMap;\n+use rustc_target::abi::HasDataLayout;\n \n /// Used by `check_bounds` to indicate whether the pointer needs to be just inbounds\n /// or also inbounds of a *live* allocation.\n@@ -76,16 +77,17 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     #[inline(always)]\n     pub fn check_bounds(\n         &self,\n+        cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n         // if ptr.offset is in bounds, then so is ptr (because offset checks for overflow)\n-        self.check_bounds_ptr(ptr.offset(size, &*self)?)\n+        self.check_bounds_ptr(ptr.offset(size, cx)?)\n     }\n }\n \n /// Byte accessors\n-impl<'tcx, Tag, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n+impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// The last argument controls whether we error out when there are undefined\n     /// or pointer bytes.  You should never call this, call `get_bytes` or\n     /// `get_bytes_with_undef_and_ptr` instead,\n@@ -95,21 +97,22 @@ impl<'tcx, Tag, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// on that.\n     fn get_bytes_internal(\n         &self,\n+        cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n         align: Align,\n         check_defined_and_ptr: bool,\n     ) -> EvalResult<'tcx, &[u8]> {\n         assert_ne!(size.bytes(), 0, \"0-sized accesses should never even get a `Pointer`\");\n         self.check_align(ptr.into(), align)?;\n-        self.check_bounds(ptr, size, InboundsCheck::Live)?;\n+        self.check_bounds(cx, ptr, size)?;\n \n         if check_defined_and_ptr {\n             self.check_defined(ptr, size)?;\n-            self.check_relocations(ptr, size)?;\n+            self.check_relocations(cx, ptr, size)?;\n         } else {\n             // We still don't want relocations on the *edges*\n-            self.check_relocation_edges(ptr, size)?;\n+            self.check_relocation_edges(cx, ptr, size)?;\n         }\n \n         AllocationExtra::memory_read(self, ptr, size)?;\n@@ -123,39 +126,42 @@ impl<'tcx, Tag, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     #[inline]\n     fn get_bytes(\n         &self,\n+        cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n         align: Align\n     ) -> EvalResult<'tcx, &[u8]> {\n-        self.get_bytes_internal(ptr, size, align, true)\n+        self.get_bytes_internal(cx, ptr, size, align, true)\n     }\n \n     /// It is the caller's responsibility to handle undefined and pointer bytes.\n     /// However, this still checks that there are no relocations on the *edges*.\n     #[inline]\n     fn get_bytes_with_undef_and_ptr(\n         &self,\n+        cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n         align: Align\n     ) -> EvalResult<'tcx, &[u8]> {\n-        self.get_bytes_internal(ptr, size, align, false)\n+        self.get_bytes_internal(cx, ptr, size, align, false)\n     }\n \n     /// Just calling this already marks everything as defined and removes relocations,\n     /// so be sure to actually put data there!\n     fn get_bytes_mut(\n         &mut self,\n+        cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n         align: Align,\n     ) -> EvalResult<'tcx, &mut [u8]> {\n         assert_ne!(size.bytes(), 0, \"0-sized accesses should never even get a `Pointer`\");\n         self.check_align(ptr.into(), align)?;\n-        self.check_bounds(ptr, size, InboundsCheck::Live)?;\n+        self.check_bounds(cx, ptr, size)?;\n \n         self.mark_definedness(ptr, size, true)?;\n-        self.clear_relocations(ptr, size)?;\n+        self.clear_relocations(cx, ptr, size)?;\n \n         AllocationExtra::memory_written(self, ptr, size)?;\n \n@@ -167,24 +173,30 @@ impl<'tcx, Tag, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n }\n \n /// Relocations\n-impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n+impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Return all relocations overlapping with the given ptr-offset pair.\n     fn relocations(\n         &self,\n+        cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> EvalResult<'tcx, &[(Size, (Tag, AllocId))]> {\n         // We have to go back `pointer_size - 1` bytes, as that one would still overlap with\n         // the beginning of this range.\n-        let start = ptr.offset.bytes().saturating_sub(self.pointer_size().bytes() - 1);\n+        let start = ptr.offset.bytes().saturating_sub(cx.data_layout().pointer_size.bytes() - 1);\n         let end = ptr.offset + size; // this does overflow checking\n         Ok(self.relocations.range(Size::from_bytes(start)..end))\n     }\n \n     /// Check that there ar eno relocations overlapping with the given range.\n     #[inline(always)]\n-    fn check_relocations(&self, ptr: Pointer<Tag>, size: Size) -> EvalResult<'tcx> {\n-        if self.relocations(ptr, size)?.len() != 0 {\n+    fn check_relocations(\n+        &self,\n+        cx: &impl HasDataLayout,\n+        ptr: Pointer<Tag>,\n+        size: Size,\n+    ) -> EvalResult<'tcx> {\n+        if self.relocations(cx, ptr, size)?.len() != 0 {\n             err!(ReadPointerAsBytes)\n         } else {\n             Ok(())\n@@ -197,17 +209,22 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     /// uninitialized.  This is a somewhat odd \"spooky action at a distance\",\n     /// but it allows strictly more code to run than if we would just error\n     /// immediately in that case.\n-    fn clear_relocations(&mut self, ptr: Pointer<Tag>, size: Size) -> EvalResult<'tcx> {\n+    fn clear_relocations(\n+        &mut self,\n+        cx: &impl HasDataLayout,\n+        ptr: Pointer<Tag>,\n+        size: Size,\n+    ) -> EvalResult<'tcx> {\n         // Find the start and end of the given range and its outermost relocations.\n         let (first, last) = {\n             // Find all relocations overlapping the given range.\n-            let relocations = self.relocations(ptr, size)?;\n+            let relocations = self.relocations(cx, ptr, size)?;\n             if relocations.is_empty() {\n                 return Ok(());\n             }\n \n             (relocations.first().unwrap().0,\n-             relocations.last().unwrap().0 + self.pointer_size())\n+             relocations.last().unwrap().0 + cx.data_layout().pointer_size)\n         };\n         let start = ptr.offset;\n         let end = start + size;\n@@ -230,9 +247,14 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     /// Error if there are relocations overlapping with the edges of the\n     /// given memory range.\n     #[inline]\n-    fn check_relocation_edges(&self, ptr: Pointer<Tag>, size: Size) -> EvalResult<'tcx> {\n-        self.check_relocations(ptr, Size::ZERO)?;\n-        self.check_relocations(ptr.offset(size, self)?, Size::ZERO)?;\n+    fn check_relocation_edges(\n+        &self,\n+        cx: &impl HasDataLayout,\n+        ptr: Pointer<Tag>,\n+        size: Size,\n+    ) -> EvalResult<'tcx> {\n+        self.check_relocations(cx, ptr, Size::ZERO)?;\n+        self.check_relocations(cx, ptr.offset(size, cx)?, Size::ZERO)?;\n         Ok(())\n     }\n }"}]}