{"sha": "7e44078e9a12179b17a357da7e06c353036f68b9", "node_id": "C_kwDOAAsO6NoAKDdlNDQwNzhlOWExMjE3OWIxN2EzNTdkYTdlMDZjMzUzMDM2ZjY4Yjk", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-07T20:22:52Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:06Z"}, "message": "update comments about visitor strategy\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "fa1f284144f390f425cf343eaf8c90598aec02d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1f284144f390f425cf343eaf8c90598aec02d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e44078e9a12179b17a357da7e06c353036f68b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e44078e9a12179b17a357da7e06c353036f68b9", "html_url": "https://github.com/rust-lang/rust/commit/7e44078e9a12179b17a357da7e06c353036f68b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e44078e9a12179b17a357da7e06c353036f68b9/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93616dd5396ecd0fe0f48badc60157f74840d19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/93616dd5396ecd0fe0f48badc60157f74840d19c", "html_url": "https://github.com/rust-lang/rust/commit/93616dd5396ecd0fe0f48badc60157f74840d19c"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "338b654a391a2b1ac7395a4a77b2df594377fcd7", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7e44078e9a12179b17a357da7e06c353036f68b9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e44078e9a12179b17a357da7e06c353036f68b9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7e44078e9a12179b17a357da7e06c353036f68b9", "patch": "@@ -1,7 +1,40 @@\n //! HIR walker for walking the contents of nodes.\n //!\n-//! **For an overview of the visitor strategy, see the docs on the\n-//! `super::itemlikevisit::ItemLikeVisitor` trait.**\n+//! Here are the three available patterns for the visitor strategy,\n+//! in roughly the order of desirability:\n+//!\n+//! 1. **Shallow visit**: Get a simple callback for every item (or item-like thing) in the HIR.\n+//!    - Example: find all items with a `#[foo]` attribute on them.\n+//!    - How: Use the `hir_crate_items` or `hir_module_items` query to traverse over item-like ids\n+//!       (ItemId, TraitItemId, etc.) and use tcx.def_kind and `tcx.hir().item*(id)` to filter and\n+//!       access actual item-like thing, respectively.\n+//!    - Pro: Efficient; just walks the lists of item ids and gives users control whether to access\n+//!       the hir_owners themselves or not.\n+//!    - Con: Don't get information about nesting\n+//!    - Con: Don't have methods for specific bits of HIR, like \"on\n+//!      every expr, do this\".\n+//! 2. **Deep visit**: Want to scan for specific kinds of HIR nodes within\n+//!    an item, but don't care about how item-like things are nested\n+//!    within one another.\n+//!    - Example: Examine each expression to look for its type and do some check or other.\n+//!    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n+//!      `nested_filter::OnlyBodies` (and implement `nested_visit_map`), and use\n+//!      `tcx.hir().visit_all_item_likes(&mut visitor)`. Within your\n+//!      `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget to invoke\n+//!      `intravisit::walk_expr()` to keep walking the subparts).\n+//!    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n+//!    - Pro: Integrates well into dependency tracking.\n+//!    - Con: Don't get information about nesting between items\n+//! 3. **Nested visit**: Want to visit the whole HIR and you care about the nesting between\n+//!    item-like things.\n+//!    - Example: Lifetime resolution, which wants to bring lifetimes declared on the\n+//!      impl into scope while visiting the impl-items, and then back out again.\n+//!    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n+//!      `nested_filter::All` (and implement `nested_visit_map`). Walk your crate with\n+//!      `tcx.hir().walk_toplevel_module(visitor)` invoked on `tcx.hir().krate()`.\n+//!    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n+//!    - Pro: Preserves nesting information\n+//!    - Con: Does not integrate well into dependency tracking.\n //!\n //! If you have decided to use this visitor, here are some general\n //! notes on how to do so:"}]}