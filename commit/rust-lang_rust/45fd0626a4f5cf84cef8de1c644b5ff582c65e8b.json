{"sha": "45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmQwNjI2YTRmNWNmODRjZWY4ZGUxYzY0NGI1ZmY1ODJjNjVlOGI=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-29T03:21:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-29T03:21:51Z"}, "message": "Rollup merge of #36760 - nrc:input2, r=alexcrichton\n\nAllow supplying an error destination via the compiler driver\n\nAllows replacing stderr with a buffer from the client.\n\nAlso, some refactoring around run_compiler.", "tree": {"sha": "274939aec1bffabcc86ceafee1668d0d9e8b17e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274939aec1bffabcc86ceafee1668d0d9e8b17e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "html_url": "https://github.com/rust-lang/rust/commit/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f2c0005066682a341673172983924ae189b25d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2c0005066682a341673172983924ae189b25d5", "html_url": "https://github.com/rust-lang/rust/commit/8f2c0005066682a341673172983924ae189b25d5"}, {"sha": "e8a4db25acde9d2d23a4ebfb464d283d495b5b8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a4db25acde9d2d23a4ebfb464d283d495b5b8d", "html_url": "https://github.com/rust-lang/rust/commit/e8a4db25acde9d2d23a4ebfb464d283d495b5b8d"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "53e1dcc55334d94fc4c27cb5bde643ed42747775", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "patch": "@@ -42,6 +42,7 @@ use std::cell::{self, Cell, RefCell};\n use std::collections::HashMap;\n use std::env;\n use std::ffi::CString;\n+use std::io::Write;\n use std::rc::Rc;\n use std::fmt;\n use std::time::Duration;\n@@ -449,15 +450,17 @@ pub fn build_session(sopts: config::Options,\n                                local_crate_source_file,\n                                registry,\n                                cstore,\n-                               Rc::new(codemap::CodeMap::new()))\n+                               Rc::new(codemap::CodeMap::new()),\n+                               None)\n }\n \n pub fn build_session_with_codemap(sopts: config::Options,\n                                   dep_graph: &DepGraph,\n                                   local_crate_source_file: Option<PathBuf>,\n                                   registry: errors::registry::Registry,\n                                   cstore: Rc<for<'a> CrateStore<'a>>,\n-                                  codemap: Rc<codemap::CodeMap>)\n+                                  codemap: Rc<codemap::CodeMap>,\n+                                  emitter_dest: Option<Box<Write + Send>>)\n                                   -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -470,14 +473,21 @@ pub fn build_session_with_codemap(sopts: config::Options,\n         .unwrap_or(true);\n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n \n-    let emitter: Box<Emitter> = match sopts.error_format {\n-        config::ErrorOutputType::HumanReadable(color_config) => {\n+    let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n+        (config::ErrorOutputType::HumanReadable(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config,\n                                            Some(codemap.clone())))\n         }\n-        config::ErrorOutputType::Json => {\n+        (config::ErrorOutputType::HumanReadable(_), Some(dst)) => {\n+            Box::new(EmitterWriter::new(dst,\n+                                        Some(codemap.clone())))\n+        }\n+        (config::ErrorOutputType::Json, None) => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone()))\n         }\n+        (config::ErrorOutputType::Json, Some(dst)) => {\n+            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone()))\n+        }\n     };\n \n     let diagnostic_handler ="}, {"sha": "5ac4512fe39004d72386822c36351e960b1d8800", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "patch": "@@ -74,6 +74,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::session::config::nightly_options;\n+use rustc::session::early_error;\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc_metadata::loader;\n@@ -93,8 +94,6 @@ use std::str;\n use std::sync::{Arc, Mutex};\n use std::thread;\n \n-use rustc::session::early_error;\n-\n use syntax::{ast, json};\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n@@ -131,17 +130,18 @@ pub fn abort_on_err<T>(result: Result<T, usize>, sess: &Session) -> T {\n     }\n }\n \n-pub fn run(args: Vec<String>) -> isize {\n+pub fn run<F>(run_compiler: F) -> isize\n+    where F: FnOnce() -> (CompileResult, Option<Session>) + Send + 'static\n+{\n     monitor(move || {\n-        let (result, session) = run_compiler(&args, &mut RustcDefaultCalls);\n+        let (result, session) = run_compiler();\n         if let Err(err_count) = result {\n             if err_count > 0 {\n                 match session {\n                     Some(sess) => sess.fatal(&abort_msg(err_count)),\n                     None => {\n                         let emitter =\n-                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n-                                                                   None);\n+                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto, None);\n                         let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n                         handler.emit(&MultiSpan::new(),\n                                      &abort_msg(err_count),\n@@ -155,20 +155,15 @@ pub fn run(args: Vec<String>) -> isize {\n     0\n }\n \n-pub fn run_compiler<'a>(args: &[String],\n-                        callbacks: &mut CompilerCalls<'a>)\n-                        -> (CompileResult, Option<Session>) {\n-    run_compiler_with_file_loader(args, callbacks, box RealFileLoader)\n-}\n-\n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n-pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n-                                            callbacks: &mut CompilerCalls<'a>,\n-                                            loader: Box<L>)\n-                                            -> (CompileResult, Option<Session>)\n-    where L: FileLoader + 'static {\n+pub fn run_compiler<'a>(args: &[String],\n+                        callbacks: &mut CompilerCalls<'a>,\n+                        file_loader: Option<Box<FileLoader + 'static>>,\n+                        emitter_dest: Option<Box<Write + Send>>)\n+                        -> (CompileResult, Option<Session>)\n+{\n     macro_rules! do_or_return {($expr: expr, $sess: expr) => {\n         match $expr {\n             Compilation::Stop => return (Ok(()), $sess),\n@@ -207,13 +202,16 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n \n     let dep_graph = DepGraph::new(sopts.build_dep_graph());\n     let cstore = Rc::new(CStore::new(&dep_graph));\n+\n+    let loader = file_loader.unwrap_or(box RealFileLoader);\n     let codemap = Rc::new(CodeMap::with_file_loader(loader));\n     let sess = session::build_session_with_codemap(sopts,\n                                                    &dep_graph,\n                                                    input_file_path,\n                                                    descriptions,\n                                                    cstore.clone(),\n-                                                   codemap);\n+                                                   codemap,\n+                                                   emitter_dest);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let mut cfg = config::build_configuration(&sess, cfg);\n     target_features::add_configuration(&mut cfg, &sess);\n@@ -1144,6 +1142,9 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n }\n \n pub fn main() {\n-    let result = run(env::args().collect());\n+    let result = run(|| run_compiler(&env::args().collect::<Vec<_>>(),\n+                                     &mut RustcDefaultCalls,\n+                                     None,\n+                                     None));\n     process::exit(result as i32);\n }"}, {"sha": "1d7ff45b3b8a04820b0255199abb580b6865a1ea", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "patch": "@@ -99,8 +99,10 @@ impl EmitterWriter {\n     pub fn new(dst: Box<Write + Send>,\n                code_map: Option<Rc<CodeMapper>>)\n                -> EmitterWriter {\n-        EmitterWriter { dst: Raw(dst),\n-                        cm: code_map}\n+        EmitterWriter {\n+            dst: Raw(dst),\n+            cm: code_map,\n+        }\n     }\n \n     fn preprocess_annotations(&self, msp: &MultiSpan) -> Vec<FileWithAnnotatedLines> {"}, {"sha": "a1c273baeea42b67e09e6c8814915a8b56388e37", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "patch": "@@ -38,14 +38,24 @@ pub struct JsonEmitter {\n }\n \n impl JsonEmitter {\n+    pub fn stderr(registry: Option<Registry>,\n+                  code_map: Rc<CodeMap>) -> JsonEmitter {\n+        JsonEmitter {\n+            dst: Box::new(io::stderr()),\n+            registry: registry,\n+            cm: code_map,\n+        }\n+    }\n+\n     pub fn basic() -> JsonEmitter {\n         JsonEmitter::stderr(None, Rc::new(CodeMap::new()))\n     }\n \n-    pub fn stderr(registry: Option<Registry>,\n-                  code_map: Rc<CodeMap>) -> JsonEmitter {\n+    pub fn new(dst: Box<Write + Send>,\n+               registry: Option<Registry>,\n+               code_map: Rc<CodeMap>) -> JsonEmitter {\n         JsonEmitter {\n-            dst: Box::new(io::stderr()),\n+            dst: dst,\n             registry: registry,\n             cm: code_map,\n         }"}, {"sha": "05c1713561a3ed6678be479569a17aa05d80f982", "filename": "src/test/run-make/llvm-phase/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-phase%2Ftest.rs?ref=45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "patch": "@@ -79,8 +79,8 @@ fn main() {\n         format!(\"_ _ --sysroot {} --crate-type dylib\", path.to_str().unwrap())\n         .split(' ').map(|s| s.to_string()).collect();\n \n-    let (result, _) = rustc_driver::run_compiler_with_file_loader(\n-        &args, &mut JitCalls, box JitLoader);\n+    let (result, _) = rustc_driver::run_compiler(\n+        &args, &mut JitCalls, Some(box JitLoader), None);\n     if let Err(n) = result {\n         panic!(\"Error {}\", n);\n     }"}, {"sha": "35e9f3f5c8d64f2968f5c4320629976f6666a238", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd0626a4f5cf84cef8de1c644b5ff582c65e8b/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=45fd0626a4f5cf84cef8de1c644b5ff582c65e8b", "patch": "@@ -86,6 +86,6 @@ fn main() {\n     let mut tc = TestCalls { count: 1 };\n     // we should never get use this filename, but lets make sure they are valid args.\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-    rustc_driver::run_compiler(&args, &mut tc);\n+    rustc_driver::run_compiler(&args, &mut tc, None, None);\n     assert_eq!(tc.count, 30);\n }"}]}