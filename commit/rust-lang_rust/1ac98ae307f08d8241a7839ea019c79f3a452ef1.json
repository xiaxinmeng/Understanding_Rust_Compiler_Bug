{"sha": "1ac98ae307f08d8241a7839ea019c79f3a452ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYzk4YWUzMDdmMDhkODI0MWE3ODM5ZWEwMTljNzlmM2E0NTJlZjE=", "commit": {"author": {"name": "Collin J. Sutton", "email": "collin.sutton@gmail.com", "date": "2017-07-17T18:08:55Z"}, "committer": {"name": "Collin J. Sutton", "email": "collin.sutton@gmail.com", "date": "2017-07-17T18:17:38Z"}, "message": "`std::time::Duration`: improve _precision_ of terminology in docs\n\nChanged wording of docs on `std::time::Duration` for better clarity\nw.r.t. the contents of the type and the purpose of its methods.", "tree": {"sha": "79b68b2f76589e0b001cd60b9ac535623138d886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b68b2f76589e0b001cd60b9ac535623138d886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac98ae307f08d8241a7839ea019c79f3a452ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac98ae307f08d8241a7839ea019c79f3a452ef1", "html_url": "https://github.com/rust-lang/rust/commit/1ac98ae307f08d8241a7839ea019c79f3a452ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac98ae307f08d8241a7839ea019c79f3a452ef1/comments", "author": {"login": "insaneinside", "id": 4030926, "node_id": "MDQ6VXNlcjQwMzA5MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4030926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insaneinside", "html_url": "https://github.com/insaneinside", "followers_url": "https://api.github.com/users/insaneinside/followers", "following_url": "https://api.github.com/users/insaneinside/following{/other_user}", "gists_url": "https://api.github.com/users/insaneinside/gists{/gist_id}", "starred_url": "https://api.github.com/users/insaneinside/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insaneinside/subscriptions", "organizations_url": "https://api.github.com/users/insaneinside/orgs", "repos_url": "https://api.github.com/users/insaneinside/repos", "events_url": "https://api.github.com/users/insaneinside/events{/privacy}", "received_events_url": "https://api.github.com/users/insaneinside/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insaneinside", "id": 4030926, "node_id": "MDQ6VXNlcjQwMzA5MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4030926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insaneinside", "html_url": "https://github.com/insaneinside", "followers_url": "https://api.github.com/users/insaneinside/followers", "following_url": "https://api.github.com/users/insaneinside/following{/other_user}", "gists_url": "https://api.github.com/users/insaneinside/gists{/gist_id}", "starred_url": "https://api.github.com/users/insaneinside/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insaneinside/subscriptions", "organizations_url": "https://api.github.com/users/insaneinside/orgs", "repos_url": "https://api.github.com/users/insaneinside/repos", "events_url": "https://api.github.com/users/insaneinside/events{/privacy}", "received_events_url": "https://api.github.com/users/insaneinside/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028569ab1b339bcc00814e1c7fb71a5cea5ccb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/028569ab1b339bcc00814e1c7fb71a5cea5ccb0f", "html_url": "https://github.com/rust-lang/rust/commit/028569ab1b339bcc00814e1c7fb71a5cea5ccb0f"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "48819adb23e2ea03c2f5c194b176be1dd9e59846", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ac98ae307f08d8241a7839ea019c79f3a452ef1/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac98ae307f08d8241a7839ea019c79f3a452ef1/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=1ac98ae307f08d8241a7839ea019c79f3a452ef1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,9 +18,10 @@ const MILLIS_PER_SEC: u64 = 1_000;\n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n ///\n-/// Each `Duration` is composed of a number of seconds and nanosecond precision.\n-/// APIs binding a system timeout will typically round up the nanosecond\n-/// precision if the underlying system does not support that level of precision.\n+/// Each `Duration` is composed of a whole number of seconds and a fractional part\n+/// represented in nanoseconds.  If the underlying system does not support\n+/// nanosecond-level precision, APIs binding a system timeout will typically round up\n+/// the number of nanoseconds.\n ///\n /// `Duration`s implement many common traits, including [`Add`], [`Sub`], and other\n /// [`ops`] traits.\n@@ -50,11 +51,11 @@ pub struct Duration {\n }\n \n impl Duration {\n-    /// Creates a new `Duration` from the specified number of seconds and\n-    /// additional nanosecond precision.\n+    /// Creates a new `Duration` from the specified number of whole seconds and\n+    /// additional nanoseconds.\n     ///\n-    /// If the nanoseconds is greater than 1 billion (the number of nanoseconds\n-    /// in a second), then it will carry over into the seconds provided.\n+    /// If the number of nanoseconds is greater than 1 billion (the number of\n+    /// nanoseconds in a second), then it will carry over into the seconds provided.\n     ///\n     /// # Panics\n     ///\n@@ -77,7 +78,7 @@ impl Duration {\n         Duration { secs: secs, nanos: nanos }\n     }\n \n-    /// Creates a new `Duration` from the specified number of seconds.\n+    /// Creates a new `Duration` from the specified number of whole seconds.\n     ///\n     /// # Examples\n     ///\n@@ -115,10 +116,10 @@ impl Duration {\n         Duration { secs: secs, nanos: nanos }\n     }\n \n-    /// Returns the number of whole seconds represented by this `Duration`.\n+    /// Returns the number of _whole_ seconds contained by this `Duration`.\n     ///\n-    /// The extra precision represented by this duration is ignored (i.e. extra\n-    /// nanoseconds are not represented in the returned value).\n+    /// The returned value does not include the fractional (nanosecond) part of the\n+    /// duration, which can be obtained using [`subsec_nanos`].\n     ///\n     /// # Examples\n     ///\n@@ -147,7 +148,7 @@ impl Duration {\n     #[inline]\n     pub fn as_secs(&self) -> u64 { self.secs }\n \n-    /// Returns the nanosecond precision represented by this `Duration`.\n+    /// Returns the fractional part of this `Duration`, in nanoseconds.\n     ///\n     /// This method does **not** return the length of the duration when\n     /// represented by nanoseconds. The returned number always represents a\n@@ -159,7 +160,8 @@ impl Duration {\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::from_millis(5010);\n-    /// assert_eq!(duration.subsec_nanos(), 10000000);\n+    /// assert_eq!(duration.as_secs(), 5);\n+    /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]"}]}