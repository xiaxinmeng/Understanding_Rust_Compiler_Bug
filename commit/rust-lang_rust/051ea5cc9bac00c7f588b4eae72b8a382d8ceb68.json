{"sha": "051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MWVhNWNjOWJhYzAwYzdmNTg4YjRlYWU3MmI4YTM4MmQ4Y2ViNjg=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-14T22:11:29Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-15T18:49:50Z"}, "message": "[improper_ctypes] Don't suggest raw pointers when encountering trait objects\n\nIt's unhelpful since raw pointers to trait objects are also FFI-unsafe and casting to a thin raw pointer loses the vtable. There are working solutions that _involve_ raw pointers but they're too complex to explain in one line and have serious trade offs.", "tree": {"sha": "a3011f11a8464e418db327a0513ef8dbaece16fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3011f11a8464e418db327a0513ef8dbaece16fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "html_url": "https://github.com/rust-lang/rust/commit/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68/comments", "author": null, "committer": null, "parents": [{"sha": "9d493c897b4382dc145b9448b3fafdfbbaecf528", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d493c897b4382dc145b9448b3fafdfbbaecf528", "html_url": "https://github.com/rust-lang/rust/commit/9d493c897b4382dc145b9448b3fafdfbbaecf528"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "ef9b3d38c637cc509cb1a74512b4e32096ba52e9", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "patch": "@@ -577,7 +577,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::TyDynamic(..) => FfiUnsafe {\n                 ty: ty,\n                 reason: \"trait objects have no C equivalent\",\n-                help: Some(\"consider using a raw pointer instead\"),\n+                help: None,\n             },\n \n             ty::TyStr => FfiUnsafe {"}, {"sha": "748c311055fa93df6df287aa79186429fd3e7f3f", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "patch": "@@ -78,8 +78,6 @@ error: `extern` block uses type `std::clone::Clone` which is not FFI-safe: trait\n    |\n 62 |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n    |                          ^^^^^^\n-   |\n-   = help: consider using a raw pointer instead\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n   --> $DIR/lint-ctypes.rs:63:26"}]}