{"sha": "e57884b6e96bede12447e21edcdc92fcac59ee46", "node_id": "C_kwDOAAsO6NoAKGU1Nzg4NGI2ZTk2YmVkZTEyNDQ3ZTIxZWRjZGM5MmZjYWM1OWVlNDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T23:11:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T23:11:12Z"}, "message": "Auto merge of #95824 - zx2c4-forks:grnd_insecure, r=thomcc\n\nUse GRND_INSECURE instead of /dev/urandom when possible\n\nFrom reading the source code, it appears like the desired semantic of\nstd::unix::rand is to always provide some bytes and never block. For\nthat reason GRND_NONBLOCK is checked before calling getrandom(0), so\nthat getrandom(0) won't block. If it would block, then the function\nfalls back to using /dev/urandom, which for the time being doesn't\nblock. There are some drawbacks to using /dev/urandom, however, and so\ngetrandom(GRND_INSECURE) was created as a replacement for this exact\ncircumstance.\n\ngetrandom(GRND_INSECURE) is the same as /dev/urandom, except:\n\n- It won't leave a warning in dmesg if used at early boot time, which is\n  a common occurance (and the reason why I found this issue);\n\n- It won't introduce a tiny delay at early boot on newer kernels when\n  /dev/urandom tries to opportunistically create jitter entropy;\n\n- It only requires 1 syscall, rather than 3.\n\nOther than that, it returns the same \"quality\" of randomness as\n/dev/urandom, and never blocks.\n\nIt's only available on kernels \u22655.6, so we try to use it, cache the\nresult of that attempt, and fall back to to the previous code if it\ndidn't work.", "tree": {"sha": "6a3124d7819e7ff58a024337a72d8246e078b6bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3124d7819e7ff58a024337a72d8246e078b6bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57884b6e96bede12447e21edcdc92fcac59ee46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57884b6e96bede12447e21edcdc92fcac59ee46", "html_url": "https://github.com/rust-lang/rust/commit/e57884b6e96bede12447e21edcdc92fcac59ee46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57884b6e96bede12447e21edcdc92fcac59ee46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a4afc3af2d2a53f91fc8a77bdfe94bea375b29", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a4afc3af2d2a53f91fc8a77bdfe94bea375b29", "html_url": "https://github.com/rust-lang/rust/commit/e6a4afc3af2d2a53f91fc8a77bdfe94bea375b29"}, {"sha": "18a9d58266dfb86a3e3e6b53a42798dd4348d93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a9d58266dfb86a3e3e6b53a42798dd4348d93b", "html_url": "https://github.com/rust-lang/rust/commit/18a9d58266dfb86a3e3e6b53a42798dd4348d93b"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "21902888e881464e4692783aef64f7d5f3770b60", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57884b6e96bede12447e21edcdc92fcac59ee46/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e57884b6e96bede12447e21edcdc92fcac59ee46/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e57884b6e96bede12447e21edcdc92fcac59ee46", "patch": "@@ -2064,9 +2064,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.125\"\n+version = \"0.2.126\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5916d2ae698f6de9bfb891ad7a8d65c09d232dc58cc4ac433c7da3b2fd84bc2b\"\n+checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "95506fc1eb9c84404e9eb4ba9409d7315a21f62f", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e57884b6e96bede12447e21edcdc92fcac59ee46/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e57884b6e96bede12447e21edcdc92fcac59ee46/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=e57884b6e96bede12447e21edcdc92fcac59ee46", "patch": "@@ -15,7 +15,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.125\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.126\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.71\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "ea6df7247137c3e8ec58e744d42d1bf10893d144", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e57884b6e96bede12447e21edcdc92fcac59ee46/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57884b6e96bede12447e21edcdc92fcac59ee46/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=e57884b6e96bede12447e21edcdc92fcac59ee46", "patch": "@@ -30,6 +30,9 @@ mod imp {\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n+        use crate::sync::atomic::{AtomicBool, Ordering};\n+        use crate::sys::os::errno;\n+\n         // A weak symbol allows interposition, e.g. for perf measurements that want to\n         // disable randomness for consistency. Otherwise, we'll try a raw syscall.\n         // (`getrandom` was added in glibc 2.25, musl 1.1.20, android API level 28)\n@@ -41,6 +44,18 @@ mod imp {\n             ) -> libc::ssize_t\n         }\n \n+        // This provides the best quality random numbers available at the given moment\n+        // without ever blocking, and is preferable to falling back to /dev/urandom.\n+        static GRND_INSECURE_AVAILABLE: AtomicBool = AtomicBool::new(true);\n+        if GRND_INSECURE_AVAILABLE.load(Ordering::Relaxed) {\n+            let ret = unsafe { getrandom(buf.as_mut_ptr().cast(), buf.len(), libc::GRND_INSECURE) };\n+            if ret == -1 && errno() as libc::c_int == libc::EINVAL {\n+                GRND_INSECURE_AVAILABLE.store(false, Ordering::Relaxed);\n+            } else {\n+                return ret;\n+            }\n+        }\n+\n         unsafe { getrandom(buf.as_mut_ptr().cast(), buf.len(), libc::GRND_NONBLOCK) }\n     }\n "}]}