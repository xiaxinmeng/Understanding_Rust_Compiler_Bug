{"sha": "e97505704e2043df46c99c3cbd0dd1ce3938c123", "node_id": "C_kwDOAAsO6NoAKGU5NzUwNTcwNGUyMDQzZGY0NmM5OWMzY2JkMGRkMWNlMzkzOGMxMjM", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-12T23:30:51Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-12T23:30:51Z"}, "message": "Clarify the text of some comments", "tree": {"sha": "4ee5ffc04f93e174b029666bc1f0be9ee272d8de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee5ffc04f93e174b029666bc1f0be9ee272d8de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97505704e2043df46c99c3cbd0dd1ce3938c123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97505704e2043df46c99c3cbd0dd1ce3938c123", "html_url": "https://github.com/rust-lang/rust/commit/e97505704e2043df46c99c3cbd0dd1ce3938c123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97505704e2043df46c99c3cbd0dd1ce3938c123/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a57c195519d1e3e1f2f84b5793b2449f6c1625", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a57c195519d1e3e1f2f84b5793b2449f6c1625", "html_url": "https://github.com/rust-lang/rust/commit/f6a57c195519d1e3e1f2f84b5793b2449f6c1625"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "0f2475a8bdea60435df0e26d2a04c8a68b019e5f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e97505704e2043df46c99c3cbd0dd1ce3938c123/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97505704e2043df46c99c3cbd0dd1ce3938c123/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=e97505704e2043df46c99c3cbd0dd1ce3938c123", "patch": "@@ -745,6 +745,9 @@ impl<T> Option<T> {\n     /// It's guaranteed to be a multiple of alignment (so will always give a\n     /// correctly-aligned location) and to be within the allocated object, so\n     /// is valid to use with `offset` and to use for a zero-sized read.\n+    ///\n+    /// FIXME: This is a horrible hack, but allows a nice optimization.  It should\n+    /// be replaced with `offset_of!` once that works on enum variants.\n     const SOME_BYTE_OFFSET_GUESS: isize = {\n         let some_uninit = Some(mem::MaybeUninit::<T>::uninit());\n         let payload_ref = some_uninit.as_ref().unwrap();\n@@ -762,7 +765,8 @@ impl<T> Option<T> {\n \n         let max_offset = mem::size_of::<Self>() - mem::size_of::<T>();\n         if offset as usize <= max_offset {\n-            // The offset is at least inside the object, so let's try it.\n+            // There's enough space after this offset for a `T` to exist without\n+            // overflowing the bounds of the object, so let's try it.\n             offset\n         } else {\n             // The offset guess is definitely wrong, so use the address"}]}