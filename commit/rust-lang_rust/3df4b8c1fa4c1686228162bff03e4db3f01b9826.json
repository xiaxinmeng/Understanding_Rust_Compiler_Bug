{"sha": "3df4b8c1fa4c1686228162bff03e4db3f01b9826", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZjRiOGMxZmE0YzE2ODYyMjgxNjJiZmYwM2U0ZGIzZjAxYjk4MjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-11T17:25:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-11T17:25:16Z"}, "message": "Merge #6830\n\n6830: Avoid panic when collecting memory metrics r=jonas-schievink a=jonas-schievink\n\nThis is getting hit during metrics collection.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "ad4bac6e189748bd1a5b3a616c25b7d750fcd195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4bac6e189748bd1a5b3a616c25b7d750fcd195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df4b8c1fa4c1686228162bff03e4db3f01b9826", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf06t8CRBK7hj4Ov3rIwAAdHIIAE/8/r4knVtJzH/bH0wqw9+s\nfmHcedYo/im3buG6mWIfbZbYvGYif9aWftpTtCBlgU7M9sAWDYbqPLTQpJVRx4Ut\nEaQ/4vvkcnolgSXgHFBmiKTA5I7KRnoU8qkFSshklz0V7O/xlOD0M+XP1PMXQh10\nKqBzJrr46UuOWCEiIn7iri1OacfeXfWlNQwGOqweZBQv6AU56onbcKgTDi6MDzLt\nJTdg1tzDjFJQzY/7fbaGsS/+fsfzQWHIDpvACNuNB7x40BeW6qZHJYJ5xMK9e+3w\nN/Npx1bTP7TOw2U3oDHVLYOiB3THjZkvL0k+h0JSSm0Xz4BpgOgbclD4r1DHE10=\n=fj+o\n-----END PGP SIGNATURE-----\n", "payload": "tree ad4bac6e189748bd1a5b3a616c25b7d750fcd195\nparent 24731e107f3c4790fc5fe73b63ad251a9d6e62ae\nparent cb35d3a05a6e1414cfc8799d7ebd38f490c8513b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607707516 +0000\ncommitter GitHub <noreply@github.com> 1607707516 +0000\n\nMerge #6830\n\n6830: Avoid panic when collecting memory metrics r=jonas-schievink a=jonas-schievink\n\nThis is getting hit during metrics collection.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df4b8c1fa4c1686228162bff03e4db3f01b9826", "html_url": "https://github.com/rust-lang/rust/commit/3df4b8c1fa4c1686228162bff03e4db3f01b9826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df4b8c1fa4c1686228162bff03e4db3f01b9826/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24731e107f3c4790fc5fe73b63ad251a9d6e62ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/24731e107f3c4790fc5fe73b63ad251a9d6e62ae", "html_url": "https://github.com/rust-lang/rust/commit/24731e107f3c4790fc5fe73b63ad251a9d6e62ae"}, {"sha": "cb35d3a05a6e1414cfc8799d7ebd38f490c8513b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb35d3a05a6e1414cfc8799d7ebd38f490c8513b", "html_url": "https://github.com/rust-lang/rust/commit/cb35d3a05a6e1414cfc8799d7ebd38f490c8513b"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "6879a462dc6c808fbc3d93cdac23ac9b0ae7f1a3", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=3df4b8c1fa4c1686228162bff03e4db3f01b9826", "patch": "@@ -10,8 +10,9 @@ mod ssr;\n use std::io::Read;\n \n use anyhow::Result;\n-use ide::Analysis;\n+use ide::{Analysis, AnalysisHost};\n use syntax::{AstNode, SourceFile};\n+use vfs::Vfs;\n \n pub use self::{\n     analysis_bench::{BenchCmd, BenchWhat, Position},\n@@ -82,3 +83,23 @@ fn report_metric(metric: &str, value: u64, unit: &str) {\n     }\n     println!(\"METRIC:{}:{}:{}\", metric, value, unit)\n }\n+\n+fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n+    let mut mem = host.per_query_memory_usage();\n+\n+    let before = profile::memory_usage();\n+    drop(vfs);\n+    let vfs = before.allocated - profile::memory_usage().allocated;\n+    mem.push((\"VFS\".into(), vfs));\n+\n+    let before = profile::memory_usage();\n+    drop(host);\n+    mem.push((\"Unaccounted\".into(), before.allocated - profile::memory_usage().allocated));\n+\n+    mem.push((\"Remaining\".into(), profile::memory_usage().allocated));\n+\n+    for (name, bytes) in mem {\n+        // NOTE: Not a debug print, so avoid going through the `eprintln` defined above.\n+        eprintln!(\"{:>8} {}\", bytes, name);\n+    }\n+}"}, {"sha": "5a8484c6243ba12dc67d1b63bc72dc6957e12b92", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=3df4b8c1fa4c1686228162bff03e4db3f01b9826", "patch": "@@ -12,10 +12,7 @@ use ide_db::base_db::{\n };\n use vfs::AbsPathBuf;\n \n-use crate::{\n-    cli::{load_cargo::load_cargo, Verbosity},\n-    print_memory_usage,\n-};\n+use crate::cli::{load_cargo::load_cargo, print_memory_usage, Verbosity};\n \n pub struct BenchCmd {\n     pub path: PathBuf,"}, {"sha": "a23fb7a33a4194d1ab1353b8719647dda0f1ac66", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=3df4b8c1fa4c1686228162bff03e4db3f01b9826", "patch": "@@ -23,11 +23,9 @@ use rustc_hash::FxHashSet;\n use stdx::format_to;\n use syntax::AstNode;\n \n-use crate::{\n-    cli::{\n-        load_cargo::load_cargo, progress_report::ProgressReport, report_metric, Result, Verbosity,\n-    },\n-    print_memory_usage,\n+use crate::cli::{\n+    load_cargo::load_cargo, print_memory_usage, progress_report::ProgressReport, report_metric,\n+    Result, Verbosity,\n };\n use profile::StopWatch;\n "}, {"sha": "79fe30e5301ee4e80991e8546163e25025d95e0c", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df4b8c1fa4c1686228162bff03e4db3f01b9826/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=3df4b8c1fa4c1686228162bff03e4db3f01b9826", "patch": "@@ -37,10 +37,8 @@ mod document;\n pub mod lsp_ext;\n pub mod config;\n \n-use ide::AnalysisHost;\n use serde::de::DeserializeOwned;\n use std::fmt;\n-use vfs::Vfs;\n \n pub use crate::{caps::server_capabilities, main_loop::main_loop};\n \n@@ -72,22 +70,3 @@ impl fmt::Display for LspError {\n }\n \n impl std::error::Error for LspError {}\n-\n-fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n-    let mut mem = host.per_query_memory_usage();\n-\n-    let before = profile::memory_usage();\n-    drop(vfs);\n-    let vfs = before.allocated - profile::memory_usage().allocated;\n-    mem.push((\"VFS\".into(), vfs));\n-\n-    let before = profile::memory_usage();\n-    drop(host);\n-    mem.push((\"Unaccounted\".into(), before.allocated - profile::memory_usage().allocated));\n-\n-    mem.push((\"Remaining\".into(), profile::memory_usage().allocated));\n-\n-    for (name, bytes) in mem {\n-        eprintln!(\"{:>8} {}\", bytes, name);\n-    }\n-}"}, {"sha": "624ad3b7e87d2f8e835681d302e948b452007a0d", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3df4b8c1fa4c1686228162bff03e4db3f01b9826/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df4b8c1fa4c1686228162bff03e4db3f01b9826/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=3df4b8c1fa4c1686228162bff03e4db3f01b9826", "patch": "@@ -3,7 +3,6 @@ use std::{\n     env,\n     io::Write as _,\n     path::Path,\n-    process::{Command, Stdio},\n     time::{Instant, SystemTime, UNIX_EPOCH},\n };\n \n@@ -82,11 +81,9 @@ impl Metrics {\n     }\n     fn measure_analysis_stats_path(&mut self, name: &str, path: &str) -> Result<()> {\n         eprintln!(\"\\nMeasuring analysis-stats/{}\", name);\n-        let output = Command::new(\"./target/release/rust-analyzer\")\n-            .args(&[\"analysis-stats\", \"--quiet\", \"--memory-usage\", path])\n-            .stderr(Stdio::inherit())\n-            .output()?;\n-        let output = String::from_utf8(output.stdout)?;\n+        let output =\n+            cmd!(\"./target/release/rust-analyzer analysis-stats --quiet --memory-usage {path}\")\n+                .read()?;\n         for (metric, value, unit) in parse_metrics(&output) {\n             self.report(&format!(\"analysis-stats/{}/{}\", name, metric), value, unit.into());\n         }"}]}