{"sha": "dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZGIyYTEzMTJlYjRhM2RkODdmODk3NGE0MzQ5NTFjMzI4ODRkNmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-16T14:53:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T14:53:55Z"}, "message": "Rollup merge of #83077 - notriddle:gc-cleanup-rustdoc-search, r=GuillaumeGomez\n\nrustdoc: reduce GC work during search", "tree": {"sha": "2232d1b92ee79b8e116255e17f741b86f880bf9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2232d1b92ee79b8e116255e17f741b86f880bf9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUMaECRBK7hj4Ov3rIwAAdHIIAAuaEa2XoXeqpdIgcFKL18wd\nGHryjPaxZxP8HiGAqTOpckJe0zO97KPlfVFh+0rIDr2hrM7VHh36WAQFuqVpzc5d\nUOJWA8ftxRv8Kfef8hj/05DfT/0jVnHMG6tLq38HlX42lD6Ynm9fRDaMzcZlqZDj\narNj8d3O8lNM1VTbrsLcZE0nqrKpdMOYfyNU1WBU88BJJ7IrEJTFyLYM22XRker6\nYVWvafAkc/B1vJ1Vah9o5aM/ywT1DBSi1T5XfC+urE7Qv2UOxGn94E2bwMaSnHv0\nDdmPMv4CV+MkS5GTHaWCflAc5yA2lkgiKZyaIls/9lstTvaod22qnCU7UPYaIpQ=\n=ZXNw\n-----END PGP SIGNATURE-----\n", "payload": "tree 2232d1b92ee79b8e116255e17f741b86f880bf9f\nparent b6df781643ca82f4f183e6e0758ed6eeede1804c\nparent dcba95f43ee7b3d7a282f4d96f98d3a1deeafcd2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615906435 +0900\ncommitter GitHub <noreply@github.com> 1615906435 +0900\n\nRollup merge of #83077 - notriddle:gc-cleanup-rustdoc-search, r=GuillaumeGomez\n\nrustdoc: reduce GC work during search\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "html_url": "https://github.com/rust-lang/rust/commit/dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbdb2a1312eb4a3dd87f8974a434951c32884d6d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6df781643ca82f4f183e6e0758ed6eeede1804c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6df781643ca82f4f183e6e0758ed6eeede1804c", "html_url": "https://github.com/rust-lang/rust/commit/b6df781643ca82f4f183e6e0758ed6eeede1804c"}, {"sha": "dcba95f43ee7b3d7a282f4d96f98d3a1deeafcd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcba95f43ee7b3d7a282f4d96f98d3a1deeafcd2", "html_url": "https://github.com/rust-lang/rust/commit/dcba95f43ee7b3d7a282f4d96f98d3a1deeafcd2"}], "stats": {"total": 127, "additions": 78, "deletions": 49}, "files": [{"sha": "e7b522093c74d908eb6afb0e5c49edb0c1725626", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 78, "deletions": 49, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/dbdb2a1312eb4a3dd87f8974a434951c32884d6d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/dbdb2a1312eb4a3dd87f8974a434951c32884d6d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=dbdb2a1312eb4a3dd87f8974a434951c32884d6d", "patch": "@@ -833,39 +833,52 @@ function defocusSearchBar() {\n                 };\n             }\n \n-            function getObjectFromId(id) {\n+            function getObjectNameFromId(id) {\n                 if (typeof id === \"number\") {\n-                    return searchIndex[id];\n+                    return searchIndex[id].name;\n                 }\n-                return {'name': id};\n+                return id;\n             }\n \n             function checkGenerics(obj, val) {\n                 // The names match, but we need to be sure that all generics kinda\n                 // match as well.\n+                var tmp_lev, elem_name;\n                 if (val.generics.length > 0) {\n                     if (obj.length > GENERICS_DATA &&\n                           obj[GENERICS_DATA].length >= val.generics.length) {\n-                        var elems = obj[GENERICS_DATA].slice(0);\n+                        var elems = Object.create(null);\n+                        var elength = object[GENERICS_DATA].length;\n+                        for (var x = 0; x < elength; ++x) {\n+                            elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                        }\n                         var total = 0;\n                         var done = 0;\n                         // We need to find the type that matches the most to remove it in order\n                         // to move forward.\n                         var vlength = val.generics.length;\n-                        for (var y = 0; y < vlength; ++y) {\n-                            var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n-                            var firstGeneric = getObjectFromId(val.generics[y]).name;\n-                            for (var x = 0, elength = elems.length; x < elength; ++x) {\n-                                var tmp_lev = levenshtein(getObjectFromId(elems[x]).name,\n-                                                                          firstGeneric);\n-                                if (tmp_lev < lev.lev) {\n-                                    lev.lev = tmp_lev;\n-                                    lev.pos = x;\n+                        for (x = 0; x < vlength; ++x) {\n+                            var lev = MAX_LEV_DISTANCE + 1;\n+                            var firstGeneric = getObjectNameFromId(val.generics[x]);\n+                            var match = null;\n+                            if (elems[firstGeneric]) {\n+                                match = firstGeneric;\n+                                lev = 0;\n+                            } else {\n+                                for (elem_name in elems) {\n+                                    tmp_lev = levenshtein(elem_name, firstGeneric);\n+                                    if (tmp_lev < lev) {\n+                                        lev = tmp_lev;\n+                                        match = elem_name;\n+                                    }\n                                 }\n                             }\n-                            if (lev.pos !== -1) {\n-                                elems.splice(lev.pos, 1);\n-                                total += lev.lev;\n+                            if (match !== null) {\n+                                elems[match] -= 1;\n+                                if (elems[match] == 0) {\n+                                    delete elems[match];\n+                                }\n+                                total += lev;\n                                 done += 1;\n                             } else {\n                                 return MAX_LEV_DISTANCE + 1;\n@@ -880,25 +893,27 @@ function defocusSearchBar() {\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                var len, x, y, e_len, firstGeneric;\n+                var len, x, firstGeneric;\n                 if (obj[NAME] === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n                             if (obj.length > GENERICS_DATA &&\n                                   obj[GENERICS_DATA].length >= val.generics.length) {\n-                                var elems = obj[GENERICS_DATA].slice(0);\n-                                var allFound = true;\n+                                var elems = Object.create(null);\n+                                len = obj[GENERICS_DATA].length;\n+                                for (x = 0; x < len; ++x) {\n+                                    elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                                }\n \n+                                var allFound = true;\n                                 len = val.generics.length;\n-                                for (y = 0; allFound === true && y < len; ++y) {\n-                                    allFound = false;\n-                                    firstGeneric = getObjectFromId(val.generics[y]).name;\n-                                    e_len = elems.length;\n-                                    for (x = 0; allFound === false && x < e_len; ++x) {\n-                                        allFound = getObjectFromId(elems[x]).name === firstGeneric;\n-                                    }\n-                                    if (allFound === true) {\n-                                        elems.splice(x - 1, 1);\n+                                for (x = 0; x < len; ++x) {\n+                                    firstGeneric = getObjectNameFromId(val.generics[x]);\n+                                    if (elems[firstGeneric]) {\n+                                        elems[firstGeneric] -= 1;\n+                                    } else {\n+                                        allFound = false;\n+                                        break;\n                                     }\n                                 }\n                                 if (allFound === true) {\n@@ -1066,13 +1081,6 @@ function defocusSearchBar() {\n                 return false;\n             }\n \n-            function generateId(ty) {\n-                if (ty.parent && ty.parent.name) {\n-                    return itemTypes[ty.ty] + ty.path + ty.parent.name + ty.name;\n-                }\n-                return itemTypes[ty.ty] + ty.path + ty.name;\n-            }\n-\n             function createAliasFromItem(item) {\n                 return {\n                     crate: item.crate,\n@@ -1158,7 +1166,7 @@ function defocusSearchBar() {\n                     in_args = findArg(searchIndex[i], val, true, typeFilter);\n                     returned = checkReturned(searchIndex[i], val, true, typeFilter);\n                     ty = searchIndex[i];\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     if (searchWords[i] === val.name\n                         && typePassesFilter(typeFilter, searchIndex[i].ty)\n@@ -1208,7 +1216,7 @@ function defocusSearchBar() {\n                     if (!type) {\n                         continue;\n                     }\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     returned = checkReturned(ty, output, true, NO_TYPE_FILTER);\n                     if (output.name === \"*\" || returned === true) {\n@@ -1292,15 +1300,15 @@ function defocusSearchBar() {\n                     var index = -1;\n                     // we want lev results to go lower than others\n                     lev = MAX_LEV_DISTANCE + 1;\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     if (searchWords[j].indexOf(split[i]) > -1 ||\n                         searchWords[j].indexOf(val) > -1 ||\n-                        searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n+                        ty.normalizedName.indexOf(val) > -1)\n                     {\n                         // filter type: ... queries\n                         if (typePassesFilter(typeFilter, ty.ty) && results[fullId] === undefined) {\n-                            index = searchWords[j].replace(/_/g, \"\").indexOf(val);\n+                            index = ty.normalizedName.indexOf(val);\n                         }\n                     }\n                     if ((lev = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n@@ -1828,23 +1836,35 @@ function defocusSearchBar() {\n         function buildIndex(rawSearchIndex) {\n             searchIndex = [];\n             var searchWords = [];\n-            var i;\n+            var i, word;\n             var currentIndex = 0;\n+            var id = 0;\n \n             for (var crate in rawSearchIndex) {\n                 if (!hasOwnProperty(rawSearchIndex, crate)) { continue; }\n \n                 var crateSize = 0;\n \n                 searchWords.push(crate);\n-                searchIndex.push({\n+                var normalizedName = crate.indexOf(\"_\") === -1\n+                    ? crate\n+                    : crate.replace(/_/g, \"\");\n+                // This object should have exactly the same set of fields as the \"row\"\n+                // object defined below. Your JavaScript runtime will thank you.\n+                // https://mathiasbynens.be/notes/shapes-ics\n+                var crateRow = {\n                     crate: crate,\n                     ty: 1, // == ExternCrate\n                     name: crate,\n                     path: \"\",\n                     desc: rawSearchIndex[crate].doc,\n+                    parent: undefined,\n                     type: null,\n-                });\n+                    id: id,\n+                    normalizedName: normalizedName,\n+                };\n+                id += 1;\n+                searchIndex.push(crateRow);\n                 currentIndex += 1;\n \n                 // an array of (Number) item types\n@@ -1882,6 +1902,18 @@ function defocusSearchBar() {\n                 len = itemTypes.length;\n                 var lastPath = \"\";\n                 for (i = 0; i < len; ++i) {\n+                    // This object should have exactly the same set of fields as the \"crateRow\"\n+                    // object defined above.\n+                    if (typeof itemNames[i] === \"string\") {\n+                        word = itemNames[i].toLowerCase();\n+                        searchWords.push(word);\n+                    } else {\n+                        word = \"\";\n+                        searchWords.push(\"\");\n+                    }\n+                    var normalizedName = word.indexOf(\"_\") === -1\n+                        ? word\n+                        : word.replace(/_/g, \"\");\n                     var row = {\n                         crate: crate,\n                         ty: itemTypes[i],\n@@ -1890,14 +1922,11 @@ function defocusSearchBar() {\n                         desc: itemDescs[i],\n                         parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n                         type: itemFunctionSearchTypes[i],\n+                        id: id,\n+                        normalizedName: normalizedName,\n                     };\n+                    id += 1;\n                     searchIndex.push(row);\n-                    if (typeof row.name === \"string\") {\n-                        var word = row.name.toLowerCase();\n-                        searchWords.push(word);\n-                    } else {\n-                        searchWords.push(\"\");\n-                    }\n                     lastPath = row.path;\n                     crateSize += 1;\n                 }"}]}