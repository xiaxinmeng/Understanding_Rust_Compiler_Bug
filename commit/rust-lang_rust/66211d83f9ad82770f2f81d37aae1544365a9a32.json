{"sha": "66211d83f9ad82770f2f81d37aae1544365a9a32", "node_id": "C_kwDOAAsO6NoAKDY2MjExZDgzZjlhZDgyNzcwZjJmODFkMzdhYWUxNTQ0MzY1YTlhMzI", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-09-11T15:23:00Z"}, "committer": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-09-11T15:23:00Z"}, "message": "Avoid `Iterator::last`", "tree": {"sha": "6303abb18f7e6401d3e057db985e4ba005102eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6303abb18f7e6401d3e057db985e4ba005102eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66211d83f9ad82770f2f81d37aae1544365a9a32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmMd/VQACgkQC1KuORxn\nTOW0bhAAooSwFRKcukdejnSMnJkRYYuyz0r+6K7lBYuC3KqcEbBl4RvQEmxUkw06\nnWHG8v1CQQyiIvMwZnK1MzJuXR4kAlZZBLSW1uWX3x5wbexvKpQbBq3t3z2a35jf\nqOM00cCLGUO35pbTK86g9/42Z2ow3MdlO+JhHU4MQBls8PiYqyWRmQS2L26ra/F6\nqexJYfh3z+8dKqddpln7DYTFHv9hUW+GM7QhPXKFF4AxAhkQWW8jhI5K0bAeGWkQ\nvLv5NX4dP47ULmE7SCZDDwT+3syuP9VFxOnmoyK3RWnk4/V8wNzbB5j8YfOfMsCx\nO5gWLr4xmf3hXckmsblyO/jENFe+1K1gyThPSZik4ir1+BbxCL/4xeZDnBMTg1nn\nNoR/ovbvhPSduG68+0bExfjvTyEFTPvZ6tmJ+5zY/0x17slkZAMcCDdEwJqJzAGg\nLAESsVyZ+2fP2qnYFUyAiV4ZggXFR7w/cEUH6b5LJAkUyU+2piL3rANyzXy2JX1v\nmVMUcNkI5OWlj3R6+wO5ThpYFIjWW3d5NceP2eftmboi87V4NtlBa1gV2MRDusv4\nC9tl2mHMtteW/Th+OZb3fjH29nxGFqHa5o3lmeV8rQEnPJkpWNmOmrB1+5TzXA15\ndI43nxnO4U9xDkhtA+4CDEbFgnmlkEKuv8tI4BVu9YVvYIwrX0A=\n=kfPe\n-----END PGP SIGNATURE-----", "payload": "tree 6303abb18f7e6401d3e057db985e4ba005102eb1\nparent 6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1662909780 +0200\ncommitter KaDiWa <kalle.wachsmuth@gmail.com> 1662909780 +0200\n\nAvoid `Iterator::last`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66211d83f9ad82770f2f81d37aae1544365a9a32", "html_url": "https://github.com/rust-lang/rust/commit/66211d83f9ad82770f2f81d37aae1544365a9a32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66211d83f9ad82770f2f81d37aae1544365a9a32/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31", "html_url": "https://github.com/rust-lang/rust/commit/6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "877944d3d70cb961195ac89e926ca12a39ef2467", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -86,8 +86,7 @@ impl LocationTable {\n         let (block, &first_index) = self\n             .statements_before_block\n             .iter_enumerated()\n-            .filter(|(_, first_index)| **first_index <= point_index)\n-            .last()\n+            .rfind(|&(_, &first_index)| first_index <= point_index)\n             .unwrap();\n \n         let statement_index = (point_index - first_index) / 2;"}, {"sha": "4ad9ed88a911f18ee8d581a29617899009896f57", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -576,8 +576,7 @@ impl<'hir> Generics<'hir> {\n         if self.has_where_clause_predicates {\n             self.predicates\n                 .iter()\n-                .filter(|p| p.in_where_clause())\n-                .last()\n+                .rfind(|&p| p.in_where_clause())\n                 .map_or(end, |p| p.span())\n                 .shrink_to_hi()\n                 .to(end)"}, {"sha": "4fb6d65a6e98f4f86db64f3975bc73a5809fe042", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -719,7 +719,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n     Some(match *ty.kind() {\n         ty::Adt(field_def, field_substs) => {\n             let inner_field_ty = {\n-                let first_non_zst_ty = field_def\n+                let mut first_non_zst_ty = field_def\n                     .variants()\n                     .iter()\n                     .filter_map(|v| transparent_newtype_field(cx.tcx, v));\n@@ -729,7 +729,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n                     \"Wrong number of fields for transparent type\"\n                 );\n                 first_non_zst_ty\n-                    .last()\n+                    .next_back()\n                     .expect(\"No non-zst fields in transparent type.\")\n                     .ty(tcx, field_substs)\n             };"}, {"sha": "c3c9b0b5617824e4590262c54e20bd48889a2df9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -617,9 +617,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .filter(|&sp| sp != base_error.span)\n                         .collect();\n \n-                    let start_span = bounds.iter().map(|bound| bound.span()).next().unwrap();\n+                    let start_span = bounds[0].span();\n                     // `end_span` is the end of the poly trait ref (Foo + 'baz + Bar><)\n-                    let end_span = bounds.iter().map(|bound| bound.span()).last().unwrap();\n+                    let end_span = bounds.last().unwrap().span();\n                     // `last_bound_span` is the last bound of the poly trait ref (Foo + >'baz< + Bar)\n                     let last_bound_span = spans.last().cloned().unwrap();\n                     let mut multi_span: MultiSpan = spans.clone().into();"}, {"sha": "9ed4faccdb852934340c6a567785879b0361f9d5", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -1309,10 +1309,8 @@ pub fn build_session(\n     let warnings_allow = sopts\n         .lint_opts\n         .iter()\n-        .filter(|&&(ref key, _)| *key == \"warnings\")\n-        .map(|&(_, ref level)| *level == lint::Allow)\n-        .last()\n-        .unwrap_or(false);\n+        .rfind(|&&(ref key, _)| *key == \"warnings\")\n+        .map_or(false, |&(_, level)| level == lint::Allow);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n "}, {"sha": "ec6b8c2469c59cb5d5073a7bcc132859c0f316f0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -587,7 +587,7 @@ fn generate_macro_def_id_path(\n             }\n         })\n         .collect();\n-    let relative = fqp.iter().map(|elem| elem.to_string());\n+    let mut relative = fqp.iter().map(|elem| elem.to_string());\n     let cstore = CStore::from_tcx(tcx);\n     // We need this to prevent a `panic` when this function is used from intra doc links...\n     if !cstore.has_crate_data(def_id.krate) {\n@@ -607,7 +607,7 @@ fn generate_macro_def_id_path(\n     let mut path = if is_macro_2 {\n         once(crate_name.clone()).chain(relative).collect()\n     } else {\n-        vec![crate_name.clone(), relative.last().unwrap()]\n+        vec![crate_name.clone(), relative.next_back().unwrap()]\n     };\n     if path.len() < 2 {\n         // The minimum we can have is the crate name followed by the macro name. If shorter, then"}, {"sha": "e2afa5ef59020c409f6629fce8ac37caf7aa6466", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66211d83f9ad82770f2f81d37aae1544365a9a32/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66211d83f9ad82770f2f81d37aae1544365a9a32/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=66211d83f9ad82770f2f81d37aae1544365a9a32", "patch": "@@ -2594,7 +2594,7 @@ impl<'test> TestCx<'test> {\n                     }\n                     None\n                 } else {\n-                    let sline = line.split(\"///\").last().unwrap_or(\"\");\n+                    let sline = line.rsplit(\"///\").next().unwrap();\n                     let line = sline.trim_start();\n                     if line.starts_with(\"```\") {\n                         if ignore {"}]}