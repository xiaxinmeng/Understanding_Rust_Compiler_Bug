{"sha": "2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhY2Y2ZWU2ZDJhYjNhY2YzZjRkMjExNzU5MWFjMTE0M2M4MjMyZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-24T11:30:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-24T11:30:24Z"}, "message": "Auto merge of #80295 - GuillaumeGomez:beautify-rework, r=petrochenkov\n\nRework beautify_doc_string so that it returns a Symbol instead of a String\n\nThis commit comes from https://github.com/rust-lang/rust/pull/80261, the goal here is to inspect the impact on performance of this change on its own.\n\nThe idea of rewriting `beautify_doc_string` is to not go through `String` if we don't need to update the doc comment to be able to keep the original `Symbol` and also to have better performance.\n\nr? `@jyn514`", "tree": {"sha": "65b8f8eb157cb2c6125019027b172e2f33a8f866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65b8f8eb157cb2c6125019027b172e2f33a8f866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "html_url": "https://github.com/rust-lang/rust/commit/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "html_url": "https://github.com/rust-lang/rust/commit/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74"}, {"sha": "64afdedfb87d471dcf1b757cea5f4b0b570176c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/64afdedfb87d471dcf1b757cea5f4b0b570176c1", "html_url": "https://github.com/rust-lang/rust/commit/64afdedfb87d471dcf1b757cea5f4b0b570176c1"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "5d994c903795b5b87ea0f713e8ceca60ff7a0d50", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "patch": "@@ -25,9 +25,8 @@ pub struct Comment {\n \n /// Makes a doc string more presentable to users.\n /// Used by rustdoc and perhaps other tools, but not by rustc.\n-pub fn beautify_doc_string(data: Symbol) -> String {\n-    /// remove whitespace-only lines from the start/end of lines\n-    fn vertical_trim(lines: Vec<String>) -> Vec<String> {\n+pub fn beautify_doc_string(data: Symbol) -> Symbol {\n+    fn get_vertical_trim(lines: &[&str]) -> Option<(usize, usize)> {\n         let mut i = 0;\n         let mut j = lines.len();\n         // first line of all-stars should be omitted\n@@ -47,55 +46,58 @@ pub fn beautify_doc_string(data: Symbol) -> String {\n             j -= 1;\n         }\n \n-        lines[i..j].to_vec()\n+        if i != 0 || j != lines.len() { Some((i, j)) } else { None }\n     }\n \n-    /// remove a \"[ \\t]*\\*\" block from each line, if possible\n-    fn horizontal_trim(lines: Vec<String>) -> Vec<String> {\n+    fn get_horizontal_trim(lines: &[&str]) -> Option<usize> {\n         let mut i = usize::MAX;\n-        let mut can_trim = true;\n         let mut first = true;\n \n-        for line in &lines {\n+        for line in lines {\n             for (j, c) in line.chars().enumerate() {\n                 if j > i || !\"* \\t\".contains(c) {\n-                    can_trim = false;\n-                    break;\n+                    return None;\n                 }\n                 if c == '*' {\n                     if first {\n                         i = j;\n                         first = false;\n                     } else if i != j {\n-                        can_trim = false;\n+                        return None;\n                     }\n                     break;\n                 }\n             }\n             if i >= line.len() {\n-                can_trim = false;\n-            }\n-            if !can_trim {\n-                break;\n+                return None;\n             }\n         }\n+        Some(i)\n+    }\n \n-        if can_trim {\n-            lines.iter().map(|line| (&line[i + 1..line.len()]).to_string()).collect()\n+    let data_s = data.as_str();\n+    if data_s.contains('\\n') {\n+        let mut lines = data_s.lines().collect::<Vec<&str>>();\n+        let mut changes = false;\n+        let lines = if let Some((i, j)) = get_vertical_trim(&lines) {\n+            changes = true;\n+            // remove whitespace-only lines from the start/end of lines\n+            &mut lines[i..j]\n         } else {\n-            lines\n+            &mut lines\n+        };\n+        if let Some(horizontal) = get_horizontal_trim(&lines) {\n+            changes = true;\n+            // remove a \"[ \\t]*\\*\" block from each line, if possible\n+            for line in lines.iter_mut() {\n+                *line = &line[horizontal + 1..];\n+            }\n+        }\n+        if changes {\n+            return Symbol::intern(&lines.join(\"\\n\"));\n         }\n     }\n-\n-    let data = data.as_str();\n-    if data.contains('\\n') {\n-        let lines = data.lines().map(|s| s.to_string()).collect::<Vec<String>>();\n-        let lines = vertical_trim(lines);\n-        let lines = horizontal_trim(lines);\n-        lines.join(\"\\n\")\n-    } else {\n-        data.to_string()\n-    }\n+    data\n }\n \n /// Returns `None` if the first `col` chars of `s` contain a non-whitespace char."}, {"sha": "98ab653e45f70e740da4226366cd194676986d14", "filename": "compiler/rustc_ast/src/util/comments/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments%2Ftests.rs?ref=2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "patch": "@@ -6,7 +6,7 @@ fn test_block_doc_comment_1() {\n     with_default_session_globals(|| {\n         let comment = \"\\n * Test \\n **  Test\\n *   Test\\n\";\n         let stripped = beautify_doc_string(Symbol::intern(comment));\n-        assert_eq!(stripped, \" Test \\n*  Test\\n   Test\");\n+        assert_eq!(stripped.as_str(), \" Test \\n*  Test\\n   Test\");\n     })\n }\n \n@@ -15,7 +15,7 @@ fn test_block_doc_comment_2() {\n     with_default_session_globals(|| {\n         let comment = \"\\n * Test\\n *  Test\\n\";\n         let stripped = beautify_doc_string(Symbol::intern(comment));\n-        assert_eq!(stripped, \" Test\\n  Test\");\n+        assert_eq!(stripped.as_str(), \" Test\\n  Test\");\n     })\n }\n \n@@ -24,20 +24,20 @@ fn test_block_doc_comment_3() {\n     with_default_session_globals(|| {\n         let comment = \"\\n let a: *i32;\\n *a = 5;\\n\";\n         let stripped = beautify_doc_string(Symbol::intern(comment));\n-        assert_eq!(stripped, \" let a: *i32;\\n *a = 5;\");\n+        assert_eq!(stripped.as_str(), \" let a: *i32;\\n *a = 5;\");\n     })\n }\n \n #[test]\n fn test_line_doc_comment() {\n     with_default_session_globals(|| {\n         let stripped = beautify_doc_string(Symbol::intern(\" test\"));\n-        assert_eq!(stripped, \" test\");\n+        assert_eq!(stripped.as_str(), \" test\");\n         let stripped = beautify_doc_string(Symbol::intern(\"! test\"));\n-        assert_eq!(stripped, \"! test\");\n+        assert_eq!(stripped.as_str(), \"! test\");\n         let stripped = beautify_doc_string(Symbol::intern(\"test\"));\n-        assert_eq!(stripped, \"test\");\n+        assert_eq!(stripped.as_str(), \"test\");\n         let stripped = beautify_doc_string(Symbol::intern(\"!test\"));\n-        assert_eq!(stripped, \"!test\");\n+        assert_eq!(stripped.as_str(), \"!test\");\n     })\n }"}, {"sha": "056c0b3d9d513f8fa5813f76af3dae424f9e44ae", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "patch": "@@ -825,7 +825,7 @@ impl<'tcx> SaveContext<'tcx> {\n         for attr in attrs {\n             if let Some(val) = attr.doc_str() {\n                 // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n-                result.push_str(&beautify_doc_string(val));\n+                result.push_str(&beautify_doc_string(val).as_str());\n                 result.push('\\n');\n             } else if self.tcx.sess.check_name(attr, sym::doc) {\n                 if let Some(meta_list) = attr.meta_item_list() {"}, {"sha": "dd818a643efb9951b0a2b6e97f290fb4338b623f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe", "patch": "@@ -621,7 +621,7 @@ impl Attributes {\n         let clean_attr = |(attr, parent_module): (&ast::Attribute, _)| {\n             if let Some(value) = attr.doc_str() {\n                 trace!(\"got doc_str={:?}\", value);\n-                let value = beautify_doc_string(value);\n+                let value = beautify_doc_string(value).to_string();\n                 let kind = if attr.is_doc_comment() {\n                     DocFragmentKind::SugaredDoc\n                 } else {"}]}