{"sha": "3e16d4af7f6b0524434e758331a7cb3013a69791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTZkNGFmN2Y2YjA1MjQ0MzRlNzU4MzMxYTdjYjMwMTNhNjk3OTE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-08-26T08:17:31Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-08-26T08:17:31Z"}, "message": "apply bootstrap cfgs", "tree": {"sha": "1330e15d4ed14af1ab9786c4ed0d70cfdc2b869d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1330e15d4ed14af1ab9786c4ed0d70cfdc2b869d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e16d4af7f6b0524434e758331a7cb3013a69791", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl9GGqQACgkQPgar6Auq\n8ZyhcQ//bEyoQ5NJPQ6syPPQ5XhFYLXq+XINO0n/9OJmBBRAsrlATWbzkgZYNfCx\nef+sUNDY2Heq2PckYvtOeVX4MZBqVGavl5xTbL3hbOxDCWzBYruqEszanWGx1x5H\nSC/xzN+p1eDE8TBD0pnbqxGCTtZOGJj67dJsFjKqxEJuKZ66SAc9O5R/MQFAW7fL\nJ7Rjy0QIFVKooT9TMbD18DmAhmQyorCW75Vb9yIYVCu5ZnnFwGOf7aVE4blvW5ZW\n0bGQdaL7JR/aRIWQnIPKJ1r2WHsM3sBnYNyFcNAPU5Baf7SI6tg7sGNnMyhtRwou\nbjQtuBDa+2jXkd+zl83i6POBYysNkKXZHm5iAXsdHlrICdAk0a/JDYYsVQrV7VWu\nWMshqBO6nNyiYISs3y4MAVmoC0x9oSnLt2x837u8mtDdfk+JfdzAiWx1hC/0zeo/\niXjMZSAP0SfhIcIOhm71XODbyj1LNxbk5xuu/sFVp5XRWLYFPVQ7r1e74RYiJRo1\nJfMAkZCY02pm8L9UQAOVpAxcu/qJWVITiDVTP5Lgvx+wSGItewriMY/mw8cC//Nl\nWwxgsB5D04ukvNQBQoRxPaLG0xBMWBvn/qV5+NFz5kCNN6PpKwMXtvUCwTBNiUvs\nP0Xi72W389EX9C57LqaZK3cervK5mO+Y+v01qFYEL9y8Jbqxgbg=\n=0PWw\n-----END PGP SIGNATURE-----", "payload": "tree 1330e15d4ed14af1ab9786c4ed0d70cfdc2b869d\nparent e88d79ca41181f5f306fe2ef25510318556bc963\nauthor Pietro Albini <pietro@pietroalbini.org> 1598429851 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1598429851 +0200\n\napply bootstrap cfgs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e16d4af7f6b0524434e758331a7cb3013a69791", "html_url": "https://github.com/rust-lang/rust/commit/3e16d4af7f6b0524434e758331a7cb3013a69791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e16d4af7f6b0524434e758331a7cb3013a69791/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88d79ca41181f5f306fe2ef25510318556bc963", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88d79ca41181f5f306fe2ef25510318556bc963", "html_url": "https://github.com/rust-lang/rust/commit/e88d79ca41181f5f306fe2ef25510318556bc963"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "f85be5584e3f197d76bd003af81612a15b1be0a0", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -362,7 +362,6 @@ macro_rules! array_impl_default {\n \n array_impl_default! {32, T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T}\n \n-#[cfg(not(bootstrap))]\n #[lang = \"array\"]\n impl<T, const N: usize> [T; N] {\n     /// Returns an array of the same size as `self`, with function `f` applied to each element"}, {"sha": "5f10a2eb023a060905ce641fc622fb55c382e18d", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -385,7 +385,7 @@ pub trait Into<T>: Sized {\n ))]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n-    #[cfg_attr(not(bootstrap), lang = \"from\")]\n+    #[lang = \"from\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(_: T) -> Self;\n }"}, {"sha": "d9b91acc3ad7bb0e9fa85723436741c1db464d5c", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -96,7 +96,7 @@ pub trait Future {\n     /// [`Context`]: ../task/struct.Context.html\n     /// [`Waker`]: ../task/struct.Waker.html\n     /// [`Waker::wake`]: ../task/struct.Waker.html#method.wake\n-    #[cfg_attr(not(bootstrap), lang = \"poll\")]\n+    #[lang = \"poll\"]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n }"}, {"sha": "8b3df76f71fdda130f7fde6fc14dbb5b1a69de36", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -53,7 +53,7 @@ unsafe impl Sync for ResumeTy {}\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n-#[cfg_attr(not(bootstrap), lang = \"from_generator\")]\n+#[lang = \"from_generator\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n@@ -86,7 +86,7 @@ where\n     GenFuture(gen)\n }\n \n-#[cfg_attr(not(bootstrap), lang = \"get_context\")]\n+#[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]"}, {"sha": "75827d785e10efe413c2db030db5fc61a99ca08b", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -235,7 +235,7 @@ pub trait IntoIterator {\n     /// assert_eq!(Some(3), iter.next());\n     /// assert_eq!(None, iter.next());\n     /// ```\n-    #[cfg_attr(not(bootstrap), lang = \"into_iter\")]\n+    #[lang = \"into_iter\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_iter(self) -> Self::IntoIter;\n }"}, {"sha": "aca6699b9efbb1e451b508316271f073001914ec", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -130,7 +130,7 @@ pub trait Iterator {\n     /// assert_eq!(None, iter.next());\n     /// assert_eq!(None, iter.next());\n     /// ```\n-    #[cfg_attr(not(bootstrap), lang = \"next\")]\n+    #[lang = \"next\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next(&mut self) -> Option<Self::Item>;\n "}, {"sha": "aef82a5aec5d0f1863c70f997837fb7a71991ad8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -98,7 +98,7 @@\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n-#![cfg_attr(not(bootstrap), feature(doc_spotlight))]\n+#![feature(doc_spotlight)]\n #![feature(duration_consts_2)]\n #![feature(extern_types)]\n #![feature(fundamental)]"}, {"sha": "27a3a2cf911624dd99b68b7317f773e8ed394ed8", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -708,7 +708,7 @@ mod impls {\n pub trait DiscriminantKind {\n     /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n-    #[cfg_attr(not(bootstrap), lang = \"discriminant_type\")]\n+    #[lang = \"discriminant_type\"]\n     type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n }\n "}, {"sha": "2eaf7601e54dece53b4e4b4171fc5938f750c7e0", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -36,7 +36,7 @@ use crate::hash::Hash;\n /// ```\n ///\n /// [slicing index]: crate::slice::SliceIndex\n-#[cfg_attr(not(bootstrap), lang = \"RangeFull\")]\n+#[lang = \"RangeFull\"]\n #[doc(alias = \"..\")]\n #[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -69,7 +69,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1.. 3], [  1,2    ]);  // Range\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n-#[cfg_attr(not(bootstrap), lang = \"Range\")]\n+#[lang = \"Range\"]\n #[doc(alias = \"..\")]\n #[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -172,7 +172,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// assert_eq!(arr[1.. 3], [  1,2    ]);\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n-#[cfg_attr(not(bootstrap), lang = \"RangeFrom\")]\n+#[lang = \"RangeFrom\"]\n #[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -253,7 +253,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// ```\n ///\n /// [slicing index]: crate::slice::SliceIndex\n-#[cfg_attr(not(bootstrap), lang = \"RangeTo\")]\n+#[lang = \"RangeTo\"]\n #[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -322,7 +322,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1.. 3], [  1,2    ]);\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n-#[cfg_attr(not(bootstrap), lang = \"RangeInclusive\")]\n+#[lang = \"RangeInclusive\"]\n #[doc(alias = \"..=\")]\n #[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n@@ -354,7 +354,7 @@ impl<Idx> RangeInclusive<Idx> {\n     ///\n     /// assert_eq!(3..=5, RangeInclusive::new(3, 5));\n     /// ```\n-    #[cfg_attr(not(bootstrap), lang = \"range_inclusive_new\")]\n+    #[lang = \"range_inclusive_new\"]\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n@@ -543,7 +543,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// ```\n ///\n /// [slicing index]: crate::slice::SliceIndex\n-#[cfg_attr(not(bootstrap), lang = \"RangeToInclusive\")]\n+#[lang = \"RangeToInclusive\"]\n #[doc(alias = \"..=\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"}, {"sha": "3bede5699781c0eb464f163e221bb8c8c22f9bdb", "filename": "library/core/src/ops/try.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -43,19 +43,19 @@ pub trait Try {\n     /// in the return type of the enclosing scope (which must itself implement\n     /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n     /// is returned, where `X` is the return type of the enclosing function.\n-    #[cfg_attr(not(bootstrap), lang = \"into_result\")]\n+    #[lang = \"into_result\"]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn into_result(self) -> Result<Self::Ok, Self::Error>;\n \n     /// Wrap an error value to construct the composite result. For example,\n     /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n-    #[cfg_attr(not(bootstrap), lang = \"from_error\")]\n+    #[lang = \"from_error\"]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_error(v: Self::Error) -> Self;\n \n     /// Wrap an OK value to construct the composite result. For example,\n     /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n-    #[cfg_attr(not(bootstrap), lang = \"from_ok\")]\n+    #[lang = \"from_ok\"]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_ok(v: Self::Ok) -> Self;\n }"}, {"sha": "dd7556758be7d17347b7fbc880f591d7f8298100", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -144,11 +144,11 @@ use crate::{\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value\n-    #[cfg_attr(not(bootstrap), lang = \"None\")]\n+    #[lang = \"None\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     None,\n     /// Some value `T`\n-    #[cfg_attr(not(bootstrap), lang = \"Some\")]\n+    #[lang = \"Some\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n }"}, {"sha": "8f60c4787d4590e23b40cd10d72eb3c734f2bb6e", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -555,7 +555,7 @@ impl<P: Deref> Pin<P> {\n     ///  ```\n     ///\n     /// [`mem::swap`]: crate::mem::swap\n-    #[cfg_attr(not(bootstrap), lang = \"new_unchecked\")]\n+    #[lang = \"new_unchecked\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub unsafe fn new_unchecked(pointer: P) -> Pin<P> {"}, {"sha": "ce0fc628e111442bd486dc98bb7085ab8a05bd53", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -240,12 +240,12 @@ use crate::{convert, fmt};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value\n-    #[cfg_attr(not(bootstrap), lang = \"Ok\")]\n+    #[lang = \"Ok\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n \n     /// Contains the error value\n-    #[cfg_attr(not(bootstrap), lang = \"Err\")]\n+    #[lang = \"Err\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n }"}, {"sha": "9383e7c45fa55b6c29b1ebd56346842b4b844b09", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16d4af7f6b0524434e758331a7cb3013a69791/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=3e16d4af7f6b0524434e758331a7cb3013a69791", "patch": "@@ -10,7 +10,7 @@ use crate::result::Result;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub enum Poll<T> {\n     /// Represents that a value is immediately ready.\n-    #[cfg_attr(not(bootstrap), lang = \"Ready\")]\n+    #[lang = \"Ready\"]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     Ready(#[stable(feature = \"futures_api\", since = \"1.36.0\")] T),\n \n@@ -19,7 +19,7 @@ pub enum Poll<T> {\n     /// When a function returns `Pending`, the function *must* also\n     /// ensure that the current task is scheduled to be awoken when\n     /// progress can be made.\n-    #[cfg_attr(not(bootstrap), lang = \"Pending\")]\n+    #[lang = \"Pending\"]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     Pending,\n }"}]}