{"sha": "4e3339efda68a699d72aee33f8c31cbff8ebdff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzMzOWVmZGE2OGE2OTlkNzJhZWUzM2Y4YzMxY2JmZjhlYmRmZjY=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-20T12:00:03Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-20T12:21:34Z"}, "message": "move NllLivenessMap and LocalWithRegion to liveness_map", "tree": {"sha": "537aae2b84ba91a743b22baae92cf34378663be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/537aae2b84ba91a743b22baae92cf34378663be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3339efda68a699d72aee33f8c31cbff8ebdff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3339efda68a699d72aee33f8c31cbff8ebdff6", "html_url": "https://github.com/rust-lang/rust/commit/4e3339efda68a699d72aee33f8c31cbff8ebdff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3339efda68a699d72aee33f8c31cbff8ebdff6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67685dee3fab4982695473b34e0435c2bd7935b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/67685dee3fab4982695473b34e0435c2bd7935b9", "html_url": "https://github.com/rust-lang/rust/commit/67685dee3fab4982695473b34e0435c2bd7935b9"}], "stats": {"total": 164, "additions": 93, "deletions": 71}, "files": [{"sha": "fb80a00f3f650eec9f71a2ac6d285b2f52777b5f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -2933,4 +2933,4 @@ impl<'tcx> TypeFoldable<'tcx> for Literal<'tcx> {\n     }\n }\n \n-newtype_index!(LocalWithRegion);\n+"}, {"sha": "22abea8eaf097ddf0c6a611fa14187f050ebfee5", "filename": "src/librustc_mir/borrow_check/nll/liveness_map.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc::mir::{Mir, Local};\n+use util::liveness::LiveVariableMap;\n+use rustc_data_structures::indexed_vec::Idx;\n+use rustc::ty::TypeFoldable;\n+\n+crate struct NllLivenessMap {\n+    pub from_local: IndexVec<Local, Option<LocalWithRegion>>,\n+    pub to_local: IndexVec<LocalWithRegion, Local>,\n+\n+}\n+\n+impl LiveVariableMap for NllLivenessMap {\n+    type LiveVar = LocalWithRegion;\n+\n+    fn from_local(&self, local: Local) -> Option<Self::LiveVar> {\n+        self.from_local[local]\n+    }\n+\n+    fn from_live_var(&self, local: Self::LiveVar) -> Local {\n+        self.to_local[local]\n+    }\n+\n+    fn num_variables(&self) -> usize {\n+        self.to_local.len()\n+    }\n+}\n+\n+impl NllLivenessMap {\n+    pub fn compute(mir: &Mir) -> Self {\n+        let mut to_local = IndexVec::default();\n+        let from_local: IndexVec<Local,Option<_>> = mir\n+            .local_decls\n+            .iter_enumerated()\n+            .map(|(local, local_decl)| {\n+                if local_decl.ty.has_free_regions() {\n+                    Some(to_local.push(local))\n+                }\n+                    else {\n+                        None\n+                    }\n+            }).collect();\n+\n+        Self { from_local, to_local }\n+    }\n+}\n+\n+newtype_index!(LocalWithRegion);\n\\ No newline at end of file"}, {"sha": "76f8fa206be5d76109c63b363e65193b556b8bb1", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -13,13 +13,14 @@ use borrow_check::location::{LocationIndex, LocationTable};\n use borrow_check::nll::facts::AllFactsExt;\n use borrow_check::nll::type_check::MirTypeckRegionConstraints;\n use borrow_check::nll::region_infer::values::RegionValueElements;\n+use borrow_check::nll::liveness_map::{NllLivenessMap, LocalWithRegion};\n use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir, LocalWithRegion};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc::util::nodemap::FxHashMap;\n use std::collections::BTreeSet;\n@@ -30,7 +31,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n use transform::MirSource;\n-use util::liveness::{LivenessResults, LocalSet, NllLivenessMap};\n+use util::liveness::{LivenessResults, LiveVarSet};\n \n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n@@ -45,6 +46,7 @@ crate mod region_infer;\n mod renumber;\n crate mod type_check;\n mod universal_regions;\n+crate mod liveness_map;\n \n mod constraints;\n \n@@ -409,8 +411,8 @@ impl ToRegionVid for RegionVid {\n }\n \n fn live_variable_set(\n-    regular: &LocalSet<LocalWithRegion>,\n-    drops: &LocalSet<LocalWithRegion>\n+    regular: &LiveVarSet<LocalWithRegion>,\n+    drops: &LiveVarSet<LocalWithRegion>\n ) -> String {\n     // sort and deduplicate:\n     let all_locals: BTreeSet<_> = regular.iter().chain(drops.iter()).collect();"}, {"sha": "2b9307db59af9feb3821760f2c52f059845d3d39", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use borrow_check::nll::{NllLivenessMap, LocalWithRegion};\n use borrow_check::nll::type_check::AtLocation;\n use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::mir::LocalWithRegion;\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use std::rc::Rc;\n-use util::liveness::{NllLivenessMap, LivenessResults, LiveVariableMap };\n+use util::liveness::{LivenessResults, LiveVariableMap };\n \n use super::TypeChecker;\n "}, {"sha": "e23f9b20a10f8f43ab964c3a0a2374c5c0bde6f2", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -19,6 +19,7 @@ use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n use borrow_check::nll::region_infer::values::{RegionValues, RegionValueElements};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::ToRegionVid;\n+use borrow_check::nll::LocalWithRegion;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;"}, {"sha": "a43f17e40dfb632d4a53234d906c46e871f5cffc", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -130,7 +130,7 @@ struct SuspensionPoint {\n     state: u32,\n     resume: BasicBlock,\n     drop: Option<BasicBlock>,\n-    storage_liveness: liveness::LocalSet<Local>,\n+    storage_liveness: liveness::LiveVarSet<Local>,\n }\n \n struct TransformVisitor<'a, 'tcx: 'a> {\n@@ -145,7 +145,7 @@ struct TransformVisitor<'a, 'tcx: 'a> {\n     remap: HashMap<Local, (Ty<'tcx>, usize)>,\n \n     // A map from a suspension point in a block to the locals which have live storage at that point\n-    storage_liveness: HashMap<BasicBlock, liveness::LocalSet<Local>>,\n+    storage_liveness: HashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n \n     // A list of suspension points, generated during the transform\n     suspension_points: Vec<SuspensionPoint>,\n@@ -317,7 +317,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n     new_ret_local\n }\n \n-struct StorageIgnored(liveness::LocalSet<Local>);\n+struct StorageIgnored(liveness::LiveVarSet<Local>);\n \n impl<'tcx> Visitor<'tcx> for StorageIgnored {\n     fn visit_statement(&mut self,\n@@ -332,7 +332,7 @@ impl<'tcx> Visitor<'tcx> for StorageIgnored {\n     }\n }\n \n-struct BorrowedLocals(liveness::LocalSet<Local>);\n+struct BorrowedLocals(liveness::LiveVarSet<Local>);\n \n fn mark_as_borrowed<'tcx>(place: &Place<'tcx>, locals: &mut BorrowedLocals) {\n     match *place {\n@@ -365,8 +365,8 @@ fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                mir: &Mir<'tcx>,\n                                                source: MirSource,\n                                                movable: bool) ->\n-                                               (liveness::LocalSet<Local>,\n-                                                HashMap<BasicBlock, liveness::LocalSet<Local>>) {\n+                                               (liveness::LiveVarSet<Local>,\n+                                                HashMap<BasicBlock, liveness::LiveVarSet<Local>>) {\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n \n@@ -396,7 +396,7 @@ fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     // Calculate the liveness of MIR locals ignoring borrows.\n-    let mut set = liveness::LocalSet::new_empty(mir.local_decls.len());\n+    let mut set = liveness::LiveVarSet::new_empty(mir.local_decls.len());\n     let mut liveness = liveness::liveness_of_locals(\n         mir,\n         LivenessMode {\n@@ -479,7 +479,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             mir: &mut Mir<'tcx>)\n     -> (HashMap<Local, (Ty<'tcx>, usize)>,\n         GeneratorLayout<'tcx>,\n-        HashMap<BasicBlock, liveness::LocalSet<Local>>)\n+        HashMap<BasicBlock, liveness::LiveVarSet<Local>>)\n {\n     // Use a liveness analysis to compute locals which are live across a suspension point\n     let (live_locals, storage_liveness) = locals_live_across_suspend_points(tcx,"}, {"sha": "cbfd7306bb6275796bd48f14cb4e580464155e20", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 17, "deletions": 56, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3339efda68a699d72aee33f8c31cbff8ebdff6/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=4e3339efda68a699d72aee33f8c31cbff8ebdff6", "patch": "@@ -37,7 +37,7 @@ use rustc::mir::visit::MirVisitable;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::Local;\n use rustc::mir::*;\n-use rustc::ty::{item_path, TyCtxt, TypeFoldable};\n+use rustc::ty::{item_path, TyCtxt};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::work_queue::WorkQueue;\n@@ -47,7 +47,7 @@ use std::path::{Path, PathBuf};\n use transform::MirSource;\n use util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n \n-pub type LocalSet<V> = IdxSetBuf<V>;\n+pub type LiveVarSet<V> = IdxSetBuf<V>;\n \n /// This gives the result of the liveness analysis at the boundary of\n /// basic blocks. You can use `simulate_block` to obtain the\n@@ -63,7 +63,7 @@ pub struct LivenessResult<V: Idx> {\n \n     /// Live variables on exit to each basic block. This is equal to\n     /// the union of the `ins` for each successor.\n-    pub outs: IndexVec<BasicBlock, LocalSet<V>>,\n+    pub outs: IndexVec<BasicBlock, LiveVarSet<V>>,\n }\n \n /// Defines the mapping to/from the MIR local variables (`Local`) to\n@@ -176,13 +176,13 @@ pub fn liveness_of_locals<'tcx, V: Idx>(\n         .map(|b| block(mode, map, b, num_live_vars))\n         .collect();\n \n-    let mut outs: IndexVec<_, LocalSet<V>> = mir\n+    let mut outs: IndexVec<_, LiveVarSet<V>> = mir\n         .basic_blocks()\n         .indices()\n-        .map(|_| LocalSet::new_empty(num_live_vars))\n+        .map(|_| LiveVarSet::new_empty(num_live_vars))\n         .collect();\n \n-    let mut bits = LocalSet::new_empty(num_live_vars);\n+    let mut bits = LiveVarSet::new_empty(num_live_vars);\n \n     // queue of things that need to be re-processed, and a set containing\n     // the things currently in the queue\n@@ -223,7 +223,7 @@ impl<V: Idx> LivenessResult<V> {\n         map: &impl LiveVariableMap<LiveVar = V>,\n         mut callback: OP,\n     ) where\n-        OP: FnMut(Location, &LocalSet<V>),\n+        OP: FnMut(Location, &LiveVarSet<V>),\n     {\n         let data = &mir[block];\n \n@@ -244,8 +244,8 @@ impl<V: Idx> LivenessResult<V> {\n             mode: self.mode,\n             map,\n             defs_uses: DefsUses {\n-                defs: LocalSet::new_empty(num_live_vars),\n-                uses: LocalSet::new_empty(num_live_vars),\n+                defs: LiveVarSet::new_empty(num_live_vars),\n+                uses: LiveVarSet::new_empty(num_live_vars),\n             },\n         };\n         // Visit the various parts of the basic block in reverse. If we go\n@@ -362,8 +362,8 @@ where\n \n #[derive(Eq, PartialEq, Clone)]\n struct DefsUses<V: Idx> {\n-    defs: LocalSet<V>,\n-    uses: LocalSet<V>,\n+    defs: LiveVarSet<V>,\n+    uses: LiveVarSet<V>,\n }\n \n impl<V: Idx> DefsUses<V> {\n@@ -372,7 +372,7 @@ impl<V: Idx> DefsUses<V> {\n         self.defs.clear();\n     }\n \n-    fn apply(&self, bits: &mut LocalSet<V>) -> bool {\n+    fn apply(&self, bits: &mut LiveVarSet<V>) -> bool {\n         bits.subtract(&self.defs) | bits.union(&self.uses)\n     }\n \n@@ -418,10 +418,10 @@ where\n         &mut self,\n         location: Location,\n         value: &impl MirVisitable<'tcx>,\n-        bits: &mut LocalSet<V>,\n+        bits: &mut LiveVarSet<V>,\n         callback: &mut OP,\n     ) where\n-        OP: FnMut(Location, &LocalSet<V>),\n+        OP: FnMut(Location, &LiveVarSet<V>),\n     {\n         value.apply(location, self);\n         self.defs_uses.apply(bits);\n@@ -455,8 +455,8 @@ fn block<'tcx, V: Idx>(\n         mode,\n         map,\n         defs_uses: DefsUses {\n-            defs: LocalSet::new_empty(locals),\n-            uses: LocalSet::new_empty(locals),\n+            defs: LiveVarSet::new_empty(locals),\n+            uses: LiveVarSet::new_empty(locals),\n         },\n     };\n \n@@ -527,7 +527,7 @@ pub fn write_mir_fn<'a, 'tcx, V: Idx>(\n ) -> io::Result<()> {\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n-        let print = |w: &mut dyn Write, prefix, result: &IndexVec<BasicBlock, LocalSet<V>>| {\n+        let print = |w: &mut dyn Write, prefix, result: &IndexVec<BasicBlock, LiveVarSet<V>>| {\n             let live: Vec<String> = result[block].iter()\n                 .map(|v| map.from_live_var(v))\n                 .map(|local| format!(\"{:?}\", local))\n@@ -545,43 +545,4 @@ pub fn write_mir_fn<'a, 'tcx, V: Idx>(\n     Ok(())\n }\n \n-crate struct NllLivenessMap {\n-    pub from_local: IndexVec<Local, Option<LocalWithRegion>>,\n-    pub to_local: IndexVec<LocalWithRegion, Local>,\n \n-}\n-\n-impl LiveVariableMap for NllLivenessMap {\n-    type LiveVar = LocalWithRegion;\n-\n-    fn from_local(&self, local: Local) -> Option<Self::LiveVar> {\n-        self.from_local[local]\n-    }\n-\n-    fn from_live_var(&self, local: Self::LiveVar) -> Local {\n-        self.to_local[local]\n-    }\n-\n-    fn num_variables(&self) -> usize {\n-        self.to_local.len()\n-    }\n-}\n-\n-impl NllLivenessMap {\n-    pub fn compute(mir: &Mir) -> Self {\n-        let mut to_local = IndexVec::default();\n-        let from_local: IndexVec<Local,Option<_>> = mir\n-            .local_decls\n-            .iter_enumerated()\n-            .map(|(local, local_decl)| {\n-            if local_decl.ty.has_free_regions() {\n-                Some(to_local.push(local))\n-            }\n-            else {\n-                None\n-            }\n-            }).collect();\n-\n-        Self { from_local, to_local }\n-    }\n-}"}]}