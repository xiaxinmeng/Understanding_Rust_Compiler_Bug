{"sha": "9747ee4755e6e3c4b4b4c7a0587df29123835cda", "node_id": "C_kwDOAAsO6NoAKDk3NDdlZTQ3NTVlNmUzYzRiNGI0YzdhMDU4N2RmMjkxMjM4MzVjZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-09T15:53:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-09T15:53:10Z"}, "message": "Auto merge of #93724 - Mark-Simulacrum:drop-query-stats, r=michaelwoerister\n\nDelete -Zquery-stats infrastructure\n\nThese statistics are computable from the self-profile data and/or ad-hoc collectable as needed, and in the meantime contribute to rustc bootstrap times -- locally, this PR shaves ~2.5% from rustc_query_impl builds in instruction counts.\n\nIf this does lose some functionality we want to keep, I think we should migrate it to self-profile (or a similar interface) rather than this ad-hoc reporting.", "tree": {"sha": "f7c413469aa224f1759c9cd14774c8ec4bee0c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c413469aa224f1759c9cd14774c8ec4bee0c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9747ee4755e6e3c4b4b4c7a0587df29123835cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9747ee4755e6e3c4b4b4c7a0587df29123835cda", "html_url": "https://github.com/rust-lang/rust/commit/9747ee4755e6e3c4b4b4c7a0587df29123835cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9747ee4755e6e3c4b4b4c7a0587df29123835cda/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cd0f786492aacf7426008cff48a25bc54b5f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cd0f786492aacf7426008cff48a25bc54b5f85", "html_url": "https://github.com/rust-lang/rust/commit/b7cd0f786492aacf7426008cff48a25bc54b5f85"}, {"sha": "257839bd88a42f9f4b117289f37cf2bc3c535cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/257839bd88a42f9f4b117289f37cf2bc3c535cb8", "html_url": "https://github.com/rust-lang/rust/commit/257839bd88a42f9f4b117289f37cf2bc3c535cb8"}], "stats": {"total": 122, "additions": 0, "deletions": 122}, "files": [{"sha": "89390ee1d6ccdcb30edfe75da2d307556b2a24c5", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=9747ee4755e6e3c4b4b4c7a0587df29123835cda", "patch": "@@ -400,10 +400,6 @@ impl Compiler {\n                 gcx.enter(rustc_query_impl::alloc_self_profile_query_strings);\n             }\n \n-            if self.session().opts.debugging_opts.query_stats {\n-                gcx.enter(rustc_query_impl::print_stats);\n-            }\n-\n             self.session()\n                 .time(\"serialize_dep_graph\", || gcx.enter(rustc_incremental::save_dep_graph));\n         }"}, {"sha": "9ab138c1b12a51f54e900efd0989ef8bf2329739", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9747ee4755e6e3c4b4b4c7a0587df29123835cda", "patch": "@@ -684,7 +684,6 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(print_type_sizes, true);\n     untracked!(proc_macro_backtrace, true);\n     untracked!(query_dep_graph, true);\n-    untracked!(query_stats, true);\n     untracked!(save_analysis, true);\n     untracked!(self_profile, SwitchWithOptPath::Enabled(None));\n     untracked!(self_profile_events, Some(vec![String::new()]));"}, {"sha": "00e2f610752574e100af9f993448695e4cb7f82b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=9747ee4755e6e3c4b4b4c7a0587df29123835cda", "patch": "@@ -28,9 +28,6 @@ mod plumbing;\n pub use plumbing::QueryCtxt;\n use rustc_query_system::query::*;\n \n-mod stats;\n-pub use self::stats::print_stats;\n-\n mod keys;\n use keys::Key;\n "}, {"sha": "c3bbd51f3d3cc13140b6f943247ef39a814b1585", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b7cd0f786492aacf7426008cff48a25bc54b5f85/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cd0f786492aacf7426008cff48a25bc54b5f85/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=b7cd0f786492aacf7426008cff48a25bc54b5f85", "patch": "@@ -1,112 +0,0 @@\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_middle::ty::query::query_storage;\n-use rustc_middle::ty::TyCtxt;\n-use rustc_query_system::query::{QueryCache, QueryCacheStore};\n-\n-use std::any::type_name;\n-use std::mem;\n-\n-trait KeyStats {\n-    fn key_stats(&self, stats: &mut QueryStats);\n-}\n-\n-impl<T> KeyStats for T {\n-    default fn key_stats(&self, _: &mut QueryStats) {}\n-}\n-\n-impl KeyStats for DefId {\n-    fn key_stats(&self, stats: &mut QueryStats) {\n-        if self.krate == LOCAL_CRATE {\n-            stats.local_def_id_keys = Some(stats.local_def_id_keys.unwrap_or(0) + 1);\n-        }\n-    }\n-}\n-\n-#[derive(Clone)]\n-struct QueryStats {\n-    name: &'static str,\n-    key_size: usize,\n-    key_type: &'static str,\n-    value_size: usize,\n-    value_type: &'static str,\n-    entry_count: usize,\n-    local_def_id_keys: Option<usize>,\n-}\n-\n-fn stats<C>(name: &'static str, map: &QueryCacheStore<C>) -> QueryStats\n-where\n-    C: QueryCache,\n-{\n-    let mut stats = QueryStats {\n-        name,\n-        key_size: mem::size_of::<C::Key>(),\n-        key_type: type_name::<C::Key>(),\n-        value_size: mem::size_of::<C::Value>(),\n-        value_type: type_name::<C::Value>(),\n-        entry_count: 0,\n-        local_def_id_keys: None,\n-    };\n-    map.iter_results(&mut |key, _, _| {\n-        stats.entry_count += 1;\n-        key.key_stats(&mut stats)\n-    });\n-    stats\n-}\n-\n-pub fn print_stats(tcx: TyCtxt<'_>) {\n-    let queries = query_stats(tcx);\n-\n-    let mut query_key_sizes = queries.clone();\n-    query_key_sizes.sort_by_key(|q| q.key_size);\n-    eprintln!(\"\\nLarge query keys:\");\n-    for q in query_key_sizes.iter().rev().filter(|q| q.key_size > 8) {\n-        eprintln!(\"   {} - {} x {} - {}\", q.name, q.key_size, q.entry_count, q.key_type);\n-    }\n-\n-    let mut query_value_sizes = queries.clone();\n-    query_value_sizes.sort_by_key(|q| q.value_size);\n-    eprintln!(\"\\nLarge query values:\");\n-    for q in query_value_sizes.iter().rev().filter(|q| q.value_size > 8) {\n-        eprintln!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n-    }\n-\n-    let mut query_value_count = queries.clone();\n-    query_value_count.sort_by_key(|q| q.entry_count);\n-    eprintln!(\"\\nQuery value count:\");\n-    for q in query_value_count.iter().rev() {\n-        eprintln!(\"   {} - {}\", q.name, q.entry_count);\n-    }\n-\n-    let mut def_id_density: Vec<_> =\n-        queries.iter().filter(|q| q.local_def_id_keys.is_some()).collect();\n-    def_id_density.sort_by_key(|q| q.local_def_id_keys.unwrap());\n-    eprintln!(\"\\nLocal DefId density:\");\n-    let total = tcx.resolutions(()).definitions.def_index_count() as f64;\n-    for q in def_id_density.iter().rev() {\n-        let local = q.local_def_id_keys.unwrap();\n-        eprintln!(\"   {} - {} = ({}%)\", q.name, local, (local as f64 * 100.0) / total);\n-    }\n-}\n-\n-macro_rules! print_stats {\n-    (<$tcx:tt>\n-        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($K:ty) -> $V:ty,)*\n-    ) => {\n-        fn query_stats(tcx: TyCtxt<'_>) -> Vec<QueryStats> {\n-            let mut queries = Vec::new();\n-\n-            $(\n-                queries.push(stats::<\n-                    query_storage::$name<'_>,\n-                >(\n-                    stringify!($name),\n-                    &tcx.query_caches.$name,\n-                ));\n-            )*\n-\n-            queries\n-        }\n-    }\n-}\n-\n-rustc_query_append! { [print_stats!][<'tcx>] }"}, {"sha": "550da9e05804fecc42e3fe6eec420bb8c3b4f60d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9747ee4755e6e3c4b4b4c7a0587df29123835cda/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9747ee4755e6e3c4b4b4c7a0587df29123835cda", "patch": "@@ -1369,8 +1369,6 @@ options! {\n         \"use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n-    query_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some statistics about the query system (default: no)\"),\n     randomize_layout: bool = (false, parse_bool, [TRACKED],\n         \"randomize the layout of types (default: no)\"),\n     layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],"}]}