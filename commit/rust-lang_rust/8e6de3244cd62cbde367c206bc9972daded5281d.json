{"sha": "8e6de3244cd62cbde367c206bc9972daded5281d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNmRlMzI0NGNkNjJjYmRlMzY3YzIwNmJjOTk3MmRhZGVkNTI4MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-16T08:08:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-16T08:08:51Z"}, "message": "Auto merge of #70010 - Amanieu:fix-opt-catch, r=Mark-Simulacrum\n\nAdd a workaround for catch_unwind in stage1 mingw target\n\nFixes #70001\n\ncc @petrochenkov\n\nr? @Mark-Simulacrum", "tree": {"sha": "924f2dc30bf0d4c1e7f3b7f5f1cf7e778649fa0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/924f2dc30bf0d4c1e7f3b7f5f1cf7e778649fa0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e6de3244cd62cbde367c206bc9972daded5281d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6de3244cd62cbde367c206bc9972daded5281d", "html_url": "https://github.com/rust-lang/rust/commit/8e6de3244cd62cbde367c206bc9972daded5281d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e6de3244cd62cbde367c206bc9972daded5281d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97eda01bb79de1e0a52994f52cfb5a527687f505", "url": "https://api.github.com/repos/rust-lang/rust/commits/97eda01bb79de1e0a52994f52cfb5a527687f505", "html_url": "https://github.com/rust-lang/rust/commit/97eda01bb79de1e0a52994f52cfb5a527687f505"}, {"sha": "864d05bc8a366daaa52807b37bb1ad86127bc23a", "url": "https://api.github.com/repos/rust-lang/rust/commits/864d05bc8a366daaa52807b37bb1ad86127bc23a", "html_url": "https://github.com/rust-lang/rust/commit/864d05bc8a366daaa52807b37bb1ad86127bc23a"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "10078bd4aee823b7ebd1397e7d781356e334f18d", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8e6de3244cd62cbde367c206bc9972daded5281d/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6de3244cd62cbde367c206bc9972daded5281d/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=8e6de3244cd62cbde367c206bc9972daded5281d", "patch": "@@ -277,36 +277,36 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n         Err(ManuallyDrop::into_inner(data.p))\n     };\n \n-    // Compatibility wrapper around the try intrinsic for bootstrap\n-    #[inline]\n+    // Compatibility wrapper around the try intrinsic for bootstrap.\n+    //\n+    // We also need to mark it #[inline(never)] to work around a bug on MinGW\n+    // targets: the unwinding implementation was relying on UB, but this only\n+    // becomes a problem in practice if inlining is involved.\n+    #[cfg(not(bootstrap))]\n+    use intrinsics::r#try as do_try;\n+    #[cfg(bootstrap)]\n+    #[inline(never)]\n     unsafe fn do_try(try_fn: fn(*mut u8), data: *mut u8, catch_fn: fn(*mut u8, *mut u8)) -> i32 {\n-        #[cfg(not(bootstrap))]\n-        {\n-            intrinsics::r#try(try_fn, data, catch_fn)\n-        }\n-        #[cfg(bootstrap)]\n-        {\n-            use crate::mem::MaybeUninit;\n+        use crate::mem::MaybeUninit;\n+        #[cfg(target_env = \"msvc\")]\n+        type TryPayload = [u64; 2];\n+        #[cfg(not(target_env = \"msvc\"))]\n+        type TryPayload = *mut u8;\n+\n+        let mut payload: MaybeUninit<TryPayload> = MaybeUninit::uninit();\n+        let payload_ptr = payload.as_mut_ptr() as *mut u8;\n+        let r = intrinsics::r#try(try_fn, data, payload_ptr);\n+        if r != 0 {\n             #[cfg(target_env = \"msvc\")]\n-            type TryPayload = [u64; 2];\n+            {\n+                catch_fn(data, payload_ptr)\n+            }\n             #[cfg(not(target_env = \"msvc\"))]\n-            type TryPayload = *mut u8;\n-\n-            let mut payload: MaybeUninit<TryPayload> = MaybeUninit::uninit();\n-            let payload_ptr = payload.as_mut_ptr() as *mut u8;\n-            let r = intrinsics::r#try(try_fn, data, payload_ptr);\n-            if r != 0 {\n-                #[cfg(target_env = \"msvc\")]\n-                {\n-                    catch_fn(data, payload_ptr)\n-                }\n-                #[cfg(not(target_env = \"msvc\"))]\n-                {\n-                    catch_fn(data, payload.assume_init())\n-                }\n+            {\n+                catch_fn(data, payload.assume_init())\n             }\n-            r\n         }\n+        r\n     }\n \n     // We consider unwinding to be rare, so mark this function as cold. However,\n@@ -320,7 +320,9 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n         obj\n     }\n \n-    #[inline]\n+    // See comment on do_try above for why #[inline(never)] is needed on bootstrap.\n+    #[cfg_attr(bootstrap, inline(never))]\n+    #[cfg_attr(not(bootstrap), inline)]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n         unsafe {\n             let data = data as *mut Data<F, R>;"}]}