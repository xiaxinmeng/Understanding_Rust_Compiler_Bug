{"sha": "4c2c523a0546480fe2ee1895802d80cfdcf4ad64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmM1MjNhMDU0NjQ4MGZlMmVlMTg5NTgwMmQ4MGNmZGNmNGFkNjQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-01T07:38:05Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-01T07:54:27Z"}, "message": "Move VecDeque::resize_with out of the impl<T:Clone> block", "tree": {"sha": "249db6fa7cb8ff692023086bb5137364f41e424c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249db6fa7cb8ff692023086bb5137364f41e424c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2c523a0546480fe2ee1895802d80cfdcf4ad64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2c523a0546480fe2ee1895802d80cfdcf4ad64", "html_url": "https://github.com/rust-lang/rust/commit/4c2c523a0546480fe2ee1895802d80cfdcf4ad64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2c523a0546480fe2ee1895802d80cfdcf4ad64/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef4dbfaa7df8221cb4e99cbda1299b47b1c2aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef4dbfaa7df8221cb4e99cbda1299b47b1c2aca", "html_url": "https://github.com/rust-lang/rust/commit/aef4dbfaa7df8221cb4e99cbda1299b47b1c2aca"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "b52e93f85d94fe62000cb38fdfe478a33c552225", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4c2c523a0546480fe2ee1895802d80cfdcf4ad64/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2c523a0546480fe2ee1895802d80cfdcf4ad64/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=4c2c523a0546480fe2ee1895802d80cfdcf4ad64", "patch": "@@ -19,7 +19,7 @@\n \n use core::cmp::Ordering;\n use core::fmt;\n-use core::iter::{repeat, repeat_with, FromIterator, FusedIterator};\n+use core::iter::{repeat_with, FromIterator, FusedIterator};\n use core::mem;\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{Index, IndexMut, RangeBounds};\n@@ -1886,16 +1886,16 @@ impl<T> VecDeque<T> {\n             debug_assert!(!self.is_full());\n         }\n     }\n-}\n \n-impl<T: Clone> VecDeque<T> {\n-    /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n-    /// either by removing excess elements from the back or by appending clones of `value`\n-    /// to the back.\n+    /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n+    /// either by removing excess elements from the back or by appending\n+    /// elements generated by calling `generator` to the back.\n     ///\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(vec_resize_with)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1904,32 +1904,36 @@ impl<T: Clone> VecDeque<T> {\n     /// buf.push_back(15);\n     /// assert_eq!(buf, [5, 10, 15]);\n     ///\n-    /// buf.resize(2, 0);\n+    /// buf.resize_with(5, Default::default);\n+    /// assert_eq!(buf, [5, 10, 15, 0, 0]);\n+    ///\n+    /// buf.resize_with(2, || unreachable!());\n     /// assert_eq!(buf, [5, 10]);\n     ///\n-    /// buf.resize(5, 20);\n-    /// assert_eq!(buf, [5, 10, 20, 20, 20]);\n+    /// let mut state = 100;\n+    /// buf.resize_with(5, || { state += 1; state });\n+    /// assert_eq!(buf, [5, 10, 101, 102, 103]);\n     /// ```\n-    #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n-    pub fn resize(&mut self, new_len: usize, value: T) {\n+    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n+    pub fn resize_with(&mut self, new_len: usize, generator: impl FnMut()->T) {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend(repeat(value).take(new_len - len))\n+            self.extend(repeat_with(generator).take(new_len - len))\n         } else {\n             self.truncate(new_len);\n         }\n     }\n+}\n \n-    /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n-    /// either by removing excess elements from the back or by appending\n-    /// elements generated by calling `generator` to the back.\n+impl<T: Clone> VecDeque<T> {\n+    /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n+    /// either by removing excess elements from the back or by appending clones of `value`\n+    /// to the back.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_resize_with)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1938,25 +1942,15 @@ impl<T: Clone> VecDeque<T> {\n     /// buf.push_back(15);\n     /// assert_eq!(buf, [5, 10, 15]);\n     ///\n-    /// buf.resize_with(5, Default::default);\n-    /// assert_eq!(buf, [5, 10, 15, 0, 0]);\n-    ///\n-    /// buf.resize_with(2, || unreachable!());\n+    /// buf.resize(2, 0);\n     /// assert_eq!(buf, [5, 10]);\n     ///\n-    /// let mut state = 100;\n-    /// buf.resize_with(5, || { state += 1; state });\n-    /// assert_eq!(buf, [5, 10, 101, 102, 103]);\n+    /// buf.resize(5, 20);\n+    /// assert_eq!(buf, [5, 10, 20, 20, 20]);\n     /// ```\n-    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n-    pub fn resize_with(&mut self, new_len: usize, generator: impl FnMut()->T) {\n-        let len = self.len();\n-\n-        if new_len > len {\n-            self.extend(repeat_with(generator).take(new_len - len))\n-        } else {\n-            self.truncate(new_len);\n-        }\n+    #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n+    pub fn resize(&mut self, new_len: usize, value: T) {\n+        self.resize_with(new_len, || value.clone());\n     }\n }\n "}]}