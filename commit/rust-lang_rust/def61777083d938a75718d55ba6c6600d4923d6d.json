{"sha": "def61777083d938a75718d55ba6c6600d4923d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZjYxNzc3MDgzZDkzOGE3NTcxOGQ1NWJhNmM2NjAwZDQ5MjNkNmQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-28T03:03:56Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-28T03:03:56Z"}, "message": "Move `look_for_tests` to `private_items_doc_tests`", "tree": {"sha": "2d912d86582c011583fb66f80c0e47789b5aca62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d912d86582c011583fb66f80c0e47789b5aca62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/def61777083d938a75718d55ba6c6600d4923d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/def61777083d938a75718d55ba6c6600d4923d6d", "html_url": "https://github.com/rust-lang/rust/commit/def61777083d938a75718d55ba6c6600d4923d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/def61777083d938a75718d55ba6c6600d4923d6d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "617d10975ef1db8ab9fcf3b5720a147f36b69f41", "url": "https://api.github.com/repos/rust-lang/rust/commits/617d10975ef1db8ab9fcf3b5720a147f36b69f41", "html_url": "https://github.com/rust-lang/rust/commit/617d10975ef1db8ab9fcf3b5720a147f36b69f41"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "a21b5d10ed17e846038733784cccf4b4b0bdd976", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/def61777083d938a75718d55ba6c6600d4923d6d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def61777083d938a75718d55ba6c6600d4923d6d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=def61777083d938a75718d55ba6c6600d4923d6d", "patch": "@@ -3,7 +3,6 @@\n \n use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_middle::middle::privacy::AccessLevels;\n-use rustc_session::lint;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::mem;\n use std::ops::Range;\n@@ -12,7 +11,6 @@ use self::Condition::*;\n use crate::clean::{self, GetDefId, Item};\n use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n-use crate::html::markdown::{find_testable_code, ErrorCodes, LangString};\n \n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n@@ -312,59 +310,6 @@ impl DocFolder for ImportStripper {\n     }\n }\n \n-pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n-    let hir_id = match cx.as_local_hir_id(item.def_id) {\n-        Some(hir_id) => hir_id,\n-        None => {\n-            // If non-local, no need to check anything.\n-            return;\n-        }\n-    };\n-\n-    struct Tests {\n-        found_tests: usize,\n-    }\n-\n-    impl crate::test::Tester for Tests {\n-        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-            self.found_tests += 1;\n-        }\n-    }\n-\n-    let mut tests = Tests { found_tests: 0 };\n-\n-    find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n-\n-    if tests.found_tests == 0 {\n-        use clean::ItemEnum::*;\n-\n-        let should_report = match item.inner {\n-            ExternCrateItem(_, _) | ImportItem(_) | PrimitiveItem(_) | KeywordItem(_) => false,\n-            _ => true,\n-        };\n-        if should_report {\n-            debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n-            cx.tcx.struct_span_lint_hir(\n-                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-                hir_id,\n-                sp,\n-                |lint| lint.build(\"missing code example in this documentation\").emit(),\n-            );\n-        }\n-    } else if rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n-        && tests.found_tests > 0\n-        && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n-    {\n-        cx.tcx.struct_span_lint_hir(\n-            lint::builtin::PRIVATE_DOC_TESTS,\n-            hir_id,\n-            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n-            |lint| lint.build(\"documentation test in private item\").emit(),\n-        );\n-    }\n-}\n-\n /// Returns a span encompassing all the given attributes.\n crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {"}, {"sha": "b869e68da4c14eb23d58008ecb5a7191161c1c22", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/def61777083d938a75718d55ba6c6600d4923d6d/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def61777083d938a75718d55ba6c6600d4923d6d/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=def61777083d938a75718d55ba6c6600d4923d6d", "patch": "@@ -1,7 +1,14 @@\n+//! This pass is overloaded and runs two different lints.\n+//!\n+//! - MISSING_DOC_CODE_EXAMPLES: this looks for public items missing doc-tests\n+//! - PRIVATE_DOC_TESTS: this looks for private items with doc-tests.\n+\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::passes::{look_for_tests, Pass};\n+use super::{span_of_attrs, Pass};\n+use crate::html::markdown::{find_testable_code, ErrorCodes, LangString};\n+use rustc_session::lint;\n \n pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n     name: \"check-private-items-doc-tests\",\n@@ -35,3 +42,56 @@ impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n         self.fold_item_recur(item)\n     }\n }\n+\n+pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n+    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+        Some(hir_id) => hir_id,\n+        None => {\n+            // If non-local, no need to check anything.\n+            return;\n+        }\n+    };\n+\n+    struct Tests {\n+        found_tests: usize,\n+    }\n+\n+    impl crate::test::Tester for Tests {\n+        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+            self.found_tests += 1;\n+        }\n+    }\n+\n+    let mut tests = Tests { found_tests: 0 };\n+\n+    find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n+\n+    if tests.found_tests == 0 {\n+        use ItemEnum::*;\n+\n+        let should_report = match item.inner {\n+            ExternCrateItem(_, _) | ImportItem(_) | PrimitiveItem(_) | KeywordItem(_) => false,\n+            _ => true,\n+        };\n+        if should_report {\n+            debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            cx.tcx.struct_span_lint_hir(\n+                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+                hir_id,\n+                sp,\n+                |lint| lint.build(\"missing code example in this documentation\").emit(),\n+            );\n+        }\n+    } else if rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n+        && tests.found_tests > 0\n+        && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n+    {\n+        cx.tcx.struct_span_lint_hir(\n+            lint::builtin::PRIVATE_DOC_TESTS,\n+            hir_id,\n+            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+            |lint| lint.build(\"documentation test in private item\").emit(),\n+        );\n+    }\n+}"}]}