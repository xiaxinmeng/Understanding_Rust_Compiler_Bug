{"sha": "0d16dcfce11ef524f34f8179352d2dc701808cfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTZkY2ZjZTExZWY1MjRmMzRmODE3OTM1MmQyZGM3MDE4MDhjZmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-03T12:29:04Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-03T13:11:24Z"}, "message": "Don't try to store func_addr for FnDef in trans_const_value\n\nThis would crash, because the place provides 0 bytes of space for FnDef", "tree": {"sha": "08d874e64150a035a3484ebeff9b147f785e6a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d874e64150a035a3484ebeff9b147f785e6a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d16dcfce11ef524f34f8179352d2dc701808cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d16dcfce11ef524f34f8179352d2dc701808cfc", "html_url": "https://github.com/rust-lang/rust/commit/0d16dcfce11ef524f34f8179352d2dc701808cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d16dcfce11ef524f34f8179352d2dc701808cfc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c693b7646ed57fc7a061cc5b13886815527a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c693b7646ed57fc7a061cc5b13886815527a8d", "html_url": "https://github.com/rust-lang/rust/commit/07c693b7646ed57fc7a061cc5b13886815527a8d"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "ef96b89f799533fb220658b380f3aa79a15a533b", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d16dcfce11ef524f34f8179352d2dc701808cfc/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d16dcfce11ef524f34f8179352d2dc701808cfc/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0d16dcfce11ef524f34f8179352d2dc701808cfc", "patch": "@@ -474,9 +474,17 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     lval.write_cvalue(fx, CValue::ByVal(res, layout));\n                 }\n                 Rvalue::Cast(CastKind::ReifyFnPointer, operand, ty) => {\n-                    let operand = trans_operand(fx, operand);\n                     let layout = fx.layout_of(ty);\n-                    lval.write_cvalue(fx, operand.unchecked_cast_to(layout));\n+                    match fx.monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx)).sty {\n+                        ty::FnDef(def_id, substs) => {\n+                            let func_ref = fx.get_function_ref(\n+                                Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n+                            );\n+                            let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n+                            lval.write_cvalue(fx, CValue::ByVal(func_addr, layout));\n+                        }\n+                        _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", ty),\n+                    }\n                 }\n                 Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty) => {\n                     let operand = trans_operand(fx, operand);"}, {"sha": "1af5a2868819337accc45b9a1613472d53048f22", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d16dcfce11ef524f34f8179352d2dc701808cfc/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d16dcfce11ef524f34f8179352d2dc701808cfc/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=0d16dcfce11ef524f34f8179352d2dc701808cfc", "patch": "@@ -110,12 +110,11 @@ fn trans_const_value<'a, 'tcx: 'a>(\n             let bits = const_.val.try_to_bits(layout.size).unwrap();\n             CValue::const_val(fx, ty, bits as i128 as i64)\n         }\n-        ty::FnDef(def_id, substs) => {\n-            let func_ref = fx.get_function_ref(\n-                Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n-            );\n-            let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n-            CValue::ByVal(func_addr, layout)\n+        ty::FnDef(_def_id, _substs) => {\n+            CValue::ByRef(\n+                fx.bcx.ins().iconst(fx.pointer_type, 0),\n+                layout\n+            )\n         }\n         _ => trans_const_place(fx, const_).to_cvalue(fx),\n     }"}]}