{"sha": "435b0abd49f3b0146b7c8710a26411be88d4a844", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNWIwYWJkNDlmM2IwMTQ2YjdjODcxMGEyNjQxMWJlODhkNGE4NDQ=", "commit": {"author": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-08-20T11:26:57Z"}, "committer": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-08-20T16:29:44Z"}, "message": "refactor filter_tests\n\nsame behaviour, just shorter", "tree": {"sha": "4b9b1dec499d8b86e3d1b5f53de6379ab3136eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b9b1dec499d8b86e3d1b5f53de6379ab3136eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435b0abd49f3b0146b7c8710a26411be88d4a844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435b0abd49f3b0146b7c8710a26411be88d4a844", "html_url": "https://github.com/rust-lang/rust/commit/435b0abd49f3b0146b7c8710a26411be88d4a844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435b0abd49f3b0146b7c8710a26411be88d4a844/comments", "author": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28f648a9699db67b86735f97d609c3dd06f9ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f648a9699db67b86735f97d609c3dd06f9ded", "html_url": "https://github.com/rust-lang/rust/commit/f28f648a9699db67b86735f97d609c3dd06f9ded"}], "stats": {"total": 66, "additions": 23, "deletions": 43}, "files": [{"sha": "5a0663f776b788b04bf960d37853d714a8b5ff54", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/435b0abd49f3b0146b7c8710a26411be88d4a844/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435b0abd49f3b0146b7c8710a26411be88d4a844/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=435b0abd49f3b0146b7c8710a26411be88d4a844", "patch": "@@ -1296,54 +1296,34 @@ fn get_concurrency() -> usize {\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {\n     let mut filtered = tests;\n-    // Remove tests that don't match the test filter\n-    filtered = match opts.filter {\n-        None => filtered,\n-        Some(ref filter) => filtered\n-            .into_iter()\n-            .filter(|test| {\n-                if opts.filter_exact {\n-                    test.desc.name.as_slice() == &filter[..]\n-                } else {\n-                    test.desc.name.as_slice().contains(&filter[..])\n-                }\n-            })\n-            .collect(),\n+    let matches_filter = |test: &TestDescAndFn, filter: &str| {\n+        let test_name = test.desc.name.as_slice();\n+\n+        match opts.filter_exact {\n+            true => test_name == filter,\n+            false => test_name.contains(filter),\n+        }\n     };\n \n+    // Remove tests that don't match the test filter\n+    if let Some(ref filter) = opts.filter {\n+        filtered.retain(|test| matches_filter(test, filter));\n+    }\n+\n     // Skip tests that match any of the skip filters\n-    filtered = filtered\n-        .into_iter()\n-        .filter(|t| {\n-            !opts.skip.iter().any(|sf| {\n-                if opts.filter_exact {\n-                    t.desc.name.as_slice() == &sf[..]\n-                } else {\n-                    t.desc.name.as_slice().contains(&sf[..])\n-                }\n-            })\n-        })\n-        .collect();\n+    filtered.retain(|test| {\n+        !opts.skip.iter().any(|sf| matches_filter(test, sf))\n+    });\n \n     // Maybe pull out the ignored test and unignore them\n-    filtered = if !opts.run_ignored {\n-        filtered\n-    } else {\n-        fn filter(test: TestDescAndFn) -> Option<TestDescAndFn> {\n-            if test.desc.ignore {\n-                let TestDescAndFn { desc, testfn } = test;\n-                Some(TestDescAndFn {\n-                    desc: TestDesc {\n-                        ignore: false,\n-                        ..desc\n-                    },\n-                    testfn,\n-                })\n-            } else {\n-                None\n-            }\n-        }\n-        filtered.into_iter().filter_map(filter).collect()\n+    if opts.run_ignored {\n+        filtered = filtered.into_iter()\n+            .filter(|test| test.desc.ignore)\n+            .map(|mut test| {\n+                test.desc.ignore = false;\n+                test\n+            })\n+            .collect();\n     };\n \n     // Sort the tests alphabetically"}]}