{"sha": "29ed9a56e3b5538f52f45723933fd769e9411d58", "node_id": "C_kwDOAAsO6NoAKDI5ZWQ5YTU2ZTNiNTUzOGY1MmY0NTcyMzkzM2ZkNzY5ZTk0MTFkNTg", "commit": {"author": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-31T16:45:44Z"}, "committer": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-31T16:45:44Z"}, "message": "migrate `maybe_consume_incorrect_semicolon` diagnostic", "tree": {"sha": "ece7817958321337611881b97fdbf75593787c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece7817958321337611881b97fdbf75593787c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ed9a56e3b5538f52f45723933fd769e9411d58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCYpZGOAAKCRAnUl7150IK\nUPyQAQCS9ZJQWby6EWqXtK9ER8WMFxjklPTkh0mAPqEpvI3rlgD+IEk+nncyQop2\ntmJem3y7/w4k1Ww7G9WXYrQOf8DtiQ0=\n=xBZb\n-----END PGP SIGNATURE-----", "payload": "tree ece7817958321337611881b97fdbf75593787c1b\nparent bd4d1cd7a2edd98a92b85997812e70aee5e740c7\nauthor Christian Poveda <git@pvdrz.com> 1654015544 -0500\ncommitter Christian Poveda <git@pvdrz.com> 1654015544 -0500\n\nmigrate `maybe_consume_incorrect_semicolon` diagnostic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ed9a56e3b5538f52f45723933fd769e9411d58", "html_url": "https://github.com/rust-lang/rust/commit/29ed9a56e3b5538f52f45723933fd769e9411d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ed9a56e3b5538f52f45723933fd769e9411d58/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4d1cd7a2edd98a92b85997812e70aee5e740c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4d1cd7a2edd98a92b85997812e70aee5e740c7", "html_url": "https://github.com/rust-lang/rust/commit/bd4d1cd7a2edd98a92b85997812e70aee5e740c7"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "90124b64f3cb3b4267ab96f0d23038aea4af5608", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29ed9a56e3b5538f52f45723933fd769e9411d58/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/29ed9a56e3b5538f52f45723933fd769e9411d58/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=29ed9a56e3b5538f52f45723933fd769e9411d58", "patch": "@@ -18,3 +18,8 @@ parser-expect-path = expected a path\n parser-maybe-recover-from-bad-qpath-stage-2 =\n     missing angle brackets in associated item path\n     .suggestion = try: `{$ty}`\n+\n+parser-incorrect-semicolon =\n+    expected item, found `;`\n+    .suggestion = remove this semicolon\n+    .help = {$name} declarations are not followed by a semicolon"}, {"sha": "9bfd4098968d3953ab8ef6fc3b63e2e70011cc8f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29ed9a56e3b5538f52f45723933fd769e9411d58/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed9a56e3b5538f52f45723933fd769e9411d58/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=29ed9a56e3b5538f52f45723933fd769e9411d58", "patch": "@@ -295,6 +295,17 @@ struct BadQPathStage2 {\n     ty: String,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-incorrect-semicolon\")]\n+struct IncorrectSemicolon<'a> {\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\")]\n+    span: Span,\n+    #[help]\n+    opt_help: Option<()>,\n+    name: &'a str,\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1490,13 +1501,10 @@ impl<'a> Parser<'a> {\n     pub fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n         if self.token.kind == TokenKind::Semi {\n             self.bump();\n-            let mut err = self.struct_span_err(self.prev_token.span, \"expected item, found `;`\");\n-            err.span_suggestion_short(\n-                self.prev_token.span,\n-                \"remove this semicolon\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n+\n+            let mut err =\n+                IncorrectSemicolon { span: self.prev_token.span, opt_help: None, name: \"\" };\n+\n             if !items.is_empty() {\n                 let previous_item = &items[items.len() - 1];\n                 let previous_item_kind_name = match previous_item.kind {\n@@ -1509,10 +1517,11 @@ impl<'a> Parser<'a> {\n                     _ => None,\n                 };\n                 if let Some(name) = previous_item_kind_name {\n-                    err.help(&format!(\"{name} declarations are not followed by a semicolon\"));\n+                    err.opt_help = Some(());\n+                    err.name = name;\n                 }\n             }\n-            err.emit();\n+            self.sess.emit_err(err);\n             true\n         } else {\n             false"}]}