{"sha": "f8478df6dcdf92192f0df550145283673c494a73", "node_id": "C_kwDOAAsO6NoAKGY4NDc4ZGY2ZGNkZjkyMTkyZjBkZjU1MDE0NTI4MzY3M2M0OTRhNzM", "commit": {"author": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2022-05-14T18:03:47Z"}, "committer": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2022-05-14T18:03:47Z"}, "message": "Bump rustc for permissive provenance", "tree": {"sha": "5e14e879ea699797e60f0f9e6c98bf789365a926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e14e879ea699797e60f0f9e6c98bf789365a926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8478df6dcdf92192f0df550145283673c494a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8478df6dcdf92192f0df550145283673c494a73", "html_url": "https://github.com/rust-lang/rust/commit/f8478df6dcdf92192f0df550145283673c494a73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8478df6dcdf92192f0df550145283673c494a73/comments", "author": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d76c2c5e1c189b3ad89b8eab080d2b1f97f7d986", "url": "https://api.github.com/repos/rust-lang/rust/commits/d76c2c5e1c189b3ad89b8eab080d2b1f97f7d986", "html_url": "https://github.com/rust-lang/rust/commit/d76c2c5e1c189b3ad89b8eab080d2b1f97f7d986"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "1c54dc72ba4b0d2cc0e191a9f10746dec14d930e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8478df6dcdf92192f0df550145283673c494a73/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/f8478df6dcdf92192f0df550145283673c494a73/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=f8478df6dcdf92192f0df550145283673c494a73", "patch": "@@ -1 +1 @@\n-481db40311cdd241ae4d33f34f2f75732e44d8e8\n+2d691170885b32502b391b8b1a0d54d2419a5653"}, {"sha": "035f5df70723bb930051ab63b351cac447cf2167", "filename": "src/machine.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8478df6dcdf92192f0df550145283673c494a73/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8478df6dcdf92192f0df550145283673c494a73/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f8478df6dcdf92192f0df550145283673c494a73", "patch": "@@ -158,8 +158,8 @@ impl Provenance for Tag {\n         write!(f, \"{:?}\", tag.sb)\n     }\n \n-    fn get_alloc_id(self) -> AllocId {\n-        self.alloc_id\n+    fn get_alloc_id(self) -> Option<AllocId> {\n+        Some(self.alloc_id)\n     }\n }\n \n@@ -600,21 +600,37 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn ptr_from_addr(\n+    fn ptr_from_addr_cast(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         addr: u64,\n     ) -> Pointer<Option<Self::PointerTag>> {\n         intptrcast::GlobalStateInner::ptr_from_addr(addr, ecx)\n     }\n \n+    #[inline(always)]\n+    fn ptr_from_addr_transmute(\n+        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        addr: u64,\n+    ) -> Pointer<Option<Self::PointerTag>> {\n+        Self::ptr_from_addr_cast(ecx, addr)\n+    }\n+\n+    #[inline(always)]\n+    fn expose_ptr(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _ptr: Pointer<Self::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n+\n     /// Convert a pointer with provenance into an allocation-offset pair,\n     /// or a `None` with an absolute address if that conversion is not possible.\n     fn ptr_get_alloc(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         ptr: Pointer<Self::PointerTag>,\n-    ) -> (AllocId, Size, Self::TagExtra) {\n+    ) -> Option<(AllocId, Size, Self::TagExtra)> {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);\n-        (ptr.provenance.alloc_id, rel, ptr.provenance.sb)\n+        Some((ptr.provenance.alloc_id, rel, ptr.provenance.sb))\n     }\n \n     #[inline(always)]"}]}