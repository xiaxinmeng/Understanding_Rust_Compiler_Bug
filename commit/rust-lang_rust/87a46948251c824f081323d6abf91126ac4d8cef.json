{"sha": "87a46948251c824f081323d6abf91126ac4d8cef", "node_id": "C_kwDOAAsO6NoAKDg3YTQ2OTQ4MjUxYzgyNGYwODEzMjNkNmFiZjkxMTI2YWM0ZDhjZWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T22:03:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-18T22:03:08Z"}, "message": "Rollup merge of #105879 - Nilstrieb:revert-hir-arena, r=oli-obk\n\nRevert \"Introduce lowering_arena to avoid creating AST nodes on the fly\"\n\nThis reverts commit d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231 (#101499).\n\nThis was originally part of #101345 which has now been closed as a different approach is taken now.\n\nr? `@oli-obk`\n\ncc `@spastorino`", "tree": {"sha": "a9400da04e9e4934a28ba4fb01342b6940ff58a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9400da04e9e4934a28ba4fb01342b6940ff58a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a46948251c824f081323d6abf91126ac4d8cef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjn44cCRBK7hj4Ov3rIwAAVeEIAKlDoQtJFqAg0PrWbkyAifus\nXXDNluI6wH180msDKOowi8wjdz+CqMxT2kikP/+KyJndAqM2ByoIUSX1Rk4ABQ7H\nAysIIrUmdMkSz+gY5cT8MvPDAIo/BsN8obBeAJNaSE7YLwNdBh0ErrKFY3icaNCv\n+MiN8s4He27QBK1eSM/SzFtd3VdzSkgGzeXIknDr1oeSdrj+dxauARzv/m2lfO4d\nt4yKueRHl0hDAFBrW79EUdlh+ClQOOso0WJas6gcbtsqExq9QCQig0NKh+gNPjgR\ngQ9Es692JzzZtc5q7PIDL1QM+7UfdMeB3MyNy+AqnKFUagFT9S76YrpIK2uYiio=\n=hNrp\n-----END PGP SIGNATURE-----\n", "payload": "tree a9400da04e9e4934a28ba4fb01342b6940ff58a1\nparent ebe35637642fea72759d41f26385e3c59f1b01c0\nparent d59a2ac2bc42fb76d208da256ec0ed4887633319\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671400988 +0100\ncommitter GitHub <noreply@github.com> 1671400988 +0100\n\nRollup merge of #105879 - Nilstrieb:revert-hir-arena, r=oli-obk\n\nRevert \"Introduce lowering_arena to avoid creating AST nodes on the fly\"\n\nThis reverts commit d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231 (#101499).\n\nThis was originally part of #101345 which has now been closed as a different approach is taken now.\n\nr? `@oli-obk`\n\ncc `@spastorino`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a46948251c824f081323d6abf91126ac4d8cef", "html_url": "https://github.com/rust-lang/rust/commit/87a46948251c824f081323d6abf91126ac4d8cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a46948251c824f081323d6abf91126ac4d8cef/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe35637642fea72759d41f26385e3c59f1b01c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe35637642fea72759d41f26385e3c59f1b01c0", "html_url": "https://github.com/rust-lang/rust/commit/ebe35637642fea72759d41f26385e3c59f1b01c0"}, {"sha": "d59a2ac2bc42fb76d208da256ec0ed4887633319", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59a2ac2bc42fb76d208da256ec0ed4887633319", "html_url": "https://github.com/rust-lang/rust/commit/d59a2ac2bc42fb76d208da256ec0ed4887633319"}], "stats": {"total": 59, "additions": 21, "deletions": 38}, "files": [{"sha": "9d4c2900eaf41aa12e6edb21621132a071f88374", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87a46948251c824f081323d6abf91126ac4d8cef/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a46948251c824f081323d6abf91126ac4d8cef/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=87a46948251c824f081323d6abf91126ac4d8cef", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{InvalidAbi, InvalidAbiSuggestion, MisplacedRelaxTraitBound};\n use super::ResolverAstLoweringExt;\n-use super::{Arena, AstOwner, ImplTraitContext, ImplTraitPosition};\n+use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -24,7 +24,6 @@ use thin_vec::ThinVec;\n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n-    pub(super) ast_arena: &'a Arena<'static>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n@@ -60,7 +59,6 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             tcx: self.tcx,\n             resolver: self.resolver,\n             arena: self.tcx.hir_arena,\n-            ast_arena: self.ast_arena,\n \n             // HirId handling.\n             bodies: Vec::new(),"}, {"sha": "fe0d0747be60c387a9decb81a868ffd5db8a9faf", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/87a46948251c824f081323d6abf91126ac4d8cef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a46948251c824f081323d6abf91126ac4d8cef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=87a46948251c824f081323d6abf91126ac4d8cef", "patch": "@@ -42,7 +42,6 @@ extern crate tracing;\n \n use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait, TraitFnAsync};\n \n-use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -94,13 +93,6 @@ struct LoweringContext<'a, 'hir> {\n     /// Used to allocate HIR nodes.\n     arena: &'hir hir::Arena<'hir>,\n \n-    /// Used to allocate temporary AST nodes for use during lowering.\n-    /// This allows us to create \"fake\" AST -- these nodes can sometimes\n-    /// be allocated on the stack, but other times we need them to live longer\n-    /// than the current stack frame, so they can be collected into vectors\n-    /// and things like that.\n-    ast_arena: &'a Arena<'static>,\n-\n     /// Bodies inside the owner being lowered.\n     bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n     /// Attributes inside the owner being lowered.\n@@ -146,15 +138,6 @@ struct LoweringContext<'a, 'hir> {\n     generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n }\n \n-declare_arena!([\n-    [] tys: rustc_ast::Ty,\n-    [] aba: rustc_ast::AngleBracketedArgs,\n-    [] ptr: rustc_ast::PolyTraitRef,\n-    // This _marker field is needed because `declare_arena` creates `Arena<'tcx>` and we need to\n-    // use `'tcx`. If we don't have this we get a compile error.\n-    [] _marker: std::marker::PhantomData<&'tcx ()>,\n-]);\n-\n trait ResolverAstLoweringExt {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n     fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n@@ -442,13 +425,10 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n         tcx.definitions_untracked().def_index_count(),\n     );\n \n-    let ast_arena = Arena::default();\n-\n     for def_id in ast_index.indices() {\n         item::ItemLowerer {\n             tcx,\n             resolver: &mut resolver,\n-            ast_arena: &ast_arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n@@ -1001,8 +981,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 GenericArgs::Parenthesized(data) => {\n                     self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    let aba = self.ast_arena.aba.alloc(data.as_angle_bracketed_args());\n-                    self.lower_angle_bracketed_parameter_data(aba, ParamMode::Explicit, itctx).0\n+                    self.lower_angle_bracketed_parameter_data(\n+                        &data.as_angle_bracketed_args(),\n+                        ParamMode::Explicit,\n+                        itctx,\n+                    )\n+                    .0\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -1067,13 +1051,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n-                        let ty = this.ast_arena.tys.alloc(Ty {\n-                            id: node_id,\n-                            kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                            span: this.lower_span(constraint.span),\n-                            tokens: None,\n-                        });\n-                        let ty = this.lower_ty(ty, itctx);\n+                        let ty = this.lower_ty(\n+                            &Ty {\n+                                id: node_id,\n+                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                                span: this.lower_span(constraint.span),\n+                                tokens: None,\n+                            },\n+                            itctx,\n+                        );\n \n                         hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n@@ -1217,13 +1203,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             && let Some(Res::Def(DefKind::Trait | DefKind::TraitAlias, _)) = partial_res.full_res()\n         {\n             let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n-                let poly_trait_ref = this.ast_arena.ptr.alloc(PolyTraitRef {\n-                    bound_generic_params: vec![],\n-                    trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n-                    span: t.span\n-                });\n                 let bound = this.lower_poly_trait_ref(\n-                    poly_trait_ref,\n+                    &PolyTraitRef {\n+                        bound_generic_params: vec![],\n+                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                        span: t.span\n+                    },\n                     itctx,\n                 );\n                 let bounds = this.arena.alloc_from_iter([bound]);"}]}