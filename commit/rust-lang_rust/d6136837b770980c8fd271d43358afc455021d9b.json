{"sha": "d6136837b770980c8fd271d43358afc455021d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTM2ODM3Yjc3MDk4MGM4ZmQyNzFkNDMzNThhZmM0NTUwMjFkOWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T15:09:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "convert `predicates` to operate on 1 predicate at a time", "tree": {"sha": "0468612d04f3838f8e55056e3e956dc5cf7bed6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0468612d04f3838f8e55056e3e956dc5cf7bed6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6136837b770980c8fd271d43358afc455021d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6136837b770980c8fd271d43358afc455021d9b", "html_url": "https://github.com/rust-lang/rust/commit/d6136837b770980c8fd271d43358afc455021d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6136837b770980c8fd271d43358afc455021d9b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4beea9943b541e9165bfcbba8b15f9008a7434d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4beea9943b541e9165bfcbba8b15f9008a7434d1", "html_url": "https://github.com/rust-lang/rust/commit/4beea9943b541e9165bfcbba8b15f9008a7434d1"}], "stats": {"total": 60, "additions": 23, "deletions": 37}, "files": [{"sha": "6cda9ea15184ad550f0ead3ab151da6fae756488", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6136837b770980c8fd271d43358afc455021d9b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6136837b770980c8fd271d43358afc455021d9b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=d6136837b770980c8fd271d43358afc455021d9b", "patch": "@@ -23,7 +23,7 @@ pub mod custom;\n pub mod eq;\n pub mod normalize;\n pub mod outlives;\n-pub mod predicates;\n+pub mod prove_predicate;\n pub mod subtype;\n \n pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {"}, {"sha": "7dacf6a7dea11ce763d2e5d81ee0df0198059254", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "renamed", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d6136837b770980c8fd271d43358afc455021d9b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6136837b770980c8fd271d43358afc455021d9b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=d6136837b770980c8fd271d43358afc455021d9b", "patch": "@@ -9,43 +9,36 @@\n // except according to those terms.\n \n use infer::{InferCtxt, InferOk, InferResult};\n-use traits::{Obligation, ObligationCause, PredicateObligation};\n+use traits::{Obligation, ObligationCause};\n use ty::{ParamEnv, Predicate, TyCtxt};\n \n #[derive(Debug)]\n-pub struct ProvePredicates<'tcx> {\n-    obligations: Vec<PredicateObligation<'tcx>>,\n+pub struct ProvePredicate<'tcx> {\n+    param_env: ParamEnv<'tcx>,\n+    predicate: Predicate<'tcx>,\n }\n \n-impl<'tcx> ProvePredicates<'tcx> {\n+impl<'tcx> ProvePredicate<'tcx> {\n     pub fn new(\n         param_env: ParamEnv<'tcx>,\n-        predicates: impl IntoIterator<Item = Predicate<'tcx>>,\n+        predicate: Predicate<'tcx>,\n     ) -> Self {\n-        ProvePredicates {\n-            obligations: predicates\n-                .into_iter()\n-                .map(|p| Obligation::new(ObligationCause::dummy(), param_env, p))\n-                .collect(),\n-        }\n+        ProvePredicate { param_env, predicate }\n     }\n }\n \n-impl<'gcx, 'tcx> super::TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n+impl<'gcx, 'tcx> super::TypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::Output, Self> {\n-        if self.obligations.is_empty() {\n-            Ok(())\n-        } else {\n-            Err(self)\n-        }\n+        Err(self)\n     }\n \n     fn perform(self, _infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n+        let obligation = Obligation::new(ObligationCause::dummy(), self.param_env, self.predicate);\n         Ok(InferOk {\n             value: (),\n-            obligations: self.obligations,\n+            obligations: vec![obligation],\n         })\n     }\n }", "previous_filename": "src/librustc/traits/query/type_op/predicates.rs"}, {"sha": "1f45a8ba1739d8b9b30549a54b55db614892457d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d6136837b770980c8fd271d43358afc455021d9b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6136837b770980c8fd271d43358afc455021d9b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=d6136837b770980c8fd271d43358afc455021d9b", "patch": "@@ -1545,26 +1545,19 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         predicates: impl IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n         location: Location,\n     ) {\n-        // This intermediate vector is mildly unfortunate, in that we\n-        // sometimes create it even when logging is disabled, but only\n-        // if debug-info is enabled, and I doubt it is actually\n-        // expensive. -nmatsakis\n-        let predicates_vec: Vec<_> = if cfg!(debug_assertions) {\n-            predicates.clone().into_iter().collect()\n-        } else {\n-            Vec::new()\n-        };\n \n-        debug!(\n-            \"prove_predicates(predicates={:?}, location={:?})\",\n-            predicates_vec, location,\n-        );\n+        for predicate in predicates {\n+            debug!(\n+                \"prove_predicates(predicate={:?}, location={:?})\",\n+                predicate, location,\n+            );\n \n-        let param_env = self.param_env;\n-        self.fully_perform_op(\n-            location.at_self(),\n-            type_op::predicates::ProvePredicates::new(param_env, predicates),\n-        ).unwrap()\n+            let param_env = self.param_env;\n+            self.fully_perform_op(\n+                location.at_self(),\n+                type_op::prove_predicate::ProvePredicate::new(param_env, predicate),\n+            ).unwrap()\n+        }\n     }\n \n     fn typeck_mir(&mut self, mir: &Mir<'tcx>) {"}]}