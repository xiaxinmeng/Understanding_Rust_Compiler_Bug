{"sha": "281e1071558dff3138805de49dfbb0ad91b3acd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MWUxMDcxNTU4ZGZmMzEzODgwNWRlNDlkZmJiMGFkOTFiM2FjZDM=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-26T19:31:45Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-26T19:31:45Z"}, "message": "feat(assists): Make raw string unescaped", "tree": {"sha": "55c2bca96fdf15f53c067dcc3b70b84e967006c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c2bca96fdf15f53c067dcc3b70b84e967006c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/281e1071558dff3138805de49dfbb0ad91b3acd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/281e1071558dff3138805de49dfbb0ad91b3acd3", "html_url": "https://github.com/rust-lang/rust/commit/281e1071558dff3138805de49dfbb0ad91b3acd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/281e1071558dff3138805de49dfbb0ad91b3acd3/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "html_url": "https://github.com/rust-lang/rust/commit/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "dad9b1df1d8c533a7997a49d3391b45d86c26e04", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/281e1071558dff3138805de49dfbb0ad91b3acd3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/281e1071558dff3138805de49dfbb0ad91b3acd3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=281e1071558dff3138805de49dfbb0ad91b3acd3", "patch": "@@ -904,6 +904,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_lexer 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n "}, {"sha": "d3b6aeb36a75a0c52c213e322fd0adf9da3b653e", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/281e1071558dff3138805de49dfbb0ad91b3acd3/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/281e1071558dff3138805de49dfbb0ad91b3acd3/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=281e1071558dff3138805de49dfbb0ad91b3acd3", "patch": "@@ -11,6 +11,7 @@ join_to_string = \"0.1.3\"\n itertools = \"0.8.0\"\n arrayvec = \"0.4.10\"\n rustc-hash = \"1.0.1\"\n+rustc_lexer = \"0.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "fe396806bc9d89ed5dae7c75b12a18798124b19c", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/281e1071558dff3138805de49dfbb0ad91b3acd3/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281e1071558dff3138805de49dfbb0ad91b3acd3/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=281e1071558dff3138805de49dfbb0ad91b3acd3", "patch": "@@ -1,5 +1,6 @@\n use hir::db::HirDatabase;\n use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\n+use rustc_lexer;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -15,6 +16,39 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     ctx.build()\n }\n \n+pub(crate) fn make_raw_string_unescaped(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let literal = ctx.node_at_offset::<Literal>()?;\n+    if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\n+        return None;\n+    }\n+    let token = literal.token();\n+    let text = token.text().as_str();\n+    if !text.contains(&['\\\\', '\\r'][..]) {\n+        return None;\n+    }\n+    let usual_string_range = find_usual_string_range(text)?;\n+    ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n+        edit.target(literal.syntax().text_range());\n+        let start_of_inside = usual_string_range.start().to_usize() + 1;\n+        let end_of_inside = usual_string_range.end().to_usize();\n+        let inside_str = &text[start_of_inside..end_of_inside];\n+        let mut unescaped = String::with_capacity(inside_str.len());\n+        let mut error = Ok(());\n+        rustc_lexer::unescape::unescape_str(inside_str, &mut |_, unescaped_char| {\n+            match unescaped_char {\n+                Ok(c) => unescaped.push(c),\n+                Err(_) => error = Err(()),\n+            }\n+        });\n+        if error.is_err() {\n+            eprintln!(\"Error unescaping string\");\n+        } else {\n+            edit.replace(literal.syntax().text_range(), format!(\"r\\\"{}\\\"\", unescaped));\n+        }\n+    });\n+    ctx.build()\n+}\n+\n fn find_usual_string_range(s: &str) -> Option<TextRange> {\n     Some(TextRange::from_to(\n         TextUnit::from(s.find('\"')? as u32),\n@@ -145,6 +179,49 @@ mod test {\n         );\n     }\n \n+    #[test]\n+    fn make_raw_string_unescaped_target() {\n+        check_assist_target(\n+            make_raw_string_unescaped,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random\\nstring\";\n+            }\n+            \"#,\n+            r#\"\"random\\nstring\"\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn make_raw_string_unescaped_works() {\n+        check_assist(\n+            make_raw_string_unescaped,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random\\nstring\";\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random\n+string\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_raw_string_unescaped_dont_works() {\n+        check_assist_not_applicable(\n+            make_raw_string_unescaped,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_hash_target() {\n         check_assist_target("}, {"sha": "d1e2d32514d1fd9fdb0381da673912851f06152e", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/281e1071558dff3138805de49dfbb0ad91b3acd3/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281e1071558dff3138805de49dfbb0ad91b3acd3/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=281e1071558dff3138805de49dfbb0ad91b3acd3", "patch": "@@ -132,6 +132,7 @@ mod assists {\n             move_bounds::move_bounds_to_where_clause,\n             raw_string::add_hash,\n             raw_string::make_raw_string,\n+            raw_string::make_raw_string_unescaped,\n             raw_string::make_usual_string,\n             raw_string::remove_hash,\n         ]\n@@ -340,5 +341,4 @@ mod tests {\n         assert_eq!(assists.next().expect(\"expected assist\").0.label, \"introduce variable\");\n         assert_eq!(assists.next().expect(\"expected assist\").0.label, \"replace with match\");\n     }\n-\n }"}, {"sha": "fadd4cdf17d1e432e8f7466f3b009e9815a9eee3", "filename": "docs/user/features.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/281e1071558dff3138805de49dfbb0ad91b3acd3/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/281e1071558dff3138805de49dfbb0ad91b3acd3/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=281e1071558dff3138805de49dfbb0ad91b3acd3", "patch": "@@ -459,6 +459,21 @@ fn f() {\n }\n ```\n \n+- Make raw string unescaped\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>\"ab\\ncd\";\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r\"ab\n+cd\";\n+}\n+```\n+\n - Make usual string\n \n ```rust"}]}