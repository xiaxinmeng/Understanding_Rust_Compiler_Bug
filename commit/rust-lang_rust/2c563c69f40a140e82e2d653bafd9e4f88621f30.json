{"sha": "2c563c69f40a140e82e2d653bafd9e4f88621f30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNTYzYzY5ZjQwYTE0MGU4MmUyZDY1M2JhZmQ5ZTRmODg2MjFmMzA=", "commit": {"author": {"name": "Peter C. Norton", "email": "spacey@spacey.org", "date": "2016-08-07T04:26:31Z"}, "committer": {"name": "Peter C. Norton", "email": "spacey@spacey.org", "date": "2016-08-07T04:26:31Z"}, "message": "Update E0023 to the new format\n\nAdded some extra code to check for the appropriate ending for numbers ==\n1 vs. not 1 in error messages.\n\nAdded an extra test so that the plural suffix is seen and exercised.", "tree": {"sha": "848bea742f2c0b0ff9c66c43a29af2fc37c4d7ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/848bea742f2c0b0ff9c66c43a29af2fc37c4d7ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c563c69f40a140e82e2d653bafd9e4f88621f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c563c69f40a140e82e2d653bafd9e4f88621f30", "html_url": "https://github.com/rust-lang/rust/commit/2c563c69f40a140e82e2d653bafd9e4f88621f30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c563c69f40a140e82e2d653bafd9e4f88621f30/comments", "author": null, "committer": null, "parents": [{"sha": "4c02363852e6ce41cf2da1b43a32cb7780a9b067", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "html_url": "https://github.com/rust-lang/rust/commit/4c02363852e6ce41cf2da1b43a32cb7780a9b067"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "cb1e8aef736d74465714554568bd0ab6246c01e2", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c563c69f40a140e82e2d653bafd9e4f88621f30/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c563c69f40a140e82e2d653bafd9e4f88621f30/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2c563c69f40a140e82e2d653bafd9e4f88621f30", "patch": "@@ -634,10 +634,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_pat(&subpat, field_ty);\n             }\n         } else {\n-            span_err!(tcx.sess, pat.span, E0023,\n-                      \"this pattern has {} field{s}, but the corresponding {} has {} field{s}\",\n-                      subpats.len(), def.kind_name(), variant.fields.len(),\n-                      s = if variant.fields.len() == 1 {\"\"} else {\"s\"});\n+            let subpats_ending = if subpats.len() == 1 {\n+                \"\"\n+            } else {\n+                \"s\"\n+            };\n+            let fields_ending = if variant.fields.len() == 1 {\n+                \"\"\n+            } else {\n+                \"s\"\n+            };\n+            struct_span_err!(tcx.sess, pat.span, E0023,\n+                             \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n+                             subpats.len(), subpats_ending, def.kind_name(),\n+                             variant.fields.len(),  fields_ending)\n+                .span_label(pat.span, &format!(\"expected {} field{}, found {}\",\n+                                               variant.fields.len(), fields_ending, subpats.len()))\n+                .emit();\n             on_error();\n         }\n     }"}, {"sha": "c3623e3177b56207606de2bf18b45f8e38d45aa3", "filename": "src/test/compile-fail/E0023.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c563c69f40a140e82e2d653bafd9e4f88621f30/src%2Ftest%2Fcompile-fail%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c563c69f40a140e82e2d653bafd9e4f88621f30/src%2Ftest%2Fcompile-fail%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0023.rs?ref=2c563c69f40a140e82e2d653bafd9e4f88621f30", "patch": "@@ -13,10 +13,15 @@ enum Fruit {\n     Pear(u32),\n }\n \n+\n fn main() {\n     let x = Fruit::Apple(String::new(), String::new());\n     match x {\n         Fruit::Apple(a) => {}, //~ ERROR E0023\n+                               //~| NOTE expected 2 fields, found 1\n         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n+                                     //~| NOTE expected 2 fields, found 3\n+        Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n+                                 //~| NOTE expected 1 field, found 2\n     }\n }"}]}