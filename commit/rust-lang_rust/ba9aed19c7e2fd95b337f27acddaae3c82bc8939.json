{"sha": "ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "node_id": "C_kwDOAAsO6NoAKGJhOWFlZDE5YzdlMmZkOTViMzM3ZjI3YWNkZGFhZTNjODJiYzg5Mzk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-02T22:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-02T22:12:59Z"}, "message": "Merge #11877\n\n11877: fix: splitting path of a glob import wrongly adds `self` r=Veykril a=iDawer\n\nClose  #11703 \r\n\r\n`ast::UseTree::split_prefix` handles globs now.\r\nRemoved an extra branch for globs in `ide_db::imports::merge_imports::recursive_merge` (superseeded by split_prefix).\n\nCo-authored-by: iDawer <ilnur.iskhakov.oss@outlook.com>", "tree": {"sha": "134c5d60ed946ee93b29858155a9cc2adc5d8154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134c5d60ed946ee93b29858155a9cc2adc5d8154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSMprCRBK7hj4Ov3rIwAA7YMIADFV72/1ueyCk+Vm6K4Qdfx/\nUhpVMRsY8iFr6QVv+B0MsZL0ONE0cXWetSp03uRTuQysLRSZUHoKerTTvUku8Duh\nrFnPQXbslZZC/cBq0ENgaOgnnr+2Y1fwrSnL2ghH83dDrQ9cbWmUrnRqkmR/PZ7z\ntCkAJb70G6FHq7OpkmFRJ2tHgXAsKDgYylHPbK81aNicyPmOFw0WyJ2oQBW+C9n0\nxuOLKyNtZTP7BNy9OgS/KDJWhadvBDwS89aSeR6LiTCe0zgCvh6ktlx9rr/GHNzd\nrPH/6nUudwWjxDWuxbgE9d+ZcoOMDKnjoEvw/XrVS+MWHe7cnsh10ig4c1jyza0=\n=66O4\n-----END PGP SIGNATURE-----\n", "payload": "tree 134c5d60ed946ee93b29858155a9cc2adc5d8154\nparent d312b4519ab35850fff8977f9e3c474a4eb8c0bc\nparent c8c21aabff0a7dc86c84646c587e2b400bc01d30\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648937579 +0000\ncommitter GitHub <noreply@github.com> 1648937579 +0000\n\nMerge #11877\n\n11877: fix: splitting path of a glob import wrongly adds `self` r=Veykril a=iDawer\n\nClose  #11703 \r\n\r\n`ast::UseTree::split_prefix` handles globs now.\r\nRemoved an extra branch for globs in `ide_db::imports::merge_imports::recursive_merge` (superseeded by split_prefix).\n\nCo-authored-by: iDawer <ilnur.iskhakov.oss@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "html_url": "https://github.com/rust-lang/rust/commit/ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d312b4519ab35850fff8977f9e3c474a4eb8c0bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d312b4519ab35850fff8977f9e3c474a4eb8c0bc", "html_url": "https://github.com/rust-lang/rust/commit/d312b4519ab35850fff8977f9e3c474a4eb8c0bc"}, {"sha": "c8c21aabff0a7dc86c84646c587e2b400bc01d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c21aabff0a7dc86c84646c587e2b400bc01d30", "html_url": "https://github.com/rust-lang/rust/commit/c8c21aabff0a7dc86c84646c587e2b400bc01d30"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "705ae666176abbf9f9ed34b222303d17a2d920d0", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "patch": "@@ -330,7 +330,7 @@ use std$0::{fmt::*};\n use std::{fmt::{self, Display}};\n \",\n             r\"\n-use std::{fmt::{self, *, Display}};\n+use std::{fmt::{*, self, Display}};\n \",\n         )\n     }\n@@ -440,4 +440,18 @@ use std::$0\n fn main() {}\",\n         );\n     }\n+\n+    #[test]\n+    fn split_glob() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use foo::$0*;\n+use foo::bar::Baz;\n+\",\n+            r\"\n+use foo::{*, bar::Baz};\n+\",\n+        );\n+    }\n }"}, {"sha": "e4b9651e5e807bed7f1f769456eebf1e226711ad", "filename": "crates/ide_db/src/imports/insert_use/tests.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "patch": "@@ -656,7 +656,7 @@ fn merge_mod_into_glob() {\n     check_with_config(\n         \"token::TokenKind\",\n         r\"use token::TokenKind::*;\",\n-        r\"use token::TokenKind::{self, *};\",\n+        r\"use token::TokenKind::{*, self};\",\n         &InsertUseConfig {\n             granularity: ImportGranularity::Crate,\n             enforce_granularity: true,\n@@ -670,11 +670,10 @@ fn merge_mod_into_glob() {\n \n #[test]\n fn merge_self_glob() {\n-    cov_mark::check!(merge_self_glob);\n     check_with_config(\n         \"self\",\n         r\"use self::*;\",\n-        r\"use self::{self, *};\",\n+        r\"use self::{*, self};\",\n         &InsertUseConfig {\n             granularity: ImportGranularity::Crate,\n             enforce_granularity: true,\n@@ -693,7 +692,7 @@ fn merge_glob() {\n         r\"\n use syntax::{SyntaxKind::*};\",\n         r\"\n-use syntax::{SyntaxKind::{self, *}};\",\n+use syntax::{SyntaxKind::{*, self}};\",\n     )\n }\n \n@@ -702,7 +701,7 @@ fn merge_glob_nested() {\n     check_crate(\n         \"foo::bar::quux::Fez\",\n         r\"use foo::bar::{Baz, quux::*};\",\n-        r\"use foo::bar::{Baz, quux::{self::*, Fez}};\",\n+        r\"use foo::bar::{Baz, quux::{*, Fez}};\",\n     )\n }\n "}, {"sha": "c7d9034f74d943828d7b37ebb2a7737659072961", "filename": "crates/ide_db/src/imports/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "patch": "@@ -3,7 +3,7 @@ use std::cmp::Ordering;\n \n use itertools::{EitherOrBoth, Itertools};\n use syntax::{\n-    ast::{self, make, AstNode, HasAttrs, HasVisibility, PathSegmentKind},\n+    ast::{self, AstNode, HasAttrs, HasVisibility, PathSegmentKind},\n     ted,\n };\n \n@@ -129,29 +129,7 @@ fn recursive_merge(lhs: &ast::UseTree, rhs: &ast::UseTree, merge: MergeBehavior)\n                         _ => (),\n                     }\n \n-                    // Glob imports aren't part of the use-tree lists so we need\n-                    // to special handle them here as well this special handling\n-                    // is only required for when we merge a module import into a\n-                    // glob import of said module see the `merge_self_glob` or\n-                    // `merge_mod_into_glob` tests.\n-                    if lhs_t.star_token().is_some() || rhs_t.star_token().is_some() {\n-                        if tree_is_self(lhs_t) || tree_is_self(&rhs_t) {\n-                            cov_mark::hit!(merge_self_glob);\n-                            let self_tree = make::use_tree(\n-                                make::path_unqualified(make::path_segment_self()),\n-                                None,\n-                                None,\n-                                false,\n-                            )\n-                            .clone_for_update();\n-                            ted::replace(lhs_t.syntax(), self_tree.syntax());\n-                            *lhs_t = self_tree;\n-                            let glob = make::use_tree_glob().clone_for_update();\n-                            use_trees.insert(idx, glob.clone());\n-                            lhs.get_or_create_use_tree_list().add_use_tree(glob);\n-                            continue;\n-                        }\n-                    } else if lhs_t.use_tree_list().is_none() && rhs_t.use_tree_list().is_none() {\n+                    if lhs_t.is_simple_path() && rhs_t.is_simple_path() {\n                         continue;\n                     }\n                 }"}, {"sha": "19edead30a6cba01ee74116ddb53d200ac071d60", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9aed19c7e2fd95b337f27acddaae3c82bc8939/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=ba9aed19c7e2fd95b337f27acddaae3c82bc8939", "patch": "@@ -302,16 +302,33 @@ impl ast::UseTree {\n \n     /// Splits off the given prefix, making it the path component of the use tree,\n     /// appending the rest of the path to all UseTreeList items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// `prefix$0::suffix` -> `prefix::{suffix}`\n+    ///\n+    /// `prefix$0` -> `prefix::{self}`\n+    ///\n+    /// `prefix$0::*` -> `prefix::{*}`\n     pub fn split_prefix(&self, prefix: &ast::Path) {\n         debug_assert_eq!(self.path(), Some(prefix.top_path()));\n         let path = self.path().unwrap();\n         if &path == prefix && self.use_tree_list().is_none() {\n-            let self_suffix = make::path_unqualified(make::path_segment_self()).clone_for_update();\n-            ted::replace(path.syntax(), self_suffix.syntax());\n+            if self.star_token().is_some() {\n+                // path$0::* -> *\n+                self.coloncolon_token().map(ted::remove);\n+                ted::remove(prefix.syntax());\n+            } else {\n+                // path$0 -> self\n+                let self_suffix =\n+                    make::path_unqualified(make::path_segment_self()).clone_for_update();\n+                ted::replace(path.syntax(), self_suffix.syntax());\n+            }\n         } else if split_path_prefix(prefix).is_none() {\n             return;\n         }\n-\n+        // At this point, prefix path is detached; _self_ use tree has suffix path.\n+        // Next, transform 'suffix' use tree into 'prefix::{suffix}'\n         let subtree = self.clone_subtree().clone_for_update();\n         ted::remove_all_iter(self.syntax().children_with_tokens());\n         ted::insert(Position::first_child_of(self.syntax()), prefix.syntax());"}]}