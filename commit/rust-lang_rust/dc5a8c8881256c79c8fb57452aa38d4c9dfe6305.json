{"sha": "dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "node_id": "C_kwDOAAsO6NoAKGRjNWE4Yzg4ODEyNTZjNzljOGZiNTc0NTJhYTM4ZDRjOWRmZTYzMDU", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-02T03:11:38Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-02T03:32:50Z"}, "message": "Use `FieldIdx` in various things related to aggregates\n\nShrank `AggregateKind` by 8 bytes on x64, since the active field of a union is tracked as an `Option<FieldIdx>` instead of `Option<usize>`.", "tree": {"sha": "411789b47f95c8413850db1511327207ed4b6919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411789b47f95c8413850db1511327207ed4b6919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "html_url": "https://github.com/rust-lang/rust/commit/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e598f5fb4a7a735e40eaab3db1fb069f7db365", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e598f5fb4a7a735e40eaab3db1fb069f7db365", "html_url": "https://github.com/rust-lang/rust/commit/e2e598f5fb4a7a735e40eaab3db1fb069f7db365"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "2630f02e6eb317102d6d5b70c873c6ca1d9811f6", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "patch": "@@ -802,14 +802,15 @@ fn codegen_stmt<'tcx>(\n                     if active_field_index.is_some() {\n                         assert_eq!(operands.len(), 1);\n                     }\n-                    for (i, operand) in operands.iter().enumerate() {\n+                    for (i, operand) in operands.iter_enumerated() {\n                         let operand = codegen_operand(fx, operand);\n                         let field_index = active_field_index.unwrap_or(i);\n                         let to = if let mir::AggregateKind::Array(_) = **kind {\n-                            let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n+                            let array_index = i64::from(field_index.as_u32());\n+                            let index = fx.bcx.ins().iconst(fx.pointer_type, array_index);\n                             variant_dest.place_index(fx, index)\n                         } else {\n-                            variant_dest.place_field(fx, FieldIdx::new(field_index))\n+                            variant_dest.place_field(fx, field_index)\n                         };\n                         to.write_cvalue(fx, operand);\n                     }"}]}