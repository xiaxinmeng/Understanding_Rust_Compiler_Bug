{"sha": "71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "node_id": "C_kwDOAAsO6NoAKDcxZmU1MmZlZDAyZjI1NTVlZTZkMGU3NjMxZDI1MGQ1M2ExYTljYWU", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-20T20:54:58Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate \"unsafe_op_in_unsafe_fn\" lints", "tree": {"sha": "b5c0928e622b19d9802d95d1f9874aa8cd50635c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5c0928e622b19d9802d95d1f9874aa8cd50635c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "html_url": "https://github.com/rust-lang/rust/commit/71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "82f05446a549b42af2ae544da05bb5503c3bd8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f05446a549b42af2ae544da05bb5503c3bd8ec", "html_url": "https://github.com/rust-lang/rust/commit/82f05446a549b42af2ae544da05bb5503c3bd8ec"}], "stats": {"total": 250, "additions": 236, "deletions": 14}, "files": [{"sha": "2dfc4984786b93f82f83eba3310f36f9aa9f1607", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "patch": "@@ -3,3 +3,59 @@ mir_build_unconditional_recursion = function cannot return without recursing\n     .help = a `loop` may express intention better if this is on purpose\n \n mir_build_unconditional_recursion_call_site_label = recursive call site\n+\n+mir_build_unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe =\n+    call to unsafe function `{$function}` is unsafe and requires unsafe block (error E0133)\n+    .note = consult the function's documentation for information on how to avoid undefined behavior\n+    .label = call to unsafe function\n+\n+mir_build_unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe_nameless =\n+    call to unsafe function is unsafe and requires unsafe block (error E0133)\n+    .note = consult the function's documentation for information on how to avoid undefined behavior\n+    .label = call to unsafe function\n+\n+mir_build_unsafe_op_in_unsafe_fn_inline_assembly_requires_unsafe =\n+    use of inline assembly is unsafe and requires unsafe block (error E0133)\n+    .note = inline assembly is entirely unchecked and can cause undefined behavior\n+    .label = use of inline assembly\n+\n+mir_build_unsafe_op_in_unsafe_fn_initializing_type_with_requires_unsafe =\n+    initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe\n+    block (error E0133)\n+    .note = initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+    .label = initializing type with `rustc_layout_scalar_valid_range` attr\n+\n+mir_build_unsafe_op_in_unsafe_fn_mutable_static_requires_unsafe =\n+    use of mutable static is unsafe and requires unsafe block (error E0133)\n+    .note = mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+    .label = use of mutable static\n+\n+mir_build_unsafe_op_in_unsafe_fn_extern_static_requires_unsafe =\n+    use of extern static is unsafe and requires unsafe block (error E0133)\n+    .note = extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+    .label = use of extern static\n+\n+mir_build_unsafe_op_in_unsafe_fn_deref_raw_pointer_requires_unsafe =\n+    dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+    .note = raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+    .label = dereference of raw pointer\n+\n+mir_build_unsafe_op_in_unsafe_fn_union_field_requires_unsafe =\n+    access to union field is unsafe and requires unsafe block (error E0133)\n+    .note = the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+    .label = access to union field\n+\n+mir_build_unsafe_op_in_unsafe_fn_mutation_of_layout_constrained_field_requires_unsafe =\n+    mutation of layout constrained field is unsafe and requires unsafe block (error E0133)\n+    .note = mutating layout constrained fields cannot statically be checked for valid values\n+    .label = mutation of layout constrained field\n+\n+mir_build_unsafe_op_in_unsafe_fn_borrow_of_layout_constrained_field_requires_unsafe =\n+    borrow of layout constrained field with interior mutability is unsafe and requires unsafe block (error E0133)\n+    .note = references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+    .label = borrow of layout constrained field with interior mutability\n+\n+mir_build_unsafe_op_in_unsafe_fn_call_to_fn_with_requires_unsafe =\n+    call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe block (error E0133)\n+    .note = can only be called if the required target features are available\n+    .label = call to function with `#[target_feature]`"}, {"sha": "afdd862e5c7ca1ad072f02b872ccfaf884502ffd", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 84, "deletions": 8, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "patch": "@@ -1,4 +1,5 @@\n use crate::build::ExprCategory;\n+use crate::errors::*;\n use rustc_middle::thir::visit::{self, Visitor};\n \n use rustc_errors::struct_span_err;\n@@ -83,15 +84,8 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             }\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {\n-                let (description, note) = kind.description_and_note(self.tcx);\n                 // unsafe_op_in_unsafe_fn is disallowed\n-                self.tcx.struct_span_lint_hir(\n-                    UNSAFE_OP_IN_UNSAFE_FN,\n-                    self.hir_context,\n-                    span,\n-                    format!(\"{} is unsafe and requires unsafe block (error E0133)\", description,),\n-                    |lint| lint.span_label(span, kind.simple_description()).note(note),\n-                )\n+                kind.emit_unsafe_op_in_unsafe_fn_lint(self.tcx, self.hir_context, span);\n             }\n             SafetyContext::Safe => {\n                 let (description, note) = kind.description_and_note(self.tcx);\n@@ -536,6 +530,88 @@ enum UnsafeOpKind {\n use UnsafeOpKind::*;\n \n impl UnsafeOpKind {\n+    pub fn emit_unsafe_op_in_unsafe_fn_lint(\n+        &self,\n+        tcx: TyCtxt<'_>,\n+        hir_id: hir::HirId,\n+        span: Span,\n+    ) {\n+        match self {\n+            CallToUnsafeFunction(did) if did.is_some() => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafe {\n+                    span,\n+                    function: &tcx.def_path_str(did.unwrap()),\n+                },\n+            ),\n+            CallToUnsafeFunction(..) => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafeNameless { span },\n+            ),\n+            UseOfInlineAssembly => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeUseOfInlineAssemblyRequiresUnsafe { span },\n+            ),\n+            InitializingTypeWith => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeInitializingTypeWithRequiresUnsafe { span },\n+            ),\n+            UseOfMutableStatic => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeUseOfMutableStaticRequiresUnsafe { span },\n+            ),\n+            UseOfExternStatic => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeUseOfExternStaticRequiresUnsafe { span },\n+            ),\n+            DerefOfRawPointer => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeDerefOfRawPointerRequiresUnsafe { span },\n+            ),\n+            AccessToUnionField => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeAccessToUnionFieldRequiresUnsafe { span },\n+            ),\n+            MutationOfLayoutConstrainedField => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeMutationOfLayoutConstrainedFieldRequiresUnsafe { span },\n+            ),\n+            BorrowOfLayoutConstrainedField => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeBorrowOfLayoutConstrainedFieldRequiresUnsafe { span },\n+            ),\n+            CallToFunctionWith(did) => tcx.emit_spanned_lint(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                hir_id,\n+                span,\n+                UnsafeOpInUnsafeCallToFunctionWithRequiresUnsafe {\n+                    span,\n+                    function: &tcx.def_path_str(*did),\n+                },\n+            ),\n+        }\n+    }\n+\n     pub fn simple_description(&self) -> &'static str {\n         match self {\n             CallToUnsafeFunction(..) => \"call to unsafe function\","}, {"sha": "61131c0d733cd2cf596bcd62c699678ce1f69079", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "patch": "@@ -2,12 +2,100 @@ use rustc_macros::LintDiagnostic;\n use rustc_span::Span;\n \n #[derive(LintDiagnostic)]\n-#[lint(mir_build::unconditional_recursion)]\n+#[diag(mir_build::unconditional_recursion)]\n #[help]\n pub struct UnconditionalRecursion {\n-    #[primary_span]\n     #[label]\n     pub span: Span,\n     #[label(mir_build::unconditional_recursion_call_site_label)]\n     pub call_sites: Vec<Span>,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafe<'a> {\n+    #[label]\n+    pub span: Span,\n+    pub function: &'a str,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe_nameless)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafeNameless {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_inline_assembly_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnUseOfInlineAssemblyRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_initializing_type_with_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnInitializingTypeWithRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_mutable_static_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnUseOfMutableStaticRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_extern_static_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnUseOfExternStaticRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_deref_raw_pointer_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnDerefOfRawPointerRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_union_field_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnAccessToUnionFieldRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_mutation_of_layout_constrained_field_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnMutationOfLayoutConstrainedFieldRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_borrow_of_layout_constrained_field_requires_unsafe)]\n+pub struct UnsafeOpInUnsafeFnBorrowOfLayoutConstrainedFieldRequiresUnsafe {\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unsafe_op_in_unsafe_fn_call_to_fn_with_requires_unsafe)]\n+#[note]\n+pub struct UnsafeOpInUnsafeFnCallToFunctionWithRequiresUnsafe<'a> {\n+    #[label]\n+    pub span: Span,\n+    pub function: &'a str,\n+}"}, {"sha": "8529c64cd5cca64213f3b1efedb38df29c0094b5", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fe52fed02f2555ee6d0e7631d250d53a1a9cae/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "patch": "@@ -37,10 +37,12 @@ pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n \n         let sp = tcx.def_span(def_id);\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        tcx.emit_spanned_lint(UNCONDITIONAL_RECURSION, hir_id, sp, UnconditionalRecursion {\n-            span: sp,\n-            call_sites: vis.reachable_recursive_calls,\n-        });\n+        tcx.emit_spanned_lint(\n+            UNCONDITIONAL_RECURSION,\n+            hir_id,\n+            sp,\n+            UnconditionalRecursion { span: sp, call_sites: vis.reachable_recursive_calls },\n+        );\n     }\n }\n "}]}