{"sha": "9847b5cfcb16876630064ed766fbbb7545c67368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDdiNWNmY2IxNjg3NjYzMDA2NGVkNzY2ZmJiYjc1NDVjNjczNjg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-04T22:28:12Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-25T06:54:06Z"}, "message": "Remove `insert_noop`.\n\nBecause it's as useless as its name suggests.\n\nThis commit also renames `UndoLog::Noop` as `UndoLog::Purged`, because\n(a) that's a more descriptive name and (b) it matches the name used in\nsimilar code in `librustc/infer/region_constraints/mod.rs`.", "tree": {"sha": "655842756fd2137cf69c01e601d3de6382a7b609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/655842756fd2137cf69c01e601d3de6382a7b609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9847b5cfcb16876630064ed766fbbb7545c67368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9847b5cfcb16876630064ed766fbbb7545c67368", "html_url": "https://github.com/rust-lang/rust/commit/9847b5cfcb16876630064ed766fbbb7545c67368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9847b5cfcb16876630064ed766fbbb7545c67368/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e34dfce6f49b5bef0da31a8abe34e753c3af513", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e34dfce6f49b5bef0da31a8abe34e753c3af513", "html_url": "https://github.com/rust-lang/rust/commit/1e34dfce6f49b5bef0da31a8abe34e753c3af513"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "e44bf2661c55c21d4db795e38b757c391bf9b19b", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9847b5cfcb16876630064ed766fbbb7545c67368/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9847b5cfcb16876630064ed766fbbb7545c67368/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=9847b5cfcb16876630064ed766fbbb7545c67368", "patch": "@@ -1714,12 +1714,8 @@ impl<'tcx> ProjectionCache<'tcx> {\n     /// to be a NormalizedTy.\n     pub fn complete_normalized(&mut self, key: ProjectionCacheKey<'tcx>, ty: &NormalizedTy<'tcx>) {\n         // We want to insert `ty` with no obligations. If the existing value\n-        // already has no obligations (as is common) we can use `insert_noop`\n-        // to do a minimal amount of work -- the HashMap insertion is skipped,\n-        // and minimal changes are made to the undo log.\n-        if ty.obligations.is_empty() {\n-            self.map.insert_noop();\n-        } else {\n+        // already has no obligations (as is common) we don't insert anything.\n+        if !ty.obligations.is_empty() {\n             self.map.insert(key, ProjectionCacheEntry::NormalizedTy(Normalized {\n                 value: ty.value,\n                 obligations: vec![]"}, {"sha": "2c36a549baca1094e98462b7f7cc0c4a40b3699e", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9847b5cfcb16876630064ed766fbbb7545c67368/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9847b5cfcb16876630064ed766fbbb7545c67368/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=9847b5cfcb16876630064ed766fbbb7545c67368", "patch": "@@ -44,7 +44,7 @@ enum UndoLog<K, V> {\n     CommittedSnapshot,\n     Inserted(K),\n     Overwrite(K, V),\n-    Noop,\n+    Purged,\n }\n \n impl<K, V> SnapshotMap<K, V>\n@@ -72,12 +72,6 @@ impl<K, V> SnapshotMap<K, V>\n         }\n     }\n \n-    pub fn insert_noop(&mut self) {\n-        if !self.undo_log.is_empty() {\n-            self.undo_log.push(UndoLog::Noop);\n-        }\n-    }\n-\n     pub fn remove(&mut self, key: K) -> bool {\n         match self.map.remove(&key) {\n             Some(old_value) => {\n@@ -128,13 +122,13 @@ impl<K, V> SnapshotMap<K, V>\n             let reverse = match self.undo_log[i] {\n                 UndoLog::OpenSnapshot => false,\n                 UndoLog::CommittedSnapshot => false,\n-                UndoLog::Noop => false,\n+                UndoLog::Purged => false,\n                 UndoLog::Inserted(ref k) => should_revert_key(k),\n                 UndoLog::Overwrite(ref k, _) => should_revert_key(k),\n             };\n \n             if reverse {\n-                let entry = mem::replace(&mut self.undo_log[i], UndoLog::Noop);\n+                let entry = mem::replace(&mut self.undo_log[i], UndoLog::Purged);\n                 self.reverse(entry);\n             }\n         }\n@@ -171,7 +165,7 @@ impl<K, V> SnapshotMap<K, V>\n                 self.map.insert(key, old_value);\n             }\n \n-            UndoLog::Noop => {}\n+            UndoLog::Purged => {}\n         }\n     }\n }"}]}