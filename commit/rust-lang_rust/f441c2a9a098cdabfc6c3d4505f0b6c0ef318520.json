{"sha": "f441c2a9a098cdabfc6c3d4505f0b6c0ef318520", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NDFjMmE5YTA5OGNkYWJmYzZjM2Q0NTA1ZjBiNmMwZWYzMTg1MjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-22T14:21:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T14:21:26Z"}, "message": "Rollup merge of #83272 - kornelski:takedocs, r=dtolnay\n\nClarify non-exact length in the Iterator::take documentation\n\nThere's an example which demonstrates incomplete length case, but it'd be best to explain it right from the start.", "tree": {"sha": "2c2bbd5f8fb1e7638a9f0d398e595fa2d4e795a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2bbd5f8fb1e7638a9f0d398e595fa2d4e795a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f441c2a9a098cdabfc6c3d4505f0b6c0ef318520", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWKfmCRBK7hj4Ov3rIwAAdHIIAIhRdhE05sTemDGfuoZ2YC8s\nvVd04fQB/WkVwT+RRaQ4N0Wgy7Ixak9DkkIFujllMoW/LdXtYrQz/hOh0mhjSiT+\ns1nhGfxTtivYadrGq8f8UeyYgXpK9Rxb3oceJPNzkylevfYnIQ190dp/NwazU4Lo\ntdw5pvThHVw5Jlgy4jVWTUtG13McAH7wKSkRmH4pqrG6ijzMlWNJVj0BlX3FIAqY\n0IUz9FipQkbPbib5n7tQ6tvXxZGkMDa8yFbtdYgd5Yei78IeFKrEynzf+mabSKDG\nyGUITQAzKHoqZf679hmQzaitadVnz8LaLWERe3IHSvIotCr/HxW8jbyockCnpkE=\n=qX3+\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c2bbd5f8fb1e7638a9f0d398e595fa2d4e795a2\nparent 83faac9da458d8f451611b4587e0c807d1db4af5\nparent 6cfdc385a1e3e9dd624ce87c75f25f1bb16118a1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616422886 +0100\ncommitter GitHub <noreply@github.com> 1616422886 +0100\n\nRollup merge of #83272 - kornelski:takedocs, r=dtolnay\n\nClarify non-exact length in the Iterator::take documentation\n\nThere's an example which demonstrates incomplete length case, but it'd be best to explain it right from the start.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f441c2a9a098cdabfc6c3d4505f0b6c0ef318520", "html_url": "https://github.com/rust-lang/rust/commit/f441c2a9a098cdabfc6c3d4505f0b6c0ef318520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f441c2a9a098cdabfc6c3d4505f0b6c0ef318520/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83faac9da458d8f451611b4587e0c807d1db4af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/83faac9da458d8f451611b4587e0c807d1db4af5", "html_url": "https://github.com/rust-lang/rust/commit/83faac9da458d8f451611b4587e0c807d1db4af5"}, {"sha": "6cfdc385a1e3e9dd624ce87c75f25f1bb16118a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfdc385a1e3e9dd624ce87c75f25f1bb16118a1", "html_url": "https://github.com/rust-lang/rust/commit/6cfdc385a1e3e9dd624ce87c75f25f1bb16118a1"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "46e1a3a4aa2feb9f319f34b2cf4c84c311f7d297", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f441c2a9a098cdabfc6c3d4505f0b6c0ef318520/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f441c2a9a098cdabfc6c3d4505f0b6c0ef318520/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=f441c2a9a098cdabfc6c3d4505f0b6c0ef318520", "patch": "@@ -1228,7 +1228,11 @@ pub trait Iterator {\n \n     /// Creates an iterator that skips the first `n` elements.\n     ///\n-    /// After they have been consumed, the rest of the elements are yielded.\n+    /// `skip(n)` skips elements until `n` elements are skipped or the end of the\n+    /// iterator is reached (whichever happens first). After that, all the remaining\n+    /// elements are yielded. In particular, if the original iterator is too short,\n+    /// then the returned iterator is empty.\n+    ///\n     /// Rather than overriding this method directly, instead override the `nth` method.\n     ///\n     /// # Examples\n@@ -1252,7 +1256,14 @@ pub trait Iterator {\n         Skip::new(self, n)\n     }\n \n-    /// Creates an iterator that yields its first `n` elements.\n+    /// Creates an iterator that yields the first `n` elements, or fewer\n+    /// if the underlying iterator ends sooner.\n+    ///\n+    /// `take(n)` yields elements until `n` elements are yielded or the end of\n+    /// the iterator is reached (whichever happens first).\n+    /// The returned iterator is a prefix of length `n` if the original iterator\n+    /// contains at least `n` elements, otherwise it contains all of the\n+    /// (fewer than `n`) elements of the original iterator.\n     ///\n     /// # Examples\n     ///"}]}