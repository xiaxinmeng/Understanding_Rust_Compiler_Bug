{"sha": "c3c9d9140530a9709449fd32e830bf88f567845c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYzlkOTE0MDUzMGE5NzA5NDQ5ZmQzMmU4MzBiZjg4ZjU2Nzg0NWM=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-19T21:51:27Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-19T21:51:27Z"}, "message": "progress", "tree": {"sha": "1d6d39e9249e36e8e5660f97f0505cfc117ce48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6d39e9249e36e8e5660f97f0505cfc117ce48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c9d9140530a9709449fd32e830bf88f567845c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c9d9140530a9709449fd32e830bf88f567845c", "html_url": "https://github.com/rust-lang/rust/commit/c3c9d9140530a9709449fd32e830bf88f567845c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c9d9140530a9709449fd32e830bf88f567845c/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74b398b93d647237acbc1c738e55e47ec13ea7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b398b93d647237acbc1c738e55e47ec13ea7b2", "html_url": "https://github.com/rust-lang/rust/commit/74b398b93d647237acbc1c738e55e47ec13ea7b2"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "02e307d57fc6d72580f154e869ab36767c454c37", "filename": "lifetimes.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3c9d9140530a9709449fd32e830bf88f567845c/lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3c9d9140530a9709449fd32e830bf88f567845c/lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lifetimes.md?ref=c3c9d9140530a9709449fd32e830bf88f567845c", "patch": "@@ -447,15 +447,9 @@ The variance of `*const` and `*mut` is basically arbitrary as they're not at all\n type or memory safe, so their variance is determined in analogy to & and &mut\n respectively.\n \n-\n-\n-\n-## PhantomData\n-\n This is all well and good for the types the standard library provides, but\n-how is variance determined for type that *you* define? A struct is, informally\n-speaking, covariant over all its fields (and an enum over its variants). This\n-basically means that it inherits the variance of its fields. If a struct `Foo`\n+how is variance determined for type that *you* define? A struct informally\n+speaking inherits the variance of its fields. If a struct `Foo`\n has a generic argument `A` that is used in a field `a`, then Foo's variance\n over `A` is exactly `a`'s variance. However this is complicated if `A` is used\n in multiple fields.\n@@ -478,6 +472,17 @@ struct Foo<'a, 'b, A, B, C, D, E, F, G, H> {\n }\n ```\n \n+\n+\n+\n+## Dropck\n+\n+TODO\n+\n+\n+## PhantomData\n+\n+\n However when working with unsafe code, we can often end up in a situation where\n types or lifetimes are logically associated with a struct, but not actually\n part of a field. This most commonly occurs with lifetimes. For instance, the `Iter`\n@@ -511,6 +516,8 @@ pub struct Iter<'a, T: 'a> {\n }\n ```\n \n+However PhantomData is also necessary to signal important information to\n+*dropck*. (TODO)\n \n \n "}]}