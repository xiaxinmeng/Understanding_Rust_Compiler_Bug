{"sha": "f3691ac066630c09e1f9fc3eac8b06448f065108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNjkxYWMwNjY2MzBjMDllMWY5ZmMzZWFjOGIwNjQ0OGYwNjUxMDg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-07T19:46:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T19:46:12Z"}, "message": "Rollup merge of #71783 - estebank:async-block-2015, r=tmandry\n\nDetect errors caused by `async` block in 2015 edition\n\nFix #67204.", "tree": {"sha": "4425eac6abd0ef939d7736911ddb0dc8689eba66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4425eac6abd0ef939d7736911ddb0dc8689eba66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3691ac066630c09e1f9fc3eac8b06448f065108", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetGWFCRBK7hj4Ov3rIwAAdHIIAAaGDh3R3NaMFNU5yRluZkLc\nJS+LibmQ+I9BDPdZjko1t9NjNzHzbq8gcoQ/bjIwtOjS/6m0doA94dOJQIyEgSTF\n9EUfDKLUC3CY1xnvH9VEGfUkRYpOQXSbMVxUwFjDmDnnel8tT382Iv0FYN0c5aPI\nPX5fgeUC8fIbfMU52BEEjcO3DDnoczH6yE6WtLVrFm9lIBYfnei4maZj1wGC4Se4\n7vJ2bZP3zvAlCvRI7+WvHmLqLjAFE+YI0hlLCpAg82HzJtk0ueGXk5r1AmTuEsLA\nVGb47jcMgWCxMLVjHFnJZvec1pzvjt7VnGbjJueAF+5aY1Dla07rZ5jjKcOYj2w=\n=qsoM\n-----END PGP SIGNATURE-----\n", "payload": "tree 4425eac6abd0ef939d7736911ddb0dc8689eba66\nparent bd704f794fe58a9917ed1fed04e9f9dc6856cda1\nparent 3cf556939e4f5fcce686ad9c157ac331bd05aabc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588880772 +0200\ncommitter GitHub <noreply@github.com> 1588880772 +0200\n\nRollup merge of #71783 - estebank:async-block-2015, r=tmandry\n\nDetect errors caused by `async` block in 2015 edition\n\nFix #67204.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3691ac066630c09e1f9fc3eac8b06448f065108", "html_url": "https://github.com/rust-lang/rust/commit/f3691ac066630c09e1f9fc3eac8b06448f065108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3691ac066630c09e1f9fc3eac8b06448f065108/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd704f794fe58a9917ed1fed04e9f9dc6856cda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd704f794fe58a9917ed1fed04e9f9dc6856cda1", "html_url": "https://github.com/rust-lang/rust/commit/bd704f794fe58a9917ed1fed04e9f9dc6856cda1"}, {"sha": "3cf556939e4f5fcce686ad9c157ac331bd05aabc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf556939e4f5fcce686ad9c157ac331bd05aabc", "html_url": "https://github.com/rust-lang/rust/commit/3cf556939e4f5fcce686ad9c157ac331bd05aabc"}], "stats": {"total": 162, "additions": 121, "deletions": 41}, "files": [{"sha": "b3bb72554e9c4a985226164bcc6efcc53126787b", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n@@ -1068,8 +1068,8 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_path_start_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        let lo = self.token.span;\n         let path = self.parse_path(PathStyle::Expr)?;\n+        let lo = path.span;\n \n         // `!`, as an operator, is prefix, so we know this isn't that.\n         let (hi, kind) = if self.eat(&token::Not) {\n@@ -1081,7 +1081,7 @@ impl<'a> Parser<'a> {\n             };\n             (self.prev_token.span, ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(token::Brace)) {\n-            if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+            if let Some(expr) = self.maybe_parse_struct_expr(&path, &attrs) {\n                 return expr;\n             } else {\n                 (path.span, ExprKind::Path(None, path))\n@@ -1895,16 +1895,15 @@ impl<'a> Parser<'a> {\n \n     fn maybe_parse_struct_expr(\n         &mut self,\n-        lo: Span,\n         path: &ast::Path,\n         attrs: &AttrVec,\n     ) -> Option<PResult<'a, P<Expr>>> {\n         let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n         if struct_allowed || self.is_certainly_not_a_block() {\n             // This is a struct literal, but we don't can't accept them here.\n-            let expr = self.parse_struct_expr(lo, path.clone(), attrs.clone());\n+            let expr = self.parse_struct_expr(path.clone(), attrs.clone());\n             if let (Ok(expr), false) = (&expr, struct_allowed) {\n-                self.error_struct_lit_not_allowed_here(lo, expr.span);\n+                self.error_struct_lit_not_allowed_here(path.span, expr.span);\n             }\n             return Some(expr);\n         }\n@@ -1923,17 +1922,23 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_struct_expr(\n         &mut self,\n-        lo: Span,\n         pth: ast::Path,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n-        let struct_sp = lo.to(self.prev_token.span);\n         self.bump();\n         let mut fields = Vec::new();\n         let mut base = None;\n+        let mut recover_async = false;\n \n         attrs.extend(self.parse_inner_attributes()?);\n \n+        let mut async_block_err = |e: &mut DiagnosticBuilder<'_>, span: Span| {\n+            recover_async = true;\n+            e.span_label(span, \"`async` blocks are only allowed in the 2018 edition\");\n+            e.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            e.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n+        };\n+\n         while self.token != token::CloseDelim(token::Brace) {\n             if self.eat(&token::DotDot) {\n                 let exp_span = self.prev_token.span;\n@@ -1952,7 +1957,11 @@ impl<'a> Parser<'a> {\n             let parsed_field = match self.parse_field() {\n                 Ok(f) => Some(f),\n                 Err(mut e) => {\n-                    e.span_label(struct_sp, \"while parsing this struct\");\n+                    if pth == kw::Async {\n+                        async_block_err(&mut e, pth.span);\n+                    } else {\n+                        e.span_label(pth.span, \"while parsing this struct\");\n+                    }\n                     e.emit();\n \n                     // If the next token is a comma, then try to parse\n@@ -1976,15 +1985,19 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 Err(mut e) => {\n-                    e.span_label(struct_sp, \"while parsing this struct\");\n-                    if let Some(f) = recovery_field {\n-                        fields.push(f);\n-                        e.span_suggestion(\n-                            self.prev_token.span.shrink_to_hi(),\n-                            \"try adding a comma\",\n-                            \",\".into(),\n-                            Applicability::MachineApplicable,\n-                        );\n+                    if pth == kw::Async {\n+                        async_block_err(&mut e, pth.span);\n+                    } else {\n+                        e.span_label(pth.span, \"while parsing this struct\");\n+                        if let Some(f) = recovery_field {\n+                            fields.push(f);\n+                            e.span_suggestion(\n+                                self.prev_token.span.shrink_to_hi(),\n+                                \"try adding a comma\",\n+                                \",\".into(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                     }\n                     e.emit();\n                     self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n@@ -1993,9 +2006,10 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let span = lo.to(self.token.span);\n+        let span = pth.span.to(self.token.span);\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        Ok(self.mk_expr(span, ExprKind::Struct(pth, fields, base), attrs))\n+        let expr = if recover_async { ExprKind::Err } else { ExprKind::Struct(pth, fields, base) };\n+        Ok(self.mk_expr(span, expr, attrs))\n     }\n \n     /// Use in case of error after field-looking code: `S { foo: () with a }`."}, {"sha": "7fb814973e2504b51ea17bea1bb22711d5e7bbb0", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -1550,7 +1550,7 @@ impl<'a> Parser<'a> {\n         if span.rust_2015() {\n             let diag = self.diagnostic();\n             struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in the 2015 edition\")\n-                .note(\"to use `async fn`, switch to Rust 2018\")\n+                .span_label(span, \"to use `async fn`, switch to Rust 2018\")\n                 .help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\")\n                 .note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\")\n                 .emit();"}, {"sha": "849193151c33567dbd15eef31b8b80fbd5a3495a", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -79,7 +79,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let expr = if self.check(&token::OpenDelim(token::Brace)) {\n-            self.parse_struct_expr(lo, path, AttrVec::new())?\n+            self.parse_struct_expr(path, AttrVec::new())?\n         } else {\n             let hi = self.prev_token.span;\n             self.mk_expr(lo.to(hi), ExprKind::Path(None, path), AttrVec::new())"}, {"sha": "c1a7cf855fafb32d128b66793a572f17f5d6e00f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -151,7 +151,11 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             };\n             (\n                 format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n-                format!(\"not found in {}\", mod_str),\n+                if path_str == \"async\" && expected.starts_with(\"struct\") {\n+                    \"`async` blocks are only allowed in the 2018 edition\".to_string()\n+                } else {\n+                    format!(\"not found in {}\", mod_str)\n+                },\n                 item_span,\n                 false,\n             )"}, {"sha": "8bffeb2131dec0eaa12dfda85733e70d717409a2", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -2,89 +2,80 @@ error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:3:1\n    |\n LL | async fn foo() {}\n-   | ^^^^^\n+   | ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n-   |            ^^^^^\n+   |            ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n-   | ^^^^^\n+   | ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n-   |     ^^^^^\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n-   |         ^^^^^\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n-   |         ^^^^^\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n-   |             ^^^^^\n+   |             ^^^^^ to use `async fn`, switch to Rust 2018\n    |\n-   = note: to use `async fn`, switch to Rust 2018\n    = help: set `edition = \"2018\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n "}, {"sha": "985606a6f254566e9fcccfd2821a16bc432a2dc2", "filename": "src/test/ui/editions/async-block-2015.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.rs?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -0,0 +1,30 @@\n+async fn foo() {\n+//~^ ERROR `async fn` is not permitted in the 2015 edition\n+//~| NOTE to use `async fn`, switch to Rust 2018\n+//~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+//~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+    let x = async {};\n+    //~^ ERROR cannot find struct, variant or union type `async` in this scope\n+    //~| NOTE `async` blocks are only allowed in the 2018 edition\n+    let y = async { //~ NOTE `async` blocks are only allowed in the 2018 edition\n+        let x = 42;\n+        //~^ ERROR expected identifier, found keyword `let`\n+        //~| NOTE expected identifier, found keyword\n+        //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+        //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+        42\n+    };\n+    let z = async { //~ NOTE `async` blocks are only allowed in the 2018 edition\n+        42\n+        //~^ ERROR expected identifier, found `42`\n+        //~| NOTE expected identifier\n+        //~| HELP set `edition = \"2018\"` in `Cargo.toml`\n+        //~| NOTE for more on editions, read https://doc.rust-lang.org/edition-guide\n+    };\n+    y.await;\n+    z.await;\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "8e5e5d8bfab9ac4787ac3ee3043ce540b3101d4f", "filename": "src/test/ui/editions/async-block-2015.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3691ac066630c09e1f9fc3eac8b06448f065108/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fasync-block-2015.stderr?ref=f3691ac066630c09e1f9fc3eac8b06448f065108", "patch": "@@ -0,0 +1,41 @@\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/async-block-2015.rs:1:1\n+   |\n+LL | async fn foo() {\n+   | ^^^^^ to use `async fn`, switch to Rust 2018\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error: expected identifier, found keyword `let`\n+  --> $DIR/async-block-2015.rs:11:9\n+   |\n+LL |     let y = async {\n+   |             ----- `async` blocks are only allowed in the 2018 edition\n+LL |         let x = 42;\n+   |         ^^^ expected identifier, found keyword\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error: expected identifier, found `42`\n+  --> $DIR/async-block-2015.rs:19:9\n+   |\n+LL |     let z = async {\n+   |             ----- `async` blocks are only allowed in the 2018 edition\n+LL |         42\n+   |         ^^ expected identifier\n+   |\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0422]: cannot find struct, variant or union type `async` in this scope\n+  --> $DIR/async-block-2015.rs:7:13\n+   |\n+LL |     let x = async {};\n+   |             ^^^^^ `async` blocks are only allowed in the 2018 edition\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0422, E0670.\n+For more information about an error, try `rustc --explain E0422`."}]}