{"sha": "9f086fcb0075bd922055ac7923d142544c0d286d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDg2ZmNiMDA3NWJkOTIyMDU1YWM3OTIzZDE0MjU0NGMwZDI4NmQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-27T16:37:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-27T16:37:21Z"}, "message": "Rollup merge of #77203 - ecstatic-morse:const-stability-attr-checks, r=oli-obk\n\nCheck for missing const-stability attributes in `rustc_passes`\n\nCurrently, this happens as a side effect of `is_min_const_fn`, which is non-obvious. Also adds a test for this case, since we didn't seem to have one before.", "tree": {"sha": "eca4541007a1d69d79f8ee644ad6ba1350375e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca4541007a1d69d79f8ee644ad6ba1350375e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f086fcb0075bd922055ac7923d142544c0d286d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcL/BCRBK7hj4Ov3rIwAAdHIIAJWBsuA5k3G1gDw6ZCgUXiJ+\nSlySDxlqYUy64xU4NUps721aMO7uaS9v3VgpvOLvYio0m2nLyN2EwHT5XO7xyk89\nEq4S4n745T/0Y9hqqJ/nPMBZIVH21842w9bgi4lX0/xbH2uz1fa1oQn4V7bVPmsb\noaf+oPYpFc/QPfuFk13zxM8zcUYKKR8VGiXGtXP+PY39n1H4a7sWbc8vDG7bQT0Q\nA7zWqcYpEE14iaRVVLomdMKd0u8lLdkTNWVPBH7B78K4uJFNVatr8M/txEPiKWZB\n8UmzA0NBtST14HH8iDFI3zl8wmtjEYYQzqwLsozfeySDQVRUjYwgTo2JrNY5NPM=\n=YAIn\n-----END PGP SIGNATURE-----\n", "payload": "tree eca4541007a1d69d79f8ee644ad6ba1350375e78\nparent ec1766c5b6ec6e714bc9f976229586187b304720\nparent 6ce178f60eec86cfd9245e6289598938df519359\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601224641 +0200\ncommitter GitHub <noreply@github.com> 1601224641 +0200\n\nRollup merge of #77203 - ecstatic-morse:const-stability-attr-checks, r=oli-obk\n\nCheck for missing const-stability attributes in `rustc_passes`\n\nCurrently, this happens as a side effect of `is_min_const_fn`, which is non-obvious. Also adds a test for this case, since we didn't seem to have one before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f086fcb0075bd922055ac7923d142544c0d286d", "html_url": "https://github.com/rust-lang/rust/commit/9f086fcb0075bd922055ac7923d142544c0d286d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f086fcb0075bd922055ac7923d142544c0d286d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1766c5b6ec6e714bc9f976229586187b304720", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1766c5b6ec6e714bc9f976229586187b304720", "html_url": "https://github.com/rust-lang/rust/commit/ec1766c5b6ec6e714bc9f976229586187b304720"}, {"sha": "6ce178f60eec86cfd9245e6289598938df519359", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce178f60eec86cfd9245e6289598938df519359", "html_url": "https://github.com/rust-lang/rust/commit/6ce178f60eec86cfd9245e6289598938df519359"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "1db1f6ceedac5bbd80c657c46adb9e7e3c4e7ba1", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f086fcb0075bd922055ac7923d142544c0d286d/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f086fcb0075bd922055ac7923d142544c0d286d/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=9f086fcb0075bd922055ac7923d142544c0d286d", "patch": "@@ -50,7 +50,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             None => {\n                 if let Some(stab) = tcx.lookup_stability(def_id) {\n                     if stab.level.is_stable() {\n-                        tcx.sess.span_err(\n+                        tcx.sess.delay_span_bug(\n                             tcx.def_span(def_id),\n                             \"stable const functions must have either `rustc_const_stable` or \\\n                              `rustc_const_unstable` attribute\","}, {"sha": "ee6adbc7a455d52b1e909aa32d8d5d2c97c191a7", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f086fcb0075bd922055ac7923d142544c0d286d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f086fcb0075bd922055ac7923d142544c0d286d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=9f086fcb0075bd922055ac7923d142544c0d286d", "patch": "@@ -204,9 +204,6 @@ impl Validator<'mir, 'tcx> {\n     pub fn check_body(&mut self) {\n         let ConstCx { tcx, body, def_id, .. } = *self.ccx;\n \n-        // HACK: This function has side-effects???? Make sure we call it.\n-        let _ = crate::const_eval::is_min_const_fn(tcx, def_id.to_def_id());\n-\n         // The local type and predicate checks are not free and only relevant for `const fn`s.\n         if self.const_kind() == hir::ConstContext::ConstFn {\n             // Prevent const trait methods from being annotated as `stable`."}, {"sha": "1378b0d57053e84dba75ebef6254eb3fc42de7e9", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f086fcb0075bd922055ac7923d142544c0d286d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f086fcb0075bd922055ac7923d142544c0d286d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9f086fcb0075bd922055ac7923d142544c0d286d", "patch": "@@ -459,6 +459,21 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             self.tcx.sess.span_err(span, &format!(\"{} has missing stability attribute\", descr));\n         }\n     }\n+\n+    fn check_missing_const_stability(&self, hir_id: HirId, span: Span) {\n+        let stab_map = self.tcx.stability();\n+        let stab = stab_map.local_stability(hir_id);\n+        if stab.map_or(false, |stab| stab.level.is_stable()) {\n+            let const_stab = stab_map.local_const_stability(hir_id);\n+            if const_stab.is_none() {\n+                self.tcx.sess.span_err(\n+                    span,\n+                    \"`#[stable]` const functions must also be either \\\n+                    `#[rustc_const_stable]` or `#[rustc_const_unstable]`\",\n+                );\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n@@ -469,14 +484,23 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n-        match i.kind {\n-            // Inherent impls and foreign modules serve only as containers for other items,\n-            // they don't have their own stability. They still can be annotated as unstable\n-            // and propagate this unstability to children, but this annotation is completely\n-            // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {}\n+        // Inherent impls and foreign modules serve only as containers for other items,\n+        // they don't have their own stability. They still can be annotated as unstable\n+        // and propagate this unstability to children, but this annotation is completely\n+        // optional. They inherit stability from their parents when unannotated.\n+        if !matches!(\n+            i.kind,\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..)\n+        ) {\n+            self.check_missing_stability(i.hir_id, i.span);\n+        }\n \n-            _ => self.check_missing_stability(i.hir_id, i.span),\n+        // Ensure `const fn` that are `stable` have one of `rustc_const_unstable` or\n+        // `rustc_const_stable`.\n+        if self.tcx.features().staged_api\n+            && matches!(&i.kind, hir::ItemKind::Fn(sig, ..) if sig.header.is_const())\n+        {\n+            self.check_missing_const_stability(i.hir_id, i.span);\n         }\n \n         intravisit::walk_item(self, i)"}, {"sha": "7d499c611a43c35428075fd51a1bc698bb1b6cd3", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f086fcb0075bd922055ac7923d142544c0d286d/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f086fcb0075bd922055ac7923d142544c0d286d/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=9f086fcb0075bd922055ac7923d142544c0d286d", "patch": "@@ -0,0 +1,12 @@\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+pub const fn foo() {}\n+//~^ ERROR rustc_const_stable\n+\n+#[unstable(feature = \"bar\", issue = \"none\")]\n+pub const fn bar() {} // ok\n+\n+fn main() {}"}, {"sha": "450a5303fd86f9ff2b5e6d275a767643d8f7b6a8", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f086fcb0075bd922055ac7923d142544c0d286d/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f086fcb0075bd922055ac7923d142544c0d286d/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=9f086fcb0075bd922055ac7923d142544c0d286d", "patch": "@@ -0,0 +1,8 @@\n+error: `#[stable]` const functions must also be either `#[rustc_const_stable]` or `#[rustc_const_unstable]`\n+  --> $DIR/missing-const-stability.rs:6:1\n+   |\n+LL | pub const fn foo() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}