{"sha": "20040fa332c04b2d17925345163957d196cfbfe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDQwZmEzMzJjMDRiMmQxNzkyNTM0NTE2Mzk1N2QxOTZjZmJmZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-28T13:05:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-28T13:05:16Z"}, "message": "Auto merge of #84562 - richkadel:issue-83601, r=tmandry\n\nAdds feature-gated `#[no_coverage]` function attribute, to fix derived Eq `0` coverage issue #83601\n\nDerived Eq no longer shows uncovered\n\nThe Eq trait has a special hidden function. MIR `InstrumentCoverage`\nwould add this function to the coverage map, but it is never called, so\nthe `Eq` trait would always appear uncovered.\n\nFixes: #83601\n\nThe fix required creating a new function attribute `no_coverage` to mark\nfunctions that should be ignored by `InstrumentCoverage` and the\ncoverage `mapgen` (during codegen).\n\nAdding a `no_coverage` feature gate with tracking issue #84605.\n\nr? `@tmandry`\ncc: `@wesleywiser`", "tree": {"sha": "df05d5bc910ee21f5704e27af4acfae22c2c6750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df05d5bc910ee21f5704e27af4acfae22c2c6750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20040fa332c04b2d17925345163957d196cfbfe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20040fa332c04b2d17925345163957d196cfbfe6", "html_url": "https://github.com/rust-lang/rust/commit/20040fa332c04b2d17925345163957d196cfbfe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20040fa332c04b2d17925345163957d196cfbfe6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237eab11560e8ea9008921a46ae60518011fe00f", "url": "https://api.github.com/repos/rust-lang/rust/commits/237eab11560e8ea9008921a46ae60518011fe00f", "html_url": "https://github.com/rust-lang/rust/commit/237eab11560e8ea9008921a46ae60518011fe00f"}, {"sha": "3a5df48021b3d29ca55a712d9677cfe043966c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5df48021b3d29ca55a712d9677cfe043966c6e", "html_url": "https://github.com/rust-lang/rust/commit/3a5df48021b3d29ca55a712d9677cfe043966c6e"}], "stats": {"total": 200, "additions": 198, "deletions": 2}, "files": [{"sha": "5a4e7fd9d07b4691fa70ee404373263f5531db49", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -16,9 +16,19 @@ pub fn expand_deriving_eq(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     let inline = cx.meta_word(span, sym::inline);\n+    let no_coverage_ident =\n+        rustc_ast::attr::mk_nested_word_item(Ident::new(sym::no_coverage, span));\n+    let no_coverage_feature =\n+        rustc_ast::attr::mk_list_item(Ident::new(sym::feature, span), vec![no_coverage_ident]);\n+    let no_coverage = cx.meta_word(span, sym::no_coverage);\n     let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n-    let attrs = vec![cx.attribute(inline), cx.attribute(doc)];\n+    let attrs = vec![\n+        cx.attribute(inline),\n+        cx.attribute(no_coverage_feature),\n+        cx.attribute(no_coverage),\n+        cx.attribute(doc),\n+    ];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "1faaa7e86f619ae300031dd51772c7ab990740fa", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -8,6 +8,7 @@ use rustc_codegen_ssa::traits::{ConstMethods, CoverageInfoMethods};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_llvm::RustString;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::CodeRegion;\n use rustc_span::Symbol;\n \n@@ -280,6 +281,10 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n \n     let mut unused_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {\n+        let codegen_fn_attrs = tcx.codegen_fn_attrs(non_codegenned_def_id);\n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_COVERAGE) {\n+            continue;\n+        }\n         // Make sure the non-codegenned (unused) function has a file_name\n         if let Some(non_codegenned_file_name) = tcx.covered_file_name(non_codegenned_def_id) {\n             let def_ids ="}, {"sha": "9930f51e3f5a33534a3cd227690378978c989b27", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -646,6 +646,10 @@ declare_features! (\n     /// Allows `extern \"wasm\" fn`\n     (active, wasm_abi, \"1.53.0\", Some(83788), None),\n \n+    /// Allows function attribute `#[no_coverage]`, to bypass coverage\n+    /// instrumentation of that function.\n+    (active, no_coverage, \"1.53.0\", Some(84605), None),\n+\n     /// Allows trait bounds in `const fn`.\n     (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n "}, {"sha": "5474fea9c78577c7b843d922e685c00a2bb8e83a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -273,6 +273,13 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         template!(List: \"address, memory, thread\"),\n         experimental!(no_sanitize)\n     ),\n+    ungated!(\n+        // Not exclusively gated at the crate level (though crate-level is\n+        // supported). The feature can alternatively be enabled on individual\n+        // functions.\n+        no_coverage, AssumedUsed,\n+        template!(Word),\n+    ),\n \n     // FIXME: #14408 assume docs are used since rustdoc looks at them.\n     ungated!(doc, AssumedUsed, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),"}, {"sha": "93e7aeaffce3771ea62e15a0a0552b8000107fd6", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -89,6 +89,10 @@ bitflags! {\n         /// #[cmse_nonsecure_entry]: with a TrustZone-M extension, declare a\n         /// function as an entry function from Non-Secure code.\n         const CMSE_NONSECURE_ENTRY      = 1 << 14;\n+        /// `#[no_coverage]`: indicates that the function should be ignored by\n+        /// the MIR `InstrumentCoverage` pass and not added to the coverage map\n+        /// during codegen.\n+        const NO_COVERAGE               = 1 << 15;\n     }\n }\n "}, {"sha": "eaeb44289cfb2097c2c5354cc73ed3eb42d13848", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -23,6 +23,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::hir;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ich::StableHashingContext;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{\n     self, BasicBlock, BasicBlockData, Coverage, SourceInfo, Statement, StatementKind, Terminator,\n@@ -87,6 +88,11 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n             _ => {}\n         }\n \n+        let codegen_fn_attrs = tcx.codegen_fn_attrs(mir_source.def_id());\n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_COVERAGE) {\n+            return;\n+        }\n+\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());\n         Instrumentor::new(&self.name(), tcx, mir_body).inject_counters();\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());"}, {"sha": "cb6c72b1317b216920e6af487c431b0e904b3bc7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -781,6 +781,7 @@ symbols! {\n         no,\n         no_builtins,\n         no_core,\n+        no_coverage,\n         no_crate_inject,\n         no_debug,\n         no_default_passes,"}, {"sha": "190c9d35934f93219450ec50d3ded0a41850f282", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -2661,6 +2661,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n+    let mut no_coverage_feature_enabled = false;\n+    let mut no_coverage_attr = None;\n     for attr in attrs.iter() {\n         if tcx.sess.check_name(attr, sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n@@ -2724,6 +2726,15 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n         } else if tcx.sess.check_name(attr, sym::no_mangle) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n+        } else if attr.has_name(sym::feature) {\n+            if let Some(list) = attr.meta_item_list() {\n+                if list.iter().any(|nested_meta_item| nested_meta_item.has_name(sym::no_coverage)) {\n+                    tcx.sess.mark_attr_used(attr);\n+                    no_coverage_feature_enabled = true;\n+                }\n+            }\n+        } else if tcx.sess.check_name(attr, sym::no_coverage) {\n+            no_coverage_attr = Some(attr);\n         } else if tcx.sess.check_name(attr, sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {\n@@ -2934,6 +2945,23 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n+    if let Some(no_coverage_attr) = no_coverage_attr {\n+        if tcx.sess.features_untracked().no_coverage || no_coverage_feature_enabled {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE\n+        } else {\n+            let mut err = feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::no_coverage,\n+                no_coverage_attr.span,\n+                \"the `#[no_coverage]` attribute is an experimental feature\",\n+            );\n+            if tcx.sess.parse_sess.unstable_features.is_nightly_build() {\n+                err.help(\"or, alternatively, add `#[feature(no_coverage)]` to the function\");\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n         if !attr.has_name(sym::inline) {\n             return ia;"}, {"sha": "0a3e5789e8bedc4dc7def36dfe27763d5d3d6ce2", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -274,6 +274,8 @@ pub trait Eq: PartialEq<Self> {\n     //\n     // This should never be implemented by hand.\n     #[doc(hidden)]\n+    #[cfg_attr(not(bootstrap), feature(no_coverage))]\n+    #[cfg_attr(not(bootstrap), no_coverage)]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn assert_receiver_is_total_eq(&self) {}"}, {"sha": "46f3add9427b60b981ce56c4d6d0544460250e19", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-83601.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-83601.txt", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-83601.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-83601.txt?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,22 @@\n+    1|       |// Shows that rust-lang/rust/83601 is resolved\n+    2|       |\n+    3|      3|#[derive(Debug, PartialEq, Eq)]\n+                              ^2\n+  ------------------\n+  | <issue_83601::Foo as core::cmp::PartialEq>::eq:\n+  |    3|      2|#[derive(Debug, PartialEq, Eq)]\n+  ------------------\n+  | Unexecuted instantiation: <issue_83601::Foo as core::cmp::PartialEq>::ne\n+  ------------------\n+    4|       |struct Foo(u32);\n+    5|       |\n+    6|      1|fn main() {\n+    7|      1|    let bar = Foo(1);\n+    8|      0|    assert_eq!(bar, Foo(1));\n+    9|      1|    let baz = Foo(0);\n+   10|      0|    assert_ne!(baz, Foo(1));\n+   11|      1|    println!(\"{:?}\", Foo(1));\n+   12|      1|    println!(\"{:?}\", bar);\n+   13|      1|    println!(\"{:?}\", baz);\n+   14|      1|}\n+"}, {"sha": "c4a7b0cc7e9f3798b9a5fa468eb18e6ce7b8b60f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_crate.txt", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,18 @@\n+    1|       |// Enables `no_coverage` on the entire crate\n+    2|       |#![feature(no_coverage)]\n+    3|       |\n+    4|       |#[no_coverage]\n+    5|       |fn do_not_add_coverage_1() {\n+    6|       |    println!(\"called but not covered\");\n+    7|       |}\n+    8|       |\n+    9|       |#[no_coverage]\n+   10|       |fn do_not_add_coverage_2() {\n+   11|       |    println!(\"called but not covered\");\n+   12|       |}\n+   13|       |\n+   14|      1|fn main() {\n+   15|      1|    do_not_add_coverage_1();\n+   16|      1|    do_not_add_coverage_2();\n+   17|      1|}\n+"}, {"sha": "16eaf7c858c19907993b1d788255effb284d0f23", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_func.txt", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,19 @@\n+    1|       |// Enables `no_coverage` on individual functions\n+    2|       |\n+    3|       |#[feature(no_coverage)]\n+    4|       |#[no_coverage]\n+    5|       |fn do_not_add_coverage_1() {\n+    6|       |    println!(\"called but not covered\");\n+    7|       |}\n+    8|       |\n+    9|       |#[no_coverage]\n+   10|       |#[feature(no_coverage)]\n+   11|       |fn do_not_add_coverage_2() {\n+   12|       |    println!(\"called but not covered\");\n+   13|       |}\n+   14|       |\n+   15|      1|fn main() {\n+   16|      1|    do_not_add_coverage_1();\n+   17|      1|    do_not_add_coverage_2();\n+   18|      1|}\n+"}, {"sha": "fc266653349509c511b999abb50f9584401d74e3", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.partial_eq.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.partial_eq.txt?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -2,7 +2,7 @@\n     2|       |// structure of this test.\n     3|       |\n     4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-                       ^0            ^0      ^0 ^0  ^1       ^1 ^0^0\n+                       ^0            ^0      ^0     ^1       ^1 ^0^0\n   ------------------\n   | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialEq>::ne\n   ------------------"}, {"sha": "0b72a81947cc79f563579142b62e486cb654f964", "filename": "src/test/run-make-fulldeps/coverage/issue-83601.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-83601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-83601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-83601.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,14 @@\n+// Shows that rust-lang/rust/83601 is resolved\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Foo(u32);\n+\n+fn main() {\n+    let bar = Foo(1);\n+    assert_eq!(bar, Foo(1));\n+    let baz = Foo(0);\n+    assert_ne!(baz, Foo(1));\n+    println!(\"{:?}\", Foo(1));\n+    println!(\"{:?}\", bar);\n+    println!(\"{:?}\", baz);\n+}"}, {"sha": "300570db7e8f7a205e9d626ab556b5a431a1960a", "filename": "src/test/run-make-fulldeps/coverage/no_cov_crate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,17 @@\n+// Enables `no_coverage` on the entire crate\n+#![feature(no_coverage)]\n+\n+#[no_coverage]\n+fn do_not_add_coverage_1() {\n+    println!(\"called but not covered\");\n+}\n+\n+#[no_coverage]\n+fn do_not_add_coverage_2() {\n+    println!(\"called but not covered\");\n+}\n+\n+fn main() {\n+    do_not_add_coverage_1();\n+    do_not_add_coverage_2();\n+}"}, {"sha": "e19a2c4a87200ceb2dd2f40832567fe6c72f63b1", "filename": "src/test/run-make-fulldeps/coverage/no_cov_func.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,18 @@\n+// Enables `no_coverage` on individual functions\n+\n+#[feature(no_coverage)]\n+#[no_coverage]\n+fn do_not_add_coverage_1() {\n+    println!(\"called but not covered\");\n+}\n+\n+#[no_coverage]\n+#[feature(no_coverage)]\n+fn do_not_add_coverage_2() {\n+    println!(\"called but not covered\");\n+}\n+\n+fn main() {\n+    do_not_add_coverage_1();\n+    do_not_add_coverage_2();\n+}"}, {"sha": "c6b79f9a431710b7983b2b12967562b601d77080", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+\n+#[no_coverage]\n+#[feature(no_coverage)] // does not have to be enabled before `#[no_coverage]`\n+fn no_coverage_is_enabled_on_this_function() {}\n+\n+#[no_coverage] //~ ERROR the `#[no_coverage]` attribute is an experimental feature\n+fn requires_feature_no_coverage() {}"}, {"sha": "04627be4aaf65f4a1b9325c1652814ecad5984fa", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20040fa332c04b2d17925345163957d196cfbfe6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr?ref=20040fa332c04b2d17925345163957d196cfbfe6", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: the `#[no_coverage]` attribute is an experimental feature\n+  --> $DIR/feature-gate-no_coverage.rs:7:1\n+   |\n+LL | #[no_coverage]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #84605 <https://github.com/rust-lang/rust/issues/84605> for more information\n+   = help: add `#![feature(no_coverage)]` to the crate attributes to enable\n+   = help: or, alternatively, add `#[feature(no_coverage)]` to the function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}