{"sha": "3dfd12967aed35b7788f7d3c7460b76b76e70b60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmQxMjk2N2FlZDM1Yjc3ODhmN2QzYzc0NjBiNzZiNzZlNzBiNjA=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-11T04:26:45Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-12T07:13:43Z"}, "message": "Replace #[cfg(target_os = \"win32\")] with #[cfg(target_os = \"windows\")]", "tree": {"sha": "6c28e2873f65ce3bc29edacd4a7e3f2bf4eb5725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c28e2873f65ce3bc29edacd4a7e3f2bf4eb5725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfd12967aed35b7788f7d3c7460b76b76e70b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfd12967aed35b7788f7d3c7460b76b76e70b60", "html_url": "https://github.com/rust-lang/rust/commit/3dfd12967aed35b7788f7d3c7460b76b76e70b60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfd12967aed35b7788f7d3c7460b76b76e70b60/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98332b1a06193c4f83fc2613f72273b50b77f2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/98332b1a06193c4f83fc2613f72273b50b77f2b3", "html_url": "https://github.com/rust-lang/rust/commit/98332b1a06193c4f83fc2613f72273b50b77f2b3"}], "stats": {"total": 109, "additions": 72, "deletions": 37}, "files": [{"sha": "940b1f185cfadc5796d4c698954895baf51ecfae", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -16,7 +16,8 @@ use header::TestProps;\n use header;\n use procsrv;\n use util::logv;\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n use util;\n \n use std::io::File;\n@@ -816,7 +817,8 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<Vec<String> >();\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     fn to_lower( s : &str ) -> String {\n         let i = s.chars();\n         let c : Vec<char> = i.map( |c| {\n@@ -829,7 +831,8 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         String::from_chars(c.as_slice())\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     fn prefix_matches( line : &str, prefix : &str ) -> bool {\n         to_lower(line).as_slice().starts_with(to_lower(prefix).as_slice())\n     }\n@@ -1246,14 +1249,16 @@ fn make_cmdline(_libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {}\", prog, args.connect(\" \"))\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n // for diagnostic purposes\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn lib_path_cmd_prefix(path: &str) -> String {\n     format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }"}, {"sha": "8947856e332a7c748a0bf8ae35a44ac242516f14", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -10,13 +10,15 @@\n \n use common::Config;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n use std::os::getenv;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n static OS_TABLE: &'static [(&'static str, &'static str)] = &[\n-    (\"mingw32\", \"win32\"),\n-    (\"win32\", \"win32\"),\n+    (\"mingw32\", \"windows\"),\n+    (\"win32\", \"windows\"),\n+    (\"windows\", \"windows\"),\n     (\"darwin\", \"macos\"),\n     (\"android\", \"android\"),\n     (\"linux\", \"linux\"),\n@@ -33,7 +35,8 @@ pub fn get_os(triple: &str) -> &'static str {\n     fail!(\"Cannot determine OS from triple\");\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn make_new_path(path: &str) -> String {\n \n     // Windows just uses PATH as the library search path, so we have to\n@@ -46,10 +49,12 @@ pub fn make_new_path(path: &str) -> String {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn lib_path_env_var() -> &'static str { \"PATH\" }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn path_div() -> &'static str { \";\" }\n \n pub fn logv(config: &Config, s: String) {"}, {"sha": "5d0f35fbd6064811f28e6e1459f3b629b86c8978", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -61,13 +61,15 @@ def run(args):\n     elif 'android' in os:\n         os = 'android'\n     elif 'win' in os or 'mingw' in os:\n-        os = 'win32'\n+        os = 'windows'\n     cfg = [\n         \"target_arch = \\\"\" + arch + \"\\\"\",\n         \"target_os = \\\"\" + os + \"\\\"\",\n     ]\n \n     f.write(\"#[cfg(\" + ', '.join(cfg) + \")]\\n\")\n+    if os == \"windows\": # NOTE: Remove after snapshot\n+        f.write(\"#[cfg(stage0, target_arch = \\\"%s\\\", target_os = \\\"win32\\\")]\\n\" % (arch,))\n \n     version = run([llconfig, '--version']).strip()\n "}, {"sha": "c005ae71480517c94b75eedc21169a4b142b1f7a", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -1138,7 +1138,8 @@ pub mod types {\n         }\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -1803,7 +1804,8 @@ pub mod consts {\n     // Consts tend to vary per OS so we pull their definitions out\n     // into this module.\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3887,7 +3889,8 @@ pub mod funcs {\n     // so be careful when trying to write portable code; it won't always work\n     // with the same POSIX functions and types as other platforms.\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::common::posix01::{stat, utimbuf};\n@@ -4316,7 +4319,8 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod posix01 {\n         pub mod stat_ {\n         }\n@@ -4332,7 +4336,8 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"macos\")]\n@@ -4470,7 +4475,8 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod bsd44 {\n     }\n \n@@ -4496,7 +4502,8 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(target_os = \"windows\")]\n+    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod extra {\n \n         pub mod kernel32 {"}, {"sha": "afd818bd7d7e7d23a8e82ed8623c1771ef33d20c", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -58,7 +58,8 @@ pub mod file;\n #[path = \"timer_unix.rs\"]\n pub mod timer;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[path = \"timer_win32.rs\"]\n pub mod timer;\n "}, {"sha": "33bf1c8b9643cc0ad09a16dd8edaf64a4b9d7d75", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -390,7 +390,7 @@ pub fn default_lib_output() -> CrateType {\n \n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let tos = match sess.targ_cfg.os {\n-        abi::OsWindows =>   InternedString::new(\"win32\"),\n+        abi::OsWindows =>   InternedString::new(\"windows\"),\n         abi::OsMacos =>     InternedString::new(\"macos\"),\n         abi::OsLinux =>     InternedString::new(\"linux\"),\n         abi::OsAndroid =>   InternedString::new(\"android\"),\n@@ -454,6 +454,7 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n static os_names : &'static [(&'static str, abi::Os)] = &[\n     (\"mingw32\",   abi::OsWindows),\n     (\"win32\",     abi::OsWindows),\n+    (\"windows\",   abi::OsWindows),\n     (\"darwin\",    abi::OsMacos),\n     (\"android\",   abi::OsAndroid),\n     (\"linux\",     abi::OsLinux),"}, {"sha": "c5ac9416fa06d9d2ca8413e48f7a5247e2553160", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -73,7 +73,8 @@ impl PluginManager {\n     }\n }\n \n-#[cfg(target_os=\"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn libname(mut n: String) -> String {\n     n.push_str(\".dll\");\n     n\n@@ -85,7 +86,8 @@ fn libname(mut n: String) -> String {\n     n\n }\n \n-#[cfg(not(target_os=\"win32\"), not(target_os=\"macos\"))]\n+#[cfg(not(stage0), not(target_os=\"windows\"), not(target_os=\"macos\"))]\n+#[cfg(stage0, not(target_os=\"win32\"), not(target_os=\"macos\"))] // NOTE: Remove after snapshot\n fn libname(n: String) -> String {\n     let mut i = String::from_str(\"lib\");\n     i.push_str(n.as_slice());"}, {"sha": "453a9307579d4681aa6abeb53ee9e6a26e224731", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -147,7 +147,8 @@ mod imp {\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n mod imp {\n     use core::prelude::*;\n     use collections::vec::Vec;"}, {"sha": "72d78d84aa3e69bcdf079ab2d63f629e184b5b49", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -86,7 +86,8 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[link(name = \"gcc_s\")]\n extern {}\n "}, {"sha": "772b5da8cd5b809c12b28d235673d3c6ac71f44a", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -199,7 +199,8 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:112\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86_64\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_record_sp_limit(limit: uint) {\n         // see: http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n         // store this inside of the \"arbitrary data slot\", but double the size\n@@ -227,7 +228,8 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movl $0, %gs:48\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_record_sp_limit(limit: uint) {\n         // see: http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n         // store this inside of the \"arbitrary data slot\"\n@@ -280,7 +282,8 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movq %fs:112, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86_64\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86_64\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %gs:0x28, $0\" : \"=r\"(limit) ::: \"volatile\");\n@@ -316,7 +319,8 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movl %gs:48, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(target_arch = \"x86\", target_os = \"win32\")] #[inline(always)]\n+    #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n+    #[cfg(stage0, target_arch = \"x86\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movl %fs:0x14, $0\" : \"=r\"(limit) ::: \"volatile\");"}, {"sha": "81114dccb62ea0a6360d84ef6bcec343425b2e6d", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -723,7 +723,8 @@ extern {}\n #[link(name = \"rt\")]\n extern {}\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[link(name = \"ws2_32\")]\n #[link(name = \"psapi\")]\n #[link(name = \"iphlpapi\")]"}, {"sha": "c1e8fd8832a9f8e8697c9cdea0467af13d9f7b88", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -278,7 +278,8 @@ pub mod dl {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub mod dl {\n     use c_str::ToCStr;\n     use iter::Iterator;"}, {"sha": "7a3991b569674b337fe02243f1fbaa64a2bf3b1a", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -1842,15 +1842,16 @@ pub mod consts {\n     pub static EXE_EXTENSION: &'static str = \"\";\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"windows\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `win32`.\n-    pub static SYSNAME: &'static str = \"win32\";\n+    pub static SYSNAME: &'static str = \"windows\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, the empty string."}, {"sha": "3280829f958352d781785ea693d72a0d7ee8427f", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -147,7 +147,7 @@ impl fmt::Show for Os {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             OsLinux => \"linux\".fmt(f),\n-            OsWindows => \"win32\".fmt(f),\n+            OsWindows => \"windows\".fmt(f),\n             OsMacos => \"macos\".fmt(f),\n             OsiOS => \"ios\".fmt(f),\n             OsAndroid => \"android\".fmt(f),"}, {"sha": "cb99f90bea8ef8e92729da4e4dcf44575204de52", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -17,7 +17,8 @@ mod hello;\n #[cfg(target_os = \"macos\")]\n mod hello;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n mod hello;\n \n #[cfg(target_os = \"freebsd\")]"}, {"sha": "f8110ad79754e51f0d2c932e7e89a186ee798c2e", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -42,7 +42,8 @@ mod m {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "f9a496feb6c0880b586ecd66b84991d05f15c489", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd12967aed35b7788f7d3c7460b76b76e70b60/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=3dfd12967aed35b7788f7d3c7460b76b76e70b60", "patch": "@@ -55,7 +55,8 @@ mod m {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(target_os = \"windows\")]\n+#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}]}