{"sha": "32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjQxOGY2MGExZGM5MjRhMTRjZThkMWE2YmY3MWMxNzk0NzgyY2M=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-02T15:10:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-02T15:10:41Z"}, "message": "Rollup merge of #41981 - gamazeps:thread-detach, r=frewsxcv\n\n[Doc] Expands `detach` documentation in `thread::JoinHande`.\n\nPart of #29378 .\n\n- Adds an example of a thread detaching.\n- Expands what `detaching` means.\n\nr? @steveklabnik", "tree": {"sha": "c9107723312e341fec0bc603366d5a738741e030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9107723312e341fec0bc603366d5a738741e030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "html_url": "https://github.com/rust-lang/rust/commit/32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7798c3d179c7c18736fc0465e7ba6618c575a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7798c3d179c7c18736fc0465e7ba6618c575a34", "html_url": "https://github.com/rust-lang/rust/commit/d7798c3d179c7c18736fc0465e7ba6618c575a34"}, {"sha": "b76b9e1467f97d9f156da1773728c30ca5fd019a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76b9e1467f97d9f156da1773728c30ca5fd019a", "html_url": "https://github.com/rust-lang/rust/commit/b76b9e1467f97d9f156da1773728c30ca5fd019a"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "64c31c2a681cf2a259006caf7a14822f4a342c9b", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f418f60a1dc924a14ce8d1a6bf71c1794782cc/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=32f418f60a1dc924a14ce8d1a6bf71c1794782cc", "patch": "@@ -1094,11 +1094,12 @@ impl<T> JoinInner<T> {\n \n /// An owned permission to join on a thread (block on its termination).\n ///\n-/// A `JoinHandle` *detaches* the child thread when it is dropped.\n+/// A `JoinHandle` *detaches* the associated thread when it is dropped, which\n+/// means that there is no longer any handle to thread and no way to `join`\n+/// on it.\n ///\n /// Due to platform restrictions, it is not possible to [`Clone`] this\n-/// handle: the ability to join a child thread is a uniquely-owned\n-/// permission.\n+/// handle: the ability to join a thread is a uniquely-owned permission.\n ///\n /// This `struct` is created by the [`thread::spawn`] function and the\n /// [`thread::Builder::spawn`] method.\n@@ -1127,6 +1128,30 @@ impl<T> JoinInner<T> {\n /// }).unwrap();\n /// ```\n ///\n+/// Child being detached and outliving its parent:\n+///\n+/// ```no_run\n+/// use std::thread;\n+/// use std::time::Duration;\n+///\n+/// let original_thread = thread::spawn(|| {\n+///     let _detached_thread = thread::spawn(|| {\n+///         // Here we sleep to make sure that the first thread returns before.\n+///         thread::sleep(Duration::from_millis(10));\n+///         // This will be called, even though the JoinHandle is dropped.\n+///         println!(\"\u266b Still alive \u266b\");\n+///     });\n+/// });\n+///\n+/// let _ = original_thread.join();\n+/// println!(\"Original thread is joined.\");\n+///\n+/// // We make sure that the new thread has time to run, before the main\n+/// // thread returns.\n+///\n+/// thread::sleep(Duration::from_millis(1000));\n+/// ```\n+///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n /// [`thread::spawn`]: fn.spawn.html\n /// [`thread::Builder::spawn`]: struct.Builder.html#method.spawn"}]}