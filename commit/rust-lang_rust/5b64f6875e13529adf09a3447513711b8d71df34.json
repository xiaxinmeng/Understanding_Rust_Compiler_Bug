{"sha": "5b64f6875e13529adf09a3447513711b8d71df34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjRmNjg3NWUxMzUyOWFkZjA5YTM0NDc1MTM3MTFiOGQ3MWRmMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-20T21:52:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-20T21:52:18Z"}, "message": "Auto merge of #3675 - mikerite:fix-build-20190120, r=matthiaskrgr\n\nFix build 20190120", "tree": {"sha": "947addcd997129d1e8d8bfbef540b762d01d66c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947addcd997129d1e8d8bfbef540b762d01d66c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b64f6875e13529adf09a3447513711b8d71df34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b64f6875e13529adf09a3447513711b8d71df34", "html_url": "https://github.com/rust-lang/rust/commit/5b64f6875e13529adf09a3447513711b8d71df34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b64f6875e13529adf09a3447513711b8d71df34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e648adf0866a1cea7db6ce2d33ea86e442f25377", "url": "https://api.github.com/repos/rust-lang/rust/commits/e648adf0866a1cea7db6ce2d33ea86e442f25377", "html_url": "https://github.com/rust-lang/rust/commit/e648adf0866a1cea7db6ce2d33ea86e442f25377"}, {"sha": "a747dbb04f044e37da19f82233ad2dce5d0c1bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a747dbb04f044e37da19f82233ad2dce5d0c1bec", "html_url": "https://github.com/rust-lang/rust/commit/a747dbb04f044e37da19f82233ad2dce5d0c1bec"}], "stats": {"total": 414, "additions": 183, "deletions": 231}, "files": [{"sha": "9e4dd52c4143fd2da7f4b727991fba05ddd2fe18", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -376,8 +376,9 @@ fn is_relevant_trait(tcx: TyCtxt<'_, '_, '_>, item: &TraitItem) -> bool {\n fn is_relevant_block(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, block: &Block) -> bool {\n     if let Some(stmt) = block.stmts.first() {\n         match &stmt.node {\n-            StmtKind::Decl(_, _) => true,\n-            StmtKind::Expr(expr, _) | StmtKind::Semi(expr, _) => is_relevant_expr(tcx, tables, expr),\n+            StmtKind::Local(_) => true,\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(tcx, tables, expr),\n+            _ => false,\n         }\n     } else {\n         block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))"}, {"sha": "49722e5ad71f2c07cc4a0dd0ab644f373c42a98f", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -14,6 +14,7 @@ use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{FloatTy, LitKind};\n use syntax::ptr::P;\n+use syntax_pos::symbol::Symbol;\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n #[derive(Debug, Clone)]\n@@ -38,6 +39,8 @@ pub enum Constant {\n     Repeat(Box<Constant>, u64),\n     /// a tuple of constants\n     Tuple(Vec<Constant>),\n+    /// a literal with syntax error\n+    Err(Symbol),\n }\n \n impl PartialEq for Constant {\n@@ -103,6 +106,9 @@ impl Hash for Constant {\n                 c.hash(state);\n                 l.hash(state);\n             },\n+            Constant::Err(ref s) => {\n+                s.hash(state);\n+            },\n         }\n     }\n }\n@@ -155,6 +161,7 @@ pub fn lit_to_constant<'tcx>(lit: &LitKind, ty: Ty<'tcx>) -> Constant {\n             _ => bug!(),\n         },\n         LitKind::Bool(b) => Constant::Bool(b),\n+        LitKind::Err(s) => Constant::Err(s),\n     }\n }\n "}, {"sha": "a7b47fd1e5463f32ddcc00cb3d98a9e53c1064e2", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -120,18 +120,16 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         if let Categorization::Rvalue(..) = cmt.cat {\n             let id = map.hir_to_node_id(cmt.hir_id);\n             if let Some(Node::Stmt(st)) = map.find(map.get_parent_node(id)) {\n-                if let StmtKind::Decl(ref decl, _) = st.node {\n-                    if let DeclKind::Local(ref loc) = decl.node {\n-                        if let Some(ref ex) = loc.init {\n-                            if let ExprKind::Box(..) = ex.node {\n-                                if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n-                                    // let x = box (...)\n-                                    self.set.insert(consume_pat.id);\n-                                }\n-                                // TODO Box::new\n-                                // TODO vec![]\n-                                // TODO \"foo\".to_owned() and friends\n+                if let StmtKind::Local(ref loc) = st.node {\n+                    if let Some(ref ex) = loc.init {\n+                        if let ExprKind::Box(..) = ex.node {\n+                            if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n+                                // let x = box (...)\n+                                self.set.insert(consume_pat.id);\n                             }\n+                            // TODO Box::new\n+                            // TODO vec![]\n+                            // TODO \"foo\".to_owned() and friends\n                         }\n                     }\n                 }"}, {"sha": "2b4b0d402392631b90135bc0d61e7d200efb6926", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -89,14 +89,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         match stmt.node {\n-            StmtKind::Expr(ref e, _) | StmtKind::Semi(ref e, _) => DivergenceVisitor { cx }.maybe_walk_expr(e),\n-            StmtKind::Decl(ref d, _) => {\n-                if let DeclKind::Local(ref local) = d.node {\n-                    if let Local { init: Some(ref e), .. } = **local {\n-                        DivergenceVisitor { cx }.visit_expr(e);\n-                    }\n+            StmtKind::Local(ref local) => {\n+                if let Local { init: Some(ref e), .. } = **local {\n+                    DivergenceVisitor { cx }.visit_expr(e);\n                 }\n             },\n+            StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => DivergenceVisitor { cx }.maybe_walk_expr(e),\n+            StmtKind::Item(..) => {},\n         }\n     }\n }\n@@ -269,18 +268,14 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr) -> St\n \n fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> StopEarly {\n     match stmt.node {\n-        StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => check_expr(vis, expr),\n-        StmtKind::Decl(ref decl, _) => {\n-            // If the declaration is of a local variable, check its initializer\n-            // expression if it has one. Otherwise, keep going.\n-            let local = match decl.node {\n-                DeclKind::Local(ref local) => Some(local),\n-                _ => None,\n-            };\n-            local\n-                .and_then(|local| local.init.as_ref())\n-                .map_or(StopEarly::KeepGoing, |expr| check_expr(vis, expr))\n-        },\n+        StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => check_expr(vis, expr),\n+        // If the declaration is of a local variable, check its initializer\n+        // expression if it has one. Otherwise, keep going.\n+        StmtKind::Local(ref local) => local\n+            .init\n+            .as_ref()\n+            .map_or(StopEarly::KeepGoing, |expr| check_expr(vis, expr)),\n+        _ => StopEarly::KeepGoing,\n     }\n }\n "}, {"sha": "5154c6d4d08e4581acfa86292b0c19bb43e371df", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -68,10 +68,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n         while let Some(stmt) = it.next() {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n-                if let hir::StmtKind::Decl(ref decl, _) = stmt.node;\n-                if let hir::DeclKind::Local(ref decl) = decl.node;\n-                if let hir::PatKind::Binding(mode, canonical_id, ident, None) = decl.pat.node;\n-                if let hir::StmtKind::Expr(ref if_, _) = expr.node;\n+                if let hir::StmtKind::Local(ref local) = stmt.node;\n+                if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.node;\n+                if let hir::StmtKind::Expr(ref if_) = expr.node;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;\n                 if !used_in_expr(cx, canonical_id, cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.node;\n@@ -84,15 +83,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                         if let hir::ExprKind::Block(ref else_, _) = else_.node {\n                             if let Some(default) = check_assign(cx, canonical_id, else_) {\n                                 (else_.stmts.len() > 1, default)\n-                            } else if let Some(ref default) = decl.init {\n+                            } else if let Some(ref default) = local.init {\n                                 (true, &**default)\n                             } else {\n                                 continue;\n                             }\n                         } else {\n                             continue;\n                         }\n-                    } else if let Some(ref default) = decl.init {\n+                    } else if let Some(ref default) = local.init {\n                         (false, &**default)\n                     } else {\n                         continue;\n@@ -169,7 +168,7 @@ fn check_assign<'a, 'tcx>(\n     if_chain! {\n         if block.expr.is_none();\n         if let Some(expr) = block.stmts.iter().last();\n-        if let hir::StmtKind::Semi(ref expr, _) = expr.node;\n+        if let hir::StmtKind::Semi(ref expr) = expr.node;\n         if let hir::ExprKind::Assign(ref var, ref value) = expr.node;\n         if let hir::ExprKind::Path(ref qpath) = var.node;\n         if let Def::Local(local_id) = cx.tables.qpath_def(qpath, var.hir_id);"}, {"sha": "70ff86087ea63ca54b0657f73fd0a922b5ec5464", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use itertools::Itertools;\n use rustc::hir::def::Def;\n use rustc::hir::def_id;\n-use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::middle::region;\n@@ -597,7 +597,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n-        if let StmtKind::Semi(ref expr, _) = stmt.node {\n+        if let StmtKind::Semi(ref expr) = stmt.node {\n             if let ExprKind::MethodCall(ref method, _, ref args) = expr.node {\n                 if args.len() == 1 && method.ident.name == \"collect\" && match_trait_method(cx, expr, &paths::ITERATOR) {\n                     span_lint(\n@@ -668,13 +668,7 @@ fn never_loop_block(block: &Block, main_loop_id: NodeId) -> NeverLoopResult {\n fn stmt_to_expr(stmt: &Stmt) -> Option<&Expr> {\n     match stmt.node {\n         StmtKind::Semi(ref e, ..) | StmtKind::Expr(ref e, ..) => Some(e),\n-        StmtKind::Decl(ref d, ..) => decl_to_expr(d),\n-    }\n-}\n-\n-fn decl_to_expr(decl: &Decl) -> Option<&Expr> {\n-    match decl.node {\n-        DeclKind::Local(ref local) => local.init.as_ref().map(|p| &**p),\n+        StmtKind::Local(ref local) => local.init.as_ref().map(|p| &**p),\n         _ => None,\n     }\n }\n@@ -942,8 +936,8 @@ fn get_indexed_assignments<'a, 'tcx>(\n         stmts\n             .iter()\n             .map(|stmt| match stmt.node {\n-                StmtKind::Decl(..) => None,\n-                StmtKind::Expr(ref e, _node_id) | StmtKind::Semi(ref e, _node_id) => Some(get_assignment(cx, e, var)),\n+                StmtKind::Local(..) | StmtKind::Item(..) => None,\n+                StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => Some(get_assignment(cx, e, var)),\n             })\n             .chain(expr.as_ref().into_iter().map(|e| Some(get_assignment(cx, &*e, var))))\n             .filter_map(|op| op)\n@@ -1976,13 +1970,9 @@ fn extract_expr_from_first_stmt(block: &Block) -> Option<&Expr> {\n     if block.stmts.is_empty() {\n         return None;\n     }\n-    if let StmtKind::Decl(ref decl, _) = block.stmts[0].node {\n-        if let DeclKind::Local(ref local) = decl.node {\n-            if let Some(ref expr) = local.init {\n-                Some(expr)\n-            } else {\n-                None\n-            }\n+    if let StmtKind::Local(ref local) = block.stmts[0].node {\n+        if let Some(ref expr) = local.init {\n+            Some(expr)\n         } else {\n             None\n         }\n@@ -1996,8 +1986,8 @@ fn extract_first_expr(block: &Block) -> Option<&Expr> {\n     match block.expr {\n         Some(ref expr) if block.stmts.is_empty() => Some(expr),\n         None if !block.stmts.is_empty() => match block.stmts[0].node {\n-            StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => Some(expr),\n-            StmtKind::Decl(..) => None,\n+            StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => Some(expr),\n+            StmtKind::Local(..) | StmtKind::Item(..) => None,\n         },\n         _ => None,\n     }\n@@ -2095,9 +2085,9 @@ struct InitializeVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n-    fn visit_decl(&mut self, decl: &'tcx Decl) {\n+    fn visit_stmt(&mut self, stmt: &'tcx Stmt) {\n         // Look for declarations of the variable\n-        if let DeclKind::Local(ref local) = decl.node {\n+        if let StmtKind::Local(ref local) = stmt.node {\n             if local.pat.id == self.var_id {\n                 if let PatKind::Binding(_, _, ident, _) = local.pat.node {\n                     self.name = Some(ident.name);\n@@ -2114,7 +2104,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-        walk_decl(self, decl);\n+        walk_stmt(self, stmt);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n@@ -2261,7 +2251,7 @@ struct LoopNestVisitor {\n \n impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt) {\n-        if stmt.node.id() == self.id {\n+        if stmt.id == self.id {\n             self.nesting = LookFurther;\n         } else if self.nesting == Unknown {\n             walk_stmt(self, stmt);"}, {"sha": "ad5761f5f04a7f4ca658c7fc376d71a6b583a0db", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -131,9 +131,10 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a hir::Expr) ->\n                     // If block only contains statements,\n                     // reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.node {\n-                        hir::StmtKind::Decl(ref d, _) => Some(d.span),\n-                        hir::StmtKind::Expr(ref e, _) => Some(e.span),\n-                        hir::StmtKind::Semi(_, _) => Some(inner_stmt.span),\n+                        hir::StmtKind::Local(ref local) => Some(local.span),\n+                        hir::StmtKind::Expr(ref e) => Some(e.span),\n+                        hir::StmtKind::Semi(..) => Some(inner_stmt.span),\n+                        hir::StmtKind::Item(..) => None,\n                     }\n                 },\n                 _ => {\n@@ -250,7 +251,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n \n-        if let hir::StmtKind::Semi(ref expr, _) = stmt.node {\n+        if let hir::StmtKind::Semi(ref expr) = stmt.node {\n             if let Some(arglists) = method_chain_args(expr, &[\"map\"]) {\n                 lint_map_unit_fn(cx, stmt, expr, arglists[0]);\n             }"}, {"sha": "6c1befe6e53a5d7807df485f88541312bcfed252", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -1336,12 +1336,10 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                         _ => {},\n                     },\n                     hir::Node::Stmt(stmt) => {\n-                        if let hir::StmtKind::Decl(ref decl, _) = stmt.node {\n-                            if let hir::DeclKind::Local(ref loc) = decl.node {\n-                                if let hir::PatKind::Ref(..) = loc.pat.node {\n-                                    // let ref y = *x borrows x, let ref y = x.clone() does not\n-                                    return;\n-                                }\n+                        if let hir::StmtKind::Local(ref loc) = stmt.node {\n+                            if let hir::PatKind::Ref(..) = loc.pat.node {\n+                                // let ref y = *x borrows x, let ref y = x.clone() does not\n+                                return;\n                             }\n                         }\n                     },"}, {"sha": "88a6d62ee6dfe1f2c3555052a2985f9540c83e2b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -277,8 +277,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n         if_chain! {\n-            if let StmtKind::Decl(ref d, _) = s.node;\n-            if let DeclKind::Local(ref l) = d.node;\n+            if let StmtKind::Local(ref l) = s.node;\n             if let PatKind::Binding(an, _, i, None) = l.pat.node;\n             if let Some(ref init) = l.init;\n             then {\n@@ -316,7 +315,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n         };\n         if_chain! {\n-            if let StmtKind::Semi(ref expr, _) = s.node;\n+            if let StmtKind::Semi(ref expr) = s.node;\n             if let ExprKind::Binary(ref binop, ref a, ref b) = expr.node;\n             if binop.node == BinOpKind::And || binop.node == BinOpKind::Or;\n             if let Some(sugg) = Sugg::hir_opt(cx, a);"}, {"sha": "6fbb05733651e532d09e825f41a1bed25e0952b2", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -267,7 +267,7 @@ fn fetch_bool_block(block: &Block) -> Expression {\n     match (&*block.stmts, block.expr.as_ref()) {\n         (&[], Some(e)) => fetch_bool_expr(&**e),\n         (&[ref e], None) => {\n-            if let StmtKind::Semi(ref e, _) = e.node {\n+            if let StmtKind::Semi(ref e) = e.node {\n                 if let ExprKind::Ret(_) = e.node {\n                     fetch_bool_expr(&**e)\n                 } else {"}, {"sha": "cb1fe475a1eeeb1363bea725bbbbdf01823aca96", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -368,8 +368,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n                         Node::Stmt(s) => {\n                             // `let <pat> = x;`\n                             if_chain! {\n-                                if let StmtKind::Decl(ref decl, _) = s.node;\n-                                if let DeclKind::Local(ref local) = decl.node;\n+                                if let StmtKind::Local(ref local) = s.node;\n                                 then {\n                                     self.spans_need_deref\n                                         .entry(vid)"}, {"sha": "648c198df080ade8ec46275b5c65994ce2575f43", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -104,7 +104,7 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n-        if let StmtKind::Semi(ref expr, _) = stmt.node {\n+        if let StmtKind::Semi(ref expr) = stmt.node {\n             if has_no_effect(cx, expr) {\n                 span_lint(cx, NO_EFFECT, stmt.span, \"statement with no effect\");\n             } else if let Some(reduced) = reduce_expression(cx, expr) {"}, {"sha": "03f6ea12e0012ac961501c1c202e7b34955ae9b3", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -139,7 +139,7 @@ impl Pass {\n         if_chain! {\n             if block.stmts.len() == 1;\n             if let Some(expr) = block.stmts.iter().last();\n-            if let StmtKind::Semi(ref expr, _) = expr.node;\n+            if let StmtKind::Semi(ref expr) = expr.node;\n             if let ExprKind::Ret(ref ret_expr) = expr.node;\n             if let &Some(ref ret_expr) = ret_expr;\n "}, {"sha": "c99b00bb98f9db85ad4fa8da9c70d7f0609b0809", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -115,8 +115,9 @@ fn check_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, binding\n     let len = bindings.len();\n     for stmt in &block.stmts {\n         match stmt.node {\n-            StmtKind::Decl(ref decl, _) => check_decl(cx, decl, bindings),\n-            StmtKind::Expr(ref e, _) | StmtKind::Semi(ref e, _) => check_expr(cx, e, bindings),\n+            StmtKind::Local(ref local) => check_local(cx, local, bindings),\n+            StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => check_expr(cx, e, bindings),\n+            StmtKind::Item(..) => {},\n         }\n     }\n     if let Some(ref o) = block.expr {\n@@ -125,30 +126,28 @@ fn check_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, binding\n     bindings.truncate(len);\n }\n \n-fn check_decl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl, bindings: &mut Vec<(Name, Span)>) {\n-    if in_external_macro(cx.sess(), decl.span) {\n+fn check_local<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, local: &'tcx Local, bindings: &mut Vec<(Name, Span)>) {\n+    if in_external_macro(cx.sess(), local.span) {\n         return;\n     }\n-    if higher::is_from_for_desugar(decl) {\n+    if higher::is_from_for_desugar(local) {\n         return;\n     }\n-    if let DeclKind::Local(ref local) = decl.node {\n-        let Local {\n-            ref pat,\n-            ref ty,\n-            ref init,\n-            span,\n-            ..\n-        } = **local;\n-        if let Some(ref t) = *ty {\n-            check_ty(cx, t, bindings)\n-        }\n-        if let Some(ref o) = *init {\n-            check_expr(cx, o, bindings);\n-            check_pat(cx, pat, Some(o), span, bindings);\n-        } else {\n-            check_pat(cx, pat, None, span, bindings);\n-        }\n+    let Local {\n+        ref pat,\n+        ref ty,\n+        ref init,\n+        span,\n+        ..\n+    } = *local;\n+    if let Some(ref t) = *ty {\n+        check_ty(cx, t, bindings)\n+    }\n+    if let Some(ref o) = *init {\n+        check_expr(cx, o, bindings);\n+        check_pat(cx, pat, Some(o), span, bindings);\n+    } else {\n+        check_pat(cx, pat, None, span, bindings);\n     }\n }\n "}, {"sha": "aea414065d85810be51069d09dbee620f916523d", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -91,8 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n-            if let StmtKind::Decl(ref decl, _) = stmt.node;\n-            if let DeclKind::Local(ref local) = decl.node;\n+            if let StmtKind::Local(ref local) = stmt.node;\n             if let PatKind::Binding(BindingAnnotation::Mutable, _, variable_name, None) = local.pat.node;\n             if let Some(ref init) = local.init;\n             if let Some(ref len_arg) = Self::is_vec_with_capacity(init);\n@@ -104,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     len_expr: len_arg,\n                 };\n \n-                Self::search_initialization(cx, vi, stmt.node.id());\n+                Self::search_initialization(cx, vi, stmt.id);\n             }\n         }\n     }\n@@ -287,7 +286,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt) {\n         if self.initialization_found {\n             match stmt.node {\n-                StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => {\n+                StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => {\n                     self.search_slow_extend_filling(expr);\n                     self.search_slow_resize_filling(expr);\n                 },"}, {"sha": "ddf33fcc411f7f081dc2447e3b7c75195f00feb1", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -71,17 +71,16 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n     for w in block.stmts.windows(3) {\n         if_chain! {\n             // let t = foo();\n-            if let StmtKind::Decl(ref tmp, _) = w[0].node;\n-            if let DeclKind::Local(ref tmp) = tmp.node;\n+            if let StmtKind::Local(ref tmp) = w[0].node;\n             if let Some(ref tmp_init) = tmp.init;\n             if let PatKind::Binding(_, _, ident, None) = tmp.pat.node;\n \n             // foo() = bar();\n-            if let StmtKind::Semi(ref first, _) = w[1].node;\n+            if let StmtKind::Semi(ref first) = w[1].node;\n             if let ExprKind::Assign(ref lhs1, ref rhs1) = first.node;\n \n             // bar() = t;\n-            if let StmtKind::Semi(ref second, _) = w[2].node;\n+            if let StmtKind::Semi(ref second) = w[2].node;\n             if let ExprKind::Assign(ref lhs2, ref rhs2) = second.node;\n             if let ExprKind::Path(QPath::Resolved(None, ref rhs2)) = rhs2.node;\n             if rhs2.segments.len() == 1;\n@@ -160,8 +159,8 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n     for w in block.stmts.windows(2) {\n         if_chain! {\n-            if let StmtKind::Semi(ref first, _) = w[0].node;\n-            if let StmtKind::Semi(ref second, _) = w[1].node;\n+            if let StmtKind::Semi(ref first) = w[0].node;\n+            if let StmtKind::Semi(ref second) = w[1].node;\n             if !differing_macro_contexts(first.span, second.span);\n             if let ExprKind::Assign(ref lhs0, ref rhs0) = first.node;\n             if let ExprKind::Assign(ref lhs1, ref rhs1) = second.node;"}, {"sha": "898fd5a98089bcec33ec46f323146658b4657c2a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -463,37 +463,33 @@ declare_clippy_lint! {\n     \"creating a let binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n-fn check_let_unit(cx: &LateContext<'_, '_>, decl: &Decl) {\n-    if let DeclKind::Local(ref local) = decl.node {\n-        if is_unit(cx.tables.pat_ty(&local.pat)) {\n-            if in_external_macro(cx.sess(), decl.span) || in_macro(local.pat.span) {\n-                return;\n-            }\n-            if higher::is_from_for_desugar(decl) {\n-                return;\n-            }\n-            span_lint(\n-                cx,\n-                LET_UNIT_VALUE,\n-                decl.span,\n-                &format!(\n-                    \"this let-binding has unit value. Consider omitting `let {} =`\",\n-                    snippet(cx, local.pat.span, \"..\")\n-                ),\n-            );\n-        }\n-    }\n-}\n-\n impl LintPass for LetPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LET_UNIT_VALUE)\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetPass {\n-    fn check_decl(&mut self, cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl) {\n-        check_let_unit(cx, decl)\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n+        if let StmtKind::Local(ref local) = stmt.node {\n+            if is_unit(cx.tables.pat_ty(&local.pat)) {\n+                if in_external_macro(cx.sess(), stmt.span) || in_macro(local.pat.span) {\n+                    return;\n+                }\n+                if higher::is_from_for_desugar(local) {\n+                    return;\n+                }\n+                span_lint(\n+                    cx,\n+                    LET_UNIT_VALUE,\n+                    stmt.span,\n+                    &format!(\n+                        \"this let-binding has unit value. Consider omitting `let {} =`\",\n+                        snippet(cx, local.pat.span, \"..\")\n+                    ),\n+                );\n+            }\n+        }\n     }\n }\n "}, {"sha": "27deb0d99459c7f9eff623547714170fa6a4cf2e", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -41,7 +41,7 @@ impl LintPass for UnusedIoAmount {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n         let expr = match s.node {\n-            hir::StmtKind::Semi(ref expr, _) | hir::StmtKind::Expr(ref expr, _) => &**expr,\n+            hir::StmtKind::Semi(ref expr) | hir::StmtKind::Expr(ref expr) => &**expr,\n             _ => return,\n         };\n "}, {"sha": "9623c6cbdaddf94b6783d0d03e949b72fd28643b", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -4,7 +4,7 @@\n use crate::utils::get_attr;\n use rustc::hir;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::{BindingAnnotation, DeclKind, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n+use rustc::hir::{BindingAnnotation, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_data_structures::fx::FxHashMap;\n@@ -260,6 +260,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 match lit.node {\n                     LitKind::Bool(val) => println!(\"    if let LitKind::Bool({:?}) = {}.node;\", val, lit_pat),\n                     LitKind::Char(c) => println!(\"    if let LitKind::Char({:?}) = {}.node;\", c, lit_pat),\n+                    LitKind::Err(val) => println!(\"    if let LitKind::Err({}) = {}.node;\", val, lit_pat),\n                     LitKind::Byte(b) => println!(\"    if let LitKind::Byte({}) = {}.node;\", b, lit_pat),\n                     // FIXME: also check int type\n                     LitKind::Int(i, _) => println!(\"    if let LitKind::Int({}, _) = {}.node;\", i, lit_pat),\n@@ -625,43 +626,34 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         print!(\"    if let StmtKind::\");\n         let current = format!(\"{}.node\", self.current);\n         match s.node {\n-            // Could be an item or a local (let) binding:\n-            StmtKind::Decl(ref decl, _) => {\n-                let decl_pat = self.next(\"decl\");\n-                println!(\"Decl(ref {}, _) = {}\", decl_pat, current);\n-                print!(\"    if let DeclKind::\");\n-                let current = format!(\"{}.node\", decl_pat);\n-                match decl.node {\n-                    // A local (let) binding:\n-                    DeclKind::Local(ref local) => {\n-                        let local_pat = self.next(\"local\");\n-                        println!(\"Local(ref {}) = {};\", local_pat, current);\n-                        if let Some(ref init) = local.init {\n-                            let init_pat = self.next(\"init\");\n-                            println!(\"    if let Some(ref {}) = {}.init\", init_pat, local_pat);\n-                            self.current = init_pat;\n-                            self.visit_expr(init);\n-                        }\n-                        self.current = format!(\"{}.pat\", local_pat);\n-                        self.visit_pat(&local.pat);\n-                    },\n-                    // An item binding:\n-                    DeclKind::Item(_) => {\n-                        println!(\"Item(item_id) = {};\", current);\n-                    },\n+            // A local (let) binding:\n+            StmtKind::Local(ref local) => {\n+                let local_pat = self.next(\"local\");\n+                println!(\"Local(ref {}) = {};\", local_pat, current);\n+                if let Some(ref init) = local.init {\n+                    let init_pat = self.next(\"init\");\n+                    println!(\"    if let Some(ref {}) = {}.init\", init_pat, local_pat);\n+                    self.current = init_pat;\n+                    self.visit_expr(init);\n                 }\n+                self.current = format!(\"{}.pat\", local_pat);\n+                self.visit_pat(&local.pat);\n+            },\n+            // An item binding:\n+            StmtKind::Item(_) => {\n+                println!(\"Item(item_id) = {};\", current);\n             },\n \n             // Expr without trailing semi-colon (must have unit type):\n-            StmtKind::Expr(ref e, _) => {\n+            StmtKind::Expr(ref e) => {\n                 let e_pat = self.next(\"e\");\n                 println!(\"Expr(ref {}, _) = {}\", e_pat, current);\n                 self.current = e_pat;\n                 self.visit_expr(e);\n             },\n \n             // Expr with trailing semi-colon (may have any type):\n-            StmtKind::Semi(ref e, _) => {\n+            StmtKind::Semi(ref e) => {\n                 let e_pat = self.next(\"e\");\n                 println!(\"Semi(ref {}, _) = {}\", e_pat, current);\n                 self.current = e_pat;"}, {"sha": "537cdf55eb146d5fff6cd0933aaa8877bab3db8f", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -148,8 +148,8 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n     }\n }\n \n-/// Checks if a `let` decl is from a `for` loop desugaring.\n-pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n+/// Checks if a `let` statement is from a `for` loop desugaring.\n+pub fn is_from_for_desugar(local: &hir::Local) -> bool {\n     // This will detect plain for-loops without an actual variable binding:\n     //\n     // ```\n@@ -158,8 +158,7 @@ pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n     // }\n     // ```\n     if_chain! {\n-        if let hir::DeclKind::Local(ref loc) = decl.node;\n-        if let Some(ref expr) = loc.init;\n+        if let Some(ref expr) = local.init;\n         if let hir::ExprKind::Match(_, _, hir::MatchSource::ForLoopDesugar) = expr.node;\n         then {\n             return true;\n@@ -174,12 +173,8 @@ pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n     //     // anything\n     // }\n     // ```\n-    if_chain! {\n-        if let hir::DeclKind::Local(ref loc) = decl.node;\n-        if let hir::LocalSource::ForLoopDesugar = loc.source;\n-        then {\n-            return true;\n-        }\n+    if let hir::LocalSource::ForLoopDesugar = local.source {\n+        return true;\n     }\n \n     false\n@@ -195,11 +190,10 @@ pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)>\n         if let hir::ExprKind::Loop(ref block, _, _) = arms[0].body.node;\n         if block.expr.is_none();\n         if let [ _, _, ref let_stmt, ref body ] = *block.stmts;\n-        if let hir::StmtKind::Decl(ref decl, _) = let_stmt.node;\n-        if let hir::DeclKind::Local(ref decl) = decl.node;\n-        if let hir::StmtKind::Expr(ref expr, _) = body.node;\n+        if let hir::StmtKind::Local(ref local) = let_stmt.node;\n+        if let hir::StmtKind::Expr(ref expr) = body.node;\n         then {\n-            return Some((&*decl.pat, &iterargs[0], expr));\n+            return Some((&*local.pat, &iterargs[0], expr));\n         }\n     }\n     None"}, {"sha": "a176830be26bc6257f0bb1d88dfee666f8c1e220", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -43,17 +43,14 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     /// Check whether two statements are the same.\n     pub fn eq_stmt(&mut self, left: &Stmt, right: &Stmt) -> bool {\n         match (&left.node, &right.node) {\n-            (&StmtKind::Decl(ref l, _), &StmtKind::Decl(ref r, _)) => {\n-                if let (&DeclKind::Local(ref l), &DeclKind::Local(ref r)) = (&l.node, &r.node) {\n-                    self.eq_pat(&l.pat, &r.pat)\n-                        && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n-                        && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n-                } else {\n-                    false\n-                }\n+            (&StmtKind::Local(ref l), &StmtKind::Local(ref r)) => {\n+                self.eq_pat(&l.pat, &r.pat)\n+                    && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n+                    && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n+            },\n+            (&StmtKind::Expr(ref l), &StmtKind::Expr(ref r)) | (&StmtKind::Semi(ref l), &StmtKind::Semi(ref r)) => {\n+                self.eq_expr(l, r)\n             },\n-            (&StmtKind::Expr(ref l, _), &StmtKind::Expr(ref r, _))\n-            | (&StmtKind::Semi(ref l, _), &StmtKind::Semi(ref r, _)) => self.eq_expr(l, r),\n             _ => false,\n         }\n     }\n@@ -643,23 +640,24 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_stmt(&mut self, b: &Stmt) {\n         match b.node {\n-            StmtKind::Decl(ref decl, _) => {\n-                let c: fn(_, _) -> _ = StmtKind::Decl;\n+            StmtKind::Local(ref local) => {\n+                let c: fn(_) -> _ = StmtKind::Local;\n                 c.hash(&mut self.s);\n-\n-                if let DeclKind::Local(ref local) = decl.node {\n-                    if let Some(ref init) = local.init {\n-                        self.hash_expr(init);\n-                    }\n+                if let Some(ref init) = local.init {\n+                    self.hash_expr(init);\n                 }\n             },\n-            StmtKind::Expr(ref expr, _) => {\n-                let c: fn(_, _) -> _ = StmtKind::Expr;\n+            StmtKind::Item(..) => {\n+                let c: fn(_) -> _ = StmtKind::Item;\n+                c.hash(&mut self.s);\n+            },\n+            StmtKind::Expr(ref expr) => {\n+                let c: fn(_) -> _ = StmtKind::Expr;\n                 c.hash(&mut self.s);\n                 self.hash_expr(expr);\n             },\n-            StmtKind::Semi(ref expr, _) => {\n-                let c: fn(_, _) -> _ = StmtKind::Semi;\n+            StmtKind::Semi(ref expr) => {\n+                let c: fn(_) -> _ = StmtKind::Semi;\n                 c.hash(&mut self.s);\n                 self.hash_expr(expr);\n             },"}, {"sha": "4116f8ffbafab05968f2885ebfd9174084d92e77", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -122,8 +122,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         match stmt.node {\n-            hir::StmtKind::Decl(ref decl, _) => print_decl(cx, decl),\n-            hir::StmtKind::Expr(ref e, _) | hir::StmtKind::Semi(ref e, _) => print_expr(cx, e, 0),\n+            hir::StmtKind::Local(ref local) => {\n+                println!(\"local variable of type {}\", cx.tables.node_id_to_type(local.hir_id));\n+                println!(\"pattern:\");\n+                print_pat(cx, &local.pat, 0);\n+                if let Some(ref e) = local.init {\n+                    println!(\"init expression:\");\n+                    print_expr(cx, e, 0);\n+                }\n+            },\n+            hir::StmtKind::Item(_) => println!(\"item decl\"),\n+            hir::StmtKind::Expr(ref e) | hir::StmtKind::Semi(ref e) => print_expr(cx, e, 0),\n         }\n     }\n     // fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx\n@@ -139,21 +148,6 @@ fn has_attr(attrs: &[Attribute]) -> bool {\n     get_attr(attrs, \"dump\").count() > 0\n }\n \n-fn print_decl(cx: &LateContext<'_, '_>, decl: &hir::Decl) {\n-    match decl.node {\n-        hir::DeclKind::Local(ref local) => {\n-            println!(\"local variable of type {}\", cx.tables.node_id_to_type(local.hir_id));\n-            println!(\"pattern:\");\n-            print_pat(cx, &local.pat, 0);\n-            if let Some(ref e) = local.init {\n-                println!(\"init expression:\");\n-                print_expr(cx, e, 0);\n-            }\n-        },\n-        hir::DeclKind::Item(_) => println!(\"item decl\"),\n-    }\n-}\n-\n #[allow(clippy::similar_names)]\n fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n     let ind = \"  \".repeat(indent);"}, {"sha": "c8c291c8cc873a87d5b69d13531e568e8ff3a42d", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use std::borrow::Cow;\n use syntax::ast::*;\n use syntax::parse::{parser, token};\n-use syntax::tokenstream::{ThinTokenStream, TokenStream};\n+use syntax::tokenstream::TokenStream;\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n@@ -261,9 +261,9 @@ impl EarlyLintPass for Pass {\n /// ```rust,ignore\n /// (Some(\"string to write: {}\"), Some(buf))\n /// ```\n-fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> (Option<String>, Option<Expr>) {\n+fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (Option<String>, Option<Expr>) {\n     use fmt_macros::*;\n-    let tts = TokenStream::from(tts.clone());\n+    let tts = tts.clone();\n     let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, None, false, false);\n     let mut expr: Option<Expr> = None;\n     if is_write {"}, {"sha": "87593fafb464345f8d295ece55464f27fe38fe65", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -1,6 +1,5 @@\n if_chain! {\n-    if let StmtKind::Decl(ref decl, _) = stmt.node\n-    if let DeclKind::Local(ref local) = decl.node;\n+    if let StmtKind::Local(ref local) = stmt.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Cast(ref expr, ref cast_ty) = init.node;\n     if let TyKind::Path(ref qp) = cast_ty.node;"}, {"sha": "d9322d618bfd906e13c69fafb8a4ad52c97ca61a", "filename": "tests/ui/author/call.stdout", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/tests%2Fui%2Fauthor%2Fcall.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/tests%2Fui%2Fauthor%2Fcall.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.stdout?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -1,6 +1,5 @@\n if_chain! {\n-    if let StmtKind::Decl(ref decl, _) = stmt.node\n-    if let DeclKind::Local(ref local) = decl.node;\n+    if let StmtKind::Local(ref local) = stmt.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Call(ref func, ref args) = init.node;\n     if let ExprKind::Path(ref path) = func.node;"}, {"sha": "1611f419e5d31f9eda374c7d823e36b6d6b1780c", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b64f6875e13529adf09a3447513711b8d71df34/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b64f6875e13529adf09a3447513711b8d71df34/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=5b64f6875e13529adf09a3447513711b8d71df34", "patch": "@@ -1,7 +1,6 @@\n if_chain! {\n     if let ExprKind::Block(ref block) = expr.node;\n-    if let StmtKind::Decl(ref decl, _) = block.node\n-    if let DeclKind::Local(ref local) = decl.node;\n+    if let StmtKind::Local(ref local) = block.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Match(ref expr, ref arms, MatchSource::ForLoopDesugar) = init.node;\n     if let ExprKind::Call(ref func, ref args) = expr.node;\n@@ -14,8 +13,7 @@ if_chain! {\n     // unimplemented: field checks\n     if arms.len() == 1;\n     if let ExprKind::Loop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;\n-    if let StmtKind::Decl(ref decl1, _) = body.node\n-    if let DeclKind::Local(ref local1) = decl1.node;\n+    if let StmtKind::Local(ref local1) = body.node;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local1.pat.node;\n     if name.node.as_str() == \"__next\";\n     if let StmtKind::Expr(ref e, _) = local1.pat.node\n@@ -42,17 +40,15 @@ if_chain! {\n     if arms1[1].pats.len() == 1;\n     if let PatKind::Path(ref path7) = arms1[1].pats[0].node;\n     if match_qpath(path7, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n-    if let StmtKind::Decl(ref decl2, _) = path7.node\n-    if let DeclKind::Local(ref local2) = decl2.node;\n+    if let StmtKind::Local(ref local2) = path7.node;\n     if let Some(ref init1) = local2.init\n     if let ExprKind::Path(ref path8) = init1.node;\n     if match_qpath(path8, &[\"__next\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local2.pat.node;\n     if name1.node.as_str() == \"y\";\n     if let StmtKind::Expr(ref e1, _) = local2.pat.node\n     if let ExprKind::Block(ref block1) = e1.node;\n-    if let StmtKind::Decl(ref decl3, _) = block1.node\n-    if let DeclKind::Local(ref local3) = decl3.node;\n+    if let StmtKind::Local(ref local3) = block1.node;\n     if let Some(ref init2) = local3.init\n     if let ExprKind::Path(ref path9) = init2.node;\n     if match_qpath(path9, &[\"y\"]);"}]}