{"sha": "f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZWIzM2Y0ZTVlYTJiNzhjZmNjMzRjYzQyZGRhODcwMWIyYTBmODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T02:20:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T02:20:13Z"}, "message": "Auto merge of #45200 - mikhail-m1:match-with-false-edges, r=nikomatsakis\n\nMIR-borrowck: add false edges to match arms\n\nbasic fix for https://github.com/rust-lang/rust/issues/45043, should be modified with #45184", "tree": {"sha": "eb19a929d88e0a63be9c1a4057c0329faacbfbcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb19a929d88e0a63be9c1a4057c0329faacbfbcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85", "html_url": "https://github.com/rust-lang/rust/commit/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a457e298115fd1811f3b5c4ec889067279b218f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a457e298115fd1811f3b5c4ec889067279b218f7", "html_url": "https://github.com/rust-lang/rust/commit/a457e298115fd1811f3b5c4ec889067279b218f7"}, {"sha": "8a28c676c89173a88c2568deb8964e0960f2afb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a28c676c89173a88c2568deb8964e0960f2afb6", "html_url": "https://github.com/rust-lang/rust/commit/8a28c676c89173a88c2568deb8964e0960f2afb6"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "56c926eaa615343ee7737abda5f9ac668871c62f", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::*;\n use rustc::hir;\n use hair::*;\n use syntax::ast::{Name, NodeId};\n-use syntax_pos::Span;\n+use syntax_pos::{DUMMY_SP, Span};\n \n // helper functions, broken out by category:\n mod simplify;\n@@ -398,10 +398,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             candidates.iter().take_while(|c| c.match_pairs.is_empty()).count();\n         debug!(\"match_candidates: {:?} candidates fully matched\", fully_matched);\n         let mut unmatched_candidates = candidates.split_off(fully_matched);\n-        for candidate in candidates {\n+        for (index, candidate) in candidates.into_iter().enumerate() {\n             // If so, apply any bindings, test the guard (if any), and\n             // branch to the arm.\n-            if let Some(b) = self.bind_and_guard_matched_candidate(block, arm_blocks, candidate) {\n+            let is_last = index == fully_matched - 1;\n+            if let Some(b) = self.bind_and_guard_matched_candidate(block, arm_blocks,\n+                                                                   candidate, is_last) {\n                 block = b;\n             } else {\n                 // if None is returned, then any remaining candidates\n@@ -664,7 +666,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn bind_and_guard_matched_candidate<'pat>(&mut self,\n                                               mut block: BasicBlock,\n                                               arm_blocks: &mut ArmBlocks,\n-                                              candidate: Candidate<'pat, 'tcx>)\n+                                              candidate: Candidate<'pat, 'tcx>,\n+                                              is_last_arm: bool)\n                                               -> Option<BasicBlock> {\n         debug!(\"bind_and_guard_matched_candidate(block={:?}, candidate={:?})\",\n                block, candidate);\n@@ -685,10 +688,26 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.cfg.terminate(block, source_info,\n                                TerminatorKind::if_(self.hir.tcx(), cond, arm_block, otherwise));\n             Some(otherwise)\n+        } else if !is_last_arm {\n+            // Add always true guard in case of more than one arm\n+            // it creates false edges and allow MIR borrowck detects errors\n+            // FIXME(#45184) -- permit \"false edges\"\n+            let source_info = self.source_info(candidate.span);\n+            let true_expr = Expr {\n+                temp_lifetime: None,\n+                ty: self.hir.tcx().types.bool,\n+                span: DUMMY_SP,\n+                kind: ExprKind::Literal{literal: self.hir.true_literal()},\n+            };\n+            let cond = unpack!(block = self.as_local_operand(block, true_expr));\n+            let otherwise = self.cfg.start_new_block();\n+            self.cfg.terminate(block, source_info,\n+                               TerminatorKind::if_(self.hir.tcx(), cond, arm_block, otherwise));\n+            Some(otherwise)\n         } else {\n             let source_info = self.source_info(candidate.span);\n             self.cfg.terminate(block, source_info,\n-                               TerminatorKind::Goto { target: arm_block });\n+                               TerminatorKind::Goto { target: arm_block  });\n             None\n         }\n     }"}, {"sha": "1d21f40fccaef50b36a99d8b3c1a0eaceee06c52", "filename": "src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs?ref=f5eb33f4e5ea2b78cfcc34cc42dda8701b2a0f85", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+fn main() {\n+    let mut x = 1;\n+    let _x = &mut x;\n+    let _ = match x {\n+        x => x + 1, //[ast]~ ERROR E0503\n+                    //[mir]~^ ERROR (Mir) [E0503]\n+                    //[mir]~| ERROR (Ast) [E0503]\n+        y => y + 2, //[ast]~ ERROR [E0503]\n+                    //[mir]~^ ERROR (Mir) [E0503]\n+                    //[mir]~| ERROR (Ast) [E0503]\n+    };\n+}"}]}