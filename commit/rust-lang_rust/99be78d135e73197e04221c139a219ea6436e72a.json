{"sha": "99be78d135e73197e04221c139a219ea6436e72a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YmU3OGQxMzVlNzMxOTdlMDQyMjFjMTM5YTIxOWVhNjQzNmU3MmE=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-12T19:57:43Z"}, "message": "Always use param_env_reveal_all_normalized in validator", "tree": {"sha": "3365689ba6e568b8a3bb64ce6460f20ba9bae974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3365689ba6e568b8a3bb64ce6460f20ba9bae974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99be78d135e73197e04221c139a219ea6436e72a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99be78d135e73197e04221c139a219ea6436e72a", "html_url": "https://github.com/rust-lang/rust/commit/99be78d135e73197e04221c139a219ea6436e72a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99be78d135e73197e04221c139a219ea6436e72a/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d486bfcbff107e8a6769e00c59d02b13c664b6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d486bfcbff107e8a6769e00c59d02b13c664b6ee", "html_url": "https://github.com/rust-lang/rust/commit/d486bfcbff107e8a6769e00c59d02b13c664b6ee"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "876ecee80c6a1222b17a3ba799914e0a5724770f", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99be78d135e73197e04221c139a219ea6436e72a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99be78d135e73197e04221c139a219ea6436e72a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=99be78d135e73197e04221c139a219ea6436e72a", "patch": "@@ -38,7 +38,9 @@ pub struct Validator {\n impl<'tcx> MirPass<'tcx> for Validator {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n-        let param_env = tcx.param_env(def_id);\n+        // We need to param_env_reveal_all_normalized, as some optimizations\n+        // change types in ways that require unfolding opaque types.\n+        let param_env = tcx.param_env_reveal_all_normalized(def_id);\n         let mir_phase = self.mir_phase;\n \n         let always_live_locals = AlwaysLiveLocals::new(body);\n@@ -79,7 +81,6 @@ pub fn equal_up_to_regions(\n     }\n \n     // Normalize lifetimes away on both sides, then compare.\n-    let param_env = param_env.with_reveal_all_normalized(tcx);\n     let normalize = |ty: Ty<'tcx>| {\n         tcx.normalize_erasing_regions(\n             param_env,\n@@ -167,17 +168,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return true;\n         }\n         // Normalize projections and things like that.\n-        // FIXME: We need to reveal_all, as some optimizations change types in ways\n-        // that require unfolding opaque types.\n-        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let src = self.tcx.normalize_erasing_regions(param_env, src);\n-        let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n+        let src = self.tcx.normalize_erasing_regions(self.param_env, src);\n+        let dest = self.tcx.normalize_erasing_regions(self.param_env, dest);\n \n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their\n         // late-bound lifetimes are still around and can lead to type\n         // differences. So we compare ignoring lifetimes.\n-        equal_up_to_regions(self.tcx, param_env, src, dest)\n+        equal_up_to_regions(self.tcx, self.param_env, src, dest)\n     }\n }\n \n@@ -357,9 +355,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 }\n             }\n             TerminatorKind::Call { func, args, destination, cleanup, .. } => {\n-                let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n-                let func_ty = self.tcx.normalize_erasing_regions(param_env, func_ty);\n+                let func_ty = self.tcx.normalize_erasing_regions(self.param_env, func_ty);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n                     _ => self.fail("}]}