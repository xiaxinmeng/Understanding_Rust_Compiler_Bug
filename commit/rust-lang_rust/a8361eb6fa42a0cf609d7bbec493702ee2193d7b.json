{"sha": "a8361eb6fa42a0cf609d7bbec493702ee2193d7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzYxZWI2ZmE0MmEwY2Y2MDlkN2JiZWM0OTM3MDJlZTIxOTNkN2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:16:52Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:13:10Z"}, "message": "Refactor compare_method\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "6905c63ec51f126dd95c7c78dac6a5824b9621d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6905c63ec51f126dd95c7c78dac6a5824b9621d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8361eb6fa42a0cf609d7bbec493702ee2193d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8361eb6fa42a0cf609d7bbec493702ee2193d7b", "html_url": "https://github.com/rust-lang/rust/commit/a8361eb6fa42a0cf609d7bbec493702ee2193d7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8361eb6fa42a0cf609d7bbec493702ee2193d7b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7cd97f7863fb9ee017aacec134589c211786c88", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cd97f7863fb9ee017aacec134589c211786c88", "html_url": "https://github.com/rust-lang/rust/commit/f7cd97f7863fb9ee017aacec134589c211786c88"}], "stats": {"total": 113, "additions": 68, "deletions": 45}, "files": [{"sha": "32640d7d9a886dabcfe31af17dbf0cc6882a5907", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 68, "deletions": 45, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a8361eb6fa42a0cf609d7bbec493702ee2193d7b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8361eb6fa42a0cf609d7bbec493702ee2193d7b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=a8361eb6fa42a0cf609d7bbec493702ee2193d7b", "patch": "@@ -6,7 +6,7 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{Subst, InternalSubsts, SubstsRef};\n use rustc::util::common::ErrorReported;\n-use errors::Applicability;\n+use errors::{Applicability, DiagnosticId};\n \n use syntax_pos::Span;\n \n@@ -576,55 +576,78 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Ok(())\n }\n \n-fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        impl_m: &ty::AssociatedItem,\n-                                        impl_m_span: Span,\n-                                        trait_m: &ty::AssociatedItem,\n-                                        trait_item_span: Option<Span>)\n-                                        -> Result<(), ErrorReported> {\n-    let impl_m_generics = tcx.generics_of(impl_m.def_id);\n-    let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    let num_impl_m_type_params = impl_m_generics.own_counts().types;\n-    let num_trait_m_type_params = trait_m_generics.own_counts().types;\n-\n-    if num_impl_m_type_params != num_trait_m_type_params {\n-        let impl_m_node_id = tcx.hir().as_local_node_id(impl_m.def_id).unwrap();\n-        let impl_m_item = tcx.hir().expect_impl_item(impl_m_node_id);\n-        let span = if impl_m_item.generics.params.is_empty()\n-            || impl_m_item.generics.span.is_dummy()  // impl Trait in argument position (#55374)\n-        {\n-            impl_m_span\n-        } else {\n-            impl_m_item.generics.span\n-        };\n+fn compare_number_of_generics<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    impl_: &ty::AssociatedItem,\n+    impl_span: Span,\n+    trait_: &ty::AssociatedItem,\n+    trait_span: Option<Span>,\n+) -> Result<(), ErrorReported> {\n+    let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n+    let impl_own_counts = tcx.generics_of(impl_.def_id).own_counts();\n+\n+    let matchings = [\n+        (\"type\", trait_own_counts.types, impl_own_counts.types),\n+        (\"const\", trait_own_counts.consts, impl_own_counts.consts),\n+    ];\n+\n+    let mut err_occurred = false;\n+    for &(kind, trait_count, impl_count) in &matchings {\n+        if impl_count != trait_count {\n+            err_occurred = true;\n+\n+            let impl_node_id = tcx.hir().as_local_node_id(impl_.def_id).unwrap();\n+            let impl_item = tcx.hir().expect_impl_item(impl_node_id);\n+            let span = if impl_item.generics.params.is_empty()\n+                || impl_item.generics.span.is_dummy() { // argument position impl Trait (#55374)\n+                impl_span\n+            } else {\n+                impl_item.generics.span\n+            };\n \n-        let mut err = struct_span_err!(tcx.sess, span, E0049,\n-            \"method `{}` has {} but its trait declaration has {}\",\n-            trait_m.ident,\n-            potentially_plural_count(num_impl_m_type_params, \"type parameter\"),\n-            potentially_plural_count(num_trait_m_type_params, \"type parameter\")\n-        );\n+            let mut err = tcx.sess.struct_span_err_with_code(\n+                span,\n+                &format!(\n+                    \"method `{}` has {} {kind} parameter{} but its trait \\\n+                     declaration has {} {kind} parameter{}\",\n+                    trait_.ident,\n+                    impl_count,\n+                    if impl_count != 1 { \"s\" } else { \"\" },\n+                    trait_count,\n+                    if trait_count != 1 { \"s\" } else { \"\" },\n+                    kind = kind,\n+                ),\n+                DiagnosticId::Error(\"E0049\".into()),\n+            );\n \n-        let mut suffix = None;\n+            let mut suffix = None;\n \n-        if let Some(span) = trait_item_span {\n-            err.span_label(span, format!(\"expected {}\",\n-                potentially_plural_count(num_trait_m_type_params, \"type parameter\")));\n-        } else {\n-            suffix = Some(format!(\", expected {}\", num_trait_m_type_params));\n-        }\n-\n-        err.span_label(span,\n-                       format!(\"found {}{}\",\n-                           potentially_plural_count(num_impl_m_type_params, \"type parameter\"),\n-                           suffix.as_ref().map(|s| &s[..]).unwrap_or(\"\")));\n+            if let Some(span) = trait_span {\n+                err.span_label(\n+                    span,\n+                    format!(\"expected {} {} parameter{}\", trait_count, kind,\n+                        if trait_count != 1 { \"s\" } else { \"\" })\n+                );\n+            } else {\n+                suffix = Some(format!(\", expected {}\", trait_count));\n+            }\n \n-        err.emit();\n+            err.span_label(\n+                span,\n+                format!(\"found {} {} parameter{}{}\", impl_count, kind,\n+                    if impl_count != 1 { \"s\" } else { \"\" },\n+                    suffix.unwrap_or_else(|| String::new())),\n+            );\n \n-        return Err(ErrorReported);\n+            err.emit();\n+        }\n     }\n \n-    Ok(())\n+    if err_occurred {\n+        Err(ErrorReported)\n+    } else {\n+        Ok(())\n+    }\n }\n \n fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -725,12 +748,12 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n-        GenericParamDefKind::Lifetime => None,\n+        GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n             GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n-            GenericParamDefKind::Lifetime => None,\n+            GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n         }\n     });\n     for ((impl_def_id, impl_synthetic), (trait_def_id, trait_synthetic))"}]}