{"sha": "5dda9955380c6214aa5720ad640b76b870aaa556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGE5OTU1MzgwYzYyMTRhYTU3MjBhZDY0MGI3NmI4NzBhYWE1NTY=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-05T11:17:17Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-05T11:17:17Z"}, "message": "Fix review comments", "tree": {"sha": "8f01ff6f3a1dc9a6e61b0b9bc0bc95cef74edc7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f01ff6f3a1dc9a6e61b0b9bc0bc95cef74edc7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dda9955380c6214aa5720ad640b76b870aaa556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dda9955380c6214aa5720ad640b76b870aaa556", "html_url": "https://github.com/rust-lang/rust/commit/5dda9955380c6214aa5720ad640b76b870aaa556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dda9955380c6214aa5720ad640b76b870aaa556/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c3e7a1adf9d14bbac5cbbe9cd893d758f82561", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c3e7a1adf9d14bbac5cbbe9cd893d758f82561", "html_url": "https://github.com/rust-lang/rust/commit/74c3e7a1adf9d14bbac5cbbe9cd893d758f82561"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "2c455a1fd367fb195978f38dafbd1f27008a9bf1", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5dda9955380c6214aa5720ad640b76b870aaa556/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dda9955380c6214aa5720ad640b76b870aaa556/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=5dda9955380c6214aa5720ad640b76b870aaa556", "patch": "@@ -1,6 +1,4 @@\n-use ra_ide_db::{\n-    defs::Definition, imports_locator::ImportsLocator, search::Reference, RootDatabase,\n-};\n+use ra_ide_db::{defs::Definition, search::Reference, RootDatabase};\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstNode, NameOwner},\n@@ -9,11 +7,11 @@ use ra_syntax::{\n \n use crate::{\n     assist_context::{AssistBuilder, AssistDirector},\n-    utils::insert_use::insert_use_statement_with_string_path,\n+    utils::insert_use_statement,\n     AssistContext, AssistId, Assists,\n };\n use ast::{ArgListOwner, VisibilityOwner};\n-use hir::{EnumVariant, Module, ModuleDef};\n+use hir::{EnumVariant, Module, ModuleDef, Name};\n use ra_db::FileId;\n use ra_fmt::leading_indent;\n use rustc_hash::FxHashSet;\n@@ -46,11 +44,11 @@ pub(crate) fn extract_struct_from_enum_variant(\n         return None;\n     }\n     let enum_ast = variant.parent_enum();\n-    let enum_name = enum_ast.name()?.to_string();\n     let visibility = enum_ast.visibility();\n-    let current_module_def =\n-        ImportsLocator::new(ctx.db).find_imports(&enum_name).first()?.left()?;\n-    let current_module = current_module_def.module(ctx.db)?;\n+    let enum_hir = ctx.sema.to_def(&enum_ast)?;\n+    let variant_hir_name = variant_hir.name(ctx.db);\n+    let enum_module_def = ModuleDef::from(enum_hir);\n+    let current_module = enum_hir.module(ctx.db);\n     let target = variant.syntax().text_range();\n     acc.add_in_multiple_files(\n         AssistId(\"extract_struct_from_enum_variant\"),\n@@ -69,7 +67,8 @@ pub(crate) fn extract_struct_from_enum_variant(\n                     edit,\n                     reference,\n                     &source_file,\n-                    &current_module_def,\n+                    &enum_module_def,\n+                    &variant_hir_name,\n                     &mut visited_modules_set,\n                 );\n             }\n@@ -102,20 +101,15 @@ fn insert_import(\n     builder: &mut AssistBuilder,\n     path: &ast::PathExpr,\n     module: &Module,\n-    module_def: &ModuleDef,\n-    path_segment: ast::NameRef,\n+    enum_module_def: &ModuleDef,\n+    variant_hir_name: &Name,\n ) -> Option<()> {\n     let db = ctx.db;\n-    let mod_path = module.find_use_path(db, module_def.clone());\n+    let mod_path = module.find_use_path(db, enum_module_def.clone());\n     if let Some(mut mod_path) = mod_path {\n         mod_path.segments.pop();\n-        let use_path = format!(\"{}::{}\", mod_path.to_string(), path_segment.to_string());\n-        insert_use_statement_with_string_path(\n-            path.syntax(),\n-            &use_path,\n-            ctx,\n-            builder.text_edit_builder(),\n-        );\n+        mod_path.segments.push(variant_hir_name.clone());\n+        insert_use_statement(path.syntax(), &mod_path, ctx, builder.text_edit_builder());\n     }\n     Some(())\n }\n@@ -175,7 +169,8 @@ fn update_reference(\n     edit: &mut AssistDirector,\n     reference: Reference,\n     source_file: &SourceFile,\n-    module_def: &ModuleDef,\n+    enum_module_def: &ModuleDef,\n+    variant_hir_name: &Name,\n     visited_modules_set: &mut FxHashSet<Module>,\n ) -> Option<()> {\n     let path_expr: ast::PathExpr = find_node_at_offset::<ast::PathExpr>(\n@@ -185,7 +180,6 @@ fn update_reference(\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n     let list = call.arg_list()?;\n     let segment = path_expr.path()?.segment()?;\n-    let segment_name = segment.name_ref()?;\n     let module = ctx.sema.scope(&path_expr.syntax()).module()?;\n     let list_range = list.syntax().text_range();\n     let inside_list_range = TextRange::new(\n@@ -194,7 +188,8 @@ fn update_reference(\n     );\n     edit.perform(reference.file_range.file_id, |builder| {\n         if !visited_modules_set.contains(&module) {\n-            if insert_import(ctx, builder, &path_expr, &module, module_def, segment_name).is_some()\n+            if insert_import(ctx, builder, &path_expr, &module, enum_module_def, variant_hir_name)\n+                .is_some()\n             {\n                 visited_modules_set.insert(module);\n             }"}, {"sha": "0ee43482f79856a7a1f7fa963d6e89cdd3d6ac39", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dda9955380c6214aa5720ad640b76b870aaa556/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dda9955380c6214aa5720ad640b76b870aaa556/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=5dda9955380c6214aa5720ad640b76b870aaa556", "patch": "@@ -23,16 +23,7 @@ pub(crate) fn insert_use_statement(\n     ctx: &AssistContext,\n     builder: &mut TextEditBuilder,\n ) {\n-    insert_use_statement_with_string_path(position, &path_to_import.to_string(), ctx, builder);\n-}\n-\n-pub(crate) fn insert_use_statement_with_string_path(\n-    position: &SyntaxNode,\n-    path_to_import: &str,\n-    ctx: &AssistContext,\n-    builder: &mut TextEditBuilder,\n-) {\n-    let target = path_to_import.split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n+    let target = path_to_import.to_string().split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n     let container = ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n         if let Some(module) = ast::Module::cast(n.clone()) {\n             return module.item_list().map(|it| it.syntax().clone());"}]}