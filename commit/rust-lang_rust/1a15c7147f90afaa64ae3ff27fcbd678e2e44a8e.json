{"sha": "1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "node_id": "C_kwDOAAsO6NoAKDFhMTVjNzE0N2Y5MGFmYWE2NGFlM2ZmMjdmY2JkNjc4ZTJlNDRhOGU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-15T15:37:07Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-16T11:39:38Z"}, "message": "Fix rustdoc JSON inline", "tree": {"sha": "fbfd75951768038fa6490811d9c9c37daf9d8fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbfd75951768038fa6490811d9c9c37daf9d8fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "html_url": "https://github.com/rust-lang/rust/commit/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed9c64c3e63acac9bd77abce62501696c390450", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed9c64c3e63acac9bd77abce62501696c390450", "html_url": "https://github.com/rust-lang/rust/commit/0ed9c64c3e63acac9bd77abce62501696c390450"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "d6260b8ca06e48f0082982a905b40b4a43c2a3e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "patch": "@@ -2120,8 +2120,9 @@ fn clean_use_statement<'tcx>(\n     // forcefully don't inline if this is not public or if the\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-    let mut denied = !(visibility.is_public()\n-        || (cx.render_options.document_private && is_visible_from_parent_mod))\n+    let mut denied = cx.output_format.is_json()\n+        || !(visibility.is_public()\n+            || (cx.render_options.document_private && is_visible_from_parent_mod))\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)"}, {"sha": "2598b9b0b28c20e982287ac7ee0eca48d972d056", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "patch": "@@ -43,7 +43,16 @@ impl JsonRenderer<'_> {\n         let span = item.span(self.tcx);\n         let clean::Item { name, attrs: _, kind: _, visibility, item_id, cfg: _ } = item;\n         let inner = match *item.kind {\n-            clean::StrippedItem(_) | clean::KeywordItem(_) => return None,\n+            clean::KeywordItem(_) => return None,\n+            clean::StrippedItem(ref inner) => {\n+                match &**inner {\n+                    // We document non-empty stripped modules as with `Module::is_stripped` set to\n+                    // `true`, to prevent contained items from being orphaned for downstream users,\n+                    // as JSON does no inlining.\n+                    clean::ModuleItem(m) if !m.items.is_empty() => from_clean_item(item, self.tcx),\n+                    _ => return None,\n+                }\n+            }\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n@@ -220,7 +229,9 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n     let header = item.fn_header(tcx);\n \n     match *item.kind {\n-        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items, tcx) }),\n+        ModuleItem(m) => {\n+            ItemEnum::Module(Module { is_crate, items: ids(m.items, tcx), is_stripped: false })\n+        }\n         ImportItem(i) => ItemEnum::Import(i.into_tcx(tcx)),\n         StructItem(s) => ItemEnum::Struct(s.into_tcx(tcx)),\n         UnionItem(u) => ItemEnum::Union(u.into_tcx(tcx)),\n@@ -257,8 +268,19 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n             bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n-        // `convert_item` early returns `None` for striped items and keywords.\n-        StrippedItem(_) | KeywordItem(_) => unreachable!(),\n+        // `convert_item` early returns `None` for stripped items and keywords.\n+        KeywordItem(_) => unreachable!(),\n+        StrippedItem(inner) => {\n+            match *inner {\n+                ModuleItem(m) => ItemEnum::Module(Module {\n+                    is_crate,\n+                    items: ids(m.items, tcx),\n+                    is_stripped: true,\n+                }),\n+                // `convert_item` early returns `None` for stripped items we're not including\n+                _ => unreachable!(),\n+            }\n+        }\n         ExternCrateItem { ref src } => ItemEnum::ExternCrate {\n             name: name.as_ref().unwrap().to_string(),\n             rename: src.map(|x| x.to_string()),"}, {"sha": "6364d00d0624e5a938eaca00b7167253a2bec21c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "patch": "@@ -21,6 +21,7 @@ use rustc_span::def_id::LOCAL_CRATE;\n use rustdoc_json_types as types;\n \n use crate::clean::types::{ExternalCrate, ExternalLocation};\n+use crate::clean::ItemKind;\n use crate::config::RenderOptions;\n use crate::docfs::PathError;\n use crate::error::Error;\n@@ -175,6 +176,14 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     /// the hashmap because certain items (traits and types) need to have their mappings for trait\n     /// implementations filled out before they're inserted.\n     fn item(&mut self, item: clean::Item) -> Result<(), Error> {\n+        trace!(\"rendering {} {:?}\", item.type_(), item.name);\n+\n+        // Flatten items that recursively store other items. We include orphaned items from\n+        // stripped modules and etc that are otherwise reachable.\n+        if let ItemKind::StrippedItem(inner) = &*item.kind {\n+            inner.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n+        }\n+\n         // Flatten items that recursively store other items\n         item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n "}, {"sha": "ca7a20bf3688a934fd2a36a937c253e8f40f0b5f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "patch": "@@ -190,6 +190,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     ) -> bool {\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n+        if self.cx.output_format.is_json() {\n+            return false;\n+        }\n+\n         let tcx = self.cx.tcx;\n         let Some(res_did) = res.opt_def_id() else {\n             return false;"}, {"sha": "761e94c7ebbc44d66df46c8dab17b9c3b1c9cffe", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=1a15c7147f90afaa64ae3ff27fcbd678e2e44a8e", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 15;\n+pub const FORMAT_VERSION: u32 = 16;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -245,6 +245,9 @@ pub enum ItemEnum {\n pub struct Module {\n     pub is_crate: bool,\n     pub items: Vec<Id>,\n+    /// If `true`, this module is not part of the public API, but it contains\n+    /// items that are re-exported as public API.\n+    pub is_stripped: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]"}]}