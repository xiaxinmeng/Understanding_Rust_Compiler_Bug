{"sha": "f83785a94a817bc3cb649e960a5941e8e076d41a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Mzc4NWE5NGE4MTdiYzNjYjY0OWU5NjBhNTk0MWU4ZTA3NmQ0MWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-20T22:04:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T22:04:42Z"}, "message": "Merge #4541\n\n4541: Remove set_cursor r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "87375353a2ed211933ceb66e1ee7f7dc536067e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87375353a2ed211933ceb66e1ee7f7dc536067e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83785a94a817bc3cb649e960a5941e8e076d41a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexal6CRBK7hj4Ov3rIwAAdHIIAEpZ/sOOF+tQlVQ2qGZnT3hy\nmAtSg9Po3XHnkfdoZiM+j30FvE7rlTel5oU47BjBVV3Og06FrpHSNBpMArmL4PN4\nwoA6ReHjAJYx8DQf+7P4s6CSy6bTs+yqRkooZMHfZxb/nAwO8Y3LC5QyaXB+P5gE\nkxQUewu2EXB9QBACHZ6boesc/RktCyyrkhi+ulfwUBH1nsfbJgHUwj7VwOamyRLX\nxrAZrtxbLamUsmdV3rny8YgU9UoyAp8CkR34YLjX5oNjv3ezJG5nbFw3OnH5ljdu\nXPfNGJ2BbS3RGwZ9qfXfO2t3NwXZsxrZ3UYSVPRYZwpL/j0KEMcWBHa4gjz+w+c=\n=dtUG\n-----END PGP SIGNATURE-----\n", "payload": "tree 87375353a2ed211933ceb66e1ee7f7dc536067e9\nparent 4677cea71994a593d56052767f625f46fd2e4a83\nparent 70930d3bb2ba1d4a7a7d4a489da714096294acca\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590012282 +0000\ncommitter GitHub <noreply@github.com> 1590012282 +0000\n\nMerge #4541\n\n4541: Remove set_cursor r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83785a94a817bc3cb649e960a5941e8e076d41a", "html_url": "https://github.com/rust-lang/rust/commit/f83785a94a817bc3cb649e960a5941e8e076d41a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83785a94a817bc3cb649e960a5941e8e076d41a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4677cea71994a593d56052767f625f46fd2e4a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/4677cea71994a593d56052767f625f46fd2e4a83", "html_url": "https://github.com/rust-lang/rust/commit/4677cea71994a593d56052767f625f46fd2e4a83"}, {"sha": "70930d3bb2ba1d4a7a7d4a489da714096294acca", "url": "https://api.github.com/repos/rust-lang/rust/commits/70930d3bb2ba1d4a7a7d4a489da714096294acca", "html_url": "https://github.com/rust-lang/rust/commit/70930d3bb2ba1d4a7a7d4a489da714096294acca"}], "stats": {"total": 129, "additions": 61, "deletions": 68}, "files": [{"sha": "9f6ca449b4a791efd8e625758a7bc34b95b036cf", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -171,19 +171,13 @@ impl Assists {\n \n pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n-    cursor_position: Option<TextSize>,\n     file: FileId,\n     is_snippet: bool,\n }\n \n impl AssistBuilder {\n     pub(crate) fn new(file: FileId) -> AssistBuilder {\n-        AssistBuilder {\n-            edit: TextEditBuilder::default(),\n-            cursor_position: None,\n-            file,\n-            is_snippet: false,\n-        }\n+        AssistBuilder { edit: TextEditBuilder::default(), file, is_snippet: false }\n     }\n \n     /// Remove specified `range` of text.\n@@ -241,10 +235,6 @@ impl AssistBuilder {\n         algo::diff(&node, &new).into_text_edit(&mut self.edit)\n     }\n \n-    /// Specify desired position of the cursor after the assist is applied.\n-    pub(crate) fn set_cursor(&mut self, offset: TextSize) {\n-        self.cursor_position = Some(offset)\n-    }\n     // FIXME: better API\n     pub(crate) fn set_file(&mut self, assist_file: FileId) {\n         self.file = assist_file;\n@@ -258,12 +248,8 @@ impl AssistBuilder {\n \n     fn finish(self, change_label: String) -> SourceChange {\n         let edit = self.edit.finish();\n-        if edit.is_empty() && self.cursor_position.is_none() {\n-            panic!(\"Only call `add_assist` if the assist can be applied\")\n-        }\n-        let mut res =\n-            SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n-                .into_source_change(self.file);\n+        let mut res = SingleFileChange { label: change_label, edit, cursor_position: None }\n+            .into_source_change(self.file);\n         if self.is_snippet {\n             res.is_snippet = true;\n         }"}, {"sha": "e016f51c3eb490883dfe4a5563b525e17134f2cf", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -68,7 +68,6 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                 .indent(IndentLevel::from_node(if_expr.syntax()))\n         };\n \n-        edit.set_cursor(if_expr.syntax().text_range().start());\n         edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n     })\n }\n@@ -83,7 +82,7 @@ mod tests {\n     fn test_replace_if_let_with_match_unwraps_simple_expressions() {\n         check_assist(\n             replace_if_let_with_match,\n-            \"\n+            r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n         if <|>let VariantData::Struct(..) = *self {\n@@ -92,24 +91,24 @@ impl VariantData {\n             false\n         }\n     }\n-}           \",\n-            \"\n+}           \"#,\n+            r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n-        <|>match *self {\n+        match *self {\n             VariantData::Struct(..) => true,\n             _ => false,\n         }\n     }\n-}           \",\n+}           \"#,\n         )\n     }\n \n     #[test]\n     fn test_replace_if_let_with_match_doesnt_unwrap_multiline_expressions() {\n         check_assist(\n             replace_if_let_with_match,\n-            \"\n+            r#\"\n fn foo() {\n     if <|>let VariantData::Struct(..) = a {\n         bar(\n@@ -118,26 +117,26 @@ fn foo() {\n     } else {\n         false\n     }\n-}           \",\n-            \"\n+}           \"#,\n+            r#\"\n fn foo() {\n-    <|>match a {\n+    match a {\n         VariantData::Struct(..) => {\n             bar(\n                 123\n             )\n         }\n         _ => false,\n     }\n-}           \",\n+}           \"#,\n         )\n     }\n \n     #[test]\n     fn replace_if_let_with_match_target() {\n         check_assist_target(\n             replace_if_let_with_match,\n-            \"\n+            r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n         if <|>let VariantData::Struct(..) = *self {\n@@ -146,7 +145,7 @@ impl VariantData {\n             false\n         }\n     }\n-}           \",\n+}           \"#,\n             \"if let VariantData::Struct(..) = *self {\n             true\n         } else {\n@@ -176,7 +175,7 @@ enum Option<T> { Some(T), None }\n use Option::*;\n \n fn foo(x: Option<i32>) {\n-    <|>match x {\n+    match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n@@ -206,7 +205,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n use Result::*;\n \n fn foo(x: Result<i32, ()>) {\n-    <|>match x {\n+    match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }"}, {"sha": "761557ac05c8c5813b323c7b3bc193ae437c0571", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -58,12 +58,9 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n         let stmt = make::expr_stmt(if_);\n \n         let placeholder = stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n-        let target_offset =\n-            let_stmt.syntax().text_range().start() + placeholder.syntax().text_range().start();\n         let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n \n         edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n-        edit.set_cursor(target_offset);\n     })\n }\n \n@@ -88,7 +85,7 @@ fn main() {\n enum E<T> { X(T), Y(T) }\n \n fn main() {\n-    if let <|>x = E::X(92) {\n+    if let x = E::X(92) {\n     }\n }\n             \","}, {"sha": "cff7dfb81215a29415cbc1e6b575a93b29c04b0f", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -9,7 +9,10 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n+use crate::{\n+    utils::{render_snippet, Cursor, TryEnum},\n+    AssistContext, AssistId, Assists,\n+};\n \n // Assist: replace_unwrap_with_match\n //\n@@ -29,7 +32,7 @@ use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n //     let x: Result<i32, i32> = Result::Ok(92);\n //     let y = match x {\n //         Ok(a) => a,\n-//         _ => unreachable!(),\n+//         $0_ => unreachable!(),\n //     };\n // }\n // ```\n@@ -43,7 +46,7 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n     let ty = ctx.sema.type_of_expr(&caller)?;\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n     let target = method_call.syntax().text_range();\n-    acc.add(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", target, |edit| {\n+    acc.add(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", target, |builder| {\n         let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n         let it = make::bind_pat(make::name(\"a\")).into();\n         let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n@@ -58,16 +61,30 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n         let match_expr = make::expr_match(caller.clone(), match_arm_list)\n             .indent(IndentLevel::from_node(method_call.syntax()));\n \n-        edit.set_cursor(caller.syntax().text_range().start());\n-        edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n+        let range = method_call.syntax().text_range();\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                let err_arm = match_expr\n+                    .syntax()\n+                    .descendants()\n+                    .filter_map(ast::MatchArm::cast)\n+                    .last()\n+                    .unwrap();\n+                let snippet =\n+                    render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n+                builder.replace_snippet(cap, range, snippet)\n+            }\n+            None => builder.replace(range, match_expr.to_string()),\n+        }\n     })\n }\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::tests::{check_assist, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_replace_result_unwrap_with_match() {\n         check_assist(\n@@ -85,9 +102,9 @@ enum Result<T, E> { Ok(T), Err(E) }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = <|>match i(x) {\n+    let y = match i(x) {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n             \",\n@@ -111,9 +128,9 @@ enum Option<T> { Some(T), None }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x = Option::Some(92);\n-    let y = <|>match i(x) {\n+    let y = match i(x) {\n         Some(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n             \",\n@@ -137,9 +154,9 @@ enum Result<T, E> { Ok(T), Err(E) }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = <|>match i(x) {\n+    let y = match i(x) {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     }.count_zeroes();\n }\n             \","}, {"sha": "c7a8744802dccb6ac7ad1b055dc4c6626f2b15f3", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -26,12 +26,10 @@ pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     if new_tree == use_tree {\n         return None;\n     }\n-    let cursor = ctx.offset();\n \n     let target = colon_colon.text_range();\n     acc.add(AssistId(\"split_import\"), \"Split import\", target, |edit| {\n         edit.replace_ast(use_tree, new_tree);\n-        edit.set_cursor(cursor);\n     })\n }\n \n@@ -46,7 +44,7 @@ mod tests {\n         check_assist(\n             split_import,\n             \"use crate::<|>db::RootDatabase;\",\n-            \"use crate::<|>{db::RootDatabase};\",\n+            \"use crate::{db::RootDatabase};\",\n         )\n     }\n \n@@ -55,7 +53,7 @@ mod tests {\n         check_assist(\n             split_import,\n             \"use crate:<|>:db::{RootDatabase, FileSymbol}\",\n-            \"use crate:<|>:{db::{RootDatabase, FileSymbol}}\",\n+            \"use crate::{db::{RootDatabase, FileSymbol}}\",\n         )\n     }\n "}, {"sha": "8440c7d0f43e37e98fa4b4fa1f1716740c17f992", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -62,7 +62,6 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                             let range_to_del_else_if = TextRange::new(ancestor_then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n                             let range_to_del_rest = TextRange::new(then_branch.syntax().text_range().end(), if_expr.syntax().text_range().end());\n \n-                            edit.set_cursor(ancestor_then_branch.syntax().text_range().end());\n                             edit.delete(range_to_del_rest);\n                             edit.delete(range_to_del_else_if);\n                             edit.replace(target, update_expr_string(then_branch.to_string(), &[' ', '{']));\n@@ -79,7 +78,6 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                                 return acc.add(assist_id, assist_label, target, |edit| {\n                                     let range_to_del = TextRange::new(then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n \n-                                    edit.set_cursor(then_branch.syntax().text_range().end());\n                                     edit.delete(range_to_del);\n                                     edit.replace(target, update_expr_string(else_block.to_string(), &[' ', '{']));\n                                 });\n@@ -97,8 +95,6 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let target = expr_to_unwrap.syntax().text_range();\n     acc.add(assist_id, assist_label, target, |edit| {\n-        edit.set_cursor(expr.syntax().text_range().start());\n-\n         edit.replace(\n             expr.syntax().text_range(),\n             update_expr_string(expr_to_unwrap.to_string(), &[' ', '{', '\\n']),\n@@ -154,7 +150,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 bar();\n-                <|>foo();\n+                foo();\n \n                 //comment\n                 bar();\n@@ -188,7 +184,7 @@ mod tests {\n \n                     //comment\n                     bar();\n-                }<|>\n+                }\n                 println!(\"bar\");\n             }\n             \"#,\n@@ -222,7 +218,7 @@ mod tests {\n \n                     //comment\n                     //bar();\n-                }<|>\n+                }\n                 println!(\"bar\");\n             }\n             \"#,\n@@ -258,7 +254,7 @@ mod tests {\n                     //bar();\n                 } else if false {\n                     println!(\"bar\");\n-                }<|>\n+                }\n                 println!(\"foo\");\n             }\n             \"#,\n@@ -298,7 +294,7 @@ mod tests {\n                     println!(\"bar\");\n                 } else if true {\n                     println!(\"foo\");\n-                }<|>\n+                }\n                 println!(\"else\");\n             }\n             \"#,\n@@ -336,7 +332,7 @@ mod tests {\n                     //bar();\n                 } else if false {\n                     println!(\"bar\");\n-                }<|>\n+                }\n                 println!(\"foo\");\n             }\n             \"#,\n@@ -383,7 +379,7 @@ mod tests {\n             \"#,\n             r#\"\n             fn main() {\n-                <|>if true {\n+                if true {\n                     foo();\n \n                     //comment\n@@ -417,7 +413,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 for i in 0..5 {\n-                    <|>foo();\n+                    foo();\n \n                     //comment\n                     bar();\n@@ -447,7 +443,7 @@ mod tests {\n             \"#,\n             r#\"\n             fn main() {\n-                <|>if true {\n+                if true {\n                     foo();\n \n                     //comment\n@@ -480,7 +476,7 @@ mod tests {\n             \"#,\n             r#\"\n             fn main() {\n-                <|>if true {\n+                if true {\n                     foo();\n \n                     //comment"}, {"sha": "250e56a6962468193c3abe38681e596f1dd6b3a3", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -764,7 +764,7 @@ fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n     let y = match x {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n \"#####,"}, {"sha": "4ad7ea59d2e9b10e112428c2eb2f51a662349651", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83785a94a817bc3cb649e960a5941e8e076d41a/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/f83785a94a817bc3cb649e960a5941e8e076d41a/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=f83785a94a817bc3cb649e960a5941e8e076d41a", "patch": "@@ -733,7 +733,7 @@ fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n     let y = match x {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n ```"}]}