{"sha": "1144fdde1f658e957e6ab54f8bc199e40583e851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDRmZGRlMWY2NThlOTU3ZTZhYjU0ZjhiYzE5OWU0MDU4M2U4NTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-22T02:41:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-23T00:09:17Z"}, "message": "librustpkg: De-mut librustdoc and librustpkg. rs=demuting", "tree": {"sha": "ee3950dc4e3bb68166d90f0a57467b1eec1c76a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3950dc4e3bb68166d90f0a57467b1eec1c76a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1144fdde1f658e957e6ab54f8bc199e40583e851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1144fdde1f658e957e6ab54f8bc199e40583e851", "html_url": "https://github.com/rust-lang/rust/commit/1144fdde1f658e957e6ab54f8bc199e40583e851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1144fdde1f658e957e6ab54f8bc199e40583e851/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce707363638c0dab5f60ff25489afcd67ba9d48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce707363638c0dab5f60ff25489afcd67ba9d48d", "html_url": "https://github.com/rust-lang/rust/commit/ce707363638c0dab5f60ff25489afcd67ba9d48d"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "c03eb06d2dde0cc6f7751b8182e79c6fa56688ba", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -31,14 +31,14 @@ pub fn mk_pass() -> Pass {\n \n struct Ctxt {\n     srv: astsrv::Srv,\n-    mut path: ~[~str]\n+    path: @mut ~[~str]\n }\n \n impl Clone for Ctxt {\n     fn clone(&self) -> Ctxt {\n         Ctxt {\n             srv: self.srv.clone(),\n-            path: copy self.path\n+            path: @mut copy *self.path\n         }\n     }\n }\n@@ -47,7 +47,7 @@ impl Clone for Ctxt {\n fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let ctxt = Ctxt {\n         srv: srv,\n-        mut path: ~[]\n+        path: @mut ~[]\n     };\n     let fold = Fold {\n         ctxt: ctxt.clone(),\n@@ -61,7 +61,7 @@ fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n \n fn fold_item(fold: &fold::Fold<Ctxt>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     doc::ItemDoc {\n-        path: copy fold.ctxt.path,\n+        path: copy *fold.ctxt.path,\n         .. doc\n     }\n }"}, {"sha": "c16a56249ffabcd07e3b4b56300da721791db815", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -252,7 +252,7 @@ impl PackageScript {\n struct Ctx {\n     cfgs: ~[~str],\n     json: bool,\n-    mut dep_cache: LinearMap<~str, bool>\n+    dep_cache: @mut LinearMap<~str, bool>\n }\n \n impl Ctx {\n@@ -912,7 +912,7 @@ pub fn main() {\n     Ctx {\n         cfgs: cfgs,\n         json: json,\n-        mut dep_cache: LinearMap::new()\n+        dep_cache: @mut LinearMap::new()\n     }.run(cmd, args);\n }\n "}, {"sha": "64a6d9c50554a980d4c3310d3810aba45b045c61", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -72,11 +72,11 @@ struct ReadyCtx {\n     sess: session::Session,\n     crate: @ast::crate,\n     ext_cx: ext_ctxt,\n-    mut path: ~[ast::ident],\n-    mut fns: ~[ListenerFn]\n+    path: ~[ast::ident],\n+    fns: ~[ListenerFn]\n }\n \n-fn fold_mod(_ctx: @ReadyCtx, m: ast::_mod,\n+fn fold_mod(_ctx: @mut ReadyCtx, m: ast::_mod,\n             fold: fold::ast_fold) -> ast::_mod {\n     fn strip_main(item: @ast::item) -> @ast::item {\n         @ast::item {\n@@ -95,7 +95,7 @@ fn fold_mod(_ctx: @ReadyCtx, m: ast::_mod,\n     }, fold)\n }\n \n-fn fold_item(ctx: @ReadyCtx, item: @ast::item,\n+fn fold_item(ctx: @mut ReadyCtx, item: @ast::item,\n              fold: fold::ast_fold) -> Option<@ast::item> {\n \n     ctx.path.push(item.ident);\n@@ -133,7 +133,7 @@ fn fold_item(ctx: @ReadyCtx, item: @ast::item,\n     res\n }\n \n-fn add_pkg_module(ctx: @ReadyCtx, m: ast::_mod) -> ast::_mod {\n+fn add_pkg_module(ctx: @mut ReadyCtx, m: ast::_mod) -> ast::_mod {\n     let listeners = mk_listener_vec(ctx);\n     let ext_cx = ctx.ext_cx;\n     let item = quote_item! (\n@@ -152,24 +152,25 @@ fn add_pkg_module(ctx: @ReadyCtx, m: ast::_mod) -> ast::_mod {\n     }\n }\n \n-fn mk_listener_vec(ctx: @ReadyCtx) -> @ast::expr {\n+fn mk_listener_vec(ctx: @mut ReadyCtx) -> @ast::expr {\n     let fns = ctx.fns;\n     let descs = do fns.map |listener| {\n         mk_listener_rec(ctx, *listener)\n     };\n-    build::mk_slice_vec_e(ctx.ext_cx, dummy_sp(), descs)\n+    let ext_cx = ctx.ext_cx;\n+    build::mk_slice_vec_e(ext_cx, dummy_sp(), descs)\n }\n \n-fn mk_listener_rec(ctx: @ReadyCtx, listener: ListenerFn) -> @ast::expr {\n-\n+fn mk_listener_rec(ctx: @mut ReadyCtx, listener: ListenerFn) -> @ast::expr {\n     let span = listener.span;\n     let cmds = do listener.cmds.map |&cmd| {\n-        build::mk_base_str(ctx.ext_cx, span, cmd)\n+        let ext_cx = ctx.ext_cx;\n+        build::mk_base_str(ext_cx, span, cmd)\n     };\n \n-    let cmds_expr = build::mk_slice_vec_e(ctx.ext_cx, span, cmds);\n-    let cb_expr = build::mk_path(ctx.ext_cx, span, copy listener.path);\n     let ext_cx = ctx.ext_cx;\n+    let cmds_expr = build::mk_slice_vec_e(ext_cx, span, cmds);\n+    let cb_expr = build::mk_path(ext_cx, span, copy listener.path);\n \n     quote_expr!(\n         Listener {\n@@ -182,12 +183,12 @@ fn mk_listener_rec(ctx: @ReadyCtx, listener: ListenerFn) -> @ast::expr {\n /// Generate/filter main function, add the list of commands, etc.\n pub fn ready_crate(sess: session::Session,\n                    crate: @ast::crate) -> @ast::crate {\n-    let ctx = @ReadyCtx {\n+    let ctx = @mut ReadyCtx {\n         sess: sess,\n         crate: crate,\n         ext_cx: mk_ctxt(sess.parse_sess, copy sess.opts.cfg),\n-        mut path: ~[],\n-        mut fns: ~[]\n+        path: ~[],\n+        fns: ~[]\n     };\n     let precursor = @fold::AstFoldFns {\n         // fold_crate: fold::wrap(|a, b| fold_crate(ctx, a, b)),"}]}