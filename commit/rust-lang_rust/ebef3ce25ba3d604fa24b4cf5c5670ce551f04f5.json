{"sha": "ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "node_id": "C_kwDOAAsO6NoAKGViZWYzY2UyNWJhM2Q2MDRmYTI0YjRjZjVjNTY3MGNlNTUxZjA0ZjU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-16T06:59:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T06:59:38Z"}, "message": "Rollup merge of #86455 - tlyu:check-where-before-suggesting-unsized, r=estebank\n\ncheck where-clause for explicit `Sized` before suggesting `?Sized`\n\nFixes #85945.\n\nBased on #86454.\n\n``@rustbot`` label +A-diagnostics +A-traits +A-typesystem +D-papercut +T-compiler", "tree": {"sha": "9b1f5c8872e610d6ae9db675b7ce273a1518196c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1f5c8872e610d6ae9db675b7ce273a1518196c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhk1baCRBK7hj4Ov3rIwAA+vAIAK9KVFF5sc0aT2t+f0kIDP+N\nvs+caduPevId3GtQOnEPukaeqiJ2pgd1+yELXTujdA/nh+o41A/R7SJoqvRMIUNj\nPPTgN3MZFtY/52WtfUonBgNa+4rBQQcuvcgK02QO3AeUFg1XRGe5yAEIUBrlEHn1\nLYggH30vMqjG2Bi7B+AqlLBqNP1EfXGrcU6nCloSrRs/T9we70e2GeDu5uDZAG/I\nOBhkRzpWpMGlgq3vb/NWfqtiMMipDfJ6H+W3474Ffg/xFnLPxqDtTIO5jCyHx7BY\nk5xqBstdYFk6SRU3zJZevoAgIMsQTVFtDuTYrtqV3lRxvm+ZT83uPUxOArrHXYw=\n=4OU1\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b1f5c8872e610d6ae9db675b7ce273a1518196c\nparent 02063124f96aac10f8c5c70653242b0704d397e0\nparent 1a50725a4d6814abe0f2a03551bb60ba90412959\nauthor Yuki Okushi <jtitor@2k36.org> 1637045978 +0900\ncommitter GitHub <noreply@github.com> 1637045978 +0900\n\nRollup merge of #86455 - tlyu:check-where-before-suggesting-unsized, r=estebank\n\ncheck where-clause for explicit `Sized` before suggesting `?Sized`\n\nFixes #85945.\n\nBased on #86454.\n\n``@rustbot`` label +A-diagnostics +A-traits +A-typesystem +D-papercut +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "html_url": "https://github.com/rust-lang/rust/commit/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02063124f96aac10f8c5c70653242b0704d397e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/02063124f96aac10f8c5c70653242b0704d397e0", "html_url": "https://github.com/rust-lang/rust/commit/02063124f96aac10f8c5c70653242b0704d397e0"}, {"sha": "1a50725a4d6814abe0f2a03551bb60ba90412959", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a50725a4d6814abe0f2a03551bb60ba90412959", "html_url": "https://github.com/rust-lang/rust/commit/1a50725a4d6814abe0f2a03551bb60ba90412959"}], "stats": {"total": 77, "additions": 58, "deletions": 19}, "files": [{"sha": "e00c5789fe9c780951482eee5a77c574917a2236", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "patch": "@@ -647,6 +647,22 @@ pub struct WhereBoundPredicate<'hir> {\n     pub bounds: GenericBounds<'hir>,\n }\n \n+impl WhereBoundPredicate<'hir> {\n+    /// Returns `true` if `param_def_id` matches the `bounded_ty` of this predicate.\n+    pub fn is_param_bound(&self, param_def_id: DefId) -> bool {\n+        let path = match self.bounded_ty.kind {\n+            TyKind::Path(QPath::Resolved(None, path)) => path,\n+            _ => return false,\n+        };\n+        match path.res {\n+            Res::Def(DefKind::TyParam, def_id) | Res::SelfTy(Some(def_id), None) => {\n+                def_id == param_def_id\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// A lifetime predicate (e.g., `'a: 'b + 'c`).\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereRegionPredicate<'hir> {"}, {"sha": "f8df0e2595973ea54800a053bcd71a742b00bdf5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "patch": "@@ -2009,6 +2009,19 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Some(param) => param,\n             _ => return,\n         };\n+        let param_def_id = self.tcx.hir().local_def_id(param.hir_id).to_def_id();\n+        let preds = generics.where_clause.predicates.iter();\n+        let explicitly_sized = preds\n+            .filter_map(|pred| match pred {\n+                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n+                _ => None,\n+            })\n+            .filter(|bp| bp.is_param_bound(param_def_id))\n+            .flat_map(|bp| bp.bounds)\n+            .any(|bound| bound.trait_ref().and_then(|tr| tr.trait_def_id()) == sized_trait);\n+        if explicitly_sized {\n+            return;\n+        }\n         debug!(\"maybe_suggest_unsized_generics: param={:?}\", param);\n         match node {\n             hir::Node::Item("}, {"sha": "2f427305782c5806918db038dddf419c76a263ce", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n@@ -668,6 +668,7 @@ impl ItemCtxt<'tcx> {\n             })\n             .flat_map(|b| predicates_from_bound(self, ty, b));\n \n+        let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n         let from_where_clauses = ast_generics\n             .where_clause\n             .predicates\n@@ -677,7 +678,7 @@ impl ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bp| {\n-                let bt = if is_param(self.tcx, bp.bounded_ty, param_id) {\n+                let bt = if bp.is_param_bound(param_def_id) {\n                     Some(ty)\n                 } else if !only_self_bounds.0 {\n                     Some(self.to_ty(bp.bounded_ty))\n@@ -714,23 +715,6 @@ impl ItemCtxt<'tcx> {\n     }\n }\n \n-/// Tests whether this is the AST for a reference to the type\n-/// parameter with ID `param_id`. We use this so as to avoid running\n-/// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n-/// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty<'_>, param_id: hir::HirId) -> bool {\n-    if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) = ast_ty.kind {\n-        match path.res {\n-            Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n-                def_id == tcx.hir().local_def_id(param_id).to_def_id()\n-            }\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n     let it = tcx.hir().item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id());"}, {"sha": "5cfaf4be96aeb02e1da641fc9c9dae0eddee80de", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs?ref=ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for #85945: Don't suggest `?Sized` bound if an explicit\n+// `Sized` bound is already in a `where` clause.\n+fn foo<T>(_: &T) where T: Sized {}\n+fn bar() { foo(\"\"); }\n+//~^ERROR the size for values of type\n+\n+pub fn main() {\n+}"}, {"sha": "92be9f764cc4b56ba5f617104b779e7f474122d6", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr?ref=ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-85945-check-where-clause-before-suggesting-unsized.rs:4:16\n+   |\n+LL | fn bar() { foo(\"\"); }\n+   |            --- ^^ doesn't have a size known at compile-time\n+   |            |\n+   |            required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `foo`\n+  --> $DIR/issue-85945-check-where-clause-before-suggesting-unsized.rs:3:8\n+   |\n+LL | fn foo<T>(_: &T) where T: Sized {}\n+   |        ^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}