{"sha": "cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYTNhMzMwMTQ5Yjc4YzRkODI3YjEwZDlhYzRmZjhkMzgxZTczNDI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-11T08:45:26Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T09:29:11Z"}, "message": "compiletest: Rewrite extract_lldb_version function\n\nThis makes extract_lldb_version has the same version type like\nextract_gdb_version.\n\nThis is technically a breaking change for rustc-dev users.\nBut note that rustc-dev is a nightly component.", "tree": {"sha": "ffff076202f128c142f939b591419a53c3983a1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffff076202f128c142f939b591419a53c3983a1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "html_url": "https://github.com/rust-lang/rust/commit/cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0701419e96d94e5493c7ebfcecb66511ab0aa778", "url": "https://api.github.com/repos/rust-lang/rust/commits/0701419e96d94e5493c7ebfcecb66511ab0aa778", "html_url": "https://github.com/rust-lang/rust/commit/0701419e96d94e5493c7ebfcecb66511ab0aa778"}], "stats": {"total": 126, "additions": 50, "deletions": 76}, "files": [{"sha": "4abb1db35a02f9bd1459cc80ca8ce7d6a71ee5b5", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "patch": "@@ -268,7 +268,7 @@ pub struct Config {\n     pub gdb_native_rust: bool,\n \n     /// Version of LLDB\n-    pub lldb_version: Option<String>,\n+    pub lldb_version: Option<u32>,\n \n     /// Whether LLDB has native rust support\n     pub lldb_native_rust: bool,"}, {"sha": "0ee11608dc5b39ab9556d345f95d3db9c9ce635a", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "patch": "@@ -188,16 +188,17 @@ impl EarlyProps {\n         }\n \n         fn ignore_lldb(config: &Config, line: &str) -> bool {\n-            if let Some(ref actual_version) = config.lldb_version {\n-                if line.starts_with(\"min-lldb-version\") {\n-                    let min_version = line\n-                        .trim_end()\n-                        .rsplit(' ')\n-                        .next()\n-                        .expect(\"Malformed lldb version directive\");\n+            if let Some(actual_version) = config.lldb_version {\n+                if let Some(min_version) = line.strip_prefix(\"min-lldb-version:\").map(str::trim) {\n+                    let min_version = min_version.parse().unwrap_or_else(|e| {\n+                        panic!(\n+                            \"Unexpected format of LLDB version string: {}\\n{:?}\",\n+                            min_version, e\n+                        );\n+                    });\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    lldb_version_to_int(actual_version) < lldb_version_to_int(min_version)\n+                    actual_version < min_version\n                 } else if line.starts_with(\"rust-lldb\") && !config.lldb_native_rust {\n                     true\n                 } else {\n@@ -944,12 +945,6 @@ impl Config {\n     }\n }\n \n-pub fn lldb_version_to_int(version_string: &str) -> isize {\n-    let error_string =\n-        format!(\"Encountered LLDB version string with unexpected format: {}\", version_string);\n-    version_string.parse().expect(&error_string)\n-}\n-\n fn expand_variables(mut value: String, config: &Config) -> String {\n     const CWD: &'static str = \"{{cwd}}\";\n     const SRC_BASE: &'static str = \"{{src-base}}\";"}, {"sha": "2b0ff0da9f5c5cba9168eb3fd2006d2b7f1363f7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 29, "deletions": 61, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "patch": "@@ -165,8 +165,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     let cdb = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n     let (gdb, gdb_version, gdb_native_rust) =\n         analyze_gdb(matches.opt_str(\"gdb\"), &target, &android_cross_path);\n-    let (lldb_version, lldb_native_rust) = extract_lldb_version(matches.opt_str(\"lldb-version\"));\n-\n+    let (lldb_version, lldb_native_rust) = matches\n+        .opt_str(\"lldb-version\")\n+        .as_deref()\n+        .and_then(extract_lldb_version)\n+        .map(|(v, b)| (Some(v), b))\n+        .unwrap_or((None, false));\n     let color = match matches.opt_str(\"color\").as_ref().map(|x| &**x) {\n         Some(\"auto\") | None => ColorConfig::AutoColor,\n         Some(\"always\") => ColorConfig::AlwaysColor,\n@@ -400,17 +404,14 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n         return None;\n     }\n \n-    if let Some(lldb_version) = config.lldb_version.as_ref() {\n-        if lldb_version == \"350\" {\n-            println!(\n-                \"WARNING: The used version of LLDB ({}) has a \\\n-                 known issue that breaks debuginfo tests. See \\\n-                 issue #32520 for more information. Skipping all \\\n-                 LLDB-based tests!\",\n-                lldb_version\n-            );\n-            return None;\n-        }\n+    if let Some(350) = config.lldb_version {\n+        println!(\n+            \"WARNING: The used version of LLDB (350) has a \\\n+             known issue that breaks debuginfo tests. See \\\n+             issue #32520 for more information. Skipping all \\\n+             LLDB-based tests!\",\n+        );\n+        return None;\n     }\n \n     // Some older versions of LLDB seem to have problems with multiple\n@@ -908,7 +909,7 @@ fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n }\n \n /// Returns (LLDB version, LLDB is rust-enabled)\n-fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, bool) {\n+fn extract_lldb_version(full_version_line: &str) -> Option<(u32, bool)> {\n     // Extract the major LLDB version from the given version string.\n     // LLDB version strings are different for Apple and non-Apple platforms.\n     // The Apple variant looks like this:\n@@ -917,7 +918,7 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n     // lldb-300.2.51 (new versions)\n     //\n     // We are only interested in the major version number, so this function\n-    // will return `Some(\"179\")` and `Some(\"300\")` respectively.\n+    // will return `Some(179)` and `Some(300)` respectively.\n     //\n     // Upstream versions look like:\n     // lldb version 6.0.1\n@@ -929,53 +930,20 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n     // normally fine because the only non-Apple version we test is\n     // rust-enabled.\n \n-    if let Some(ref full_version_line) = full_version_line {\n-        if !full_version_line.trim().is_empty() {\n-            let full_version_line = full_version_line.trim();\n-\n-            for (pos, l) in full_version_line.char_indices() {\n-                if l != 'l' && l != 'L' {\n-                    continue;\n-                }\n-                if pos + 5 >= full_version_line.len() {\n-                    continue;\n-                }\n-                let l = full_version_line[pos + 1..].chars().next().unwrap();\n-                if l != 'l' && l != 'L' {\n-                    continue;\n-                }\n-                let d = full_version_line[pos + 2..].chars().next().unwrap();\n-                if d != 'd' && d != 'D' {\n-                    continue;\n-                }\n-                let b = full_version_line[pos + 3..].chars().next().unwrap();\n-                if b != 'b' && b != 'B' {\n-                    continue;\n-                }\n-                let dash = full_version_line[pos + 4..].chars().next().unwrap();\n-                if dash != '-' {\n-                    continue;\n-                }\n-\n-                let vers = full_version_line[pos + 5..]\n-                    .chars()\n-                    .take_while(|c| c.is_digit(10))\n-                    .collect::<String>();\n-                if !vers.is_empty() {\n-                    return (Some(vers), full_version_line.contains(\"rust-enabled\"));\n-                }\n-            }\n+    let full_version_line = full_version_line.trim();\n \n-            if full_version_line.starts_with(\"lldb version \") {\n-                let vers = full_version_line[13..]\n-                    .chars()\n-                    .take_while(|c| c.is_digit(10))\n-                    .collect::<String>();\n-                if !vers.is_empty() {\n-                    return (Some(vers + \"00\"), full_version_line.contains(\"rust-enabled\"));\n-                }\n-            }\n+    if let Some(apple_ver) =\n+        full_version_line.strip_prefix(\"LLDB-\").or_else(|| full_version_line.strip_prefix(\"lldb-\"))\n+    {\n+        if let Some(idx) = apple_ver.find(|c: char| !c.is_digit(10)) {\n+            let version: u32 = apple_ver[..idx].parse().unwrap();\n+            return Some((version, full_version_line.contains(\"rust-enabled\")));\n+        }\n+    } else if let Some(lldb_ver) = full_version_line.strip_prefix(\"lldb version \") {\n+        if let Some(idx) = lldb_ver.find(|c: char| !c.is_digit(10)) {\n+            let version: u32 = lldb_ver[..idx].parse().unwrap();\n+            return Some((version * 100, full_version_line.contains(\"rust-enabled\")));\n         }\n     }\n-    (None, false)\n+    None\n }"}, {"sha": "7669ec53bf72f5c9ebc8300c4f5e104d84dd9009", "filename": "src/tools/compiletest/src/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa3a330149b78c4d827b10d9ac4ff8d381e7342/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs?ref=cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "patch": "@@ -41,6 +41,17 @@ fn test_extract_gdb_version() {\n     }\n }\n \n+#[test]\n+fn test_extract_lldb_version() {\n+    // Apple variants\n+    assert_eq!(extract_lldb_version(\"LLDB-179.5\"), Some((179, false)));\n+    assert_eq!(extract_lldb_version(\"lldb-300.2.51\"), Some((300, false)));\n+\n+    // Upstream versions\n+    assert_eq!(extract_lldb_version(\"lldb version 6.0.1\"), Some((600, false)));\n+    assert_eq!(extract_lldb_version(\"lldb version 9.0.0\"), Some((900, false)));\n+}\n+\n #[test]\n fn is_test_test() {\n     assert_eq!(true, is_test(&OsString::from(\"a_test.rs\")));"}]}