{"sha": "20186cdf89a0b5027228ea01e0322bc4dac0456d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMTg2Y2RmODlhMGI1MDI3MjI4ZWEwMWUwMzIyYmM0ZGFjMDQ1NmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T19:48:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T19:57:19Z"}, "message": "Fix add-new assist", "tree": {"sha": "80fae230e59354d97cb6ee85d036df3895d70de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80fae230e59354d97cb6ee85d036df3895d70de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20186cdf89a0b5027228ea01e0322bc4dac0456d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20186cdf89a0b5027228ea01e0322bc4dac0456d", "html_url": "https://github.com/rust-lang/rust/commit/20186cdf89a0b5027228ea01e0322bc4dac0456d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20186cdf89a0b5027228ea01e0322bc4dac0456d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1889b3c7b52c1070734dc449d4119c5e5cf991a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1889b3c7b52c1070734dc449d4119c5e5cf991a4", "html_url": "https://github.com/rust-lang/rust/commit/1889b3c7b52c1070734dc449d4119c5e5cf991a4"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "2038afdc6f78beda9046858949ebd043871e4c0d", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/20186cdf89a0b5027228ea01e0322bc4dac0456d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20186cdf89a0b5027228ea01e0322bc4dac0456d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=20186cdf89a0b5027228ea01e0322bc4dac0456d", "patch": "@@ -158,9 +158,12 @@ fn find_struct_impl(\n         let same_ty = blk.target_ty(db) == struct_ty;\n         let not_trait_impl = blk.target_trait(db).is_none();\n \n-        found_new_fn = has_new_fn(impl_blk);\n+        if !(same_ty && not_trait_impl) {\n+            return false;\n+        }\n \n-        same_ty && not_trait_impl\n+        found_new_fn = has_new_fn(impl_blk);\n+        true\n     });\n \n     if found_new_fn {\n@@ -186,9 +189,10 @@ fn has_new_fn(imp: &ast::ImplBlock) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     #[rustfmt::skip]\n     fn test_add_new() {\n@@ -345,7 +349,7 @@ struct Foo {<|>}\n impl Foo {\n     fn new() -> Self {\n         Self\n-    }    \n+    }\n }\",\n         );\n \n@@ -357,7 +361,7 @@ struct Foo {<|>}\n impl Foo {\n     fn New() -> Self {\n         Self\n-    }    \n+    }\n }\",\n         );\n     }\n@@ -376,4 +380,59 @@ struct EvenMoreIrrelevant;\n struct Foo<'a, T: Foo<'a>> {}\",\n         );\n     }\n+\n+    #[test]\n+    fn test_unrelated_new() {\n+        check_assist(\n+            add_new,\n+            r##\"\n+pub struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n+        AstId { file_id, file_ast_id }\n+    }\n+}\n+\n+pub struct Source<T> {\n+    pub file_id: HirFileId,<|>\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+}\n+\"##,\n+            r##\"\n+pub struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n+        AstId { file_id, file_ast_id }\n+    }\n+}\n+\n+pub struct Source<T> {\n+    pub file_id: HirFileId,\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }<|>\n+\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+}\n+\"##,\n+        );\n+    }\n }"}]}