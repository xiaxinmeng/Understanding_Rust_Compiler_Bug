{"sha": "271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "node_id": "C_kwDOAAsO6NoAKDI3MWY3YjQ0ZDNkNzFkYjJlYzJkMGNkMWE4YTU5YWExNmY5MDJkNDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T21:43:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T21:43:38Z"}, "message": "Auto merge of #13699 - HKalbasi:inlaylink, r=Veykril\n\nImplement location link for type inlay hints\n\nfix #11701\n\nThis actually doesn't work due a problem in vscode: https://github.com/microsoft/vscode/issues/167564", "tree": {"sha": "b948a9ec5c18b72a00811a081a5bd7c9190e7a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b948a9ec5c18b72a00811a081a5bd7c9190e7a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "html_url": "https://github.com/rust-lang/rust/commit/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113f17be6ee55c749ce1bba3d268099be4749e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/113f17be6ee55c749ce1bba3d268099be4749e46", "html_url": "https://github.com/rust-lang/rust/commit/113f17be6ee55c749ce1bba3d268099be4749e46"}, {"sha": "e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7", "html_url": "https://github.com/rust-lang/rust/commit/e1aa73ef40b8902b2cbdd8272978fcc1c47cf3c7"}], "stats": {"total": 575, "additions": 483, "deletions": 92}, "files": [{"sha": "57a15d114f071e2520e9c3de8331b209caa2d723", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -16,7 +16,7 @@ use hir_def::{\n     path::{Path, PathKind},\n     type_ref::{ConstScalar, TraitBoundModifier, TypeBound, TypeRef},\n     visibility::Visibility,\n-    HasModule, ItemContainerId, Lookup, ModuleId, TraitId,\n+    HasModule, ItemContainerId, Lookup, ModuleDefId, ModuleId, TraitId,\n };\n use hir_expand::{hygiene::Hygiene, name::Name};\n use itertools::Itertools;\n@@ -35,16 +35,44 @@ use crate::{\n     TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n };\n \n+pub trait HirWrite: fmt::Write {\n+    fn start_location_link(&mut self, location: ModuleDefId);\n+    fn end_location_link(&mut self);\n+}\n+\n+// String will ignore link metadata\n+impl HirWrite for String {\n+    fn start_location_link(&mut self, _: ModuleDefId) {}\n+\n+    fn end_location_link(&mut self) {}\n+}\n+\n+// `core::Formatter` will ignore metadata\n+impl HirWrite for fmt::Formatter<'_> {\n+    fn start_location_link(&mut self, _: ModuleDefId) {}\n+    fn end_location_link(&mut self) {}\n+}\n+\n pub struct HirFormatter<'a> {\n     pub db: &'a dyn HirDatabase,\n-    fmt: &'a mut dyn fmt::Write,\n+    fmt: &'a mut dyn HirWrite,\n     buf: String,\n     curr_size: usize,\n     pub(crate) max_size: Option<usize>,\n     omit_verbose_types: bool,\n     display_target: DisplayTarget,\n }\n \n+impl HirFormatter<'_> {\n+    fn start_location_link(&mut self, location: ModuleDefId) {\n+        self.fmt.start_location_link(location);\n+    }\n+\n+    fn end_location_link(&mut self) {\n+        self.fmt.end_location_link();\n+    }\n+}\n+\n pub trait HirDisplay {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError>;\n \n@@ -245,20 +273,26 @@ pub struct HirDisplayWrapper<'a, T> {\n     display_target: DisplayTarget,\n }\n \n-impl<'a, T> fmt::Display for HirDisplayWrapper<'a, T>\n-where\n-    T: HirDisplay,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.t.hir_fmt(&mut HirFormatter {\n+impl<T: HirDisplay> HirDisplayWrapper<'_, T> {\n+    pub fn write_to<F: HirWrite>(&self, f: &mut F) -> Result<(), HirDisplayError> {\n+        self.t.hir_fmt(&mut HirFormatter {\n             db: self.db,\n             fmt: f,\n             buf: String::with_capacity(20),\n             curr_size: 0,\n             max_size: self.max_size,\n             omit_verbose_types: self.omit_verbose_types,\n             display_target: self.display_target,\n-        }) {\n+        })\n+    }\n+}\n+\n+impl<'a, T> fmt::Display for HirDisplayWrapper<'a, T>\n+where\n+    T: HirDisplay,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.write_to(f) {\n             Ok(()) => Ok(()),\n             Err(HirDisplayError::FmtError) => Err(fmt::Error),\n             Err(HirDisplayError::DisplaySourceCodeError(_)) => {\n@@ -530,6 +564,7 @@ impl HirDisplay for Ty {\n                 }\n             }\n             TyKind::Adt(AdtId(def_id), parameters) => {\n+                f.start_location_link((*def_id).into());\n                 match f.display_target {\n                     DisplayTarget::Diagnostics | DisplayTarget::Test => {\n                         let name = match *def_id {\n@@ -554,6 +589,7 @@ impl HirDisplay for Ty {\n                         }\n                     }\n                 }\n+                f.end_location_link();\n \n                 if parameters.len(Interner) > 0 {\n                     let parameters_to_write = if f.display_target.is_source_code()"}, {"sha": "7e0e02452616a64ae2584416d752df694c60e3d9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -114,12 +114,20 @@ pub use {\n         path::{ModPath, PathKind},\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n+        // FIXME: This is here since it is input of a method in `HirWrite`\n+        // and things outside of hir need to implement that trait. We probably\n+        // should move whole `hir_ty::display` to this crate so we will become\n+        // able to use `ModuleDef` or `Definition` instead of `ModuleDefId`.\n+        ModuleDefId,\n     },\n     hir_expand::{\n         name::{known, Name},\n         ExpandResult, HirFileId, InFile, MacroFile, Origin,\n     },\n-    hir_ty::{display::HirDisplay, PointerCast, Safety},\n+    hir_ty::{\n+        display::{HirDisplay, HirWrite},\n+        PointerCast, Safety,\n+    },\n };\n \n // These are negative re-exports: pub using these names is forbidden, they"}, {"sha": "9aef78143d6dd4316275bd7b475fd772f4f28a52", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 117, "deletions": 25, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -1,15 +1,19 @@\n-use std::fmt;\n+use std::{\n+    fmt::{self, Write},\n+    mem::take,\n+};\n \n use either::Either;\n-use hir::{known, HasVisibility, HirDisplay, Semantics};\n+use hir::{known, HasVisibility, HirDisplay, HirWrite, ModuleDef, ModuleDefId, Semantics};\n use ide_db::{base_db::FileRange, famous_defs::FamousDefs, RootDatabase};\n use itertools::Itertools;\n+use stdx::never;\n use syntax::{\n     ast::{self, AstNode},\n     match_ast, NodeOrToken, SyntaxNode, TextRange, TextSize,\n };\n \n-use crate::FileId;\n+use crate::{navigation_target::TryToNav, FileId};\n \n mod closing_brace;\n mod implicit_static;\n@@ -23,6 +27,7 @@ mod bind_pat;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n+    pub location_links: bool,\n     pub render_colons: bool,\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n@@ -89,6 +94,7 @@ pub enum InlayTooltip {\n     HoverOffset(FileId, TextSize),\n }\n \n+#[derive(Default)]\n pub struct InlayHintLabel {\n     pub parts: Vec<InlayHintLabelPart>,\n }\n@@ -172,6 +178,104 @@ impl fmt::Debug for InlayHintLabelPart {\n     }\n }\n \n+#[derive(Debug)]\n+struct InlayHintLabelBuilder<'a> {\n+    db: &'a RootDatabase,\n+    result: InlayHintLabel,\n+    last_part: String,\n+    location_link_enabled: bool,\n+    location: Option<FileRange>,\n+}\n+\n+impl fmt::Write for InlayHintLabelBuilder<'_> {\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        self.last_part.write_str(s)\n+    }\n+}\n+\n+impl HirWrite for InlayHintLabelBuilder<'_> {\n+    fn start_location_link(&mut self, def: ModuleDefId) {\n+        if !self.location_link_enabled {\n+            return;\n+        }\n+        if self.location.is_some() {\n+            never!(\"location link is already started\");\n+        }\n+        self.make_new_part();\n+        let Some(location) = ModuleDef::from(def).try_to_nav(self.db) else { return };\n+        let location =\n+            FileRange { file_id: location.file_id, range: location.focus_or_full_range() };\n+        self.location = Some(location);\n+    }\n+\n+    fn end_location_link(&mut self) {\n+        if !self.location_link_enabled {\n+            return;\n+        }\n+        self.make_new_part();\n+    }\n+}\n+\n+impl InlayHintLabelBuilder<'_> {\n+    fn make_new_part(&mut self) {\n+        self.result.parts.push(InlayHintLabelPart {\n+            text: take(&mut self.last_part),\n+            linked_location: self.location.take(),\n+        });\n+    }\n+\n+    fn finish(mut self) -> InlayHintLabel {\n+        self.make_new_part();\n+        self.result\n+    }\n+}\n+\n+fn label_of_ty(\n+    sema: &Semantics<'_, RootDatabase>,\n+    desc_pat: &impl AstNode,\n+    config: &InlayHintsConfig,\n+    ty: hir::Type,\n+) -> Option<InlayHintLabel> {\n+    fn rec(\n+        sema: &Semantics<'_, RootDatabase>,\n+        famous_defs: &FamousDefs<'_, '_>,\n+        mut max_length: Option<usize>,\n+        ty: hir::Type,\n+        label_builder: &mut InlayHintLabelBuilder<'_>,\n+    ) {\n+        let iter_item_type = hint_iterator(sema, &famous_defs, &ty);\n+        match iter_item_type {\n+            Some(ty) => {\n+                const LABEL_START: &str = \"impl Iterator<Item = \";\n+                const LABEL_END: &str = \">\";\n+\n+                max_length =\n+                    max_length.map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len()));\n+\n+                label_builder.write_str(LABEL_START).unwrap();\n+                rec(sema, famous_defs, max_length, ty, label_builder);\n+                label_builder.write_str(LABEL_END).unwrap();\n+            }\n+            None => {\n+                let _ = ty.display_truncated(sema.db, max_length).write_to(label_builder);\n+            }\n+        };\n+    }\n+\n+    let krate = sema.scope(desc_pat.syntax())?.krate();\n+    let famous_defs = FamousDefs(sema, krate);\n+    let mut label_builder = InlayHintLabelBuilder {\n+        db: sema.db,\n+        last_part: String::new(),\n+        location: None,\n+        location_link_enabled: config.location_links,\n+        result: InlayHintLabel::default(),\n+    };\n+    rec(sema, &famous_defs, config.max_length, ty, &mut label_builder);\n+    let r = label_builder.finish();\n+    Some(r)\n+}\n+\n // Feature: Inlay Hints\n //\n // rust-analyzer shows additional information inline with the source code.\n@@ -224,7 +328,7 @@ pub(crate) fn inlay_hints(\n \n fn hints(\n     hints: &mut Vec<InlayHint>,\n-    famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n+    FamousDefs(sema, _): &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     node: SyntaxNode,\n@@ -233,14 +337,14 @@ fn hints(\n     match_ast! {\n         match node {\n             ast::Expr(expr) => {\n-                chaining::hints(hints, sema, &famous_defs, config, file_id, &expr);\n+                chaining::hints(hints, sema, config, file_id, &expr);\n                 adjustment::hints(hints, sema, config, &expr);\n                 match expr {\n                     ast::Expr::CallExpr(it) => param_name::hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n                         param_name::hints(hints, sema, config, ast::Expr::from(it))\n                     }\n-                    ast::Expr::ClosureExpr(it) => closure_ret::hints(hints, sema, &famous_defs, config, file_id, it),\n+                    ast::Expr::ClosureExpr(it) => closure_ret::hints(hints, sema, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n                     // ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n@@ -270,13 +374,12 @@ fn hints(\n     };\n }\n \n-/// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n+/// Checks if the type is an Iterator from std::iter and returns its item type.\n fn hint_iterator(\n     sema: &Semantics<'_, RootDatabase>,\n     famous_defs: &FamousDefs<'_, '_>,\n-    config: &InlayHintsConfig,\n     ty: &hir::Type,\n-) -> Option<String> {\n+) -> Option<hir::Type> {\n     let db = sema.db;\n     let strukt = ty.strip_references().as_adt()?;\n     let krate = strukt.module(db).krate();\n@@ -299,21 +402,7 @@ fn hint_iterator(\n             _ => None,\n         })?;\n         if let Some(ty) = ty.normalize_trait_assoc_type(db, &[], assoc_type_item) {\n-            const LABEL_START: &str = \"impl Iterator<Item = \";\n-            const LABEL_END: &str = \">\";\n-\n-            let ty_display = hint_iterator(sema, famous_defs, config, &ty)\n-                .map(|assoc_type_impl| assoc_type_impl.to_string())\n-                .unwrap_or_else(|| {\n-                    ty.display_truncated(\n-                        db,\n-                        config\n-                            .max_length\n-                            .map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len())),\n-                    )\n-                    .to_string()\n-                });\n-            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END));\n+            return Some(ty);\n         }\n     }\n \n@@ -336,6 +425,7 @@ mod tests {\n     use super::ClosureReturnTypeHints;\n \n     pub(super) const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n+        location_links: false,\n         render_colons: false,\n         type_hints: false,\n         parameter_hints: false,\n@@ -350,14 +440,16 @@ mod tests {\n         max_length: None,\n         closing_brace_hints_min_lines: None,\n     };\n+    pub(super) const DISABLED_CONFIG_WITH_LINKS: InlayHintsConfig =\n+        InlayHintsConfig { location_links: true, ..DISABLED_CONFIG };\n     pub(super) const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n         closure_return_type_hints: ClosureReturnTypeHints::WithBlock,\n         binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n-        ..DISABLED_CONFIG\n+        ..DISABLED_CONFIG_WITH_LINKS\n     };\n \n     #[track_caller]"}, {"sha": "7766d497918df8fda34eff1cad207e09ccbef4ea", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -3,8 +3,8 @@\n //! fn f(a: i32, b: i32) -> i32 { a + b }\n //! let _x /* i32 */= f(4, 4);\n //! ```\n-use hir::{HirDisplay, Semantics, TypeInfo};\n-use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n+use hir::{Semantics, TypeInfo};\n+use ide_db::{base_db::FileId, RootDatabase};\n \n use itertools::Itertools;\n use syntax::{\n@@ -13,10 +13,11 @@ use syntax::{\n };\n \n use crate::{\n-    inlay_hints::{closure_has_block_body, hint_iterator},\n-    InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+    inlay_hints::closure_has_block_body, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n };\n \n+use super::label_of_ty;\n+\n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n@@ -36,30 +37,21 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let krate = sema.scope(desc_pat.syntax())?.krate();\n-    let famous_defs = FamousDefs(sema, krate);\n-    let label = hint_iterator(sema, &famous_defs, config, &ty);\n+    let label = label_of_ty(sema, desc_pat, config, ty)?;\n \n-    let label = match label {\n-        Some(label) => label,\n-        None => {\n-            let ty_name = ty.display_truncated(sema.db, config.max_length).to_string();\n-            if config.hide_named_constructor_hints\n-                && is_named_constructor(sema, pat, &ty_name).is_some()\n-            {\n-                return None;\n-            }\n-            ty_name\n-        }\n-    };\n+    if config.hide_named_constructor_hints\n+        && is_named_constructor(sema, pat, &label.to_string()).is_some()\n+    {\n+        return None;\n+    }\n \n     acc.push(InlayHint {\n         range: match pat.name() {\n             Some(name) => name.syntax().text_range(),\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::TypeHint,\n-        label: label.into(),\n+        label,\n         tooltip: pat\n             .name()\n             .map(|it| it.syntax().text_range())\n@@ -202,7 +194,8 @@ mod tests {\n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n \n     use crate::inlay_hints::tests::{\n-        check, check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG,\n+        check, check_expect, check_with_config, DISABLED_CONFIG, DISABLED_CONFIG_WITH_LINKS,\n+        TEST_CONFIG,\n     };\n     use crate::ClosureReturnTypeHints;\n \n@@ -298,7 +291,7 @@ fn main() {\n     fn iterator_hint_regression_issue_12674() {\n         // Ensure we don't crash while solving the projection type of iterators.\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n             r#\"\n //- minicore: iterators\n struct S<T>(T);\n@@ -346,7 +339,31 @@ fn main(a: SliceIter<'_, Container>) {\n                         range: 484..485,\n                         kind: ChainingHint,\n                         label: [\n-                            \"SliceIter<Container>\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"SliceIter\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 289..298,\n+                                    },\n+                                ),\n+                            },\n+                            \"<\",\n+                            InlayHintLabelPart {\n+                                text: \"Container\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 238..247,\n+                                    },\n+                                ),\n+                            },\n+                            \">\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged("}, {"sha": "efeb2b792550220e0e7c91d4bb9e4ee7097d9318", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 231, "deletions": 24, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -1,19 +1,18 @@\n //! Implementation of \"chaining\" inlay hints.\n-use hir::{HirDisplay, Semantics};\n-use ide_db::{famous_defs::FamousDefs, RootDatabase};\n+use hir::Semantics;\n+use ide_db::RootDatabase;\n use syntax::{\n     ast::{self, AstNode},\n     Direction, NodeOrToken, SyntaxKind, T,\n };\n \n-use crate::{\n-    inlay_hints::hint_iterator, FileId, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n-};\n+use crate::{FileId, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+\n+use super::label_of_ty;\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n-    famous_defs: &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     expr: &ast::Expr,\n@@ -62,9 +61,7 @@ pub(super) fn hints(\n             acc.push(InlayHint {\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n-                label: hint_iterator(sema, &famous_defs, config, &ty)\n-                    .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n-                    .into(),\n+                label: label_of_ty(sema, desc_expr, config, ty)?,\n                 tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n@@ -77,7 +74,10 @@ mod tests {\n     use expect_test::expect;\n \n     use crate::{\n-        inlay_hints::tests::{check_expect, check_with_config, DISABLED_CONFIG, TEST_CONFIG},\n+        inlay_hints::tests::{\n+            check_expect, check_with_config, DISABLED_CONFIG, DISABLED_CONFIG_WITH_LINKS,\n+            TEST_CONFIG,\n+        },\n         InlayHintsConfig,\n     };\n \n@@ -89,7 +89,11 @@ mod tests {\n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n-            InlayHintsConfig { type_hints: false, chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig {\n+                type_hints: false,\n+                chaining_hints: true,\n+                ..DISABLED_CONFIG_WITH_LINKS\n+            },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -110,7 +114,19 @@ fn main() {\n                         range: 147..172,\n                         kind: ChainingHint,\n                         label: [\n-                            \"B\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 63..64,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -125,7 +141,19 @@ fn main() {\n                         range: 147..154,\n                         kind: ChainingHint,\n                         label: [\n-                            \"A\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"A\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..8,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -158,10 +186,69 @@ fn main() {\n     }\n \n     #[test]\n-    fn struct_access_chaining_hints() {\n+    fn disabled_location_links() {\n         check_expect(\n             InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n+    struct A { pub b: B }\n+    struct B { pub c: C }\n+    struct C(pub bool);\n+    struct D;\n+\n+    impl D {\n+        fn foo(&self) -> i32 { 42 }\n+    }\n+\n+    fn main() {\n+        let x = A { b: B { c: C(true) } }\n+            .b\n+            .c\n+            .0;\n+        let x = D\n+            .foo();\n+    }\"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 143..190,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"C\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                143..190,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 143..179,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"B\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                143..179,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_access_chaining_hints() {\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n+            r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n struct C(pub bool);\n@@ -185,7 +272,19 @@ fn main() {\n                         range: 143..190,\n                         kind: ChainingHint,\n                         label: [\n-                            \"C\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"C\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 51..52,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -200,7 +299,19 @@ fn main() {\n                         range: 143..179,\n                         kind: ChainingHint,\n                         label: [\n-                            \"B\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 29..30,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -219,7 +330,7 @@ fn main() {\n     #[test]\n     fn generic_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n             r#\"\n struct A<T>(T);\n struct B<T>(T);\n@@ -245,7 +356,31 @@ fn main() {\n                         range: 246..283,\n                         kind: ChainingHint,\n                         label: [\n-                            \"B<X<i32, bool>>\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 23..24,\n+                                    },\n+                                ),\n+                            },\n+                            \"<\",\n+                            InlayHintLabelPart {\n+                                text: \"X\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 55..56,\n+                                    },\n+                                ),\n+                            },\n+                            \"<i32, bool>>\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -260,7 +395,31 @@ fn main() {\n                         range: 246..265,\n                         kind: ChainingHint,\n                         label: [\n-                            \"A<X<i32, bool>>\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"A\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..8,\n+                                    },\n+                                ),\n+                            },\n+                            \"<\",\n+                            InlayHintLabelPart {\n+                                text: \"X\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 55..56,\n+                                    },\n+                                ),\n+                            },\n+                            \"<i32, bool>>\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -279,7 +438,7 @@ fn main() {\n     #[test]\n     fn shorten_iterator_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG_WITH_LINKS },\n             r#\"\n //- minicore: iterators\n use core::iter;\n@@ -352,7 +511,19 @@ fn main() {\n                         range: 174..189,\n                         kind: ChainingHint,\n                         label: [\n-                            \"&mut MyIter\",\n+                            \"&mut \",\n+                            InlayHintLabelPart {\n+                                text: \"MyIter\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 24..30,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -396,7 +567,19 @@ fn main() {\n                         range: 124..130,\n                         kind: TypeHint,\n                         label: [\n-                            \"Struct\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"Struct\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..13,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -411,7 +594,19 @@ fn main() {\n                         range: 145..185,\n                         kind: ChainingHint,\n                         label: [\n-                            \"Struct\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"Struct\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..13,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -426,7 +621,19 @@ fn main() {\n                         range: 145..168,\n                         kind: ChainingHint,\n                         label: [\n-                            \"Struct\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"Struct\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..13,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged("}, {"sha": "e340c64c54b55ed44f319e806c2fbeb4a152a1cf", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -109,7 +109,10 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let linked_location = name_range.map(|range| FileRange { file_id, range });\n+    let linked_location = config\n+        .location_links\n+        .then(|| name_range.map(|range| FileRange { file_id, range }))\n+        .flatten();\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,"}, {"sha": "247a4abcc5654e916f12a5a1e6a0afc4729ea19c", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -1,17 +1,18 @@\n //! Implementation of \"closure return type\" inlay hints.\n-use hir::{HirDisplay, Semantics};\n-use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n+use hir::Semantics;\n+use ide_db::{base_db::FileId, RootDatabase};\n use syntax::ast::{self, AstNode};\n \n use crate::{\n-    inlay_hints::{closure_has_block_body, hint_iterator},\n-    ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+    inlay_hints::closure_has_block_body, ClosureReturnTypeHints, InlayHint, InlayHintsConfig,\n+    InlayKind, InlayTooltip,\n };\n \n+use super::label_of_ty;\n+\n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n-    famous_defs: &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     closure: ast::ClosureExpr,\n@@ -42,9 +43,7 @@ pub(super) fn hints(\n     acc.push(InlayHint {\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n-        label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n-            .into(),\n+        label: label_of_ty(sema, &param_list, config, ty)?,\n         tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())"}, {"sha": "42b5951c842f292f8cee7e9cc94999aebfa8188f", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -106,6 +106,7 @@ impl StaticIndex<'_> {\n             .analysis\n             .inlay_hints(\n                 &InlayHintsConfig {\n+                    location_links: true,\n                     render_colons: true,\n                     type_hints: true,\n                     parameter_hints: true,"}, {"sha": "ec5053e991d3d56b84dffb1d8d16eb9648bc1734", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -183,6 +183,8 @@ fn run_server() -> Result<()> {\n         }\n     }\n \n+    config.client_specific_adjustments(&initialize_params.client_info);\n+\n     let server_capabilities = rust_analyzer::server_capabilities(&config);\n \n     let initialize_result = lsp_types::InitializeResult {"}, {"sha": "0bcc91eb411e9bb202f31b4da0823d1d579a5853", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -20,7 +20,7 @@ use ide_db::{\n     SnippetCap,\n };\n use itertools::Itertools;\n-use lsp_types::{ClientCapabilities, MarkupKind};\n+use lsp_types::{ClientCapabilities, ClientInfo, MarkupKind};\n use project_model::{\n     CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource,\n     UnsetTestCrates,\n@@ -333,6 +333,8 @@ config_data! {\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n         inlayHints_lifetimeElisionHints_useParameterNames: bool    = \"false\",\n+        /// Whether to use location links for parts of type mentioned in inlay hints.\n+        inlayHints_locationLinks: bool                             = \"true\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n         inlayHints_maxLength: Option<usize>                        = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n@@ -714,6 +716,19 @@ impl Config {\n         }\n     }\n \n+    pub fn client_specific_adjustments(&mut self, client_info: &Option<ClientInfo>) {\n+        // FIXME: remove this when we drop support for vscode 1.65 and below\n+        if let Some(client) = client_info {\n+            if client.name.contains(\"Code\") || client.name.contains(\"Codium\") {\n+                if let Some(version) = &client.version {\n+                    if version.as_str() < \"1.76\" {\n+                        self.data.inlayHints_locationLinks = false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n@@ -1196,6 +1211,7 @@ impl Config {\n \n     pub fn inlay_hints(&self) -> InlayHintsConfig {\n         InlayHintsConfig {\n+            location_links: self.data.inlayHints_locationLinks,\n             render_colons: self.data.inlayHints_renderColons,\n             type_hints: self.data.inlayHints_typeHints_enable,\n             parameter_hints: self.data.inlayHints_parameterHints_enable,"}, {"sha": "47511aad0fea2efb863f1826de49899f6ba8a528", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -469,6 +469,11 @@ Whether to show inlay type hints for elided lifetimes in function signatures.\n --\n Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n --\n+[[rust-analyzer.inlayHints.locationLinks]]rust-analyzer.inlayHints.locationLinks (default: `true`)::\n++\n+--\n+Whether to use location links for parts of type mentioned in inlay hints.\n+--\n [[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n +\n --"}, {"sha": "5b09ee6f7dab550669ac6b3f10777cd155491d26", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "patch": "@@ -995,6 +995,11 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.locationLinks\": {\n+                    \"markdownDescription\": \"Whether to use location links for parts of type mentioned in inlay hints.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.maxLength\": {\n                     \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n                     \"default\": 25,"}]}