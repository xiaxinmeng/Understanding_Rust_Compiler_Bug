{"sha": "891e6fee572009ff2be4d4057fb33483610c36a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MWU2ZmVlNTcyMDA5ZmYyYmU0ZDQwNTdmYjMzNDgzNjEwYzM2YTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-20T02:43:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-20T02:43:31Z"}, "message": "Auto merge of #74543 - Manishearth:rollup-m5w6hyg, r=Manishearth\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #73618 (Documentation for the false keyword)\n - #74486 (Improve Read::read_exact documentation)\n - #74514 (Do not clobber RUSTDOCFLAGS)\n - #74516 (do not try fetching the ancestors of errored trait impls)\n - #74520 (include backtrace folder in rust-src component)\n - #74523 (Improve documentation for `core::fmt` internals)\n - #74527 (Add myself to toolstate change notifications for rustfmt)\n - #74534 (Only skip impls of foreign unstable traits)\n - #74536 (fix documentation surrounding the `in` and `for` keywords)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "84871572227baab9f262924e57c2a8f7f8b929f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84871572227baab9f262924e57c2a8f7f8b929f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/891e6fee572009ff2be4d4057fb33483610c36a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/891e6fee572009ff2be4d4057fb33483610c36a7", "html_url": "https://github.com/rust-lang/rust/commit/891e6fee572009ff2be4d4057fb33483610c36a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/891e6fee572009ff2be4d4057fb33483610c36a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c21a6f3a8b1c75c444b87fde5116853383b3fbd", "html_url": "https://github.com/rust-lang/rust/commit/2c21a6f3a8b1c75c444b87fde5116853383b3fbd"}, {"sha": "27947b69f9d879de45716312e4a7bd486d8d8f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/27947b69f9d879de45716312e4a7bd486d8d8f93", "html_url": "https://github.com/rust-lang/rust/commit/27947b69f9d879de45716312e4a7bd486d8d8f93"}], "stats": {"total": 109, "additions": 90, "deletions": 19}, "files": [{"sha": "737176c48f878ef5cb59a81a173cfb8ca6c5102e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -1444,6 +1444,10 @@ pub struct Cargo {\n }\n \n impl Cargo {\n+    pub fn rustdocflag(&mut self, arg: &str) -> &mut Cargo {\n+        self.rustdocflags.arg(arg);\n+        self\n+    }\n     pub fn rustflag(&mut self, arg: &str) -> &mut Cargo {\n         self.rustflags.arg(arg);\n         self\n@@ -1466,6 +1470,9 @@ impl Cargo {\n     }\n \n     pub fn env(&mut self, key: impl AsRef<OsStr>, value: impl AsRef<OsStr>) -> &mut Cargo {\n+        // These are managed through rustflag/rustdocflag interfaces.\n+        assert_ne!(key.as_ref(), \"RUSTFLAGS\");\n+        assert_ne!(key.as_ref(), \"RUSTDOCFLAGS\");\n         self.command.env(key.as_ref(), value.as_ref());\n         self\n     }"}, {"sha": "263c7b93fe55da4d7b3d42f1ecede29cd0396b3a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -1005,6 +1005,7 @@ impl Step for Src {\n         // (essentially libstd and all of its path dependencies)\n         let std_src_dirs = [\n             \"src/build_helper\",\n+            \"src/backtrace\",\n             \"src/liballoc\",\n             \"src/libcore\",\n             \"src/libpanic_abort\","}, {"sha": "f8a549afc88fb81da408d64ca8c9f7519fee8bf8", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -527,11 +527,9 @@ impl Step for Rustc {\n \n         // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"doc\");\n-        cargo.env(\n-            \"RUSTDOCFLAGS\",\n-            \"--document-private-items \\\n-            --enable-index-page -Zunstable-options\",\n-        );\n+        cargo.rustdocflag(\"--document-private-items\");\n+        cargo.rustdocflag(\"--enable-index-page\");\n+        cargo.rustdocflag(\"-Zunstable-options\");\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`.\n@@ -624,7 +622,7 @@ impl Step for Rustdoc {\n         cargo.arg(\"--no-deps\");\n         cargo.arg(\"-p\").arg(\"rustdoc\");\n \n-        cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n+        cargo.rustdocflag(\"--document-private-items\");\n         builder.run(&mut cargo.into());\n     }\n }"}, {"sha": "37202b2774dc63d95086c9d7ef6d7fa3f6231742", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -33,9 +33,13 @@ pub enum Alignment {\n     Unknown,\n }\n \n+/// Used by [width](https://doc.rust-lang.org/std/fmt/#width) and [precision](https://doc.rust-lang.org/std/fmt/#precision) specifiers.\n #[derive(Copy, Clone)]\n pub enum Count {\n+    /// Specified with a literal number, stores the value\n     Is(usize),\n+    /// Specified using `$` and `*` syntaxes, stores the index into `args`\n     Param(usize),\n+    /// Not specified\n     Implied,\n }"}, {"sha": "c9aae8980076f1a81c3446a03b2d88b0c04fbb91", "filename": "src/librustc_middle/traits/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -1,5 +1,6 @@\n use crate::ich::{self, StableHashingContext};\n use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -226,7 +227,8 @@ pub fn ancestors(\n     start_from_impl: DefId,\n ) -> Result<Ancestors<'tcx>, ErrorReported> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n-    if specialization_graph.has_errored {\n+\n+    if specialization_graph.has_errored || tcx.type_of(start_from_impl).references_error() {\n         Err(ErrorReported)\n     } else {\n         Ok(Ancestors {"}, {"sha": "1f576a17dd9d665cfe1d147e1ec0b7108b41773c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -346,9 +346,11 @@ pub fn build_impl(\n         // such. This helps prevent dependencies of the standard library, for\n         // example, from getting documented as \"traits `u32` implements\" which\n         // isn't really too helpful.\n-        if let Some(stab) = cx.tcx.lookup_stability(did) {\n-            if stab.level.is_unstable() {\n-                return;\n+        if let Some(trait_did) = associated_trait {\n+            if let Some(stab) = cx.tcx.lookup_stability(trait_did.def_id) {\n+                if stab.level.is_unstable() {\n+                    return;\n+                }\n             }\n         }\n     }"}, {"sha": "797318d95b7775f3d5e13011acc9401da7cfb1ee", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -722,7 +722,9 @@ pub trait Read {\n     /// No guarantees are provided about the contents of `buf` when this\n     /// function is called, implementations cannot rely on any property of the\n     /// contents of `buf` being true. It is recommended that implementations\n-    /// only write data to `buf` instead of reading its contents.\n+    /// only write data to `buf` instead of reading its contents. The\n+    /// documentation on [`read`] has a more detailed explanation on this\n+    /// subject.\n     ///\n     /// # Errors\n     ///\n@@ -745,6 +747,7 @@ pub trait Read {\n     ///\n     /// [`File`]s implement `Read`:\n     ///\n+    /// [`read`]: Read::read\n     /// [`File`]: crate::fs::File\n     ///\n     /// ```no_run"}, {"sha": "a62987891b99b24f5b4c153dd5f4a7827a30b98e", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -387,10 +387,11 @@ mod extern_keyword {}\n //\n /// A value of type [`bool`] representing logical **false**.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `false` is the logical opposite of [`true`].\n ///\n-/// [`bool`]: primitive.bool.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// See the documentation for [`true`] for more information.\n+///\n+/// [`true`]: keyword.true.html\n mod false_keyword {}\n \n #[doc(keyword = \"fn\")]\n@@ -473,8 +474,8 @@ mod fn_keyword {}\n /// * `for` is also used for [higher-ranked trait bounds] as in `for<'a> &'a T: PartialEq<i32>`.\n ///\n /// for-in-loops, or to be more precise, iterator loops, are a simple syntactic sugar over a common\n-/// practice within Rust, which is to loop over an iterator until that iterator returns `None` (or\n-/// `break` is called).\n+/// practice within Rust, which is to loop over anything that implements [`IntoIterator`] until the\n+/// iterator returned by `.into_iter()` returns `None` (or the loop body uses `break`).\n ///\n /// ```rust\n /// for i in 0..5 {\n@@ -680,7 +681,7 @@ mod impl_keyword {}\n //\n /// Iterate over a series of values with [`for`].\n ///\n-/// The expression immediately following `in` must implement the [`Iterator`] trait.\n+/// The expression immediately following `in` must implement the [`IntoIterator`] trait.\n ///\n /// ## Literal Examples:\n ///\n@@ -689,7 +690,7 @@ mod impl_keyword {}\n ///\n /// (Read more about [range patterns])\n ///\n-/// [`Iterator`]: ../book/ch13-04-performance.html\n+/// [`IntoIterator`]: ../book/ch13-04-performance.html\n /// [range patterns]: ../reference/patterns.html?highlight=range#range-patterns\n /// [`for`]: keyword.for.html\n mod in_keyword {}"}, {"sha": "6f06a6e2656d7b2077af1190619a07acb939a647", "filename": "src/test/rustdoc/auxiliary/unstable-trait.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Frustdoc%2Fauxiliary%2Funstable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Frustdoc%2Fauxiliary%2Funstable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Funstable-trait.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -0,0 +1,26 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"private_general\", since = \"1.0.0\")]\n+\n+#[unstable(feature = \"private_trait\", issue = \"none\")]\n+pub trait Bar {}\n+\n+#[stable(feature = \"private_general\", since = \"1.0.0\")]\n+pub struct Foo {\n+    // nothing\n+}\n+\n+impl Foo {\n+    #[stable(feature = \"private_general\", since = \"1.0.0\")]\n+    pub fn stable_impl() {}\n+}\n+\n+impl Foo {\n+    #[unstable(feature = \"private_trait\", issue = \"none\")]\n+    pub fn bar() {}\n+\n+    #[stable(feature = \"private_general\", since = \"1.0.0\")]\n+    pub fn bar2() {}\n+}\n+\n+#[stable(feature = \"private_general\", since = \"1.0.0\")]\n+impl Bar for Foo {}"}, {"sha": "c30d6ed7b52203d42f524a095311f3be286ea26c", "filename": "src/test/rustdoc/hide-unstable-trait.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:unstable-trait.rs\n+\n+#![crate_name = \"foo\"]\n+#![feature(private_trait)]\n+\n+extern crate unstable_trait;\n+\n+// @has foo/struct.Foo.html 'bar'\n+// @has foo/struct.Foo.html 'bar2'\n+#[doc(inline)]\n+pub use unstable_trait::Foo;"}, {"sha": "77a64320d6f3758dab7e00868121f43da1b00830", "filename": "src/test/ui/specialization/min_specialization/impl-on-nonexisting.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl-on-nonexisting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl-on-nonexisting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl-on-nonexisting.rs?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -0,0 +1,7 @@\n+#![feature(min_specialization)]\n+\n+trait Trait {}\n+impl Trait for NonExistent {}\n+//~^ ERROR cannot find type `NonExistent` in this scope\n+\n+fn main() {}"}, {"sha": "b032ccbe53ffc258f9a65ab87dadee6540a25f36", "filename": "src/test/ui/specialization/min_specialization/impl-on-nonexisting.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl-on-nonexisting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl-on-nonexisting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl-on-nonexisting.stderr?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `NonExistent` in this scope\n+  --> $DIR/impl-on-nonexisting.rs:4:16\n+   |\n+LL | impl Trait for NonExistent {}\n+   |                ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "c0631fcedd34973d259fce507d914851284e1eac", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/891e6fee572009ff2be4d4057fb33483610c36a7/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=891e6fee572009ff2be4d4057fb33483610c36a7", "patch": "@@ -26,7 +26,7 @@\n MAINTAINERS = {\n     'miri': {'oli-obk', 'RalfJung', 'eddyb'},\n     'rls': {'Xanewok'},\n-    'rustfmt': {'topecongiro'},\n+    'rustfmt': {'topecongiro', 'calebcartwright'},\n     'book': {'carols10cents', 'steveklabnik'},\n     'nomicon': {'frewsxcv', 'Gankra'},\n     'reference': {'steveklabnik', 'Havvy', 'matthewjasper', 'ehuss'},"}]}