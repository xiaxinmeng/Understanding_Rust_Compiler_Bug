{"sha": "999bdeca88a06938ac1e1c608091d3afe4d7e173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OWJkZWNhODhhMDY5MzhhYzFlMWM2MDgwOTFkM2FmZTRkN2UxNzM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-07-06T06:20:00Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-08-11T00:04:18Z"}, "message": "Stabilize the Duration API\n\nThis commit stabilizes the `std::time` module and the `Duration` type.\n`Duration::span` remains unstable, and the `Display` implementation for\n`Duration` has been removed as it is still being reworked and all trait\nimplementations for stable types are de facto stable.\n\nThis is a [breaking-change] to those using `Duration`'s `Display`\nimplementation.", "tree": {"sha": "57274f8e644a2823864cd2d10f938719b0ec9fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57274f8e644a2823864cd2d10f938719b0ec9fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/999bdeca88a06938ac1e1c608091d3afe4d7e173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/999bdeca88a06938ac1e1c608091d3afe4d7e173", "html_url": "https://github.com/rust-lang/rust/commit/999bdeca88a06938ac1e1c608091d3afe4d7e173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/999bdeca88a06938ac1e1c608091d3afe4d7e173/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af32c015aa6fa33cbbc2986e7f72e5c83f242c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/af32c015aa6fa33cbbc2986e7f72e5c83f242c35", "html_url": "https://github.com/rust-lang/rust/commit/af32c015aa6fa33cbbc2986e7f72e5c83f242c35"}], "stats": {"total": 131, "additions": 51, "deletions": 80}, "files": [{"sha": "bb44abc4f078db917575bd65d8371ab53f8849c4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -33,7 +33,6 @@\n #![feature(collections)]\n #![feature(const_fn)]\n #![feature(core)]\n-#![feature(duration)]\n #![feature(duration_span)]\n #![feature(dynamic_lib)]\n #![feature(enumset)]"}, {"sha": "2f481f70aafe9b24ad363c1c4ec4d5f5c5049dd8", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -722,7 +722,7 @@ fn get_metadata_section(target: &Target, filename: &Path)\n     let dur = Duration::span(|| {\n         ret = Some(get_metadata_section_imp(target, filename));\n     });\n-    info!(\"reading {:?} => {}\", filename.file_name().unwrap(), dur);\n+    info!(\"reading {:?} => {:?}\", filename.file_name().unwrap(), dur);\n     return ret.unwrap();;\n }\n "}, {"sha": "db0f820e11bfca3d1ac55aa4e52dcdd0c152b833", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -57,8 +57,8 @@ pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where\n     // Hack up our own formatting for the duration to make it easier for scripts\n     // to parse (always use the same number of decimal places and the same unit).\n     const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n-    let secs = dur.secs() as f64;\n-    let secs = secs + dur.extra_nanos() as f64 / NANOS_PER_SEC;\n+    let secs = dur.as_secs() as f64;\n+    let secs = secs + dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n \n     let mem_string = match get_resident() {\n         Some(n) => {"}, {"sha": "5d18c1d628075bf9e29b580e98378f9fa84cee26", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -61,11 +61,11 @@ impl Condvar {\n         let r = ffi::gettimeofday(&mut sys_now, ptr::null_mut());\n         debug_assert_eq!(r, 0);\n \n-        let nsec = dur.extra_nanos() as libc::c_long +\n+        let nsec = dur.subsec_nanos() as libc::c_long +\n                    (sys_now.tv_usec * 1000) as libc::c_long;\n         let extra = (nsec / 1_000_000_000) as libc::time_t;\n         let nsec = nsec % 1_000_000_000;\n-        let seconds = dur.secs() as libc::time_t;\n+        let seconds = dur.as_secs() as libc::time_t;\n \n         let timeout = sys_now.tv_sec.checked_add(extra).and_then(|s| {\n             s.checked_add(seconds)"}, {"sha": "e65f64f2029801177ef8a68995a7152aecf235c6", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -79,19 +79,19 @@ impl Socket {\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {\n-                if dur.secs() == 0 && dur.extra_nanos() == 0 {\n+                if dur.as_secs() == 0 && dur.subsec_nanos() == 0 {\n                     return Err(io::Error::new(io::ErrorKind::InvalidInput,\n                                               \"cannot set a 0 duration timeout\"));\n                 }\n \n-                let secs = if dur.secs() > libc::time_t::max_value() as u64 {\n+                let secs = if dur.as_secs() > libc::time_t::max_value() as u64 {\n                     libc::time_t::max_value()\n                 } else {\n-                    dur.secs() as libc::time_t\n+                    dur.as_secs() as libc::time_t\n                 };\n                 let mut timeout = libc::timeval {\n                     tv_sec: secs,\n-                    tv_usec: (dur.extra_nanos() / 1000) as libc::suseconds_t,\n+                    tv_usec: (dur.subsec_nanos() / 1000) as libc::suseconds_t,\n                 };\n                 if timeout.tv_sec == 0 && timeout.tv_usec == 0 {\n                     timeout.tv_usec = 1;"}, {"sha": "8efd76b9abd66bc407fbc625981db14f4fa52fd1", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -131,8 +131,8 @@ impl Thread {\n \n     pub fn sleep(dur: Duration) {\n         let mut ts = libc::timespec {\n-            tv_sec: dur.secs() as libc::time_t,\n-            tv_nsec: dur.extra_nanos() as libc::c_long,\n+            tv_sec: dur.as_secs() as libc::time_t,\n+            tv_nsec: dur.subsec_nanos() as libc::c_long,\n         };\n \n         // If we're awoken with a signal then the return value will be -1 and"}, {"sha": "b38945d8916080f454b9dfdeb91d2f14bce54add", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -162,10 +162,10 @@ fn dur2timeout(dur: Duration) -> libc::DWORD {\n     // * Nanosecond precision is rounded up\n     // * Greater than u32::MAX milliseconds (50 days) is rounded up to INFINITE\n     //   (never time out).\n-    dur.secs().checked_mul(1000).and_then(|ms| {\n-        ms.checked_add((dur.extra_nanos() as u64) / 1_000_000)\n+    dur.as_secs().checked_mul(1000).and_then(|ms| {\n+        ms.checked_add((dur.subsec_nanos() as u64) / 1_000_000)\n     }).and_then(|ms| {\n-        ms.checked_add(if dur.extra_nanos() % 1_000_000 > 0 {1} else {0})\n+        ms.checked_add(if dur.subsec_nanos() % 1_000_000 > 0 {1} else {0})\n     }).map(|ms| {\n         if ms > <libc::DWORD>::max_value() as u64 {\n             libc::INFINITE"}, {"sha": "ee287484256dd051000ad8523da73907be2e10b7", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -8,14 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Temporal quantification\n-\n-#![unstable(feature = \"duration\", reason = \"recently added API per RFC 1040\")]\n-\n #[cfg(stage0)]\n use prelude::v1::*;\n \n-use fmt;\n use ops::{Add, Sub, Mul, Div};\n use sys::time::SteadyTime;\n \n@@ -43,11 +38,12 @@ const MILLIS_PER_SEC: u64 = 1_000;\n /// let five_seconds = Duration::new(5, 0);\n /// let five_seconds_and_five_nanos = five_seconds + Duration::new(0, 5);\n ///\n-/// assert_eq!(five_seconds_and_five_nanos.secs(), 5);\n-/// assert_eq!(five_seconds_and_five_nanos.extra_nanos(), 5);\n+/// assert_eq!(five_seconds_and_five_nanos.as_secs(), 5);\n+/// assert_eq!(five_seconds_and_five_nanos.subsec_nanos(), 5);\n ///\n /// let ten_millis = Duration::from_millis(10);\n /// ```\n+#[stable(feature = \"duration\", since = \"1.3.0\")]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n pub struct Duration {\n     secs: u64,\n@@ -60,6 +56,7 @@ impl Duration {\n     ///\n     /// If the nanoseconds is greater than 1 billion (the number of nanoseconds\n     /// in a second), then it will carry over into the seconds provided.\n+    #[stable(feature = \"duration\", since = \"1.3.0\")]\n     pub fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = secs + (nanos / NANOS_PER_SEC) as u64;\n         let nanos = nanos % NANOS_PER_SEC;\n@@ -79,11 +76,13 @@ impl Duration {\n     }\n \n     /// Creates a new `Duration` from the specified number of seconds.\n+    #[stable(feature = \"duration\", since = \"1.3.0\")]\n     pub fn from_secs(secs: u64) -> Duration {\n         Duration { secs: secs, nanos: 0 }\n     }\n \n     /// Creates a new `Duration` from the specified number of milliseconds.\n+    #[stable(feature = \"duration\", since = \"1.3.0\")]\n     pub fn from_millis(millis: u64) -> Duration {\n         let secs = millis / MILLIS_PER_SEC;\n         let nanos = ((millis % MILLIS_PER_SEC) as u32) * NANOS_PER_MILLI;\n@@ -94,14 +93,16 @@ impl Duration {\n     ///\n     /// The extra precision represented by this duration is ignored (e.g. extra\n     /// nanoseconds are not represented in the returned value).\n-    pub fn secs(&self) -> u64 { self.secs }\n+    #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    pub fn as_secs(&self) -> u64 { self.secs }\n \n     /// Returns the nanosecond precision represented by this duration.\n     ///\n     /// This method does **not** return the length of the duration when\n     /// represented by nanoseconds. The returned number always represents a\n     /// fractional portion of a second (e.g. it is less than one billion).\n-    pub fn extra_nanos(&self) -> u32 { self.nanos }\n+    #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    pub fn subsec_nanos(&self) -> u32 { self.nanos }\n }\n \n impl Add for Duration {\n@@ -167,20 +168,6 @@ impl Div<u32> for Duration {\n     }\n }\n \n-impl fmt::Display for Duration {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match (self.secs, self.nanos) {\n-            (s, 0) => write!(f, \"{}s\", s),\n-            (0, n) if n % NANOS_PER_MILLI == 0 => write!(f, \"{}ms\",\n-                                                         n / NANOS_PER_MILLI),\n-            (0, n) if n % 1_000 == 0 => write!(f, \"{}\u00b5s\", n / 1_000),\n-            (0, n) => write!(f, \"{}ns\", n),\n-            (s, n) => write!(f, \"{}.{}s\", s,\n-                             format!(\"{:09}\", n).trim_right_matches('0'))\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n@@ -198,20 +185,20 @@ mod tests {\n \n     #[test]\n     fn secs() {\n-        assert_eq!(Duration::new(0, 0).secs(), 0);\n-        assert_eq!(Duration::from_secs(1).secs(), 1);\n-        assert_eq!(Duration::from_millis(999).secs(), 0);\n-        assert_eq!(Duration::from_millis(1001).secs(), 1);\n+        assert_eq!(Duration::new(0, 0).as_secs(), 0);\n+        assert_eq!(Duration::from_secs(1).as_secs(), 1);\n+        assert_eq!(Duration::from_millis(999).as_secs(), 0);\n+        assert_eq!(Duration::from_millis(1001).as_secs(), 1);\n     }\n \n     #[test]\n     fn nanos() {\n-        assert_eq!(Duration::new(0, 0).extra_nanos(), 0);\n-        assert_eq!(Duration::new(0, 5).extra_nanos(), 5);\n-        assert_eq!(Duration::new(0, 1_000_000_001).extra_nanos(), 1);\n-        assert_eq!(Duration::from_secs(1).extra_nanos(), 0);\n-        assert_eq!(Duration::from_millis(999).extra_nanos(), 999 * 1_000_000);\n-        assert_eq!(Duration::from_millis(1001).extra_nanos(), 1 * 1_000_000);\n+        assert_eq!(Duration::new(0, 0).subsec_nanos(), 0);\n+        assert_eq!(Duration::new(0, 5).subsec_nanos(), 5);\n+        assert_eq!(Duration::new(0, 1_000_000_001).subsec_nanos(), 1);\n+        assert_eq!(Duration::from_secs(1).subsec_nanos(), 0);\n+        assert_eq!(Duration::from_millis(999).subsec_nanos(), 999 * 1_000_000);\n+        assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1 * 1_000_000);\n     }\n \n     #[test]\n@@ -258,18 +245,4 @@ mod tests {\n         assert_eq!(Duration::new(99, 999_999_000) / 100,\n                    Duration::new(0, 999_999_990));\n     }\n-\n-    #[test]\n-    fn display() {\n-        assert_eq!(Duration::new(0, 2).to_string(), \"2ns\");\n-        assert_eq!(Duration::new(0, 2_000_000).to_string(), \"2ms\");\n-        assert_eq!(Duration::new(2, 0).to_string(), \"2s\");\n-        assert_eq!(Duration::new(2, 2).to_string(), \"2.000000002s\");\n-        assert_eq!(Duration::new(2, 2_000_000).to_string(),\n-                   \"2.002s\");\n-        assert_eq!(Duration::new(0, 2_000_002).to_string(),\n-                   \"2000002ns\");\n-        assert_eq!(Duration::new(2, 2_000_002).to_string(),\n-                   \"2.002000002s\");\n-    }\n }"}, {"sha": "29df882a0422cdca99473a4a3995581c6c6c90c0", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -10,7 +10,7 @@\n \n //! Temporal quantification.\n \n-#![unstable(feature = \"time\")]\n+#![stable(feature = \"time\", since = \"1.3.0\")]\n \n pub use self::duration::Duration;\n "}, {"sha": "a7fb88215b7dc356bda95b1b448fb8c4e3d19899", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -36,7 +36,6 @@\n \n #![feature(asm)]\n #![feature(box_syntax)]\n-#![feature(duration)]\n #![feature(duration_span)]\n #![feature(fnbox)]\n #![feature(iter_cmp)]\n@@ -1105,7 +1104,7 @@ impl Bencher {\n     }\n \n     pub fn ns_elapsed(&mut self) -> u64 {\n-        self.dur.secs() * 1_000_000_000 + (self.dur.extra_nanos() as u64)\n+        self.dur.as_secs() * 1_000_000_000 + (self.dur.subsec_nanos() as u64)\n     }\n \n     pub fn ns_per_iter(&mut self) -> u64 {"}, {"sha": "ebb8036bacf1b18c5b8c1efefcd87bccf2d2761e", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -16,7 +16,7 @@ use std::__rand::{Rng, thread_rng};\n use std::time::Duration;\n \n fn timed<F>(label: &str, f: F) where F: FnMut() {\n-    println!(\"  {}: {}\", label, Duration::span(f));\n+    println!(\"  {}: {:?}\", label, Duration::span(f));\n }\n \n trait MutableMap {"}, {"sha": "f4ee020d6e752892ca8516cc80c0b0298c86c531", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -153,7 +153,7 @@ fn write_header(header: &str) {\n }\n \n fn write_row(label: &str, value: Duration) {\n-    println!(\"{:30} {} s\\n\", label, value);\n+    println!(\"{:30} {:?} s\\n\", label, value);\n }\n \n fn write_results(label: &str, results: &Results) {"}, {"sha": "26fb3630487f26d1e5c3d7c90702d0626e4fc523", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -51,7 +51,7 @@ fn maybe_run_test<F>(argv: &[String], name: String, test: F) where F: FnOnce() {\n \n     let dur = Duration::span(test);\n \n-    println!(\"{}:\\t\\t{}\", name, dur);\n+    println!(\"{}:\\t\\t{:?}\", name, dur);\n }\n \n fn shift_push() {"}, {"sha": "b210f5ac26ae0ea97b79e8f14dbb189d0b42d55c", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -88,8 +88,8 @@ fn run(args: &[String]) {\n     });\n     let result = result.unwrap();\n     print!(\"Count is {}\\n\", result);\n-    print!(\"Test took {}\\n\", dur);\n-    let thruput = ((size / workers * workers) as f64) / (dur.secs() as f64);\n+    print!(\"Test took {:?}\\n\", dur);\n+    let thruput = ((size / workers * workers) as f64) / (dur.as_secs() as f64);\n     print!(\"Throughput={} per sec\\n\", thruput);\n     assert_eq!(result, num_bytes * size);\n }"}, {"sha": "056905f1ef691b24e44e32f691ff55792baf5f3a", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -95,8 +95,8 @@ fn run(args: &[String]) {\n     });\n     let result = result.unwrap();\n     print!(\"Count is {}\\n\", result);\n-    print!(\"Test took {}\\n\", dur);\n-    let thruput = ((size / workers * workers) as f64) / (dur.secs() as f64);\n+    print!(\"Test took {:?}\\n\", dur);\n+    let thruput = ((size / workers * workers) as f64) / (dur.as_secs() as f64);\n     print!(\"Throughput={} per sec\\n\", thruput);\n     assert_eq!(result, num_bytes * size);\n }"}, {"sha": "b7f9dc94a0bc068d27ec1714cb1ec594f683c7a7", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -107,9 +107,9 @@ fn main() {\n \n     // all done, report stats.\n     let num_msgs = num_tasks * msg_per_task;\n-    let rate = (num_msgs as f64) / (dur.secs() as f64);\n+    let rate = (num_msgs as f64) / (dur.as_secs() as f64);\n \n-    println!(\"Sent {} messages in {}\", num_msgs, dur);\n+    println!(\"Sent {} messages in {:?}\", num_msgs, dur);\n     println!(\"  {} messages / second\", rate);\n     println!(\"  {} \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "b7553dc7c7043141ba6f514f70adfbfeb89072c7", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -114,7 +114,7 @@ fn main() {\n                 let dur = Duration::span(|| fibn = Some(fib(n)));\n                 let fibn = fibn.unwrap();\n \n-                println!(\"{}\\t{}\\t{}\", n, fibn, dur);\n+                println!(\"{}\\t{}\\t{:?}\", n, fibn, dur);\n             }\n         }\n     }"}, {"sha": "64f2381d1c35d2a4ff9fcdde0b87be63ff94e536", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -54,8 +54,8 @@ fn main() {\n \n     let maxf = max as f64;\n \n-    println!(\"insert(): {} seconds\\n\", checkf);\n-    println!(\"        : {} op/s\\n\", maxf / checkf.secs() as f64);\n-    println!(\"get()   : {} seconds\\n\", appendf);\n-    println!(\"        : {} op/s\\n\", maxf / appendf.secs() as f64);\n+    println!(\"insert(): {:?} seconds\\n\", checkf);\n+    println!(\"        : {} op/s\\n\", maxf / checkf.as_secs() as f64);\n+    println!(\"get()   : {:?} seconds\\n\", appendf);\n+    println!(\"        : {} op/s\\n\", maxf / appendf.as_secs() as f64);\n }"}, {"sha": "5f34d0f630149529a6ec2dc5b9697fbcc391345a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999bdeca88a06938ac1e1c608091d3afe4d7e173/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=999bdeca88a06938ac1e1c608091d3afe4d7e173", "patch": "@@ -36,7 +36,7 @@ fn run(repeat: isize, depth: isize) {\n                 recurse_or_panic(depth, None)\n             }).join();\n         });\n-        println!(\"iter: {}\", dur);\n+        println!(\"iter: {:?}\", dur);\n     }\n }\n "}]}