{"sha": "89075335360068d782806bde7297732481f4d113", "node_id": "C_kwDOAAsO6NoAKDg5MDc1MzM1MzYwMDY4ZDc4MjgwNmJkZTcyOTc3MzI0ODFmNGQxMTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-02T06:37:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-02T06:59:43Z"}, "message": "Highlight defs in highlight related", "tree": {"sha": "bbe32d7ee8e5bce9ab78ab976e38a45a6c0abf73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe32d7ee8e5bce9ab78ab976e38a45a6c0abf73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89075335360068d782806bde7297732481f4d113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89075335360068d782806bde7297732481f4d113", "html_url": "https://github.com/rust-lang/rust/commit/89075335360068d782806bde7297732481f4d113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89075335360068d782806bde7297732481f4d113/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "html_url": "https://github.com/rust-lang/rust/commit/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "b832e269307136fdb7f06d95dc0a9c59b1bc97d9", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/89075335360068d782806bde7297732481f4d113/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89075335360068d782806bde7297732481f4d113/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=89075335360068d782806bde7297732481f4d113", "patch": "@@ -200,9 +200,16 @@ fn highlight_exit_points(\n ) -> Option<Vec<HighlightedRange>> {\n     fn hl(\n         sema: &Semantics<'_, RootDatabase>,\n+        def_ranges: [Option<TextRange>; 2],\n         body: Option<ast::Expr>,\n     ) -> Option<Vec<HighlightedRange>> {\n         let mut highlights = Vec::new();\n+        highlights.extend(\n+            def_ranges\n+                .into_iter()\n+                .flatten()\n+                .map(|range| HighlightedRange { category: None, range }),\n+        );\n         let body = body?;\n         walk_expr(&body, &mut |expr| match expr {\n             ast::Expr::ReturnExpr(expr) => {\n@@ -246,10 +253,21 @@ fn highlight_exit_points(\n     for anc in token.parent_ancestors() {\n         return match_ast! {\n             match anc {\n-                ast::Fn(fn_) => hl(sema, fn_.body().map(ast::Expr::BlockExpr)),\n-                ast::ClosureExpr(closure) => hl(sema, closure.body()),\n+                ast::Fn(fn_) => hl(sema, [fn_.fn_token().map(|it| it.text_range()), None], fn_.body().map(ast::Expr::BlockExpr)),\n+                ast::ClosureExpr(closure) => hl(\n+                    sema,\n+                    closure.param_list().map_or([None; 2], |p| [p.l_paren_token().map(|it| it.text_range()), p.r_paren_token().map(|it| it.text_range())]),\n+                    closure.body()\n+                ),\n                 ast::BlockExpr(block_expr) => if matches!(block_expr.modifier(), Some(ast::BlockModifier::Async(_) | ast::BlockModifier::Try(_)| ast::BlockModifier::Const(_))) {\n-                    hl(sema, Some(block_expr.into()))\n+                    hl(\n+                        sema,\n+                        [block_expr.modifier().and_then(|modifier| match modifier {\n+                            ast::BlockModifier::Async(t) | ast::BlockModifier::Try(t) | ast::BlockModifier::Const(t) => Some(t.text_range()),\n+                            _ => None,\n+                        }), None],\n+                        Some(block_expr.into())\n+                    )\n                 } else {\n                     continue;\n                 },\n@@ -663,7 +681,8 @@ async fn foo() {\n     fn test_hl_exit_points() {\n         check(\n             r#\"\n-fn foo() -> u32 {\n+  fn foo() -> u32 {\n+//^^\n     if true {\n         return$0 0;\n      // ^^^^^^\n@@ -682,7 +701,8 @@ fn foo() -> u32 {\n     fn test_hl_exit_points2() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     if true {\n         return 0;\n      // ^^^^^^\n@@ -701,7 +721,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_exit_points3() {\n         check(\n             r#\"\n-fn$0 foo() -> u32 {\n+  fn$0 foo() -> u32 {\n+//^^\n     if true {\n         return 0;\n      // ^^^^^^\n@@ -747,7 +768,8 @@ macro_rules! never {\n     () => { never() }\n }\n fn never() -> ! { loop {} }\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     never();\n  // ^^^^^^^\n     never!();\n@@ -767,7 +789,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_inner_tail_exit_points() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     if true {\n         unsafe {\n             return 5;\n@@ -808,7 +831,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_inner_tail_exit_points_labeled_block() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     'foo: {\n         break 'foo 0;\n      // ^^^^^\n@@ -829,7 +853,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_inner_tail_exit_points_loops() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     'foo: while { return 0; true } {\n                // ^^^^^^\n         break 'foo 0;\n@@ -1240,7 +1265,8 @@ fn foo() -> i32 {\n \n         check_with_config(\n             r#\"\n-fn foo() ->$0 i32 {\n+  fn foo() ->$0 i32 {\n+//^^\n     let x = 5;\n     let y = x * 2;\n "}]}