{"sha": "b5f5bdce87b0314a311e56ff30c25806f4c89500", "node_id": "C_kwDOAAsO6NoAKGI1ZjViZGNlODdiMDMxNGEzMTFlNTZmZjMwYzI1ODA2ZjRjODk1MDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-11T17:17:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T17:17:03Z"}, "message": "Rollup merge of #100351 - compiler-errors:diagnostic-convention, r=fee1-dead\n\nUse `&mut Diagnostic` instead of `&mut DiagnosticBuilder` unless needed\n\nThis seems to be the established convention (02ff9e0) when `DiagnosticBuilder` was first added. I am guilty of introducing some of these.", "tree": {"sha": "8bcb07bf568ae0346e90c1f6ee4795179e279506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bcb07bf568ae0346e90c1f6ee4795179e279506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f5bdce87b0314a311e56ff30c25806f4c89500", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9TmPCRBK7hj4Ov3rIwAAzucIAEZhcdmf0HG0eYqmtX9j7RPJ\nQhDGG9EkolnUYjw/zxHjsZ43/vAj7B7G6GHCYhxBSNzY9hBO/VWiKfjawtqXzCQq\nZlmAcuuPTglfxZtCwFebe+8XV22puGkZhMDju55Z4qN/xQl8gblSrnPSe1CT9tu/\n7zedWebRJ9gDJe5VSXh7RQhIxWtKF5nPgjUNejU6ODdyE6nkM/bTXcYPlk4mlqZ7\nadvVYj6dQipaP/USSGVSD1x2JfwJJYKeZ3gv1YzmObQw2pNN2Pe7Kx2ZTyL7Xz01\nhEgubIEfvvkFOAsIDFmTZB0anVqK51fVlKWXxqfQykCWn5W7AU6ipf8cL0H4qNE=\n=a7s8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bcb07bf568ae0346e90c1f6ee4795179e279506\nparent a5b0f72e714f5c51a4d403df231ae0010256c7b4\nparent a2b6744af03e315587626e9faa34bfaf3b913012\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660238223 +0530\ncommitter GitHub <noreply@github.com> 1660238223 +0530\n\nRollup merge of #100351 - compiler-errors:diagnostic-convention, r=fee1-dead\n\nUse `&mut Diagnostic` instead of `&mut DiagnosticBuilder` unless needed\n\nThis seems to be the established convention (02ff9e0) when `DiagnosticBuilder` was first added. I am guilty of introducing some of these.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f5bdce87b0314a311e56ff30c25806f4c89500", "html_url": "https://github.com/rust-lang/rust/commit/b5f5bdce87b0314a311e56ff30c25806f4c89500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f5bdce87b0314a311e56ff30c25806f4c89500/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b0f72e714f5c51a4d403df231ae0010256c7b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b0f72e714f5c51a4d403df231ae0010256c7b4", "html_url": "https://github.com/rust-lang/rust/commit/a5b0f72e714f5c51a4d403df231ae0010256c7b4"}, {"sha": "a2b6744af03e315587626e9faa34bfaf3b913012", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b6744af03e315587626e9faa34bfaf3b913012", "html_url": "https://github.com/rust-lang/rust/commit/a2b6744af03e315587626e9faa34bfaf3b913012"}], "stats": {"total": 96, "additions": 37, "deletions": 59}, "files": [{"sha": "d94f8a9af884bc1e09bad0d212da7df6b8907269", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -13,9 +13,7 @@ use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{\n-    error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n-};\n+use rustc_errors::{error_code, pluralize, struct_span_err, Applicability, Diagnostic};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -477,7 +475,7 @@ impl<'a> AstValidator<'a> {\n         ctx: &str,\n         msg: &str,\n         sugg: &str,\n-        help: impl FnOnce(&mut DiagnosticBuilder<'_, ErrorGuaranteed>),\n+        help: impl FnOnce(&mut Diagnostic),\n     ) {\n         let source_map = self.session.source_map();\n         let end = source_map.end_point(sp);\n@@ -1196,7 +1194,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     let msg = \"free function without a body\";\n                     let ext = sig.header.ext;\n \n-                    let f = |e: &mut DiagnosticBuilder<'_, _>| {\n+                    let f = |e: &mut Diagnostic| {\n                         if let Extern::Implicit(start_span) | Extern::Explicit(_, start_span) = &ext\n                         {\n                             let start_suggestion = if let Extern::Explicit(abi, _) = ext {"}, {"sha": "84a0d4ba7ba10b67fea7fe8f95cc21270bb20a33", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -451,7 +451,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     fn suggest_borrow_fn_like(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         ty: Ty<'tcx>,\n         move_sites: &[MoveSite],\n         value_name: &str,\n@@ -526,12 +526,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         true\n     }\n \n-    fn suggest_adding_copy_bounds(\n-        &self,\n-        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n-        ty: Ty<'tcx>,\n-        span: Span,\n-    ) {\n+    fn suggest_adding_copy_bounds(&self, err: &mut Diagnostic, ty: Ty<'tcx>, span: Span) {\n         let tcx = self.infcx.tcx;\n         let generics = tcx.generics_of(self.mir_def_id());\n "}, {"sha": "bd3a2a3d69496c84728ea5ef189cda004a49994d", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -783,7 +783,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     fn maybe_suggest_constrain_dyn_trait_impl(\n         &self,\n-        diag: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+        diag: &mut Diagnostic,\n         f: Region<'tcx>,\n         o: Region<'tcx>,\n         category: &ConstraintCategory<'tcx>,"}, {"sha": "e009e4f7c68d09388b4e9c26388fdae6755528fd", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_feature::Features;\n use rustc_lint_defs::builtin::{\n     RUST_2021_INCOMPATIBLE_OR_PATTERNS, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n@@ -608,11 +608,7 @@ enum ExplainDocComment {\n     },\n }\n \n-fn annotate_doc_comment(\n-    err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n-    sm: &SourceMap,\n-    span: Span,\n-) {\n+fn annotate_doc_comment(err: &mut Diagnostic, sm: &SourceMap, span: Span) {\n     if let Ok(src) = sm.span_to_snippet(span) {\n         if src.starts_with(\"///\") || src.starts_with(\"/**\") {\n             err.subdiagnostic(ExplainDocComment::Outer { span });"}, {"sha": "f4c6b33a529243872292cfc1cfe15575b602db4e", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, ErrorGuaranteed};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n@@ -228,13 +228,13 @@ struct MultiSugg {\n }\n \n impl MultiSugg {\n-    fn emit<G: EmissionGuarantee>(self, err: &mut DiagnosticBuilder<'_, G>) {\n+    fn emit(self, err: &mut Diagnostic) {\n         err.multipart_suggestion(&self.msg, self.patches, self.applicability);\n     }\n \n     /// Overrides individual messages and applicabilities.\n-    fn emit_many<G: EmissionGuarantee>(\n-        err: &mut DiagnosticBuilder<'_, G>,\n+    fn emit_many(\n+        err: &mut Diagnostic,\n         msg: &str,\n         applicability: Applicability,\n         suggestions: impl Iterator<Item = Self>,"}, {"sha": "2880ef78c8d276b278057052904696ef131bd809", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -859,7 +859,7 @@ impl<'a> Parser<'a> {\n             );\n             let mut err = self.struct_span_err(span, &msg);\n \n-            let suggest_parens = |err: &mut DiagnosticBuilder<'_, _>| {\n+            let suggest_parens = |err: &mut Diagnostic| {\n                 let suggestions = vec![\n                     (span.shrink_to_lo(), \"(\".to_string()),\n                     (span.shrink_to_hi(), \")\".to_string()),"}, {"sha": "cb133841bca5a2ac7c9ce97cc322fb280dd34615", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -2021,9 +2021,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn suggest_introducing_lifetime(\n         &self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         name: Option<&str>,\n-        suggest: impl Fn(&mut DiagnosticBuilder<'_, ErrorGuaranteed>, bool, Span, &str, String) -> bool,\n+        suggest: impl Fn(&mut Diagnostic, bool, Span, &str, String) -> bool,\n     ) {\n         let mut suggest_note = true;\n         for rib in self.lifetime_ribs.iter().rev() {\n@@ -2149,7 +2149,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     pub(crate) fn add_missing_lifetime_specifiers_label(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         lifetime_refs: Vec<MissingLifetime>,\n         function_param_lifetimes: Option<(Vec<MissingLifetime>, Vec<ElisionFnParameter>)>,\n     ) {"}, {"sha": "758f1ef97664f1d4c6572e837342907561829fcd", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -16,7 +16,8 @@ use crate::require_c_abi_if_c_variadic;\n use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n-    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError, MultiSpan,\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n+    MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n@@ -2106,7 +2107,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub fn prohibit_generics<'a>(\n         &self,\n         segments: impl Iterator<Item = &'a hir::PathSegment<'a>> + Clone,\n-        extend: impl Fn(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n+        extend: impl Fn(&mut Diagnostic),\n     ) -> bool {\n         let args = segments.clone().flat_map(|segment| segment.args().args);\n \n@@ -2984,11 +2985,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     }\n \n     /// Make sure that we are in the condition to suggest the blanket implementation.\n-    fn maybe_lint_blanket_trait_impl<T: rustc_errors::EmissionGuarantee>(\n-        &self,\n-        self_ty: &hir::Ty<'_>,\n-        diag: &mut DiagnosticBuilder<'_, T>,\n-    ) {\n+    fn maybe_lint_blanket_trait_impl(&self, self_ty: &hir::Ty<'_>, diag: &mut Diagnostic) {\n         let tcx = self.tcx();\n         let parent_id = tcx.hir().get_parent_item(self_ty.hir_id);\n         if let hir::Node::Item(hir::Item {\n@@ -3081,7 +3078,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             sugg,\n                             Applicability::MachineApplicable,\n                         );\n-                        self.maybe_lint_blanket_trait_impl::<()>(&self_ty, &mut diag);\n+                        self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n                         diag.emit();\n                     },\n                 );"}, {"sha": "5cdb2acd9f3c5b24cf91b65549dafd2f5d527ee7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -1525,9 +1525,7 @@ fn detect_discriminant_duplicate<'tcx>(\n ) {\n     // Helper closure to reduce duplicate code. This gets called everytime we detect a duplicate.\n     // Here `idx` refers to the order of which the discriminant appears, and its index in `vs`\n-    let report = |dis: Discr<'tcx>,\n-                  idx: usize,\n-                  err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>| {\n+    let report = |dis: Discr<'tcx>, idx: usize, err: &mut Diagnostic| {\n         let var = &vs[idx]; // HIR for the duplicate discriminant\n         let (span, display_discr) = match var.disr_expr {\n             Some(ref expr) => {"}, {"sha": "6c6bbfa22e30cab47a4cf5e52b86efb9aeca1df2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -1585,9 +1585,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             }\n         }\n     }\n-    fn note_unreachable_loop_return<'a>(\n+    fn note_unreachable_loop_return(\n         &self,\n-        err: &mut DiagnosticBuilder<'a, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'tcx>,\n         ret_exprs: &Vec<&'tcx hir::Expr<'tcx>>,\n     ) {"}, {"sha": "6a6c03a8cba836dfaabfad107b95d7a88e80fea8", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    EmissionGuarantee, ErrorGuaranteed,\n+    ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -879,7 +879,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         lhs: &'tcx hir::Expr<'tcx>,\n         err_code: &'static str,\n         op_span: Span,\n-        adjust_err: impl FnOnce(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n+        adjust_err: impl FnOnce(&mut Diagnostic),\n     ) {\n         if lhs.is_syntactic_place_expr() {\n             return;\n@@ -1089,8 +1089,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n \n-        let suggest_deref_binop = |err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n-                                   rhs_ty: Ty<'tcx>| {\n+        let suggest_deref_binop = |err: &mut Diagnostic, rhs_ty: Ty<'tcx>| {\n             if let Some(lhs_deref_ty) = self.deref_once_mutably_for_diagnostic(lhs_ty) {\n                 // Can only assign if the type is sized, so if `DerefMut` yields a type that is\n                 // unsized, do not suggest dereferencing it.\n@@ -2205,9 +2204,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx().ty_error()\n     }\n \n-    fn check_call_constructor<G: EmissionGuarantee>(\n+    fn check_call_constructor(\n         &self,\n-        err: &mut DiagnosticBuilder<'_, G>,\n+        err: &mut Diagnostic,\n         base: &'tcx hir::Expr<'tcx>,\n         def_id: DefId,\n     ) {"}, {"sha": "1d1f755947fdcde4a167d5776f08a80c8746af3c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -1778,7 +1778,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn label_fn_like(\n         &self,\n-        err: &mut rustc_errors::DiagnosticBuilder<'tcx, rustc_errors::ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         callable_def_id: Option<DefId>,\n         callee_ty: Option<Ty<'tcx>>,\n     ) {"}, {"sha": "44c7c148c7533145606e83e4275cec0f84e31b1e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -904,7 +904,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let label_span_not_found = |err: &mut DiagnosticBuilder<'_, _>| {\n+                let label_span_not_found = |err: &mut Diagnostic| {\n                     if unsatisfied_predicates.is_empty() {\n                         err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n                         let is_string_or_ref_str = match actual.kind() {\n@@ -1154,7 +1154,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rcvr_ty: Ty<'tcx>,\n         expr: &hir::Expr<'_>,\n         item_name: Ident,\n-        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n     ) -> bool {\n         let tcx = self.tcx;\n         let field_receiver = self.autoderef(span, rcvr_ty).find_map(|(ty, _)| match ty.kind() {\n@@ -1331,7 +1331,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn check_for_field_method(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: SelfSource<'tcx>,\n         span: Span,\n         actual: Ty<'tcx>,\n@@ -1380,7 +1380,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn check_for_unwrap_self(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: SelfSource<'tcx>,\n         span: Span,\n         actual: Ty<'tcx>,"}, {"sha": "1b50209ee64ccdc1443e5d538760b5ba471957ce", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -104,7 +104,7 @@ use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, DiagnosticBuilder, EmissionGuarantee, MultiSpan,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -973,12 +973,7 @@ fn has_expected_num_generic_args<'tcx>(\n /// * `span` - The span of the snippet\n /// * `params` - The number of parameters the constructor accepts\n /// * `err` - A mutable diagnostic builder to add the suggestion to\n-fn suggest_call_constructor<G: EmissionGuarantee>(\n-    span: Span,\n-    kind: CtorOf,\n-    params: usize,\n-    err: &mut DiagnosticBuilder<'_, G>,\n-) {\n+fn suggest_call_constructor(span: Span, kind: CtorOf, params: usize, err: &mut Diagnostic) {\n     // Note: tuple-structs don't have named fields, so just use placeholders\n     let args = vec![\"_\"; params].join(\", \");\n     let applicable = if params > 0 {"}, {"sha": "eb0c51bb2f9795052a3c7eac68668edeed476e31", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f5bdce87b0314a311e56ff30c25806f4c89500/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=b5f5bdce87b0314a311e56ff30c25806f4c89500", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     // Suppress this error, since we already emitted\n                     // a deref suggestion in check_overloaded_binop\n-                    err.delay_as_bug();\n+                    err.downgrade_to_delayed_bug();\n                 }\n             }\n         });"}]}