{"sha": "2b790944a010498dd25a3bb327f2560927442c69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNzkwOTQ0YTAxMDQ5OGRkMjVhM2JiMzI3ZjI1NjA5Mjc0NDJjNjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-25T19:18:02Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-26T09:15:20Z"}, "message": "Add support for tuple struct fields documentation in enums as well", "tree": {"sha": "8942184562fbaa8de2322ad66bba331efe654b56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8942184562fbaa8de2322ad66bba331efe654b56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b790944a010498dd25a3bb327f2560927442c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b790944a010498dd25a3bb327f2560927442c69", "html_url": "https://github.com/rust-lang/rust/commit/2b790944a010498dd25a3bb327f2560927442c69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b790944a010498dd25a3bb327f2560927442c69/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f30b72b30c7745d3ed126ebeaf3fe3d253677f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f30b72b30c7745d3ed126ebeaf3fe3d253677f", "html_url": "https://github.com/rust-lang/rust/commit/19f30b72b30c7745d3ed126ebeaf3fe3d253677f"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "a5ad8dfeb6b96560e855cb08514f006fe61a9241", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b790944a010498dd25a3bb327f2560927442c69/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b790944a010498dd25a3bb327f2560927442c69/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2b790944a010498dd25a3bb327f2560927442c69", "patch": "@@ -1730,9 +1730,7 @@ impl Clean<Variant> for hir::VariantData<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Variant {\n         match self {\n             hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n-            hir::VariantData::Tuple(..) => {\n-                Variant::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n-            }\n+            hir::VariantData::Tuple(..) => Variant::Struct(self.clean(cx)),\n             hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }"}, {"sha": "ea1cc8eb2ad52547173703b526562b88d5774d15", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b790944a010498dd25a3bb327f2560927442c69/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b790944a010498dd25a3bb327f2560927442c69/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2b790944a010498dd25a3bb327f2560927442c69", "patch": "@@ -1037,8 +1037,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n                 write!(\n                     w,\n-                    \"<h3>Fields of <b>{name}</b></h3><div>\",\n-                    name = variant.name.as_ref().unwrap()\n+                    \"<h3>{extra}Fields of <b>{name}</b></h3><div>\",\n+                    extra = if s.struct_type == CtorKind::Fn { \"Tuple \" } else { \"\" },\n+                    name = variant.name.as_ref().unwrap(),\n                 );\n                 for field in &s.fields {\n                     use crate::clean::StructFieldItem;\n@@ -1509,7 +1510,10 @@ fn render_struct(\n             if let Some(g) = g {\n                 write!(w, \"{}\", print_where_clause(g, cx, 0, false),)\n             }\n-            w.write_str(\";\");\n+            // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n+            if structhead {\n+                w.write_str(\";\");\n+            }\n         }\n         CtorKind::Const => {\n             // Needed for PhantomData."}]}