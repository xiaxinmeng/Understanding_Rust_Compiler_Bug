{"sha": "07f43a1ca179c624996b1095a314566733d2e017", "node_id": "C_kwDOAAsO6NoAKDA3ZjQzYTFjYTE3OWM2MjQ5OTZiMTA5NWEzMTQ1NjY3MzNkMmUwMTc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-02T09:34:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-02T09:34:45Z"}, "message": "Rollup merge of #97739 - a2aaron:let_underscore, r=estebank\n\nUplift the `let_underscore` lints from clippy into rustc.\n\nThis PR resolves #97241.\n\nThis PR adds three lints from clippy--`let_underscore_drop`, `let_underscore_lock`, and `let_underscore_must_use`, which are meant to capture likely-incorrect uses of `let _ = ...` bindings (in particular, doing this on a type with a non-trivial `Drop` causes the `Drop` to occur immediately, instead of at the end of the scope. For a type like `MutexGuard`, this effectively releases the lock immediately, which is almost certainly the wrong behavior)\n\nIn porting the lints from clippy I had to copy over a bunch of utility functions from `clippy_util` that these lints also relied upon. Is that the right approach?\n\nNote that I've set the `must_use` and `drop` lints to Allow by default and set `lock` to Deny by default (this matches the same settings that clippy has). In talking with `@estebank` he informed me to do a Crater run (I am not sure what type of Crater run to request here--I think it's just \"check only\"?)\n\nOn the linked issue, there's some discussion about using `must_use` and `Drop` together as a heuristic for when to warn--I did not implement this yet.\n\nr? `@estebank`", "tree": {"sha": "8503e296c06dd2639fde5e86e3146adbbda2ee5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8503e296c06dd2639fde5e86e3146adbbda2ee5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07f43a1ca179c624996b1095a314566733d2e017", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEc41CRBK7hj4Ov3rIwAAc1IIAGK6pdaOy5H6UXdL2EHGf0q6\nhHn6upWUSc3304TZ9C5gm9zxtNu4LBd6my/0njt1+oJ/oWL09bCjrCQJp3WMhnwP\nweUu09xKICNp9zDDJkywrPZBEudbA/ptlm6/KzOS8fO605KGPH5xA4sV1Qs0FTLE\neew4hHsBLB5MgJspYIt4XS+0nAwUf3zzkLBcbP7EFOFuEq+6Z8lU5q6QrjXD+bjO\nBPnhjYWh6A07+JY9SSEVzQsHWa08ZbjY2YA3RI28K4SssYSu3bhhv4SblvqONkNs\npVMurTS3UCS4jfo19xlwZYp1mZh9S6bxmfH1SGy01QhNgngODOPl0aHvUyN+r4Y=\n=ri92\n-----END PGP SIGNATURE-----\n", "payload": "tree 8503e296c06dd2639fde5e86e3146adbbda2ee5d\nparent b10aed0084e3fb32b365dba06a1b644c3b0f438b\nparent 76c90c3015a7e3ad6f0e6b807839ff59f17eba89\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1662111285 +0200\ncommitter GitHub <noreply@github.com> 1662111285 +0200\n\nRollup merge of #97739 - a2aaron:let_underscore, r=estebank\n\nUplift the `let_underscore` lints from clippy into rustc.\n\nThis PR resolves #97241.\n\nThis PR adds three lints from clippy--`let_underscore_drop`, `let_underscore_lock`, and `let_underscore_must_use`, which are meant to capture likely-incorrect uses of `let _ = ...` bindings (in particular, doing this on a type with a non-trivial `Drop` causes the `Drop` to occur immediately, instead of at the end of the scope. For a type like `MutexGuard`, this effectively releases the lock immediately, which is almost certainly the wrong behavior)\n\nIn porting the lints from clippy I had to copy over a bunch of utility functions from `clippy_util` that these lints also relied upon. Is that the right approach?\n\nNote that I've set the `must_use` and `drop` lints to Allow by default and set `lock` to Deny by default (this matches the same settings that clippy has). In talking with `@estebank` he informed me to do a Crater run (I am not sure what type of Crater run to request here--I think it's just \"check only\"?)\n\nOn the linked issue, there's some discussion about using `must_use` and `Drop` together as a heuristic for when to warn--I did not implement this yet.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07f43a1ca179c624996b1095a314566733d2e017", "html_url": "https://github.com/rust-lang/rust/commit/07f43a1ca179c624996b1095a314566733d2e017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07f43a1ca179c624996b1095a314566733d2e017/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b10aed0084e3fb32b365dba06a1b644c3b0f438b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10aed0084e3fb32b365dba06a1b644c3b0f438b", "html_url": "https://github.com/rust-lang/rust/commit/b10aed0084e3fb32b365dba06a1b644c3b0f438b"}, {"sha": "76c90c3015a7e3ad6f0e6b807839ff59f17eba89", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c90c3015a7e3ad6f0e6b807839ff59f17eba89", "html_url": "https://github.com/rust-lang/rust/commit/76c90c3015a7e3ad6f0e6b807839ff59f17eba89"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "7e885e6c51aad42261b5da1eeb11ee618712875c", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -0,0 +1,175 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_errors::{Applicability, LintDiagnosticBuilder, MultiSpan};\n+use rustc_hir as hir;\n+use rustc_middle::ty;\n+use rustc_span::Symbol;\n+\n+declare_lint! {\n+    /// The `let_underscore_drop` lint checks for statements which don't bind\n+    /// an expression which has a non-trivial Drop implementation to anything,\n+    /// causing the expression to be dropped immediately instead of at end of\n+    /// scope.\n+    ///\n+    /// ### Example\n+    /// ```\n+    /// struct SomeStruct;\n+    /// impl Drop for SomeStruct {\n+    ///     fn drop(&mut self) {\n+    ///         println!(\"Dropping SomeStruct\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///    #[warn(let_underscore_drop)]\n+    ///     // SomeStuct is dropped immediately instead of at end of scope,\n+    ///     // so \"Dropping SomeStruct\" is printed before \"end of main\".\n+    ///     // The order of prints would be reversed if SomeStruct was bound to\n+    ///     // a name (such as \"_foo\").\n+    ///     let _ = SomeStruct;\n+    ///     println!(\"end of main\");\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Statements which assign an expression to an underscore causes the\n+    /// expression to immediately drop instead of extending the expression's\n+    /// lifetime to the end of the scope. This is usually unintended,\n+    /// especially for types like `MutexGuard`, which are typically used to\n+    /// lock a mutex for the duration of an entire scope.\n+    ///\n+    /// If you want to extend the expression's lifetime to the end of the scope,\n+    /// assign an underscore-prefixed name (such as `_foo`) to the expression.\n+    /// If you do actually want to drop the expression immediately, then\n+    /// calling `std::mem::drop` on the expression is clearer and helps convey\n+    /// intent.\n+    pub LET_UNDERSCORE_DROP,\n+    Allow,\n+    \"non-binding let on a type that implements `Drop`\"\n+}\n+\n+declare_lint! {\n+    /// The `let_underscore_lock` lint checks for statements which don't bind\n+    /// a mutex to anything, causing the lock to be released immediately instead\n+    /// of at end of scope, which is typically incorrect.\n+    ///\n+    /// ### Example\n+    /// ```compile_fail\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    /// let data = Arc::new(Mutex::new(0));\n+    ///\n+    /// thread::spawn(move || {\n+    ///     // The lock is immediately released instead of at the end of the\n+    ///     // scope, which is probably not intended.\n+    ///     let _ = data.lock().unwrap();\n+    ///     println!(\"doing some work\");\n+    ///     let mut lock = data.lock().unwrap();\n+    ///     *lock += 1;\n+    /// });\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Statements which assign an expression to an underscore causes the\n+    /// expression to immediately drop instead of extending the expression's\n+    /// lifetime to the end of the scope. This is usually unintended,\n+    /// especially for types like `MutexGuard`, which are typically used to\n+    /// lock a mutex for the duration of an entire scope.\n+    ///\n+    /// If you want to extend the expression's lifetime to the end of the scope,\n+    /// assign an underscore-prefixed name (such as `_foo`) to the expression.\n+    /// If you do actually want to drop the expression immediately, then\n+    /// calling `std::mem::drop` on the expression is clearer and helps convey\n+    /// intent.\n+    pub LET_UNDERSCORE_LOCK,\n+    Deny,\n+    \"non-binding let on a synchronization lock\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK]);\n+\n+const SYNC_GUARD_SYMBOLS: [Symbol; 3] = [\n+    rustc_span::sym::MutexGuard,\n+    rustc_span::sym::RwLockReadGuard,\n+    rustc_span::sym::RwLockWriteGuard,\n+];\n+\n+impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n+        if !matches!(local.pat.kind, hir::PatKind::Wild) {\n+            return;\n+        }\n+        if let Some(init) = local.init {\n+            let init_ty = cx.typeck_results().expr_ty(init);\n+            // If the type has a trivial Drop implementation, then it doesn't\n+            // matter that we drop the value immediately.\n+            if !init_ty.needs_drop(cx.tcx, cx.param_env) {\n+                return;\n+            }\n+            let is_sync_lock = match init_ty.kind() {\n+                ty::Adt(adt, _) => SYNC_GUARD_SYMBOLS\n+                    .iter()\n+                    .any(|guard_symbol| cx.tcx.is_diagnostic_item(*guard_symbol, adt.did())),\n+                _ => false,\n+            };\n+\n+            if is_sync_lock {\n+                let mut span = MultiSpan::from_spans(vec![local.pat.span, init.span]);\n+                span.push_span_label(\n+                    local.pat.span,\n+                    \"this lock is not assigned to a binding and is immediately dropped\".to_string(),\n+                );\n+                span.push_span_label(\n+                    init.span,\n+                    \"this binding will immediately drop the value assigned to it\".to_string(),\n+                );\n+                cx.struct_span_lint(LET_UNDERSCORE_LOCK, span, |lint| {\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a synchronization lock\",\n+                    )\n+                })\n+            } else {\n+                cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a type that implements `Drop`\",\n+                    );\n+                })\n+            }\n+        }\n+    }\n+}\n+\n+fn build_and_emit_lint(\n+    lint: LintDiagnosticBuilder<'_, ()>,\n+    local: &hir::Local<'_>,\n+    init_span: rustc_span::Span,\n+    msg: &str,\n+) {\n+    lint.build(msg)\n+        .span_suggestion_verbose(\n+            local.pat.span,\n+            \"consider binding to an unused variable to avoid immediately dropping the value\",\n+            \"_unused\",\n+            Applicability::MachineApplicable,\n+        )\n+        .multipart_suggestion(\n+            \"consider immediately dropping the value\",\n+            vec![\n+                (local.span.until(init_span), \"drop(\".to_string()),\n+                (init_span.shrink_to_hi(), \")\".to_string()),\n+            ],\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n+}"}, {"sha": "8cbfc82c0f0b6eb8a018c41509e97c4b4597595a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -55,6 +55,7 @@ mod expect;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n+mod let_underscore;\n mod levels;\n mod methods;\n mod non_ascii_idents;\n@@ -86,6 +87,7 @@ use builtin::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use hidden_unicode_codepoints::*;\n use internal::*;\n+use let_underscore::*;\n use methods::*;\n use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n@@ -189,6 +191,7 @@ macro_rules! late_lint_mod_passes {\n                 VariantSizeDifferences: VariantSizeDifferences,\n                 BoxPointers: BoxPointers,\n                 PathStatements: PathStatements,\n+                LetUnderscore: LetUnderscore,\n                 // Depends on referenced function signatures in expressions\n                 UnusedResults: UnusedResults,\n                 NonUpperCaseGlobals: NonUpperCaseGlobals,\n@@ -315,6 +318,8 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         REDUNDANT_SEMICOLONS\n     );\n \n+    add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK);\n+\n     add_lint_group!(\n         \"rust_2018_idioms\",\n         BARE_TRAIT_OBJECTS,"}, {"sha": "7d4827520e1d8935c9dbf0eac449210e7be540d5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -223,6 +223,7 @@ symbols! {\n         LinkedList,\n         LintPass,\n         Mutex,\n+        MutexGuard,\n         N,\n         NonZeroI128,\n         NonZeroI16,\n@@ -271,6 +272,8 @@ symbols! {\n         Rust,\n         RustcDecodable,\n         RustcEncodable,\n+        RwLockReadGuard,\n+        RwLockWriteGuard,\n         Send,\n         SeqCst,\n         SessionDiagnostic,"}, {"sha": "de851c8fbbed51743776477b338dda1677fd925a", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -192,6 +192,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n                       and cause Futures to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"MutexGuard\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     lock: &'a Mutex<T>,\n     poison: poison::Guard,"}, {"sha": "9ab781561e9b1280460d858bd36d737bfe5aa7e1", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -101,6 +101,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n                       and cause Futures to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"RwLockReadGuard\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     // NB: we use a pointer instead of `&'a T` to avoid `noalias` violations, because a\n     // `Ref` argument doesn't hold immutability for its whole scope, only until it drops.\n@@ -130,6 +131,7 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n                       and cause Future's to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"RwLockWriteGuard\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,\n     poison: poison::Guard,"}, {"sha": "f298871f122d3a704a1e46b08f91f6269eae9c76", "filename": "src/test/ui/lint/let_underscore/let_underscore_drop.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![warn(let_underscore_drop)]\n+\n+struct NontrivialDrop;\n+\n+impl Drop for NontrivialDrop {\n+    fn drop(&mut self) {\n+        println!(\"Dropping!\");\n+    }\n+}\n+\n+fn main() {\n+    let _ = NontrivialDrop; //~WARNING non-binding let on a type that implements `Drop`\n+}"}, {"sha": "7b7de202e46268db4fa376fcb00913b586901207", "filename": "src/test/ui/lint/let_underscore/let_underscore_drop.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.stderr?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -0,0 +1,22 @@\n+warning: non-binding let on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:13:5\n+   |\n+LL |     let _ = NontrivialDrop;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let_underscore_drop.rs:2:9\n+   |\n+LL | #![warn(let_underscore_drop)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+help: consider binding to an unused variable to avoid immediately dropping the value\n+   |\n+LL |     let _unused = NontrivialDrop;\n+   |         ~~~~~~~\n+help: consider immediately dropping the value\n+   |\n+LL |     drop(NontrivialDrop);\n+   |     ~~~~~              +\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7423862cdf05dcb17b5cb277752b8f0a2f999377", "filename": "src/test/ui/lint/let_underscore/let_underscore_lock.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -0,0 +1,7 @@\n+// check-fail\n+use std::sync::{Arc, Mutex};\n+\n+fn main() {\n+    let data = Arc::new(Mutex::new(0));\n+    let _ = data.lock().unwrap(); //~ERROR non-binding let on a synchronization lock\n+}"}, {"sha": "fb58af0a42f81422097a8e7848caf14e3a785c3a", "filename": "src/test/ui/lint/let_underscore/let_underscore_lock.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.stderr?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -0,0 +1,20 @@\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:6:9\n+   |\n+LL |     let _ = data.lock().unwrap();\n+   |         ^   ^^^^^^^^^^^^^^^^^^^^ this binding will immediately drop the value assigned to it\n+   |         |\n+   |         this lock is not assigned to a binding and is immediately dropped\n+   |\n+   = note: `#[deny(let_underscore_lock)]` on by default\n+help: consider binding to an unused variable to avoid immediately dropping the value\n+   |\n+LL |     let _unused = data.lock().unwrap();\n+   |         ~~~~~~~\n+help: consider immediately dropping the value\n+   |\n+LL |     drop(data.lock().unwrap());\n+   |     ~~~~~                    +\n+\n+error: aborting due to previous error\n+"}, {"sha": "2a923a61b0a70b74a78127746059ff568d470386", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f43a1ca179c624996b1095a314566733d2e017/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=07f43a1ca179c624996b1095a314566733d2e017", "patch": "@@ -8,6 +8,7 @@ use std::process::Command;\n /// Descriptions of rustc lint groups.\n static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n     (\"unused\", \"Lints that detect things being declared but not used, or excess syntax\"),\n+    (\"let-underscore\", \"Lints that detect wildcard let bindings that are likely to be invalid\"),\n     (\"rustdoc\", \"Rustdoc-specific lints\"),\n     (\"rust-2018-idioms\", \"Lints to nudge you toward idiomatic features of Rust 2018\"),\n     (\"nonstandard-style\", \"Violation of standard naming conventions\"),"}]}