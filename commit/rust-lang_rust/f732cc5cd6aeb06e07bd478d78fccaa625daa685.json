{"sha": "f732cc5cd6aeb06e07bd478d78fccaa625daa685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzJjYzVjZDZhZWIwNmUwN2JkNDc4ZDc4ZmNjYWE2MjVkYWE2ODU=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-12-16T04:05:25Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-12-16T04:05:25Z"}, "message": "Remove unsafe code", "tree": {"sha": "cb41bbaca102d78c1c38f0ea3857fda0156207be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb41bbaca102d78c1c38f0ea3857fda0156207be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f732cc5cd6aeb06e07bd478d78fccaa625daa685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f732cc5cd6aeb06e07bd478d78fccaa625daa685", "html_url": "https://github.com/rust-lang/rust/commit/f732cc5cd6aeb06e07bd478d78fccaa625daa685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f732cc5cd6aeb06e07bd478d78fccaa625daa685/comments", "author": null, "committer": null, "parents": [{"sha": "64e630c28018972479394a2fbdcc9f7d8856bb91", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e630c28018972479394a2fbdcc9f7d8856bb91", "html_url": "https://github.com/rust-lang/rust/commit/64e630c28018972479394a2fbdcc9f7d8856bb91"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "9ba39f73ee884e8806576e1d8a19331d19975d49", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f732cc5cd6aeb06e07bd478d78fccaa625daa685/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f732cc5cd6aeb06e07bd478d78fccaa625daa685/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f732cc5cd6aeb06e07bd478d78fccaa625daa685", "patch": "@@ -868,8 +868,8 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n \n #[derive(Default)]\n pub struct InterningDefinedSymbol {\n-    // Maps the symbol to the constant name.\n-    symbol_map: FxHashMap<String, String>,\n+    // Maps the symbol value to the constant name.\n+    symbol_map: FxHashMap<u32, String>,\n }\n \n impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL]);\n@@ -889,10 +889,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n                     if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n                     if let Ok(value) = value.to_u32();\n                     then {\n-                        // SAFETY: We're converting the raw bytes of the symbol value back\n-                        // into a Symbol instance.\n-                        let symbol = unsafe { std::mem::transmute::<u32, Symbol>(value) };\n-                        self.symbol_map.insert(symbol.to_string(), item.ident.to_string());\n+                        self.symbol_map.insert(value, item.ident.to_string());\n                     }\n                 }\n             }\n@@ -905,7 +902,8 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n             if let ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(func).kind();\n             if match_def_path(cx, *def_id, &paths::SYMBOL_INTERN);\n             if let Some(Constant::Str(arg)) = constant_simple(cx, cx.typeck_results(), arg);\n-            if let Some(symbol_const) = self.symbol_map.get(&arg);\n+            let value = Symbol::intern(&arg).as_u32();\n+            if let Some(symbol_const) = self.symbol_map.get(&value);\n             then {\n                 span_lint_and_sugg(\n                     cx,"}]}