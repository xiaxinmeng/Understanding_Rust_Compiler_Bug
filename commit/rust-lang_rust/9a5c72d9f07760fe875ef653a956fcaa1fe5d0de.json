{"sha": "9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWM3MmQ5ZjA3NzYwZmU4NzVlZjY1M2E5NTZmY2FhMWZlNWQwZGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-09T17:34:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T17:34:18Z"}, "message": "Merge #7878\n\n7878: Remove `item_scope` field from `Body` r=jonas-schievink a=jonas-schievink\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/7632\r\n\r\nInstead of storing an `ItemScope` filled with inner items, we store the list of `BlockId`s for all block expressions that are part of a `Body`. Code can then query the `block_def_map` for those.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "ad4dd1306e31457b1c070d1c6c62f77e9beeb658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4dd1306e31457b1c070d1c6c62f77e9beeb658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR7GaCRBK7hj4Ov3rIwAAdHIIADhNv8ZAq/SQD5ghgETPZT7b\n2itEwSnearjHM2Fu9mGxJOLRM4j1RQgjhIvzdiSu794orGBTP0Zdu6N54na92zzJ\nplAIBZDPs6nF68FdjeDG2MzXIuZzf2oAWyMeSQBWrdBzKu2bxlugV4x6kOZ1Mx1g\nkpHvJ/j014AWVfj+/cJfEKWCOp3EM3Y4rAOYbas42voyNwbP50t7hF9o3c7J6wdi\nwZpdGE8iZzLpYAoXugnKBq6feLNG3NQoLBL54qyByv1VQheTL4lw0ocJ7KDaDFtK\nW17kjiuvGvn+bIDbXcdHBZ+kjkxcPwm+k8PEF93/f6lknHPSYMJVaOseAe2fRKY=\n=/iyO\n-----END PGP SIGNATURE-----\n", "payload": "tree ad4dd1306e31457b1c070d1c6c62f77e9beeb658\nparent 84eed2136b1c69d50ddf4bcf313ea3aa66ed12f4\nparent a430549aa6cb78e3a6c9258305b348743c4d7449\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615311258 +0000\ncommitter GitHub <noreply@github.com> 1615311258 +0000\n\nMerge #7878\n\n7878: Remove `item_scope` field from `Body` r=jonas-schievink a=jonas-schievink\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/7632\r\n\r\nInstead of storing an `ItemScope` filled with inner items, we store the list of `BlockId`s for all block expressions that are part of a `Body`. Code can then query the `block_def_map` for those.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "html_url": "https://github.com/rust-lang/rust/commit/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84eed2136b1c69d50ddf4bcf313ea3aa66ed12f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/84eed2136b1c69d50ddf4bcf313ea3aa66ed12f4", "html_url": "https://github.com/rust-lang/rust/commit/84eed2136b1c69d50ddf4bcf313ea3aa66ed12f4"}, {"sha": "a430549aa6cb78e3a6c9258305b348743c4d7449", "url": "https://api.github.com/repos/rust-lang/rust/commits/a430549aa6cb78e3a6c9258305b348743c4d7449", "html_url": "https://github.com/rust-lang/rust/commit/a430549aa6cb78e3a6c9258305b348743c4d7449"}], "stats": {"total": 340, "additions": 111, "deletions": 229}, "files": [{"sha": "c6d424c4870b6318e48ffe5843863da4ee3b6980", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -1157,7 +1157,7 @@ where\n {\n     match id.lookup(db.upcast()).container {\n         AssocContainerId::TraitId(_) | AssocContainerId::ImplId(_) => Some(ctor(DEF::from(id))),\n-        AssocContainerId::ContainerId(_) => None,\n+        AssocContainerId::ModuleId(_) => None,\n     }\n }\n \n@@ -1185,7 +1185,7 @@ impl AssocItem {\n         match container {\n             AssocContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n             AssocContainerId::ImplId(id) => AssocItemContainer::Impl(id.into()),\n-            AssocContainerId::ContainerId(_) => panic!(\"invalid AssocItem\"),\n+            AssocContainerId::ModuleId(_) => panic!(\"invalid AssocItem\"),\n         }\n     }\n "}, {"sha": "19c4eb521dceb8a4fb029c4918b64a00863839be", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -28,11 +28,10 @@ use crate::{\n     db::DefDatabase,\n     expr::{Expr, ExprId, Label, LabelId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n-    item_scope::ItemScope,\n     nameres::DefMap,\n     path::{ModPath, Path},\n     src::HasSource,\n-    AsMacroCall, DefWithBodyId, HasModule, LocalModuleId, Lookup, ModuleId,\n+    AsMacroCall, BlockId, DefWithBodyId, HasModule, LocalModuleId, Lookup, ModuleId,\n };\n \n /// A subset of Expander that only deals with cfg attributes. We only need it to\n@@ -226,7 +225,8 @@ pub struct Body {\n     pub params: Vec<PatId>,\n     /// The `ExprId` of the actual body expression.\n     pub body_expr: ExprId,\n-    pub item_scope: ItemScope,\n+    /// Block expressions in this body that may contain inner items.\n+    pub block_scopes: Vec<BlockId>,\n     _c: Count<Self>,\n }\n \n@@ -295,7 +295,7 @@ impl Body {\n             }\n         };\n         let expander = Expander::new(db, file_id, module);\n-        let (body, source_map) = Body::new(db, def, expander, params, body);\n+        let (body, source_map) = Body::new(db, expander, params, body);\n         (Arc::new(body), Arc::new(source_map))\n     }\n \n@@ -305,12 +305,11 @@ impl Body {\n \n     fn new(\n         db: &dyn DefDatabase,\n-        def: DefWithBodyId,\n         expander: Expander,\n         params: Option<ast::ParamList>,\n         body: Option<ast::Expr>,\n     ) -> (Body, BodySourceMap) {\n-        lower::lower(db, def, expander, params, body)\n+        lower::lower(db, expander, params, body)\n     }\n }\n "}, {"sha": "4d79ab72cd8b6998fbeeecf9c3cfda9e0e1ef6df", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 139, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -1,13 +1,13 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{any::type_name, mem, sync::Arc};\n+use std::{mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    ExpandError, HirFileId, MacroDefId, MacroDefKind,\n+    ExpandError, HirFileId,\n };\n use la_arena::Arena;\n use profile::Count;\n@@ -32,11 +32,10 @@ use crate::{\n         Statement,\n     },\n     item_scope::BuiltinShadowMode,\n-    item_tree::{ItemTree, ItemTreeId, ItemTreeNode},\n+    item_tree::ItemTree,\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n-    AdtId, BlockLoc, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern,\n-    ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    AdtId, BlockLoc, ModuleDefId,\n };\n \n use super::{diagnostics::BodyDiagnostic, ExprSource, PatSource};\n@@ -60,23 +59,21 @@ impl LowerCtx {\n \n pub(super) fn lower(\n     db: &dyn DefDatabase,\n-    def: DefWithBodyId,\n     expander: Expander,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n     let item_tree = db.item_tree(expander.current_file_id);\n     ExprCollector {\n         db,\n-        def,\n         source_map: BodySourceMap::default(),\n         body: Body {\n             exprs: Arena::default(),\n             pats: Arena::default(),\n             labels: Arena::default(),\n             params: Vec::new(),\n             body_expr: dummy_expr_id(),\n-            item_scope: Default::default(),\n+            block_scopes: Vec::new(),\n             _c: Count::new(),\n         },\n         item_trees: {\n@@ -91,7 +88,6 @@ pub(super) fn lower(\n \n struct ExprCollector<'a> {\n     db: &'a dyn DefDatabase,\n-    def: DefWithBodyId,\n     expander: Expander,\n     body: Body,\n     source_map: BodySourceMap,\n@@ -605,32 +601,6 @@ impl ExprCollector<'_> {\n         }\n     }\n \n-    fn find_inner_item<N: ItemTreeNode>(&self, ast: &N::Source) -> Option<ItemTreeId<N>> {\n-        let id = self.expander.ast_id(ast);\n-        let tree = &self.item_trees[&id.file_id];\n-\n-        // FIXME: This probably breaks with `use` items, since they produce multiple item tree nodes\n-\n-        // Root file (non-macro).\n-        let item_tree_id = tree\n-            .all_inner_items()\n-            .chain(tree.top_level_items().iter().copied())\n-            .filter_map(|mod_item| mod_item.downcast::<N>())\n-            .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value.upcast())\n-            .or_else(|| {\n-                log::debug!(\n-                    \"couldn't find inner {} item for {:?} (AST: `{}` - {:?})\",\n-                    type_name::<N>(),\n-                    id,\n-                    ast.syntax(),\n-                    ast.syntax(),\n-                );\n-                None\n-            })?;\n-\n-        Some(ItemTreeId::new(id.file_id, item_tree_id))\n-    }\n-\n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {\n         if let Some(expr) = expr {\n             self.collect_expr(expr)\n@@ -662,7 +632,6 @@ impl ExprCollector<'_> {\n                             match expansion {\n                                 Some(expansion) => {\n                                     let statements: ast::MacroStmts = expansion;\n-                                    this.collect_stmts_items(statements.statements());\n \n                                     statements.statements().for_each(|stmt| {\n                                         if let Some(mut r) = this.collect_stmt(stmt) {\n@@ -700,14 +669,15 @@ impl ExprCollector<'_> {\n         let block_loc =\n             BlockLoc { ast_id, module: self.expander.def_map.module_id(self.expander.module) };\n         let block_id = self.db.intern_block(block_loc);\n+        self.body.block_scopes.push(block_id);\n+\n         let opt_def_map = self.db.block_def_map(block_id);\n         let has_def_map = opt_def_map.is_some();\n         let def_map = opt_def_map.unwrap_or_else(|| self.expander.def_map.clone());\n         let module = if has_def_map { def_map.root() } else { self.expander.module };\n         let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n         let prev_local_module = mem::replace(&mut self.expander.module, module);\n \n-        self.collect_stmts_items(block.statements());\n         let statements =\n             block.statements().filter_map(|s| self.collect_stmt(s)).flatten().collect();\n         let tail = block.tail_expr().map(|e| self.collect_expr(e));\n@@ -722,108 +692,6 @@ impl ExprCollector<'_> {\n         expr_id\n     }\n \n-    fn collect_stmts_items(&mut self, stmts: ast::AstChildren<ast::Stmt>) {\n-        let container = ContainerId::DefWithBodyId(self.def);\n-\n-        let items = stmts\n-            .filter_map(|stmt| match stmt {\n-                ast::Stmt::Item(it) => Some(it),\n-                ast::Stmt::LetStmt(_) | ast::Stmt::ExprStmt(_) => None,\n-            })\n-            .filter_map(|item| {\n-                let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n-                    ast::Item::Fn(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (\n-                            FunctionLoc { container: container.into(), id }.intern(self.db).into(),\n-                            def.name(),\n-                        )\n-                    }\n-                    ast::Item::TypeAlias(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (\n-                            TypeAliasLoc { container: container.into(), id }.intern(self.db).into(),\n-                            def.name(),\n-                        )\n-                    }\n-                    ast::Item::Const(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (\n-                            ConstLoc { container: container.into(), id }.intern(self.db).into(),\n-                            def.name(),\n-                        )\n-                    }\n-                    ast::Item::Static(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (StaticLoc { container, id }.intern(self.db).into(), def.name())\n-                    }\n-                    ast::Item::Struct(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (StructLoc { container, id }.intern(self.db).into(), def.name())\n-                    }\n-                    ast::Item::Enum(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (EnumLoc { container, id }.intern(self.db).into(), def.name())\n-                    }\n-                    ast::Item::Union(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (UnionLoc { container, id }.intern(self.db).into(), def.name())\n-                    }\n-                    ast::Item::Trait(def) => {\n-                        let id = self.find_inner_item(&def)?;\n-                        (TraitLoc { container, id }.intern(self.db).into(), def.name())\n-                    }\n-                    ast::Item::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n-                    ast::Item::Impl(_)\n-                    | ast::Item::Use(_)\n-                    | ast::Item::ExternCrate(_)\n-                    | ast::Item::Module(_)\n-                    | ast::Item::MacroCall(_) => return None,\n-                    ast::Item::MacroRules(def) => {\n-                        return Some(Either::Right(ast::Macro::from(def)));\n-                    }\n-                    ast::Item::MacroDef(def) => {\n-                        return Some(Either::Right(ast::Macro::from(def)));\n-                    }\n-                };\n-\n-                Some(Either::Left((def, name)))\n-            })\n-            .collect::<Vec<_>>();\n-\n-        for either in items {\n-            match either {\n-                Either::Left((def, name)) => {\n-                    self.body.item_scope.define_def(def);\n-                    if let Some(name) = name {\n-                        let vis = crate::visibility::Visibility::Public; // FIXME determine correctly\n-                        let has_constructor = match def {\n-                            ModuleDefId::AdtId(AdtId::StructId(s)) => {\n-                                self.db.struct_data(s).variant_data.kind() != StructKind::Record\n-                            }\n-                            _ => true,\n-                        };\n-                        self.body.item_scope.push_res(\n-                            name.as_name(),\n-                            crate::per_ns::PerNs::from_def(def, vis, has_constructor),\n-                        );\n-                    }\n-                }\n-                Either::Right(e) => {\n-                    let mac = MacroDefId {\n-                        krate: self.expander.def_map.krate(),\n-                        ast_id: Some(self.expander.ast_id(&e)),\n-                        kind: MacroDefKind::Declarative,\n-                        local_inner: false,\n-                    };\n-                    if let Some(name) = e.name() {\n-                        self.body.item_scope.define_legacy_macro(name.as_name(), mac);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     fn collect_block_opt(&mut self, expr: Option<ast::BlockExpr>) -> ExprId {\n         if let Some(block) = expr {\n             self.collect_block(block)"}, {"sha": "2a331dcaf9db2e38532e7fd9e4f37e82c32f46ce", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -17,13 +17,16 @@ use crate::{\n };\n \n pub trait ChildBySource {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap;\n-}\n-\n-impl ChildBySource for TraitId {\n     fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n         let mut res = DynMap::default();\n+        self.child_by_source_to(db, &mut res);\n+        res\n+    }\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, map: &mut DynMap);\n+}\n \n+impl ChildBySource for TraitId {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let data = db.trait_data(*self);\n         for (_name, item) in data.items.iter() {\n             match *item {\n@@ -41,15 +44,11 @@ impl ChildBySource for TraitId {\n                 }\n             }\n         }\n-\n-        res\n     }\n }\n \n impl ChildBySource for ImplId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let data = db.impl_data(*self);\n         for &item in data.items.iter() {\n             match item {\n@@ -67,25 +66,21 @@ impl ChildBySource for ImplId {\n                 }\n             }\n         }\n-\n-        res\n     }\n }\n \n impl ChildBySource for ModuleId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let def_map = self.def_map(db);\n         let module_data = &def_map[self.local_id];\n-        module_data.scope.child_by_source(db)\n+        module_data.scope.child_by_source_to(db, res);\n     }\n }\n \n impl ChildBySource for ItemScope {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-        self.declarations().for_each(|item| add_module_def(db, &mut res, item));\n-        self.impls().for_each(|imp| add_impl(db, &mut res, imp));\n-        return res;\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n+        self.declarations().for_each(|item| add_module_def(db, res, item));\n+        self.impls().for_each(|imp| add_impl(db, res, imp));\n \n         fn add_module_def(db: &dyn DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n             match item {\n@@ -134,9 +129,7 @@ impl ChildBySource for ItemScope {\n }\n \n impl ChildBySource for VariantId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n@@ -150,28 +143,27 @@ impl ChildBySource for VariantId {\n                 }\n             }\n         }\n-        res\n     }\n }\n \n impl ChildBySource for EnumId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n             let id = EnumVariantId { parent: *self, local_id };\n             res[keys::VARIANT].insert(arena_map.with_value(source.clone()), id)\n         }\n-\n-        res\n     }\n }\n \n impl ChildBySource for DefWithBodyId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let body = db.body(*self);\n-        body.item_scope.child_by_source(db)\n+        for def_map in body.block_scopes.iter().filter_map(|block| db.block_def_map(*block)) {\n+            // All block expressions are merged into the same map, because they logically all add\n+            // inner items to the containing `DefWithBodyId`.\n+            def_map[def_map.root()].scope.child_by_source_to(db, res);\n+        }\n     }\n }"}, {"sha": "a056ab797efda3ae25cd025ffbf18cf455124e98", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -421,8 +421,7 @@ impl HasChildSource<LocalConstParamId> for GenericDefId {\n }\n \n impl ChildBySource for GenericDefId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let (_, sm) = GenericParams::new(db, *self);\n \n         let sm = sm.as_ref();\n@@ -440,6 +439,5 @@ impl ChildBySource for GenericDefId {\n             let id = ConstParamId { parent: *self, local_id };\n             res[keys::CONST_PARAM].insert(sm.with_value(src.clone()), id);\n         }\n-        res\n     }\n }"}, {"sha": "aafd73b606d18046f475914546220056212132b9", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -168,37 +168,6 @@ impl ItemScope {\n         self.unnamed_trait_imports.insert(tr, vis);\n     }\n \n-    pub(crate) fn push_res(&mut self, name: Name, def: PerNs) -> bool {\n-        let mut changed = false;\n-\n-        if let Some(types) = def.types {\n-            self.types.entry(name.clone()).or_insert_with(|| {\n-                changed = true;\n-                types\n-            });\n-        }\n-        if let Some(values) = def.values {\n-            self.values.entry(name.clone()).or_insert_with(|| {\n-                changed = true;\n-                values\n-            });\n-        }\n-        if let Some(macros) = def.macros {\n-            self.macros.entry(name.clone()).or_insert_with(|| {\n-                changed = true;\n-                macros\n-            });\n-        }\n-\n-        if def.is_none() {\n-            if self.unresolved.insert(name) {\n-                changed = true;\n-            }\n-        }\n-\n-        changed\n-    }\n-\n     pub(crate) fn push_res_with_import(\n         &mut self,\n         glob_imports: &mut PerNsGlobImports,"}, {"sha": "ab3b17f6cd99df2726481a6b461b62c66ceccc74", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -286,11 +286,11 @@ pub enum ContainerId {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum AssocContainerId {\n-    ContainerId(ContainerId),\n+    ModuleId(ModuleId),\n     ImplId(ImplId),\n     TraitId(TraitId),\n }\n-impl_from!(ContainerId for AssocContainerId);\n+impl_from!(ModuleId for AssocContainerId);\n \n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -459,7 +459,7 @@ impl HasModule for ContainerId {\n impl HasModule for AssocContainerId {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n         match *self {\n-            AssocContainerId::ContainerId(it) => it.module(db),\n+            AssocContainerId::ModuleId(it) => it,\n             AssocContainerId::ImplId(it) => it.lookup(db).container.module(db),\n             AssocContainerId::TraitId(it) => it.lookup(db).container.module(db),\n         }"}, {"sha": "5bf2ba721b2ed7f2e705dbbd00eb1ec92c53152d", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -1121,7 +1121,7 @@ impl ModCollector<'_, '_> {\n \n                     def = Some(DefData {\n                         id: FunctionLoc {\n-                            container: container.into(),\n+                            container: module.into(),\n                             id: ItemTreeId::new(self.file_id, id),\n                         }\n                         .intern(self.def_collector.db)\n@@ -1188,7 +1188,7 @@ impl ModCollector<'_, '_> {\n                     if let Some(name) = &it.name {\n                         def = Some(DefData {\n                             id: ConstLoc {\n-                                container: container.into(),\n+                                container: module.into(),\n                                 id: ItemTreeId::new(self.file_id, id),\n                             }\n                             .intern(self.def_collector.db)\n@@ -1228,7 +1228,7 @@ impl ModCollector<'_, '_> {\n \n                     def = Some(DefData {\n                         id: TypeAliasLoc {\n-                            container: container.into(),\n+                            container: module.into(),\n                             id: ItemTreeId::new(self.file_id, id),\n                         }\n                         .intern(self.def_collector.db)"}, {"sha": "6f036c8c42d1ecd5e311ab9731b065df05ec5519", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -342,6 +342,16 @@ impl Resolver {\n                     traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n                 }\n                 traits.extend(m.def_map[m.module_id].scope.traits());\n+\n+                // Add all traits that are in scope because of the containing DefMaps\n+                m.def_map.with_ancestor_maps(db, m.module_id, &mut |def_map, module| {\n+                    if let Some(prelude) = def_map.prelude() {\n+                        let prelude_def_map = prelude.def_map(db);\n+                        traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n+                    }\n+                    traits.extend(def_map[module].scope.traits());\n+                    None::<()>\n+                });\n             }\n         }\n         traits\n@@ -690,7 +700,7 @@ impl HasResolver for ContainerId {\n impl HasResolver for AssocContainerId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n         match self {\n-            AssocContainerId::ContainerId(it) => it.resolver(db),\n+            AssocContainerId::ModuleId(it) => it.resolver(db),\n             AssocContainerId::TraitId(it) => it.resolver(db),\n             AssocContainerId::ImplId(it) => it.resolver(db),\n         }"}, {"sha": "3605ca5816c3fb66daadf00f3b2fc7430c6243ca", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -99,9 +99,14 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let body = self.db.body(func.into());\n \n         // Recursively validate inner scope items, such as static variables and constants.\n-        for (item_id, _) in body.item_scope.values() {\n-            let mut validator = DeclValidator::new(self.db, self.krate, self.sink);\n-            validator.validate_item(item_id);\n+        let db = self.db;\n+        for block_def_map in body.block_scopes.iter().filter_map(|block| db.block_def_map(*block)) {\n+            for (_, module) in block_def_map.modules() {\n+                for (def_id, _) in module.scope.values() {\n+                    let mut validator = DeclValidator::new(self.db, self.krate, self.sink);\n+                    validator.validate_item(def_id);\n+                }\n+            }\n         }\n \n         // Check whether non-snake case identifiers are allowed for this function."}, {"sha": "ae3554bac89a9dda3bb489facb00eb86fffc9f58", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -260,7 +260,7 @@ impl<'a> InferenceContext<'a> {\n                         }));\n                         Some(trait_substs)\n                     }\n-                    AssocContainerId::ContainerId(_) => None,\n+                    AssocContainerId::ModuleId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item);"}, {"sha": "2483672674ae0119e11d20e2dddeaa80168f6628", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -715,7 +715,7 @@ fn transform_receiver_ty(\n                 .fill_with_unknown()\n                 .build()\n         }\n-        AssocContainerId::ContainerId(_) => unreachable!(),\n+        AssocContainerId::ModuleId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n     Some(sig.value.params()[0].clone().subst_bound_vars(&substs))"}, {"sha": "fc770ea600cd591505f4969199c0964c2b6873fc", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -13,7 +13,7 @@ use std::{env, sync::Arc};\n use base_db::{fixture::WithFixture, FileRange, SourceDatabase, SourceDatabaseExt};\n use expect_test::Expect;\n use hir_def::{\n-    body::{BodySourceMap, SyntheticSyntax},\n+    body::{Body, BodySourceMap, SyntheticSyntax},\n     child_by_source::ChildBySource,\n     db::DefDatabase,\n     item_scope::ItemScope,\n@@ -234,13 +234,13 @@ fn visit_module(\n                     let def = it.into();\n                     cb(def);\n                     let body = db.body(def);\n-                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                    visit_body(db, &body, cb);\n                 }\n                 AssocItemId::ConstId(it) => {\n                     let def = it.into();\n                     cb(def);\n                     let body = db.body(def);\n-                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                    visit_body(db, &body, cb);\n                 }\n                 AssocItemId::TypeAliasId(_) => (),\n             }\n@@ -259,19 +259,19 @@ fn visit_module(\n                     let def = it.into();\n                     cb(def);\n                     let body = db.body(def);\n-                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                    visit_body(db, &body, cb);\n                 }\n                 ModuleDefId::ConstId(it) => {\n                     let def = it.into();\n                     cb(def);\n                     let body = db.body(def);\n-                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                    visit_body(db, &body, cb);\n                 }\n                 ModuleDefId::StaticId(it) => {\n                     let def = it.into();\n                     cb(def);\n                     let body = db.body(def);\n-                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                    visit_body(db, &body, cb);\n                 }\n                 ModuleDefId::TraitId(it) => {\n                     let trait_data = db.trait_data(it);\n@@ -288,6 +288,14 @@ fn visit_module(\n             }\n         }\n     }\n+\n+    fn visit_body(db: &TestDB, body: &Body, cb: &mut dyn FnMut(DefWithBodyId)) {\n+        for def_map in body.block_scopes.iter().filter_map(|block| db.block_def_map(*block)) {\n+            for (mod_id, _) in def_map.modules() {\n+                visit_module(db, &def_map, mod_id, cb);\n+            }\n+        }\n+    }\n }\n \n fn ellipsize(mut text: String, max_len: usize) -> String {"}, {"sha": "e185b1c0a16c7b8e27bd79fec889963dc9d7cc2f", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -3173,6 +3173,39 @@ fn f() {\n     );\n }\n \n+#[test]\n+fn trait_in_scope_with_inner_item() {\n+    check_infer(\n+        r#\"\n+mod m {\n+    pub trait Tr {\n+        fn method(&self) -> u8 { 0 }\n+    }\n+\n+    impl Tr for () {}\n+}\n+\n+use m::Tr;\n+\n+fn f() {\n+    fn inner() {\n+        ().method();\n+      //^^^^^^^^^^^ u8\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            46..50 'self': &Self\n+            58..63 '{ 0 }': u8\n+            60..61 '0': u8\n+            115..185 '{     ...   } }': ()\n+            132..183 '{     ...     }': ()\n+            142..144 '()': ()\n+            142..153 '().method()': u8\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn inner_use_in_block() {\n     check_types("}, {"sha": "7351e4e54af75cffc4bd47d21c061e80a5a25105", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5c72d9f07760fe875ef653a956fcaa1fe5d0de/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=9a5c72d9f07760fe875ef653a956fcaa1fe5d0de", "patch": "@@ -259,6 +259,6 @@ fn parent_generic_def(db: &dyn DefDatabase, def: GenericDefId) -> Option<Generic\n     match container {\n         AssocContainerId::ImplId(it) => Some(it.into()),\n         AssocContainerId::TraitId(it) => Some(it.into()),\n-        AssocContainerId::ContainerId(_) => None,\n+        AssocContainerId::ModuleId(_) => None,\n     }\n }"}]}