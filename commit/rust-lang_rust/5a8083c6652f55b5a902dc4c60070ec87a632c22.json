{"sha": "5a8083c6652f55b5a902dc4c60070ec87a632c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODA4M2M2NjUyZjU1YjVhOTAyZGM0YzYwMDcwZWM4N2E2MzJjMjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T16:22:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T16:22:21Z"}, "message": "Rollup merge of #67354 - VirrageS:blame-wrong-line, r=estebank\n\nFix pointing at arg when cause is outside of call\n\nFollow up after: #66933\n\nCloses: #66923\n\nr? @estebank", "tree": {"sha": "1ca2d88f9e906bb6851efd5d21b4df1c7075e7ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca2d88f9e906bb6851efd5d21b4df1c7075e7ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a8083c6652f55b5a902dc4c60070ec87a632c22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/PU9CRBK7hj4Ov3rIwAAdHIIAA9wRUAhm/Y/AD+MF1D2L69T\nMxquSSHYWslpmp1klGY234vbBaxjhU5Rr/QEN5fd39KZlK3YEUc70y5gSiT96Xhr\nI9L6W4pX+bjecOOjOL+NiaO6XTx4Bhb4LXPLuXMtZq5n6mTO8Hf5UGzu7F5cgtiA\n8i0BL5rWNrTbJ5FF2bSQVrOUsF5UItwUYohL+0wq++/2SWaiZyT7YShnO88djSrs\nuNcBaI3BiT9xnx5H8/ccS2HbS/tBledFUJQdNqqroOodt5bItwNEbvQmIxGFvC8t\nPXHk9Xa2ctM5AkR+dHGhOrZRsEzyhuzO+cen8dGCe/zoiUuBQ+RQ9SoNLJIAVvo=\n=oara\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ca2d88f9e906bb6851efd5d21b4df1c7075e7ac\nparent ec82174fad385882798b6c223dc1b8ac44f58332\nparent e305bf8bc8cecaf93080f07962a4f763cd66f5ce\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576858941 +0100\ncommitter GitHub <noreply@github.com> 1576858941 +0100\n\nRollup merge of #67354 - VirrageS:blame-wrong-line, r=estebank\n\nFix pointing at arg when cause is outside of call\n\nFollow up after: #66933\n\nCloses: #66923\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8083c6652f55b5a902dc4c60070ec87a632c22", "html_url": "https://github.com/rust-lang/rust/commit/5a8083c6652f55b5a902dc4c60070ec87a632c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a8083c6652f55b5a902dc4c60070ec87a632c22/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec82174fad385882798b6c223dc1b8ac44f58332", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec82174fad385882798b6c223dc1b8ac44f58332", "html_url": "https://github.com/rust-lang/rust/commit/ec82174fad385882798b6c223dc1b8ac44f58332"}, {"sha": "e305bf8bc8cecaf93080f07962a4f763cd66f5ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e305bf8bc8cecaf93080f07962a4f763cd66f5ce", "html_url": "https://github.com/rust-lang/rust/commit/e305bf8bc8cecaf93080f07962a4f763cd66f5ce"}], "stats": {"total": 119, "additions": 86, "deletions": 33}, "files": [{"sha": "7f1c6c99cf8d113feec3e06a152b267452ae738a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a8083c6652f55b5a902dc4c60070ec87a632c22", "patch": "@@ -3880,36 +3880,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_sp: Span,\n         args: &'tcx [hir::Expr],\n     ) {\n-        if !call_sp.desugaring_kind().is_some() {\n-            // We *do not* do this for desugared call spans to keep good diagnostics when involving\n-            // the `?` operator.\n-            for error in errors {\n-                if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n-                    // Collect the argument position for all arguments that could have caused this\n-                    // `FulfillmentError`.\n-                    let mut referenced_in = final_arg_types.iter()\n-                        .map(|(i, checked_ty, _)| (i, checked_ty))\n-                        .chain(final_arg_types.iter().map(|(i, _, coerced_ty)| (i, coerced_ty)))\n-                        .flat_map(|(i, ty)| {\n-                            let ty = self.resolve_vars_if_possible(ty);\n-                            // We walk the argument type because the argument's type could have\n-                            // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                            ty.walk()\n-                                .filter(|&ty| ty == predicate.skip_binder().self_ty())\n-                                .map(move |_| *i)\n-                        })\n-                        .collect::<Vec<_>>();\n+        // We *do not* do this for desugared call spans to keep good diagnostics when involving\n+        // the `?` operator.\n+        if call_sp.desugaring_kind().is_some() {\n+            return\n+        }\n+\n+        for error in errors {\n+            // Only if the cause is somewhere inside the expression we want try to point at arg.\n+            // Otherwise, it means that the cause is somewhere else and we should not change\n+            // anything because we can break the correct span.\n+            if !call_sp.contains(error.obligation.cause.span) {\n+                continue\n+            }\n+\n+            if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                // Collect the argument position for all arguments that could have caused this\n+                // `FulfillmentError`.\n+                let mut referenced_in = final_arg_types.iter()\n+                    .map(|(i, checked_ty, _)| (i, checked_ty))\n+                    .chain(final_arg_types.iter().map(|(i, _, coerced_ty)| (i, coerced_ty)))\n+                    .flat_map(|(i, ty)| {\n+                        let ty = self.resolve_vars_if_possible(ty);\n+                        // We walk the argument type because the argument's type could have\n+                        // been `Option<T>`, but the `FulfillmentError` references `T`.\n+                        ty.walk()\n+                            .filter(|&ty| ty == predicate.skip_binder().self_ty())\n+                            .map(move |_| *i)\n+                    })\n+                    .collect::<Vec<_>>();\n \n-                    // Both checked and coerced types could have matched, thus we need to remove\n-                    // duplicates.\n-                    referenced_in.dedup();\n+                // Both checked and coerced types could have matched, thus we need to remove\n+                // duplicates.\n+                referenced_in.dedup();\n \n-                    if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n-                        // We make sure that only *one* argument matches the obligation failure\n-                        // and we assign the obligation's span to its expression's.\n-                        error.obligation.cause.span = args[ref_in].span;\n-                        error.points_at_arg_span = true;\n-                    }\n+                if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n+                    // We make sure that only *one* argument matches the obligation failure\n+                    // and we assign the obligation's span to its expression's.\n+                    error.obligation.cause.span = args[ref_in].span;\n+                    error.points_at_arg_span = true;\n                 }\n             }\n         }"}, {"sha": "7fa059583f53986a0cd7d74c9d1334d27308e19f", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs?ref=5a8083c6652f55b5a902dc4c60070ec87a632c22", "patch": "@@ -6,6 +6,7 @@ pub fn no_debug() {\n pub fn no_hash() {\n     use std::collections::HashSet;\n     let mut set = HashSet::new();\n+    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n     set.insert([0_usize; 33]);\n     //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n }"}, {"sha": "d885c98dcb287bdaa8703a705c131faae0ac6458", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=5a8083c6652f55b5a902dc4c60070ec87a632c22", "patch": "@@ -8,15 +8,24 @@ LL |     println!(\"{:?}\", [0_usize; 33]);\n    = note: required by `std::fmt::Debug::fmt`\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:9:16\n+  --> $DIR/core-traits-no-impls-length-33.rs:10:16\n    |\n LL |     set.insert([0_usize; 33]);\n    |                ^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n \n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/core-traits-no-impls-length-33.rs:8:19\n+   |\n+LL |     let mut set = HashSet::new();\n+   |                   ^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n+   = note: required by `std::collections::HashSet::<T>::new`\n+\n error[E0369]: binary operation `==` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:14:19\n+  --> $DIR/core-traits-no-impls-length-33.rs:15:19\n    |\n LL |     [0_usize; 33] == [1_usize; 33]\n    |     ------------- ^^ ------------- [usize; 33]\n@@ -26,7 +35,7 @@ LL |     [0_usize; 33] == [1_usize; 33]\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `[usize; 33]`\n \n error[E0369]: binary operation `<` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:19:19\n+  --> $DIR/core-traits-no-impls-length-33.rs:20:19\n    |\n LL |     [0_usize; 33] < [1_usize; 33]\n    |     ------------- ^ ------------- [usize; 33]\n@@ -36,7 +45,7 @@ LL |     [0_usize; 33] < [1_usize; 33]\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `[usize; 33]`\n \n error[E0277]: the trait bound `&[usize; 33]: std::iter::IntoIterator` is not satisfied\n-  --> $DIR/core-traits-no-impls-length-33.rs:24:14\n+  --> $DIR/core-traits-no-impls-length-33.rs:25:14\n    |\n LL |     for _ in &[0_usize; 33] {\n    |              ^^^^^^^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `&[usize; 33]`\n@@ -48,7 +57,7 @@ LL |     for _ in &[0_usize; 33] {\n              <&'a mut [T] as std::iter::IntoIterator>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0277, E0369.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "8332807397247eae743200724c9043fe65ab7284", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.rs?ref=5a8083c6652f55b5a902dc4c60070ec87a632c22", "patch": "@@ -0,0 +1,15 @@\n+// This test checks that errors are showed for lines with `collect` rather than `push` method.\n+\n+fn main() {\n+    let v = vec![1_f64, 2.2_f64];\n+    let mut fft: Vec<Vec<f64>> = vec![];\n+\n+    let x1: &[f64] = &v;\n+    let x2: Vec<f64> = x1.into_iter().collect();\n+    //~^ ERROR a value of type\n+    fft.push(x2);\n+\n+    let x3 = x1.into_iter().collect::<Vec<f64>>();\n+    //~^ ERROR a value of type\n+    fft.push(x3);\n+}"}, {"sha": "8e7ee97e0b9072d416a7f16c98534f9c839241e9", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8083c6652f55b5a902dc4c60070ec87a632c22/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=5a8083c6652f55b5a902dc4c60070ec87a632c22", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: a value of type `std::vec::Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:39\n+   |\n+LL |     let x2: Vec<f64> = x1.into_iter().collect();\n+   |                                       ^^^^^^^ value of type `std::vec::Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |\n+   = help: the trait `std::iter::FromIterator<&f64>` is not implemented for `std::vec::Vec<f64>`\n+\n+error[E0277]: a value of type `std::vec::Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n+   |\n+LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n+   |                             ^^^^^^^ value of type `std::vec::Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |\n+   = help: the trait `std::iter::FromIterator<&f64>` is not implemented for `std::vec::Vec<f64>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}