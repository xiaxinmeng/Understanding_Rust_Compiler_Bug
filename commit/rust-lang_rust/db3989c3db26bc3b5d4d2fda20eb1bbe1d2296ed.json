{"sha": "db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMzk4OWMzZGIyNmJjM2I1ZDRkMmZkYTIwZWIxYmJlMWQyMjk2ZWQ=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-18T01:10:09Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-22T04:38:37Z"}, "message": "Implement BitOps for HashSet", "tree": {"sha": "503dd2a6d80f6b7df89c27851df787e9a96de60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503dd2a6d80f6b7df89c27851df787e9a96de60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed", "html_url": "https://github.com/rust-lang/rust/commit/db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d680009205de2302b902d8f9f5f7ae7a042f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d680009205de2302b902d8f9f5f7ae7a042f1a", "html_url": "https://github.com/rust-lang/rust/commit/34d680009205de2302b902d8f9f5f7ae7a042f1a"}], "stats": {"total": 119, "additions": 115, "deletions": 4}, "files": [{"sha": "0024c98b0744eaccd90d53542da46ae3af26c4fb", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 115, "deletions": 4, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=db3989c3db26bc3b5d4d2fda20eb1bbe1d2296ed", "patch": "@@ -11,21 +11,20 @@\n // ignore-lexer-test FIXME #15883\n \n use borrow::BorrowFrom;\n+use clone::Clone;\n use cmp::{Eq, Equiv, PartialEq};\n use core::kinds::Sized;\n use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{Iterator, IteratorExt, FromIterator, Map, Chain, Extend};\n+use iter::{Iterator, IteratorExt, IteratorCloneExt, FromIterator, Map, Chain, Extend};\n+use ops::{BitOr, BitAnd, BitXor, Sub};\n use option::Option::{Some, None, mod};\n use result::Result::{Ok, Err};\n \n use super::map::{mod, HashMap, MoveEntries, Keys, INITIAL_CAPACITY};\n \n-// FIXME(conventions): implement BitOr, BitAnd, BitXor, and Sub\n-\n-\n // Future Optimization (FIXME!)\n // =============================\n //\n@@ -618,6 +617,118 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n     }\n }\n \n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n+BitOr<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+    /// Returns the union of `self` and `rhs` as a new `HashSet<T, H>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let a: HashSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: HashSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: HashSet<int> = &a | &b;\n+    ///\n+    /// let mut i = 0;\n+    /// let expected = [1, 2, 3, 4, 5];\n+    /// for x in set.iter() {\n+    ///     assert!(expected.contains(x));\n+    ///     i += 1;\n+    /// }\n+    /// assert_eq!(i, expected.len());\n+    /// ```\n+    fn bitor(self, rhs: &HashSet<T, H>) -> HashSet<T, H> {\n+        self.union(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n+BitAnd<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+    /// Returns the intersection of `self` and `rhs` as a new `HashSet<T, H>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let a: HashSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: HashSet<int> = vec![2, 3, 4].into_iter().collect();\n+    ///\n+    /// let set: HashSet<int> = &a & &b;\n+    ///\n+    /// let mut i = 0;\n+    /// let expected = [2, 3];\n+    /// for x in set.iter() {\n+    ///     assert!(expected.contains(x));\n+    ///     i += 1;\n+    /// }\n+    /// assert_eq!(i, expected.len());\n+    /// ```\n+    fn bitand(self, rhs: &HashSet<T, H>) -> HashSet<T, H> {\n+        self.intersection(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n+BitXor<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `HashSet<T, H>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let a: HashSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: HashSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: HashSet<int> = &a ^ &b;\n+    ///\n+    /// let mut i = 0;\n+    /// let expected = [1, 2, 4, 5];\n+    /// for x in set.iter() {\n+    ///     assert!(expected.contains(x));\n+    ///     i += 1;\n+    /// }\n+    /// assert_eq!(i, expected.len());\n+    /// ```\n+    fn bitxor(self, rhs: &HashSet<T, H>) -> HashSet<T, H> {\n+        self.symmetric_difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n+Sub<&'b HashSet<T, H>, HashSet<T, H>> for &'a HashSet<T, H> {\n+    /// Returns the difference of `self` and `rhs` as a new `HashSet<T, H>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let a: HashSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: HashSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: HashSet<int> = &a - &b;\n+    ///\n+    /// let mut i = 0;\n+    /// let expected = [1, 2];\n+    /// for x in set.iter() {\n+    ///     assert!(expected.contains(x));\n+    ///     i += 1;\n+    /// }\n+    /// assert_eq!(i, expected.len());\n+    /// ```\n+    fn sub(self, rhs: &HashSet<T, H>) -> HashSet<T, H> {\n+        self.difference(rhs).cloned().collect()\n+    }\n+}\n+\n /// HashSet iterator\n pub struct Iter<'a, K: 'a> {\n     iter: Keys<'a, K, ()>"}]}