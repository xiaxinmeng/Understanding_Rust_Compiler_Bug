{"sha": "f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzkzYmRiZTFmYTllNjEzMWE4YTU1Mjc1M2MwYzQ3NmM1ZjkyMmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T21:08:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T21:08:18Z"}, "message": "rustdoc: Move mod docs into the item tag", "tree": {"sha": "1c49e0fc063dd1de590f2ed89dcd72836068512c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c49e0fc063dd1de590f2ed89dcd72836068512c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "html_url": "https://github.com/rust-lang/rust/commit/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9732e0d554770291d69b4328f566b3067509a81e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9732e0d554770291d69b4328f566b3067509a81e", "html_url": "https://github.com/rust-lang/rust/commit/9732e0d554770291d69b4328f566b3067509a81e"}], "stats": {"total": 189, "additions": 63, "deletions": 126}, "files": [{"sha": "f9293ed6fae15fc2aae4e1741cbc011737cd3114", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -105,7 +105,7 @@ fn fold_mod_should_extract_mod_attributes() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_mod(fold, doc.topmod.mods[0]);\n+    let doc = fold_mod(fold, doc.topmod.mods()[0]);\n     assert doc.desc == some(\"test\");\n }\n "}, {"sha": "fb2f1134ae9b2c463325fd70e81700f382f8551d", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -90,8 +90,8 @@ fn should_promote_mod_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert doc.topmod.mods[0].brief == some(\"desc\");\n-    assert doc.topmod.mods[0].desc == none;\n+    assert doc.topmod.mods()[0].brief == some(\"desc\");\n+    assert doc.topmod.mods()[0].desc == none;\n }\n \n #[test]"}, {"sha": "e7b1d16244a74f4ad9f6ff33c99ae169f0b13167", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -20,8 +20,7 @@ type moddoc = ~{\n     path: [str],\n     brief: option<str>,\n     desc: option<str>,\n-    items: [itemtag],\n-    mods: modlist\n+    items: [itemtag]\n };\n \n type constdoc = ~{\n@@ -77,11 +76,17 @@ type resdoc = ~{\n     sig: option<str>\n };\n \n-// Just to break the structural recursive types\n-enum modlist = [moddoc];\n-\n impl util for moddoc {\n \n+    fn mods() -> [moddoc] {\n+        vec::filter_map(self.items) {|itemtag|\n+            alt itemtag {\n+              modtag(moddoc) { some(moddoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n     fn fns() -> [fndoc] {\n         vec::filter_map(self.items) {|itemtag|\n             alt itemtag {"}, {"sha": "bfef0bf0b2e31c9064ab00b256b3ad3f5a61a36f", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -45,6 +45,11 @@ fn moddoc_from_mod(\n         desc: none,\n         items: vec::filter_map(module.items) {|item|\n             alt item.node {\n+              ast::item_mod(m) {\n+                some(doc::modtag(\n+                    moddoc_from_mod(m, item.ident, item.id)\n+                ))\n+              }\n               ast::item_fn(decl, _, _) {\n                 some(doc::fntag(\n                     fndoc_from_fn(decl, item.ident, item.id)\n@@ -69,18 +74,7 @@ fn moddoc_from_mod(\n                 none\n               }\n             }\n-        },\n-        mods: doc::modlist(\n-            vec::filter_map(module.items) {|item|\n-                alt item.node {\n-                  ast::item_mod(m) {\n-                    some(moddoc_from_mod(m, item.ident, item.id))\n-                  }\n-                  _ {\n-                    none\n-                  }\n-                }\n-            })\n+        }\n     }\n }\n \n@@ -233,8 +227,7 @@ mod tests {\n         let source = \"\"; // empty crate\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n-        // FIXME #1535: These are boxed to prevent a crash\n-        assert ~doc.topmod.mods == ~doc::modlist([]);\n+        assert vec::is_empty(doc.topmod.mods());\n         assert vec::is_empty(doc.topmod.fns());\n     }\n \n@@ -243,25 +236,25 @@ mod tests {\n         let source = \"mod a { mod b { } mod c { } }\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n-        assert doc.topmod.mods[0].name == \"a\";\n-        assert doc.topmod.mods[0].mods[0].name == \"b\";\n-        assert doc.topmod.mods[0].mods[1].name == \"c\";\n+        assert doc.topmod.mods()[0].name == \"a\";\n+        assert doc.topmod.mods()[0].mods()[0].name == \"b\";\n+        assert doc.topmod.mods()[0].mods()[1].name == \"c\";\n     }\n \n     #[test]\n     fn extract_mods_deep() {\n         let source = \"mod a { mod b { mod c { } } }\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n-        assert doc.topmod.mods[0].mods[0].mods[0].name == \"c\";\n+        assert doc.topmod.mods()[0].mods()[0].mods()[0].name == \"c\";\n     }\n \n     #[test]\n     fn extract_should_set_mod_ast_id() {\n         let source = \"mod a { }\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n-        assert doc.topmod.mods[0].id != 0;\n+        assert doc.topmod.mods()[0].id != 0;\n     }\n \n     #[test]\n@@ -272,7 +265,7 @@ mod tests {\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n         assert doc.topmod.fns()[0].name == \"a\";\n-        assert doc.topmod.mods[0].fns()[0].name == \"c\";\n+        assert doc.topmod.mods()[0].fns()[0].name == \"c\";\n     }\n \n     #[test]"}, {"sha": "49cc5476609b2551c7dc5f07437ed12093154ad9", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -2,7 +2,7 @@\n import std;\n \n export fold;\n-export fold_crate, fold_mod, fold_fn, fold_modlist;\n+export fold_crate, fold_mod, fold_fn;\n export default_seq_fold;\n export default_seq_fold_crate;\n export default_seq_fold_mod;\n@@ -19,7 +19,6 @@ type fold_fn<T> = fn~(fold: fold<T>, doc: doc::fndoc) -> doc::fndoc;\n type fold_const<T> = fn~(fold: fold<T>, doc: doc::constdoc) -> doc::constdoc;\n type fold_enum<T> = fn~(fold: fold<T>, doc: doc::enumdoc) -> doc::enumdoc;\n type fold_res<T> = fn~(fold: fold<T>, doc: doc::resdoc) -> doc::resdoc;\n-type fold_modlist<T> = fn~(fold: fold<T>, list: doc::modlist) -> doc::modlist;\n \n type t<T> = {\n     ctxt: T,\n@@ -28,8 +27,7 @@ type t<T> = {\n     fold_fn: fold_fn<T>,\n     fold_const: fold_const<T>,\n     fold_enum: fold_enum<T>,\n-    fold_res: fold_res<T>,\n-    fold_modlist: fold_modlist<T>\n+    fold_res: fold_res<T>\n };\n \n \n@@ -42,8 +40,7 @@ fn mk_fold<T:copy>(\n     fold_fn: fold_fn<T>,\n     fold_const: fold_const<T>,\n     fold_enum: fold_enum<T>,\n-    fold_res: fold_res<T>,\n-    fold_modlist: fold_modlist<T>\n+    fold_res: fold_res<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n@@ -52,8 +49,7 @@ fn mk_fold<T:copy>(\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n-        fold_res: fold_res,\n-        fold_modlist: fold_modlist\n+        fold_res: fold_res\n     })\n }\n \n@@ -65,8 +61,7 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_fn(f, d)},\n         {|f, d| default_seq_fold_const(f, d)},\n         {|f, d| default_seq_fold_enum(f, d)},\n-        {|f, d| default_seq_fold_res(f, d)},\n-        {|f, d| default_seq_fold_modlist(f, d)}\n+        {|f, d| default_seq_fold_res(f, d)}\n     )\n }\n \n@@ -86,6 +81,9 @@ fn default_seq_fold_mod<T>(\n     ~{\n         items: vec::map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::modtag(moddoc) {\n+                doc::modtag(fold.fold_mod(fold, moddoc))\n+              }\n               doc::fntag(fndoc) {\n                 doc::fntag(fold.fold_fn(fold, fndoc))\n               }\n@@ -99,8 +97,7 @@ fn default_seq_fold_mod<T>(\n                 doc::restag(fold.fold_res(fold, resdoc))\n               }\n             }\n-        },\n-        mods: fold.fold_modlist(fold, doc.mods)\n+        }\n         with *doc\n     }\n }\n@@ -133,15 +130,6 @@ fn default_seq_fold_res<T>(\n     doc\n }\n \n-fn default_seq_fold_modlist<T>(\n-    fold: fold<T>,\n-    list: doc::modlist\n-) -> doc::modlist {\n-    doc::modlist(vec::map(*list) {|doc|\n-        fold.fold_mod(fold, doc)\n-    })\n-}\n-\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "8c53ad75a1b3873c1c748d36f9000a10b6d7bb92", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -81,12 +81,9 @@ fn write_mod_contents(\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n \n-    for moddoc in *doc.mods {\n-        write_mod(ctxt, moddoc);\n-    }\n-\n     for itemtag in doc.items {\n         alt itemtag {\n+          doc::modtag(moddoc) { write_mod(ctxt, moddoc) }\n           doc::fntag(fndoc) { write_fn(ctxt, fndoc) }\n           doc::consttag(constdoc) { write_const(ctxt, constdoc) }\n           doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }"}, {"sha": "729b572a139bcebcb4e72cd3d8129c7990bb4852", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -44,6 +44,6 @@ fn should_record_mod_paths() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.mods[0].mods[0].mods[0].path == [\"a\", \"b\"];\n-    assert doc.topmod.mods[0].mods[1].mods[0].path == [\"a\", \"d\"];\n+    assert doc.topmod.mods()[0].mods()[0].mods()[0].path == [\"a\", \"b\"];\n+    assert doc.topmod.mods()[0].mods()[1].mods()[0].path == [\"a\", \"d\"];\n }\n\\ No newline at end of file"}, {"sha": "a5ffd4408a9ecf866f6203650833537cc7cdc9e9", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -22,8 +22,7 @@ fn run(\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n-        fold_res: fold_res,\n-        fold_modlist: fold_modlist\n+        fold_res: fold_res\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -36,6 +35,14 @@ fn fold_mod(\n     let doc = ~{\n         items: vec::filter_map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::modtag(moddoc) {\n+                let doc = fold.fold_mod(fold, moddoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::modtag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               doc::fntag(fndoc) {\n                 let doc = fold.fold_fn(fold, fndoc);\n                 if fold.ctxt.have_docs {\n@@ -76,7 +83,6 @@ fn fold_mod(\n     fold.ctxt.have_docs =\n         doc.brief != none\n         || doc.desc != none\n-        || vec::is_not_empty(*doc.mods)\n         || vec::is_not_empty(doc.items);\n     ret doc;\n }\n@@ -156,27 +162,13 @@ fn should_not_elide_fns_with_documented_failure_conditions() {\n     assert vec::is_not_empty(doc.topmod.fns());\n }\n \n-fn fold_modlist(\n-    fold: fold::fold<ctxt>,\n-    list: doc::modlist\n-) -> doc::modlist {\n-    doc::modlist(vec::filter_map(*list) {|doc|\n-        let doc = fold.fold_mod(fold, doc);\n-        if fold.ctxt.have_docs {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    })\n-}\n-\n #[test]\n fn should_elide_undocumented_mods() {\n     let source = \"mod a { }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::is_empty(*doc.topmod.mods);\n+    assert vec::is_empty(doc.topmod.mods());\n }\n \n #[test]\n@@ -186,7 +178,7 @@ fn should_not_elide_undocument_mods_with_documented_mods() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_not_empty(*doc.topmod.mods);\n+    assert vec::is_not_empty(doc.topmod.mods());\n }\n \n #[test]\n@@ -196,7 +188,7 @@ fn should_not_elide_undocument_mods_with_documented_fns() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_not_empty(*doc.topmod.mods);\n+    assert vec::is_not_empty(doc.topmod.mods());\n }\n \n #[test]"}, {"sha": "5d88cfb5eae0ccdb3759a4470a200a4e3460d988", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -21,8 +21,7 @@ fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     ~{\n-        items: exported_items(fold.ctxt, doc),\n-        mods: doc::modlist(exported_mods(fold.ctxt, doc))\n+        items: exported_items(fold.ctxt, doc)\n         with *doc\n     }\n }\n@@ -35,14 +34,6 @@ fn exported_items(srv: astsrv::srv, doc: doc::moddoc) -> [doc::itemtag] {\n     )\n }\n \n-fn exported_mods(srv: astsrv::srv, doc: doc::moddoc) -> [doc::moddoc] {\n-    exported_things(\n-        srv, doc,\n-        exported_mods_from_crate,\n-        exported_mods_from_mod\n-    )\n-}\n-\n fn exported_things<T>(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -70,27 +61,14 @@ fn exported_items_from_mod(\n     exported_items_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n }\n \n-fn exported_mods_from_crate(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::moddoc] {\n-    exported_mods_from(srv, doc, is_exported_from_crate)\n-}\n-\n-fn exported_mods_from_mod(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::moddoc] {\n-    exported_mods_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n-}\n-\n fn exported_items_from(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n     is_exported: fn(astsrv::srv, str) -> bool\n ) -> [doc::itemtag] {\n     vec::filter_map(doc.items) { |itemtag|\n         let name = alt itemtag {\n+          doc::modtag(~{name, _}) { name }\n           doc::fntag(~{name, _}) { name }\n           doc::consttag(~{name, _}) { name }\n           doc::enumtag(~{name, _}) { name }\n@@ -114,20 +92,6 @@ fn exported_items_from(\n     }\n }\n \n-fn exported_mods_from(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc,\n-    is_exported: fn(astsrv::srv, str) -> bool\n-) -> [doc::moddoc] {\n-    vec::filter_map(*doc.mods) { |doc|\n-        if is_exported(srv, doc.name) {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    }\n-}\n-\n fn exported_variants_from(\n     srv: astsrv::srv,\n     doc: doc::enumdoc,\n@@ -175,7 +139,7 @@ fn should_prune_unexported_fns() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(doc.topmod.mods[0].fns()) == 1u;\n+    assert vec::len(doc.topmod.mods()[0].fns()) == 1u;\n }\n \n #[test]\n@@ -193,7 +157,7 @@ fn should_prune_unexported_modules() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.mods[0].mods) == 1u;\n+    assert vec::len(doc.topmod.mods()[0].mods()) == 1u;\n }\n \n #[test]\n@@ -202,7 +166,7 @@ fn should_prune_unexported_modules_from_top_mod() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.mods) == 1u;\n+    assert vec::len(doc.topmod.mods()) == 1u;\n }\n \n #[test]\n@@ -213,7 +177,7 @@ fn should_prune_unexported_consts() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(doc.topmod.mods[0].consts()) == 1u;\n+    assert vec::len(doc.topmod.mods()[0].consts()) == 1u;\n }\n \n #[test]\n@@ -240,7 +204,7 @@ fn should_prune_unexported_enums() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(doc.topmod.mods[0].enums()) == 0u;\n+    assert vec::len(doc.topmod.mods()[0].enums()) == 0u;\n }\n \n #[test]\n@@ -258,7 +222,7 @@ fn should_prune_unexported_variants() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(doc.topmod.mods[0].enums()[0].variants) == 0u;\n+    assert vec::len(doc.topmod.mods()[0].enums()[0].variants) == 0u;\n }\n \n #[test]\n@@ -276,5 +240,5 @@ fn should_prune_unexported_resources() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::is_empty(doc.topmod.mods[0].resources());\n+    assert vec::is_empty(doc.topmod.mods()[0].resources());\n }"}, {"sha": "6374860573dcbac5d5c6b7eff78ab889c9cc9079", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -51,8 +51,7 @@ fn test_run_passes() {\n                 path: [],\n                 brief: none,\n                 desc: none,\n-                items: [],\n-                mods: doc::modlist([])\n+                items: []\n             }\n         }\n     }\n@@ -67,8 +66,7 @@ fn test_run_passes() {\n                 path: [],\n                 brief: none,\n                 desc: none,\n-                items: [],\n-                mods: doc::modlist([])\n+                items: []\n             }\n         }\n     }"}, {"sha": "b5a635b93574fb6e74f55a46a1f12dd7dda8c23c", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c93bdbe1fa9e6131a8a552753c0c476c5f922b/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=f8c93bdbe1fa9e6131a8a552753c0c476c5f922b", "patch": "@@ -22,8 +22,8 @@ fn should_trim_mod() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.mods[0].brief == some(\"brief\");\n-    assert doc.topmod.mods[0].desc == some(\"desc\");\n+    assert doc.topmod.mods()[0].brief == some(\"brief\");\n+    assert doc.topmod.mods()[0].desc == some(\"desc\");\n }\n \n #[test]"}]}