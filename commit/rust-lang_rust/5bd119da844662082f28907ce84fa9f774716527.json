{"sha": "5bd119da844662082f28907ce84fa9f774716527", "node_id": "C_kwDOAAsO6NoAKDViZDExOWRhODQ0NjYyMDgyZjI4OTA3Y2U4NGZhOWY3NzQ3MTY1Mjc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-01T02:41:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-01T02:41:51Z"}, "message": "Rollup merge of #94384 - cuviper:atomic-slice, r=dtolnay\n\nAdd Atomic*::from_mut_slice\n\nTracking issue #76314 for `from_mut` has a question about the possibility of `from_mut_slice`, and I found a real case for it. A user in the forum had a parallelism problem that could be solved by open-indexing updates to a vector of atomics, but they didn't want to affect the other code using that vector. Using `from_mut_slice`, they could borrow that data as atomics just long enough for their parallel loop.\n\nref: https://users.rust-lang.org/t/sharing-vector-with-rayon-par-iter-correctly/72022", "tree": {"sha": "6f988dca80dad0f1e21f342725c80850718a0781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f988dca80dad0f1e21f342725c80850718a0781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd119da844662082f28907ce84fa9f774716527", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHYfvCRBK7hj4Ov3rIwAASQgIACLpGtM+F/9TXnqK1NL9EY3Z\nvRLx+NPBNW3WjtKVIl55r/LEdcOD4C2M+YpMXUVPEoQq72eYnEzDMZfE2T/tSTu6\niisXpOfIumqT0g0psli22Fmz0CaaRZqm5m7nBvspZYTKqFrffriyTKloI88KvXl9\nyjFUTofm7Ot8h3oPEdEraEiaAqMPEbHehEzKj/q3GqM7wj5bBLdAemJRgi/x2w5j\nhr9i1qHujT9iPw24jfb0wPiE3jtU46IgqOL2QkZKusallvgLEt3S0YtdMZaR7yZI\nOPWltTF3q3PjazoiOpV7RmPFhYx86QlcCpssdGCcQZ3Dj5EoQ+O1iT3TbTogyYY=\n=Qb8x\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f988dca80dad0f1e21f342725c80850718a0781\nparent 06d47a414bdf6be59fe8393fdd1ccb0247dce6f2\nparent d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646102511 +0100\ncommitter GitHub <noreply@github.com> 1646102511 +0100\n\nRollup merge of #94384 - cuviper:atomic-slice, r=dtolnay\n\nAdd Atomic*::from_mut_slice\n\nTracking issue #76314 for `from_mut` has a question about the possibility of `from_mut_slice`, and I found a real case for it. A user in the forum had a parallelism problem that could be solved by open-indexing updates to a vector of atomics, but they didn't want to affect the other code using that vector. Using `from_mut_slice`, they could borrow that data as atomics just long enough for their parallel loop.\n\nref: https://users.rust-lang.org/t/sharing-vector-with-rayon-par-iter-correctly/72022\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd119da844662082f28907ce84fa9f774716527", "html_url": "https://github.com/rust-lang/rust/commit/5bd119da844662082f28907ce84fa9f774716527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd119da844662082f28907ce84fa9f774716527/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "html_url": "https://github.com/rust-lang/rust/commit/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2"}, {"sha": "d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "html_url": "https://github.com/rust-lang/rust/commit/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "2b8bbe1924450a41a8f20d01e3018631f6da3aae", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5bd119da844662082f28907ce84fa9f774716527/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd119da844662082f28907ce84fa9f774716527/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=5bd119da844662082f28907ce84fa9f774716527", "patch": "@@ -340,6 +340,32 @@ impl AtomicBool {\n         unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n+    /// Get atomic access to a `&mut [bool]` slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bools = [false; 10];\n+    /// let a = &*AtomicBool::from_mut_slice(&mut some_bools);\n+    /// std::thread::scope(|s| {\n+    ///     for i in 0..a.len() {\n+    ///         s.spawn(move |_| a[i].store(true, Ordering::Relaxed));\n+    ///     }\n+    /// });\n+    /// assert_eq!(some_bools, [true; 10]);\n+    /// ```\n+    #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"8\")]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn from_mut_slice(v: &mut [bool]) -> &mut [Self] {\n+        // SAFETY: the mutable reference guarantees unique ownership, and\n+        // alignment of both `bool` and `Self` is 1.\n+        unsafe { &mut *(v as *mut [bool] as *mut [Self]) }\n+    }\n+\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -945,6 +971,42 @@ impl<T> AtomicPtr<T> {\n         unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n+    /// Get atomic access to a slice of pointers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// use std::ptr::null_mut;\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut some_ptrs = [null_mut::<String>(); 10];\n+    /// let a = &*AtomicPtr::from_mut_slice(&mut some_ptrs);\n+    /// std::thread::scope(|s| {\n+    ///     for i in 0..a.len() {\n+    ///         s.spawn(move |_| {\n+    ///             let name = Box::new(format!(\"thread{i}\"));\n+    ///             a[i].store(Box::into_raw(name), Ordering::Relaxed);\n+    ///         });\n+    ///     }\n+    /// });\n+    /// for p in some_ptrs {\n+    ///     assert!(!p.is_null());\n+    ///     let name = unsafe { Box::from_raw(p) };\n+    ///     println!(\"Hello, {name}!\");\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"ptr\")]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn from_mut_slice(v: &mut [*mut T]) -> &mut [Self] {\n+        // SAFETY:\n+        //  - the mutable reference guarantees unique ownership.\n+        //  - the alignment of `*mut T` and `Self` is the same on all platforms\n+        //    supported by rust, as verified above.\n+        unsafe { &mut *(v as *mut [*mut T] as *mut [Self]) }\n+    }\n+\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -1459,6 +1521,38 @@ macro_rules! atomic_int {\n                 unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n+            #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_mut, scoped_threads)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n+            ///\n+            /// let mut some_ints = [0; 10];\n+            #[doc = concat!(\"let a = &*\", stringify!($atomic_type), \"::from_mut_slice(&mut some_ints);\")]\n+            /// std::thread::scope(|s| {\n+            ///     for i in 0..a.len() {\n+            ///         s.spawn(move |_| a[i].store(i as _, Ordering::Relaxed));\n+            ///     }\n+            /// });\n+            /// for (i, n) in some_ints.into_iter().enumerate() {\n+            ///     assert_eq!(i, n as usize);\n+            /// }\n+            /// ```\n+            #[inline]\n+            #[$cfg_align]\n+            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+            pub fn from_mut_slice(v: &mut [$int_type]) -> &mut [Self] {\n+                use crate::mem::align_of;\n+                let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n+                // SAFETY:\n+                //  - the mutable reference guarantees unique ownership.\n+                //  - the alignment of `$int_type` and `Self` is the\n+                //    same, as promised by $cfg_align and verified above.\n+                unsafe { &mut *(v as *mut [$int_type] as *mut [Self]) }\n+            }\n+\n             /// Consumes the atomic and returns the contained value.\n             ///\n             /// This is safe because passing `self` by value guarantees that no other threads are"}]}