{"sha": "96c16bc3827693cef9108d684d63b17a8fe9f128", "node_id": "C_kwDOAAsO6NoAKDk2YzE2YmMzODI3NjkzY2VmOTEwOGQ2ODRkNjNiMTdhOGZlOWYxMjg", "commit": {"author": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-28T04:13:45Z"}, "committer": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-28T04:56:51Z"}, "message": "redirct: use iterators and knowledge about preordered arrays for more efficient merging", "tree": {"sha": "14b7509d40ec98b920f114a0c6663594cd3f5b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b7509d40ec98b920f114a0c6663594cd3f5b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c16bc3827693cef9108d684d63b17a8fe9f128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c16bc3827693cef9108d684d63b17a8fe9f128", "html_url": "https://github.com/rust-lang/rust/commit/96c16bc3827693cef9108d684d63b17a8fe9f128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c16bc3827693cef9108d684d63b17a8fe9f128/comments", "author": null, "committer": null, "parents": [{"sha": "ff59147d5377d3ab06cb0d675725da10534d94e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff59147d5377d3ab06cb0d675725da10534d94e9", "html_url": "https://github.com/rust-lang/rust/commit/ff59147d5377d3ab06cb0d675725da10534d94e9"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "3f2ee2c572711243735b6e598c111ba41de7478b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c16bc3827693cef9108d684d63b17a8fe9f128/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/96c16bc3827693cef9108d684d63b17a8fe9f128/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=96c16bc3827693cef9108d684d63b17a8fe9f128", "patch": "@@ -1668,6 +1668,7 @@ checksum = \"288cb548dbe72b652243ea797201f3d481a0609a967980fcc5b2315ea811560a\"\n name = \"text_edit\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools\",\n  \"text-size\",\n ]\n "}, {"sha": "dae69e265d7f5dd7a11f72c56395f104d84e707f", "filename": "crates/text_edit/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c16bc3827693cef9108d684d63b17a8fe9f128/crates%2Ftext_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/96c16bc3827693cef9108d684d63b17a8fe9f128/crates%2Ftext_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2FCargo.toml?ref=96c16bc3827693cef9108d684d63b17a8fe9f128", "patch": "@@ -10,4 +10,5 @@ rust-version = \"1.57\"\n doctest = false\n \n [dependencies]\n+itertools = \"0.10.0\"\n text-size = \"1.0.0\""}, {"sha": "1a6add057896a9ac0ae9d7bce2a876f45e3b8e59", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/96c16bc3827693cef9108d684d63b17a8fe9f128/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c16bc3827693cef9108d684d63b17a8fe9f128/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=96c16bc3827693cef9108d684d63b17a8fe9f128", "patch": "@@ -4,6 +4,8 @@\n //! so `TextEdit` is the ultimate representation of the work done by\n //! rust-analyzer.\n \n+use itertools::Itertools;\n+use std::cmp::max;\n pub use text_size::{TextRange, TextSize};\n \n /// `InsertDelete` -- a single \"atomic\" change to text\n@@ -91,13 +93,15 @@ impl TextEdit {\n         }\n \n         let text_size = TextSize::of(&*text);\n-        let mut total_len = text_size.clone();\n+        let mut total_len = text_size;\n+        let mut max_total_len = text_size.clone();\n         for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.len();\n+            max_total_len = max(max_total_len, total_len);\n         }\n \n-        if let Some(additional) = total_len.checked_sub(text_size.into()) {\n+        if let Some(additional) = max_total_len.checked_sub(text_size.into()) {\n             text.reserve(additional.into());\n         }\n \n@@ -109,16 +113,14 @@ impl TextEdit {\n     }\n \n     pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {\n-        // FIXME: can be done without allocating intermediate vector\n-        let mut all = self.iter().chain(other.iter()).collect::<Vec<_>>();\n-        if !check_disjoint_and_sort(&mut all) {\n+        let iter_merge =\n+            self.iter().merge_by(other.iter(), |l, r| l.delete.start() <= r.delete.start());\n+        if !check_disjoint(&mut iter_merge.clone()) {\n             return Err(other);\n         }\n \n-        self.indels.extend(other.indels);\n-        check_disjoint_and_sort(&mut self.indels);\n         // Only dedup deletions and replacements, keep all insertions\n-        self.indels.dedup_by(|a, b| a == b && !a.delete.is_empty());\n+        self.indels = iter_merge.dedup_by(|a, b| a == b && !a.delete.is_empty()).cloned().collect();\n         Ok(())\n     }\n \n@@ -188,14 +190,17 @@ impl TextEditBuilder {\n fn assert_disjoint_or_equal(indels: &mut [Indel]) {\n     assert!(check_disjoint_and_sort(indels));\n }\n-// FIXME: Remove the impl Bound here, it shouldn't be needed\n-fn check_disjoint_and_sort(indels: &mut [impl std::borrow::Borrow<Indel>]) -> bool {\n-    indels.sort_by_key(|indel| (indel.borrow().delete.start(), indel.borrow().delete.end()));\n-    indels.iter().zip(indels.iter().skip(1)).all(|(l, r)| {\n-        let l = l.borrow();\n-        let r = r.borrow();\n-        l.delete.end() <= r.delete.start() || l == r\n-    })\n+\n+fn check_disjoint_and_sort(indels: &mut [Indel]) -> bool {\n+    indels.sort_by_key(|indel| (indel.delete.start(), indel.delete.end()));\n+    check_disjoint(&mut indels.iter())\n+}\n+\n+fn check_disjoint<'a, I>(indels: &mut I) -> bool\n+where\n+    I: std::iter::Iterator<Item = &'a Indel> + Clone,\n+{\n+    indels.clone().zip(indels.skip(1)).all(|(l, r)| l.delete.end() <= r.delete.start() || l == r)\n }\n \n #[cfg(test)]\n@@ -232,6 +237,22 @@ mod tests {\n         assert_eq!(edit1.indels.len(), 3);\n     }\n \n+    #[test]\n+    fn test_union_with_duplicates() {\n+        let mut builder1 = TextEditBuilder::default();\n+        builder1.delete(range(7, 11));\n+        builder1.delete(range(13, 17));\n+\n+        let mut builder2 = TextEditBuilder::default();\n+        builder2.delete(range(1, 5));\n+        builder2.delete(range(13, 17));\n+\n+        let mut edit1 = builder1.finish();\n+        let edit2 = builder2.finish();\n+        assert!(edit1.union(edit2).is_ok());\n+        assert_eq!(edit1.indels.len(), 3);\n+    }\n+\n     #[test]\n     fn test_union_panics() {\n         let mut edit1 = TextEdit::delete(range(7, 11));"}]}