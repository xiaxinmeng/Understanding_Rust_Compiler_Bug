{"sha": "6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzNhMGEyZWM4YTMyMDE2ZmNiMzUzNDJhZTlkMDgwODdlMzhkNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T03:30:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T03:30:13Z"}, "message": "Auto merge of #88978 - bjorn3:move_symbol_interner_lock, r=Mark-Simulacrum\n\nMove the Lock into symbol::Interner\n\nThis makes it easier to make the symbol interner (near) lock free in case of concurrent accesses in the future.\n\nWith https://github.com/rust-lang/rust/pull/87867 landed this shouldn't affect performance anymore.", "tree": {"sha": "29210e998d8a3cb0331b40a419e07d23bd880795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29210e998d8a3cb0331b40a419e07d23bd880795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "html_url": "https://github.com/rust-lang/rust/commit/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e398f5ba77b283b529c0c61cc2313c4f82d61dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e398f5ba77b283b529c0c61cc2313c4f82d61dd", "html_url": "https://github.com/rust-lang/rust/commit/8e398f5ba77b283b529c0c61cc2313c4f82d61dd"}, {"sha": "ccba8cb4bb6ba5c2c136f14952ff6119020cc7f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccba8cb4bb6ba5c2c136f14952ff6119020cc7f5", "html_url": "https://github.com/rust-lang/rust/commit/ccba8cb4bb6ba5c2c136f14952ff6119020cc7f5"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "9c5469f635f71ee8c3f6d136d9b60f19242ea749", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "patch": "@@ -78,7 +78,7 @@ mod tests;\n // threads within the compilation session, but is not accessible outside the\n // session.\n pub struct SessionGlobals {\n-    symbol_interner: Lock<symbol::Interner>,\n+    symbol_interner: symbol::Interner,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n     source_map: Lock<Option<Lrc<SourceMap>>>,\n@@ -87,7 +87,7 @@ pub struct SessionGlobals {\n impl SessionGlobals {\n     pub fn new(edition: Edition) -> SessionGlobals {\n         SessionGlobals {\n-            symbol_interner: Lock::new(symbol::Interner::fresh()),\n+            symbol_interner: symbol::Interner::fresh(),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n             hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),\n             source_map: Lock::new(None),"}, {"sha": "78846d8ffb26b028536923a2d85528a0865637d4", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "patch": "@@ -5,6 +5,7 @@\n use rustc_arena::DroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::sync::Lock;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n@@ -1623,14 +1624,15 @@ impl Symbol {\n \n     /// Maps a string to its interned representation.\n     pub fn intern(string: &str) -> Self {\n-        with_interner(|interner| interner.intern(string))\n+        with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))\n     }\n \n     /// Convert to a `SymbolStr`. This is a slowish operation because it\n     /// requires locking the symbol interner.\n     pub fn as_str(self) -> SymbolStr {\n-        with_interner(|interner| unsafe {\n-            SymbolStr { string: std::mem::transmute::<&str, &str>(interner.get(self)) }\n+        with_session_globals(|session_globals| {\n+            let symbol_str = session_globals.symbol_interner.get(self);\n+            unsafe { SymbolStr { string: std::mem::transmute::<&str, &str>(symbol_str) } }\n         })\n     }\n \n@@ -1639,7 +1641,7 @@ impl Symbol {\n     }\n \n     pub fn len(self) -> usize {\n-        with_interner(|interner| interner.get(self).len())\n+        with_session_globals(|session_globals| session_globals.symbol_interner.get(self).len())\n     }\n \n     pub fn is_empty(self) -> bool {\n@@ -1696,6 +1698,9 @@ impl<CTX> ToStableHashKey<CTX> for Symbol {\n     }\n }\n \n+#[derive(Default)]\n+pub(crate) struct Interner(Lock<InternerInner>);\n+\n // The `&'static str`s in this type actually point into the arena.\n //\n // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278\n@@ -1705,45 +1710,46 @@ impl<CTX> ToStableHashKey<CTX> for Symbol {\n // This type is private to prevent accidentally constructing more than one `Interner` on the same\n // thread, which makes it easy to mixup `Symbol`s between `Interner`s.\n #[derive(Default)]\n-pub(crate) struct Interner {\n+struct InternerInner {\n     arena: DroplessArena,\n     names: FxHashMap<&'static str, Symbol>,\n     strings: Vec<&'static str>,\n }\n \n impl Interner {\n     fn prefill(init: &[&'static str]) -> Self {\n-        Interner {\n+        Interner(Lock::new(InternerInner {\n             strings: init.into(),\n             names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),\n             ..Default::default()\n-        }\n+        }))\n     }\n \n     #[inline]\n-    pub fn intern(&mut self, string: &str) -> Symbol {\n-        if let Some(&name) = self.names.get(string) {\n+    fn intern(&self, string: &str) -> Symbol {\n+        let mut inner = self.0.lock();\n+        if let Some(&name) = inner.names.get(string) {\n             return name;\n         }\n \n-        let name = Symbol::new(self.strings.len() as u32);\n+        let name = Symbol::new(inner.strings.len() as u32);\n \n         // `from_utf8_unchecked` is safe since we just allocated a `&str` which is known to be\n         // UTF-8.\n         let string: &str =\n-            unsafe { str::from_utf8_unchecked(self.arena.alloc_slice(string.as_bytes())) };\n+            unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };\n         // It is safe to extend the arena allocation to `'static` because we only access\n         // these while the arena is still alive.\n         let string: &'static str = unsafe { &*(string as *const str) };\n-        self.strings.push(string);\n-        self.names.insert(string, name);\n+        inner.strings.push(string);\n+        inner.names.insert(string, name);\n         name\n     }\n \n     // Get the symbol as a string. `Symbol::as_str()` should be used in\n     // preference to this function.\n-    pub fn get(&self, symbol: Symbol) -> &str {\n-        self.strings[symbol.0.as_usize()]\n+    fn get(&self, symbol: Symbol) -> &str {\n+        self.0.lock().strings[symbol.0.as_usize()]\n     }\n }\n \n@@ -1874,11 +1880,6 @@ impl Ident {\n     }\n }\n \n-#[inline]\n-fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n-    with_session_globals(|session_globals| f(&mut *session_globals.symbol_interner.lock()))\n-}\n-\n /// An alternative to [`Symbol`], useful when the chars within the symbol need to\n /// be accessed. It deliberately has limited functionality and should only be\n /// used for temporary values."}, {"sha": "0958fce5fee304fbd6f918a16efcf40e65e47cef", "filename": "compiler/rustc_span/src/symbol/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/compiler%2Frustc_span%2Fsrc%2Fsymbol%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c33a0a2ec8a32016fcb35342ae9d08087e38d5c/compiler%2Frustc_span%2Fsrc%2Fsymbol%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol%2Ftests.rs?ref=6c33a0a2ec8a32016fcb35342ae9d08087e38d5c", "patch": "@@ -4,7 +4,7 @@ use crate::create_default_session_globals_then;\n \n #[test]\n fn interner_tests() {\n-    let mut i: Interner = Interner::default();\n+    let i = Interner::default();\n     // first one is zero:\n     assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n     // re-use gets the same entry:"}]}