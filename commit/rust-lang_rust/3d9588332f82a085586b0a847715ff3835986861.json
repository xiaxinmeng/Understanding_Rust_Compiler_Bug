{"sha": "3d9588332f82a085586b0a847715ff3835986861", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOTU4ODMzMmY4MmEwODU1ODZiMGE4NDc3MTVmZjM4MzU5ODY4NjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-01T11:08:19Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-01T11:09:40Z"}, "message": "address comments", "tree": {"sha": "a0b8883c08cb5df88a5eaa139576ae78935699b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0b8883c08cb5df88a5eaa139576ae78935699b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9588332f82a085586b0a847715ff3835986861", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXdk90AAoJEFbW7qD8Z6xGECAQAKRk7cOhb+4el2gZcvcnlJ6P\ng0poXz9Aj4WToHq+mfl0Ov3uF3EOWuthWNTV9E1T/61wfi5jdLpcfZ13UsoT8Dcn\n9ZVzlP6PGpjNe+B/K/AuFAhXU5LaILXSZdI7GIw5zEJhcD31UPKEAXEJjYs6OhrL\nQSIjXaivfNY55jRL6EZN/WCcwTOQ0jbxySNnbDvogPY2q9TAT1kYcs40D5IxLfO6\nv0t6L/KsUJcY3N/EwYPevr3/rklO9gYhawXU7QJt5OkHPK7h8AX+Ky5kDwaMdvKx\n8+xvxYtXQ5ihk1liqSGLIDP3sqG2rarRao+x2nGx+ezt9uCF38+ToRus6Z6IK6yw\nHxOLzV2zrias5Dvfv4X6928TxoK9ZqkiG9x3AZXTAlqBuf9gy878kOY+oKkCSQyU\nTo4N/N/qxJ4kETToIN6yLJR+aYhoq1kMqUoN0PYfTCHNqT5owyZPtNGBYER9lXV8\n6Xhm1FVJUHPygvd92BkEwPdikThnIa8fs7Da2aZCc9/DyfGZq+YzBmqmGHxv1p4v\nMyNuwm4Q5Bc350OVogXDUhsG8f02eEEfh61RmsJLbsnUns4nNQxmsEyQjRetYCjy\ntK40WL6EqxsRicAVOFVKQJXku6fH8UaCYfwmMten1A/dK70M+6Cq4DNRMn0IzfSL\niCaMCYVZ7cbmFGiPMr0r\n=rQ9b\n-----END PGP SIGNATURE-----", "payload": "tree a0b8883c08cb5df88a5eaa139576ae78935699b0\nparent 594f1d79da1eebb2acb674b686d98b4fc1ef165f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467371299 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467371380 +0200\n\naddress comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9588332f82a085586b0a847715ff3835986861", "html_url": "https://github.com/rust-lang/rust/commit/3d9588332f82a085586b0a847715ff3835986861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9588332f82a085586b0a847715ff3835986861/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594f1d79da1eebb2acb674b686d98b4fc1ef165f", "url": "https://api.github.com/repos/rust-lang/rust/commits/594f1d79da1eebb2acb674b686d98b4fc1ef165f", "html_url": "https://github.com/rust-lang/rust/commit/594f1d79da1eebb2acb674b686d98b4fc1ef165f"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "2f5b4470cf993e95b6c6317eeed676cf05ff028e", "filename": "src/memory.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d9588332f82a085586b0a847715ff3835986861/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9588332f82a085586b0a847715ff3835986861/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=3d9588332f82a085586b0a847715ff3835986861", "patch": "@@ -39,15 +39,14 @@ pub struct Pointer {\n \n impl Pointer {\n     pub fn offset(self, i: isize) -> Self {\n-        // FIXME: prevent offsetting ZST ptrs in tracing mode\n         Pointer { offset: (self.offset as isize + i) as usize, ..self }\n     }\n     pub fn points_to_zst(&self) -> bool {\n         self.alloc_id.0 == 0\n     }\n     fn zst_ptr() -> Self {\n         Pointer {\n-            alloc_id: AllocId(0),\n+            alloc_id: ZST_ALLOC_ID,\n             offset: 0,\n         }\n     }\n@@ -76,6 +75,8 @@ pub struct Memory<'a, 'tcx> {\n     pub layout: &'a TargetDataLayout,\n }\n \n+const ZST_ALLOC_ID: AllocId = AllocId(0);\n+\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn new(layout: &'a TargetDataLayout) -> Self {\n         let mut mem = Memory {\n@@ -86,16 +87,16 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             layout: layout,\n         };\n         // alloc id 0 is reserved for ZSTs, this is an optimization to prevent ZST\n-        // (e.g. function pointers, (), [], ...) from requiring memory\n+        // (e.g. function items, (), [], ...) from requiring memory\n         let alloc = Allocation {\n             bytes: Vec::new(),\n             relocations: BTreeMap::new(),\n             undef_mask: UndefMask::new(0),\n         };\n-        mem.alloc_map.insert(AllocId(0), alloc);\n+        mem.alloc_map.insert(ZST_ALLOC_ID, alloc);\n         // check that additional zst allocs work\n         debug_assert!(mem.allocate(0).points_to_zst());\n-        debug_assert!(mem.get(AllocId(0)).is_ok());\n+        debug_assert!(mem.get(ZST_ALLOC_ID).is_ok());\n         mem\n     }\n \n@@ -147,17 +148,13 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     // TODO(solson): Track which allocations were returned from __rust_allocate and report an error\n     // when reallocating/deallocating any others.\n     pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<'tcx, Pointer> {\n-        if ptr.points_to_zst() {\n-            if new_size != 0 {\n-                return Ok(self.allocate(new_size));\n-            } else {\n-                return Ok(ptr);\n-            }\n-        }\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n             return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n         }\n+        if ptr.points_to_zst() {\n+            return Ok(self.allocate(new_size));\n+        }\n \n         let size = self.get_mut(ptr.alloc_id)?.bytes.len();\n \n@@ -187,10 +184,12 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n \n         if self.alloc_map.remove(&ptr.alloc_id).is_none() {\n+            debug!(\"deallocated a pointer twice: {}\", ptr.alloc_id);\n             // TODO(solson): Report error about erroneous free. This is blocked on properly tracking\n             // already-dropped state since this if-statement is entered even in safe code without\n             // it.\n         }\n+        debug!(\"deallocated : {}\", ptr.alloc_id);\n \n         Ok(())\n     }"}, {"sha": "f6a305840c241be8213fbad1c5c11532e3f27a35", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9588332f82a085586b0a847715ff3835986861/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9588332f82a085586b0a847715ff3835986861/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=3d9588332f82a085586b0a847715ff3835986861", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation 31 which has size 2\n+    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "5509a8346e552b323f16fb755ab46cd8aff3ce9c", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d9588332f82a085586b0a847715ff3835986861/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9588332f82a085586b0a847715ff3835986861/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=3d9588332f82a085586b0a847715ff3835986861", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let v: Vec<u8> = vec![1, 2];\n+    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation\n+    panic!(\"this should never print: {}\", x);\n+}"}]}