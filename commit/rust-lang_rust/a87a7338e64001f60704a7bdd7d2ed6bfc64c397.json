{"sha": "a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4N2E3MzM4ZTY0MDAxZjYwNzA0YTdiZGQ3ZDJlZDZiZmM2NGMzOTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-21T11:43:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-21T11:47:12Z"}, "message": "test System/Global allocator API: alloc_zeroed, realloc", "tree": {"sha": "251f923e3648f038610e9ca342c01cf91d2d5215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251f923e3648f038610e9ca342c01cf91d2d5215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "html_url": "https://github.com/rust-lang/rust/commit/a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788616d0f010fd7307ffe3b19d19415bae7782ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/788616d0f010fd7307ffe3b19d19415bae7782ed", "html_url": "https://github.com/rust-lang/rust/commit/788616d0f010fd7307ffe3b19d19415bae7782ed"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "91e15f249d452dc4539431464549ebc974766afb", "filename": "tests/run-pass/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/tests%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/tests%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv.rs?ref=a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "patch": "@@ -1,4 +1,4 @@\n-//ignore-windows: env var emulation not implemented on Windows\n+//ignore-windows: TODO env var emulation stubbed out on Windows\n \n use std::env;\n "}, {"sha": "25a816bcf2454df0d074259e3aaafcffe7ba43e6", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "patch": "@@ -27,13 +27,12 @@ fn test_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n }\n \n fn main() {\n-    if cfg!(not(target_os = \"macos\")) {\n-        let map: HashMap<i32, i32> = HashMap::default();\n-        test_map(map);\n-    } else {\n-        // TODO: Implement random number generation on OS X.\n+    if cfg!(target_os = \"macos\") { // TODO: Implement random number generation on OS X.\n         // Until then, use a deterministic map.\n         let map : HashMap<i32, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = HashMap::default();\n         test_map(map);\n+    } else {\n+        let map: HashMap<i32, i32> = HashMap::default();\n+        test_map(map);\n     }\n }"}, {"sha": "b201f24e25634b37c2fc2d2b73c047c32928f617", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a7338e64001f60704a7bdd7d2ed6bfc64c397/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=a87a7338e64001f60704a7bdd7d2ed6bfc64c397", "patch": "@@ -1,9 +1,32 @@\n-//ignore-windows: inspects allocation base address on Windows\n-\n #![feature(allocator_api)]\n \n use std::ptr::NonNull;\n use std::alloc::{Global, Alloc, Layout, System};\n+use std::slice;\n+\n+fn check_alloc<T: Alloc>(mut allocator: T) { unsafe {\n+    let layout = Layout::from_size_align(20, 4).unwrap();\n+    let a = allocator.alloc(layout).unwrap();\n+    allocator.dealloc(a, layout);\n+\n+    let p1 = allocator.alloc_zeroed(layout).unwrap();\n+\n+    let p2 = allocator.realloc(p1, Layout::from_size_align(20, 4).unwrap(), 40).unwrap();\n+    let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n+    assert_eq!(&slice, &[0_u8; 20]);\n+\n+    // old size == new size\n+    let p3 = allocator.realloc(p2, Layout::from_size_align(40, 4).unwrap(), 40).unwrap();\n+    let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n+    assert_eq!(&slice, &[0_u8; 20]);\n+\n+    // old size > new size\n+    let p4 = allocator.realloc(p3, Layout::from_size_align(40, 4).unwrap(), 10).unwrap();\n+    let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n+    assert_eq!(&slice, &[0_u8; 10]);\n+\n+    allocator.dealloc(p4, Layout::from_size_align(10, 4).unwrap());\n+} }\n \n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n     let size = 8;\n@@ -50,6 +73,9 @@ fn box_to_global() {\n }\n \n fn main() {\n+    check_alloc(System);\n+    check_alloc(Global);\n+    #[cfg(not(target_os = \"windows\"))] // TODO: Inspects allocation base address on Windows; needs intptrcast model\n     check_overalign_requests(System);\n     check_overalign_requests(Global);\n     global_to_box();"}]}