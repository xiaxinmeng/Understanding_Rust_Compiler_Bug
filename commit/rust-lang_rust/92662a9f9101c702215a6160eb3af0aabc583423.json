{"sha": "92662a9f9101c702215a6160eb3af0aabc583423", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjYyYTlmOTEwMWM3MDIyMTVhNjE2MGViM2FmMGFhYmM1ODM0MjM=", "commit": {"author": {"name": "reedlepee", "email": "reedlepee123@gmail.com", "date": "2013-10-20T05:51:30Z"}, "committer": {"name": "reedlepee", "email": "reedlepee123@gmail.com", "date": "2013-10-22T19:40:50Z"}, "message": "Removed unnecessary comments and white spaces as suggested", "tree": {"sha": "3a810232670bd76a18b966a28191951b96113d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a810232670bd76a18b966a28191951b96113d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92662a9f9101c702215a6160eb3af0aabc583423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92662a9f9101c702215a6160eb3af0aabc583423", "html_url": "https://github.com/rust-lang/rust/commit/92662a9f9101c702215a6160eb3af0aabc583423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92662a9f9101c702215a6160eb3af0aabc583423/comments", "author": {"login": "reedlepee123", "id": 5721031, "node_id": "MDQ6VXNlcjU3MjEwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5721031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedlepee123", "html_url": "https://github.com/reedlepee123", "followers_url": "https://api.github.com/users/reedlepee123/followers", "following_url": "https://api.github.com/users/reedlepee123/following{/other_user}", "gists_url": "https://api.github.com/users/reedlepee123/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedlepee123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedlepee123/subscriptions", "organizations_url": "https://api.github.com/users/reedlepee123/orgs", "repos_url": "https://api.github.com/users/reedlepee123/repos", "events_url": "https://api.github.com/users/reedlepee123/events{/privacy}", "received_events_url": "https://api.github.com/users/reedlepee123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reedlepee123", "id": 5721031, "node_id": "MDQ6VXNlcjU3MjEwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5721031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedlepee123", "html_url": "https://github.com/reedlepee123", "followers_url": "https://api.github.com/users/reedlepee123/followers", "following_url": "https://api.github.com/users/reedlepee123/following{/other_user}", "gists_url": "https://api.github.com/users/reedlepee123/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedlepee123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedlepee123/subscriptions", "organizations_url": "https://api.github.com/users/reedlepee123/orgs", "repos_url": "https://api.github.com/users/reedlepee123/repos", "events_url": "https://api.github.com/users/reedlepee123/events{/privacy}", "received_events_url": "https://api.github.com/users/reedlepee123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "html_url": "https://github.com/rust-lang/rust/commit/ad465441ba3424cc5bcba2227c6a42ffe09fd77f"}], "stats": {"total": 96, "additions": 30, "deletions": 66}, "files": [{"sha": "1ce52d1d2784a61b82cca5443b47e64109bcf4e5", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -521,7 +521,6 @@ fn borrow_rwlock<T:Freeze + Send>(state: *mut RWArcInner<T>) -> *RWLock {\n \n /// The \"write permission\" token used for RWArc.write_downgrade().\n pub struct RWWriteMode<'self, T> {\n-\n     priv data: &'self mut T,\n     priv token: sync::RWLockWriteMode<'self>,\n     priv poison: PoisonOnFail,"}, {"sha": "4a3801827a21120f83ede468b37bca0e3b5ffc7b", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -91,7 +91,6 @@ pub fn DuplexStream<T:Send,U:Send>()\n }\n \n /// An extension of `pipes::stream` that provides synchronous message sending.\n-// all were already priv\n pub struct SyncChan<T> { priv duplex_stream: DuplexStream<T, ()> }\n /// An extension of `pipes::stream` that acknowledges each message received.\n pub struct SyncPort<T> { priv duplex_stream: DuplexStream<(), T> }"}, {"sha": "34515a2b955cb0b7ebe600fa38c5511821bd9f47", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -618,8 +618,8 @@ pub mod writer {\n \n     // ebml writing\n     pub struct Encoder {\n-    writer: @io::Writer,\n-    priv size_positions: ~[uint],\n+        writer: @io::Writer,\n+        priv size_positions: ~[uint],\n     }\n \n     impl Clone for Encoder {"}, {"sha": "49072dab6d025c76ada29125361f0d86affecf8e", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -109,9 +109,9 @@ file is `stdin`.\n */\n #[deriving(Clone)]\n pub struct FileInputState {\n-    priv current_path: Option<Path>,\n-    priv line_num: uint,\n-    priv line_num_file: uint\n+    current_path: Option<Path>,\n+    line_num: uint,\n+    line_num_file: uint\n }\n \n impl FileInputState {"}, {"sha": "38b4d83fe0be42afc400d32f57afcc2e079e1c4b", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -114,9 +114,9 @@ pub enum Occur {\n pub struct Opt {\n     /// Name of the option\n     name: Name,\n-    /// Wheter it has an argument...  should be public!!\n+    /// Wheter it has an argument\n     hasarg: HasArg,\n-    /// How often it can occur... should be private !!\n+    /// How often it can occur\n     occur: Occur,\n     /// Which options it aliases\n     priv aliases: ~[Opt],\n@@ -133,13 +133,11 @@ enum Optval {\n /// of matches and a vector of free strings.\n #[deriving(Clone, Eq)]\n pub struct Matches {\n-\n     /// Options that matched\n     priv opts: ~[Opt],\n     /// Values of the Options that matched\n     priv vals: ~[~[Optval]],\n     /// Free string fragments\n-    // public\n     free: ~[~str]\n }\n "}, {"sha": "58af80fefb787184691bf0488e4c5e7b97e02da9", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -25,9 +25,9 @@ use std::num::{Zero,One,ToStrRadix};\n #[deriving(Eq,Clone)]\n pub struct Cmplx<T> {\n     /// Real portion of the complex number\n-    priv re: T,\n+    re: T,\n     /// Imaginary portion of the complex number\n-    priv im: T\n+    im: T\n }\n \n pub type Complex32 = Cmplx<f32>;"}, {"sha": "131cf063d1d356f9e82f26779e9a56bfb27b2979", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -167,8 +167,6 @@ enum ReacquireOrderLock<'self> {\n \n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n pub struct Condvar<'self> {\n-\n-\n     // The 'Sem' object associated with this condvar. This is the one that's\n     // atomically-unlocked-and-descheduled upon and reacquired during wakeup.\n     priv sem: &'self Sem<~[WaitQueue]>,\n@@ -667,7 +665,6 @@ impl RWLock {\n /// The \"write permission\" token used for rwlock.write_downgrade().\n \n pub struct RWLockWriteMode<'self> { priv lock: &'self RWLock, priv token: NonCopyable }\n-\n /// The \"read permission\" token used for rwlock.write_downgrade().\n pub struct RWLockReadMode<'self> { priv lock: &'self RWLock,\n                                    priv token: NonCopyable }"}, {"sha": "878224890e619f3bc05d463d261e2945cfaaf0d2", "filename": "src/libextra/term.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -95,7 +95,6 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n \n #[cfg(not(target_os = \"win32\"))]\n pub struct Terminal {\n-\n     priv num_colors: u16,\n     priv out: @io::Writer,\n     priv ti: ~TermInfo"}, {"sha": "9d5c9c1a5cd66fe9df469b2a16123e81b87ffdc7", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -478,20 +478,18 @@ pub mod rt;\n /// traits.\n pub struct Formatter<'self> {\n     /// Flags for formatting (packed version of rt::Flag)\n-     flags: uint,\n+    flags: uint,\n     /// Character used as 'fill' whenever there is alignment\n     fill: char,\n     /// Boolean indication of whether the output should be left-aligned\n     align: parse::Alignment,\n     /// Optionally specified integer width that the output should be\n     width: Option<uint>,\n     /// Optionally specified precision for numeric types\n-     precision: Option<uint>,\n+    precision: Option<uint>,\n \n     /// Output buffer.\n     buf: &'self mut io::Writer,\n-\n-    // already priv\n     priv curarg: vec::VecIterator<'self, Argument<'self>>,\n     priv args: &'self [Argument<'self>],\n }"}, {"sha": "b20af1a35b8c780b5c2b9b8d2deaa7d3f2f30945", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -38,7 +38,7 @@ pub struct FormatSpec {\n     fill: char,\n     align: parse::Alignment,\n     flags: uint,\n-     precision: Count,\n+    precision: Count,\n     width: Count,\n }\n "}, {"sha": "4e55c5fe60eb50c8741a59698039eeb7b85d959d", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -1815,9 +1815,9 @@ pub mod fsync {\n     }\n \n     pub struct Arg<t> {\n-       priv val: t,\n-       priv opt_level: Option<Level>,\n-       priv fsync_fn: extern \"Rust\" fn(f: &t, Level) -> int,\n+        priv val: t,\n+        priv opt_level: Option<Level>,\n+        priv fsync_fn: extern \"Rust\" fn(f: &t, Level) -> int,\n     }\n \n     // fsync file after executing blk"}, {"sha": "771be3b2a134fc375856af6a50aa0a93bcc827ac", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -792,7 +792,6 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n \n /// A mutable reference to an iterator\n pub struct ByRef<'self, T> {\n-    // already priv\n     priv iter: &'self mut T\n }\n \n@@ -928,7 +927,6 @@ impl<A, T: Clone + Iterator<A>> ClonableIterator for T {\n /// An iterator that repeats endlessly\n #[deriving(Clone)]\n pub struct Cycle<T> {\n-    // already priv\n     priv orig: T,\n     priv iter: T,\n }\n@@ -980,7 +978,6 @@ impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T>\n /// An iterator which strings two iterators together\n #[deriving(Clone)]\n pub struct Chain<T, U> {\n-    // already priv\n     priv a: T,\n     priv b: U,\n     priv flag: bool\n@@ -1050,7 +1047,6 @@ for Chain<T, U> {\n /// An iterator which iterates two other iterators simultaneously\n #[deriving(Clone)]\n pub struct Zip<T, U> {\n-    // already priv\n     priv a: T,\n     priv b: U\n }\n@@ -1129,7 +1125,6 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n \n /// An iterator which maps the values of `iter` with `f`\n pub struct Map<'self, A, B, T> {\n-    // already priv\n     priv iter: T,\n     priv f: &'self fn(A) -> B\n }\n@@ -1179,7 +1174,6 @@ impl<'self, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'s\n \n /// An iterator which filters the elements of `iter` with `predicate`\n pub struct Filter<'self, A, T> {\n-    // already priv\n     priv iter: T,\n     priv predicate: &'self fn(&A) -> bool\n }\n@@ -1224,7 +1218,6 @@ impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'sel\n \n /// An iterator which uses `f` to both filter and map elements from `iter`\n pub struct FilterMap<'self, A, B, T> {\n-    // already priv\n     priv iter: T,\n     priv f: &'self fn(A) -> Option<B>\n }\n@@ -1269,7 +1262,6 @@ for FilterMap<'self, A, B, T> {\n /// An iterator which yields the current count and the element during iteration\n #[deriving(Clone)]\n pub struct Enumerate<T> {\n-    // already priv\n     priv iter: T,\n     priv count: uint\n }\n@@ -1324,7 +1316,6 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n \n /// An iterator with a `peek()` that returns an optional reference to the next element.\n pub struct Peekable<A, T> {\n-    // already priv\n     priv iter: T,\n     priv peeked: Option<A>,\n }\n@@ -1369,7 +1360,6 @@ impl<'self, A, T: Iterator<A>> Peekable<A, T> {\n \n /// An iterator which rejects elements while `predicate` is true\n pub struct SkipWhile<'self, A, T> {\n-    // already priv\n     priv iter: T,\n     priv flag: bool,\n     priv predicate: &'self fn(&A) -> bool\n@@ -1408,7 +1398,6 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhile<'self, A, T> {\n \n /// An iterator which only accepts elements while `predicate` is true\n pub struct TakeWhile<'self, A, T> {\n-    // already priv\n     priv iter: T,\n     priv flag: bool,\n     priv predicate: &'self fn(&A) -> bool\n@@ -1444,7 +1433,6 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhile<'self, A, T> {\n /// An iterator which skips over `n` elements of `iter`.\n #[deriving(Clone)]\n pub struct Skip<T> {\n-    // already priv\n     priv iter: T,\n     priv n: uint\n }\n@@ -1509,7 +1497,6 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n /// An iterator which only iterates over the first `n` iterations of `iter`.\n #[deriving(Clone)]\n pub struct Take<T> {\n-    // already priv\n     priv iter: T,\n     priv n: uint\n }\n@@ -1559,13 +1546,11 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n \n /// An iterator to maintain state while iterating another iterator\n pub struct Scan<'self, A, B, T, St> {\n-    // already priv\n     priv iter: T,\n     priv f: &'self fn(&mut St, A) -> Option<B>,\n \n     /// The current internal state to be passed to the closure next.\n-    // priv by reedlepee\n-    priv state: St\n+    state: St\n }\n \n impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'self, A, B, T, St> {\n@@ -1585,7 +1570,6 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'self, A, B, T, St> {\n /// and yields the elements of the produced iterators\n ///\n pub struct FlatMap<'self, A, T, U> {\n-    // already priv\n     priv iter: T,\n     priv f: &'self fn(A) -> U,\n     priv frontiter: Option<U>,\n@@ -1645,7 +1629,6 @@ impl<'self,\n /// yields `None` once.\n #[deriving(Clone, DeepClone)]\n pub struct Fuse<T> {\n-    // already priv\n     priv iter: T,\n     priv done: bool\n }\n@@ -1718,7 +1701,6 @@ impl<T> Fuse<T> {\n /// An iterator that calls a function with a reference to each\n /// element before yielding it.\n pub struct Inspect<'self, A, T> {\n-    // already priv\n     priv iter: T,\n     priv f: &'self fn(&A)\n }\n@@ -1772,10 +1754,8 @@ for Inspect<'self, A, T> {\n \n /// An iterator which just modifies the contained state throughout iteration.\n pub struct Unfold<'self, A, St> {\n-    // already priv\n     priv f: &'self fn(&mut St) -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n-    /// priv reedlepee\n     state: St\n }\n \n@@ -1809,7 +1789,6 @@ impl<'self, A, St> Iterator<A> for Unfold<'self, A, St> {\n /// iteration\n #[deriving(Clone)]\n pub struct Counter<A> {\n-    // by reedlepee\n     /// The current state the counter is at (next value to be yielded)\n     priv state: A,\n     /// The amount that this iterator is stepping by\n@@ -1839,7 +1818,6 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n /// An iterator over the range [start, stop)\n #[deriving(Clone, DeepClone)]\n pub struct Range<A> {\n-    // already priv\n     priv state: A,\n     priv stop: A,\n     priv one: A\n@@ -1884,7 +1862,6 @@ impl<A: Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n /// An iterator over the range [start, stop]\n #[deriving(Clone, DeepClone)]\n pub struct RangeInclusive<A> {\n-    // already priv\n     priv range: Range<A>,\n     priv done: bool\n }\n@@ -1946,7 +1923,6 @@ impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for RangeInclu\n /// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n #[deriving(Clone, DeepClone)]\n pub struct RangeStep<A> {\n-    // already priv\n     priv state: A,\n     priv stop: A,\n     priv step: A,\n@@ -1979,7 +1955,6 @@ impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n /// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n #[deriving(Clone, DeepClone)]\n pub struct RangeStepInclusive<A> {\n-    // already priv\n     priv state: A,\n     priv stop: A,\n     priv step: A,\n@@ -2015,7 +1990,6 @@ impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n /// An iterator that repeats an element endlessly\n #[deriving(Clone, DeepClone)]\n pub struct Repeat<A> {\n-    // already priv\n     priv element: A\n }\n "}, {"sha": "48cd79875079d4721738244fd300c7b19659daa5", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -40,7 +40,7 @@ use vec::{OwnedVector};\n /// in too much allocation and too many events.\n pub struct Scheduler {\n     /// There are N work queues, one per scheduler.\n-    work_queue: WorkQueue<~Task>,\n+    priv work_queue: WorkQueue<~Task>,\n     /// Work queues for the other schedulers. These are created by\n     /// cloning the core work queues.\n     work_queues: ~[WorkQueue<~Task>],"}, {"sha": "c4f352501a08bfe621ce6ac2ca6596bd6c656365", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92662a9f9101c702215a6160eb3af0aabc583423/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=92662a9f9101c702215a6160eb3af0aabc583423", "patch": "@@ -43,20 +43,20 @@ use send_str::SendStr;\n // the type-specific state.\n \n pub struct Task {\n-     heap: LocalHeap,\n-     priv gc: GarbageCollector,\n-     storage: LocalStorage,\n-     logger: StdErrLogger,\n-     unwinder: Unwinder,\n-     taskgroup: Option<Taskgroup>,\n-     death: Death,\n-     destroyed: bool,\n-     name: Option<SendStr>,\n-     coroutine: Option<Coroutine>,\n-     sched: Option<~Scheduler>,\n-     task_type: TaskType,\n+    heap: LocalHeap,\n+    priv gc: GarbageCollector,\n+    storage: LocalStorage,\n+    logger: StdErrLogger,\n+    unwinder: Unwinder,\n+    taskgroup: Option<Taskgroup>,\n+    death: Death,\n+    destroyed: bool,\n+    name: Option<SendStr>,\n+    coroutine: Option<Coroutine>,\n+    sched: Option<~Scheduler>,\n+    task_type: TaskType,\n     // Dynamic borrowck debugging info\n-     borrow_list: Option<~[BorrowRecord]>\n+    borrow_list: Option<~[BorrowRecord]>\n }\n \n pub enum TaskType {"}]}