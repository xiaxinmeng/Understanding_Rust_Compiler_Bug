{"sha": "08a7157a379ee7f794db386497f5cf1a4ee69fcc", "node_id": "C_kwDOAAsO6NoAKDA4YTcxNTdhMzc5ZWU3Zjc5NGRiMzg2NDk3ZjVjZjFhNGVlNjlmY2M", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-22T02:30:34Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-03-16T17:58:09Z"}, "message": "Improve message for `match_single_arms`", "tree": {"sha": "9b8582c5d91a8dfddfcdf380daa0e81fc665de94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b8582c5d91a8dfddfcdf380daa0e81fc665de94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a7157a379ee7f794db386497f5cf1a4ee69fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a7157a379ee7f794db386497f5cf1a4ee69fcc", "html_url": "https://github.com/rust-lang/rust/commit/08a7157a379ee7f794db386497f5cf1a4ee69fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a7157a379ee7f794db386497f5cf1a4ee69fcc/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8f4b4c82e4647a2464e364ff96cc1dc5cb8e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8f4b4c82e4647a2464e364ff96cc1dc5cb8e9a", "html_url": "https://github.com/rust-lang/rust/commit/4f8f4b4c82e4647a2464e364ff96cc1dc5cb8e9a"}], "stats": {"total": 483, "additions": 249, "deletions": 234}, "files": [{"sha": "5202df544f6270f7e77e9ead24fa921c161856de", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/08a7157a379ee7f794db386497f5cf1a4ee69fcc/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a7157a379ee7f794db386497f5cf1a4ee69fcc/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=08a7157a379ee7f794db386497f5cf1a4ee69fcc", "patch": "@@ -4,6 +4,7 @@ use clippy_utils::{path_to_local, search_same, SpanlessEq, SpanlessHash};\n use core::iter;\n use rustc_arena::DroplessArena;\n use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Arm, Expr, ExprKind, HirId, HirIdMap, HirIdSet, Pat, PatKind, RangeEnd};\n use rustc_lint::LateContext;\n@@ -13,6 +14,7 @@ use std::collections::hash_map::Entry;\n \n use super::MATCH_SAME_ARMS;\n \n+#[allow(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n     let hash = |&(_, arm): &(usize, &Arm<'_>)| -> u64 {\n         let mut h = SpanlessHash::new(cx);\n@@ -96,42 +98,52 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n     };\n \n     let indexed_arms: Vec<(usize, &Arm<'_>)> = arms.iter().enumerate().collect();\n-    for (&(_, i), &(_, j)) in search_same(&indexed_arms, hash, eq) {\n-        span_lint_and_then(\n-            cx,\n-            MATCH_SAME_ARMS,\n-            j.body.span,\n-            \"this `match` has identical arm bodies\",\n-            |diag| {\n-                diag.span_note(i.body.span, \"same as this\");\n-\n-                // Note: this does not use `span_suggestion` on purpose:\n-                // there is no clean way\n-                // to remove the other arm. Building a span and suggest to replace it to \"\"\n-                // makes an even more confusing error message. Also in order not to make up a\n-                // span for the whole pattern, the suggestion is only shown when there is only\n-                // one pattern. The user should know about `|` if they are already using it\u2026\n+    for (&(i, arm1), &(j, arm2)) in search_same(&indexed_arms, hash, eq) {\n+        if matches!(arm2.pat.kind, PatKind::Wild) {\n+            span_lint_and_then(\n+                cx,\n+                MATCH_SAME_ARMS,\n+                arm1.span,\n+                \"this match arm has an identical body to the `_` wildcard arm\",\n+                |diag| {\n+                    diag.span_suggestion(\n+                        arm1.span,\n+                        \"try removing the arm\",\n+                        String::new(),\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .help(\"or try changing either arm body\")\n+                    .span_note(arm2.span, \"`_` wildcard arm here\");\n+                },\n+            );\n+        } else {\n+            let back_block = backwards_blocking_idxs[j];\n+            let (keep_arm, move_arm) = if back_block < i || (back_block == 0 && forwards_blocking_idxs[i] <= j) {\n+                (arm1, arm2)\n+            } else {\n+                (arm2, arm1)\n+            };\n \n-                let lhs = snippet(cx, i.pat.span, \"<pat1>\");\n-                let rhs = snippet(cx, j.pat.span, \"<pat2>\");\n+            span_lint_and_then(\n+                cx,\n+                MATCH_SAME_ARMS,\n+                keep_arm.span,\n+                \"this match arm has an identical body to another arm\",\n+                |diag| {\n+                    let move_pat_snip = snippet(cx, move_arm.pat.span, \"<pat2>\");\n+                    let keep_pat_snip = snippet(cx, keep_arm.pat.span, \"<pat1>\");\n \n-                if let PatKind::Wild = j.pat.kind {\n-                    // if the last arm is _, then i could be integrated into _\n-                    // note that i.pat cannot be _, because that would mean that we're\n-                    // hiding all the subsequent arms, and rust won't compile\n-                    diag.span_note(\n-                        i.body.span,\n-                        &format!(\n-                            \"`{}` has the same arm body as the `_` wildcard, consider removing it\",\n-                            lhs\n-                        ),\n-                    );\n-                } else {\n-                    diag.span_help(i.pat.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs,))\n-                        .help(\"...or consider changing the match arm bodies\");\n-                }\n-            },\n-        );\n+                    diag.span_suggestion(\n+                        keep_arm.pat.span,\n+                        \"try merging the arm patterns\",\n+                        format!(\"{} | {}\", keep_pat_snip, move_pat_snip),\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .help(\"or try changing either arm body\")\n+                    .span_note(move_arm.span, \"other arm here\");\n+                },\n+            );\n+        }\n     }\n }\n "}, {"sha": "b6d04263b37a3e7e7327425fe8d2d802b8f913fc", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 79, "deletions": 86, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/08a7157a379ee7f794db386497f5cf1a4ee69fcc/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a7157a379ee7f794db386497f5cf1a4ee69fcc/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=08a7157a379ee7f794db386497f5cf1a4ee69fcc", "patch": "@@ -1,128 +1,121 @@\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:13:14\n+error: this match arm has an identical body to the `_` wildcard arm\n+  --> $DIR/match_same_arms.rs:11:9\n    |\n-LL |         _ => 0, //~ ERROR match arms have same body\n-   |              ^\n+LL |         Abc::A => 0,\n+   |         ^^^^^^^^^^^ help: try removing the arm\n    |\n    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/match_same_arms.rs:11:19\n+   = help: or try changing either arm body\n+note: `_` wildcard arm here\n+  --> $DIR/match_same_arms.rs:13:9\n    |\n-LL |         Abc::A => 0,\n-   |                   ^\n-note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it\n-  --> $DIR/match_same_arms.rs:11:19\n-   |\n-LL |         Abc::A => 0,\n-   |                   ^\n+LL |         _ => 0, //~ ERROR match arms have same body\n+   |         ^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:18:20\n-   |\n-LL |         (.., 3) => 42, //~ ERROR match arms have same body\n-   |                    ^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:17:23\n-   |\n-LL |         (1, .., 3) => 42,\n-   |                       ^^\n-help: consider refactoring into `(1, .., 3) | (.., 3)`\n+error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms.rs:17:9\n    |\n LL |         (1, .., 3) => 42,\n-   |         ^^^^^^^^^^\n-   = help: ...or consider changing the match arm bodies\n+   |         ----------^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `(1, .., 3) | (.., 3)`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms.rs:18:9\n+   |\n+LL |         (.., 3) => 42, //~ ERROR match arms have same body\n+   |         ^^^^^^^^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:24:15\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms.rs:24:9\n    |\n LL |         51 => 1, //~ ERROR match arms have same body\n-   |               ^\n+   |         --^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `51 | 42`\n    |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:23:15\n-   |\n-LL |         42 => 1,\n-   |               ^\n-help: consider refactoring into `42 | 51`\n+   = help: or try changing either arm body\n+note: other arm here\n   --> $DIR/match_same_arms.rs:23:9\n    |\n LL |         42 => 1,\n-   |         ^^\n-   = help: ...or consider changing the match arm bodies\n+   |         ^^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:26:15\n-   |\n-LL |         52 => 2, //~ ERROR match arms have same body\n-   |               ^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:25:15\n-   |\n-LL |         41 => 2,\n-   |               ^\n-help: consider refactoring into `41 | 52`\n+error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms.rs:25:9\n    |\n LL |         41 => 2,\n-   |         ^^\n-   = help: ...or consider changing the match arm bodies\n+   |         --^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `41 | 52`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms.rs:26:9\n+   |\n+LL |         52 => 2, //~ ERROR match arms have same body\n+   |         ^^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:32:14\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms.rs:32:9\n    |\n LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n-   |              ^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:31:14\n+   |         -^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `2 | 1`\n    |\n-LL |         1 => 2,\n-   |              ^\n-help: consider refactoring into `1 | 2`\n+   = help: or try changing either arm body\n+note: other arm here\n   --> $DIR/match_same_arms.rs:31:9\n    |\n LL |         1 => 2,\n-   |         ^\n-   = help: ...or consider changing the match arm bodies\n+   |         ^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:33:14\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms.rs:33:9\n    |\n LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n-   |              ^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:31:14\n+   |         -^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `3 | 1`\n    |\n-LL |         1 => 2,\n-   |              ^\n-help: consider refactoring into `1 | 3`\n+   = help: or try changing either arm body\n+note: other arm here\n   --> $DIR/match_same_arms.rs:31:9\n    |\n LL |         1 => 2,\n-   |         ^\n-   = help: ...or consider changing the match arm bodies\n+   |         ^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:50:55\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms.rs:32:9\n    |\n-LL |                 CommandInfo::External { name, .. } => name.to_string(),\n-   |                                                       ^^^^^^^^^^^^^^^^\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n+   |         -^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `2 | 3`\n    |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:49:54\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms.rs:33:9\n    |\n-LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n-   |                                                      ^^^^^^^^^^^^^^^^\n-help: consider refactoring into `CommandInfo::BuiltIn { name, .. } | CommandInfo::External { name, .. }`\n+LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n+   |         ^^^^^^\n+\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms.rs:50:17\n+   |\n+LL |                 CommandInfo::External { name, .. } => name.to_string(),\n+   |                 ----------------------------------^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 help: try merging the arm patterns: `CommandInfo::External { name, .. } | CommandInfo::BuiltIn { name, .. }`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n   --> $DIR/match_same_arms.rs:49:17\n    |\n LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: ...or consider changing the match arm bodies\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "fdd88f25529e7902c7e08bce7965d14f0a6d547f", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/08a7157a379ee7f794db386497f5cf1a4ee69fcc/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a7157a379ee7f794db386497f5cf1a4ee69fcc/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=08a7157a379ee7f794db386497f5cf1a4ee69fcc", "patch": "@@ -181,10 +181,27 @@ fn main() {\n         Z(u32),\n     }\n \n+    // Don't lint. `Foo::X(0)` and `Foo::Z(_)` overlap with the arm in between.\n     let _ = match Foo::X(0) {\n         Foo::X(0) => 1,\n         Foo::X(_) | Foo::Y(_) | Foo::Z(0) => 2,\n         Foo::Z(_) => 1,\n         _ => 0,\n     };\n+\n+    // Suggest moving `Foo::Z(_)` up.\n+    let _ = match Foo::X(0) {\n+        Foo::X(0) => 1,\n+        Foo::X(_) | Foo::Y(_) => 2,\n+        Foo::Z(_) => 1,\n+        _ => 0,\n+    };\n+\n+    // Suggest moving `Foo::X(0)` down.\n+    let _ = match Foo::X(0) {\n+        Foo::X(0) => 1,\n+        Foo::Y(_) | Foo::Z(0) => 2,\n+        Foo::Z(_) => 1,\n+        _ => 0,\n+    };\n }"}, {"sha": "596cc8432b3151f7acc67ba6c1599c5172b9c2d9", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 107, "deletions": 114, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/08a7157a379ee7f794db386497f5cf1a4ee69fcc/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a7157a379ee7f794db386497f5cf1a4ee69fcc/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=08a7157a379ee7f794db386497f5cf1a4ee69fcc", "patch": "@@ -1,175 +1,138 @@\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:20:14\n+error: this match arm has an identical body to the `_` wildcard arm\n+  --> $DIR/match_same_arms2.rs:11:9\n    |\n-LL |           _ => {\n-   |  ______________^\n-LL | |             //~ ERROR match arms have same body\n+LL | /         42 => {\n LL | |             foo();\n LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n ...  |\n LL | |             a\n LL | |         },\n-   | |_________^\n+   | |_________^ help: try removing the arm\n    |\n    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:11:15\n-   |\n-LL |           42 => {\n-   |  _______________^\n-LL | |             foo();\n-LL | |             let mut a = 42 + [23].len() as i32;\n-LL | |             if true {\n-...  |\n-LL | |             a\n-LL | |         },\n-   | |_________^\n-note: `42` has the same arm body as the `_` wildcard, consider removing it\n-  --> $DIR/match_same_arms2.rs:11:15\n+   = help: or try changing either arm body\n+note: `_` wildcard arm here\n+  --> $DIR/match_same_arms2.rs:20:9\n    |\n-LL |           42 => {\n-   |  _______________^\n+LL | /         _ => {\n+LL | |             //~ ERROR match arms have same body\n LL | |             foo();\n LL | |             let mut a = 42 + [23].len() as i32;\n-LL | |             if true {\n ...  |\n LL | |             a\n LL | |         },\n    | |_________^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:34:15\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:34:9\n    |\n LL |         51 => foo(), //~ ERROR match arms have same body\n-   |               ^^^^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:33:15\n+   |         --^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `51 | 42`\n    |\n-LL |         42 => foo(),\n-   |               ^^^^^\n-help: consider refactoring into `42 | 51`\n+   = help: or try changing either arm body\n+note: other arm here\n   --> $DIR/match_same_arms2.rs:33:9\n    |\n LL |         42 => foo(),\n-   |         ^^\n-   = help: ...or consider changing the match arm bodies\n+   |         ^^^^^^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:40:17\n-   |\n-LL |         None => 24, //~ ERROR match arms have same body\n-   |                 ^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:39:20\n-   |\n-LL |         Some(_) => 24,\n-   |                    ^^\n-help: consider refactoring into `Some(_) | None`\n+error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms2.rs:39:9\n    |\n LL |         Some(_) => 24,\n-   |         ^^^^^^^\n-   = help: ...or consider changing the match arm bodies\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:62:28\n+   |         -------^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `Some(_) | None`\n    |\n-LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n-   |                            ^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:61:28\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:40:9\n    |\n-LL |         (Some(a), None) => bar(a),\n-   |                            ^^^^^^\n-help: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+LL |         None => 24, //~ ERROR match arms have same body\n+   |         ^^^^^^^^^^\n+\n+error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms2.rs:61:9\n    |\n LL |         (Some(a), None) => bar(a),\n-   |         ^^^^^^^^^^^^^^^\n-   = help: ...or consider changing the match arm bodies\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:68:26\n+   |         ---------------^^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `(Some(a), None) | (None, Some(a))`\n    |\n-LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n-   |                          ^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:67:26\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:62:9\n    |\n-LL |         (Some(a), ..) => bar(a),\n-   |                          ^^^^^^\n-help: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms2.rs:67:9\n    |\n LL |         (Some(a), ..) => bar(a),\n-   |         ^^^^^^^^^^^^^\n-   = help: ...or consider changing the match arm bodies\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:102:29\n-   |\n-LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |         -------------^^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `(Some(a), ..) | (.., Some(a))`\n    |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:101:29\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:68:9\n    |\n-LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n+LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this match arm has an identical body to another arm\n   --> $DIR/match_same_arms2.rs:101:9\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-   |         ^^^^^^^^^^^^^^^^\n-   = help: ...or consider changing the match arm bodies\n-   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |         ----------------^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:102:9\n+   |\n+LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:117:18\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:117:9\n    |\n LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         -----^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `Ok(_) | Ok(3)`\n    |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:116:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n+   = help: or try changing either arm body\n+note: other arm here\n   --> $DIR/match_same_arms2.rs:116:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = help: ...or consider changing the match arm bodies\n-   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms2.rs:144:14\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:144:9\n    |\n LL |           1 => {\n-   |  ______________^\n+   |           ^ help: try merging the arm patterns: `1 | 0`\n+   |  _________|\n+   | |\n LL | |             empty!(0);\n LL | |         },\n    | |_________^\n    |\n-note: same as this\n-  --> $DIR/match_same_arms2.rs:141:14\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:141:9\n    |\n-LL |           0 => {\n-   |  ______________^\n+LL | /         0 => {\n LL | |             empty!(0);\n LL | |         },\n    | |_________^\n-help: consider refactoring into `0 | 1`\n-  --> $DIR/match_same_arms2.rs:141:9\n-   |\n-LL |         0 => {\n-   |         ^\n-   = help: ...or consider changing the match arm bodies\n \n error: match expression looks like `matches!` macro\n   --> $DIR/match_same_arms2.rs:162:16\n@@ -184,5 +147,35 @@ LL | |     };\n    |\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n-error: aborting due to 9 previous errors\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:194:9\n+   |\n+LL |         Foo::X(0) => 1,\n+   |         ---------^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `Foo::X(0) | Foo::Z(_)`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:196:9\n+   |\n+LL |         Foo::Z(_) => 1,\n+   |         ^^^^^^^^^^^^^^\n+\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:204:9\n+   |\n+LL |         Foo::Z(_) => 1,\n+   |         ---------^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `Foo::Z(_) | Foo::X(0)`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:202:9\n+   |\n+LL |         Foo::X(0) => 1,\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n "}]}