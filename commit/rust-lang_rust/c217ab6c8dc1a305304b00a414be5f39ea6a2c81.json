{"sha": "c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMTdhYjZjOGRjMWEzMDUzMDRiMDBhNDE0YmU1ZjM5ZWE2YTJjODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-21T19:46:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-21T19:46:27Z"}, "message": "Auto merge of #38427 - brson:relnotes, r=alexcrichton\n\n1.14 release notes\n\n[Rendered](https://github.com/brson/rust/blob/relnotes/RELEASES.md).\n\nIs there anything I'm missing? Were there any library stabilizations?\n\nThe most interesting thing this time seems to be rustup, then compile time opts, `..` matches, cargo exposing `cfg` values to build scripts. This release also has wasm support, but it's pretty rough. Might be worth hyping up all the same. ARM MUSL targets.\n\nThere are a large number of compatibility notes. Might be worth talking about that.\n\nRelevant prlo links: goo.gl/PGz2Ds, goo.gl/KV23Qv, goo.gl/g7ku6D.", "tree": {"sha": "3ef497933b3d4d2d8f71ea4ab69f08581e4a42b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef497933b3d4d2d8f71ea4ab69f08581e4a42b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "html_url": "https://github.com/rust-lang/rust/commit/c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c217ab6c8dc1a305304b00a414be5f39ea6a2c81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbf3bf841cbe666bbee0e682f60d9d5c74ca709", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbf3bf841cbe666bbee0e682f60d9d5c74ca709", "html_url": "https://github.com/rust-lang/rust/commit/5fbf3bf841cbe666bbee0e682f60d9d5c74ca709"}, {"sha": "2afadaadc99118b169d2c3aec01e9814409b37fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afadaadc99118b169d2c3aec01e9814409b37fa", "html_url": "https://github.com/rust-lang/rust/commit/2afadaadc99118b169d2c3aec01e9814409b37fa"}], "stats": {"total": 219, "additions": 219, "deletions": 0}, "files": [{"sha": "e85c9d18db9807891e48ceb4f3d921c76062609c", "filename": "RELEASES.md", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/c217ab6c8dc1a305304b00a414be5f39ea6a2c81/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/c217ab6c8dc1a305304b00a414be5f39ea6a2c81/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=c217ab6c8dc1a305304b00a414be5f39ea6a2c81", "patch": "@@ -1,3 +1,222 @@\n+Version 1.14.0 (2016-12-22)\n+===========================\n+\n+Language\n+--------\n+\n+* [`..` matches multiple tuple fields in enum variants, structs\n+  and tuples][36843]. [RFC 1492].\n+* [Safe `fn` items can be coerced to `unsafe fn` pointers][37389]\n+* [`use *` and `use ::*` both glob-import from the crate root][37367]\n+* [It's now possible to call a `Vec<Box<Fn()>>` without explicit\n+  dereferencing][36822]\n+\n+Compiler\n+--------\n+\n+* [Mark enums with non-zero discriminant as non-zero][37224]\n+* [Lower-case `static mut` names are linted like other\n+  statics and consts][37162]\n+* [Fix ICE on some macros in const integer positions\n+   (e.g. `[u8; m!()]`)][36819]\n+* [Improve error message and snippet for \"did you mean `x`\"][36798]\n+* [Add a panic-strategy field to the target specification][36794]\n+* [Include LLVM version in `--version --verbose`][37200]\n+\n+Compile-time Optimizations\n+--------------------------\n+\n+* [Improve macro expansion performance][37569]\n+* [Shrink `Expr_::ExprInlineAsm`][37445]\n+* [Replace all uses of SHA-256 with BLAKE2b][37439]\n+* [Reduce the number of bytes hashed by `IchHasher`][37427]\n+* [Avoid more allocations when compiling html5ever][37373]\n+* [Use `SmallVector` in `CombineFields::instantiate`][37322]\n+* [Avoid some allocations in the macro parser][37318]\n+* [Use a faster deflate setting][37298]\n+* [Add `ArrayVec` and `AccumulateVec` to reduce heap allocations\n+  during interning of slices][37270]\n+* [Optimize `write_metadata`][37267]\n+* [Don't process obligation forest cycles when stalled][37231]\n+* [Avoid many `CrateConfig` clones][37161]\n+* [Optimize `Substs::super_fold_with`][37108]\n+* [Optimize `ObligationForest`'s `NodeState` handling][36993]\n+* [Speed up `plug_leaks`][36917]\n+\n+Libraries\n+---------\n+\n+* [`println!()`, with no arguments, prints newline][36825].\n+  Previously, an empty string was required to achieve the same.\n+* [`Wrapping` impls standard binary and unary operators, as well as\n+   the `Sum` and `Product` iterators][37356]\n+* [Implement `From<Cow<str>> for String` and `From<Cow<[T]>> for\n+  Vec<T>`][37326]\n+* [Improve `fold` performance for `chain`, `cloned`, `map`, and\n+  `VecDeque` iterators][37315]\n+* [Improve `SipHasher` performance on small values][37312]\n+* [Add Iterator trait TrustedLen to enable better FromIterator /\n+  Extend][37306]\n+* [Expand `.zip()` specialization to `.map()` and `.cloned()`][37230]\n+* [`ReadDir` implements `Debug`][37221]\n+* [Implement `RefUnwindSafe` for atomic types][37178]\n+* [Specialize `Vec::extend` to `Vec::extend_from_slice`][37094]\n+* [Avoid allocations in `Decoder::read_str`][37064]\n+* [`io::Error` implements `From<io::ErrorKind>`][37037]\n+* [Impl `Debug` for raw pointers to unsized data][36880]\n+* [Don't reuse `HashMap` random seeds][37470]\n+* [The internal memory layout of `HashMap` is more cache-friendly, for\n+  significant improvements in some operations][36692]\n+* [`HashMap` uses less memory on 32-bit architectures][36595]\n+* [Impl `Add<{str, Cow<str>}>` for `Cow<str>`][36430]\n+\n+Cargo\n+-----\n+\n+* [Expose rustc cfg values to build scripts][cargo/3243]\n+* [Allow cargo to work with read-only `CARGO_HOME`][cargo/3259]\n+* [Fix passing --features when testing multiple packages][cargo/3280]\n+* [Use a single profile set per workspace][cargo/3249]\n+* [Load `replace` sections from lock files][cargo/3220]\n+* [Ignore `panic` configuration for test/bench profiles][cargo/3175]\n+\n+Tooling\n+-------\n+\n+* [rustup is the recommended Rust installation method][1.14rustup]\n+* This release includes host (rustc) builds for Linux on MIPS, PowerPC, and\n+  S390x. These are [tier 2] platforms and may have major defects. Follow the\n+  instructions on the website to install, or add the targets to an existing\n+  installation with `rustup target add`. The new target triples are:\n+  - `mips-unknown-linux-gnu`\n+  - `mipsel-unknown-linux-gnu`\n+  - `mips64-unknown-linux-gnuabi64`\n+  - `mips64el-unknown-linux-gnuabi64 `\n+  - `powerpc-unknown-linux-gnu`\n+  - `powerpc64-unknown-linux-gnu`\n+  - `powerpc64le-unknown-linux-gnu`\n+  - `s390x-unknown-linux-gnu `\n+* This release includes target (std) builds for ARM Linux running MUSL\n+  libc. These are [tier 2] platforms and may have major defects. Add the\n+  following triples to an existing rustup installation with `rustup target add`:\n+  - `arm-unknown-linux-musleabi`\n+  - `arm-unknown-linux-musleabihf`\n+  - `armv7-unknown-linux-musleabihf`\n+* This release includes [experimental support for WebAssembly][1.14wasm], via\n+  the `wasm32-unknown-emscripten` target. This target is known to have major\n+  defects. Please test, report, and fix.\n+* rustup no longer installs documentation by default. Run `rustup\n+  component add rust-docs` to install.\n+* [Fix line stepping in debugger][37310]\n+* [Enable line number debuginfo in releases][37280]\n+\n+Misc\n+----\n+\n+* [Disable jemalloc on aarch64/powerpc/mips][37392]\n+* [Add support for Fuchsia OS][37313]\n+* [Detect local-rebuild by only MAJOR.MINOR version][37273]\n+\n+Compatibility Notes\n+-------------------\n+\n+* [A number of forward-compatibility lints used by the compiler\n+  to gradually introduce language changes have been converted\n+  to deny by default][36894]:\n+  - [\"use of inaccessible extern crate erroneously allowed\"][36886]\n+  - [\"type parameter default erroneously allowed in invalid location\"][36887]\n+  - [\"detects super or self keywords at the beginning of global path\"][36888]\n+  - [\"two overlapping inherent impls define an item with the same name\n+    were erroneously allowed\"][36889]\n+  - [\"floating-point constants cannot be used in patterns\"][36890]\n+  - [\"constants of struct or enum type can only be used in a pattern if\n+     the struct or enum has `#[derive(PartialEq, Eq)]`\"][36891]\n+  - [\"lifetimes or labels named `'_` were erroneously allowed\"][36892]\n+* [Prohibit patterns in trait methods without bodies][37378]\n+* [The atomic `Ordering` enum may not be matched exhaustively][37351]\n+* [Future-proofing `#[no_link]` breaks some obscure cases][37247]\n+* [The `$crate` macro variable is accepted in fewer locations][37213]\n+* [Impls specifying extra region requirements beyond the trait\n+  they implement are rejected][37167]\n+* [Enums may not be unsized][37111]. Unsized enums are intended to\n+  work but never have. For now they are forbidden.\n+* [Enforce the shadowing restrictions from RFC 1560 for today's macros][36767]\n+\n+[tier 2]: https://forge.rust-lang.org/platform-support.html\n+[1.14rustup]: https://internals.rust-lang.org/t/beta-testing-rustup-rs/3316/204\n+[1.14wasm]: https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\n+[36430]: https://github.com/rust-lang/rust/pull/36430\n+[36595]: https://github.com/rust-lang/rust/pull/36595\n+[36595]: https://github.com/rust-lang/rust/pull/36595\n+[36692]: https://github.com/rust-lang/rust/pull/36692\n+[36767]: https://github.com/rust-lang/rust/pull/36767\n+[36794]: https://github.com/rust-lang/rust/pull/36794\n+[36798]: https://github.com/rust-lang/rust/pull/36798\n+[36819]: https://github.com/rust-lang/rust/pull/36819\n+[36822]: https://github.com/rust-lang/rust/pull/36822\n+[36825]: https://github.com/rust-lang/rust/pull/36825\n+[36843]: https://github.com/rust-lang/rust/pull/36843\n+[36880]: https://github.com/rust-lang/rust/pull/36880\n+[36886]: https://github.com/rust-lang/rust/issues/36886\n+[36887]: https://github.com/rust-lang/rust/issues/36887\n+[36888]: https://github.com/rust-lang/rust/issues/36888\n+[36889]: https://github.com/rust-lang/rust/issues/36889\n+[36890]: https://github.com/rust-lang/rust/issues/36890\n+[36891]: https://github.com/rust-lang/rust/issues/36891\n+[36892]: https://github.com/rust-lang/rust/issues/36892\n+[36894]: https://github.com/rust-lang/rust/pull/36894\n+[36917]: https://github.com/rust-lang/rust/pull/36917\n+[36993]: https://github.com/rust-lang/rust/pull/36993\n+[37037]: https://github.com/rust-lang/rust/pull/37037\n+[37064]: https://github.com/rust-lang/rust/pull/37064\n+[37094]: https://github.com/rust-lang/rust/pull/37094\n+[37108]: https://github.com/rust-lang/rust/pull/37108\n+[37111]: https://github.com/rust-lang/rust/pull/37111\n+[37161]: https://github.com/rust-lang/rust/pull/37161\n+[37162]: https://github.com/rust-lang/rust/pull/37162\n+[37167]: https://github.com/rust-lang/rust/pull/37167\n+[37178]: https://github.com/rust-lang/rust/pull/37178\n+[37200]: https://github.com/rust-lang/rust/pull/37200\n+[37213]: https://github.com/rust-lang/rust/pull/37213\n+[37221]: https://github.com/rust-lang/rust/pull/37221\n+[37224]: https://github.com/rust-lang/rust/pull/37224\n+[37230]: https://github.com/rust-lang/rust/pull/37230\n+[37231]: https://github.com/rust-lang/rust/pull/37231\n+[37247]: https://github.com/rust-lang/rust/pull/37247\n+[37267]: https://github.com/rust-lang/rust/pull/37267\n+[37270]: https://github.com/rust-lang/rust/pull/37270\n+[37273]: https://github.com/rust-lang/rust/pull/37273\n+[37280]: https://github.com/rust-lang/rust/pull/37280\n+[37298]: https://github.com/rust-lang/rust/pull/37298\n+[37306]: https://github.com/rust-lang/rust/pull/37306\n+[37310]: https://github.com/rust-lang/rust/pull/37310\n+[37312]: https://github.com/rust-lang/rust/pull/37312\n+[37313]: https://github.com/rust-lang/rust/pull/37313\n+[37315]: https://github.com/rust-lang/rust/pull/37315\n+[37318]: https://github.com/rust-lang/rust/pull/37318\n+[37322]: https://github.com/rust-lang/rust/pull/37322\n+[37326]: https://github.com/rust-lang/rust/pull/37326\n+[37351]: https://github.com/rust-lang/rust/pull/37351\n+[37356]: https://github.com/rust-lang/rust/pull/37356\n+[37367]: https://github.com/rust-lang/rust/pull/37367\n+[37373]: https://github.com/rust-lang/rust/pull/37373\n+[37378]: https://github.com/rust-lang/rust/pull/37378\n+[37389]: https://github.com/rust-lang/rust/pull/37389\n+[37392]: https://github.com/rust-lang/rust/pull/37392\n+[37427]: https://github.com/rust-lang/rust/pull/37427\n+[37439]: https://github.com/rust-lang/rust/pull/37439\n+[37445]: https://github.com/rust-lang/rust/pull/37445\n+[37470]: https://github.com/rust-lang/rust/pull/37470\n+[37569]: https://github.com/rust-lang/rust/pull/37569\n+[RFC 1492]: https://github.com/rust-lang/rfcs/blob/master/text/1492-dotdot-in-patterns.md\n+[cargo/3175]: https://github.com/rust-lang/cargo/pull/3175\n+[cargo/3220]: https://github.com/rust-lang/cargo/pull/3220\n+[cargo/3243]: https://github.com/rust-lang/cargo/pull/3243\n+[cargo/3249]: https://github.com/rust-lang/cargo/pull/3249\n+[cargo/3259]: https://github.com/rust-lang/cargo/pull/3259\n+[cargo/3280]: https://github.com/rust-lang/cargo/pull/3280\n+\n+\n Version 1.13.0 (2016-11-10)\n ===========================\n "}]}