{"sha": "00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYmE4YjNhYzA2OTIyOTM1MTE4NThjYWU2ZmUxYTNlMWRjYzMxNmI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-07-08T06:12:01Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "steinbrink@saltation.de", "date": "2013-07-08T11:34:13Z"}, "message": "Improve handling of immediate return values\n\nWe currently still handle immediate return values a lot like\nnon-immediate ones. We provide a slot for them and store them into\nmemory, often just to immediately load them again. To improve this\nsituation, trans_call_inner has to return a Result which contains the\nimmediate return value.\n\nAlso, it also needs to accept \"No destination\" in addition to just\nSaveIn and Ignore. Since \"No destination\" isn't something that fits\nwell into the Dest type, I've chosen to simply use Option<Dest>\ninstead, paired with an assertion that checks that \"None\" is only\nallowed for immediate return values.", "tree": {"sha": "c4081888a0f66589d0ca7d5a827723c61e331554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4081888a0f66589d0ca7d5a827723c61e331554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "html_url": "https://github.com/rust-lang/rust/commit/00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f", "html_url": "https://github.com/rust-lang/rust/commit/4a485f8cec524c8f3f57e4fd3248d5093ed3dc5f"}], "stats": {"total": 113, "additions": 51, "deletions": 62}, "files": [{"sha": "b7168cbfdec5361b6d684572f481e2af52443d0f", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -1095,26 +1095,20 @@ pub fn compare_values(cx: block,\n \n     match ty::get(rhs_t).sty {\n         ty::ty_estr(ty::vstore_uniq) => {\n-            let scratch_result = scratch_datum(cx, ty::mk_bool(), false);\n             let scratch_lhs = alloca(cx, val_ty(lhs));\n             Store(cx, lhs, scratch_lhs);\n             let scratch_rhs = alloca(cx, val_ty(rhs));\n             Store(cx, rhs, scratch_rhs);\n             let did = cx.tcx().lang_items.uniq_str_eq_fn();\n-            let bcx = callee::trans_lang_call(cx, did, [scratch_lhs, scratch_rhs],\n-                                              expr::SaveIn(scratch_result.val));\n-            let result = scratch_result.to_result(bcx);\n+            let result = callee::trans_lang_call(cx, did, [scratch_lhs, scratch_rhs], None);\n             Result {\n                 bcx: result.bcx,\n                 val: bool_to_i1(result.bcx, result.val)\n             }\n         }\n         ty::ty_estr(_) => {\n-            let scratch_result = scratch_datum(cx, ty::mk_bool(), false);\n             let did = cx.tcx().lang_items.str_eq_fn();\n-            let bcx = callee::trans_lang_call(cx, did, [lhs, rhs],\n-                                              expr::SaveIn(scratch_result.val));\n-            let result = scratch_result.to_result(bcx);\n+            let result = callee::trans_lang_call(cx, did, [lhs, rhs], None);\n             Result {\n                 bcx: result.bcx,\n                 val: bool_to_i1(result.bcx, result.val)"}, {"sha": "577f1c68960679567702c17862df3915083013a3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -294,13 +294,12 @@ pub fn malloc_raw_dyn(bcx: block,\n         let llalign = llalign_of_min(ccx, llty_value);\n \n         // Allocate space:\n-        let rval = alloca(bcx, Type::i8p());\n-        let bcx = callee::trans_lang_call(\n+        let r = callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.exchange_malloc_fn(),\n             [C_i32(llalign as i32), size],\n-            expr::SaveIn(rval));\n-        rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty_value.ptr_to()))\n+            None);\n+        rslt(r.bcx, PointerCast(r.bcx, r.val, llty_value.ptr_to()))\n     } else if heap == heap_exchange_vector {\n         // Grab the TypeRef type of box_ptr_ty.\n         let element_type = match ty::get(t).sty {\n@@ -314,13 +313,12 @@ pub fn malloc_raw_dyn(bcx: block,\n         let llalign = llalign_of_min(ccx, llty_value);\n \n         // Allocate space:\n-        let rval = alloca(bcx, Type::i8p());\n-        let bcx = callee::trans_lang_call(\n+        let r = callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.vector_exchange_malloc_fn(),\n             [C_i32(llalign as i32), size],\n-            expr::SaveIn(rval));\n-        rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty))\n+            None);\n+        rslt(r.bcx, PointerCast(r.bcx, r.val, llty))\n     } else {\n         // we treat ~fn, @fn and @[] as @ here, which isn't ideal\n         let (mk_fn, langcall) = match heap {\n@@ -343,13 +341,12 @@ pub fn malloc_raw_dyn(bcx: block,\n \n         // Allocate space:\n         let tydesc = PointerCast(bcx, static_ti.tydesc, Type::i8p());\n-        let rval = alloca(bcx, Type::i8p());\n-        let bcx = callee::trans_lang_call(\n+        let r = callee::trans_lang_call(\n             bcx,\n             langcall,\n             [tydesc, size],\n-            expr::SaveIn(rval));\n-        let r = rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty));\n+            None);\n+        let r = rslt(r.bcx, PointerCast(r.bcx, r.val, llty));\n         maybe_set_managed_unique_rc(r.bcx, r.val, heap);\n         r\n     }"}, {"sha": "473afda48e65d68158c3c29d48c3cc31553fc7fc", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -446,8 +446,8 @@ pub fn trans_call(in_cx: block,\n                      node_id_type(in_cx, id),\n                      |cx| trans(cx, f),\n                      args,\n-                     dest,\n-                     DontAutorefArg)\n+                     Some(dest),\n+                     DontAutorefArg).bcx\n }\n \n pub fn trans_method_call(in_cx: block,\n@@ -484,15 +484,15 @@ pub fn trans_method_call(in_cx: block,\n             }\n         },\n         args,\n-        dest,\n-        DontAutorefArg)\n+        Some(dest),\n+        DontAutorefArg).bcx\n }\n \n pub fn trans_lang_call(bcx: block,\n                        did: ast::def_id,\n                        args: &[ValueRef],\n-                       dest: expr::Dest)\n-    -> block {\n+                       dest: Option<expr::Dest>)\n+    -> Result {\n     let fty = if did.crate == ast::local_crate {\n         ty::node_id_to_type(bcx.ccx().tcx, did.node)\n     } else {\n@@ -552,7 +552,7 @@ pub fn trans_lang_call_with_type_params(bcx: block,\n             }\n             Callee { bcx: callee.bcx, data: Fn(FnData { llfn: new_llval }) }\n         },\n-        ArgVals(args), dest, DontAutorefArg);\n+        ArgVals(args), Some(dest), DontAutorefArg).bcx;\n }\n \n pub fn body_contains_ret(body: &ast::blk) -> bool {\n@@ -579,10 +579,10 @@ pub fn trans_call_inner(in_cx: block,\n                         ret_ty: ty::t,\n                         get_callee: &fn(block) -> Callee,\n                         args: CallArgs,\n-                        dest: expr::Dest,\n+                        dest: Option<expr::Dest>,\n                         autoref_arg: AutorefArg)\n-                        -> block {\n-    do base::with_scope(in_cx, call_info, \"call\") |cx| {\n+                        -> Result {\n+    do base::with_scope_result(in_cx, call_info, \"call\") |cx| {\n         let ret_in_loop = match args {\n           ArgExprs(args) => {\n             args.len() > 0u && match args.last().node {\n@@ -669,7 +669,8 @@ pub fn trans_call_inner(in_cx: block,\n         bcx = new_bcx;\n \n         match dest {\n-            expr::Ignore => {\n+            None => { assert!(ty::type_is_immediate(bcx.tcx(), ret_ty)) }\n+            Some(expr::Ignore) => {\n                 // drop the value if it is not being saved.\n                 unsafe {\n                     if ty::type_needs_drop(bcx.tcx(), ret_ty) {\n@@ -683,7 +684,7 @@ pub fn trans_call_inner(in_cx: block,\n                     }\n                 }\n             }\n-            expr::SaveIn(lldest) => {\n+            Some(expr::SaveIn(lldest)) => {\n                 // If this is an immediate, store into the result location.\n                 // (If this was not an immediate, the result will already be\n                 // directly written into the output slot.)\n@@ -710,7 +711,7 @@ pub fn trans_call_inner(in_cx: block,\n                 bcx\n             }\n         }\n-        bcx\n+        rslt(bcx, llresult)\n     }\n }\n \n@@ -720,13 +721,13 @@ pub enum CallArgs<'self> {\n     ArgVals(&'self [ValueRef])\n }\n \n-pub fn trans_ret_slot(bcx: block, fn_ty: ty::t, dest: expr::Dest)\n+pub fn trans_ret_slot(bcx: block, fn_ty: ty::t, dest: Option<expr::Dest>)\n                       -> ValueRef {\n     let retty = ty::ty_fn_ret(fn_ty);\n \n     match dest {\n-        expr::SaveIn(dst) => dst,\n-        expr::Ignore => {\n+        Some(expr::SaveIn(dst)) => dst,\n+        _ => {\n             if ty::type_is_immediate(bcx.tcx(), retty) {\n                 unsafe {\n                     llvm::LLVMGetUndef(Type::nil().ptr_to().to_ref())"}, {"sha": "4c63b8dc844511ad48a80406a79e3534309bbe32", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -531,13 +531,13 @@ pub fn make_opaque_cbox_take_glue(\n \n         // Allocate memory, update original ptr, and copy existing data\n         let opaque_tydesc = PointerCast(bcx, tydesc, Type::i8p());\n-        let rval = alloca(bcx, Type::i8p());\n-        let bcx = callee::trans_lang_call(\n+        let mut bcx = bcx;\n+        let llresult = unpack_result!(bcx, callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.closure_exchange_malloc_fn(),\n             [opaque_tydesc, sz],\n-            expr::SaveIn(rval));\n-        let cbox_out = PointerCast(bcx, Load(bcx, rval), llopaquecboxty);\n+            None));\n+        let cbox_out = PointerCast(bcx, llresult, llopaquecboxty);\n         call_memcpy(bcx, cbox_out, cbox_in, sz, 1);\n         Store(bcx, cbox_out, cboxptr);\n "}, {"sha": "8ca4253ead8b8b70ba27f9a32b9bf77bb6604331", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -395,7 +395,7 @@ fn trans_fail_value(bcx: block,\n     let V_filename = PointerCast(bcx, V_filename, Type::i8p());\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n     let bcx = callee::trans_lang_call(\n-        bcx, bcx.tcx().lang_items.fail_fn(), args, expr::Ignore);\n+        bcx, bcx.tcx().lang_items.fail_fn(), args, Some(expr::Ignore)).bcx;\n     Unreachable(bcx);\n     return bcx;\n }\n@@ -406,7 +406,7 @@ pub fn trans_fail_bounds_check(bcx: block, sp: span,\n     let (filename, line) = filename_and_line_num_from_span(bcx, sp);\n     let args = ~[filename, line, index, len];\n     let bcx = callee::trans_lang_call(\n-        bcx, bcx.tcx().lang_items.fail_bounds_check_fn(), args, expr::Ignore);\n+        bcx, bcx.tcx().lang_items.fail_bounds_check_fn(), args, Some(expr::Ignore)).bcx;\n     Unreachable(bcx);\n     return bcx;\n }"}, {"sha": "0180eeb3d22051db58bcef4ff47fe2fffba9045e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -1551,8 +1551,8 @@ fn trans_overloaded_op(bcx: block,\n                                                           origin)\n                              },\n                              callee::ArgExprs(args),\n-                             dest,\n-                             DoAutorefArg)\n+                             Some(dest),\n+                             DoAutorefArg).bcx\n }\n \n fn int_cast(bcx: block, lldsttype: Type, llsrctype: Type,"}, {"sha": "2c505853d5eb742ab44e044fc862d73cde01fe96", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -789,7 +789,7 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n             bcx = trans_call_inner(\n                 bcx, None, fty, ty::mk_nil(),\n                 |bcx| Callee {bcx: bcx, data: Closure(datum)},\n-                ArgVals(arg_vals), Ignore, DontAutorefArg);\n+                ArgVals(arg_vals), Some(Ignore), DontAutorefArg).bcx;\n         }\n         \"morestack_addr\" => {\n             // XXX This is a hack to grab the address of this particular"}, {"sha": "bc493bfa23ec30c9acb9e5250fdbb0f65f306752", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -47,15 +47,15 @@ pub fn trans_free(cx: block, v: ValueRef) -> block {\n     callee::trans_lang_call(cx,\n         cx.tcx().lang_items.free_fn(),\n         [PointerCast(cx, v, Type::i8p())],\n-        expr::Ignore)\n+        Some(expr::Ignore)).bcx\n }\n \n pub fn trans_exchange_free(cx: block, v: ValueRef) -> block {\n     let _icx = push_ctxt(\"trans_exchange_free\");\n     callee::trans_lang_call(cx,\n         cx.tcx().lang_items.exchange_free_fn(),\n         [PointerCast(cx, v, Type::i8p())],\n-        expr::Ignore)\n+        Some(expr::Ignore)).bcx\n }\n \n pub fn take_ty(cx: block, v: ValueRef, t: ty::t) -> block {"}, {"sha": "cc4111aa1947dca14b94621763f007689caa69bd", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -17,7 +17,6 @@ use middle::trans::callee::{ArgVals, DontAutorefArg};\n use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n-use middle::trans::expr::SaveIn;\n use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::meth;\n@@ -96,14 +95,13 @@ impl Reflector {\n             ty::mk_bare_fn(tcx, copy self.visitor_methods[mth_idx].fty);\n         let v = self.visitor_val;\n         debug!(\"passing %u args:\", args.len());\n-        let bcx = self.bcx;\n+        let mut bcx = self.bcx;\n         for args.iter().enumerate().advance |(i, a)| {\n             debug!(\"arg %u: %s\", i, bcx.val_to_str(*a));\n         }\n         let bool_ty = ty::mk_bool();\n-        let scratch = scratch_datum(bcx, bool_ty, false);\n         // XXX: Should not be BoxTraitStore!\n-        let bcx = callee::trans_call_inner(\n+        let result = unpack_result!(bcx, callee::trans_call_inner(\n             self.bcx, None, mth_ty, bool_ty,\n             |bcx| meth::trans_trait_callee_from_llval(bcx,\n                                                       mth_ty,\n@@ -113,8 +111,7 @@ impl Reflector {\n                                                       ast::sty_region(\n                                                         None,\n                                                         ast::m_imm)),\n-            ArgVals(args), SaveIn(scratch.val), DontAutorefArg);\n-        let result = scratch.to_value_llval(bcx);\n+            ArgVals(args), None, DontAutorefArg));\n         let result = bool_to_i1(bcx, result);\n         let next_bcx = sub_block(bcx, \"next\");\n         CondBr(bcx, result, next_bcx.llbb, self.final_bcx.llbb);"}, {"sha": "41dbe320d2d103d9a05251afde8168125f6b960e", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -337,7 +337,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: block, heap: heap, vstore_expr: @ast::e\n                         bcx,\n                         bcx.tcx().lang_items.strdup_uniq_fn(),\n                         [ llptrval, llsizeval ],\n-                        expr::SaveIn(lldestval.to_ref_llval(bcx)));\n+                        Some(expr::SaveIn(lldestval.to_ref_llval(bcx)))).bcx;\n                     return DatumBlock {\n                         bcx: bcx,\n                         datum: lldestval"}, {"sha": "bd22e41aff8f07ea3dba11070c313760ca3bdd6a", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ba8b3ac0692293511858cae6fe1a3e1dcc316b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=00ba8b3ac0692293511858cae6fe1a3e1dcc316b", "patch": "@@ -81,7 +81,7 @@ pub fn return_to_mut(mut bcx: block,\n                 filename_val,\n                 line_val\n             ],\n-            expr::Ignore);\n+            Some(expr::Ignore)).bcx;\n     }\n \n     callee::trans_lang_call(\n@@ -93,8 +93,8 @@ pub fn return_to_mut(mut bcx: block,\n             filename_val,\n             line_val\n         ],\n-        expr::Ignore\n-    )\n+        Some(expr::Ignore)\n+    ).bcx\n }\n \n fn root(datum: &Datum,\n@@ -144,27 +144,27 @@ fn root(datum: &Datum,\n \n             let box_ptr = Load(bcx, PointerCast(bcx, scratch.val, Type::i8p().ptr_to()));\n \n-            bcx = callee::trans_lang_call(\n+            let llresult = unpack_result!(bcx, callee::trans_lang_call(\n                 bcx,\n                 freeze_did,\n                 [\n                     box_ptr,\n                     filename,\n                     line\n                 ],\n-                expr::SaveIn(scratch_bits.val));\n+                Some(expr::SaveIn(scratch_bits.val))));\n \n             if bcx.tcx().sess.debug_borrows() {\n                 bcx = callee::trans_lang_call(\n                     bcx,\n                     bcx.tcx().lang_items.record_borrow_fn(),\n                     [\n                         box_ptr,\n-                        Load(bcx, scratch_bits.val),\n+                        llresult,\n                         filename,\n                         line\n                     ],\n-                    expr::Ignore);\n+                    Some(expr::Ignore)).bcx;\n             }\n \n             add_clean_return_to_mut(\n@@ -188,5 +188,5 @@ fn perform_write_guard(datum: &Datum,\n         bcx,\n         bcx.tcx().lang_items.check_not_borrowed_fn(),\n         [PointerCast(bcx, llval, Type::i8p()), filename, line],\n-        expr::Ignore)\n+        Some(expr::Ignore)).bcx\n }"}]}