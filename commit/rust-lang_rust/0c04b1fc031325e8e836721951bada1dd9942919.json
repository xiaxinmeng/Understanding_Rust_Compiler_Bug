{"sha": "0c04b1fc031325e8e836721951bada1dd9942919", "node_id": "C_kwDOAAsO6NoAKDBjMDRiMWZjMDMxMzI1ZThlODM2NzIxOTUxYmFkYTFkZDk5NDI5MTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-10T16:22:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T16:22:23Z"}, "message": "Rollup merge of #89718 - jkugelman:must-use-is_condition-tests, r=joshtriplett\n\nAdd #[must_use] to is_condition tests\n\nThere's nothing insightful to say about these so I didn't write any extra explanations.\n\nParent issue: #89692", "tree": {"sha": "e21b3bbdc68aceb74fae6f77b24bfae54068433e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e21b3bbdc68aceb74fae6f77b24bfae54068433e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c04b1fc031325e8e836721951bada1dd9942919", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYxM/CRBK7hj4Ov3rIwAAfZMIAF+MNHHqxCHiLy4Dw8Gi84fU\nTO3ZxCnWABZKyfIgxO2Sb2bJQwvZMDSg52nUYONEmu1UABcloOagen2dLRizTB7t\ndQHyWxAYwFqU44zquNZYAQC4u02PlVa2NLKeeAlakbLK8fvUBb6qIsNYAf6nruDw\nl1DJvNwA7kOM0Tp0iWp8+BKLqN8x4RXmvGO/Vx4ZYbzSN+8DLkfpC7wCUrUpXvIe\nzbGTqbVwt6FHwygcqFeCEmB2d1bUVWfX5VKMg7XdYGb0JtvNDWFb4uxM/81MyMQv\nhcoG+BX3sZXaR3a5v0RVVNRCEEwX0aCvjOrGitA7mmIaesZfuvyJDvBIFYQwdlo=\n=jmHZ\n-----END PGP SIGNATURE-----\n", "payload": "tree e21b3bbdc68aceb74fae6f77b24bfae54068433e\nparent 8aec76caf8b0dba8a53432e4af81dbe0f87356e4\nparent 475e9925a71648b48767c03b342fe327c003c15e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1633882943 +0200\ncommitter GitHub <noreply@github.com> 1633882943 +0200\n\nRollup merge of #89718 - jkugelman:must-use-is_condition-tests, r=joshtriplett\n\nAdd #[must_use] to is_condition tests\n\nThere's nothing insightful to say about these so I didn't write any extra explanations.\n\nParent issue: #89692\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c04b1fc031325e8e836721951bada1dd9942919", "html_url": "https://github.com/rust-lang/rust/commit/0c04b1fc031325e8e836721951bada1dd9942919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c04b1fc031325e8e836721951bada1dd9942919/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aec76caf8b0dba8a53432e4af81dbe0f87356e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aec76caf8b0dba8a53432e4af81dbe0f87356e4", "html_url": "https://github.com/rust-lang/rust/commit/8aec76caf8b0dba8a53432e4af81dbe0f87356e4"}, {"sha": "475e9925a71648b48767c03b342fe327c003c15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/475e9925a71648b48767c03b342fe327c003c15e", "html_url": "https://github.com/rust-lang/rust/commit/475e9925a71648b48767c03b342fe327c003c15e"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "f4c1010098256f7637ad860f841c6092b4cd9362", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -534,6 +534,7 @@ impl<T> BTreeSet<T> {\n     /// b.insert(1);\n     /// assert_eq!(a.is_disjoint(&b), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool\n     where\n@@ -559,6 +560,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(4);\n     /// assert_eq!(set.is_subset(&sup), false);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_subset(&self, other: &BTreeSet<T>) -> bool\n     where\n@@ -638,6 +640,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(2);\n     /// assert_eq!(set.is_superset(&sub), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_superset(&self, other: &BTreeSet<T>) -> bool\n     where"}, {"sha": "e5c4719b6f708218cc4eb68202456e68fed0914f", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -692,6 +692,7 @@ impl char {\n     /// // love is many things, but it is not alphabetic\n     /// assert!(!c.is_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_alphabetic(self) -> bool {\n@@ -724,6 +725,7 @@ impl char {\n     /// assert!(!'\u4e2d'.is_lowercase());\n     /// assert!(!' '.is_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_lowercase(self) -> bool {\n@@ -756,6 +758,7 @@ impl char {\n     /// assert!(!'\u4e2d'.is_uppercase());\n     /// assert!(!' '.is_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_uppercase(self) -> bool {\n@@ -784,6 +787,7 @@ impl char {\n     ///\n     /// assert!(!'\u8d8a'.is_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_whitespace(self) -> bool {\n@@ -812,6 +816,7 @@ impl char {\n     /// assert!('\u0648'.is_alphanumeric());\n     /// assert!('\u85cf'.is_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_alphanumeric(self) -> bool {\n@@ -837,6 +842,7 @@ impl char {\n     /// assert!('\u009c'.is_control());\n     /// assert!(!'q'.is_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_control(self) -> bool {\n@@ -852,6 +858,7 @@ impl char {\n     /// [uax29]: https://www.unicode.org/reports/tr29/\n     /// [ucd]: https://www.unicode.org/reports/tr44/\n     /// [`DerivedCoreProperties.txt`]: https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\n+    #[must_use]\n     #[inline]\n     pub(crate) fn is_grapheme_extended(self) -> bool {\n         unicode::Grapheme_Extend(self)\n@@ -881,6 +888,7 @@ impl char {\n     /// assert!(!'\u0648'.is_numeric());\n     /// assert!(!'\u85cf'.is_numeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_numeric(self) -> bool {\n@@ -1060,6 +1068,7 @@ impl char {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\")]\n     #[inline]\n@@ -1237,6 +1246,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1270,6 +1280,7 @@ impl char {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1303,6 +1314,7 @@ impl char {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1339,6 +1351,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1372,6 +1385,7 @@ impl char {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1408,6 +1422,7 @@ impl char {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1445,6 +1460,7 @@ impl char {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1478,6 +1494,7 @@ impl char {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1528,6 +1545,7 @@ impl char {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -1563,6 +1581,7 @@ impl char {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]"}, {"sha": "d3dd710f7c05fb4b8454422bd01b8cc2c9541ca6", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -436,6 +436,7 @@ impl f32 {\n     /// assert!(nan.is_nan());\n     /// assert!(!f.is_nan());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -467,6 +468,7 @@ impl f32 {\n     /// assert!(inf.is_infinite());\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -488,6 +490,7 @@ impl f32 {\n     /// assert!(!inf.is_finite());\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -515,6 +518,7 @@ impl f32 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -541,6 +545,7 @@ impl f32 {\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -587,6 +592,7 @@ impl f32 {\n     /// assert!(f.is_sign_positive());\n     /// assert!(!g.is_sign_positive());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -604,6 +610,7 @@ impl f32 {\n     /// assert!(!f.is_sign_negative());\n     /// assert!(g.is_sign_negative());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]"}, {"sha": "233c7b7e8de82fe23340acd5c2c58d7e1634f1cb", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -435,6 +435,7 @@ impl f64 {\n     /// assert!(nan.is_nan());\n     /// assert!(!f.is_nan());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -466,6 +467,7 @@ impl f64 {\n     /// assert!(inf.is_infinite());\n     /// assert!(neg_inf.is_infinite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -487,6 +489,7 @@ impl f64 {\n     /// assert!(!inf.is_finite());\n     /// assert!(!neg_inf.is_finite());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -514,6 +517,7 @@ impl f64 {\n     /// assert!(lower_than_min.is_subnormal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"is_subnormal\", since = \"1.53.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -540,6 +544,7 @@ impl f64 {\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n     /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n@@ -586,13 +591,15 @@ impl f64 {\n     /// assert!(f.is_sign_positive());\n     /// assert!(!g.is_sign_positive());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_positive(self) -> bool {\n         !self.is_sign_negative()\n     }\n \n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n     #[inline]\n@@ -611,13 +618,15 @@ impl f64 {\n     /// assert!(!f.is_sign_negative());\n     /// assert!(g.is_sign_negative());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_negative(self) -> bool {\n         self.to_bits() & 0x8000_0000_0000_0000 != 0\n     }\n \n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n     #[inline]"}, {"sha": "1eff6f9613019864f3e1413ce6e72eaf1251d745", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -2502,6 +2502,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert!(10\", stringify!($SelfT), \".is_positive());\")]\n         #[doc = concat!(\"assert!(!(-10\", stringify!($SelfT), \").is_positive());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[inline(always)]\n@@ -2518,6 +2519,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert!((-10\", stringify!($SelfT), \").is_negative());\")]\n         #[doc = concat!(\"assert!(!10\", stringify!($SelfT), \".is_negative());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[inline(always)]"}, {"sha": "18ebf1cbb1063e51fe3a9970612054d075f2f390", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -259,6 +259,7 @@ impl u8 {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.43.0\")]\n     #[inline]\n@@ -419,6 +420,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -452,6 +454,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -485,6 +488,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -521,6 +525,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -554,6 +559,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -590,6 +596,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -627,6 +634,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -660,6 +668,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -710,6 +719,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n@@ -745,6 +755,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]"}, {"sha": "c1e768655e094f3a649d18a7720cb3b8d050c349", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -878,6 +878,7 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n                 #[doc = concat!(\"let ten = std::num::\", stringify!($Ty), \"::new(10).unwrap();\")]\n                 /// assert!(!ten.is_power_of_two());\n                 /// ```\n+                #[must_use]\n                 #[unstable(feature = \"nonzero_is_power_of_two\", issue = \"81106\")]\n                 #[inline]\n                 pub const fn is_power_of_two(self) -> bool {"}, {"sha": "af7b9c63fd207c7c1083d896e61d2b49fe672de5", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -847,6 +847,7 @@ macro_rules! saturating_int_impl_signed {\n             #[doc = concat!(\"assert!(Saturating(10\", stringify!($t), \").is_positive());\")]\n             #[doc = concat!(\"assert!(!Saturating(-10\", stringify!($t), \").is_positive());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn is_positive(self) -> bool {\n@@ -867,6 +868,7 @@ macro_rules! saturating_int_impl_signed {\n             #[doc = concat!(\"assert!(Saturating(-10\", stringify!($t), \").is_negative());\")]\n             #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_negative());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn is_negative(self) -> bool {\n@@ -925,6 +927,7 @@ macro_rules! saturating_int_impl_unsigned {\n             #[doc = concat!(\"assert!(Saturating(16\", stringify!($t), \").is_power_of_two());\")]\n             #[doc = concat!(\"assert!(!Saturating(10\", stringify!($t), \").is_power_of_two());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub fn is_power_of_two(self) -> bool {"}, {"sha": "8cd5b2c6dc0c12b96fb3228e2e6be415f31a384a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -2086,6 +2086,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert!(16\", stringify!($SelfT), \".is_power_of_two());\")]\n         #[doc = concat!(\"assert!(!10\", stringify!($SelfT), \".is_power_of_two());\")]\n         /// ```\n+        #[must_use]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]\n         #[inline(always)]"}, {"sha": "beb413bbddca481b461093ab52d40f558e527868", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -844,6 +844,7 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert!(Wrapping(10\", stringify!($t), \").is_positive());\")]\n             #[doc = concat!(\"assert!(!Wrapping(-10\", stringify!($t), \").is_positive());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn is_positive(self) -> bool {\n@@ -864,6 +865,7 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert!(Wrapping(-10\", stringify!($t), \").is_negative());\")]\n             #[doc = concat!(\"assert!(!Wrapping(10\", stringify!($t), \").is_negative());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn is_negative(self) -> bool {\n@@ -911,6 +913,7 @@ macro_rules! wrapping_int_impl_unsigned {\n             #[doc = concat!(\"assert!(Wrapping(16\", stringify!($t), \").is_power_of_two());\")]\n             #[doc = concat!(\"assert!(!Wrapping(10\", stringify!($t), \").is_power_of_two());\")]\n             /// ```\n+            #[must_use]\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn is_power_of_two(self) -> bool {"}, {"sha": "14ce94c178c5bdb8785bafd9f98f9b7df6295567", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -188,6 +188,7 @@ impl str {\n     /// // third byte of `\u8001`\n     /// assert!(!s.is_char_boundary(8));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n     #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {"}, {"sha": "949a3e68f2b6a3cb00b1a5e32e679bc1f7ed1127", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c04b1fc031325e8e836721951bada1dd9942919/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=0c04b1fc031325e8e836721951bada1dd9942919", "patch": "@@ -291,6 +291,7 @@ impl Duration {\n     /// assert!(!Duration::from_nanos(1).is_zero());\n     /// assert!(!Duration::from_secs(1).is_zero());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[rustc_const_stable(feature = \"duration_zero\", since = \"1.53.0\")]\n     #[inline]"}]}