{"sha": "5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "node_id": "C_kwDOAAsO6NoAKDVmMWJjNmZjNWUzNjJjNTk1NWY2YTA2YTdjZjIxZTYyYjk3Yzg2Yzc", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-24T19:09:37Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T15:14:15Z"}, "message": "jsondocck: Better errors", "tree": {"sha": "79c448bfe9f3e5395f97222a9fb21c18b6720fbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c448bfe9f3e5395f97222a9fb21c18b6720fbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "html_url": "https://github.com/rust-lang/rust/commit/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1911db393047382ae040c23598e25984244644", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1911db393047382ae040c23598e25984244644", "html_url": "https://github.com/rust-lang/rust/commit/bb1911db393047382ae040c23598e25984244644"}], "stats": {"total": 115, "additions": 70, "deletions": 45}, "files": [{"sha": "f4153245e0b7f6fa3209e58130525c3f0d5f5b95", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "patch": "@@ -31,7 +31,6 @@ pub(crate) enum Kind {\n     Keyword,\n     // Not in ItemKind\n     ProcMacro,\n-    PrimitiveType,\n }\n \n impl Kind {\n@@ -54,13 +53,13 @@ impl Kind {\n             Macro => true,\n             ProcMacro => true,\n \n-            ForeignType => todo!(\"IDK\"),\n-            Keyword => todo!(\"IDK\"),\n-            OpaqueTy => todo!(\"IDK\"),\n-            Primitive => todo!(\"IDK\"),\n-            PrimitiveType => todo!(\"IDK\"),\n-            ProcAttribute => todo!(\"IDK\"),\n-            ProcDerive => todo!(\"IDK\"),\n+            // FIXME(adotinthevoid): I'm not sure if these are corrent\n+            ForeignType => false,\n+            Keyword => false,\n+            OpaqueTy => false,\n+            Primitive => false,\n+            ProcAttribute => false,\n+            ProcDerive => false,\n \n             // Only in traits\n             AssocConst => false,\n@@ -101,7 +100,6 @@ impl Kind {\n             Kind::Primitive => false,\n             Kind::Keyword => false,\n             Kind::ProcMacro => false,\n-            Kind::PrimitiveType => false,\n         }\n     }\n \n@@ -139,7 +137,8 @@ impl Kind {\n             ItemEnum::Static(_) => Static,\n             ItemEnum::Macro(_) => Macro,\n             ItemEnum::ProcMacro(_) => ProcMacro,\n-            ItemEnum::PrimitiveType(_) => PrimitiveType,\n+            // https://github.com/rust-lang/rust/issues/100961\n+            ItemEnum::PrimitiveType(_) => Primitive,\n             ItemEnum::ForeignType => ForeignType,\n             ItemEnum::ExternCrate { .. } => ExternCrate,\n             ItemEnum::AssocConst { .. } => AssocConst,"}, {"sha": "4df8fbc29a2bbf0c9cb0ff31279f49b0fc04d784", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "patch": "@@ -9,10 +9,16 @@ mod validator;\n \n #[derive(Debug)]\n struct Error {\n-    message: String,\n+    kind: ErrorKind,\n     id: Id,\n }\n \n+#[derive(Debug)]\n+enum ErrorKind {\n+    NotFound,\n+    Custom(String),\n+}\n+\n fn main() -> Result<()> {\n     let path = env::args().nth(1).ok_or_else(|| anyhow!(\"no path given\"))?;\n     let contents = fs::read_to_string(path)?;\n@@ -24,7 +30,10 @@ fn main() -> Result<()> {\n \n     if !validator.errs.is_empty() {\n         for err in validator.errs {\n-            eprintln!(\"`{}`: `{}`\", err.id.0, err.message);\n+            match err.kind {\n+                ErrorKind::NotFound => eprintln!(\"{}: Not Found\", err.id.0),\n+                ErrorKind::Custom(msg) => eprintln!(\"{}: {}\", err.id.0, msg),\n+            }\n         }\n         bail!(\"Errors validating json\");\n     }"}, {"sha": "06b114f6c2fe6ce2bfade04322fe02355208ed91", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 50, "deletions": 33, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "patch": "@@ -8,13 +8,14 @@ use rustdoc_json_types::{\n     TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n };\n \n-use crate::{item_kind::Kind, Error};\n+use crate::{item_kind::Kind, Error, ErrorKind};\n \n #[derive(Debug)]\n pub struct Validator<'a> {\n     pub(crate) errs: Vec<Error>,\n     krate: &'a Crate,\n     seen_ids: HashSet<&'a Id>,\n+    missing_ids: HashSet<&'a Id>,\n     todo: HashSet<&'a Id>,\n }\n \n@@ -29,7 +30,13 @@ fn set_remove<T: Hash + Eq + Clone>(set: &mut HashSet<T>) -> Option<T> {\n \n impl<'a> Validator<'a> {\n     pub fn new(krate: &'a Crate) -> Self {\n-        Self { krate, errs: Vec::new(), seen_ids: HashSet::new(), todo: HashSet::new() }\n+        Self {\n+            krate,\n+            errs: Vec::new(),\n+            seen_ids: HashSet::new(),\n+            todo: HashSet::new(),\n+            missing_ids: HashSet::new(),\n+        }\n     }\n \n     pub fn check_crate(&mut self) {\n@@ -42,32 +49,39 @@ impl<'a> Validator<'a> {\n     }\n \n     fn check_item(&mut self, id: &'a Id) {\n-        let item = &self.krate.index[id];\n-        match &item.inner {\n-            ItemEnum::Import(x) => self.check_import(x),\n-            ItemEnum::Union(x) => self.check_union(x),\n-            ItemEnum::Struct(x) => self.check_struct(x),\n-            ItemEnum::StructField(x) => self.check_struct_field(x),\n-            ItemEnum::Enum(x) => self.check_enum(x),\n-            ItemEnum::Variant(x) => self.check_variant(x),\n-            ItemEnum::Function(x) => self.check_function(x),\n-            ItemEnum::Trait(x) => self.check_trait(x),\n-            ItemEnum::TraitAlias(x) => self.check_trait_alias(x),\n-            ItemEnum::Method(x) => self.check_method(x),\n-            ItemEnum::Impl(x) => self.check_impl(x),\n-            ItemEnum::Typedef(x) => self.check_typedef(x),\n-            ItemEnum::OpaqueTy(x) => self.check_opaque_ty(x),\n-            ItemEnum::Constant(x) => self.check_constant(x),\n-            ItemEnum::Static(x) => self.check_static(x),\n-            ItemEnum::ForeignType => todo!(),\n-            ItemEnum::Macro(x) => self.check_macro(x),\n-            ItemEnum::ProcMacro(x) => self.check_proc_macro(x),\n-            ItemEnum::PrimitiveType(x) => self.check_primitive_type(x),\n-            ItemEnum::Module(x) => self.check_module(x),\n-\n-            ItemEnum::ExternCrate { .. } => todo!(),\n-            ItemEnum::AssocConst { .. } => todo!(),\n-            ItemEnum::AssocType { .. } => todo!(),\n+        if let Some(item) = &self.krate.index.get(id) {\n+            match &item.inner {\n+                ItemEnum::Import(x) => self.check_import(x),\n+                ItemEnum::Union(x) => self.check_union(x),\n+                ItemEnum::Struct(x) => self.check_struct(x),\n+                ItemEnum::StructField(x) => self.check_struct_field(x),\n+                ItemEnum::Enum(x) => self.check_enum(x),\n+                ItemEnum::Variant(x) => self.check_variant(x),\n+                ItemEnum::Function(x) => self.check_function(x),\n+                ItemEnum::Trait(x) => self.check_trait(x),\n+                ItemEnum::TraitAlias(x) => self.check_trait_alias(x),\n+                ItemEnum::Method(x) => self.check_method(x),\n+                ItemEnum::Impl(x) => self.check_impl(x),\n+                ItemEnum::Typedef(x) => self.check_typedef(x),\n+                ItemEnum::OpaqueTy(x) => self.check_opaque_ty(x),\n+                ItemEnum::Constant(x) => self.check_constant(x),\n+                ItemEnum::Static(x) => self.check_static(x),\n+                ItemEnum::ForeignType => todo!(),\n+                ItemEnum::Macro(x) => self.check_macro(x),\n+                ItemEnum::ProcMacro(x) => self.check_proc_macro(x),\n+                ItemEnum::PrimitiveType(x) => self.check_primitive_type(x),\n+                ItemEnum::Module(x) => self.check_module(x),\n+                // FIXME: Why don't these have their own structs?\n+                ItemEnum::ExternCrate { .. } => {}\n+                ItemEnum::AssocConst { type_, default: _ } => self.check_type(type_),\n+                ItemEnum::AssocType { generics, bounds, default } => {\n+                    self.check_generics(generics);\n+                    bounds.iter().for_each(|b| self.check_generic_bound(b));\n+                    if let Some(ty) = default {\n+                        self.check_type(ty);\n+                    }\n+                }\n+            }\n         }\n     }\n \n@@ -226,7 +240,7 @@ impl<'a> Validator<'a> {\n                 self.check_path(trait_);\n                 generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n             }\n-            GenericBound::Outlives(_) => todo!(),\n+            GenericBound::Outlives(_) => {}\n         }\n     }\n \n@@ -337,7 +351,10 @@ impl<'a> Validator<'a> {\n                 self.fail_expecting(id, expected);\n             }\n         } else {\n-            self.fail(id, \"Not found\")\n+            if !self.missing_ids.contains(id) {\n+                self.missing_ids.insert(id);\n+                self.fail(id, ErrorKind::NotFound)\n+            }\n         }\n     }\n \n@@ -368,11 +385,11 @@ impl<'a> Validator<'a> {\n \n     fn fail_expecting(&mut self, id: &Id, expected: &str) {\n         let kind = self.kind_of(id).unwrap(); // We know it has a kind, as it's wrong.\n-        self.fail(id, format!(\"Expected {expected} but found {kind:?}\"));\n+        self.fail(id, ErrorKind::Custom(format!(\"Expected {expected} but found {kind:?}\")));\n     }\n \n-    fn fail(&mut self, id: &Id, message: impl Into<String>) {\n-        self.errs.push(Error { id: id.clone(), message: message.into() });\n+    fn fail(&mut self, id: &Id, kind: ErrorKind) {\n+        self.errs.push(Error { id: id.clone(), kind });\n     }\n \n     fn kind_of(&mut self, id: &Id) -> Option<Kind> {"}]}