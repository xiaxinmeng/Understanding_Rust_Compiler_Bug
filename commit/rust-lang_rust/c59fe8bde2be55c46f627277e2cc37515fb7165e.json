{"sha": "c59fe8bde2be55c46f627277e2cc37515fb7165e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OWZlOGJkZTJiZTU1YzQ2ZjYyNzI3N2UyY2MzNzUxNWZiNzE2NWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-25T14:42:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-26T21:52:38Z"}, "message": "Drive-by fix for incorrect variance rule that I noticed.", "tree": {"sha": "440adc716ee92dbd5a24e1ce76f3e2305725d256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440adc716ee92dbd5a24e1ce76f3e2305725d256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c59fe8bde2be55c46f627277e2cc37515fb7165e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c59fe8bde2be55c46f627277e2cc37515fb7165e", "html_url": "https://github.com/rust-lang/rust/commit/c59fe8bde2be55c46f627277e2cc37515fb7165e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c59fe8bde2be55c46f627277e2cc37515fb7165e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "html_url": "https://github.com/rust-lang/rust/commit/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "3a716b28e73a711696a28cea07517b09dd385668", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c59fe8bde2be55c46f627277e2cc37515fb7165e/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59fe8bde2be55c46f627277e2cc37515fb7165e/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=c59fe8bde2be55c46f627277e2cc37515fb7165e", "patch": "@@ -1059,14 +1059,29 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n \n                 ty::Predicate::Equate(ty::Binder(ref data)) => {\n-                    self.add_constraints_from_ty(generics, data.0, variance);\n-                    self.add_constraints_from_ty(generics, data.1, variance);\n+                    // A == B is only true if A and B are the same\n+                    // types, not subtypes of one another, so this is\n+                    // an invariant position:\n+                    self.add_constraints_from_ty(generics, data.0, self.invariant);\n+                    self.add_constraints_from_ty(generics, data.1, self.invariant);\n                 }\n \n                 ty::Predicate::TypeOutlives(ty::Binder(ref data)) => {\n-                    self.add_constraints_from_ty(generics, data.0, variance);\n+                    // Why contravariant on both? Let's consider:\n+                    //\n+                    // Under what conditions is `(T:'t) <: (U:'u)`,\n+                    // meaning that `(T:'t) => (U:'u)`. The answer is\n+                    // if `U <: T` or `'u <= 't`. Let's see some examples:\n+                    //\n+                    //   (T: 'big) => (T: 'small)\n+                    //   where 'small <= 'big\n+                    //\n+                    //   (&'small Foo: 't) => (&'big Foo: 't)\n+                    //   where 'small <= 'big\n+                    //   note that &'big Foo <: &'small Foo\n \n                     let variance_r = self.xform(variance, self.contravariant);\n+                    self.add_constraints_from_ty(generics, data.0, variance_r);\n                     self.add_constraints_from_region(generics, data.1, variance_r);\n                 }\n \n@@ -1084,6 +1099,9 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                                                         &*data.projection_ty.trait_ref,\n                                                         variance);\n \n+                    // as the equality predicate above, a binder is a\n+                    // type equality relation, not a subtyping\n+                    // relation\n                     self.add_constraints_from_ty(generics, data.ty, self.invariant);\n                 }\n             }"}, {"sha": "96ae201f6ae94fb771b014b6384b67715ed8567f", "filename": "src/test/compile-fail/variance-region-bounds.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c59fe8bde2be55c46f627277e2cc37515fb7165e/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59fe8bde2be55c46f627277e2cc37515fb7165e/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs?ref=c59fe8bde2be55c46f627277e2cc37515fb7165e", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that `T:'a` is contravariant in T.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_variance]\n+trait Foo: 'static { //~ ERROR types=[[];[-];[]]\n+}\n+\n+#[rustc_variance]\n+trait Bar<T> { //~ ERROR types=[[+];[-];[]]\n+    fn do_it(&self)\n+        where T: 'static;\n+}\n+\n+fn main() { }"}]}