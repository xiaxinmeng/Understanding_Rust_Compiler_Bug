{"sha": "456f65ec8b7ec815cab39929b31f4b6e181651c2", "node_id": "C_kwDOAAsO6NoAKDQ1NmY2NWVjOGI3ZWM4MTVjYWIzOTkyOWIzMWY0YjZlMTgxNjUxYzI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-06-17T20:53:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-06-25T18:57:08Z"}, "message": "rustc_target: Some more tests and fixes for linker arguments", "tree": {"sha": "cd6ea42e4184c4327826e14e734f8c5eed959651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6ea42e4184c4327826e14e734f8c5eed959651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/456f65ec8b7ec815cab39929b31f4b6e181651c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/456f65ec8b7ec815cab39929b31f4b6e181651c2", "html_url": "https://github.com/rust-lang/rust/commit/456f65ec8b7ec815cab39929b31f4b6e181651c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/456f65ec8b7ec815cab39929b31f4b6e181651c2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46aba8850b1d4099dfdb060d070978a6ba70cad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/46aba8850b1d4099dfdb060d070978a6ba70cad5", "html_url": "https://github.com/rust-lang/rust/commit/46aba8850b1d4099dfdb060d070978a6ba70cad5"}], "stats": {"total": 176, "additions": 132, "deletions": 44}, "files": [{"sha": "59dbea705344775dd515a990495a643a596ca150", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -8,6 +8,7 @@\n //! LLVM.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n #![feature(let_else)]"}, {"sha": "6318654399c47bbb9e87f177dffdbb65c909818e", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -3,13 +3,13 @@ use crate::spec::{FramePointer, LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\"]);\n     base.max_atomic_width = Some(64);\n     base.frame_pointer = FramePointer::Always; // Required for backtraces\n     base.linker = Some(\"i686-w64-mingw32-gcc\".into());\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\", \"--large-address-aware\"]);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-Wl,--large-address-aware\"]);\n \n     Target {"}, {"sha": "d52810d2fb08b3e2651eb771b0d13a4ab7a4039f", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -3,12 +3,12 @@ use crate::spec::{FramePointer, LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\"]);\n     base.max_atomic_width = Some(64);\n     base.frame_pointer = FramePointer::Always; // Required for backtraces\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\", \"--large-address-aware\"]);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-Wl,--large-address-aware\"]);\n \n     Target {"}, {"sha": "c7c5a23190102c4c67f1c234df95f1ff0d4bfaf4", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 84, "deletions": 13, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -1,4 +1,5 @@\n use super::super::*;\n+use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n pub(super) fn test_target(target: Target) {\n@@ -14,35 +15,105 @@ impl Target {\n         assert_eq!(self.is_like_wasm, self.arch == \"wasm32\" || self.arch == \"wasm64\");\n         assert!(self.is_like_windows || !self.is_like_msvc);\n \n-        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n-        // If your target really needs to deviate from the rules below, except it and document the\n-        // reasons.\n-        assert_eq!(\n-            self.linker_flavor == LinkerFlavor::Msvc\n-                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n-            self.lld_flavor == LldFlavor::Link,\n-        );\n-        assert_eq!(self.is_like_msvc, self.lld_flavor == LldFlavor::Link);\n-        for args in &[\n+        // Check that default linker flavor and lld flavor are compatible\n+        // with some other key properties.\n+        assert_eq!(self.is_like_osx, matches!(self.lld_flavor, LldFlavor::Ld64));\n+        assert_eq!(self.is_like_msvc, matches!(self.lld_flavor, LldFlavor::Link));\n+        assert_eq!(self.is_like_wasm, matches!(self.lld_flavor, LldFlavor::Wasm));\n+        assert_eq!(self.os == \"l4re\", matches!(self.linker_flavor, LinkerFlavor::L4Bender));\n+        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::Em));\n+        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::BpfLinker));\n+        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::PtxLinker));\n+\n+        for args in [\n             &self.pre_link_args,\n             &self.late_link_args,\n             &self.late_link_args_dynamic,\n             &self.late_link_args_static,\n             &self.post_link_args,\n         ] {\n+            for (&flavor, flavor_args) in args {\n+                assert!(!flavor_args.is_empty());\n+                // Check that flavors mentioned in link args are compatible with the default flavor.\n+                match (self.linker_flavor, self.lld_flavor) {\n+                    (\n+                        LinkerFlavor::Ld | LinkerFlavor::Lld(LldFlavor::Ld) | LinkerFlavor::Gcc,\n+                        LldFlavor::Ld,\n+                    ) => {\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Ld | LinkerFlavor::Lld(LldFlavor::Ld) | LinkerFlavor::Gcc\n+                        )\n+                    }\n+                    (LinkerFlavor::Gcc, LldFlavor::Ld64) => {\n+                        assert_matches!(flavor, LinkerFlavor::Gcc)\n+                    }\n+                    (LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link), LldFlavor::Link) => {\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link)\n+                        )\n+                    }\n+                    (LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc, LldFlavor::Wasm) => {\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc\n+                        )\n+                    }\n+                    (LinkerFlavor::L4Bender, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::L4Bender)\n+                    }\n+                    (LinkerFlavor::Em, LldFlavor::Wasm) => {\n+                        assert_matches!(flavor, LinkerFlavor::Em)\n+                    }\n+                    (LinkerFlavor::BpfLinker, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::BpfLinker)\n+                    }\n+                    (LinkerFlavor::PtxLinker, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::PtxLinker)\n+                    }\n+                    flavors => unreachable!(\"unexpected flavor combination: {:?}\", flavors),\n+                }\n+\n+                // Check that link args for cc and non-cc versions of flavors are consistent.\n+                let check_noncc = |noncc_flavor| {\n+                    if let Some(noncc_args) = args.get(&noncc_flavor) {\n+                        for arg in flavor_args {\n+                            if let Some(suffix) = arg.strip_prefix(\"-Wl,\") {\n+                                assert!(noncc_args.iter().any(|a| a == suffix));\n+                            }\n+                        }\n+                    }\n+                };\n+                match self.linker_flavor {\n+                    LinkerFlavor::Gcc => match self.lld_flavor {\n+                        LldFlavor::Ld => {\n+                            check_noncc(LinkerFlavor::Ld);\n+                            check_noncc(LinkerFlavor::Lld(LldFlavor::Ld));\n+                        }\n+                        LldFlavor::Wasm => check_noncc(LinkerFlavor::Lld(LldFlavor::Wasm)),\n+                        LldFlavor::Ld64 | LldFlavor::Link => {}\n+                    },\n+                    _ => {}\n+                }\n+            }\n+\n+            // Check that link args for lld and non-lld versions of flavors are consistent.\n+            assert_eq!(args.get(&LinkerFlavor::Ld), args.get(&LinkerFlavor::Lld(LldFlavor::Ld)));\n             assert_eq!(\n                 args.get(&LinkerFlavor::Msvc),\n                 args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n             );\n-            if args.contains_key(&LinkerFlavor::Msvc) {\n-                assert_eq!(self.lld_flavor, LldFlavor::Link);\n-            }\n         }\n+\n         assert!(\n             (self.pre_link_objects_fallback.is_empty()\n                 && self.post_link_objects_fallback.is_empty())\n                 || self.crt_objects_fallback.is_some()\n         );\n+\n+        // If your target really needs to deviate from the rules below,\n+        // except it and document the reasons.\n         // Keep the default \"unknown\" vendor instead.\n         assert_ne!(self.vendor, \"\");\n         if !self.can_use_os_unknown() {"}, {"sha": "c7e7d22108656ffab3264bc5263cb0a2575e9f12", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -1,16 +1,13 @@\n use super::{cvs, wasm_base};\n-use super::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use super::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut options = wasm_base::options();\n-\n-    // Rust really needs a way for users to specify exports and imports in\n-    // the source code. --export-dynamic isn't the right tool for this job,\n-    // however it does have the side effect of automatically exporting a lot\n-    // of symbols, which approximates what people want when compiling for\n-    // wasm32-unknown-unknown expect, so use it for now.\n-    options.add_pre_link_args(LinkerFlavor::Gcc, &[\"--export-dynamic\"]);\n-    options.add_post_link_args(LinkerFlavor::Em, &[\"-sABORTING_MALLOC=0\", \"-Wl,--fatal-warnings\"]);\n+    // Reset flags for non-Em flavors back to empty to satisfy sanity checking tests.\n+    let pre_link_args = LinkArgs::new();\n+    let post_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Em,\n+        &[\"-sABORTING_MALLOC=0\", \"-Wl,--fatal-warnings\"],\n+    );\n \n     let opts = TargetOptions {\n         os: \"emscripten\".into(),\n@@ -19,11 +16,13 @@ pub fn target() -> Target {\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".into(),\n         linker: None,\n+        pre_link_args,\n+        post_link_args,\n         relocation_model: RelocModel::Pic,\n         panic_strategy: PanicStrategy::Unwind,\n         no_default_libraries: false,\n         families: cvs![\"unix\", \"wasm\"],\n-        ..options\n+        ..wasm_base::options()\n     };\n     Target {\n         llvm_target: \"wasm32-unknown-emscripten\".into(),"}, {"sha": "4e2927dd913c235f36119fcf4c3d756375e172db", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -30,27 +30,30 @@ pub fn target() -> Target {\n     options.default_adjusted_cabi = Some(Abi::Wasm);\n \n     options.add_pre_link_args(\n-        LinkerFlavor::Gcc,\n+        LinkerFlavor::Lld(LldFlavor::Wasm),\n         &[\n-            // Make sure clang uses LLD as its linker and is configured appropriately\n-            // otherwise\n-            \"--target=wasm32-unknown-unknown\",\n             // For now this target just never has an entry symbol no matter the output\n             // type, so unconditionally pass this.\n-            \"-Wl,--no-entry\",\n+            \"--no-entry\",\n             // Rust really needs a way for users to specify exports and imports in\n             // the source code. --export-dynamic isn't the right tool for this job,\n             // however it does have the side effect of automatically exporting a lot\n             // of symbols, which approximates what people want when compiling for\n             // wasm32-unknown-unknown expect, so use it for now.\n+            \"--export-dynamic\",\n+        ],\n+    );\n+    options.add_pre_link_args(\n+        LinkerFlavor::Gcc,\n+        &[\n+            // Make sure clang uses LLD as its linker and is configured appropriately\n+            // otherwise\n+            \"--target=wasm32-unknown-unknown\",\n+            \"-Wl,--no-entry\",\n             \"-Wl,--export-dynamic\",\n         ],\n     );\n \n-    // Add the flags to wasm-ld's args too.\n-    options\n-        .add_pre_link_args(LinkerFlavor::Lld(LldFlavor::Wasm), &[\"--no-entry\", \"--export-dynamic\"]);\n-\n     Target {\n         llvm_target: \"wasm32-unknown-unknown\".into(),\n         pointer_width: 32,"}, {"sha": "5211f7707fbb2705a574401b61f914da46a9939d", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -15,20 +15,25 @@ pub fn target() -> Target {\n     options.os = \"unknown\".into();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n \n+    options.add_pre_link_args(\n+        LinkerFlavor::Lld(LldFlavor::Wasm),\n+        &[\n+            // For now this target just never has an entry symbol no matter the output\n+            // type, so unconditionally pass this.\n+            \"--no-entry\",\n+            \"-mwasm64\",\n+        ],\n+    );\n     options.add_pre_link_args(\n         LinkerFlavor::Gcc,\n         &[\n             // Make sure clang uses LLD as its linker and is configured appropriately\n             // otherwise\n             \"--target=wasm64-unknown-unknown\",\n-            // For now this target just never has an entry symbol no matter the output\n-            // type, so unconditionally pass this.\n             \"-Wl,--no-entry\",\n         ],\n     );\n \n-    options.add_pre_link_args(LinkerFlavor::Lld(LldFlavor::Wasm), &[\"--no-entry\", \"-mwasm64\"]);\n-\n     // Any engine that implements wasm64 will surely implement the rest of these\n     // features since they were all merged into the official spec by the time\n     // wasm64 was designed."}, {"sha": "a0480f386f74e0fa3c0572824ee45819b981ff63", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -2,15 +2,23 @@ use crate::spec::crt_objects::{self, CrtObjectsFallback};\n use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let pre_link_args = TargetOptions::link_args(\n+    let mut pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Ld,\n+        &[\n+            // Enable ASLR\n+            \"--dynamicbase\",\n+            // ASLR will rebase it anyway so leaving that option enabled only leads to confusion\n+            \"--disable-auto-image-base\",\n+        ],\n+    );\n+    super::add_link_args(\n+        &mut pre_link_args,\n         LinkerFlavor::Gcc,\n         &[\n             // Tell GCC to avoid linker plugins, because we are not bundling\n             // them with Windows installer, and Rust does its own LTO anyways.\n             \"-fno-use-linker-plugin\",\n-            // Enable ASLR\n             \"-Wl,--dynamicbase\",\n-            // ASLR will rebase it anyway so leaving that option enabled only leads to confusion\n             \"-Wl,--disable-auto-image-base\",\n         ],\n     );"}, {"sha": "334dec43ef7e047e024deff832f8614f672779c6", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -17,6 +17,7 @@ pub fn opts() -> TargetOptions {\n     ];\n     let mut late_link_args = TargetOptions::link_args(LinkerFlavor::Ld, mingw_libs);\n     super::add_link_args(&mut late_link_args, LinkerFlavor::Gcc, mingw_libs);\n+    // Reset the flags back to empty until the FIXME above is addressed.\n     let late_link_args_dynamic = LinkArgs::new();\n     let late_link_args_static = LinkArgs::new();\n "}, {"sha": "59a8cffca480ae7f838c1b3530f548fdd90c32dc", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -4,8 +4,8 @@ pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     // Use high-entropy 64 bit address space for ASLR\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\", \"--high-entropy-va\"]);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\"]);\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-gcc\".into());\n "}, {"sha": "76d2013cf7fdc6021748c627db3930ee353c19e0", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456f65ec8b7ec815cab39929b31f4b6e181651c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=456f65ec8b7ec815cab39929b31f4b6e181651c2", "patch": "@@ -4,8 +4,8 @@ pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     // Use high-entropy 64 bit address space for ASLR\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\", \"--high-entropy-va\"]);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n-    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}]}