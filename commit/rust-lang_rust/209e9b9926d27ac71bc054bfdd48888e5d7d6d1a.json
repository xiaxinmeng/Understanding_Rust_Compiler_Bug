{"sha": "209e9b9926d27ac71bc054bfdd48888e5d7d6d1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOWU5Yjk5MjZkMjdhYzcxYmMwNTRiZmRkNDg4ODhlNWQ3ZDZkMWE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-07T09:30:42Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-07T09:30:42Z"}, "message": "Shorten iterator chain hints", "tree": {"sha": "e7d872d62a03021f29ce4cf92e5382bec7532fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d872d62a03021f29ce4cf92e5382bec7532fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a", "html_url": "https://github.com/rust-lang/rust/commit/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c133651e0a613d4833bba1c1f229222d060e2ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c133651e0a613d4833bba1c1f229222d060e2ba8", "html_url": "https://github.com/rust-lang/rust/commit/c133651e0a613d4833bba1c1f229222d060e2ba8"}], "stats": {"total": 158, "additions": 115, "deletions": 43}, "files": [{"sha": "92b3c3b009b68f29590f85603dab82e299de1534", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=209e9b9926d27ac71bc054bfdd48888e5d7d6d1a", "patch": "@@ -281,43 +281,70 @@ impl FamousDefs<'_, '_> {\n     pub const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n pub mod convert {\n     pub trait From<T> {\n-        fn from(T) -> Self;\n+        fn from(t: T) -> Self;\n     }\n }\n \n pub mod iter {\n     pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n     mod traits {\n-        mod iterator {\n+        pub(crate) mod iterator {\n             use crate::option::Option;\n             pub trait Iterator {\n                 type Item;\n                 fn next(&mut self) -> Option<Self::Item>;\n+                fn by_ref(&mut self) -> &mut Self {\n+                    self\n+                }\n+                fn take(self, n: usize) -> crate::iter::Take<Self> {\n+                    crate::iter::Take { inner: self }\n+                }\n+            }\n+\n+            impl<I: Iterator> Iterator for &mut I {\n+                type Item = I::Item;\n+                fn next(&mut self) -> Option<I::Item> {\n+                    (**self).next()\n+                }\n             }\n         }\n-        mod collect {            \n+        pub(crate) mod collect {            \n             pub trait IntoIterator {\n                 type Item;\n             }\n         }\n     }\n \n     pub use self::sources::*;\n-    mod sources {\n+    pub(crate) mod sources {\n         use super::Iterator;\n+        use crate::option::Option::{self, *};\n         pub struct Repeat<A> {\n             element: A,\n         }\n \n-        pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n+        pub fn repeat<T>(elt: T) -> Repeat<T> {\n             Repeat { element: elt }\n         }\n \n-        impl<A: Clone> Iterator for Repeat<A> {\n+        impl<A> Iterator for Repeat<A> {\n             type Item = A;\n \n             fn next(&mut self) -> Option<A> {\n-                Some(self.element.clone())\n+                None\n+            }\n+        }\n+    }\n+\n+    pub use self::adapters::*;\n+    pub(crate) mod adapters {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Take<I> { pub(crate) inner: I }\n+        impl<I> Iterator for Take<I> where I: Iterator {\n+            type Item = <I as Iterator>::Item;\n+            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+                None\n             }\n         }\n     }"}, {"sha": "279d025417c5632546c53fea6c08f1cbbe377819", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 81, "deletions": 36, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209e9b9926d27ac71bc054bfdd48888e5d7d6d1a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=209e9b9926d27ac71bc054bfdd48888e5d7d6d1a", "patch": "@@ -126,11 +126,12 @@ fn get_chaining_hints(\n                 }\n             }\n         }\n-        let label = ty.display_truncated(sema.db, config.max_length).to_string();\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::ChainingHint,\n-            label: label.into(),\n+            label: hint_iterator(sema, config, &ty).unwrap_or_else(|| {\n+                ty.display_truncated(sema.db, config.max_length).to_string().into()\n+            }),\n         });\n     }\n     Some(())\n@@ -193,17 +194,12 @@ fn get_bind_pat_hints(\n     if should_not_display_type_hint(sema, &pat, &ty) {\n         return None;\n     }\n-\n-    let db = sema.db;\n-    if let Some(hint) = hint_iterator(sema, config, &ty, pat.clone()) {\n-        acc.push(hint);\n-    } else {\n-        acc.push(InlayHint {\n-            range: pat.syntax().text_range(),\n-            kind: InlayKind::TypeHint,\n-            label: ty.display_truncated(db, config.max_length).to_string().into(),\n-        });\n-    }\n+    acc.push(InlayHint {\n+        range: pat.syntax().text_range(),\n+        kind: InlayKind::TypeHint,\n+        label: hint_iterator(sema, config, &ty)\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n+    });\n \n     Some(())\n }\n@@ -213,8 +209,7 @@ fn hint_iterator(\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n     ty: &Type,\n-    pat: ast::IdentPat,\n-) -> Option<InlayHint> {\n+) -> Option<SmolStr> {\n     let db = sema.db;\n     let strukt = ty.as_adt()?;\n     let krate = strukt.krate(db)?;\n@@ -244,11 +239,7 @@ fn hint_iterator(\n                     .max_length\n                     .map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len())),\n             );\n-            return Some(InlayHint {\n-                range: pat.syntax().text_range(),\n-                kind: InlayKind::TypeHint,\n-                label: format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END).into(),\n-            });\n+            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END).into());\n         }\n     }\n \n@@ -412,7 +403,8 @@ mod tests {\n     }\n \n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n-        let ra_fixture = format!(\"{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        let ra_fixture =\n+            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n@@ -422,7 +414,9 @@ mod tests {\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n-        let (analysis, file_id) = fixture::file(ra_fixture);\n+        let ra_fixture =\n+            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        let (analysis, file_id) = fixture::file(&ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n     }\n@@ -854,12 +848,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 147..172,\n+                        range: 148..173,\n                         kind: ChainingHint,\n                         label: \"B\",\n                     },\n                     InlayHint {\n-                        range: 147..154,\n+                        range: 148..155,\n                         kind: ChainingHint,\n                         label: \"A\",\n                     },\n@@ -920,12 +914,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 143..190,\n+                        range: 144..191,\n                         kind: ChainingHint,\n                         label: \"C\",\n                     },\n                     InlayHint {\n-                        range: 143..179,\n+                        range: 144..180,\n                         kind: ChainingHint,\n                         label: \"B\",\n                     },\n@@ -965,12 +959,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 246..283,\n+                        range: 247..284,\n                         kind: ChainingHint,\n                         label: \"B<X<i32, bool>>\",\n                     },\n                     InlayHint {\n-                        range: 246..265,\n+                        range: 247..266,\n                         kind: ChainingHint,\n                         label: \"A<X<i32, bool>>\",\n                     },\n@@ -991,7 +985,6 @@ fn main() {\n         );\n         check(\n             r#\"\n-//- /main.rs crate:main deps:core\n pub struct Vec<T> {}\n \n impl<T> Vec<T> {\n@@ -1031,7 +1024,6 @@ mod collections {\n     fn complete_for_hint() {\n         check(\n             r#\"\n-//- /main.rs crate:main deps:core\n pub struct Vec<T> {}\n \n impl<T> Vec<T> {\n@@ -1078,7 +1070,6 @@ mod collections {\n                 max_length: None,\n             },\n             r#\"\n-//- /main.rs crate:main\n pub struct Vec<T> {}\n \n impl<T> Vec<T> {\n@@ -1108,12 +1099,11 @@ fn main() {\n             InlayHintsConfig {\n                 parameter_hints: false,\n                 type_hints: true,\n-                chaining_hints: true,\n+                chaining_hints: false,\n                 max_length: None,\n             },\n             r#\"\n-//- /main.rs crate:main deps:std\n-use std::iter;\n+use core::iter;\n \n struct MyIter;\n \n@@ -1132,12 +1122,67 @@ fn main() {\n     fn generic<T: Clone>(t: T) {\n         let _x = iter::repeat(t);\n           //^^ impl Iterator<Item = T>\n+        let _chained = iter::repeat(t).take(10);\n+          //^^^^^^^^ impl Iterator<Item = T>\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn shorten_iterator_chaining_hints() {\n+        check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n+            r#\"\n+use core::iter;\n+\n+struct MyIter;\n+\n+impl Iterator for MyIter {\n+    type Item = ();\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n     }\n }\n \n-//- /std.rs crate:std deps:core\n-use core::*;\n+fn main() {\n+    let _x = MyIter.by_ref()\n+        .take(5)\n+        .by_ref()\n+        .take(5)\n+        .by_ref();\n+}\n \"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 175..242,\n+                        kind: ChainingHint,\n+                        label: \"impl Iterator<Item = ()>\",\n+                    },\n+                    InlayHint {\n+                        range: 175..225,\n+                        kind: ChainingHint,\n+                        label: \"&mut Take<&mut MyIter>\",\n+                    },\n+                    InlayHint {\n+                        range: 175..207,\n+                        kind: ChainingHint,\n+                        label: \"impl Iterator<Item = ()>\",\n+                    },\n+                    InlayHint {\n+                        range: 175..190,\n+                        kind: ChainingHint,\n+                        label: \"&mut MyIter\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n }"}]}