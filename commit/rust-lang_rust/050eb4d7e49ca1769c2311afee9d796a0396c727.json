{"sha": "050eb4d7e49ca1769c2311afee9d796a0396c727", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MGViNGQ3ZTQ5Y2ExNzY5YzIzMTFhZmVlOWQ3OTZhMDM5NmM3Mjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-16T20:36:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T20:36:49Z"}, "message": "Rollup merge of #77971 - jyn514:broken-intra-doc-links, r=mark-simulacrum\n\nDeny broken intra-doc links in linkchecker\n\nSince rustdoc isn't warning about these links, check for them manually.\n\nThis also fixes the broken links that popped up from the lint.", "tree": {"sha": "13eaa6c6c0c11c91dcc1cf366ef854d53d54ccae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13eaa6c6c0c11c91dcc1cf366ef854d53d54ccae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050eb4d7e49ca1769c2311afee9d796a0396c727", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfigRhCRBK7hj4Ov3rIwAAdHIIACcTOUOeQAaiGkZpi/hmU6c3\nEY8N0SYQo/eETtdW+r31wQKnMvTDkia+lcWlxwOhVXp00tsqPlr8hPfvBS1w54FX\no4kOCUO7rsV8eVvBHPr0YL4F5WoqdiVrW3EMtgRpCBDNCSFgqsmxnjhCHn3oEFU0\n5pLoa1b9HE9s5I3PzLSzKvMrTQtGVNtoWr9th0LLOOhh/tC1Vp9VlnJYWjUYGQ8/\n+IvKW5tFoACoY/VSCrfI2MFpFWyySpOmTOEMcfd1fwORO0It5WZmMN2HNQeZTSmf\ndMw6RZU5KLsb2ycyZpjPoQK61vd/GwFYIFePCVkZXC19R/nesXlDzS7TtXnYkrg=\n=pfBa\n-----END PGP SIGNATURE-----\n", "payload": "tree 13eaa6c6c0c11c91dcc1cf366ef854d53d54ccae\nparent 9600fda7ba8e0cad74fb915b16113304d9a15ffe\nparent b221819ff7b2d53b25714635dc72d68d732c491e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602880609 +0900\ncommitter GitHub <noreply@github.com> 1602880609 +0900\n\nRollup merge of #77971 - jyn514:broken-intra-doc-links, r=mark-simulacrum\n\nDeny broken intra-doc links in linkchecker\n\nSince rustdoc isn't warning about these links, check for them manually.\n\nThis also fixes the broken links that popped up from the lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050eb4d7e49ca1769c2311afee9d796a0396c727", "html_url": "https://github.com/rust-lang/rust/commit/050eb4d7e49ca1769c2311afee9d796a0396c727", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050eb4d7e49ca1769c2311afee9d796a0396c727/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9600fda7ba8e0cad74fb915b16113304d9a15ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9600fda7ba8e0cad74fb915b16113304d9a15ffe", "html_url": "https://github.com/rust-lang/rust/commit/9600fda7ba8e0cad74fb915b16113304d9a15ffe"}, {"sha": "b221819ff7b2d53b25714635dc72d68d732c491e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b221819ff7b2d53b25714635dc72d68d732c491e", "html_url": "https://github.com/rust-lang/rust/commit/b221819ff7b2d53b25714635dc72d68d732c491e"}], "stats": {"total": 112, "additions": 92, "deletions": 20}, "files": [{"sha": "0d2170a9927472103350cfb6db2d568e0a426da5", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -1744,6 +1744,10 @@ dependencies = [\n [[package]]\n name = \"linkchecker\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"once_cell\",\n+ \"regex\",\n+]\n \n [[package]]\n name = \"linked-hash-map\""}, {"sha": "26d35f2620cb26ca249182672c6d0442bfe280ab", "filename": "compiler/rustc_error_codes/src/error_codes/E0660.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -9,4 +9,4 @@ llvm_asm!(\"nop\" \"nop\");\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "0b8ba7fbbedac76d1caf2fa17347e1eae0c07800", "filename": "compiler/rustc_error_codes/src/error_codes/E0661.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -10,4 +10,4 @@ llvm_asm!(\"nop\" : \"r\"(a));\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "8c1bab8d0410da5e0fcaef32ac3161488879cd65", "filename": "compiler/rustc_error_codes/src/error_codes/E0662.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -13,4 +13,4 @@ llvm_asm!(\"xor %eax, %eax\"\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "53ffd3373a51c30cd43988ac59c2ae232523f637", "filename": "compiler/rustc_error_codes/src/error_codes/E0663.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -13,4 +13,4 @@ llvm_asm!(\"xor %eax, %eax\"\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "f8e72cd330a31d91b2fcfc6816d304a02f2b159c", "filename": "compiler/rustc_error_codes/src/error_codes/E0664.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -13,4 +13,4 @@ llvm_asm!(\"mov $$0x200, %eax\"\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "c61c19cc7d1d1a3c94f080f8d7038273c132dd45", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -89,13 +89,11 @@ impl fmt::Display for AllocError {\n pub unsafe trait AllocRef {\n     /// Attempts to allocate a block of memory.\n     ///\n-    /// On success, returns a [`NonNull<[u8]>`] meeting the size and alignment guarantees of `layout`.\n+    /// On success, returns a [`NonNull<[u8]>`][NonNull] meeting the size and alignment guarantees of `layout`.\n     ///\n     /// The returned block may have a larger size than specified by `layout.size()`, and may or may\n     /// not have its contents initialized.\n     ///\n-    /// [`NonNull<[u8]>`]: NonNull\n-    ///\n     /// # Errors\n     ///\n     /// Returning `Err` indicates that either memory is exhausted or `layout` does not meet\n@@ -146,7 +144,7 @@ pub unsafe trait AllocRef {\n \n     /// Attempts to extend the memory block.\n     ///\n-    /// Returns a new [`NonNull<[u8]>`] containing a pointer and the actual size of the allocated\n+    /// Returns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\n     /// memory. The pointer is suitable for holding data described by `new_layout`. To accomplish\n     /// this, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n     ///\n@@ -158,8 +156,6 @@ pub unsafe trait AllocRef {\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n     ///\n-    /// [`NonNull<[u8]>`]: NonNull\n-    ///\n     /// # Safety\n     ///\n     /// * `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n@@ -271,7 +267,7 @@ pub unsafe trait AllocRef {\n \n     /// Attempts to shrink the memory block.\n     ///\n-    /// Returns a new [`NonNull<[u8]>`] containing a pointer and the actual size of the allocated\n+    /// Returns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\n     /// memory. The pointer is suitable for holding data described by `new_layout`. To accomplish\n     /// this, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n     ///\n@@ -283,8 +279,6 @@ pub unsafe trait AllocRef {\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n     ///\n-    /// [`NonNull<[u8]>`]: NonNull\n-    ///\n     /// # Safety\n     ///\n     /// * `ptr` must denote a block of memory [*currently allocated*] via this allocator."}, {"sha": "3f7110b34cc67de60eb1bdc0b9ab3cbf00b89e3b", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -134,6 +134,7 @@ pub const fn identity<T>(x: T) -> T {\n /// want to accept all references that can be converted to [`&str`] as an argument.\n /// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n+/// [`&str`]: primitive@str\n /// [`Option<T>`]: Option\n /// [`Result<T, E>`]: Result\n /// [`Borrow`]: crate::borrow::Borrow"}, {"sha": "2253648ac2e0476affceca958de07ab5dbe7cd86", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -122,6 +122,9 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(iter.advance_back_by(0), Ok(()));\n     /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n     /// ```\n+    ///\n+    /// [`Ok(())`]: Ok\n+    /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {"}, {"sha": "4af61111128e9ae635d5d9b4359afa070ffa56e3", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -289,12 +289,12 @@ pub trait Iterator {\n     /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n     /// times until [`None`] is encountered.\n     ///\n-    /// `advance_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n-    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number\n+    /// `advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n+    /// `n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\n     /// of elements the iterator is advanced by before running out of elements (i.e. the\n     /// length of the iterator). Note that `k` is always less than `n`.\n     ///\n-    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`][Ok].\n     ///\n     /// [`next`]: Iterator::next\n     ///"}, {"sha": "825144e5a6fbed4054a52d3d14b2a4cc647e8f97", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -687,6 +687,7 @@ impl<T> Option<T> {\n     /// assert_eq!(Some(4).filter(is_even), Some(4));\n     /// ```\n     ///\n+    /// [`Some(t)`]: Some\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {"}, {"sha": "6df4eb992594fc145595ed074aa7ff8f9f389e7a", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -1383,7 +1383,8 @@ impl CStr {\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD] and return a\n     /// [`Cow`]`::`[`Owned`]`(`[`String`]`)` with the result.\n     ///\n-    /// [`str`]: prim@str\n+    /// [`str`]: primitive@str\n+    /// [`&str`]: primitive@str\n     /// [`Borrowed`]: Cow::Borrowed\n     /// [`Owned`]: Cow::Owned\n     /// [U+FFFD]: crate::char::REPLACEMENT_CHARACTER"}, {"sha": "ca8169e69b479f615855d0eece7e318138fcfc00", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -1 +1 @@\n-Subproject commit 79ab7776929c66db83203397958fa7037d5d9a30\n+Subproject commit ca8169e69b479f615855d0eece7e318138fcfc00"}, {"sha": "d40a27dddf362537a684669241b17ff0656afd84", "filename": "src/doc/unstable-book/src/library-features/default-free-fn.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -10,6 +10,8 @@ Adds a free `default()` function to the `std::default` module.  This function\n just forwards to [`Default::default()`], but may remove repetition of the word\n \"default\" from the call site.\n \n+[`Default::default()`]: https://doc.rust-lang.org/nightly/std/default/trait.Default.html#tymethod.default\n+\n Here is an example:\n \n ```rust"}, {"sha": "79b397d72c557eb6444a2ba0dc00a211a226a35a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -1 +1 @@\n-Subproject commit 12db56cdedbc2c26a9aa18f994c0188cdcc67df5\n+Subproject commit 79b397d72c557eb6444a2ba0dc00a211a226a35a"}, {"sha": "e5d870c039dc11c9bcea644bf159e8c075b39568", "filename": "src/tools/linkchecker/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/src%2Ftools%2Flinkchecker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/src%2Ftools%2Flinkchecker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.toml?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -7,3 +7,7 @@ edition = \"2018\"\n [[bin]]\n name = \"linkchecker\"\n path = \"main.rs\"\n+\n+[dependencies]\n+regex = \"1\"\n+once_cell = \"1\""}, {"sha": "f213944e0ab673656f703e514e0a80ac991131f0", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/050eb4d7e49ca1769c2311afee9d796a0396c727/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050eb4d7e49ca1769c2311afee9d796a0396c727/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=050eb4d7e49ca1769c2311afee9d796a0396c727", "patch": "@@ -21,6 +21,9 @@ use std::fs;\n use std::path::{Component, Path, PathBuf};\n use std::rc::Rc;\n \n+use once_cell::sync::Lazy;\n+use regex::Regex;\n+\n use crate::Redirect::*;\n \n // Add linkcheck exceptions here\n@@ -50,6 +53,44 @@ const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n     (\"alloc/collections/btree_set/struct.BTreeSet.html\", &[\"#insert-and-complex-keys\"]),\n ];\n \n+#[rustfmt::skip]\n+const INTRA_DOC_LINK_EXCEPTIONS: &[(&str, &[&str])] = &[\n+    // This will never have links that are not in other pages.\n+    // To avoid repeating the exceptions twice, an empty list means all broken links are allowed.\n+    (\"reference/print.html\", &[]),\n+    // All the reference 'links' are actually ENBF highlighted as code\n+    (\"reference/comments.html\", &[\n+         \"/</code> <code>!\",\n+         \"*</code> <code>!\",\n+    ]),\n+    (\"reference/identifiers.html\", &[\n+         \"a</code>-<code>z</code> <code>A</code>-<code>Z\",\n+         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n+         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code>]\u00a0[<code>a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n+    ]),\n+    (\"reference/tokens.html\", &[\n+         \"0</code>-<code>1\",\n+         \"0</code>-<code>7\",\n+         \"0</code>-<code>9\",\n+         \"0</code>-<code>9\",\n+         \"0</code>-<code>9</code> <code>a</code>-<code>f</code> <code>A</code>-<code>F\",\n+    ]),\n+    (\"reference/notation.html\", &[\n+         \"b</code> <code>B\",\n+         \"a</code>-<code>z\",\n+    ]),\n+    // This is being used in the sense of 'inclusive range', not a markdown link\n+    (\"core/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n+    (\"std/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n+    (\"core/slice/trait.SliceIndex.html\", &[\"begin</code>, <code>end\"]),\n+    (\"alloc/slice/trait.SliceIndex.html\", &[\"begin</code>, <code>end\"]),\n+    (\"std/slice/trait.SliceIndex.html\", &[\"begin</code>, <code>end\"]),\n+\n+];\n+\n+static BROKEN_INTRA_DOC_LINK: Lazy<Regex> =\n+    Lazy::new(|| Regex::new(r#\"\\[<code>(.*)</code>\\]\"#).unwrap());\n+\n macro_rules! t {\n     ($e:expr) => {\n         match $e {\n@@ -138,6 +179,14 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n     }\n }\n \n+fn is_intra_doc_exception(file: &Path, link: &str) -> bool {\n+    if let Some(entry) = INTRA_DOC_LINK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n+        entry.1.is_empty() || entry.1.contains(&link)\n+    } else {\n+        false\n+    }\n+}\n+\n fn is_exception(file: &Path, link: &str) -> bool {\n     if let Some(entry) = LINKCHECK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n         entry.1.contains(&link)\n@@ -292,6 +341,19 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n             }\n         }\n     });\n+\n+    // Search for intra-doc links that rustdoc didn't warn about\n+    // FIXME(#77199, 77200) Rustdoc should just warn about these directly.\n+    // NOTE: only looks at one line at a time; in practice this should find most links\n+    for (i, line) in contents.lines().enumerate() {\n+        for broken_link in BROKEN_INTRA_DOC_LINK.captures_iter(line) {\n+            if !is_intra_doc_exception(file, &broken_link[1]) {\n+                *errors = true;\n+                print!(\"{}:{}: broken intra-doc link - \", pretty_file.display(), i + 1);\n+                println!(\"{}\", &broken_link[0]);\n+            }\n+        }\n+    }\n     Some(pretty_file)\n }\n "}]}