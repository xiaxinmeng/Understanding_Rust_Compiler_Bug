{"sha": "ee8942138a9ff0dedbe8575f0aacaea2ec78a51f", "node_id": "C_kwDOAAsO6NoAKGVlODk0MjEzOGE5ZmYwZGVkYmU4NTc1ZjBhYWNhZWEyZWM3OGE1MWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-26T22:33:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-26T22:33:49Z"}, "message": "Split out make_ambiguous_response_no_constraints", "tree": {"sha": "69ff306715b5d8d204a1084dcbd33bf0a04887f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ff306715b5d8d204a1084dcbd33bf0a04887f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f", "html_url": "https://github.com/rust-lang/rust/commit/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa82092aed07351757fddeaf3cff062b96067d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa82092aed07351757fddeaf3cff062b96067d1", "html_url": "https://github.com/rust-lang/rust/commit/5fa82092aed07351757fddeaf3cff062b96067d1"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "67ad7fb4bd21debff85d1035cd160da03a26fd8b", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=ee8942138a9ff0dedbe8575f0aacaea2ec78a51f", "patch": "@@ -70,25 +70,14 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 // into itself infinitely and any partial substitutions in the query\n                 // response are probably not useful anyways, so just return an empty\n                 // query response.\n-                Response {\n-                    var_values: CanonicalVarValues {\n-                        var_values: self.tcx().mk_substs_from_iter(\n-                            self.var_values.var_values.iter().map(|arg| -> ty::GenericArg<'tcx> {\n-                                match arg.unpack() {\n-                                    GenericArgKind::Lifetime(_) => self.next_region_infer().into(),\n-                                    GenericArgKind::Type(_) => self.next_ty_infer().into(),\n-                                    GenericArgKind::Const(ct) => {\n-                                        self.next_const_infer(ct.ty()).into()\n-                                    }\n-                                }\n-                            }),\n-                        ),\n-                    },\n-                    external_constraints: self\n-                        .tcx()\n-                        .mk_external_constraints(ExternalConstraintsData::default()),\n-                    certainty,\n-                }\n+                //\n+                // This may prevent us from potentially useful inference, e.g.\n+                // 2 candidates, one ambiguous and one overflow, which both\n+                // have the same inference constraints.\n+                //\n+                // Changing this to retain some constraints in the future\n+                // won't be a breaking change, so this is good enough for now.\n+                return Ok(self.make_ambiguous_response_no_constraints(MaybeCause::Overflow));\n             }\n         };\n \n@@ -101,6 +90,40 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         Ok(canonical)\n     }\n \n+    /// Constructs a totally unconstrained, ambiguous response to a goal.\n+    ///\n+    /// Take care when using this, since often it's useful to respond with\n+    /// ambiguity but return constrained variables to guide inference.\n+    pub(in crate::solve) fn make_ambiguous_response_no_constraints(\n+        &self,\n+        maybe_cause: MaybeCause,\n+    ) -> CanonicalResponse<'tcx> {\n+        let unconstrained_response = Response {\n+            var_values: CanonicalVarValues {\n+                var_values: self.tcx().mk_substs_from_iter(self.var_values.var_values.iter().map(\n+                    |arg| -> ty::GenericArg<'tcx> {\n+                        match arg.unpack() {\n+                            GenericArgKind::Lifetime(_) => self.next_region_infer().into(),\n+                            GenericArgKind::Type(_) => self.next_ty_infer().into(),\n+                            GenericArgKind::Const(ct) => self.next_const_infer(ct.ty()).into(),\n+                        }\n+                    },\n+                )),\n+            },\n+            external_constraints: self\n+                .tcx()\n+                .mk_external_constraints(ExternalConstraintsData::default()),\n+            certainty: Certainty::Maybe(maybe_cause),\n+        };\n+\n+        Canonicalizer::canonicalize(\n+            self.infcx,\n+            CanonicalizeMode::Response { max_input_universe: self.max_input_universe },\n+            &mut Default::default(),\n+            unconstrained_response,\n+        )\n+    }\n+\n     #[instrument(level = \"debug\", skip(self), ret)]\n     fn compute_external_query_constraints(&self) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n         // Cannot use `take_registered_region_obligations` as we may compute the response"}, {"sha": "d94679fef283399422c27223ca77d34afef77262", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8942138a9ff0dedbe8575f0aacaea2ec78a51f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=ee8942138a9ff0dedbe8575f0aacaea2ec78a51f", "patch": "@@ -340,17 +340,17 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         if responses.is_empty() {\n             return Err(NoSolution);\n         }\n-        let certainty = responses.iter().fold(Certainty::AMBIGUOUS, |certainty, response| {\n-            certainty.unify_with(response.value.certainty)\n-        });\n-\n-        let response = self.evaluate_added_goals_and_make_canonical_response(certainty);\n-        if let Ok(response) = response {\n-            assert!(response.has_no_inference_or_external_constraints());\n-            Ok(response)\n-        } else {\n-            bug!(\"failed to make floundered response: {responses:?}\");\n-        }\n+\n+        let Certainty::Maybe(maybe_cause) = responses.iter().fold(\n+            Certainty::AMBIGUOUS,\n+            |certainty, response| {\n+                certainty.unify_with(response.value.certainty)\n+            },\n+        ) else {\n+            bug!(\"expected flounder response to be ambiguous\")\n+        };\n+\n+        Ok(self.make_ambiguous_response_no_constraints(maybe_cause))\n     }\n }\n "}]}