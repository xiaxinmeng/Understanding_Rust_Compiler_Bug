{"sha": "0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12", "node_id": "C_kwDOAAsO6NoAKDBkYmJmMGY0OTM5OGQ2Yzc0ZmQzMzM3ZGQxNzFmYWM2YzdhYTNkMTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-04T21:55:38Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T01:54:59Z"}, "message": "Remove TypeParamVisitor", "tree": {"sha": "9ab462765d123f34f94254f8e8da34fc6892ea7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab462765d123f34f94254f8e8da34fc6892ea7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12", "html_url": "https://github.com/rust-lang/rust/commit/0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0746e886383af7eb9d3ed68f53ff1c19914ec39", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0746e886383af7eb9d3ed68f53ff1c19914ec39", "html_url": "https://github.com/rust-lang/rust/commit/d0746e886383af7eb9d3ed68f53ff1c19914ec39"}], "stats": {"total": 36, "additions": 7, "deletions": 29}, "files": [{"sha": "a7e080c13c7d581129ed5322ae89b89f90e91d04", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=0dbbf0f49398d6c74fd3337dd171fac6c7aa3d12", "patch": "@@ -12,9 +12,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{\n-    self, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n-};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -23,8 +21,6 @@ use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt as\n use rustc_trait_selection::traits::{FulfillmentError, TraitEngine, TraitEngineExt};\n use rustc_type_ir::sty::TyKind::*;\n \n-use std::ops::ControlFlow;\n-\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Checks a `a <op>= b`\n     pub fn check_binop_assign(\n@@ -462,9 +458,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if let Some(missing_trait) = missing_trait {\n-                    let mut visitor = TypeParamVisitor(vec![]);\n-                    visitor.visit_ty(lhs_ty);\n-\n                     if op.node == hir::BinOpKind::Add\n                         && self.check_str_addition(\n                             lhs_expr, rhs_expr, lhs_ty, rhs_ty, &mut err, is_assign, op,\n@@ -473,7 +466,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // This has nothing here because it means we did string\n                         // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                         // we don't want the note in the else clause to be emitted\n-                    } else if let [ty] = &visitor.0[..] {\n+                    } else if lhs_ty.has_param_types_or_consts() {\n                         // Look for a TraitPredicate in the Fulfillment errors,\n                         // and use it to generate a suggestion.\n                         //\n@@ -513,7 +506,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     );\n                                 }\n                             }\n-                        } else if *ty != lhs_ty {\n+                        } else {\n                             // When we know that a missing bound is responsible, we don't show\n                             // this note as it is redundant.\n                             err.note(&format!(\n@@ -650,14 +643,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n \n-                    let mut visitor = TypeParamVisitor(vec![]);\n-                    visitor.visit_ty(operand_ty);\n-                    if let [_] = &visitor.0[..] && let ty::Param(_) = *operand_ty.kind() {\n-                        let predicates = errors\n-                            .iter()\n-                            .filter_map(|error| {\n-                                error.obligation.predicate.to_opt_poly_trait_pred()\n-                            });\n+                    if operand_ty.has_param_types_or_consts() {\n+                        let predicates = errors.iter().filter_map(|error| {\n+                            error.obligation.predicate.to_opt_poly_trait_pred()\n+                        });\n                         for pred in predicates {\n                             self.suggest_restricting_param_bound(\n                                 &mut err,\n@@ -972,17 +961,6 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n     }\n }\n \n-struct TypeParamVisitor<'tcx>(Vec<Ty<'tcx>>);\n-\n-impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if let ty::Param(_) = ty.kind() {\n-            self.0.push(ty);\n-        }\n-        ty.super_visit_with(self)\n-    }\n-}\n-\n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {"}]}