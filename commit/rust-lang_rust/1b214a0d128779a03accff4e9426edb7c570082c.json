{"sha": "1b214a0d128779a03accff4e9426edb7c570082c", "node_id": "C_kwDOAAsO6NoAKDFiMjE0YTBkMTI4Nzc5YTAzYWNjZmY0ZTk0MjZlZGI3YzU3MDA4MmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-21T05:12:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-21T16:32:58Z"}, "message": "do not protect SRW items", "tree": {"sha": "fff26dde00ef72ad67486d40135f0563cc2c6a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff26dde00ef72ad67486d40135f0563cc2c6a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b214a0d128779a03accff4e9426edb7c570082c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b214a0d128779a03accff4e9426edb7c570082c", "html_url": "https://github.com/rust-lang/rust/commit/1b214a0d128779a03accff4e9426edb7c570082c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b214a0d128779a03accff4e9426edb7c570082c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "html_url": "https://github.com/rust-lang/rust/commit/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b"}], "stats": {"total": 62, "additions": 7, "deletions": 55}, "files": [{"sha": "0c537e0d7a5c66b0ff7515246c8f0d783e776eaf", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b214a0d128779a03accff4e9426edb7c570082c/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b214a0d128779a03accff4e9426edb7c570082c/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1b214a0d128779a03accff4e9426edb7c570082c", "patch": "@@ -821,6 +821,13 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     } else {\n                         Permission::SharedReadWrite\n                     };\n+                    let protector = if frozen {\n+                        protector\n+                    } else {\n+                        // We do not protect inside UnsafeCell.\n+                        // This fixes https://github.com/rust-lang/rust/issues/55005.\n+                        None\n+                    };\n                     let item = Item { perm, tag: new_tag, protector };\n                     let mut global = this.machine.stacked_borrows.as_ref().unwrap().borrow_mut();\n                     stacked_borrows.for_each(range, |offset, stack, history| {"}, {"sha": "9c0c59d364f28fe1bd6b073a82fee8d1a51586d7", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs?ref=b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "patch": "@@ -1,17 +0,0 @@\n-// error-pattern: deallocating while item is protected\n-\n-use std::cell::Cell;\n-\n-// Check that even `&Cell` are dereferenceable.\n-// Also see <https://github.com/rust-lang/rust/issues/55005>.\n-fn inner(x: &Cell<i32>, f: fn(&Cell<i32>)) {\n-    // `f` may mutate, but it may not deallocate!\n-    f(x)\n-}\n-\n-fn main() {\n-    inner(Box::leak(Box::new(Cell::new(0))), |x| {\n-        let raw = x as *const _ as *mut Cell<i32>;\n-        drop(unsafe { Box::from_raw(raw) });\n-    });\n-}"}, {"sha": "088daec040fec0dad6bfd45be7fa9ca517c86fd1", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr?ref=b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "patch": "@@ -1,38 +0,0 @@\n-error: Undefined Behavior: deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n-  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   |\n-LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n-   |\n-   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n-   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<std::cell::Cell<i32>, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<std::cell::Cell<i32>>> - shim(Some(std::boxed::Box<std::cell::Cell<i32>>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<std::cell::Cell<i32>>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_barrier2.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n-   |\n-LL |         drop(unsafe { Box::from_raw(raw) });\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_barrier2.rs:LL:CC] as std::ops::FnOnce<(&std::cell::Cell<i32>,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_barrier2.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n-   |\n-LL |     f(x)\n-   |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_barrier2.rs:LL:CC\n-  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n-   |\n-LL | /     inner(Box::leak(Box::new(Cell::new(0))), |x| {\n-LL | |         let raw = x as *const _ as *mut Cell<i32>;\n-LL | |         drop(unsafe { Box::from_raw(raw) });\n-LL | |     });\n-   | |______^\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}]}