{"sha": "eba44e1c67cd08148c7e67ce6255889b7c581b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTQ0ZTFjNjdjZDA4MTQ4YzdlNjdjZTYyNTU4ODliN2M1ODFiOTg=", "commit": {"author": {"name": "Shotaro Yamada", "email": "yamada@ccs.ee.tut.ac.jp", "date": "2018-12-12T08:46:52Z"}, "committer": {"name": "Shotaro Yamada", "email": "yamada@ccs.ee.tut.ac.jp", "date": "2018-12-12T09:13:21Z"}, "message": "question_mark: Suggest Some(opt?) for if-else", "tree": {"sha": "02140aec6e4f799e4bcd3621b754e83a4b2734de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02140aec6e4f799e4bcd3621b754e83a4b2734de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba44e1c67cd08148c7e67ce6255889b7c581b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba44e1c67cd08148c7e67ce6255889b7c581b98", "html_url": "https://github.com/rust-lang/rust/commit/eba44e1c67cd08148c7e67ce6255889b7c581b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba44e1c67cd08148c7e67ce6255889b7c581b98/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb54c1a9a0e89017bf71a7a78990ff8ab155a4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb54c1a9a0e89017bf71a7a78990ff8ab155a4f7", "html_url": "https://github.com/rust-lang/rust/commit/eb54c1a9a0e89017bf71a7a78990ff8ab155a4f7"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "057b4850e4f4ad0d7c082348c0480d5da5cd51a5", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eba44e1c67cd08148c7e67ce6255889b7c581b98/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba44e1c67cd08148c7e67ce6255889b7c581b98/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=eba44e1c67cd08148c7e67ce6255889b7c581b98", "patch": "@@ -17,7 +17,7 @@ use if_chain::if_chain;\n \n use crate::rustc_errors::Applicability;\n use crate::utils::paths::*;\n-use crate::utils::{match_def_path, match_type, span_lint_and_then};\n+use crate::utils::{match_def_path, match_type, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for expressions that could be replaced by the question mark operator\n ///\n@@ -64,14 +64,40 @@ impl Pass {\n     /// If it matches, it will suggest to use the question mark operator instead\n     fn check_is_none_and_early_return_none(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::If(ref if_expr, ref body, _) = expr.node;\n-            if let ExprKind::MethodCall(ref segment, _, ref args) = if_expr.node;\n+            if let ExprKind::If(if_expr, body, else_) = &expr.node;\n+            if let ExprKind::MethodCall(segment, _, args) = &if_expr.node;\n             if segment.ident.name == \"is_none\";\n             if Self::expression_returns_none(cx, body);\n             if let Some(subject) = args.get(0);\n             if Self::is_option(cx, subject);\n \n             then {\n+                if let Some(else_) = else_ {\n+                    if_chain! {\n+                        if let ExprKind::Block(block, None) = &else_.node;\n+                        if block.stmts.len() == 0;\n+                        if let Some(block_expr) = &block.expr;\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(subject, block_expr);\n+                        then {\n+                            span_lint_and_then(\n+                                cx,\n+                                QUESTION_MARK,\n+                                expr.span,\n+                                \"this block may be rewritten with the `?` operator\",\n+                                |db| {\n+                                    db.span_suggestion_with_applicability(\n+                                        expr.span,\n+                                        \"replace_it_with\",\n+                                        format!(\"Some({}?)\", Sugg::hir(cx, subject, \"..\")),\n+                                        Applicability::MaybeIncorrect, // snippet\n+                                    );\n+                                }\n+                            )\n+                        }\n+                    }\n+                    return;\n+                }\n+\n                 span_lint_and_then(\n                     cx,\n                     QUESTION_MARK,"}, {"sha": "b1edec32eeeb0740c18485661304f6bcad90c036", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba44e1c67cd08148c7e67ce6255889b7c581b98/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba44e1c67cd08148c7e67ce6255889b7c581b98/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=eba44e1c67cd08148c7e67ce6255889b7c581b98", "patch": "@@ -42,11 +42,22 @@ pub struct SomeStruct {\n }\n \n impl SomeStruct {\n+    #[rustfmt::skip]\n     pub fn func(&self) -> Option<u32> {\n         if (self.opt).is_none() {\n             return None;\n         }\n \n+        if self.opt.is_none() {\n+            return None\n+        }\n+\n+        let _ = if self.opt.is_none() {\n+            return None;\n+        } else {\n+            self.opt\n+        };\n+\n         self.opt\n     }\n }"}, {"sha": "c9d5538f36f458b736ab755cf13629dcb267f4a7", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/eba44e1c67cd08148c7e67ce6255889b7c581b98/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba44e1c67cd08148c7e67ce6255889b7c581b98/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=eba44e1c67cd08148c7e67ce6255889b7c581b98", "patch": "@@ -9,12 +9,31 @@ error: this block may be rewritten with the `?` operator\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:46:9\n+  --> $DIR/question_mark.rs:47:9\n    |\n-46 | /         if (self.opt).is_none() {\n-47 | |             return None;\n-48 | |         }\n+47 | /         if (self.opt).is_none() {\n+48 | |             return None;\n+49 | |         }\n    | |_________^ help: replace_it_with: `(self.opt)?;`\n \n-error: aborting due to 2 previous errors\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:51:9\n+   |\n+51 | /         if self.opt.is_none() {\n+52 | |             return None\n+53 | |         }\n+   | |_________^ help: replace_it_with: `self.opt?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:55:17\n+   |\n+55 |           let _ = if self.opt.is_none() {\n+   |  _________________^\n+56 | |             return None;\n+57 | |         } else {\n+58 | |             self.opt\n+59 | |         };\n+   | |_________^ help: replace_it_with: `Some(self.opt?)`\n+\n+error: aborting due to 4 previous errors\n "}]}