{"sha": "065e9593b4f63889fad8b8cf29a52a4791fddc3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NWU5NTkzYjRmNjM4ODlmYWQ4YjhjZjI5YTUyYTQ3OTFmZGRjM2Y=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-27T08:13:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-27T08:13:21Z"}, "message": "Rustup to `rustc 1.17.0-nightly (7846dbe0c 2017-03-26)`", "tree": {"sha": "948dcb124640744ffeed5c3cf2277d0be305ee63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/948dcb124640744ffeed5c3cf2277d0be305ee63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065e9593b4f63889fad8b8cf29a52a4791fddc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065e9593b4f63889fad8b8cf29a52a4791fddc3f", "html_url": "https://github.com/rust-lang/rust/commit/065e9593b4f63889fad8b8cf29a52a4791fddc3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065e9593b4f63889fad8b8cf29a52a4791fddc3f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6706d8fdec0cc24a9d866eba8d2b1bc60ccf4286", "url": "https://api.github.com/repos/rust-lang/rust/commits/6706d8fdec0cc24a9d866eba8d2b1bc60ccf4286", "html_url": "https://github.com/rust-lang/rust/commit/6706d8fdec0cc24a9d866eba8d2b1bc60ccf4286"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "bbee49bae84c85a358893b67d2fe19a7a44967a1", "filename": "src/eval_context.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/065e9593b4f63889fad8b8cf29a52a4791fddc3f/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065e9593b4f63889fad8b8cf29a52a4791fddc3f/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=065e9593b4f63889fad8b8cf29a52a4791fddc3f", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::from_u128(s.len() as u128)))\n     }\n \n-    pub(super) fn const_to_value(&mut self, const_val: &ConstVal) -> EvalResult<'tcx, Value> {\n+    pub(super) fn const_to_value(&mut self, const_val: &ConstVal<'tcx>) -> EvalResult<'tcx, Value> {\n         use rustc::middle::const_val::ConstVal::*;\n         use rustc_const_math::ConstFloat;\n \n@@ -364,7 +364,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Struct(_)    => unimplemented!(),\n             Tuple(_)     => unimplemented!(),\n-            Function(_, _)  => unimplemented!(),\n+            // function items are zero sized and thus have no readable value\n+            Function(..)  => PrimVal::Undef,\n             Array(_)     => unimplemented!(),\n             Repeat(_, _) => unimplemented!(),\n         };\n@@ -995,20 +996,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match *op {\n             Consume(ref lvalue) => self.eval_and_read_lvalue(lvalue),\n \n-            Constant(mir::Constant { ref literal, ty, .. }) => {\n+            Constant(mir::Constant { ref literal, .. }) => {\n                 use rustc::mir::Literal;\n                 let value = match *literal {\n                     Literal::Value { ref value } => self.const_to_value(value)?,\n \n                     Literal::Item { def_id, substs } => {\n-                        if let ty::TyFnDef(..) = ty.sty {\n-                            // function items are zero sized\n-                            Value::ByRef(self.memory.allocate(0, 0)?)\n-                        } else {\n-                            let instance = self.resolve_associated_const(def_id, substs);\n-                            let cid = GlobalId { instance, promoted: None };\n-                            self.globals.get(&cid).expect(\"static/const not cached\").value\n-                        }\n+                        let instance = self.resolve_associated_const(def_id, substs);\n+                        let cid = GlobalId { instance, promoted: None };\n+                        self.globals.get(&cid).expect(\"static/const not cached\").value\n                     }\n \n                     Literal::Promoted { index } => {"}, {"sha": "79e940bee533ba0be7f83f1e919ce921574d40c8", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/065e9593b4f63889fad8b8cf29a52a4791fddc3f/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065e9593b4f63889fad8b8cf29a52a4791fddc3f/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=065e9593b4f63889fad8b8cf29a52a4791fddc3f", "patch": "@@ -195,13 +195,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n             // already computed by rustc\n             mir::Literal::Value { .. } => {}\n             mir::Literal::Item { def_id, substs } => {\n-                if let ty::TyFnDef(..) = constant.ty.sty {\n-                    // No need to do anything here,\n-                    // because the type is the actual function, not the signature of the function.\n-                    // Thus we can simply create a zero sized allocation in `evaluate_operand`\n-                } else {\n-                    self.global_item(def_id, substs, constant.span, true);\n-                }\n+                self.global_item(def_id, substs, constant.span, true);\n             },\n             mir::Literal::Promoted { index } => {\n                 let cid = GlobalId {"}]}