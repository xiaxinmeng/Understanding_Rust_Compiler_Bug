{"sha": "5253294d222fe725fbbae1052d110f7eaa4ae10e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNTMyOTRkMjIyZmU3MjVmYmJhZTEwNTJkMTEwZjdlYWE0YWUxMGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-05T10:24:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-05T10:24:37Z"}, "message": "Auto merge of #30702 - tshepang:derives-not-needed, r=steveklabnik\n\nAlso sneak in a missing trailing comma", "tree": {"sha": "8bc629ceac25554e1e6012bce936ff2fbf2cf97d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc629ceac25554e1e6012bce936ff2fbf2cf97d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5253294d222fe725fbbae1052d110f7eaa4ae10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5253294d222fe725fbbae1052d110f7eaa4ae10e", "html_url": "https://github.com/rust-lang/rust/commit/5253294d222fe725fbbae1052d110f7eaa4ae10e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5253294d222fe725fbbae1052d110f7eaa4ae10e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6c6c8e01b489cac888a679d9cd567138987000", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6c6c8e01b489cac888a679d9cd567138987000", "html_url": "https://github.com/rust-lang/rust/commit/3a6c6c8e01b489cac888a679d9cd567138987000"}, {"sha": "ae96ce33e7927b4a8c927388f5134c88f5a7480c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae96ce33e7927b4a8c927388f5134c88f5a7480c", "html_url": "https://github.com/rust-lang/rust/commit/ae96ce33e7927b4a8c927388f5134c88f5a7480c"}], "stats": {"total": 24, "additions": 1, "deletions": 23}, "files": [{"sha": "6144f97b1308094ab349b378f29e550286c187d1", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5253294d222fe725fbbae1052d110f7eaa4ae10e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253294d222fe725fbbae1052d110f7eaa4ae10e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=5253294d222fe725fbbae1052d110f7eaa4ae10e", "patch": "@@ -38,7 +38,7 @@\n //! #[derive(Debug)]\n //! struct Point {\n //!     x: i32,\n-//!     y: i32\n+//!     y: i32,\n //! }\n //!\n //! impl Add for Point {\n@@ -161,7 +161,6 @@ macro_rules! forward_ref_binop {\n /// ```\n /// use std::ops::Add;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Add for Foo {\n@@ -215,7 +214,6 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Sub;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Sub for Foo {\n@@ -269,7 +267,6 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Mul;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Mul for Foo {\n@@ -323,7 +320,6 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Div;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Div for Foo {\n@@ -395,7 +391,6 @@ div_impl_float! { f32 f64 }\n /// ```\n /// use std::ops::Rem;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Rem for Foo {\n@@ -467,7 +462,6 @@ rem_impl_float! { f32 f64 }\n /// ```\n /// use std::ops::Neg;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Neg for Foo {\n@@ -535,7 +529,6 @@ neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Not;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Not for Foo {\n@@ -589,7 +582,6 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitAnd;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitAnd for Foo {\n@@ -643,7 +635,6 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitOr;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitOr for Foo {\n@@ -697,7 +688,6 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitXor;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitXor for Foo {\n@@ -751,7 +741,6 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::Shl;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Shl<Foo> for Foo {\n@@ -823,7 +812,6 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// ```\n /// use std::ops::Shr;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Shr<Foo> for Foo {\n@@ -898,7 +886,6 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///\n /// use std::ops::AddAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl AddAssign for Foo {\n@@ -945,7 +932,6 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::SubAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl SubAssign for Foo {\n@@ -992,7 +978,6 @@ sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::MulAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl MulAssign for Foo {\n@@ -1039,7 +1024,6 @@ mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::DivAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl DivAssign for Foo {\n@@ -1086,7 +1070,6 @@ div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::RemAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl RemAssign for Foo {\n@@ -1133,7 +1116,6 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::BitAndAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitAndAssign for Foo {\n@@ -1180,7 +1162,6 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// use std::ops::BitOrAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitOrAssign for Foo {\n@@ -1227,7 +1208,6 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// use std::ops::BitXorAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitXorAssign for Foo {\n@@ -1274,7 +1254,6 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// use std::ops::ShlAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl ShlAssign<Foo> for Foo {\n@@ -1339,7 +1318,6 @@ shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///\n /// use std::ops::ShrAssign;\n ///\n-/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl ShrAssign<Foo> for Foo {"}]}