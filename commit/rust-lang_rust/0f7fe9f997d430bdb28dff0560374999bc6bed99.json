{"sha": "0f7fe9f997d430bdb28dff0560374999bc6bed99", "node_id": "C_kwDOAAsO6NoAKDBmN2ZlOWY5OTdkNDMwYmRiMjhkZmYwNTYwMzc0OTk5YmM2YmVkOTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-07T19:10:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-07T19:10:27Z"}, "message": "Rollup merge of #100244 - Lokathor:add-armv4t-none-eabi-take2, r=jackh726\n\nAdd armv4t-none-eabi take2\n\nThis is the same as the previous PR (https://github.com/rust-lang/rust/pull/99226) but i just made a fresh branch without a merge commit in it.\n\n---\n\n### armv4t-none-eabi target quiz\n\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target.\n\nThat's me!\n\n> Targets must use naming consistent with any existing targets\n\nWe're using the existing name as recognized by LLVM and GCC\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nNo legal issues here.\n\n>> The target must not introduce license incompatibilities.\n\nNo license requirements here.\n\n>> Anything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\n\ncheck\n\n>> The target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy.\n\nno new deps, we're just adding a rustc target description file for a target llvm already knows about.\n\n>> Compiling, linking, and emitting functional binaries, libraries, or other code for the target (whether hosted on the target itself or cross-compiling from another target) must not depend on proprietary (non-FOSS) libraries.\n\nbare-metal target, doesn't rely on any libs at all.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate\n\n`core` only here. You could build `alloc` too, but you'd have to bring your own global allocator.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible.\n\nLLVM knows how to do it, you just need the GNU Binutils linker because LLVM's linker doesn't work that far back. That's in the docs as part of this PR.\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target.\n\nNo burdens, LLVM already knows how to do this. Further, because this is a cpu-feature variant of an existing tier3 target the `compiler-builtins` crate has already been updated as necessary to fix any missing builtin function gaps.\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n\ncheck.", "tree": {"sha": "c805392cdb9056f9af3fb1328840ce57a81d1c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c805392cdb9056f9af3fb1328840ce57a81d1c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7fe9f997d430bdb28dff0560374999bc6bed99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8A4jCRBK7hj4Ov3rIwAANRIIAJlFlUsy7TYUMcoWcd3MwurV\nHip8KdN+t5/R8dPeu5R3eVac/yrvIyaHl1N33G23uy4/qU3YnvnHm3HEUV8EDWau\naqHYskQeLFhB+IfjOtRCMh6Q071BX7BNLWNQtjC1Wf1x/NF2N8o1Xa61Vf3T1lLx\nRBqb1vTSPiusGo+r2n7aLRZEIv3HosXiN5lvExMxBArkxjLTeyFPDJysSlDkbuAY\nDq/tdN6i11EQx9BuZLgGHf9SBXuMxws8tp1hJlnbxzGu/QLauV9P/f/WgVqIF6k0\nKbyuoRJtNjIoC8PBpD0jQF3zTSLfVPDHhDDYJ53EYhbHPYL+OjPbcxQtarWVw9U=\n=eAz2\n-----END PGP SIGNATURE-----\n", "payload": "tree c805392cdb9056f9af3fb1328840ce57a81d1c2e\nparent 5648add9ef770de7311e9127421ac8a7038a07e1\nparent b4a82998e5c0a35b9ccf935a86cc300a8f29bdd3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659899427 +0200\ncommitter GitHub <noreply@github.com> 1659899427 +0200\n\nRollup merge of #100244 - Lokathor:add-armv4t-none-eabi-take2, r=jackh726\n\nAdd armv4t-none-eabi take2\n\nThis is the same as the previous PR (https://github.com/rust-lang/rust/pull/99226) but i just made a fresh branch without a merge commit in it.\n\n---\n\n### armv4t-none-eabi target quiz\n\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target.\n\nThat's me!\n\n> Targets must use naming consistent with any existing targets\n\nWe're using the existing name as recognized by LLVM and GCC\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nNo legal issues here.\n\n>> The target must not introduce license incompatibilities.\n\nNo license requirements here.\n\n>> Anything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0).\n\ncheck\n\n>> The target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy.\n\nno new deps, we're just adding a rustc target description file for a target llvm already knows about.\n\n>> Compiling, linking, and emitting functional binaries, libraries, or other code for the target (whether hosted on the target itself or cross-compiling from another target) must not depend on proprietary (non-FOSS) libraries.\n\nbare-metal target, doesn't rely on any libs at all.\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate\n\n`core` only here. You could build `alloc` too, but you'd have to bring your own global allocator.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible.\n\nLLVM knows how to do it, you just need the GNU Binutils linker because LLVM's linker doesn't work that far back. That's in the docs as part of this PR.\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target.\n\nNo burdens, LLVM already knows how to do this. Further, because this is a cpu-feature variant of an existing tier3 target the `compiler-builtins` crate has already been updated as necessary to fix any missing builtin function gaps.\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n\ncheck.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7fe9f997d430bdb28dff0560374999bc6bed99", "html_url": "https://github.com/rust-lang/rust/commit/0f7fe9f997d430bdb28dff0560374999bc6bed99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7fe9f997d430bdb28dff0560374999bc6bed99/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5648add9ef770de7311e9127421ac8a7038a07e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5648add9ef770de7311e9127421ac8a7038a07e1", "html_url": "https://github.com/rust-lang/rust/commit/5648add9ef770de7311e9127421ac8a7038a07e1"}, {"sha": "b4a82998e5c0a35b9ccf935a86cc300a8f29bdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a82998e5c0a35b9ccf935a86cc300a8f29bdd3", "html_url": "https://github.com/rust-lang/rust/commit/b4a82998e5c0a35b9ccf935a86cc300a8f29bdd3"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "a76ffe808c3b24a103d32ce30ab0523eedbf3ffb", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0f7fe9f997d430bdb28dff0560374999bc6bed99/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7fe9f997d430bdb28dff0560374999bc6bed99/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=0f7fe9f997d430bdb28dff0560374999bc6bed99", "patch": "@@ -0,0 +1,54 @@\n+//! Targets the ARMv4T, with code as `a32` code by default.\n+//!\n+//! Primarily of use for the GBA, but usable with other devices too.\n+//!\n+//! Please ping @Lokathor if changes are needed.\n+//!\n+//! This target profile assumes that you have the ARM binutils in your path\n+//! (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free\n+//! for all major OSes from the ARM developer's website, and they may also be\n+//! available in your system's package manager. Unfortunately, the standard\n+//! linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we\n+//! must use the GNU `ld` linker.\n+//!\n+//! **Important:** This target profile **does not** specify a linker script. You\n+//! just get the default link script when you build a binary for this target.\n+//! The default link script is very likely wrong, so you should use\n+//! `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n+\n+use crate::spec::{cvs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"armv4t-none-eabi\".into(),\n+        pointer_width: 32,\n+        arch: \"arm\".into(),\n+        /* Data layout args are '-' separated:\n+         * little endian\n+         * stack is 64-bit aligned (EABI)\n+         * pointers are 32-bit\n+         * i64 must be 64-bit aligned (EABI)\n+         * mangle names with ELF style\n+         * native integers are 32-bit\n+         * All other elements are default\n+         */\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        options: TargetOptions {\n+            abi: \"eabi\".into(),\n+            linker_flavor: LinkerFlavor::Ld,\n+            linker: Some(\"arm-none-eabi-ld\".into()),\n+            asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n+            features: \"+soft-float,+strict-align\".into(),\n+            main_needs_argc_argv: false,\n+            atomic_cas: false,\n+            has_thumb_interworking: true,\n+            relocation_model: RelocModel::Static,\n+            panic_strategy: PanicStrategy::Abort,\n+            // from thumb_base, rust-lang/rust#44993.\n+            emit_debug_gdb_scripts: false,\n+            // from thumb_base, apparently gcc/clang give enums a minimum of 8 bits on no-os targets\n+            c_enum_min_bits: 8,\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "4e6bc41daa712407609ac39121e95cb5d6ab5640", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f7fe9f997d430bdb28dff0560374999bc6bed99/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f7fe9f997d430bdb28dff0560374999bc6bed99/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=0f7fe9f997d430bdb28dff0560374999bc6bed99", "patch": "@@ -18,6 +18,7 @@\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n     - [aarch64-nintendo-switch-freestanding](platform-support/aarch64-nintendo-switch-freestanding.md)\n+    - [armv4t-none-eabi](platform-support/armv4t-none-eabi.md)\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)"}, {"sha": "cf831e1595e40eae131d6cfa640009c2cec7d104", "filename": "src/doc/rustc/src/platform-support/armv4t_none_eabi.md", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0f7fe9f997d430bdb28dff0560374999bc6bed99/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t_none_eabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f7fe9f997d430bdb28dff0560374999bc6bed99/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t_none_eabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t_none_eabi.md?ref=0f7fe9f997d430bdb28dff0560374999bc6bed99", "patch": "@@ -0,0 +1,70 @@\n+# armv4t-none-eabi\n+\n+Tier 3\n+\n+Bare-metal target for any cpu in the ARMv4T architecture family, supporting\n+ARM/Thumb code interworking (aka `a32`/`t32`), with ARM code as the default code\n+generation.\n+\n+In particular this supports the Gameboy Advance (GBA), but there's nothing GBA\n+specific with this target, so any ARMv4T device should work fine.\n+\n+## Target Maintainers\n+\n+* [@Lokathor](https://github.com/lokathor)\n+\n+## Requirements\n+\n+The target is cross-compiled, and uses static linking.\n+\n+The linker that comes with rustc cannot link for this platform (the platform is\n+too old). You will need the `arm-none-eabi-ld` linker from a GNU Binutils\n+targeting ARM. This can be obtained for Windows/Mac/Linux from the [ARM\n+Developer Website][arm-dev], or possibly from your OS's package manager.\n+\n+[arm-dev]: https://developer.arm.com/Tools%20and%20Software/GNU%20Toolchain\n+\n+This target doesn't provide a linker script, you'll need to bring your own\n+according to the specific device you want to target. Pass\n+`-Clink-arg=-Tyour_script.ld` as a rustc argument to make the linker use\n+`your_script.ld` during linking.\n+\n+## Building Rust Programs\n+\n+Because it is Tier 3, rust does not yet ship pre-compiled artifacts for this target.\n+\n+Just use the `build-std` nightly cargo feature to build the `core` library. You\n+can pass this as a command line argument to cargo, or your `.cargo/config.toml`\n+file might include the following lines:\n+\n+```toml\n+[unstable]\n+build-std = [\"core\"]\n+```\n+\n+Most of `core` should work as expected, with the following notes:\n+* the target is \"soft float\", so `f32` and `f64` operations are emulated in\n+  software.\n+* integer division is also emulated in software.\n+* the target is old enough that it doesn't have atomic instructions.\n+\n+Rust programs are output as ELF files.\n+\n+For running on hardware, you'll generally need to extract the \"raw\" program code\n+out of the ELF and into a file of its own. The `objcopy` program provided as\n+part of the GNU Binutils can do this:\n+\n+```shell\n+arm-none-eabi-objcopy --output-target binary [in_file] [out_file]\n+```\n+\n+## Testing\n+\n+This is a cross-compiled target that you will need to emulate during testing.\n+\n+Because this is a device-agnostic target, and the exact emulator that you'll\n+need depends on the specific device you want to run your code on.\n+\n+For example, when programming for the Gameboy Advance, the\n+[mgba-test-runner](https://github.com/agbrs/agb) program could be used to make a\n+normal set of rust tests be run within the `mgba` emulator."}]}