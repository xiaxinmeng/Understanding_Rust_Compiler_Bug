{"sha": "6a68966663b8412d8f863e5c9dd161085d24d128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNjg5NjY2NjNiODQxMmQ4Zjg2M2U1YzlkZDE2MTA4NWQyNGQxMjg=", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2020-11-30T08:27:23Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-02-04T20:37:14Z"}, "message": "use generic arguments of associated item in trait_ref method", "tree": {"sha": "fa96f00d67413d3f49673537584dd5223f538cf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa96f00d67413d3f49673537584dd5223f538cf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a68966663b8412d8f863e5c9dd161085d24d128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a68966663b8412d8f863e5c9dd161085d24d128", "html_url": "https://github.com/rust-lang/rust/commit/6a68966663b8412d8f863e5c9dd161085d24d128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a68966663b8412d8f863e5c9dd161085d24d128/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2cf9b9d152ab21df7194563ac2aa871ce6d9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2cf9b9d152ab21df7194563ac2aa871ce6d9c5", "html_url": "https://github.com/rust-lang/rust/commit/da2cf9b9d152ab21df7194563ac2aa871ce6d9c5"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "c1fa84dcb25e012f68577207e3c8b4111b1b22fa", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a68966663b8412d8f863e5c9dd161085d24d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a68966663b8412d8f863e5c9dd161085d24d128/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6a68966663b8412d8f863e5c9dd161085d24d128", "patch": "@@ -1132,8 +1132,16 @@ impl<'tcx> ProjectionTy<'tcx> {\n     /// For example, if this is a projection of `<T as Iterator>::Item`,\n     /// then this function would return a `T: Iterator` trait reference.\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n+        // FIXME: This method probably shouldn't exist at all, since it's not\n+        // clear what this method really intends to do. Be careful when\n+        // using this method since the resulting TraitRef additionally\n+        // contains the substs for the assoc_item, which strictly speaking\n+        // is not correct\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n-        ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }\n+        // Include substitutions for generic arguments of associated types\n+        let assoc_item = tcx.associated_item(self.item_def_id);\n+        let substs_assoc_item = self.substs.truncate_to(tcx, tcx.generics_of(assoc_item.def_id));\n+        ty::TraitRef { def_id, substs: substs_assoc_item }\n     }\n \n     pub fn self_ty(&self) -> Ty<'tcx> {"}]}