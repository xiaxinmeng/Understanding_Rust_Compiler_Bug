{"sha": "8ef9703740bfe31f9706a843938e628acedb9968", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjk3MDM3NDBiZmUzMWY5NzA2YTg0MzkzOGU2MjhhY2VkYjk5Njg=", "commit": {"author": {"name": "Brennan Vincent", "email": "brennan@materialize.io", "date": "2020-05-31T16:01:49Z"}, "committer": {"name": "Brennan Vincent", "email": "brennan@materialize.io", "date": "2020-05-31T16:05:54Z"}, "message": "recursively search submodules", "tree": {"sha": "e4a12b6967845c8f764486694a9f78cea1c57760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a12b6967845c8f764486694a9f78cea1c57760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef9703740bfe31f9706a843938e628acedb9968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef9703740bfe31f9706a843938e628acedb9968", "html_url": "https://github.com/rust-lang/rust/commit/8ef9703740bfe31f9706a843938e628acedb9968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef9703740bfe31f9706a843938e628acedb9968/comments", "author": {"login": "umanwizard", "id": 1893159, "node_id": "MDQ6VXNlcjE4OTMxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1893159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umanwizard", "html_url": "https://github.com/umanwizard", "followers_url": "https://api.github.com/users/umanwizard/followers", "following_url": "https://api.github.com/users/umanwizard/following{/other_user}", "gists_url": "https://api.github.com/users/umanwizard/gists{/gist_id}", "starred_url": "https://api.github.com/users/umanwizard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umanwizard/subscriptions", "organizations_url": "https://api.github.com/users/umanwizard/orgs", "repos_url": "https://api.github.com/users/umanwizard/repos", "events_url": "https://api.github.com/users/umanwizard/events{/privacy}", "received_events_url": "https://api.github.com/users/umanwizard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "umanwizard", "id": 1893159, "node_id": "MDQ6VXNlcjE4OTMxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1893159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umanwizard", "html_url": "https://github.com/umanwizard", "followers_url": "https://api.github.com/users/umanwizard/followers", "following_url": "https://api.github.com/users/umanwizard/following{/other_user}", "gists_url": "https://api.github.com/users/umanwizard/gists{/gist_id}", "starred_url": "https://api.github.com/users/umanwizard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umanwizard/subscriptions", "organizations_url": "https://api.github.com/users/umanwizard/orgs", "repos_url": "https://api.github.com/users/umanwizard/repos", "events_url": "https://api.github.com/users/umanwizard/events{/privacy}", "received_events_url": "https://api.github.com/users/umanwizard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c575da1609e3ed793002e73acdb135e4a831eb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/c575da1609e3ed793002e73acdb135e4a831eb81", "html_url": "https://github.com/rust-lang/rust/commit/c575da1609e3ed793002e73acdb135e4a831eb81"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "335a1ad03c7bba3dfa1fd4c4edbcb6ce86cb0442", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8ef9703740bfe31f9706a843938e628acedb9968/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef9703740bfe31f9706a843938e628acedb9968/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=8ef9703740bfe31f9706a843938e628acedb9968", "patch": "@@ -124,29 +124,33 @@ impl Definition {\n \n         let vis = self.visibility(db);\n \n-        // FIXME:\n-        // The following logic are wrong that it does not search\n-        // for submodules within other files recursively.\n-\n         if let Some(Visibility::Module(module)) = vis.and_then(|it| it.into()) {\n             let module: Module = module.into();\n             let mut res = FxHashMap::default();\n-            let src = module.definition_source(db);\n-            let file_id = src.file_id.original_file(db);\n \n-            match src.value {\n-                ModuleSource::Module(m) => {\n-                    let range = Some(m.syntax().text_range());\n-                    res.insert(file_id, range);\n-                }\n-                ModuleSource::SourceFile(_) => {\n-                    res.insert(file_id, None);\n-                    res.extend(module.children(db).map(|m| {\n-                        let src = m.definition_source(db);\n-                        (src.file_id.original_file(db), None)\n-                    }));\n-                }\n+            let mut to_visit = vec![module];\n+            let mut is_first = true;\n+            while let Some(module) = to_visit.pop() {\n+                let src = module.definition_source(db);\n+                let file_id = src.file_id.original_file(db);\n+                match src.value {\n+                    ModuleSource::Module(m) => {\n+                        if is_first {\n+                            let range = Some(m.syntax().text_range());\n+                            res.insert(file_id, range);\n+                        } else {\n+                            // We have already added the enclosing file to the search scope,\n+                            // so do nothing.\n+                        }\n+                    }\n+                    ModuleSource::SourceFile(_) => {\n+                        res.insert(file_id, None);\n+                    }\n+                };\n+                is_first = false;\n+                to_visit.extend(module.children(db));\n             }\n+\n             return SearchScope::new(res);\n         }\n "}]}