{"sha": "21fc2185325fcf6f1a002e4c0c015fecff2ac888", "node_id": "C_kwDOAAsO6NoAKDIxZmMyMTg1MzI1ZmNmNmYxYTAwMmU0YzBjMDE1ZmVjZmYyYWM4ODg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-01T14:45:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-01T14:45:04Z"}, "message": "Rollup merge of #101675 - beetrees:set-times-no-panic, r=joshtriplett\n\nImprove `File::set_times` error handling\n\nMakes `File::set_times` return an error if the `SystemTime` cannot fit into the required type instead of panicking in `FileTimes::set_{accessed,modified}`. Also makes `File::set_times` return an error on Windows if either of the passed times are `0xFFFF_FFFF_FFFF_FFFF`, as [the documentation for `SetFileTime`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfiletime) states that this will prevent operations on the file handle from updating the corresponding file time instead of setting the corresponding file time to that value.\n\nTracking issue: #98245", "tree": {"sha": "5f8406b67ad4a16fe0efc6fb209c84bf9cc54679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8406b67ad4a16fe0efc6fb209c84bf9cc54679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21fc2185325fcf6f1a002e4c0c015fecff2ac888", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOFJwCRBK7hj4Ov3rIwAALhQIAK6dTwlTr4mIJuYGQpIEFljX\n/m8rErl1dLtLVddt0HSo/w8iwitV5jg/oH5t+4ByrxZ+COUi9eMJoqXedCWFYkoD\nvNLTK3RNYxi2MFV9MH5Ab3R+TaFJ50iMnkt7I7E4a2fa7FVrRUxhSP30BHs25xie\n0CbgGMHgVQNUNm0AfB0mIwx6mYLFor+ev6N2CM3YcOjNQOoer01BaMHDi2S2xNfy\n8xG7wfxEWghr7hpoWOR0E2YBz5tufznssZpsNHscLNpaGMVatmi3RTccVnORkBan\n8tYEdwoiQWbS4XPF00PbITSexDUKiuouuC/+YUtFWy2xKk7XU182BgiW11+Uqno=\n=3GNx\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f8406b67ad4a16fe0efc6fb209c84bf9cc54679\nparent 744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1\nparent c66860ab3ed7861458fca2fba4a7e5f512571537\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664635504 +0200\ncommitter GitHub <noreply@github.com> 1664635504 +0200\n\nRollup merge of #101675 - beetrees:set-times-no-panic, r=joshtriplett\n\nImprove `File::set_times` error handling\n\nMakes `File::set_times` return an error if the `SystemTime` cannot fit into the required type instead of panicking in `FileTimes::set_{accessed,modified}`. Also makes `File::set_times` return an error on Windows if either of the passed times are `0xFFFF_FFFF_FFFF_FFFF`, as [the documentation for `SetFileTime`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfiletime) states that this will prevent operations on the file handle from updating the corresponding file time instead of setting the corresponding file time to that value.\n\nTracking issue: #98245\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21fc2185325fcf6f1a002e4c0c015fecff2ac888", "html_url": "https://github.com/rust-lang/rust/commit/21fc2185325fcf6f1a002e4c0c015fecff2ac888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21fc2185325fcf6f1a002e4c0c015fecff2ac888/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "html_url": "https://github.com/rust-lang/rust/commit/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1"}, {"sha": "c66860ab3ed7861458fca2fba4a7e5f512571537", "url": "https://api.github.com/repos/rust-lang/rust/commits/c66860ab3ed7861458fca2fba4a7e5f512571537", "html_url": "https://github.com/rust-lang/rust/commit/c66860ab3ed7861458fca2fba4a7e5f512571537"}], "stats": {"total": 94, "additions": 45, "deletions": 49}, "files": [{"sha": "97eed8a65c52e349541326fcf4f935ab07c51810", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=21fc2185325fcf6f1a002e4c0c015fecff2ac888", "patch": "@@ -251,6 +251,7 @@\n #![feature(doc_notable_trait)]\n #![feature(dropck_eyepatch)]\n #![feature(exhaustive_patterns)]\n+#![feature(if_let_guard)]\n #![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(let_chains)]"}, {"sha": "57c7bf6a28b90491b2841adcd5615ddc0e2a85c0", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 21, "deletions": 41, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=21fc2185325fcf6f1a002e4c0c015fecff2ac888", "patch": "@@ -313,8 +313,11 @@ pub struct FilePermissions {\n     mode: mode_t,\n }\n \n-#[derive(Copy, Clone)]\n-pub struct FileTimes([libc::timespec; 2]);\n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct FileTimes {\n+    accessed: Option<SystemTime>,\n+    modified: Option<SystemTime>,\n+}\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FileType {\n@@ -512,45 +515,11 @@ impl FilePermissions {\n \n impl FileTimes {\n     pub fn set_accessed(&mut self, t: SystemTime) {\n-        self.0[0] = t.t.to_timespec().expect(\"Invalid system time\");\n+        self.accessed = Some(t);\n     }\n \n     pub fn set_modified(&mut self, t: SystemTime) {\n-        self.0[1] = t.t.to_timespec().expect(\"Invalid system time\");\n-    }\n-}\n-\n-struct TimespecDebugAdapter<'a>(&'a libc::timespec);\n-\n-impl fmt::Debug for TimespecDebugAdapter<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"timespec\")\n-            .field(\"tv_sec\", &self.0.tv_sec)\n-            .field(\"tv_nsec\", &self.0.tv_nsec)\n-            .finish()\n-    }\n-}\n-\n-impl fmt::Debug for FileTimes {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"FileTimes\")\n-            .field(\"accessed\", &TimespecDebugAdapter(&self.0[0]))\n-            .field(\"modified\", &TimespecDebugAdapter(&self.0[1]))\n-            .finish()\n-    }\n-}\n-\n-impl Default for FileTimes {\n-    fn default() -> Self {\n-        // Redox doesn't appear to support `UTIME_OMIT`, so we stub it out here, and always return\n-        // an error in `set_times`.\n-        // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n-        // the same as for Redox.\n-        #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))]\n-        let omit = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        let omit = libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ };\n-        Self([omit; 2])\n+        self.modified = Some(t);\n     }\n }\n \n@@ -1084,6 +1053,17 @@ impl File {\n     }\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        let to_timespec = |time: Option<SystemTime>| {\n+            match time {\n+                Some(time) if let Some(ts) = time.t.to_timespec() => Ok(ts),\n+                Some(time) if time > crate::sys::time::UNIX_EPOCH => Err(io::const_io_error!(io::ErrorKind::InvalidInput, \"timestamp is too large to set as a file time\")),\n+                Some(_) => Err(io::const_io_error!(io::ErrorKind::InvalidInput, \"timestamp is too small to set as a file time\")),\n+                None => Ok(libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ }),\n+            }\n+        };\n+        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n@@ -1099,7 +1079,7 @@ impl File {\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n                     match futimens.get() {\n-                        Some(futimens) => futimens(self.as_raw_fd(), times.0.as_ptr()),\n+                        Some(futimens) => futimens(self.as_raw_fd(), times.as_ptr()),\n                         #[cfg(target_os = \"macos\")]\n                         None => {\n                             fn ts_to_tv(ts: &libc::timespec) -> libc::timeval {\n@@ -1108,7 +1088,7 @@ impl File {\n                                     tv_usec: (ts.tv_nsec / 1000) as _\n                                 }\n                             }\n-                            let timevals = [ts_to_tv(&times.0[0]), ts_to_tv(&times.0[1])];\n+                            let timevals = [ts_to_tv(&times[0]), ts_to_tv(&times[1])];\n                             libc::futimes(self.as_raw_fd(), timevals.as_ptr())\n                         }\n                         // futimes requires even newer Android.\n@@ -1121,7 +1101,7 @@ impl File {\n                 })?;\n                 Ok(())\n             } else {\n-                cvt(unsafe { libc::futimens(self.as_raw_fd(), times.0.as_ptr()) })?;\n+                cvt(unsafe { libc::futimens(self.as_raw_fd(), times.as_ptr()) })?;\n                 Ok(())\n             }\n         }"}, {"sha": "953fbeb8395ef37363940e4e3a585d0c2d0b9408", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=21fc2185325fcf6f1a002e4c0c015fecff2ac888", "patch": "@@ -65,8 +65,8 @@ pub struct FilePermissions {\n \n #[derive(Copy, Clone, Debug, Default)]\n pub struct FileTimes {\n-    accessed: Option<wasi::Timestamp>,\n-    modified: Option<wasi::Timestamp>,\n+    accessed: Option<SystemTime>,\n+    modified: Option<SystemTime>,\n }\n \n #[derive(PartialEq, Eq, Hash, Debug, Copy, Clone)]\n@@ -120,11 +120,11 @@ impl FilePermissions {\n \n impl FileTimes {\n     pub fn set_accessed(&mut self, t: SystemTime) {\n-        self.accessed = Some(t.to_wasi_timestamp_or_panic());\n+        self.accessed = Some(t);\n     }\n \n     pub fn set_modified(&mut self, t: SystemTime) {\n-        self.modified = Some(t.to_wasi_timestamp_or_panic());\n+        self.modified = Some(t);\n     }\n }\n \n@@ -476,9 +476,16 @@ impl File {\n     }\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        let to_timestamp = |time: Option<SystemTime>| {\n+            match time {\n+                Some(time) if let Some(ts) = time.to_wasi_timestamp() => Ok(ts),\n+                Some(_) => Err(io::const_io_error!(io::ErrorKind::InvalidInput, \"timestamp is too large to set as a file time\")),\n+                None => Ok(0),\n+            }\n+        };\n         self.fd.filestat_set_times(\n-            times.accessed.unwrap_or(0),\n-            times.modified.unwrap_or(0),\n+            to_timestamp(times.accessed)?,\n+            to_timestamp(times.modified)?,\n             times.accessed.map_or(0, |_| wasi::FSTFLAGS_ATIM)\n                 | times.modified.map_or(0, |_| wasi::FSTFLAGS_MTIM),\n         )"}, {"sha": "016b06efbdc633ae5535ad14766199a7b3decc8b", "filename": "library/std/src/sys/wasi/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs?ref=21fc2185325fcf6f1a002e4c0c015fecff2ac888", "patch": "@@ -47,8 +47,8 @@ impl SystemTime {\n         SystemTime(Duration::from_nanos(ts))\n     }\n \n-    pub fn to_wasi_timestamp_or_panic(&self) -> wasi::Timestamp {\n-        self.0.as_nanos().try_into().expect(\"time does not fit in WASI timestamp\")\n+    pub fn to_wasi_timestamp(&self) -> Option<wasi::Timestamp> {\n+        self.0.as_nanos().try_into().ok()\n     }\n \n     pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {"}, {"sha": "ade00750c959cc2b1b096dc32d4092809b77a955", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fc2185325fcf6f1a002e4c0c015fecff2ac888/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=21fc2185325fcf6f1a002e4c0c015fecff2ac888", "patch": "@@ -572,6 +572,14 @@ impl File {\n                 \"Cannot set file timestamp to 0\",\n             ));\n         }\n+        let is_max =\n+            |t: c::FILETIME| t.dwLowDateTime == c::DWORD::MAX && t.dwHighDateTime == c::DWORD::MAX;\n+        if times.accessed.map_or(false, is_max) || times.modified.map_or(false, is_max) {\n+            return Err(io::const_io_error!(\n+                io::ErrorKind::InvalidInput,\n+                \"Cannot set file timestamp to 0xFFFF_FFFF_FFFF_FFFF\",\n+            ));\n+        }\n         cvt(unsafe {\n             c::SetFileTime(self.as_handle(), None, times.accessed.as_ref(), times.modified.as_ref())\n         })?;"}]}