{"sha": "d1acabeaa204db9235d9e72c5bae4cfaa82da763", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYWNhYmVhYTIwNGRiOTIzNWQ5ZTcyYzViYWU0Y2ZhYTgyZGE3NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-15T16:58:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T16:58:26Z"}, "message": "Auto merge of #35992 - SimonSapin:rc-arc-ptr-eq, r=alexcrichton\n\nAdd `pub fn ptr_eq(this: &Self, other: &Self) -> bool` to Rc and Arc\n\nServo and Kuchiki have had helper functions doing this for some time.", "tree": {"sha": "822ec5716020f1961d883a72753af9bd0556f75b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822ec5716020f1961d883a72753af9bd0556f75b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1acabeaa204db9235d9e72c5bae4cfaa82da763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1acabeaa204db9235d9e72c5bae4cfaa82da763", "html_url": "https://github.com/rust-lang/rust/commit/d1acabeaa204db9235d9e72c5bae4cfaa82da763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1acabeaa204db9235d9e72c5bae4cfaa82da763/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc75933abaf3f6d619ada2bbc12b01bc85ddb4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc75933abaf3f6d619ada2bbc12b01bc85ddb4ae", "html_url": "https://github.com/rust-lang/rust/commit/dc75933abaf3f6d619ada2bbc12b01bc85ddb4ae"}, {"sha": "5ce9feeb8cb48a89feffe579cfc1a9281b4dfbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce9feeb8cb48a89feffe579cfc1a9281b4dfbb0", "html_url": "https://github.com/rust-lang/rust/commit/5ce9feeb8cb48a89feffe579cfc1a9281b4dfbb0"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "5f9ccd1820ca6181dcf1011b684e873026f15de9", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d1acabeaa204db9235d9e72c5bae4cfaa82da763/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1acabeaa204db9235d9e72c5bae4cfaa82da763/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=d1acabeaa204db9235d9e72c5bae4cfaa82da763", "patch": "@@ -331,6 +331,33 @@ impl<T: ?Sized> Arc<T> {\n             deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n         }\n     }\n+\n+    #[inline]\n+    #[unstable(feature = \"ptr_eq\",\n+               reason = \"newly added\",\n+               issue = \"36497\")]\n+    /// Return whether two `Arc` references point to the same value\n+    /// (not just values that compare equal).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_eq)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    /// let same_five = five.clone();\n+    /// let other_five = Arc::new(5);\n+    ///\n+    /// assert!(Arc::ptr_eq(&five, &same_five));\n+    /// assert!(!Arc::ptr_eq(&five, &other_five));\n+    /// ```\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        let this_ptr: *const ArcInner<T> = *this.ptr;\n+        let other_ptr: *const ArcInner<T> = *other.ptr;\n+        this_ptr == other_ptr\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1200,6 +1227,16 @@ mod tests {\n         let foo: Weak<usize> = Weak::new();\n         assert!(foo.upgrade().is_none());\n     }\n+\n+    #[test]\n+    fn test_ptr_eq() {\n+        let five = Arc::new(5);\n+        let same_five = five.clone();\n+        let other_five = Arc::new(5);\n+\n+        assert!(Arc::ptr_eq(&five, &same_five));\n+        assert!(!Arc::ptr_eq(&five, &other_five));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "32e5587ff41282af0fc034eab987692727488ef8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d1acabeaa204db9235d9e72c5bae4cfaa82da763/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1acabeaa204db9235d9e72c5bae4cfaa82da763/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d1acabeaa204db9235d9e72c5bae4cfaa82da763", "patch": "@@ -376,6 +376,33 @@ impl<T: ?Sized> Rc<T> {\n             None\n         }\n     }\n+\n+    #[inline]\n+    #[unstable(feature = \"ptr_eq\",\n+               reason = \"newly added\",\n+               issue = \"36497\")]\n+    /// Return whether two `Rc` references point to the same value\n+    /// (not just values that compare equal).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_eq)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    /// let same_five = five.clone();\n+    /// let other_five = Rc::new(5);\n+    ///\n+    /// assert!(Rc::ptr_eq(&five, &same_five));\n+    /// assert!(!Rc::ptr_eq(&five, &other_five));\n+    /// ```\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        let this_ptr: *const RcBox<T> = *this.ptr;\n+        let other_ptr: *const RcBox<T> = *other.ptr;\n+        this_ptr == other_ptr\n+    }\n }\n \n impl<T: Clone> Rc<T> {\n@@ -1174,6 +1201,16 @@ mod tests {\n         let foo: Weak<usize> = Weak::new();\n         assert!(foo.upgrade().is_none());\n     }\n+\n+    #[test]\n+    fn test_ptr_eq() {\n+        let five = Rc::new(5);\n+        let same_five = five.clone();\n+        let other_five = Rc::new(5);\n+\n+        assert!(Rc::ptr_eq(&five, &same_five));\n+        assert!(!Rc::ptr_eq(&five, &other_five));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "69682652a6a512a312999aceb57e9222f9ec35ac", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d1acabeaa204db9235d9e72c5bae4cfaa82da763/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1acabeaa204db9235d9e72c5bae4cfaa82da763/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d1acabeaa204db9235d9e72c5bae4cfaa82da763", "patch": "@@ -479,6 +479,40 @@ impl<T: ?Sized> PartialEq for *mut T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Eq for *mut T {}\n \n+/// Compare raw pointers for equality.\n+///\n+/// This is the same as using the `==` operator, but less generic:\n+/// the arguments have to be `*const T` raw pointers,\n+/// not anything that implements `PartialEq`.\n+///\n+/// This can be used to compare `&T` references (which coerce to `*const T` implicitly)\n+/// by their address rather than comparing the values they point to\n+/// (which is what the `PartialEq for &T` implementation does).\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(ptr_eq)]\n+/// use std::ptr;\n+///\n+/// let five = 5;\n+/// let other_five = 5;\n+/// let five_ref = &five;\n+/// let same_five_ref = &five;\n+/// let other_five_ref = &other_five;\n+///\n+/// assert!(five_ref == same_five_ref);\n+/// assert!(five_ref == other_five_ref);\n+///\n+/// assert!(ptr::eq(five_ref, same_five_ref));\n+/// assert!(!ptr::eq(five_ref, other_five_ref));\n+/// ```\n+#[unstable(feature = \"ptr_eq\", reason = \"newly added\", issue = \"36497\")]\n+#[inline]\n+pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n+    a == b\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Clone for *const T {\n     #[inline]"}]}