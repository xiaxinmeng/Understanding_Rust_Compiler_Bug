{"sha": "2afa42a32ee4422a5f1f6b82f177ee54312f5164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZmE0MmEzMmVlNDQyMmE1ZjFmNmI4MmYxNzdlZTU0MzEyZjUxNjQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-07T15:12:04Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-16T17:00:13Z"}, "message": "Update for Box", "tree": {"sha": "bc7070cc17ab504875a967ede8101d6c354bb673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc7070cc17ab504875a967ede8101d6c354bb673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2afa42a32ee4422a5f1f6b82f177ee54312f5164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2afa42a32ee4422a5f1f6b82f177ee54312f5164", "html_url": "https://github.com/rust-lang/rust/commit/2afa42a32ee4422a5f1f6b82f177ee54312f5164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2afa42a32ee4422a5f1f6b82f177ee54312f5164/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4cf6ca8addb2b22c077bfa30e8112f5a6087f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cf6ca8addb2b22c077bfa30e8112f5a6087f4a", "html_url": "https://github.com/rust-lang/rust/commit/c4cf6ca8addb2b22c077bfa30e8112f5a6087f4a"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "1a07393f9fc80f3fce28a0ee88615ed1af4c1e5e", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=2afa42a32ee4422a5f1f6b82f177ee54312f5164", "patch": "@@ -259,7 +259,7 @@ pub struct EmitterWriter {\n }\n \n enum Destination {\n-    Terminal(~term::Terminal<~Writer:Send>:Send),\n+    Terminal(Box<term::Terminal<Box<Writer:Send>>:Send>),\n     Raw(Box<Writer:Send>),\n }\n "}, {"sha": "6a50d62ba014fac03c364fecc7a802fa44cef717", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=2afa42a32ee4422a5f1f6b82f177ee54312f5164", "patch": "@@ -65,51 +65,51 @@ mod win;\n #[cfg(not(windows))]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n-pub fn stdout() -> Option<~Terminal<~Writer:Send>:Send> {\n-    let ti: Option<TerminfoTerminal<~Writer:Send>>\n-        = Terminal::new(~std::io::stdout() as ~Writer:Send);\n-    ti.map(|t| ~t as ~Terminal<~Writer:Send>:Send)\n+pub fn stdout() -> Option<Box<Terminal<Box<Writer:Send>>:Send>> {\n+    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n+        = Terminal::new(box std::io::stdout() as Box<Writer:Send>);\n+    ti.map(|t| box t as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n }\n \n #[cfg(windows)]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n-pub fn stdout() -> Option<~Terminal<~Writer:Send>:Send> {\n-    let ti: Option<TerminfoTerminal<~Writer:Send>>\n-        = Terminal::new(~std::io::stdout() as ~Writer:Send);\n+pub fn stdout() -> Option<Box<Terminal<Box<Writer:Send>:Send>:Send>> {\n+    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n+        = Terminal::new(box std::io::stdout() as Box<Writer:Send>);\n \n     match ti {\n-        Some(t) => Some(~t as ~Terminal<~Writer:Send>:Send),\n+        Some(t) => Some(box t as Box<Terminal<Box<Writer:Send>:Send>:Send>),\n         None => {\n-            let wc: Option<WinConsole<~Writer:Send>>\n-                = Terminal::new(~std::io::stdout() as ~Writer:Send);\n-            wc.map(|w| ~w as ~Terminal<~Writer:Send>:Send)\n+            let wc: Option<WinConsole<Box<Writer:Send>>>\n+                = Terminal::new(box std::io::stdout() as Box<Writer:Send>);\n+            wc.map(|w| box w as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n         }\n     }\n }\n \n #[cfg(not(windows))]\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n-pub fn stderr() -> Option<~Terminal<~Writer:Send>:Send> {\n-    let ti: Option<TerminfoTerminal<~Writer:Send>>\n-        = Terminal::new(~std::io::stderr() as ~Writer:Send);\n-    ti.map(|t| ~t as ~Terminal<~Writer:Send>:Send)\n+pub fn stderr() -> Option<Box<Terminal<Box<Writer:Send>:Send>:Send>:Send> {\n+    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n+        = Terminal::new(box std::io::stderr() as Box<Writer:Send>);\n+    ti.map(|t| box t as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n }\n \n #[cfg(windows)]\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n-pub fn stderr() -> Option<~Terminal<~Writer:Send>:Send> {\n-    let ti: Option<TerminfoTerminal<~Writer:Send>>\n-        = Terminal::new(~std::io::stderr() as ~Writer:Send);\n+pub fn stderr() -> Option<Box<Terminal<Box<Writer:Send>:Send>:Send>> {\n+    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n+        = Terminal::new(box std::io::stderr() as Box<Writer:Send>);\n \n     match ti {\n-        Some(t) => Some(~t as ~Terminal<~Writer:Send>:Send),\n+        Some(t) => Some(box t as Box<Terminal<Box<Writer:Send>:Send>:Send>),\n         None => {\n-            let wc: Option<WinConsole<~Writer:Send>>\n-                = Terminal::new(~std::io::stderr() as ~Writer:Send);\n-            wc.map(|w| ~w as ~Terminal<~Writer:Send>:Send)\n+            let wc: Option<WinConsole<Box<Writer:Send>>>\n+                = Terminal::new(box std::io::stderr() as Box<Writer:Send>);\n+            wc.map(|w| box w as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n         }\n     }\n }"}, {"sha": "71ea88127a7068387e4eabd9dedb893ba0474f80", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=2afa42a32ee4422a5f1f6b82f177ee54312f5164", "patch": "@@ -68,7 +68,7 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n pub struct TerminfoTerminal<T> {\n     num_colors: u16,\n     out: T,\n-    ti: ~TermInfo\n+    ti: Box<TermInfo>\n }\n \n impl<T: Writer> Terminal<T> for TerminfoTerminal<T> {"}, {"sha": "39eee153184d75df7579cabeae357e6c69aea90d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afa42a32ee4422a5f1f6b82f177ee54312f5164/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=2afa42a32ee4422a5f1f6b82f177ee54312f5164", "patch": "@@ -447,7 +447,7 @@ pub enum TestResult {\n }\n \n enum OutputLocation<T> {\n-    Pretty(~term::Terminal<~Writer:Send>:Send),\n+    Pretty(Box<term::Terminal<Box<Writer:Send>>:Send>),\n     Raw(T),\n }\n "}]}