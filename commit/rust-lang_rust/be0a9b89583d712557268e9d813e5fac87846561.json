{"sha": "be0a9b89583d712557268e9d813e5fac87846561", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMGE5Yjg5NTgzZDcxMjU1NzI2OGU5ZDgxM2U1ZmFjODc4NDY1NjE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-22T02:20:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:47:55Z"}, "message": "Fix tests", "tree": {"sha": "f06ff5bd0eb7de96b3a7b091a743aedeafb08e5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06ff5bd0eb7de96b3a7b091a743aedeafb08e5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0a9b89583d712557268e9d813e5fac87846561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0a9b89583d712557268e9d813e5fac87846561", "html_url": "https://github.com/rust-lang/rust/commit/be0a9b89583d712557268e9d813e5fac87846561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0a9b89583d712557268e9d813e5fac87846561/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "html_url": "https://github.com/rust-lang/rust/commit/ae1856cb9ea58cdbd9b910de3b0b0ac164092812"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "60a00b4e467569ebac0f00e18a7f86fdc70c3d20", "filename": "src/test/run-pass/generator/control-flow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs?ref=be0a9b89583d712557268e9d813e5fac87846561", "patch": "@@ -10,15 +10,15 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n \n fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n     where T: Generator<Yield = ()>\n {\n     loop {\n         match t.resume() {\n-            State::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n-            State::Complete(ret) => {\n+            GeneratorState::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n+            GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);\n                 return ret\n             }"}, {"sha": "9afe95f9e865cf957031b841b77cb4775a9db06c", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=be0a9b89583d712557268e9d813e5fac87846561", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generators, generator_trait, conservative_impl_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n \n struct W<T>(T);\n \n@@ -19,8 +19,8 @@ impl<T: Generator<Return = ()>> Iterator for W<T> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         match self.0.resume() {\n-            State::Complete(..) => None,\n-            State::Yielded(v) => Some(v),\n+            GeneratorState::Complete(..) => None,\n+            GeneratorState::Yielded(v) => Some(v),\n         }\n     }\n }"}, {"sha": "b2e2a3e7e9d5b558ebd5534615448e7fb2e373c7", "filename": "src/test/run-pass/generator/resume-after-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs?ref=be0a9b89583d712557268e9d813e5fac87846561", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n use std::panic;\n \n fn main() {\n@@ -22,7 +22,7 @@ fn main() {\n     };\n \n     match foo.resume() {\n-        State::Complete(()) => {}\n+        GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n "}, {"sha": "48f1b688f2466470e5067d3b12db1117d5945ff0", "filename": "src/test/run-pass/generator/smoke.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0a9b89583d712557268e9d813e5fac87846561/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs?ref=be0a9b89583d712557268e9d813e5fac87846561", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n use std::thread;\n \n #[test]\n@@ -24,7 +24,7 @@ fn simple() {\n     };\n \n     match foo.resume() {\n-        State::Complete(()) => {}\n+        GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n }\n@@ -40,7 +40,7 @@ fn return_capture() {\n     };\n \n     match foo.resume() {\n-        State::Complete(ref s) if *s == \"foo\" => {}\n+        GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n }\n@@ -52,11 +52,11 @@ fn simple_yield() {\n     };\n \n     match foo.resume() {\n-        State::Yielded(()) => {}\n+        GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n     match foo.resume() {\n-        State::Complete(()) => {}\n+        GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n }\n@@ -69,11 +69,11 @@ fn yield_capture() {\n     };\n \n     match foo.resume() {\n-        State::Yielded(ref s) if *s == \"foo\" => {}\n+        GeneratorState::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n     match foo.resume() {\n-        State::Complete(()) => {}\n+        GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n }\n@@ -86,11 +86,11 @@ fn simple_yield_value() {\n     };\n \n     match foo.resume() {\n-        State::Yielded(ref s) if *s == \"bar\" => {}\n+        GeneratorState::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n     match foo.resume() {\n-        State::Complete(ref s) if *s == \"foo\" => {}\n+        GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n }\n@@ -104,11 +104,11 @@ fn return_after_yield() {\n     };\n \n     match foo.resume() {\n-        State::Yielded(()) => {}\n+        GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n     match foo.resume() {\n-        State::Complete(ref s) if *s == \"foo\" => {}\n+        GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n }\n@@ -156,11 +156,11 @@ fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n         match foo.resume() {\n-            State::Yielded(()) => {}\n+            GeneratorState::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n         match foo.resume() {\n-            State::Complete(()) => {}\n+            GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n     }).join().unwrap();\n@@ -169,11 +169,11 @@ fn send_over_threads() {\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n         match foo.resume() {\n-            State::Yielded(ref s) if *s == \"a\" => {}\n+            GeneratorState::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n         match foo.resume() {\n-            State::Complete(()) => {}\n+            GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n     }).join().unwrap();"}]}