{"sha": "1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDlkNzRhMmQxOTk4YzE4NzYxMzY5Y2FkM2Q5ZGQ1MzkxNmJmOWY=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-22T17:15:56Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-28T15:19:44Z"}, "message": "mir-borrowck: Update tests", "tree": {"sha": "f417cfcb67e1e043df0482ce0edaf4824379b6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f417cfcb67e1e043df0482ce0edaf4824379b6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "html_url": "https://github.com/rust-lang/rust/commit/1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34f56c44a9a9d027964fe992ce966ad407c1d9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/34f56c44a9a9d027964fe992ce966ad407c1d9f3", "html_url": "https://github.com/rust-lang/rust/commit/34f56c44a9a9d027964fe992ce966ad407c1d9f3"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "f3fbc3b8b54dbe98b1a2e00cdc41f48adcf064d4", "filename": "src/test/compile-fail/E0594.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0594.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -15,5 +15,5 @@ static NUM: i32 = 18;\n \n fn main() {\n     NUM = 20; //[ast]~ ERROR E0594\n-              //[mir]~^ ERROR cannot assign to immutable static item\n+              //[mir]~^ ERROR cannot assign to immutable item `NUM`\n }"}, {"sha": "76a670af3531c0675d08d5d29335b90ec405d3d5", "filename": "src/test/compile-fail/borrowck/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -16,5 +16,5 @@ static foo: isize = 5;\n fn main() {\n     // assigning to various global constants\n     foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n-             //[mir]~^ ERROR cannot assign to immutable static item `foo`\n+             //[mir]~^ ERROR cannot assign to immutable item `foo`\n }"}, {"sha": "8a09ab3fd06c8e1ffa7f5dce75db2ecf07dbf57e", "filename": "src/test/compile-fail/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -14,6 +14,9 @@\n // Also includes tests of the errors reported when the Box in question\n // is immutable (#14270).\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n #![feature(box_syntax)]\n \n struct A { a: isize }\n@@ -23,7 +26,8 @@ fn indirect_write_to_imm_box() {\n     let mut x: isize = 1;\n     let y: Box<_> = box &mut x;\n     let p = &y;\n-    ***p = 2; //~ ERROR cannot assign to data in a `&` reference\n+    ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n+              //[mir]~^ ERROR cannot assign to immutable item `***p`\n     drop(p);\n }\n \n@@ -32,7 +36,8 @@ fn borrow_in_var_from_var() {\n     let mut y: Box<_> = box &mut x;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -42,7 +47,8 @@ fn borrow_in_var_from_var_via_imm_box() {\n     let y: Box<_> = box &mut x;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -52,7 +58,8 @@ fn borrow_in_var_from_field() {\n     let mut y: Box<_> = box &mut x.a;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -62,7 +69,8 @@ fn borrow_in_var_from_field_via_imm_box() {\n     let y: Box<_> = box &mut x.a;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n+             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -72,7 +80,8 @@ fn borrow_in_field_from_var() {\n     let mut y = B { a: box &mut x };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -82,7 +91,8 @@ fn borrow_in_field_from_var_via_imm_box() {\n     let y = B { a: box &mut x };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -92,7 +102,8 @@ fn borrow_in_field_from_field() {\n     let mut y = B { a: box &mut x.a };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -102,7 +113,8 @@ fn borrow_in_field_from_field_via_imm_box() {\n     let y = B { a: box &mut x.a };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n+               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }"}, {"sha": "3a4c22eb1395a0f6bfb915d48a804d0543aea9a1", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-ref-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -70,5 +70,5 @@ fn main() {\n     };\n     s[2] = 20;\n     //[ast]~^ ERROR cannot assign to immutable indexed content\n-    // FIXME Error for MIR\n+    //[mir]~^^ ERROR cannot assign to immutable item\n }"}, {"sha": "8eed61ec8d531cb58bace43eca97e0d0af3c8944", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n #![feature(unboxed_closures)]\n \n use std::io::Read;\n@@ -17,9 +21,11 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn main() {\n     let x = 1;\n     to_fn_once(move|| { x = 2; });\n-    //~^ ERROR: cannot assign to immutable captured outer variable\n+    //[ast]~^ ERROR: cannot assign to immutable captured outer variable\n+    //[mir]~^^ ERROR: cannot assign to immutable item `x`\n \n     let s = std::io::stdin();\n     to_fn_once(move|| { s.read_to_end(&mut Vec::new()); });\n-    //~^ ERROR: cannot borrow immutable captured outer variable\n+    //[ast]~^ ERROR: cannot borrow immutable captured outer variable\n+    //[mir]~^^ ERROR: cannot borrow immutable item `s` as mutable\n }"}, {"sha": "75ff0a1210142bd29bc01c2fc2bab4a79064f596", "filename": "src/test/compile-fail/issue-5500-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -20,6 +20,7 @@ fn main() {\n     let _iter = TrieMapIterator{node: &a};\n     _iter.node = & //[ast]~ ERROR cannot assign to immutable field `_iter.node`\n                    //[mir]~^ ERROR cannot assign to immutable field `_iter.node` (Ast)\n-                   // FIXME Error for MIR\n+                   // MIR doesn't generate an error because the code isn't reachable. This is OK\n+                   // because the test is here to check that the compiler doesn't ICE (cf. #5500).\n     panic!()\n }"}, {"sha": "0dbd61413e053d9ebd23976eddff7f2665c55857", "filename": "src/test/compile-fail/unboxed-closures-mutated-upvar-from-fn-closure.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9d74a2d1998c18761369cad3d9dd53916bf9f/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs?ref=1cd9d74a2d1998c18761369cad3d9dd53916bf9f", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n // Test that a by-ref `FnMut` closure gets an error when it tries to\n // mutate a value.\n \n@@ -19,6 +22,7 @@ fn main() {\n     let mut counter = 0;\n     call(|| {\n         counter += 1;\n-        //~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure\n+        //[ast]~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure\n+        //[mir]~^^ ERROR cannot assign to immutable item `counter`\n     });\n }"}]}