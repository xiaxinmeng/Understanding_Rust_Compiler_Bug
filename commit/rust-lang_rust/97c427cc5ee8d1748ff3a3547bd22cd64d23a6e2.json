{"sha": "97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YzQyN2NjNWVlOGQxNzQ4ZmYzYTM1NDdiZDIyY2Q2NGQyM2E2ZTI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-27T12:15:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-27T13:28:20Z"}, "message": "Use new ErrorKind enum", "tree": {"sha": "88ef4a26f8626b304e13b38312f114835c74bde9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ef4a26f8626b304e13b38312f114835c74bde9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "html_url": "https://github.com/rust-lang/rust/commit/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b91a6fcd5d82da723d7af1bf6790fd93a7741e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/b91a6fcd5d82da723d7af1bf6790fd93a7741e93", "html_url": "https://github.com/rust-lang/rust/commit/b91a6fcd5d82da723d7af1bf6790fd93a7741e93"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "d8f2dbca835d85a7f937865fc662446175dd709a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "patch": "@@ -61,25 +61,31 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         path_str: &str,\n         current_item: &Option<String>,\n         module_id: syntax::ast::NodeId,\n-    ) -> Result<(Res, Option<String>), ()> {\n+    ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n         let mut split = path_str.rsplitn(3, \"::\");\n-        let variant_field_name = split.next().map(|f| Symbol::intern(f)).ok_or(())?;\n-        let variant_name = split.next().map(|f| Symbol::intern(f)).ok_or(())?;\n+        let variant_field_name = split\n+            .next()\n+            .map(|f| Symbol::intern(f))\n+            .ok_or(ErrorKind::ResolutionFailure)?;\n+        let variant_name = split\n+            .next()\n+            .map(|f| Symbol::intern(f))\n+            .ok_or(ErrorKind::ResolutionFailure)?;\n         let path = split.next().map(|f| {\n             if f == \"self\" || f == \"Self\" {\n                 if let Some(name) = current_item.as_ref() {\n                     return name.clone();\n                 }\n             }\n             f.to_owned()\n-        }).ok_or(())?;\n+        }).ok_or(ErrorKind::ResolutionFailure)?;\n         let (_, ty_res) = cx.enter_resolver(|resolver| {\n             resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n-        })?;\n+        }).map_err(|_| ErrorKind::ResolutionFailure)?;\n         if let Res::Err = ty_res {\n-            return Err(());\n+            return Err(ErrorKind::ResolutionFailure);\n         }\n         let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n         match ty_res {\n@@ -88,7 +94,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                          .iter()\n                          .flat_map(|imp| cx.tcx.associated_items(*imp))\n                          .any(|item| item.ident.name == variant_name) {\n-                    return Err(());\n+                    return Err(ErrorKind::ResolutionFailure);\n                 }\n                 match cx.tcx.type_of(did).kind {\n                     ty::Adt(def, _) if def.is_enum() => {\n@@ -98,13 +104,13 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                 Some(format!(\"variant.{}.field.{}\",\n                                              variant_name, variant_field_name))))\n                         } else {\n-                            Err(())\n+                            Err(ErrorKind::ResolutionFailure)\n                         }\n                     }\n-                    _ => Err(()),\n+                    _ => Err(ErrorKind::ResolutionFailure),\n                 }\n             }\n-            _ => Err(())\n+            _ => Err(ErrorKind::ResolutionFailure)\n         }\n     }\n "}]}