{"sha": "40455db088eafa7280001e3faae2f50ed9a2c485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDU1ZGIwODhlYWZhNzI4MDAwMWUzZmFhZTJmNTBlZDlhMmM0ODU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T19:25:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-16T19:25:22Z"}, "message": "Highlight function exit points on `fn` keyword", "tree": {"sha": "1bedef16c4d9173f014dc7f65f77721fb863cb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bedef16c4d9173f014dc7f65f77721fb863cb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40455db088eafa7280001e3faae2f50ed9a2c485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40455db088eafa7280001e3faae2f50ed9a2c485", "html_url": "https://github.com/rust-lang/rust/commit/40455db088eafa7280001e3faae2f50ed9a2c485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40455db088eafa7280001e3faae2f50ed9a2c485/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "html_url": "https://github.com/rust-lang/rust/commit/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "6fba65660bc37a292078c915684d4c496c0d2e14", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/40455db088eafa7280001e3faae2f50ed9a2c485/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40455db088eafa7280001e3faae2f50ed9a2c485/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=40455db088eafa7280001e3faae2f50ed9a2c485", "patch": "@@ -31,8 +31,10 @@ pub struct HighlightRelatedConfig {\n // Highlights constructs related to the thing under the cursor:\n // - if on an identifier, highlights all references to that identifier in the current file\n // - if on an `async` or `await token, highlights all yield points for that async context\n-// - if on a `return` token, `?` character or `->` return type arrow, highlights all exit points for that context\n+// - if on a `return` or `fn` keyword, `?` character or `->` return type arrow, highlights all exit points for that context\n // - if on a `break`, `loop`, `while` or `for` token, highlights all break points for that loop or block context\n+//\n+// Note: `?` and `->` do not currently trigger this behavior in the VSCode editor.\n pub(crate) fn highlight_related(\n     sema: &Semantics<RootDatabase>,\n     config: HighlightRelatedConfig,\n@@ -42,20 +44,16 @@ pub(crate) fn highlight_related(\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n     let token = pick_best_token(syntax.token_at_offset(position.offset), |kind| match kind {\n-        T![?] => 2, // prefer `?` when the cursor is sandwiched like `await$0?`\n-        T![await]\n-        | T![async]\n-        | T![return]\n-        | T![break]\n-        | T![loop]\n-        | T![for]\n-        | T![while]\n-        | T![->] => 1,\n+        T![?] => 3, // prefer `?` when the cursor is sandwiched like in `await$0?`\n+        T![->] => 2,\n+        kind if kind.is_keyword() => 1,\n         _ => 0,\n     })?;\n \n     match token.kind() {\n-        T![return] | T![?] | T![->] if config.exit_points => highlight_exit_points(sema, token),\n+        T![fn] | T![return] | T![?] | T![->] if config.exit_points => {\n+            highlight_exit_points(sema, token)\n+        }\n         T![await] | T![async] if config.yield_points => highlight_yield_points(token),\n         T![break] | T![loop] | T![for] | T![while] if config.break_points => {\n             highlight_break_points(token)\n@@ -474,6 +472,25 @@ fn foo() ->$0 u32 {\n         );\n     }\n \n+    #[test]\n+    fn test_hl_exit_points3() {\n+        check(\n+            r#\"\n+fn$0 foo() -> u32 {\n+    if true {\n+        return 0;\n+     // ^^^^^^\n+    }\n+\n+    0?;\n+  // ^\n+    0xDEAD_BEEF\n+ // ^^^^^^^^^^^\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_hl_prefer_ref_over_tail_exit() {\n         check("}]}