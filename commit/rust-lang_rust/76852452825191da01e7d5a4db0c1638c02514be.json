{"sha": "76852452825191da01e7d5a4db0c1638c02514be", "node_id": "C_kwDOAAsO6NoAKDc2ODUyNDUyODI1MTkxZGEwMWU3ZDVhNGRiMGMxNjM4YzAyNTE0YmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T12:23:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T12:23:46Z"}, "message": "Even more completion context filtering", "tree": {"sha": "ee9493456d9730cf2357454452343e7c8ce9f5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9493456d9730cf2357454452343e7c8ce9f5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76852452825191da01e7d5a4db0c1638c02514be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76852452825191da01e7d5a4db0c1638c02514be", "html_url": "https://github.com/rust-lang/rust/commit/76852452825191da01e7d5a4db0c1638c02514be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76852452825191da01e7d5a4db0c1638c02514be/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4", "html_url": "https://github.com/rust-lang/rust/commit/ce5859e38745d3e5e5fc48f54f6a9b5d10150ff4"}], "stats": {"total": 519, "additions": 263, "deletions": 256}, "files": [{"sha": "c925d242a42cb56870dfe04705ce93eee3d5403c", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -27,7 +27,10 @@ use ide_db::SymbolKind;\n use syntax::ast;\n \n use crate::{\n-    context::Visible,\n+    context::{\n+        ItemListKind, NameContext, NameKind, NameRefContext, NameRefKind, PathKind, PatternContext,\n+        TypeLocation, Visible,\n+    },\n     item::Builder,\n     render::{\n         const_::render_const,\n@@ -437,3 +440,120 @@ fn enum_variants_with_paths(\n         }\n     }\n }\n+\n+pub(super) fn complete_name(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    NameContext { name, kind }: &NameContext,\n+) {\n+    match kind {\n+        NameKind::Const => {\n+            item_list::trait_impl::complete_trait_impl_const(acc, ctx, name);\n+        }\n+        NameKind::Function => {\n+            item_list::trait_impl::complete_trait_impl_fn(acc, ctx, name);\n+        }\n+        NameKind::IdentPat(pattern_ctx) => complete_patterns(acc, ctx, pattern_ctx),\n+        NameKind::Module(mod_under_caret) => {\n+            mod_::complete_mod(acc, ctx, mod_under_caret);\n+        }\n+        NameKind::TypeAlias => {\n+            item_list::trait_impl::complete_trait_impl_type_alias(acc, ctx, name);\n+        }\n+        NameKind::RecordField => {\n+            field::complete_field_list_record_variant(acc, ctx);\n+        }\n+        NameKind::ConstParam\n+        | NameKind::Enum\n+        | NameKind::MacroDef\n+        | NameKind::MacroRules\n+        | NameKind::Rename\n+        | NameKind::SelfParam\n+        | NameKind::Static\n+        | NameKind::Struct\n+        | NameKind::Trait\n+        | NameKind::TypeParam\n+        | NameKind::Union\n+        | NameKind::Variant => (),\n+    }\n+}\n+\n+pub(super) fn complete_name_ref(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    NameRefContext { nameref, kind }: &NameRefContext,\n+) {\n+    match kind {\n+        NameRefKind::Path(path_ctx) => {\n+            flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n+            match &path_ctx.kind {\n+                PathKind::Expr { expr_ctx } => {\n+                    dot::complete_undotted_self(acc, ctx, path_ctx, expr_ctx);\n+                    expr::complete_expr_path(acc, ctx, path_ctx, expr_ctx);\n+                    item_list::complete_item_list_in_expr(acc, ctx, path_ctx, expr_ctx);\n+                    record::complete_record_expr_func_update(acc, ctx, path_ctx, expr_ctx);\n+                    snippet::complete_expr_snippet(acc, ctx, path_ctx, expr_ctx);\n+                }\n+                PathKind::Type { location } => {\n+                    r#type::complete_type_path(acc, ctx, path_ctx, location);\n+                    match location {\n+                        TypeLocation::TupleField => {\n+                            field::complete_field_list_tuple_variant(acc, ctx, path_ctx);\n+                        }\n+                        TypeLocation::TypeAscription(ascription) => {\n+                            r#type::complete_ascribed_type(acc, ctx, path_ctx, ascription);\n+                        }\n+                        TypeLocation::GenericArgList(_)\n+                        | TypeLocation::TypeBound\n+                        | TypeLocation::ImplTarget\n+                        | TypeLocation::ImplTrait\n+                        | TypeLocation::Other => (),\n+                    }\n+                }\n+                PathKind::Attr { attr_ctx } => {\n+                    attribute::complete_attribute(acc, ctx, path_ctx, attr_ctx);\n+                }\n+                PathKind::Derive { existing_derives } => {\n+                    attribute::complete_derive(acc, ctx, path_ctx, existing_derives);\n+                }\n+                PathKind::Item { kind } => {\n+                    item_list::complete_item_list(acc, ctx, path_ctx, kind);\n+                    snippet::complete_item_snippet(acc, ctx, path_ctx, kind);\n+                    if let ItemListKind::TraitImpl(impl_) = kind {\n+                        item_list::trait_impl::complete_trait_impl_item_by_name(\n+                            acc, ctx, path_ctx, nameref, impl_,\n+                        );\n+                    }\n+                }\n+                PathKind::Pat { .. } => {\n+                    pattern::complete_pattern_path(acc, ctx, path_ctx);\n+                }\n+                PathKind::Vis { has_in_token } => {\n+                    vis::complete_vis_path(acc, ctx, path_ctx, has_in_token);\n+                }\n+                PathKind::Use => {\n+                    use_::complete_use_tree(acc, ctx, path_ctx, nameref);\n+                }\n+            }\n+        }\n+        NameRefKind::DotAccess(dot_access) => {\n+            flyimport::import_on_the_fly_dot(acc, ctx, dot_access);\n+            dot::complete_dot(acc, ctx, dot_access);\n+            postfix::complete_postfix(acc, ctx, dot_access);\n+        }\n+        NameRefKind::Keyword(item) => {\n+            keyword::complete_for_and_where(acc, ctx, item);\n+        }\n+        NameRefKind::RecordExpr(record_expr) => {\n+            record::complete_record_expr_fields(acc, ctx, record_expr);\n+        }\n+        NameRefKind::Pattern(pattern_ctx) => complete_patterns(acc, ctx, pattern_ctx),\n+    }\n+}\n+\n+fn complete_patterns(acc: &mut Completions, ctx: &CompletionContext, pattern_ctx: &PatternContext) {\n+    flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n+    fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n+    pattern::complete_pattern(acc, ctx, pattern_ctx);\n+    record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n+}"}, {"sha": "712163d81d2be79276390bcdcf0b101047941c21", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n \n use crate::{\n     completions::module_or_attr,\n-    context::{AttrCtx, CompletionContext, PathCompletionCtx, PathKind, Qualified},\n+    context::{AttrCtx, CompletionContext, PathCompletionCtx, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n@@ -72,16 +72,10 @@ pub(crate) fn complete_known_attribute_input(\n pub(crate) fn complete_attribute(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    &AttrCtx { kind, annotated_item_kind }: &AttrCtx,\n ) {\n-    let (qualified, is_inner, annotated_item_kind) = match path_ctx {\n-        &PathCompletionCtx {\n-            kind: PathKind::Attr { attr_ctx: AttrCtx { kind, annotated_item_kind } },\n-            ref qualified,\n-            ..\n-        } => (qualified, kind == AttrKind::Inner, annotated_item_kind),\n-        _ => return,\n-    };\n+    let is_inner = kind == AttrKind::Inner;\n \n     match qualified {\n         Qualified::With {"}, {"sha": "5dee4d795688d15be47934fbedf14c0cdfafca55", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -5,23 +5,17 @@ use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n+    context::{CompletionContext, ExistingDerives, PathCompletionCtx, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n \n pub(crate) fn complete_derive(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    existing_derives: &ExistingDerives,\n ) {\n-    let (qualified, existing_derives) = match path_ctx {\n-        PathCompletionCtx { kind: PathKind::Derive { existing_derives }, qualified, .. } => {\n-            (qualified, existing_derives)\n-        }\n-        _ => return,\n-    };\n-\n     let core = ctx.famous_defs().core();\n \n     match qualified {"}, {"sha": "a8a57c0c7ddf9d1f31ae2a8e49d23ec575535104", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -3,10 +3,7 @@\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{\n-        CompletionContext, DotAccess, DotAccessKind, ExprCtx, PathCompletionCtx, PathKind,\n-        Qualified,\n-    },\n+    context::{CompletionContext, DotAccess, DotAccessKind, ExprCtx, PathCompletionCtx, Qualified},\n     CompletionItem, CompletionItemKind, Completions,\n };\n \n@@ -43,16 +40,22 @@ pub(crate) fn complete_undotted_self(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n+    expr_ctx: &ExprCtx,\n ) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    let self_param = match path_ctx {\n-        PathCompletionCtx {\n-            qualified: Qualified::No,\n-            kind: PathKind::Expr { expr_ctx: ExprCtx { self_param: Some(self_param), .. } },\n-            ..\n-        } if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => self_param,\n+    if !path_ctx.is_trivial_path() {\n+        return;\n+    }\n+    if !ctx.qualifier_ctx.none() {\n+        return;\n+    }\n+    if !matches!(path_ctx.qualified, Qualified::No) {\n+        return;\n+    }\n+    let self_param = match expr_ctx {\n+        ExprCtx { self_param: Some(self_param), .. } => self_param,\n         _ => return,\n     };\n "}, {"sha": "84ae596a8d0a185eda51b0fdd024c9cad024f151", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -4,39 +4,31 @@ use hir::ScopeDef;\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{ExprCtx, PathCompletionCtx, PathKind, Qualified},\n+    context::{ExprCtx, PathCompletionCtx, Qualified},\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_expr_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    &ExprCtx {\n+        in_block_expr,\n+        in_loop_body,\n+        after_if_expr,\n+        in_condition,\n+        incomplete_let,\n+        ref ref_expr_parent,\n+        ref is_func_update,\n+        ref innermost_ret_ty,\n+        ref impl_,\n+        ..\n+    }: &ExprCtx,\n ) {\n     let _p = profile::span(\"complete_expr_path\");\n     if !ctx.qualifier_ctx.none() {\n         return;\n     }\n-    let (\n-        qualified,\n-        &ExprCtx {\n-            in_block_expr,\n-            in_loop_body,\n-            after_if_expr,\n-            in_condition,\n-            incomplete_let,\n-            ref ref_expr_parent,\n-            ref is_func_update,\n-            ref innermost_ret_ty,\n-            ref impl_,\n-            ..\n-        },\n-    ) = match path_ctx {\n-        PathCompletionCtx { kind: PathKind::Expr { expr_ctx }, qualified, .. } => {\n-            (qualified, expr_ctx)\n-        }\n-        _ => return,\n-    };\n \n     let wants_mut_token =\n         ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false);"}, {"sha": "738c24574c9979255c53fb0d284c17210171bbe2", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -1,7 +1,7 @@\n //! Completion of field list position.\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, Qualified, TypeLocation},\n+    context::{PathCompletionCtx, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -10,21 +10,21 @@ pub(crate) fn complete_field_list_tuple_variant(\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n ) {\n+    if ctx.qualifier_ctx.vis_node.is_some() {\n+        return;\n+    }\n     match path_ctx {\n         PathCompletionCtx {\n             has_macro_bang: false,\n             qualified: Qualified::No,\n             parent: None,\n-            kind: PathKind::Type { location: TypeLocation::TupleField },\n             has_type_args: false,\n             ..\n         } => {\n-            if ctx.qualifier_ctx.vis_node.is_none() {\n-                let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n-                add_keyword(\"pub(crate)\", \"pub(crate)\");\n-                add_keyword(\"pub(super)\", \"pub(super)\");\n-                add_keyword(\"pub\", \"pub\");\n-            }\n+            let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n+            add_keyword(\"pub(crate)\", \"pub(crate)\");\n+            add_keyword(\"pub(super)\", \"pub(super)\");\n+            add_keyword(\"pub\", \"pub\");\n         }\n         _ => (),\n     }"}, {"sha": "33130028dbc36086b4114c149481e0011f61f9c1", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -2,34 +2,37 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{ExprCtx, ItemListKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{ExprCtx, ItemListKind, PathCompletionCtx, Qualified},\n     CompletionContext, Completions,\n };\n \n pub(crate) mod trait_impl;\n \n-pub(crate) fn complete_item_list(\n+pub(crate) fn complete_item_list_in_expr(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n+    expr_ctx: &ExprCtx,\n+) {\n+    if !expr_ctx.in_block_expr {\n+        return;\n+    }\n+    if !path_ctx.is_trivial_path() {\n+        return;\n+    }\n+    add_keywords(acc, ctx, None);\n+}\n+\n+pub(crate) fn complete_item_list(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    path_ctx @ PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    kind: &ItemListKind,\n ) {\n     let _p = profile::span(\"complete_item_list\");\n-    let qualified = match path_ctx {\n-        PathCompletionCtx { kind: PathKind::Item { kind }, qualified, .. } => {\n-            if path_ctx.is_trivial_path() {\n-                add_keywords(acc, ctx, Some(kind));\n-            }\n-            qualified\n-        }\n-        PathCompletionCtx {\n-            kind: PathKind::Expr { expr_ctx: ExprCtx { in_block_expr: true, .. } },\n-            ..\n-        } if path_ctx.is_trivial_path() => {\n-            add_keywords(acc, ctx, None);\n-            return;\n-        }\n-        _ => return,\n-    };\n+    if path_ctx.is_trivial_path() {\n+        add_keywords(acc, ctx, Some(kind));\n+    }\n \n     match qualified {\n         Qualified::With {"}, {"sha": "972a7d2f21103abbc97fe81d2487c3d3d8fa78ca", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -43,8 +43,8 @@ use syntax::{\n use text_edit::TextEdit;\n \n use crate::{\n-    context::{ItemListKind, PathCompletionCtx, PathKind},\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n+    context::PathCompletionCtx, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionRelevance, Completions,\n };\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -102,17 +102,18 @@ fn complete_trait_impl_name(\n     Some(())\n }\n \n-pub(crate) fn complete_trait_impl_name_ref(\n+pub(crate) fn complete_trait_impl_item_by_name(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n     name_ref: &Option<ast::NameRef>,\n-) -> Option<()> {\n-    match path_ctx {\n-        PathCompletionCtx {\n-            kind: PathKind::Item { kind: ItemListKind::TraitImpl(Some(impl_)) },\n-            ..\n-        } if path_ctx.is_trivial_path() => complete_trait_impl(\n+    impl_: &Option<ast::Impl>,\n+) {\n+    if !path_ctx.is_trivial_path() {\n+        return;\n+    }\n+    if let Some(impl_) = impl_ {\n+        complete_trait_impl(\n             acc,\n             ctx,\n             ImplCompletionKind::All,\n@@ -121,10 +122,8 @@ pub(crate) fn complete_trait_impl_name_ref(\n                 None => ctx.source_range(),\n             },\n             impl_,\n-        ),\n-        _ => (),\n+        );\n     }\n-    Some(())\n }\n \n fn complete_trait_impl("}, {"sha": "7d8d3a9636deb52b14f5ad8e69238081b50172b5", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::{self, Item};\n \n use crate::{CompletionContext, Completions};\n \n-pub(crate) fn complete_special_keywords(\n+pub(crate) fn complete_for_and_where(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     keyword_item: &ast::Item,\n@@ -60,8 +60,6 @@ mod tests {\n                 kw fn\n                 kw impl\n                 kw trait\n-                sn pd\n-                sn ppd\n             \"#]],\n         );\n     }"}, {"sha": "e2e8d3f205a474bf02095679db30405430a593bc", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -5,7 +5,7 @@ use ide_db::FxHashSet;\n use syntax::ast::Pat;\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, PatternContext, PatternRefutability, Qualified},\n+    context::{PathCompletionCtx, PatternContext, PatternRefutability, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -108,14 +108,11 @@ pub(crate) fn complete_pattern(\n     });\n }\n \n-pub(crate) fn pattern_path_completion(\n+pub(crate) fn complete_pattern_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    PathCompletionCtx { qualified, kind, .. }: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n ) {\n-    if !matches!(kind, PathKind::Pat { .. }) {\n-        return;\n-    }\n     match qualified {\n         Qualified::With { resolution: Some(resolution), is_super_chain, .. } => {\n             if *is_super_chain {"}, {"sha": "12c449bf352c757e9e4b5ea9ad4e9ba83d2abf0c", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n };\n \n use crate::{\n-    context::{ExprCtx, PathCompletionCtx, PathKind, PatternContext, Qualified},\n+    context::{ExprCtx, PathCompletionCtx, PatternContext, Qualified},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n     CompletionRelevancePostfixMatch, Completions,\n };\n@@ -20,7 +20,7 @@ pub(crate) fn complete_record_pattern_fields(\n         complete_fields(acc, ctx, ctx.sema.record_pattern_missing_fields(record_pat));\n     }\n }\n-pub(crate) fn complete_record_expr_fields_record_expr(\n+pub(crate) fn complete_record_expr_fields(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     record_expr: &ast::RecordExpr,\n@@ -85,13 +85,12 @@ pub(crate) fn complete_record_expr_func_update(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n+    expr_ctx: &ExprCtx,\n ) {\n-    if let PathCompletionCtx {\n-        kind: PathKind::Expr { expr_ctx: ExprCtx { is_func_update: Some(record_expr), .. } },\n-        qualified: Qualified::No,\n-        ..\n-    } = path_ctx\n-    {\n+    if !matches!(path_ctx.qualified, Qualified::No) {\n+        return;\n+    }\n+    if let ExprCtx { is_func_update: Some(record_expr), .. } = expr_ctx {\n         let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n \n         match ty.as_ref().and_then(|t| t.original.as_adt()) {"}, {"sha": "9992a81fe07402205c3199651ca47335f9abbe7a", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -4,7 +4,7 @@ use hir::Documentation;\n use ide_db::{imports::insert_use::ImportScope, SnippetCap};\n \n use crate::{\n-    context::{ExprCtx, ItemListKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{ExprCtx, ItemListKind, PathCompletionCtx, Qualified},\n     item::Builder,\n     CompletionContext, CompletionItem, CompletionItemKind, Completions, SnippetScope,\n };\n@@ -19,15 +19,14 @@ pub(crate) fn complete_expr_snippet(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n+    &ExprCtx { in_block_expr, .. }: &ExprCtx,\n ) {\n-    let &can_be_stmt = match path_ctx {\n-        PathCompletionCtx {\n-            qualified: Qualified::No,\n-            kind: PathKind::Expr { expr_ctx: ExprCtx { in_block_expr, .. } },\n-            ..\n-        } => in_block_expr,\n-        _ => return,\n-    };\n+    if !matches!(path_ctx.qualified, Qualified::No) {\n+        return;\n+    }\n+    if !ctx.qualifier_ctx.none() {\n+        return;\n+    }\n \n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n@@ -38,33 +37,35 @@ pub(crate) fn complete_expr_snippet(\n         add_custom_completions(acc, ctx, cap, SnippetScope::Expr);\n     }\n \n-    if can_be_stmt {\n+    if in_block_expr {\n         snippet(ctx, cap, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n         snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n+        let item = snippet(\n+            ctx,\n+            cap,\n+            \"macro_rules\",\n+            \"\\\n+macro_rules! $1 {\n+    ($2) => {\n+        $0\n+    };\n+}\",\n+        );\n+        item.add_to(acc);\n     }\n }\n \n pub(crate) fn complete_item_snippet(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n+    kind: &ItemListKind,\n ) {\n-    let path_kind = match path_ctx {\n-        PathCompletionCtx {\n-            qualified: Qualified::No,\n-            kind:\n-                kind @ (PathKind::Item { .. }\n-                | PathKind::Expr { expr_ctx: ExprCtx { in_block_expr: true, .. }, .. }),\n-            ..\n-        } => kind,\n-        _ => return,\n-    };\n-    if !ctx.qualifier_ctx.none() {\n+    if !matches!(path_ctx.qualified, Qualified::No) {\n         return;\n     }\n-    if ctx.qualifier_ctx.vis_node.is_some() {\n-        return; // technically we could do some of these snippet completions if we were to put the\n-                // attributes before the vis node.\n+    if !ctx.qualifier_ctx.none() {\n+        return;\n     }\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n@@ -76,8 +77,7 @@ pub(crate) fn complete_item_snippet(\n     }\n \n     // Test-related snippets shouldn't be shown in blocks.\n-    if let PathKind::Item { kind: ItemListKind::SourceFile | ItemListKind::Module, .. } = path_kind\n-    {\n+    if let ItemListKind::SourceFile | ItemListKind::Module = kind {\n         let mut item = snippet(\n             ctx,\n             cap,\n@@ -108,10 +108,7 @@ fn ${1:feature}() {\n         );\n         item.lookup_by(\"tfn\");\n         item.add_to(acc);\n-    }\n-    if let PathKind::Item { kind: ItemListKind::SourceFile | ItemListKind::Module, .. }\n-    | PathKind::Expr { .. } = path_kind\n-    {\n+\n         let item = snippet(\n             ctx,\n             cap,"}, {"sha": "0f7ca7586814d7ba6e5ae19695b7a81faa811b43", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -5,25 +5,19 @@ use ide_db::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, Qualified, TypeAscriptionTarget, TypeLocation},\n+    context::{PathCompletionCtx, Qualified, TypeAscriptionTarget, TypeLocation},\n     render::render_type_inference,\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_type_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    location: &TypeLocation,\n ) {\n     let _p = profile::span(\"complete_type_path\");\n \n-    let (location, qualified) = match path_ctx {\n-        PathCompletionCtx { kind: PathKind::Type { location }, qualified, .. } => {\n-            (location, qualified)\n-        }\n-        _ => return,\n-    };\n-\n     let scope_def_applicable = |def| {\n         use hir::{GenericParam::*, ModuleDef::*};\n         match def {\n@@ -191,19 +185,16 @@ pub(crate) fn complete_type_path(\n     }\n }\n \n-pub(crate) fn complete_inferred_type(\n+pub(crate) fn complete_ascribed_type(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     path_ctx: &PathCompletionCtx,\n+    ascription: &TypeAscriptionTarget,\n ) -> Option<()> {\n-    let pat = match path_ctx {\n-        PathCompletionCtx {\n-            kind: PathKind::Type { location: TypeLocation::TypeAscription(ascription), .. },\n-            ..\n-        } if path_ctx.is_trivial_path() => ascription,\n-        _ => return None,\n-    };\n-    let x = match pat {\n+    if !path_ctx.is_trivial_path() {\n+        return None;\n+    }\n+    let x = match ascription {\n         TypeAscriptionTarget::Let(pat) | TypeAscriptionTarget::FnParam(pat) => {\n             ctx.sema.type_of_pat(pat.as_ref()?)\n         }"}, {"sha": "9ebbc8ab9dcab924bf9bea1e6ef5755252231ec6", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -5,24 +5,17 @@ use ide_db::{FxHashSet, SymbolKind};\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n+    context::{CompletionContext, PathCompletionCtx, Qualified},\n     item::Builder,\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, use_tree_parent, .. }: &PathCompletionCtx,\n     name_ref: &Option<ast::NameRef>,\n ) {\n-    let (qualified, name_ref, use_tree_parent) = match path_ctx {\n-        PathCompletionCtx { kind: PathKind::Use, qualified, use_tree_parent, .. } => {\n-            (qualified, name_ref, use_tree_parent)\n-        }\n-        _ => return,\n-    };\n-\n     match qualified {\n         Qualified::With { path, resolution: Some(resolution), is_super_chain } => {\n             if *is_super_chain {"}, {"sha": "86ffe32ff3d46724a539eca1f6955da1a404e66b", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -3,22 +3,16 @@\n use hir::ScopeDef;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n+    context::{CompletionContext, PathCompletionCtx, Qualified},\n     Completions,\n };\n \n pub(crate) fn complete_vis_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    &has_in_token: &bool,\n ) {\n-    let (qualified, &has_in_token) = match path_ctx {\n-        PathCompletionCtx { kind: PathKind::Vis { has_in_token }, qualified, .. } => {\n-            (qualified, has_in_token)\n-        }\n-        _ => return,\n-    };\n-\n     match qualified {\n         Qualified::With {\n             resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),"}, {"sha": "8c73709f4cefdf9cd32fac1fe966ae261d512fcd", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -97,7 +97,7 @@ pub(super) enum PathKind {\n         attr_ctx: AttrCtx,\n     },\n     Derive {\n-        existing_derives: FxHashSet<hir::Macro>,\n+        existing_derives: ExistingDerives,\n     },\n     /// Path in item position, that is inside an (Assoc)ItemList\n     Item {\n@@ -111,6 +111,9 @@ pub(super) enum PathKind {\n     },\n     Use,\n }\n+\n+pub(crate) type ExistingDerives = FxHashSet<hir::Macro>;\n+\n #[derive(Debug, PartialEq, Eq)]\n pub(crate) struct AttrCtx {\n     pub(crate) kind: AttrKind,"}, {"sha": "90e2628439fec5c6e4f7794007101ab7511aa982", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 12, "deletions": 82, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76852452825191da01e7d5a4db0c1638c02514be/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=76852452825191da01e7d5a4db0c1638c02514be", "patch": "@@ -25,7 +25,7 @@ use text_edit::TextEdit;\n use crate::{\n     completions::Completions,\n     context::{\n-        CompletionContext, IdentContext, NameContext, NameKind, NameRefContext, NameRefKind,\n+        CompletionContext, IdentContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind,\n     },\n };\n \n@@ -153,10 +153,13 @@ pub fn completions(\n \n     // prevent `(` from triggering unwanted completion noise\n     if trigger_character == Some('(') {\n-        if let IdentContext::NameRef(NameRefContext { kind: NameRefKind::Path(path_ctx), .. }) =\n-            &ctx.ident_ctx\n-        {\n-            completions::vis::complete_vis_path(&mut completions, ctx, path_ctx);\n+        if let IdentContext::NameRef(NameRefContext { kind, .. }) = &ctx.ident_ctx {\n+            if let NameRefKind::Path(\n+                path_ctx @ PathCompletionCtx { kind: PathKind::Vis { has_in_token }, .. },\n+            ) = kind\n+            {\n+                completions::vis::complete_vis_path(&mut completions, ctx, path_ctx, has_in_token);\n+            }\n         }\n         // prevent `(` from triggering unwanted completion noise\n         return Some(completions);\n@@ -165,84 +168,11 @@ pub fn completions(\n     {\n         let acc = &mut completions;\n \n-        let mut complete_patterns = |pattern_ctx| {\n-            completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n-            completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n-            completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n-            completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n-        };\n-\n         match &ctx.ident_ctx {\n-            IdentContext::Name(NameContext { name, kind }) => match kind {\n-                NameKind::Const => {\n-                    completions::item_list::trait_impl::complete_trait_impl_const(acc, ctx, name);\n-                }\n-                NameKind::Function => {\n-                    completions::item_list::trait_impl::complete_trait_impl_fn(acc, ctx, name);\n-                }\n-                NameKind::IdentPat(pattern_ctx) => complete_patterns(pattern_ctx),\n-                NameKind::Module(mod_under_caret) => {\n-                    completions::mod_::complete_mod(acc, ctx, mod_under_caret);\n-                }\n-                NameKind::TypeAlias => {\n-                    completions::item_list::trait_impl::complete_trait_impl_type_alias(\n-                        acc, ctx, name,\n-                    );\n-                }\n-                NameKind::RecordField => {\n-                    completions::field::complete_field_list_record_variant(acc, ctx);\n-                }\n-                NameKind::ConstParam\n-                | NameKind::Enum\n-                | NameKind::MacroDef\n-                | NameKind::MacroRules\n-                | NameKind::Rename\n-                | NameKind::SelfParam\n-                | NameKind::Static\n-                | NameKind::Struct\n-                | NameKind::Trait\n-                | NameKind::TypeParam\n-                | NameKind::Union\n-                | NameKind::Variant => (),\n-            },\n-            IdentContext::NameRef(NameRefContext { kind, nameref }) => match kind {\n-                NameRefKind::Path(path_ctx) => {\n-                    completions::attribute::complete_attribute(acc, ctx, path_ctx);\n-                    completions::attribute::complete_derive(acc, ctx, path_ctx);\n-                    completions::dot::complete_undotted_self(acc, ctx, path_ctx);\n-                    completions::expr::complete_expr_path(acc, ctx, path_ctx);\n-                    completions::field::complete_field_list_tuple_variant(acc, ctx, path_ctx);\n-                    completions::flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n-                    completions::item_list::complete_item_list(acc, ctx, path_ctx);\n-                    completions::item_list::trait_impl::complete_trait_impl_name_ref(\n-                        acc, ctx, path_ctx, nameref,\n-                    );\n-                    completions::pattern::pattern_path_completion(acc, ctx, path_ctx);\n-                    completions::r#type::complete_inferred_type(acc, ctx, path_ctx);\n-                    completions::r#type::complete_type_path(acc, ctx, path_ctx);\n-                    completions::record::complete_record_expr_func_update(acc, ctx, path_ctx);\n-                    completions::snippet::complete_expr_snippet(acc, ctx, path_ctx);\n-                    completions::snippet::complete_item_snippet(acc, ctx, path_ctx);\n-                    completions::use_::complete_use_tree(acc, ctx, path_ctx, nameref);\n-                    completions::vis::complete_vis_path(acc, ctx, path_ctx);\n-                }\n-                NameRefKind::DotAccess(dot_access) => {\n-                    completions::flyimport::import_on_the_fly_dot(acc, ctx, dot_access);\n-                    completions::dot::complete_dot(acc, ctx, dot_access);\n-                    completions::postfix::complete_postfix(acc, ctx, dot_access);\n-                }\n-                NameRefKind::Keyword(item) => {\n-                    completions::keyword::complete_special_keywords(acc, ctx, item);\n-                }\n-                NameRefKind::RecordExpr(record_expr) => {\n-                    completions::record::complete_record_expr_fields_record_expr(\n-                        acc,\n-                        ctx,\n-                        record_expr,\n-                    );\n-                }\n-                NameRefKind::Pattern(pattern_ctx) => complete_patterns(pattern_ctx),\n-            },\n+            IdentContext::Name(name_ctx) => completions::complete_name(acc, ctx, name_ctx),\n+            IdentContext::NameRef(name_ref_ctx) => {\n+                completions::complete_name_ref(acc, ctx, name_ref_ctx)\n+            }\n             IdentContext::Lifetime(lifetime_ctx) => {\n                 completions::lifetime::complete_label(acc, ctx, lifetime_ctx);\n                 completions::lifetime::complete_lifetime(acc, ctx, lifetime_ctx);"}]}