{"sha": "400075d9d9b6410c9f7952ca52c35806b46b3177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMDA3NWQ5ZDliNjQxMGM5Zjc5NTJjYTUyYzM1ODA2YjQ2YjMxNzc=", "commit": {"author": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2017-08-01T12:03:03Z"}, "committer": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2017-08-01T22:01:24Z"}, "message": "Fixed all unnecessary muts in language core", "tree": {"sha": "c6e8344e69689f5c784e695b062953582ad5c21c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e8344e69689f5c784e695b062953582ad5c21c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/400075d9d9b6410c9f7952ca52c35806b46b3177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/400075d9d9b6410c9f7952ca52c35806b46b3177", "html_url": "https://github.com/rust-lang/rust/commit/400075d9d9b6410c9f7952ca52c35806b46b3177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/400075d9d9b6410c9f7952ca52c35806b46b3177/comments", "author": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b9bd0559746196fe0bc9f39b86c47d8c3afb8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b9bd0559746196fe0bc9f39b86c47d8c3afb8c", "html_url": "https://github.com/rust-lang/rust/commit/35b9bd0559746196fe0bc9f39b86c47d8c3afb8c"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "8cea6c482c33d0a65c7a146f43dfd21fc3098d98", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -1037,7 +1037,7 @@ impl<'a, K: 'a, V: 'a, NodeType>\n         Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n \n     pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) {\n-        let (mut keys, mut vals) = self.node.into_slices_mut();\n+        let (keys, vals) = self.node.into_slices_mut();\n         unsafe {\n             (keys.get_unchecked_mut(self.idx), vals.get_unchecked_mut(self.idx))\n         }\n@@ -1047,7 +1047,7 @@ impl<'a, K: 'a, V: 'a, NodeType>\n impl<'a, K, V, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n     pub fn kv_mut(&mut self) -> (&mut K, &mut V) {\n         unsafe {\n-            let (mut keys, mut vals) = self.node.reborrow_mut().into_slices_mut();\n+            let (keys, vals) = self.node.reborrow_mut().into_slices_mut();\n             (keys.get_unchecked_mut(self.idx), vals.get_unchecked_mut(self.idx))\n         }\n     }"}, {"sha": "160c0ba2ab0e3482f56771f1950a73a3d107bc71", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -1751,7 +1751,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n     type Item = &'a mut T;\n     type IntoIter = slice::IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n+    fn into_iter(self) -> slice::IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "055c2d4840a4247dfb602da265539aab2c0c32d9", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -2394,7 +2394,7 @@ impl<'a, T> IntoIterator for &'a mut VecDeque<T> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> IterMut<'a, T> {\n+    fn into_iter(self) -> IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "c5b3fbca1a6dd492e313c6782cd44b2a2e43fa2c", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -187,7 +187,7 @@ mod impls {\n         where F : FnMut<A>\n     {\n         type Output = F::Output;\n-        extern \"rust-call\" fn call_once(mut self, args: A) -> F::Output {\n+        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n             (*self).call_mut(args)\n         }\n     }"}, {"sha": "aecf2ee9325eee9dde0a13cef3d65e293610c147", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -872,7 +872,7 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> IterMut<'a, T> {\n+    fn into_iter(self) -> IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "20cfb02afcc7707149236dd940066532ccc151c2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -909,7 +909,7 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n-    fn into_iter(mut self) -> IterMut<'a, T> {\n+    fn into_iter(self) -> IterMut<'a, T> {\n         self.iter_mut()\n     }\n }"}, {"sha": "9f70b4834ddc5d71b0700be42671d9e584a3678f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -415,8 +415,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// -------- this type is the same as a type argument in the other type, not highlighted\n     /// ```\n     fn highlight_outer(&self,\n-                       mut value: &mut DiagnosticStyledString,\n-                       mut other_value: &mut DiagnosticStyledString,\n+                       value: &mut DiagnosticStyledString,\n+                       other_value: &mut DiagnosticStyledString,\n                        name: String,\n                        sub: &ty::subst::Substs<'tcx>,\n                        pos: usize,"}, {"sha": "d1938197e652965dbf338ac1c233141f36c9e909", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -560,7 +560,7 @@ pub fn fully_normalize<'a, 'gcx, 'tcx, T>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n {\n     debug!(\"fully_normalize(value={:?})\", value);\n \n-    let mut selcx = &mut SelectionContext::new(infcx);\n+    let selcx = &mut SelectionContext::new(infcx);\n     // FIXME (@jroesch) ISSUE 26721\n     // I'm not sure if this is a bug or not, needs further investigation.\n     // It appears that by reusing the fulfillment_cx here we incur more"}, {"sha": "2966e6715b404212be6ca0dae31d24c840104a48", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -494,7 +494,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             never_obligation.predicate = never_obligation.predicate.map_bound(|mut trait_pred| {\n                 // Swap out () with ! so we can check if the trait is impld for !\n                 {\n-                    let mut trait_ref = &mut trait_pred.trait_ref;\n+                    let trait_ref = &mut trait_pred.trait_ref;\n                     let unit_substs = trait_ref.substs;\n                     let mut never_substs = Vec::with_capacity(unit_substs.len());\n                     never_substs.push(From::from(tcx.types.never));"}, {"sha": "900197f3dbd17c0756ebcf3c410e921270924ff0", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         match self.sty {\n             TyAdt(def, substs) => {\n                 {\n-                    let mut substs_set = visited.entry(def.did).or_insert(FxHashSet::default());\n+                    let substs_set = visited.entry(def.did).or_insert(FxHashSet::default());\n                     if !substs_set.insert(substs) {\n                         // We are already calculating the inhabitedness of this type.\n                         // The type must contain a reference to itself. Break the\n@@ -193,7 +193,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                     }\n                 }\n                 let ret = def.uninhabited_from(visited, tcx, substs);\n-                let mut substs_set = visited.get_mut(&def.did).unwrap();\n+                let substs_set = visited.get_mut(&def.did).unwrap();\n                 substs_set.remove(substs);\n                 ret\n             },"}, {"sha": "676c3c51ea2a3d3aca2d09ec8599c32e48c1a646", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -188,7 +188,7 @@ impl<'a> AllocFnFactory<'a> {\n     fn arg_ty(&self,\n               ty: &AllocatorTy,\n               args: &mut Vec<Arg>,\n-              mut ident: &mut FnMut() -> Ident) -> P<Expr> {\n+              ident: &mut FnMut() -> Ident) -> P<Expr> {\n         match *ty {\n             AllocatorTy::Layout => {\n                 let usize = self.cx.path_ident(self.span, Ident::from_str(\"usize\"));\n@@ -263,7 +263,7 @@ impl<'a> AllocFnFactory<'a> {\n     fn ret_ty(&self,\n               ty: &AllocatorTy,\n               args: &mut Vec<Arg>,\n-              mut ident: &mut FnMut() -> Ident,\n+              ident: &mut FnMut() -> Ident,\n               expr: P<Expr>) -> (P<Ty>, P<Expr>)\n     {\n         match *ty {"}, {"sha": "6b31535c5a5260592066d33039388692fce50cd3", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -98,7 +98,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     let body_id = tcx.hir.body_owned_by(owner_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_maps = tcx.region_maps(owner_def_id);\n-    let mut bccx = &mut BorrowckCtxt { tcx, tables, region_maps, owner_def_id };\n+    let bccx = &mut BorrowckCtxt { tcx, tables, region_maps, owner_def_id };\n \n     let body = bccx.tcx.hir.body(body_id);\n "}, {"sha": "df660d08603adfa1cc2fb31a82d63299d1540902", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -260,7 +260,7 @@ impl<'a, A: Array> Drop for Drain<'a, A> {\n                 let start = source_array_vec.len();\n                 let tail = self.tail_start;\n                 {\n-                    let mut arr = &mut source_array_vec.values as &mut [ManuallyDrop<_>];\n+                    let arr = &mut source_array_vec.values as &mut [ManuallyDrop<_>];\n                     let src = arr.as_ptr().offset(tail as isize);\n                     let dst = arr.as_mut_ptr().offset(start as isize);\n                     ptr::copy(src, dst, self.tail_len);"}, {"sha": "7fc59be780f6e565983e870d3cee6a09c186d21e", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -166,7 +166,7 @@ impl BitMatrix {\n     pub fn add(&mut self, source: usize, target: usize) -> bool {\n         let (start, _) = self.range(source);\n         let (word, mask) = word_mask(target);\n-        let mut vector = &mut self.vector[..];\n+        let vector = &mut self.vector[..];\n         let v1 = vector[start + word];\n         let v2 = v1 | mask;\n         vector[start + word] = v2;"}, {"sha": "1f44378c9e6466f590f1c06aec59f9ef39d3e9a0", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -259,7 +259,7 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n     type IntoIter = slice::IterMut<'a, T>;\n \n     #[inline]\n-    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n+    fn into_iter(self) -> slice::IterMut<'a, T> {\n         self.raw.iter_mut()\n     }\n }"}, {"sha": "31f41b38060cdd74864c39de50361425d5f9deff", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -422,7 +422,7 @@ fn show_content_with_pager(content: &String) {\n \n     match Command::new(pager_name).stdin(Stdio::piped()).spawn() {\n         Ok(mut pager) => {\n-            if let Some(mut pipe) = pager.stdin.as_mut() {\n+            if let Some(pipe) = pager.stdin.as_mut() {\n                 if pipe.write_all(content.as_bytes()).is_err() {\n                     fallback_to_println = true;\n                 }"}, {"sha": "d2ab9b2fbced359c497376a5f550c7cce1de0389", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -479,7 +479,7 @@ impl CrateStore for cstore::CStore {\n                 _ => {},\n             }\n \n-            let mut bfs_queue = &mut VecDeque::new();\n+            let bfs_queue = &mut VecDeque::new();\n             let mut add_child = |bfs_queue: &mut VecDeque<_>, child: def::Export, parent: DefId| {\n                 let child = child.def.def_id();\n "}, {"sha": "c0b54ce2a84decf7947e90f58321115103895471", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -206,7 +206,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         self.schedule_drop(span, extent, &Lvalue::Local(local_id), var_ty);\n     }\n \n-    pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, mut f: &mut F)\n+    pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, f: &mut F)\n         where F: FnMut(&mut Self, Mutability, Name, NodeId, Span, Ty<'tcx>)\n     {\n         match *pattern.kind {"}, {"sha": "eb4a017c17b13f53d60e72d0e80fa84f986b5766", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -720,7 +720,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                value,\n                obligations);\n \n-        let mut fulfill_cx = &mut self.fulfillment_cx;\n+        let fulfill_cx = &mut self.fulfillment_cx;\n         for obligation in obligations {\n             fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n         }"}, {"sha": "3caa9ad34d30a62d34ec662f19db7f2662ab3bf7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -781,7 +781,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             hir::ItemTrait(.., ref trait_item_refs) => {\n                 self.check_item(item.id).generics().predicates();\n                 for trait_item_ref in trait_item_refs {\n-                    let mut check = self.check_item(trait_item_ref.id.node_id);\n+                    let check = self.check_item(trait_item_ref.id.node_id);\n                     check.generics().predicates();\n                     if trait_item_ref.kind != hir::AssociatedItemKind::Type ||\n                        trait_item_ref.defaultness.has_value() {\n@@ -814,7 +814,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             }\n             hir::ItemImpl(.., ref trait_ref, _, ref impl_item_refs) => {\n                 {\n-                    let mut check = self.check_item(item.id);\n+                    let check = self.check_item(item.id);\n                     check.ty().generics().predicates();\n                     if trait_ref.is_some() {\n                         check.impl_trait_ref();"}, {"sha": "41f1f5877d8caba9b9971d52dc659d7a10212f63", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -379,7 +379,7 @@ impl<'a> Resolver<'a> {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n         let (binding, t) = {\n-            let mut resolution = &mut *self.resolution(module, ident, ns).borrow_mut();\n+            let resolution = &mut *self.resolution(module, ident, ns).borrow_mut();\n             let old_binding = resolution.binding();\n \n             let t = f(self, resolution);"}, {"sha": "99a48c4221b32fbb25c5dc022e34dcec8cf954a7", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -1465,7 +1465,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n                 let mut output = i.to_string(scx.tcx());\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n-                let mut cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);\n+                let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);\n                 cgus.as_mut_slice().sort_by_key(|&(ref name, _)| name.clone());\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {"}, {"sha": "3ea23be7712f8b511677c269bc05f189cde7c493", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -348,7 +348,7 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                 CodegenUnit::empty(codegen_unit_name.clone())\n             };\n \n-            let mut codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n+            let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n                                                 .or_insert_with(make_codegen_unit);\n \n             let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {"}, {"sha": "9ee425dab8faf37a3c20ab20ec06b7d014ebe54c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -1204,7 +1204,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                     }\n                 }\n \n-                if let Some(mut augment_error) = augment_error {\n+                if let Some(augment_error) = augment_error {\n                     augment_error(&mut db);\n                 }\n "}, {"sha": "a398d12a5bfd3c76c6ceb10646b94e097407db22", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -538,7 +538,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             // We can't use normalize_associated_types_in as it will pollute the\n             // fcx's fulfillment context after this probe is over.\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let mut selcx = &mut traits::SelectionContext::new(self.fcx);\n+            let selcx = &mut traits::SelectionContext::new(self.fcx);\n             let traits::Normalized { value: xform_self_ty, obligations } =\n                 traits::normalize(selcx, self.param_env, cause, &xform_self_ty);\n             debug!(\"assemble_inherent_impl_probe: xform_self_ty = {:?}\",\n@@ -749,7 +749,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             // as it will pollute the fcx's fulfillment context after this probe\n             // is over.\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let mut selcx = &mut traits::SelectionContext::new(self.fcx);\n+            let selcx = &mut traits::SelectionContext::new(self.fcx);\n             let traits::Normalized { value: xform_self_ty, obligations } =\n                 traits::normalize(selcx, self.param_env, cause, &xform_self_ty);\n "}, {"sha": "197d5b86db875a07f1846ffe88c9865a6764a26b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -4147,8 +4147,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let tail_expr_ty = tail_expr.map(|t| self.check_expr_with_expectation(t, expected));\n \n             let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();\n-            let mut ctxt = enclosing_breakables.find_breakable(blk.id);\n-            let mut coerce = ctxt.coerce.as_mut().unwrap();\n+            let ctxt = enclosing_breakables.find_breakable(blk.id);\n+            let coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n                 let cause = self.cause(tail_expr.span,"}, {"sha": "c1711491ee48ca2427d0dbfc4f49d3dee71d160b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           lhs_expr: &'gcx hir::Expr,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_ty: Ty<'tcx>,\n-                          mut err: &mut errors::DiagnosticBuilder) -> bool {\n+                          err: &mut errors::DiagnosticBuilder) -> bool {\n         // If this function returns true it means a note was printed, so we don't need\n         // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n         let mut is_string_addition = false;"}, {"sha": "7e2229a8f84a3bb014f169112c02eb40901c7e52", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -1618,7 +1618,7 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S>\n     type Item = (&'a K, &'a mut V);\n     type IntoIter = IterMut<'a, K, V>;\n \n-    fn into_iter(mut self) -> IterMut<'a, K, V> {\n+    fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n }"}, {"sha": "bb18fe95a9dbfb08cfee8456a364bc2b4f50b7c8", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -267,7 +267,7 @@ impl Once {\n     #[cold]\n     fn call_inner(&'static self,\n                   ignore_poisoning: bool,\n-                  mut init: &mut FnMut(bool)) {\n+                  init: &mut FnMut(bool)) {\n         let mut state = self.state.load(Ordering::SeqCst);\n \n         'outer: loop {"}, {"sha": "1f56a299407edb2fbbb20a41efbaaf4c7da2bcf7", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -12,13 +12,13 @@ pub use self::imp::OsRng;\n \n use mem;\n \n-fn next_u32(mut fill_buf: &mut FnMut(&mut [u8])) -> u32 {\n+fn next_u32(fill_buf: &mut FnMut(&mut [u8])) -> u32 {\n     let mut buf: [u8; 4] = [0; 4];\n     fill_buf(&mut buf);\n     unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n }\n \n-fn next_u64(mut fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n+fn next_u64(fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n     let mut buf: [u8; 8] = [0; 8];\n     fill_buf(&mut buf);\n     unsafe { mem::transmute::<[u8; 8], u64>(buf) }"}, {"sha": "146bd5d985699fead5fc4050eadc3f426752b4ca", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -211,7 +211,7 @@ pub enum NamedMatch {\n \n fn nameize<I: Iterator<Item=NamedMatch>>(sess: &ParseSess, ms: &[TokenTree], mut res: I)\n                                              -> NamedParseResult {\n-    fn n_rec<I: Iterator<Item=NamedMatch>>(sess: &ParseSess, m: &TokenTree, mut res: &mut I,\n+    fn n_rec<I: Iterator<Item=NamedMatch>>(sess: &ParseSess, m: &TokenTree, res: &mut I,\n              ret_val: &mut HashMap<Ident, Rc<NamedMatch>>)\n              -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n@@ -445,7 +445,7 @@ pub fn parse(sess: &ParseSess,\n         /* error messages here could be improved with links to orig. rules */\n         if token_name_eq(&parser.token, &token::Eof) {\n             if eof_items.len() == 1 {\n-                let matches = eof_items[0].matches.iter_mut().map(|mut dv| {\n+                let matches = eof_items[0].matches.iter_mut().map(|dv| {\n                     Rc::make_mut(dv).pop().unwrap()\n                 });\n                 return nameize(sess, ms, matches);"}, {"sha": "80b6794d1e3cc4c01aae143a8c5d89faef7f1455", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400075d9d9b6410c9f7952ca52c35806b46b3177/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=400075d9d9b6410c9f7952ca52c35806b46b3177", "patch": "@@ -86,7 +86,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n \n fn trace_macros_note(cx: &mut ExtCtxt, sp: Span, message: String) {\n     let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n-    let mut values: &mut Vec<String> = cx.expansions.entry(sp).or_insert_with(Vec::new);\n+    let values: &mut Vec<String> = cx.expansions.entry(sp).or_insert_with(Vec::new);\n     values.push(message);\n }\n "}]}