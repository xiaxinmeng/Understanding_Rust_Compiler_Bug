{"sha": "9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "node_id": "C_kwDOAAsO6NoAKDljZGVmZDc2M2I5MTBmZmQxZDQyMjMzYThjNzUyYWI1ZmQ4NGNhNGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-12T05:19:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-12T05:19:33Z"}, "message": "Auto merge of #93691 - compiler-errors:mir-tainted-by-errors, r=oli-obk\n\nImplement `tainted_by_errors` in MIR borrowck, use it to skip CTFE\n\nPutting this up for initial review. The issue that I found is when we're evaluating a const, we're doing borrowck, but doing nothing with the fact that borrowck fails.\n\nThis implements a `tainted_by_errors` field for MIR borrowck like we have in infcx, so we can use that information to return an `Err` during const eval if our const fails to borrowck.\n\nThis PR needs some cleaning up. I should probably just use `Result` in more places, instead of `.expect`ing in the places I am, but I just wanted it to compile so I could see if it worked!\n\nFixes #93646\n\nr? `@oli-obk`\nfeel free to reassign", "tree": {"sha": "5609a6af2043d0103323f5b77e32fcb286a4dd18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5609a6af2043d0103323f5b77e32fcb286a4dd18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "html_url": "https://github.com/rust-lang/rust/commit/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc323035ac49b8d834fc2a0f580af8fd45e90b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc323035ac49b8d834fc2a0f580af8fd45e90b30", "html_url": "https://github.com/rust-lang/rust/commit/fc323035ac49b8d834fc2a0f580af8fd45e90b30"}, {"sha": "67ad0ffdf8a979535eac7da6bec8626a87fb2843", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ad0ffdf8a979535eac7da6bec8626a87fb2843", "html_url": "https://github.com/rust-lang/rust/commit/67ad0ffdf8a979535eac7da6bec8626a87fb2843"}], "stats": {"total": 468, "additions": 255, "deletions": 213}, "files": [{"sha": "7140cda8e4e51d42e7b9fa5850962f15460a80ea", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -327,7 +327,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         verb: &str,\n         optional_adverb_for_moved: &str,\n         moved_path: Option<String>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'tcx> {\n         let moved_path = moved_path.map(|mp| format!(\": `{}`\", mp)).unwrap_or_default();\n \n         struct_span_err!("}, {"sha": "ac9950241bfe3a7d2b558fcf5791b2266ea82a61", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> UniverseInfo<'tcx> {\n                     found,\n                     TypeError::RegionsPlaceholderMismatch,\n                 );\n-                err.buffer(&mut mbcx.errors_buffer);\n+                mbcx.buffer_error(err);\n             }\n             UniverseInfoInner::TypeOp(ref type_op_info) => {\n                 type_op_info.report_error(mbcx, placeholder, error_element, cause);\n@@ -64,11 +64,9 @@ impl<'tcx> UniverseInfo<'tcx> {\n                 // FIXME: This error message isn't great, but it doesn't show\n                 // up in the existing UI tests. Consider investigating this\n                 // some more.\n-                mbcx.infcx\n-                    .tcx\n-                    .sess\n-                    .struct_span_err(cause.span, \"higher-ranked subtype error\")\n-                    .buffer(&mut mbcx.errors_buffer);\n+                mbcx.buffer_error(\n+                    mbcx.infcx.tcx.sess.struct_span_err(cause.span, \"higher-ranked subtype error\"),\n+                );\n             }\n         }\n     }\n@@ -149,7 +147,7 @@ trait TypeOpInfo<'tcx> {\n         {\n             adjusted\n         } else {\n-            self.fallback_error(tcx, cause.span).buffer(&mut mbcx.errors_buffer);\n+            mbcx.buffer_error(self.fallback_error(tcx, cause.span));\n             return;\n         };\n \n@@ -178,9 +176,9 @@ trait TypeOpInfo<'tcx> {\n         let nice_error = self.nice_error(tcx, cause, placeholder_region, error_region);\n \n         if let Some(nice_error) = nice_error {\n-            nice_error.buffer(&mut mbcx.errors_buffer);\n+            mbcx.buffer_error(nice_error);\n         } else {\n-            self.fallback_error(tcx, span).buffer(&mut mbcx.errors_buffer);\n+            mbcx.buffer_error(self.fallback_error(tcx, span));\n         }\n     }\n }"}, {"sha": "7b8b5974fe758c2eaa103efea01391ef0e6ac807", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -104,9 +104,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n \n-            err.buffer(&mut self.errors_buffer);\n+            self.buffer_error(err);\n         } else {\n-            if let Some((reported_place, _)) = self.move_error_reported.get(&move_out_indices) {\n+            if let Some((reported_place, _)) = self.has_move_error(&move_out_indices) {\n                 if self.prefixes(*reported_place, PrefixSet::All).any(|p| p == used_place) {\n                     debug!(\n                         \"report_use_of_moved_or_uninitialized place: error suppressed \\\n@@ -449,12 +449,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            if let Some((_, mut old_err)) =\n-                self.move_error_reported.insert(move_out_indices, (used_place, err))\n-            {\n-                // Cancel the old error so it doesn't ICE.\n-                old_err.cancel();\n-            }\n+            self.buffer_move_error(move_out_indices, (used_place, err));\n         }\n     }\n \n@@ -503,7 +498,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 Some(borrow_span),\n                 None,\n             );\n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     pub(crate) fn report_use_while_mutably_borrowed(\n@@ -1021,7 +1016,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if self.body.local_decls[borrowed_local].is_ref_to_thread_local() {\n             let err =\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span);\n-            err.buffer(&mut self.errors_buffer);\n+            self.buffer_error(err);\n             return;\n         }\n \n@@ -1113,7 +1108,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             ),\n         };\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn report_local_value_does_not_live_long_enough(\n@@ -1295,7 +1290,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             None,\n         );\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn report_thread_local_value_does_not_live_long_enough(\n@@ -1810,7 +1805,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     loan.kind.describe_mutability(),\n                 );\n \n-                err.buffer(&mut self.errors_buffer);\n+                self.buffer_error(err);\n \n                 return;\n             }\n@@ -1836,7 +1831,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         self.explain_deref_coercion(loan, &mut err);\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn explain_deref_coercion(&mut self, loan: &BorrowData<'tcx>, err: &mut DiagnosticBuilder<'_>) {\n@@ -1938,7 +1933,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n         err.span_label(span, msg);\n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn classify_drop_access_kind(&self, place: PlaceRef<'tcx>) -> StorageDeadOrDrop<'tcx> {"}, {"sha": "2934d921868a8ec76c96d8d0508c6d934fa3a2b0", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n \n         self.add_move_hints(error, &mut err, err_span);\n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     fn report_cannot_move_from_static("}, {"sha": "5963904aa0b514e1f6b9fffb55833fd1fdd2b41e", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -626,7 +626,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        err.buffer(&mut self.errors_buffer);\n+        self.buffer_error(err);\n     }\n \n     /// User cannot make signature of a trait mutable without changing the"}, {"sha": "21f00af5c0cef1bd3efecde471d2fbd20fc23a4b", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -256,6 +256,6 @@ impl OutlivesSuggestionBuilder {\n         diag.sort_span = mir_span.shrink_to_hi();\n \n         // Buffer the diagnostic\n-        diag.buffer(&mut mbcx.errors_buffer);\n+        mbcx.buffer_error(diag);\n     }\n }"}, {"sha": "31c977cc78d3a9a77e990c8ce8e07b1c79c92b24", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -168,14 +168,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let type_test_span = type_test.locations.span(&self.body);\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n-                        self.infcx\n-                            .construct_generic_bound_failure(\n-                                type_test_span,\n-                                None,\n-                                type_test.generic_kind,\n-                                lower_bound_region,\n-                            )\n-                            .buffer(&mut self.errors_buffer);\n+                        self.buffer_error(self.infcx.construct_generic_bound_failure(\n+                            type_test_span,\n+                            None,\n+                            type_test.generic_kind,\n+                            lower_bound_region,\n+                        ));\n                     } else {\n                         // FIXME. We should handle this case better. It\n                         // indicates that we have e.g., some region variable\n@@ -186,27 +184,22 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // to report it; we could probably handle it by\n                         // iterating over the universal regions and reporting\n                         // an error that multiple bounds are required.\n-                        self.infcx\n-                            .tcx\n-                            .sess\n-                            .struct_span_err(\n-                                type_test_span,\n-                                &format!(\"`{}` does not live long enough\", type_test.generic_kind),\n-                            )\n-                            .buffer(&mut self.errors_buffer);\n+                        self.buffer_error(self.infcx.tcx.sess.struct_span_err(\n+                            type_test_span,\n+                            &format!(\"`{}` does not live long enough\", type_test.generic_kind),\n+                        ));\n                     }\n                 }\n \n                 RegionErrorKind::UnexpectedHiddenRegion { span, hidden_ty, member_region } => {\n                     let named_ty = self.regioncx.name_regions(self.infcx.tcx, hidden_ty);\n                     let named_region = self.regioncx.name_regions(self.infcx.tcx, member_region);\n-                    unexpected_hidden_region_diagnostic(\n+                    self.buffer_error(unexpected_hidden_region_diagnostic(\n                         self.infcx.tcx,\n                         span,\n                         named_ty,\n                         named_region,\n-                    )\n-                    .buffer(&mut self.errors_buffer);\n+                    ));\n                 }\n \n                 RegionErrorKind::BoundUniversalRegionError {\n@@ -285,7 +278,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let nice = NiceRegionError::new_from_span(self.infcx, cause.span, o, f);\n             if let Some(diag) = nice.try_report_from_nll() {\n-                diag.buffer(&mut self.errors_buffer);\n+                self.buffer_error(diag);\n                 return;\n             }\n         }\n@@ -375,7 +368,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        diag.buffer(&mut self.errors_buffer);\n+        self.buffer_error(diag);\n     }\n \n     /// Report a specialized error when `FnMut` closures return a reference to a captured variable."}, {"sha": "459b03b0fad65017746ed5c33738f6cf5aa5b335", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 123, "deletions": 50, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -175,10 +175,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n         }\n     }\n \n+    let mut errors = error::BorrowckErrors::new();\n+\n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n     if let Some(ErrorReported) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n+        errors.set_tainted_by_errors();\n     }\n     let upvars: Vec<_> = tables\n         .closure_min_captures_flattened(def.did.to_def_id())\n@@ -205,7 +208,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let location_table_owned = LocationTable::new(body);\n     let location_table = &location_table_owned;\n \n-    let mut errors_buffer = Vec::new();\n     let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =\n         match MoveData::gather_moves(&body, tcx, param_env) {\n             Ok(move_data) => (move_data, Vec::new()),\n@@ -263,7 +265,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         &regioncx,\n         &opt_closure_req,\n         &opaque_type_values,\n-        &mut errors_buffer,\n+        &mut errors,\n     );\n \n     // The various `flow_*` structures can be large. We drop `flow_inits` here\n@@ -310,9 +312,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 access_place_error_reported: Default::default(),\n                 reservation_error_reported: Default::default(),\n                 reservation_warnings: Default::default(),\n-                move_error_reported: BTreeMap::new(),\n                 uninitialized_error_reported: Default::default(),\n-                errors_buffer,\n                 regioncx: regioncx.clone(),\n                 used_mut: Default::default(),\n                 used_mut_upvars: SmallVec::new(),\n@@ -323,9 +323,10 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 region_names: RefCell::default(),\n                 next_region_name: RefCell::new(1),\n                 polonius_output: None,\n+                errors,\n             };\n             promoted_mbcx.report_move_errors(move_errors);\n-            errors_buffer = promoted_mbcx.errors_buffer;\n+            errors = promoted_mbcx.errors;\n         };\n     }\n \n@@ -343,9 +344,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         access_place_error_reported: Default::default(),\n         reservation_error_reported: Default::default(),\n         reservation_warnings: Default::default(),\n-        move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n-        errors_buffer,\n         regioncx: Rc::clone(&regioncx),\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n@@ -356,6 +355,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         region_names: RefCell::default(),\n         next_region_name: RefCell::new(1),\n         polonius_output,\n+        errors,\n     };\n \n     // Compute and report region errors, if any.\n@@ -398,7 +398,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 diag.message = initial_diag.styled_message().clone();\n                 diag.span = initial_diag.span.clone();\n \n-                diag.buffer(&mut mbcx.errors_buffer);\n+                mbcx.buffer_error(diag);\n             },\n         );\n         initial_diag.cancel();\n@@ -423,7 +423,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n-    let used_mut = mbcx.used_mut;\n+    let used_mut = std::mem::take(&mut mbcx.used_mut);\n     for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n         let local_decl = &mbcx.body.local_decls[local];\n         let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {\n@@ -460,23 +460,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n         })\n     }\n \n-    // Buffer any move errors that we collected and de-duplicated.\n-    for (_, (_, diag)) in mbcx.move_error_reported {\n-        diag.buffer(&mut mbcx.errors_buffer);\n-    }\n-\n-    if !mbcx.errors_buffer.is_empty() {\n-        mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);\n-\n-        for diag in mbcx.errors_buffer.drain(..) {\n-            mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n-        }\n-    }\n+    let tainted_by_errors = mbcx.emit_errors();\n \n     let result = BorrowCheckResult {\n         concrete_opaque_types: opaque_type_values,\n         closure_requirements: opt_closure_req,\n         used_mut_upvars: mbcx.used_mut_upvars,\n+        tainted_by_errors,\n     };\n \n     let body_with_facts = if return_body_with_facts {\n@@ -553,26 +543,9 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     /// for the activation of the borrow.\n     reservation_warnings:\n         FxHashMap<BorrowIndex, (Place<'tcx>, Span, Location, BorrowKind, BorrowData<'tcx>)>,\n-    /// This field keeps track of move errors that are to be reported for given move indices.\n-    ///\n-    /// There are situations where many errors can be reported for a single move out (see #53807)\n-    /// and we want only the best of those errors.\n-    ///\n-    /// The `report_use_of_moved_or_uninitialized` function checks this map and replaces the\n-    /// diagnostic (if there is one) if the `Place` of the error being reported is a prefix of the\n-    /// `Place` of the previous most diagnostic. This happens instead of buffering the error. Once\n-    /// all move errors have been reported, any diagnostics in this map are added to the buffer\n-    /// to be emitted.\n-    ///\n-    /// `BTreeMap` is used to preserve the order of insertions when iterating. This is necessary\n-    /// when errors in the map are being re-added to the error buffer so that errors with the\n-    /// same primary span come out in a consistent order.\n-    move_error_reported: BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'cx>)>,\n     /// This field keeps track of errors reported in the checking of uninitialized variables,\n     /// so that we don't report seemingly duplicate errors.\n     uninitialized_error_reported: FxHashSet<PlaceRef<'tcx>>,\n-    /// Errors to be reported buffer\n-    errors_buffer: Vec<Diagnostic>,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n     used_mut: FxHashSet<Local>,\n@@ -604,6 +577,8 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// Results of Polonius analysis.\n     polonius_output: Option<Rc<PoloniusOutput>>,\n+\n+    errors: error::BorrowckErrors<'tcx>,\n }\n \n // Check that:\n@@ -1027,7 +1002,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         if conflict_error || mutability_error {\n             debug!(\"access_place: logging error place_span=`{:?}` kind=`{:?}`\", place_span, kind);\n-\n             self.access_place_error_reported.insert((place_span.0, place_span.1));\n         }\n     }\n@@ -1107,12 +1081,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     error_reported = true;\n                     match kind {\n                         ReadKind::Copy => {\n-                            this.report_use_while_mutably_borrowed(location, place_span, borrow)\n-                                .buffer(&mut this.errors_buffer);\n+                            let err = this\n+                                .report_use_while_mutably_borrowed(location, place_span, borrow);\n+                            this.buffer_error(err);\n                         }\n                         ReadKind::Borrow(bk) => {\n-                            this.report_conflicting_borrow(location, place_span, bk, borrow)\n-                                .buffer(&mut this.errors_buffer);\n+                            let err =\n+                                this.report_conflicting_borrow(location, place_span, bk, borrow);\n+                            this.buffer_error(err);\n                         }\n                     }\n                     Control::Break\n@@ -1162,8 +1138,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     error_reported = true;\n                     match kind {\n                         WriteKind::MutableBorrow(bk) => {\n-                            this.report_conflicting_borrow(location, place_span, bk, borrow)\n-                                .buffer(&mut this.errors_buffer);\n+                            let err =\n+                                this.report_conflicting_borrow(location, place_span, bk, borrow);\n+                            this.buffer_error(err);\n                         }\n                         WriteKind::StorageDeadOrDrop => this\n                             .report_borrowed_value_does_not_live_long_enough(\n@@ -1570,7 +1547,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 yield_span,\n             );\n \n-            err.buffer(&mut self.errors_buffer);\n+            self.buffer_error(err);\n         }\n     }\n \n@@ -2046,10 +2023,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 | WriteKind::MutableBorrow(BorrowKind::Shared)\n                 | WriteKind::MutableBorrow(BorrowKind::Shallow),\n             ) => {\n-                if let (Err(_), true) = (\n-                    self.is_mutable(place.as_ref(), is_local_mutation_allowed),\n-                    self.errors_buffer.is_empty(),\n-                ) {\n+                if self.is_mutable(place.as_ref(), is_local_mutation_allowed).is_err()\n+                    && !self.has_buffered_errors()\n+                {\n                     // rust-lang/rust#46908: In pure NLL mode this code path should be\n                     // unreachable, but we use `delay_span_bug` because we can hit this when\n                     // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`\n@@ -2301,6 +2277,103 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n }\n \n+mod error {\n+    use super::*;\n+\n+    pub struct BorrowckErrors<'tcx> {\n+        /// This field keeps track of move errors that are to be reported for given move indices.\n+        ///\n+        /// There are situations where many errors can be reported for a single move out (see #53807)\n+        /// and we want only the best of those errors.\n+        ///\n+        /// The `report_use_of_moved_or_uninitialized` function checks this map and replaces the\n+        /// diagnostic (if there is one) if the `Place` of the error being reported is a prefix of the\n+        /// `Place` of the previous most diagnostic. This happens instead of buffering the error. Once\n+        /// all move errors have been reported, any diagnostics in this map are added to the buffer\n+        /// to be emitted.\n+        ///\n+        /// `BTreeMap` is used to preserve the order of insertions when iterating. This is necessary\n+        /// when errors in the map are being re-added to the error buffer so that errors with the\n+        /// same primary span come out in a consistent order.\n+        buffered_move_errors:\n+            BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx>)>,\n+        /// Errors to be reported buffer\n+        buffered: Vec<Diagnostic>,\n+        /// Set to Some if we emit an error during borrowck\n+        tainted_by_errors: Option<ErrorReported>,\n+    }\n+\n+    impl BorrowckErrors<'_> {\n+        pub fn new() -> Self {\n+            BorrowckErrors {\n+                buffered_move_errors: BTreeMap::new(),\n+                buffered: Default::default(),\n+                tainted_by_errors: None,\n+            }\n+        }\n+\n+        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_>) {\n+            self.tainted_by_errors = Some(ErrorReported {});\n+            t.buffer(&mut self.buffered);\n+        }\n+\n+        pub fn set_tainted_by_errors(&mut self) {\n+            self.tainted_by_errors = Some(ErrorReported {});\n+        }\n+    }\n+\n+    impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n+        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_>) {\n+            self.errors.buffer_error(t);\n+        }\n+\n+        pub fn buffer_move_error(\n+            &mut self,\n+            move_out_indices: Vec<MoveOutIndex>,\n+            place_and_err: (PlaceRef<'tcx>, DiagnosticBuilder<'tcx>),\n+        ) -> bool {\n+            if let Some((_, mut diag)) =\n+                self.errors.buffered_move_errors.insert(move_out_indices, place_and_err)\n+            {\n+                // Cancel the old diagnostic so we don't ICE\n+                diag.cancel();\n+                false\n+            } else {\n+                true\n+            }\n+        }\n+\n+        pub fn emit_errors(&mut self) -> Option<ErrorReported> {\n+            // Buffer any move errors that we collected and de-duplicated.\n+            for (_, (_, diag)) in std::mem::take(&mut self.errors.buffered_move_errors) {\n+                // We have already set tainted for this error, so just buffer it.\n+                diag.buffer(&mut self.errors.buffered);\n+            }\n+\n+            if !self.errors.buffered.is_empty() {\n+                self.errors.buffered.sort_by_key(|diag| diag.sort_span);\n+\n+                for diag in self.errors.buffered.drain(..) {\n+                    self.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n+                }\n+            }\n+\n+            self.errors.tainted_by_errors\n+        }\n+\n+        pub fn has_buffered_errors(&self) -> bool {\n+            self.errors.buffered.is_empty()\n+        }\n+\n+        pub fn has_move_error(\n+            &self,\n+            move_out_indices: &[MoveOutIndex],\n+        ) -> Option<&(PlaceRef<'tcx>, DiagnosticBuilder<'cx>)> {\n+            self.errors.buffered_move_errors.get(move_out_indices)\n+        }\n+    }\n+}\n+\n /// The degree of overlap between 2 places for borrow-checking.\n enum Overlap {\n     /// The places might partially overlap - in this case, we give"}, {"sha": "7fc1fe1130b1446d62fe1551e5403a48bb48e798", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -1,7 +1,6 @@\n //! The entry point of the NLL borrow checker.\n \n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::Diagnostic;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n@@ -373,7 +372,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n     opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n-    errors_buffer: &mut Vec<Diagnostic>,\n+    errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;\n     let base_def_id = tcx.typeck_root_def_id(body.source.def_id());\n@@ -418,7 +417,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n         err.note(&format!(\"Inferred opaque type values:\\n{:#?}\", opaque_type_values));\n     }\n \n-    err.buffer(errors_buffer);\n+    errors.buffer_error(err);\n }\n \n fn for_each_region_constraint("}, {"sha": "bfb9c40be57df0e6d09c34b2caee8b8d63bfdad7", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -6,7 +6,6 @@ use crate::interpret::{\n     ScalarMaybeUninit, StackPopCleanup,\n };\n \n-use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -281,25 +280,6 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n \n     let cid = key.value;\n     let def = cid.instance.def.with_opt_param();\n-\n-    if let Some(def) = def.as_local() {\n-        if tcx.has_typeck_results(def.did) {\n-            if let Some(error_reported) = tcx.typeck_opt_const_arg(def).tainted_by_errors {\n-                return Err(ErrorHandled::Reported(error_reported));\n-            }\n-        }\n-        if !tcx.is_mir_available(def.did) {\n-            tcx.sess.delay_span_bug(\n-                tcx.def_span(def.did),\n-                &format!(\"no MIR body is available for {:?}\", def.did),\n-            );\n-            return Err(ErrorHandled::Reported(ErrorReported {}));\n-        }\n-        if let Some(error_reported) = tcx.mir_const_qualif_opt_const_arg(def).error_occured {\n-            return Err(ErrorHandled::Reported(error_reported));\n-        }\n-    }\n-\n     let is_static = tcx.is_static(def.did);\n \n     let mut ecx = InterpCx::new("}, {"sha": "e157b584052128790b90db8300725e56b7fcf7ad", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -1,3 +1,5 @@\n+use rustc_errors::ErrorReported;\n+use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use std::borrow::Borrow;\n@@ -243,6 +245,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             ty::InstanceDef::Item(def) => {\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n+                } else if ecx.tcx.def_kind(def.did) == DefKind::AssocConst {\n+                    ecx.tcx.sess.delay_span_bug(\n+                        rustc_span::DUMMY_SP,\n+                        \"This is likely a const item that is missing from its impl\",\n+                    );\n+                    throw_inval!(AlreadyReported(ErrorReported {}));\n                 } else {\n                     let path = ecx.tcx.def_path_str(def.did);\n                     Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))"}, {"sha": "1b86bcfa8c9ad6ed9cef72d69ff896226e79043e", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -509,20 +509,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         instance: ty::InstanceDef<'tcx>,\n         promoted: Option<mir::Promoted>,\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n-        // do not continue if typeck errors occurred (can only occur in local crate)\n         let def = instance.with_opt_param();\n-        if let Some(def) = def.as_local() {\n-            if self.tcx.has_typeck_results(def.did) {\n-                if let Some(error_reported) = self.tcx.typeck_opt_const_arg(def).tainted_by_errors {\n-                    throw_inval!(AlreadyReported(error_reported))\n-                }\n-            }\n-        }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n-        if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n+        let body = if let Some(promoted) = promoted {\n+            &self.tcx.promoted_mir_opt_const_arg(def)[promoted]\n+        } else {\n+            M::load_mir(self, instance)?\n+        };\n+        // do not continue if typeck errors occurred (can only occur in local crate)\n+        if let Some(err) = body.tainted_by_errors {\n+            throw_inval!(AlreadyReported(err));\n         }\n-        M::load_mir(self, instance)\n+        Ok(body)\n     }\n \n     /// Call this on things you got out of the MIR (so it is as generic as the current"}, {"sha": "12a8b8c6d77905a745870cb529f08f1fc9b337e9", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -120,7 +120,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n     fn in_return_place(\n         &mut self,\n         ccx: &'mir ConstCx<'mir, 'tcx>,\n-        error_occured: Option<ErrorReported>,\n+        tainted_by_errors: Option<ErrorReported>,\n     ) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n@@ -134,7 +134,9 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {\n-            None => return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty(), error_occured),\n+            None => {\n+                return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty(), tainted_by_errors);\n+            }\n             Some(bb) => bb,\n         };\n \n@@ -166,7 +168,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n             needs_non_const_drop: self.needs_non_const_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n-            error_occured,\n+            tainted_by_errors,\n         }\n     }\n }"}, {"sha": "c3fa98b000f4a3cacedd51599e423c9851b01dec", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -17,14 +17,14 @@ use super::ConstCx;\n pub fn in_any_value_of_ty<'tcx>(\n     cx: &ConstCx<'_, 'tcx>,\n     ty: Ty<'tcx>,\n-    error_occured: Option<ErrorReported>,\n+    tainted_by_errors: Option<ErrorReported>,\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n         needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n         needs_non_const_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n-        error_occured,\n+        tainted_by_errors,\n     }\n }\n "}, {"sha": "92d1f5bceefe41eaef7b01efc4c826adc1e0e4ca", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -974,6 +974,7 @@ pub fn promote_candidates<'tcx>(\n             vec![],\n             body.span,\n             body.generator_kind(),\n+            body.tainted_by_errors,\n         );\n \n         let promoter = Promoter {"}, {"sha": "0688d7d2569f55248a5b1a39832baad327a8e88c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -13,6 +13,7 @@ use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n \n+use rustc_errors::ErrorReported;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n@@ -284,6 +285,8 @@ pub struct Body<'tcx> {\n \n     predecessor_cache: PredecessorCache,\n     is_cyclic: GraphIsCyclicCache,\n+\n+    pub tainted_by_errors: Option<ErrorReported>,\n }\n \n impl<'tcx> Body<'tcx> {\n@@ -297,6 +300,7 @@ impl<'tcx> Body<'tcx> {\n         var_debug_info: Vec<VarDebugInfo<'tcx>>,\n         span: Span,\n         generator_kind: Option<GeneratorKind>,\n+        tainted_by_errors: Option<ErrorReported>,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n         assert!(\n@@ -329,6 +333,7 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n+            tainted_by_errors,\n         };\n         body.is_polymorphic = body.has_param_types_or_consts();\n         body\n@@ -356,6 +361,7 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n+            tainted_by_errors: None,\n         };\n         body.is_polymorphic = body.has_param_types_or_consts();\n         body"}, {"sha": "6e2b060e7ddcf3789e1abf9107ebd0fb629c81e3", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -214,6 +214,7 @@ pub struct BorrowCheckResult<'tcx> {\n     pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n+    pub tainted_by_errors: Option<ErrorReported>,\n }\n \n /// The result of the `mir_const_qualif` query.\n@@ -227,7 +228,7 @@ pub struct ConstQualifs {\n     pub needs_drop: bool,\n     pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n-    pub error_occured: Option<ErrorReported>,\n+    pub tainted_by_errors: Option<ErrorReported>,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "4a3efb5c1b8ef3a295395b79832c8e06b7e31c70", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -8,7 +8,9 @@ use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath};\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n-use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::mir::{\n+    Body, BorrowCheckResult, Field, Local, Place, PlaceElem, ProjectionKind, Promoted,\n+};\n use crate::thir::Thir;\n use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n@@ -1061,6 +1063,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    pub fn mir_borrowck_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+    ) -> &'tcx BorrowCheckResult<'tcx> {\n+        if let Some(param_did) = def.const_param_did {\n+            self.mir_borrowck_const_arg((def.did, param_did))\n+        } else {\n+            self.mir_borrowck(def.did)\n+        }\n+    }\n+\n     pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {\n         self.arena.alloc(Steal::new(thir))\n     }"}, {"sha": "39efc006d9d0fa4bda67f3d1ed1d055f044f5307", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -253,6 +253,7 @@ TrivialTypeFoldableAndLiftImpls! {\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n     ::rustc_span::Span,\n+    ::rustc_errors::ErrorReported,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "10807d432764341c782caecf3984da222c3da9e0", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -104,8 +104,8 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     let span_with_body = span_with_body.unwrap_or_else(|| tcx.hir().span(id));\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let body = if let Some(ErrorReported) = typeck_results.tainted_by_errors {\n-            build::construct_error(&infcx, def, id, body_id, body_owner_kind)\n+        let body = if let Some(error_reported) = typeck_results.tainted_by_errors {\n+            build::construct_error(&infcx, def, id, body_id, body_owner_kind, error_reported)\n         } else if body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n@@ -715,6 +715,7 @@ fn construct_error<'a, 'tcx>(\n     hir_id: hir::HirId,\n     body_id: hir::BodyId,\n     body_owner_kind: hir::BodyOwnerKind,\n+    err: ErrorReported,\n ) -> Body<'tcx> {\n     let tcx = infcx.tcx;\n     let span = tcx.hir().span(hir_id);\n@@ -769,6 +770,7 @@ fn construct_error<'a, 'tcx>(\n         vec![],\n         span,\n         generator_kind,\n+        Some(err),\n     );\n     body.generator.as_mut().map(|gen| gen.yield_ty = Some(ty));\n     body\n@@ -857,6 +859,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.var_debug_info,\n             self.fn_span,\n             self.generator_kind,\n+            self.typeck_results.tainted_by_errors,\n         )\n     }\n "}, {"sha": "0d314a109bac72c437f64e3be6251cc9905db8db", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -145,6 +145,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             Default::default(),\n             body.span,\n             body.generator_kind(),\n+            body.tainted_by_errors,\n         );\n \n         // FIXME(oli-obk, eddyb) Optimize locals (or even local paths) to hold"}, {"sha": "e7d5bab8fd9d45e6bce054f0d7c75e8f4e754ee8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -252,8 +252,11 @@ fn mir_promoted<'tcx>(\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n     // Also this means promotion can rely on all const checks having been done.\n-    let _ = tcx.mir_const_qualif_opt_const_arg(def);\n+    let const_qualifs = tcx.mir_const_qualif_opt_const_arg(def);\n     let mut body = tcx.mir_const(def).steal();\n+    if let Some(error_reported) = const_qualifs.tainted_by_errors {\n+        body.tainted_by_errors = Some(error_reported);\n+    }\n \n     let mut required_consts = Vec::new();\n     let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n@@ -358,13 +361,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n \n-    // (Mir-)Borrowck uses `mir_promoted`, so we have to force it to\n-    // execute before we can steal.\n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().mir_borrowck(def.did);\n-    }\n+    let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);\n \n     let is_fn_like = tcx.hir().get_by_def_id(def.did).fn_kind().is_some();\n     if is_fn_like {\n@@ -379,6 +376,9 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n \n     let (body, _) = tcx.mir_promoted(def);\n     let mut body = body.steal();\n+    if let Some(error_reported) = mir_borrowck.tainted_by_errors {\n+        body.tainted_by_errors = Some(error_reported);\n+    }\n \n     // IMPORTANT\n     pm::run_passes(tcx, &mut body, &[&remove_false_edges::RemoveFalseEdges]);\n@@ -544,15 +544,13 @@ fn promoted_mir<'tcx>(\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().mir_borrowck(def.did);\n-    }\n-    let (_, promoted) = tcx.mir_promoted(def);\n-    let mut promoted = promoted.steal();\n+    let tainted_by_errors = tcx.mir_borrowck_opt_const_arg(def).tainted_by_errors;\n+    let mut promoted = tcx.mir_promoted(def).1.steal();\n \n     for body in &mut promoted {\n+        if let Some(error_reported) = tainted_by_errors {\n+            body.tainted_by_errors = Some(error_reported);\n+        }\n         run_post_borrowck_cleanup_passes(tcx, body);\n     }\n "}, {"sha": "a4927c467cfc3116357a4af30caec8e19ac4635b", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -235,6 +235,8 @@ fn new_body<'tcx>(\n         vec![],\n         span,\n         None,\n+        // FIXME(compiler-errors): is this correct?\n+        None,\n     )\n }\n "}, {"sha": "bb5a2f1766f1b806a8fe1d325e123226baa33091", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -0,0 +1,6 @@\n+struct X<const N: usize = {\n+    let s: &'static str; s.len()\n+    //~^ ERROR borrow of possibly-uninitialized variable\n+}>;\n+\n+fn main() {}"}, {"sha": "6c25019b0ceb367ad8b1ee8f45c482a318d095d9", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: borrow of possibly-uninitialized variable: `s`\n+  --> $DIR/const-generic-default-wont-borrowck.rs:2:26\n+   |\n+LL |     let s: &'static str; s.len()\n+   |                          ^^^^^^^ use of possibly-uninitialized `*s`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "065944ea7eaadd222c0a0efb809dd99252771b62", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -6,7 +6,6 @@ const fn f(x: usize) -> usize {\n         //~^ ERROR mutable references\n         //~| ERROR calls in constant functions\n         //~| ERROR calls in constant functions\n-        //~| ERROR E0080\n         //~| ERROR `for` is not allowed in a `const fn`\n         sum += i;\n     }"}, {"sha": "e4b62f20a3318cfda146314a6f9e72d803dad77c", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -5,7 +5,7 @@ LL | /     for i in 0..x {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |         sum += i;\n LL | |     }\n    | |_____^\n@@ -34,19 +34,7 @@ error[E0015]: calls in constant functions are limited to constant functions, tup\n LL |     for i in 0..x {\n    |              ^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-fn-error.rs:5:14\n-   |\n-LL |     for i in 0..x {\n-   |              ^^^^\n-   |              |\n-   |              calling non-const function `<std::ops::Range<usize> as IntoIterator>::into_iter`\n-   |              inside `f` at $DIR/const-fn-error.rs:5:14\n-...\n-LL |     let a : [i32; f(X)];\n-   |                   ---- inside `main::{constant#0}` at $DIR/const-fn-error.rs:18:19\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0015, E0080, E0658.\n+Some errors have detailed explanations: E0015, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.32bit.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -19,18 +19,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/issue-76510.rs:5:1\n-   |\n-LL | const S: &'static mut str = &mut \" hello \";\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered mutable reference in a `const`\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 4) {\n-               \u257e\u2500alloc3\u2500\u2500\u257c 07 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n-           }\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -19,18 +19,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/issue-76510.rs:5:1\n-   |\n-LL | const S: &'static mut str = &mut \" hello \";\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered mutable reference in a `const`\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 16, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 07 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-           }\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "143d2fb6b9a3a1a599f36edcc222f4f1d7d34e83", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -6,7 +6,6 @@ const S: &'static mut str = &mut \" hello \";\n //~^ ERROR: mutable references are not allowed in the final value of constants\n //~| ERROR: mutation through a reference is not allowed in constants\n //~| ERROR: cannot borrow data in a `&` reference as mutable\n-//~| ERROR: it is undefined behavior to use this value\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));"}, {"sha": "b85e612992549fdd3f78eded1cb9fc4dca92b83d", "filename": "src/test/ui/consts/issue-78655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -1,4 +1,4 @@\n-const FOO: *const u32 = { //~ ERROR encountered dangling pointer in final constant\n+const FOO: *const u32 = {\n     let x;\n     &x //~ ERROR borrow of possibly-uninitialized variable: `x`\n };"}, {"sha": "734266a3453b580d2204657d1677d9635334417d", "filename": "src/test/ui/consts/issue-78655.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr?ref=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "patch": "@@ -4,15 +4,6 @@ error[E0381]: borrow of possibly-uninitialized variable: `x`\n LL |     &x\n    |     ^^ use of possibly-uninitialized `x`\n \n-error: encountered dangling pointer in final constant\n-  --> $DIR/issue-78655.rs:1:1\n-   |\n-LL | / const FOO: *const u32 = {\n-LL | |     let x;\n-LL | |     &x\n-LL | | };\n-   | |__^\n-\n error: could not evaluate constant pattern\n   --> $DIR/issue-78655.rs:7:9\n    |\n@@ -25,6 +16,6 @@ error: could not evaluate constant pattern\n LL |     let FOO = FOO;\n    |         ^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}]}