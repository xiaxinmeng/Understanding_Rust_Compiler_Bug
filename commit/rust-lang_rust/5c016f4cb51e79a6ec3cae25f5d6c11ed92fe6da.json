{"sha": "5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMDE2ZjRjYjUxZTc5YTZlYzNjYWUyNWY1ZDZjMTFlZDkyZmU2ZGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-29T18:33:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-09T18:14:41Z"}, "message": "add ability to create region vars with explicit universe", "tree": {"sha": "bca94dbe8351bee07292fccfc0d75e96b090abc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca94dbe8351bee07292fccfc0d75e96b090abc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "html_url": "https://github.com/rust-lang/rust/commit/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f600431ec2126f459e97cad22fbf2fbe792f308", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f600431ec2126f459e97cad22fbf2fbe792f308", "html_url": "https://github.com/rust-lang/rust/commit/3f600431ec2126f459e97cad22fbf2fbe792f308"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "e628a3458f9e628c0ed450caae519aea28dd4d12", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "patch": "@@ -931,14 +931,22 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Create a fresh region variable with the next available index.\n-    ///\n-    /// # Parameters\n-    ///\n-    /// - `origin`: information about why we created this variable, for use\n-    ///   during diagnostics / error-reporting.\n+    /// The variable will be created in the maximum universe created\n+    /// thus far, allowing it to name any region created thus far.\n     pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {\n+        self.next_region_var_in_universe(origin, self.universe())\n+    }\n+\n+    /// Create a fresh region variable with the next available index\n+    /// in the given universe; typically, you can use\n+    /// `next_region_var` and just use the maximal universe.\n+    pub fn next_region_var_in_universe(\n+        &self,\n+        origin: RegionVariableOrigin,\n+        universe: ty::UniverseIndex,\n+    ) -> ty::Region<'tcx> {\n         let region_var = self.borrow_region_constraints()\n-            .new_region_var(self.universe(), origin);\n+            .new_region_var(universe, origin);\n         self.tcx.mk_region(ty::ReVar(region_var))\n     }\n \n@@ -952,6 +960,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.next_region_var(RegionVariableOrigin::NLL(origin))\n     }\n \n+    /// Just a convenient wrapper of `next_region_var` for using during NLL.\n+    pub fn next_nll_region_var_in_universe(\n+        &self,\n+        origin: NLLRegionVariableOrigin,\n+        universe: ty::UniverseIndex,\n+    ) -> ty::Region<'tcx> {\n+        self.next_region_var_in_universe(RegionVariableOrigin::NLL(origin), universe)\n+    }\n+\n     pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> Kind<'tcx> {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {"}]}