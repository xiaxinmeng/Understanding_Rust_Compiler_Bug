{"sha": "263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2M2VlZGM2ZWFjMmI1YTVmMTczY2JkYmQwMmNhZGYxODYxZDk2MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T20:24:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T20:24:37Z"}, "message": "Auto merge of #1199 - RalfJung:cargo-miri, r=RalfJung\n\ncargo-miri: fix trailing indent in xargo files", "tree": {"sha": "82c8cc930285e423ff894d04736c8568fab85585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c8cc930285e423ff894d04736c8568fab85585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "html_url": "https://github.com/rust-lang/rust/commit/263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe5d977480784efbada54e78a2e3be1f513811c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe5d977480784efbada54e78a2e3be1f513811c5", "html_url": "https://github.com/rust-lang/rust/commit/fe5d977480784efbada54e78a2e3be1f513811c5"}, {"sha": "48a4e3f4d89a365dde0e0b257d7af6631d4d69aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a4e3f4d89a365dde0e0b257d7af6631d4d69aa", "html_url": "https://github.com/rust-lang/rust/commit/48a4e3f4d89a365dde0e0b257d7af6631d4d69aa"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "f8a408561b0b17203d28bad6a021fb84c0946ef7", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "patch": "@@ -353,7 +353,7 @@ default_features = false\n features = [\"panic_unwind\"]\n \n [dependencies.test]\n-        \"#,\n+\"#,\n         )\n         .unwrap();\n     // The boring bits: a dummy project for xargo.\n@@ -369,7 +369,7 @@ version = \"0.0.0\"\n \n [lib]\n path = \"lib.rs\"\n-        \"#,\n+\"#,\n         )\n         .unwrap();\n     File::create(dir.join(\"lib.rs\")).unwrap();\n@@ -563,28 +563,29 @@ fn inside_cargo_rustc() {\n     // other args for target crates - that is, crates which are ultimately\n     // going to get interpreted by Miri.\n     if target_crate {\n-        let sysroot = std::env::var(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n+        let sysroot =\n+            std::env::var(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n         args.push(\"--sysroot\".to_owned());\n         args.push(sysroot);\n         args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n     }\n \n     // Figure out the binary we need to call. If this is a runnable target crate, we want to call\n     // Miri to start interpretation; otherwise we want to call rustc to build the crate as usual.\n-    let mut command =\n-        if target_crate && is_runnable_crate() {\n-            // This is the 'target crate' - the binary or test crate that\n-            // we want to interpret under Miri. We deserialize the user-provided arguments\n-            // from the special environment variable \"MIRI_ARGS\", and feed them\n-            // to the 'miri' binary.\n-            let magic = std::env::var(\"MIRI_ARGS\").expect(\"missing MIRI_ARGS\");\n-            let mut user_args: Vec<String> = serde_json::from_str(&magic).expect(\"failed to deserialize MIRI_ARGS\");\n-            args.append(&mut user_args);\n-            // Run this in Miri.\n-            Command::new(find_miri())\n-        } else {\n-            Command::new(\"rustc\")\n-        };\n+    let mut command = if target_crate && is_runnable_crate() {\n+        // This is the 'target crate' - the binary or test crate that\n+        // we want to interpret under Miri. We deserialize the user-provided arguments\n+        // from the special environment variable \"MIRI_ARGS\", and feed them\n+        // to the 'miri' binary.\n+        let magic = std::env::var(\"MIRI_ARGS\").expect(\"missing MIRI_ARGS\");\n+        let mut user_args: Vec<String> =\n+            serde_json::from_str(&magic).expect(\"failed to deserialize MIRI_ARGS\");\n+        args.append(&mut user_args);\n+        // Run this in Miri.\n+        Command::new(find_miri())\n+    } else {\n+        Command::new(\"rustc\")\n+    };\n \n     // Run it.\n     command.args(&args);"}, {"sha": "9cc9901a9134aff3559ba6b01df73efaef55368c", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "patch": "@@ -15,11 +15,11 @@ use std::io::Write;\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n \n+use rustc::ty::TyCtxt;\n+use rustc_driver::Compilation;\n use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::itemlikevisit;\n-use rustc::ty::TyCtxt;\n-use rustc_driver::Compilation;\n use rustc_interface::{interface, Queries};\n \n use miri::MiriConfig;\n@@ -42,7 +42,9 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 impl<'tcx, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'tcx> {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.kind {\n-                            if i.attrs.iter().any(|attr| attr.check_name(rustc_span::symbol::sym::test))\n+                            if i.attrs\n+                                .iter()\n+                                .any(|attr| attr.check_name(rustc_span::symbol::sym::test))\n                             {\n                                 let config = MiriConfig {\n                                     validate: true,"}, {"sha": "e69e7f7b6f50f9b88efbd18b52814aa20152718e", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263eedc6eac2b5a5f173cbdbd02cadf1861d960f/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=263eedc6eac2b5a5f173cbdbd02cadf1861d960f", "patch": "@@ -21,8 +21,8 @@ use std::str::FromStr;\n \n use hex::FromHexError;\n \n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_driver::Compilation;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::{interface, Queries};\n \n struct MiriCompilerCalls {"}]}