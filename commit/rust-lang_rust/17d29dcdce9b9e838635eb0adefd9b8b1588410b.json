{"sha": "17d29dcdce9b9e838635eb0adefd9b8b1588410b", "node_id": "C_kwDOAAsO6NoAKDE3ZDI5ZGNkY2U5YjllODM4NjM1ZWIwYWRlZmQ5YjhiMTU4ODQxMGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-21T20:47:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-21T20:47:48Z"}, "message": "Auto merge of #92363 - the8472:less-compiletest-normalization, r=Mark-Simulacrum\n\nOverride rustc version in ui and mir-opt tests to get stable hashes\n\nBuilding a dozen separate regexps for each test in compiletest consumes significant amounts of CPU cycles.\n\nUI test timings on my machine:\n\nOLD: 39.63s\nNEW: 30.27s", "tree": {"sha": "d116ec86aab2bd5d22559bdd8b073216b4849347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d116ec86aab2bd5d22559bdd8b073216b4849347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17d29dcdce9b9e838635eb0adefd9b8b1588410b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17d29dcdce9b9e838635eb0adefd9b8b1588410b", "html_url": "https://github.com/rust-lang/rust/commit/17d29dcdce9b9e838635eb0adefd9b8b1588410b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17d29dcdce9b9e838635eb0adefd9b8b1588410b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbaeec14f90b59a91a6b0f17fc046c66fa811892", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbaeec14f90b59a91a6b0f17fc046c66fa811892", "html_url": "https://github.com/rust-lang/rust/commit/cbaeec14f90b59a91a6b0f17fc046c66fa811892"}, {"sha": "7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "html_url": "https://github.com/rust-lang/rust/commit/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06"}], "stats": {"total": 218, "additions": 94, "deletions": 124}, "files": [{"sha": "176c06114e01df5de5a0401cec8c631604fc3d6b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1540,6 +1540,9 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             }\n         }\n         cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        // Override the rustc version used in symbol hashes to reduce the amount of normalization\n+        // needed when diffing test output.\n+        cmd.env(\"RUSTC_FORCE_RUSTC_VERSION\", \"compiletest\");\n         cmd.env(\"DOC_RUST_LANG_ORG_CHANNEL\", builder.doc_rust_lang_org_channel());\n         builder.add_rust_test_threads(&mut cmd);\n "}, {"sha": "b480b257825642f1ff0bb11829638e3f8af24efc", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -30,7 +30,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[HASH]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[e01c]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35"}, {"sha": "ed48f5dc9dcbca44b6b907c5a98053db1033983d", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -32,7 +32,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[HASH]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[e01c]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46"}, {"sha": "553011f1aaab852ec363f570be3ce2c21f764825", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[fbcf]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "553011f1aaab852ec363f570be3ce2c21f764825", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[fbcf]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "44273b763be3e947e95de0565b6735c7cbc7bfaa", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -22,7 +22,7 @@\n                                            // + val: Unevaluated(FOO, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[HASH]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[809a]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "2864e01d9dc535e87af62bb89189c392868ec982", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[d561]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "5a678616f63efc30c9490b9cb44083ee421dbeda", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[d561]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "53f9daa09da74f358c0d2ab502242ef4d9448a8c", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[d1f7]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "d5235a1d025283187fca34f4abcfbd1547e68741", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[d1f7]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "339c3d13b8d67e2340102731f12d88df20ad4a8b", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -25,7 +25,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[7261]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "339c3d13b8d67e2340102731f12d88df20ad4a8b", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -25,7 +25,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[7261]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "5e3ec0889e9d4e35b3499d546b2f268106d09f03", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -38,7 +38,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[86d7]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -52,7 +52,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[86d7]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "016e0cb590173ec18b9e7e0187e6db56f79c5199", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "016e0cb590173ec18b9e7e0187e6db56f79c5199", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "59daeb1e997ba7c094565deaf28606082f1a426b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "59daeb1e997ba7c094565deaf28606082f1a426b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "644a5593a9db1e3f0fa0bb0f069ae58d49d5b245", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -50,7 +50,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:75:42: 75:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[49eb]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n@@ -74,7 +74,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:76:42: 76:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n+                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[49eb]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n@@ -98,7 +98,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:77:42: 77:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[49eb]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48"}, {"sha": "b3a9365396c9a1efdaa10f8bd568e9f244f87bee", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -57,7 +57,7 @@ fn full_tested_match() -> () {\n                                          // + val: Unevaluated(full_tested_match, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[HASH]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[5411]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "54d836ba609c8cedac5e09e8d2bb608a9afde243", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -127,7 +127,7 @@ fn array_casts() -> () {\n                                          // + val: Unevaluated(array_casts, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[HASH]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[4622]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "29a72feed7d309088839f3bdb781dbf60415af23", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -113,7 +113,7 @@ fn main() -> () {\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:40:31: 43:6\n         _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:40:31: 43:6\n                                          // closure\n-                                         // + def_id: DefId(0:14 ~ retag[HASH]::main::{closure#0})\n+                                         // + def_id: DefId(0:14 ~ retag[4622]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'r> extern \"rust-call\" fn((&'r i32,)) -> &'r i32,\n@@ -153,7 +153,7 @@ fn main() -> () {\n                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[HASH]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[4622]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "a49e50a3eaa605300c10dd595b09cece98da9e4a", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:12:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[HASH]::A))\n+   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[78b0]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:19:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[HASH]::A))\n+   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[78b0]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "2f7faf520d96923a40d9e57bc41c830b88c2b078", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[HASH]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -29,10 +29,10 @@ LL |     require_send(send_gen);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n-   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[HASH]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n-   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[HASH]::make_non_send_generator2::{opaque#0}), [])`\n-   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[HASH]::make_non_send_generator2::{opaque#0}), []), ()}`\n-   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[HASH]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), []), ()}`\n+   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), []), ()}]`\n note: required by a bound in `require_send`\n   --> $DIR/generator-print-verbose-1.rs:26:25\n    |"}, {"sha": "3e6fe789a8b55a71856e2f1606b5230c0e010161", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,11 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |                  --     ^^^^^^^^^^^^\n    |                  |\n-   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n+   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) {\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error"}, {"sha": "1a7eb82c95b3d85f9373439a5944b52d77afba7e", "filename": "src/test/ui/specialization/min_specialization/repeated_projection_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[HASH]::Id::This) }, Ty((I,))), [])`\n+error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[54ea]::Id::This) }, Ty((I,))), [])`\n   --> $DIR/repeated_projection_type.rs:19:1\n    |\n LL | / impl<I, V: Id<This = (I,)>> X for V {"}, {"sha": "41f8ecf4ba7504e4d700fc217a31c312d137fe0e", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h<SYMBOL_HASH>)\n+error: symbol-name(_ZN5basic4main17h13492e1c4157543fE)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h<SYMBOL_HASH>)\n+error: demangling(basic::main::h13492e1c4157543f)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "1f02781364eba6fcac639dc71d0e9262cd3c13f8", "filename": "src/test/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvCsCRATE_HASH_5basic4main)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic[HASH]::main)\n+error: demangling(basic[b751b4a00e2291d9]::main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "d6ee388ddf8933d2c9a2a963ab596ee68c59fe9f", "filename": "src/test/ui/symbol-names/foreign-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RMCsCRATE_HASH_13foreign_typesINtB<REF>_5CheckNvB<REF>_11For\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<foreign_types[HASH]::Check<foreign_types[HASH]::ForeignType>>)\n+error: demangling(<foreign_types[49eeeb51f120b431]::Check<foreign_types[49eeeb51f120b431]::ForeignType>>)\n   --> $DIR/foreign-types.rs:13:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "b6012e41594b522311f57cb2bc4f071ff71be7c4", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17h<SYMBOL_HASH>)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::foo::Foo::bar::h<SYMBOL_HASH>)\n+error: demangling(impl1::foo::Foo::bar::<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -22,13 +22,13 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h<SYMBOL_HASH>)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h<SYMBOL_HASH>)\n+error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h<SYMBOL_HASH>)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::h<SYMBOL_HASH>)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "48f7473b6a0d165b5023801d5c9f0e6c09bc4da3", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13fooNtB<REF>_3Foo3bar)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[HASH]::foo::Foo>::bar)\n+error: demangling(<impl1[2c09c4f1c7c8e90c]::foo::Foo>::bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -28,7 +28,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13barNtNtB<REF>_3foo3Foo3baz)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[HASH]::foo::Foo>::baz)\n+error: demangling(<impl1[2c09c4f1c7c8e90c]::foo::Foo>::baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -52,7 +52,7 @@ error: symbol-name(_RNvXNCNvCsCRATE_HASH_5impl14mains_0ARDNtB<REF>_3Foop5AssocFG\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[HASH]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[HASH]::AutoTrait; 3usize] as impl1[HASH]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[2c09c4f1c7c8e90c]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[2c09c4f1c7c8e90c]::AutoTrait; 3usize] as impl1[2c09c4f1c7c8e90c]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "d26e71842f9b50b15b7e76bd985ad9c66084dab2", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h<SYMBOL_HASH>)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hd250581ce0d79d13E)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h<SYMBOL_HASH>)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hd250581ce0d79d13)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "408c957c6a144d3ba1eb2d2c8689227bc7edccfb", "filename": "src/test/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_11issue_609253fooINtB<REF>_3FooNtNtB<REF>\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_60925[HASH]::foo::Foo<issue_60925[HASH]::llvm::Foo>>::foo)\n+error: demangling(<issue_60925[775bc577f14ef671]::foo::Foo<issue_60925[775bc577f14ef671]::llvm::Foo>>::foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "aadc0cf43a2120ff547c3731ab635968f92ba6e9", "filename": "src/test/ui/symbol-names/issue-75326.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17h<SYMBOL_HASH>)\n+error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17SYMBOL_HASH)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::h<SYMBOL_HASH>)\n+error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::SYMBOL_HASH)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "3d7803a0c3b9f57608d804e6d76b481235b87cbc", "filename": "src/test/ui/symbol-names/issue-75326.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXINICsCRATE_HASH_11issue_75326s_0pppEINtB<REF>_3FooppENtB\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326[HASH]::Foo<_, _> as issue_75326[HASH]::Iterator2>::next)\n+error: demangling(<issue_75326[e8e253d78520f2a2]::Foo<_, _> as issue_75326[e8e253d78520f2a2]::Iterator2>::next)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "47192ce5b8389b5eb6b6e85f67434b8efba4dda4", "filename": "src/test/ui/symbol-names/trait-objects.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXCsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4cor\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[HASH]::Bar>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[7260a56bea9f357b]::Bar>::method)\n   --> $DIR/trait-objects.rs:15:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -22,7 +22,7 @@ error: symbol-name(_RNvXs_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4c\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[HASH]::Foo>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[7260a56bea9f357b]::Foo>::method)\n   --> $DIR/trait-objects.rs:27:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -40,7 +40,7 @@ error: symbol-name(_RNvXs0_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[HASH]::Baz>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[7260a56bea9f357b]::Baz>::method)\n   --> $DIR/trait-objects.rs:39:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "3c84be8e8f8d889a09c03d77f51f61f43de9d242", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -1,4 +1,4 @@\n-DefId(0:3 ~ thir_tree[HASH]::main):\n+DefId(0:3 ~ thir_tree[8f1d]::main):\n Thir {\n     arms: [],\n     exprs: [\n@@ -30,7 +30,7 @@ Thir {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n                     HirId {\n-                        owner: DefId(0:3 ~ thir_tree[HASH]::main),\n+                        owner: DefId(0:3 ~ thir_tree[8f1d]::main),\n                         local_id: 2,\n                     },\n                 ),"}, {"sha": "00221b07f7464182cedede3312fc7b41b0f55793", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 32, "deletions": 65, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d29dcdce9b9e838635eb0adefd9b8b1588410b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=17d29dcdce9b9e838635eb0adefd9b8b1588410b", "patch": "@@ -3498,10 +3498,12 @@ impl<'test> TestCx<'test> {\n         // with placeholders as we do not want tests needing updated when compiler source code\n         // changes.\n         // eg. $SRC_DIR/libcore/mem.rs:323:14 becomes $SRC_DIR/libcore/mem.rs:LL:COL\n-        normalized = Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\")\n-            .unwrap()\n-            .replace_all(&normalized, \"SRC_DIR$1:LL:COL\")\n-            .into_owned();\n+        lazy_static! {\n+            static ref SRC_DIR_RE: Regex =\n+                Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\").unwrap();\n+        }\n+\n+        normalized = SRC_DIR_RE.replace_all(&normalized, \"SRC_DIR$1:LL:COL\").into_owned();\n \n         normalized = Self::normalize_platform_differences(&normalized);\n         normalized = normalized.replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n@@ -3510,73 +3512,38 @@ impl<'test> TestCx<'test> {\n         // since they duplicate actual errors and make the output hard to read.\n         // This mirrors the regex in src/tools/tidy/src/style.rs, please update\n         // both if either are changed.\n-        normalized =\n-            Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap().replace_all(&normalized, \"\").into_owned();\n+        lazy_static! {\n+            static ref ANNOTATION_RE: Regex = Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap();\n+        }\n+\n+        normalized = ANNOTATION_RE.replace_all(&normalized, \"\").into_owned();\n+\n+        // This code normalizes various hashes in v0 symbol mangling that is\n+        // emitted in the ui and mir-opt tests.\n+        lazy_static! {\n+            static ref V0_CRATE_HASH_PREFIX_RE: Regex =\n+                Regex::new(r\"_R.*?Cs[0-9a-zA-Z]+_\").unwrap();\n+            static ref V0_CRATE_HASH_RE: Regex = Regex::new(r\"Cs[0-9a-zA-Z]+_\").unwrap();\n+        }\n \n-        // This code normalizes various hashes in both\n-        // v0 and legacy symbol names that are emitted in\n-        // the ui and mir-opt tests.\n-        //\n-        // Some tests still require normalization with headers.\n-        const DEFID_HASH_REGEX: &str = r\"\\[[0-9a-z]{4}\\]\";\n-        const DEFID_HASH_PLACEHOLDER: &str = r\"[HASH]\";\n-        const V0_DEMANGLING_HASH_REGEX: &str = r\"\\[[0-9a-z]+\\]\";\n-        const V0_DEMANGLING_HASH_PLACEHOLDER: &str = r\"[HASH]\";\n-        const V0_CRATE_HASH_PREFIX_REGEX: &str = r\"_R.*?Cs[0-9a-zA-Z]+_\";\n-        const V0_CRATE_HASH_REGEX: &str = r\"Cs[0-9a-zA-Z]+_\";\n         const V0_CRATE_HASH_PLACEHOLDER: &str = r\"CsCRATE_HASH_\";\n-        const V0_BACK_REF_PREFIX_REGEX: &str = r\"\\(_R.*?B[0-9a-zA-Z]_\";\n-        const V0_BACK_REF_REGEX: &str = r\"B[0-9a-zA-Z]_\";\n-        const V0_BACK_REF_PLACEHOLDER: &str = r\"B<REF>_\";\n-        const LEGACY_SYMBOL_HASH_REGEX: &str = r\"h[\\w]{16}E?\\)\";\n-        const LEGACY_SYMBOL_HASH_PLACEHOLDER: &str = r\"h<SYMBOL_HASH>)\";\n-        let test_name = self\n-            .output_testname_unique()\n-            .into_os_string()\n-            .into_string()\n-            .unwrap()\n-            .split('.')\n-            .next()\n-            .unwrap()\n-            .replace(\"-\", \"_\");\n-        // Normalize `DefId` hashes\n-        let defid_regex = format!(\"{}{}\", test_name, DEFID_HASH_REGEX);\n-        let defid_placeholder = format!(\"{}{}\", test_name, DEFID_HASH_PLACEHOLDER);\n-        normalized = Regex::new(&defid_regex)\n-            .unwrap()\n-            .replace_all(&normalized, defid_placeholder)\n-            .into_owned();\n-        // Normalize v0 demangling hashes\n-        let demangling_regex = format!(\"{}{}\", test_name, V0_DEMANGLING_HASH_REGEX);\n-        let demangling_placeholder = format!(\"{}{}\", test_name, V0_DEMANGLING_HASH_PLACEHOLDER);\n-        normalized = Regex::new(&demangling_regex)\n-            .unwrap()\n-            .replace_all(&normalized, demangling_placeholder)\n-            .into_owned();\n-        // Normalize v0 crate hashes (see RFC 2603)\n-        let symbol_mangle_prefix_re = Regex::new(V0_CRATE_HASH_PREFIX_REGEX).unwrap();\n-        if symbol_mangle_prefix_re.is_match(&normalized) {\n+        if V0_CRATE_HASH_PREFIX_RE.is_match(&normalized) {\n             // Normalize crate hash\n-            normalized = Regex::new(V0_CRATE_HASH_REGEX)\n-                .unwrap()\n-                .replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER)\n-                .into_owned();\n+            normalized =\n+                V0_CRATE_HASH_RE.replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER).into_owned();\n+        }\n+\n+        lazy_static! {\n+            static ref V0_BACK_REF_PREFIX_RE: Regex = Regex::new(r\"\\(_R.*?B[0-9a-zA-Z]_\").unwrap();\n+            static ref V0_BACK_REF_RE: Regex = Regex::new(r\"B[0-9a-zA-Z]_\").unwrap();\n         }\n-        let back_ref_prefix_re = Regex::new(V0_BACK_REF_PREFIX_REGEX).unwrap();\n-        if back_ref_prefix_re.is_match(&normalized) {\n+\n+        const V0_BACK_REF_PLACEHOLDER: &str = r\"B<REF>_\";\n+        if V0_BACK_REF_PREFIX_RE.is_match(&normalized) {\n             // Normalize back references (see RFC 2603)\n-            let back_ref_regex = format!(\"{}\", V0_BACK_REF_REGEX);\n-            let back_ref_placeholder = format!(\"{}\", V0_BACK_REF_PLACEHOLDER);\n-            normalized = Regex::new(&back_ref_regex)\n-                .unwrap()\n-                .replace_all(&normalized, back_ref_placeholder)\n-                .into_owned();\n+            normalized =\n+                V0_BACK_REF_RE.replace_all(&normalized, V0_BACK_REF_PLACEHOLDER).into_owned();\n         }\n-        // Normalize legacy mangled symbols\n-        normalized = Regex::new(LEGACY_SYMBOL_HASH_REGEX)\n-            .unwrap()\n-            .replace_all(&normalized, LEGACY_SYMBOL_HASH_PLACEHOLDER)\n-            .into_owned();\n \n         // Custom normalization rules\n         for rule in custom_rules {"}]}