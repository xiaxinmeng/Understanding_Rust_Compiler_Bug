{"sha": "259bf5f47a7247c3ecf7100845953859d02562b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OWJmNWY0N2E3MjQ3YzNlY2Y3MTAwODQ1OTUzODU5ZDAyNTYyYjQ=", "commit": {"author": {"name": "Maarten de Vries", "email": "maarten@de-vri.es", "date": "2021-06-16T10:37:00Z"}, "committer": {"name": "Maarten de Vries", "email": "maarten@de-vri.es", "date": "2021-06-17T13:56:47Z"}, "message": "Rely on libc for correct integer types in os/unix/net/ancillary.rs.", "tree": {"sha": "37148ac0c7bd5e2f244ee76fc19fd8dbfe06997f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37148ac0c7bd5e2f244ee76fc19fd8dbfe06997f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259bf5f47a7247c3ecf7100845953859d02562b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259bf5f47a7247c3ecf7100845953859d02562b4", "html_url": "https://github.com/rust-lang/rust/commit/259bf5f47a7247c3ecf7100845953859d02562b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259bf5f47a7247c3ecf7100845953859d02562b4/comments", "author": {"login": "de-vri-es", "id": 786213, "node_id": "MDQ6VXNlcjc4NjIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/786213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/de-vri-es", "html_url": "https://github.com/de-vri-es", "followers_url": "https://api.github.com/users/de-vri-es/followers", "following_url": "https://api.github.com/users/de-vri-es/following{/other_user}", "gists_url": "https://api.github.com/users/de-vri-es/gists{/gist_id}", "starred_url": "https://api.github.com/users/de-vri-es/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/de-vri-es/subscriptions", "organizations_url": "https://api.github.com/users/de-vri-es/orgs", "repos_url": "https://api.github.com/users/de-vri-es/repos", "events_url": "https://api.github.com/users/de-vri-es/events{/privacy}", "received_events_url": "https://api.github.com/users/de-vri-es/received_events", "type": "User", "site_admin": false}, "committer": {"login": "de-vri-es", "id": 786213, "node_id": "MDQ6VXNlcjc4NjIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/786213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/de-vri-es", "html_url": "https://github.com/de-vri-es", "followers_url": "https://api.github.com/users/de-vri-es/followers", "following_url": "https://api.github.com/users/de-vri-es/following{/other_user}", "gists_url": "https://api.github.com/users/de-vri-es/gists{/gist_id}", "starred_url": "https://api.github.com/users/de-vri-es/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/de-vri-es/subscriptions", "organizations_url": "https://api.github.com/users/de-vri-es/orgs", "repos_url": "https://api.github.com/users/de-vri-es/repos", "events_url": "https://api.github.com/users/de-vri-es/events{/privacy}", "received_events_url": "https://api.github.com/users/de-vri-es/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d192c80d2284ba6b5146bb3da586354c3762c72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d192c80d2284ba6b5146bb3da586354c3762c72b", "html_url": "https://github.com/rust-lang/rust/commit/d192c80d2284ba6b5146bb3da586354c3762c72b"}], "stats": {"total": 110, "additions": 10, "deletions": 100}, "files": [{"sha": "cd429d1426937e60dff18ce8ad96af2e5ac27fed", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 10, "deletions": 100, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/259bf5f47a7247c3ecf7100845953859d02562b4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259bf5f47a7247c3ecf7100845953859d02562b4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=259bf5f47a7247c3ecf7100845953859d02562b4", "patch": "@@ -32,23 +32,8 @@ pub(super) fn recv_vectored_with_ancillary_from(\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = size_of::<libc::sockaddr_un>() as libc::socklen_t;\n         msg.msg_iov = bufs.as_mut_ptr().cast();\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                msg.msg_iovlen = bufs.len() as libc::size_t;\n-                msg.msg_controllen = ancillary.buffer.len() as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                msg.msg_iovlen = bufs.len() as libc::c_int;\n-                msg.msg_controllen = ancillary.buffer.len() as libc::socklen_t;\n-            }\n-        }\n+        msg.msg_iovlen = bufs.len() as _;\n+        msg.msg_controllen = ancillary.buffer.len() as _;\n         // macos requires that the control pointer is null when the len is 0.\n         if msg.msg_controllen > 0 {\n             msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n@@ -80,23 +65,8 @@ pub(super) fn send_vectored_with_ancillary_to(\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = msg_namelen;\n         msg.msg_iov = bufs.as_ptr() as *mut _;\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                msg.msg_iovlen = bufs.len() as libc::size_t;\n-                msg.msg_controllen = ancillary.length as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                msg.msg_iovlen = bufs.len() as libc::c_int;\n-                msg.msg_controllen = ancillary.length as libc::socklen_t;\n-            }\n-        }\n+        msg.msg_iovlen = bufs.len() as _;\n+        msg.msg_controllen = ancillary.length as _;\n         // macos requires that the control pointer is null when the len is 0.\n         if msg.msg_controllen > 0 {\n             msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n@@ -144,21 +114,7 @@ fn add_to_ancillary_data<T>(\n \n         let mut msg: libc::msghdr = zeroed();\n         msg.msg_control = buffer.as_mut_ptr().cast();\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                msg.msg_controllen = *length as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                msg.msg_controllen = *length as libc::socklen_t;\n-            }\n-        }\n+        msg.msg_controllen = *length as _;\n \n         let mut cmsg = libc::CMSG_FIRSTHDR(&msg);\n         let mut previous_cmsg = cmsg;\n@@ -180,21 +136,7 @@ fn add_to_ancillary_data<T>(\n \n         (*previous_cmsg).cmsg_level = cmsg_level;\n         (*previous_cmsg).cmsg_type = cmsg_type;\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as libc::socklen_t;\n-            }\n-        }\n+        (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as _;\n \n         let data = libc::CMSG_DATA(previous_cmsg).cast();\n \n@@ -364,28 +306,10 @@ impl<'a> AncillaryData<'a> {\n \n     fn try_from_cmsghdr(cmsg: &'a libc::cmsghdr) -> Result<Self, AncillaryError> {\n         unsafe {\n-            cfg_if::cfg_if! {\n-                if #[cfg(any(\n-                        target_os = \"android\",\n-                        all(target_os = \"linux\", target_env = \"gnu\"),\n-                        all(target_os = \"linux\", target_env = \"uclibc\"),\n-                   ))] {\n-                    let cmsg_len_zero = libc::CMSG_LEN(0) as libc::size_t;\n-                } else if #[cfg(any(\n-                              target_os = \"dragonfly\",\n-                              target_os = \"emscripten\",\n-                              target_os = \"freebsd\",\n-                              all(target_os = \"linux\", target_env = \"musl\",),\n-                              target_os = \"macos\",\n-                              target_os = \"netbsd\",\n-                              target_os = \"openbsd\",\n-                          ))] {\n-                    let cmsg_len_zero = libc::CMSG_LEN(0) as libc::socklen_t;\n-                }\n-            }\n-            let data_len = (*cmsg).cmsg_len - cmsg_len_zero;\n+            let cmsg_len_zero = libc::CMSG_LEN(0) as usize;\n+            let data_len = (*cmsg).cmsg_len as usize - cmsg_len_zero;\n             let data = libc::CMSG_DATA(cmsg).cast();\n-            let data = from_raw_parts(data, data_len as usize);\n+            let data = from_raw_parts(data, data_len);\n \n             match (*cmsg).cmsg_level {\n                 libc::SOL_SOCKET => match (*cmsg).cmsg_type {\n@@ -419,21 +343,7 @@ impl<'a> Iterator for Messages<'a> {\n         unsafe {\n             let mut msg: libc::msghdr = zeroed();\n             msg.msg_control = self.buffer.as_ptr() as *mut _;\n-            cfg_if::cfg_if! {\n-                if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                    msg.msg_controllen = self.buffer.len() as libc::size_t;\n-                } else if #[cfg(any(\n-                              target_os = \"dragonfly\",\n-                              target_os = \"emscripten\",\n-                              target_os = \"freebsd\",\n-                              all(target_os = \"linux\", target_env = \"musl\",),\n-                              target_os = \"macos\",\n-                              target_os = \"netbsd\",\n-                              target_os = \"openbsd\",\n-                          ))] {\n-                    msg.msg_controllen = self.buffer.len() as libc::socklen_t;\n-                }\n-            }\n+            msg.msg_controllen = self.buffer.len() as _;\n \n             let cmsg = if let Some(current) = self.current {\n                 libc::CMSG_NXTHDR(&msg, current)"}]}