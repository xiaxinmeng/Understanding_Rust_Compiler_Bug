{"sha": "0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmIxYTdlM2M1NGZmM2E1ZWY2NzQ0MDczMjgxYjAwMzY4NzQ5Yzg=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-07T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-09T06:54:02Z"}, "message": "Link sanitizer runtimes instead of injecting crate dependencies", "tree": {"sha": "2296d503d609176569a0366285aeac95012bd694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2296d503d609176569a0366285aeac95012bd694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "html_url": "https://github.com/rust-lang/rust/commit/0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d08125705598aa12ceb092f34c332fbba12c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d08125705598aa12ceb092f34c332fbba12c65", "html_url": "https://github.com/rust-lang/rust/commit/36d08125705598aa12ceb092f34c332fbba12c65"}], "stats": {"total": 249, "additions": 74, "deletions": 175}, "files": [{"sha": "c91491fa54864ca3aeb14ab003615dcc70f17981", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -531,6 +531,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     {\n         let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, target_cpu);\n+        link_sanitizer_runtime(sess, crate_type, &mut *linker);\n         link_args::<B>(\n             &mut *linker,\n             flavor,\n@@ -735,6 +736,47 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n+fn link_sanitizer_runtime(sess: &Session, crate_type: config::CrateType, linker: &mut dyn Linker) {\n+    let sanitizer = match &sess.opts.debugging_opts.sanitizer {\n+        Some(s) => s,\n+        None => return,\n+    };\n+\n+    if crate_type != config::CrateType::Executable {\n+        return;\n+    }\n+\n+    let name = match sanitizer {\n+        Sanitizer::Address => \"asan\",\n+        Sanitizer::Leak => \"lsan\",\n+        Sanitizer::Memory => \"msan\",\n+        Sanitizer::Thread => \"tsan\",\n+    };\n+\n+    let default_sysroot = filesearch::get_or_default_sysroot();\n+    let default_tlib =\n+        filesearch::make_target_lib_path(&default_sysroot, sess.opts.target_triple.triple());\n+\n+    match sess.opts.target_triple.triple() {\n+        \"x86_64-apple-darwin\" => {\n+            // On Apple platforms, the sanitizer is always built as a dylib, and\n+            // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n+            // rpath to the library as well (the rpath should be absolute, see\n+            // PR #41352 for details).\n+            let libname = format!(\"rustc_rt.{}\", name);\n+            let rpath = default_tlib.to_str().expect(\"non-utf8 component in path\");\n+            linker.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n+            linker.link_dylib(Symbol::intern(&libname));\n+        }\n+        \"x86_64-unknown-linux-gnu\" => {\n+            let filename = format!(\"librustc_rt.{}.a\", name);\n+            let path = default_tlib.join(&filename);\n+            linker.link_whole_rlib(&path);\n+        }\n+        _ => {}\n+    }\n+}\n+\n /// Returns a boolean indicating whether the specified crate should be ignored\n /// during LTO.\n ///\n@@ -1415,12 +1457,6 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             _ if codegen_results.crate_info.profiler_runtime == Some(cnum) => {\n                 add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n             }\n-            _ if codegen_results.crate_info.sanitizer_runtime == Some(cnum)\n-                && crate_type == config::CrateType::Executable =>\n-            {\n-                // Link the sanitizer runtimes only if we are actually producing an executable\n-                link_sanitizer_runtime::<B>(cmd, sess, codegen_results, tmpdir, cnum);\n-            }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n             _ if codegen_results.crate_info.compiler_builtins == Some(cnum) => {\n@@ -1457,47 +1493,6 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n-    // We must link the sanitizer runtime using -Wl,--whole-archive but since\n-    // it's packed in a .rlib, it contains stuff that are not objects that will\n-    // make the linker error. So we must remove those bits from the .rlib before\n-    // linking it.\n-    fn link_sanitizer_runtime<'a, B: ArchiveBuilder<'a>>(\n-        cmd: &mut dyn Linker,\n-        sess: &'a Session,\n-        codegen_results: &CodegenResults,\n-        tmpdir: &Path,\n-        cnum: CrateNum,\n-    ) {\n-        let src = &codegen_results.crate_info.used_crate_source[&cnum];\n-        let cratepath = &src.rlib.as_ref().unwrap().0;\n-\n-        if sess.target.target.options.is_like_osx {\n-            // On Apple platforms, the sanitizer is always built as a dylib, and\n-            // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n-            // rpath to the library as well (the rpath should be absolute, see\n-            // PR #41352 for details).\n-            //\n-            // FIXME: Remove this logic into librustc_*san once Cargo supports it\n-            let rpath = cratepath.parent().unwrap();\n-            let rpath = rpath.to_str().expect(\"non-utf8 component in path\");\n-            cmd.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n-        }\n-\n-        let dst = tmpdir.join(cratepath.file_name().unwrap());\n-        let mut archive = <B as ArchiveBuilder>::new(sess, &dst, Some(cratepath));\n-        archive.update_symbols();\n-\n-        for f in archive.src_files() {\n-            if f.ends_with(RLIB_BYTECODE_EXTENSION) || f == METADATA_FILENAME {\n-                archive.remove_file(&f);\n-            }\n-        }\n-\n-        archive.build();\n-\n-        cmd.link_whole_rlib(&dst);\n-    }\n-\n     // Adds the static \"rlib\" versions of all crates to the command line.\n     // There's a bit of magic which happens here specifically related to LTO and\n     // dynamic libraries. Specifically:"}, {"sha": "7ccc367be256054531d28bf4a4070a95f9557ca4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 104, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -6,7 +6,7 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n use rustc::hir::map::Definitions;\n use rustc::middle::cstore::DepKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n-use rustc::session::config::{self, Sanitizer};\n+use rustc::session::config;\n use rustc::session::search_paths::PathKind;\n use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n@@ -674,108 +674,6 @@ impl<'a> CrateLoader<'a> {\n         self.inject_dependency_if(cnum, \"a panic runtime\", &|data| data.needs_panic_runtime());\n     }\n \n-    fn inject_sanitizer_runtime(&mut self) {\n-        if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n-            // Sanitizers can only be used on some tested platforms with\n-            // executables linked to `std`\n-            const ASAN_SUPPORTED_TARGETS: &[&str] =\n-                &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-            const TSAN_SUPPORTED_TARGETS: &[&str] =\n-                &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-            const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-            const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-\n-            let supported_targets = match *sanitizer {\n-                Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n-                Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n-                Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n-                Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n-            };\n-            if !supported_targets.contains(&&*self.sess.opts.target_triple.triple()) {\n-                self.sess.err(&format!(\n-                    \"{:?}Sanitizer only works with the `{}` target\",\n-                    sanitizer,\n-                    supported_targets.join(\"` or `\")\n-                ));\n-                return;\n-            }\n-\n-            // firstyear 2017 - during testing I was unable to access an OSX machine\n-            // to make this work on different crate types. As a result, today I have\n-            // only been able to test and support linux as a target.\n-            if self.sess.opts.target_triple.triple() == \"x86_64-unknown-linux-gnu\" {\n-                if !self.sess.crate_types.borrow().iter().all(|ct| {\n-                    match *ct {\n-                        // Link the runtime\n-                        config::CrateType::Executable => true,\n-                        // This crate will be compiled with the required\n-                        // instrumentation pass\n-                        config::CrateType::Staticlib\n-                        | config::CrateType::Rlib\n-                        | config::CrateType::Dylib\n-                        | config::CrateType::Cdylib => false,\n-                        _ => {\n-                            self.sess.err(&format!(\n-                                \"Only executables, staticlibs, \\\n-                                cdylibs, dylibs and rlibs can be compiled with \\\n-                                `-Z sanitizer`\"\n-                            ));\n-                            false\n-                        }\n-                    }\n-                }) {\n-                    return;\n-                }\n-            } else {\n-                if !self.sess.crate_types.borrow().iter().all(|ct| {\n-                    match *ct {\n-                        // Link the runtime\n-                        config::CrateType::Executable => true,\n-                        // This crate will be compiled with the required\n-                        // instrumentation pass\n-                        config::CrateType::Rlib => false,\n-                        _ => {\n-                            self.sess.err(&format!(\n-                                \"Only executables and rlibs can be \\\n-                                                    compiled with `-Z sanitizer`\"\n-                            ));\n-                            false\n-                        }\n-                    }\n-                }) {\n-                    return;\n-                }\n-            }\n-\n-            let mut uses_std = false;\n-            self.cstore.iter_crate_data(|_, data| {\n-                if data.name() == sym::std {\n-                    uses_std = true;\n-                }\n-            });\n-\n-            if uses_std {\n-                let name = Symbol::intern(match sanitizer {\n-                    Sanitizer::Address => \"rustc_asan\",\n-                    Sanitizer::Leak => \"rustc_lsan\",\n-                    Sanitizer::Memory => \"rustc_msan\",\n-                    Sanitizer::Thread => \"rustc_tsan\",\n-                });\n-                info!(\"loading sanitizer: {}\", name);\n-\n-                let cnum = self.resolve_crate(name, DUMMY_SP, DepKind::Explicit, None);\n-                let data = self.cstore.get_crate_data(cnum);\n-\n-                // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n-                if !data.is_sanitizer_runtime() {\n-                    self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\", name));\n-                }\n-            } else {\n-                self.sess.err(\"Must link std to be compiled with `-Z sanitizer`\");\n-            }\n-        }\n-    }\n-\n     fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile || self.sess.opts.cg.profile_generate.enabled() {\n             info!(\"loading profiler\");\n@@ -927,7 +825,6 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n-        self.inject_sanitizer_runtime();\n         self.inject_profiler_runtime();\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);"}, {"sha": "d979247b46d3af81bb97d307a6575d966f0c3d97", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -1124,6 +1124,32 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n                   See https://github.com/rust-lang/rust/issues/61002 for details.\",\n         );\n     }\n+\n+    // Sanitizers can only be used on some tested platforms.\n+    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n+        const ASAN_SUPPORTED_TARGETS: &[&str] =\n+            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const TSAN_SUPPORTED_TARGETS: &[&str] =\n+            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const LSAN_SUPPORTED_TARGETS: &[&str] =\n+            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+\n+        let supported_targets = match *sanitizer {\n+            Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n+            Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n+            Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n+            Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n+        };\n+\n+        if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {\n+            sess.err(&format!(\n+                \"{:?}Sanitizer only works with the `{}` target\",\n+                sanitizer,\n+                supported_targets.join(\"` or `\")\n+            ));\n+        }\n+    }\n }\n \n /// Hash value constructed out of all the `-C metadata` arguments passed to the"}, {"sha": "7f5e9049b2f77e3acd72cb1bef34b33ef39e377e", "filename": "src/test/run-make-fulldeps/sanitizer-address/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -23,7 +23,7 @@ endif\n endif\n \n all:\n-\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) librustc_asan\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) rustc_rt.asan\n \t# Verify that stack buffer overflow is detected:\n \t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n \t# Verify that variable name is included in address sanitizer report:"}, {"sha": "9581ac565ea0221441fd88ce1feb1200c8d9a94b", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/Makefile", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36d08125705598aa12ceb092f34c332fbba12c65/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/36d08125705598aa12ceb092f34c332fbba12c65/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile?ref=36d08125705598aa12ceb092f34c332fbba12c65", "patch": "@@ -1,16 +0,0 @@\n-# needs-sanitizer-support\n-\n--include ../tools.mk\n-\n-# NOTE the address sanitizer only supports x86_64 linux and macOS\n-\n-ifeq ($(TARGET),x86_64-apple-darwin)\n-EXTRA_RUSTFLAG=-C rpath\n-else\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-EXTRA_RUSTFLAG=\n-endif\n-endif\n-\n-all:\n-\t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | $(CGREP) '-Z sanitizer'"}, {"sha": "e7a11a969c037e00a796aafeff6258501ec15e9a", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/hello.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36d08125705598aa12ceb092f34c332fbba12c65/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d08125705598aa12ceb092f34c332fbba12c65/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2Fhello.rs?ref=36d08125705598aa12ceb092f34c332fbba12c65", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    println!(\"Hello, world!\");\n-}"}, {"sha": "2a23f0fe3d4ef1d5465db9e0b7ecf59ac0c44b9c", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-target/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | \\\n-\t\t$(CGREP) 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` target'\n+\t\t$(CGREP) 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target'"}, {"sha": "d8598b8ac93f90815226bf832d06c647d8bc6dac", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -7,5 +7,5 @@\n # FIXME(#46126) ThinLTO for libstd broke this test\n \n all:\n-\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n+\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) rustc_rt.lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'"}, {"sha": "8bc9df1b4baebbaa5d23d2521e1891439df19d97", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b1a7e3c54ff3a5ef6744073281b00368749c8/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=0c6b1a7e3c54ff3a5ef6744073281b00368749c8", "patch": "@@ -5,7 +5,7 @@\n # only-x86_64\n \n all:\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) rustc_rt.msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args maybeuninit.rs | $(CGREP) librustc_msan\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args maybeuninit.rs | $(CGREP) rustc_rt.msan\n \t$(TMPDIR)/maybeuninit 2>&1 | $(CGREP) use-of-uninitialized-value"}]}