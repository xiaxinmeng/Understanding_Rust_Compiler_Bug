{"sha": "39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YmQzYjJiZDcxOTI4OWE4ZGQwM2ZiNTJkNTA2MGNkYjEwZjkxNjk=", "commit": {"author": {"name": "nmio", "email": "kristo.koert@gmail.com", "date": "2020-02-25T18:01:59Z"}, "committer": {"name": "nmio", "email": "kristo.koert@gmail.com", "date": "2020-02-25T18:01:59Z"}, "message": "Merge branch 'master' of https://github.com/rust-analyzer/rust-analyzer into find-cargo-toml-up-the-fs", "tree": {"sha": "4b627f15fcbb454aa09845ba8b456823cbc791b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b627f15fcbb454aa09845ba8b456823cbc791b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "html_url": "https://github.com/rust-lang/rust/commit/39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/comments", "author": {"login": "not-much-io", "id": 5730578, "node_id": "MDQ6VXNlcjU3MzA1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5730578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-much-io", "html_url": "https://github.com/not-much-io", "followers_url": "https://api.github.com/users/not-much-io/followers", "following_url": "https://api.github.com/users/not-much-io/following{/other_user}", "gists_url": "https://api.github.com/users/not-much-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-much-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-much-io/subscriptions", "organizations_url": "https://api.github.com/users/not-much-io/orgs", "repos_url": "https://api.github.com/users/not-much-io/repos", "events_url": "https://api.github.com/users/not-much-io/events{/privacy}", "received_events_url": "https://api.github.com/users/not-much-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "not-much-io", "id": 5730578, "node_id": "MDQ6VXNlcjU3MzA1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5730578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-much-io", "html_url": "https://github.com/not-much-io", "followers_url": "https://api.github.com/users/not-much-io/followers", "following_url": "https://api.github.com/users/not-much-io/following{/other_user}", "gists_url": "https://api.github.com/users/not-much-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-much-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-much-io/subscriptions", "organizations_url": "https://api.github.com/users/not-much-io/orgs", "repos_url": "https://api.github.com/users/not-much-io/repos", "events_url": "https://api.github.com/users/not-much-io/events{/privacy}", "received_events_url": "https://api.github.com/users/not-much-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e3ef61bd25c635721066c1f881d7f041366a0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e3ef61bd25c635721066c1f881d7f041366a0a", "html_url": "https://github.com/rust-lang/rust/commit/34e3ef61bd25c635721066c1f881d7f041366a0a"}, {"sha": "d3040c0deba8266044029a6479a1c12c28e72750", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3040c0deba8266044029a6479a1c12c28e72750", "html_url": "https://github.com/rust-lang/rust/commit/d3040c0deba8266044029a6479a1c12c28e72750"}], "stats": {"total": 1036, "additions": 659, "deletions": 377}, "files": [{"sha": "e5400f5ebdcd59ad53e511598081e7e397c17654", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -129,7 +129,7 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -139,7 +139,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n@@ -148,7 +148,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -159,15 +159,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -178,7 +178,7 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -1308,9 +1308,9 @@ dependencies = [\n \n [[package]]\n name = \"rowan\"\n-version = \"0.9.0\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d03d4eff7a4e8dcc362e4c06bb2b1b33af4bcd64336c7f40a31a05850336b6c\"\n+checksum = \"1ea7cadf87a9d8432e85cb4eb86bd2e765ace60c24ef86e79084dcae5d1c5a19\"\n dependencies = [\n  \"rustc-hash\",\n  \"smol_str\","}, {"sha": "c6d15af5fc6aa34a3de9911f8899e8e7d797f1a3", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,7 +1,8 @@\n //! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n use rustc_hash::FxHashMap;\n \n-use hir::{db::HirDatabase, InFile, PathResolution};\n+use hir::{InFile, PathResolution};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode};\n \n pub trait AstTransform<'a> {\n@@ -33,18 +34,18 @@ impl<'a> AstTransform<'a> for NullTransformer {\n     }\n }\n \n-pub struct SubstituteTypeParams<'a, DB: HirDatabase> {\n-    db: &'a DB,\n+pub struct SubstituteTypeParams<'a> {\n+    db: &'a RootDatabase,\n     substs: FxHashMap<hir::TypeParam, ast::TypeRef>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n-impl<'a, DB: HirDatabase> SubstituteTypeParams<'a, DB> {\n+impl<'a> SubstituteTypeParams<'a> {\n     pub fn for_trait_impl(\n-        db: &'a DB,\n+        db: &'a RootDatabase,\n         trait_: hir::Trait,\n         impl_block: ast::ImplBlock,\n-    ) -> SubstituteTypeParams<'a, DB> {\n+    ) -> SubstituteTypeParams<'a> {\n         let substs = get_syntactic_substs(impl_block).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n         let substs_by_param: FxHashMap<_, _> = generic_def\n@@ -95,7 +96,7 @@ impl<'a, DB: HirDatabase> SubstituteTypeParams<'a, DB> {\n     }\n }\n \n-impl<'a, DB: HirDatabase> AstTransform<'a> for SubstituteTypeParams<'a, DB> {\n+impl<'a> AstTransform<'a> for SubstituteTypeParams<'a> {\n     fn get_substitution(\n         &self,\n         node: InFile<&ra_syntax::SyntaxNode>,\n@@ -107,14 +108,14 @@ impl<'a, DB: HirDatabase> AstTransform<'a> for SubstituteTypeParams<'a, DB> {\n     }\n }\n \n-pub struct QualifyPaths<'a, DB: HirDatabase> {\n-    db: &'a DB,\n+pub struct QualifyPaths<'a> {\n+    db: &'a RootDatabase,\n     from: Option<hir::Module>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n-impl<'a, DB: HirDatabase> QualifyPaths<'a, DB> {\n-    pub fn new(db: &'a DB, from: Option<hir::Module>) -> Self {\n+impl<'a> QualifyPaths<'a> {\n+    pub fn new(db: &'a RootDatabase, from: Option<hir::Module>) -> Self {\n         Self { db, from, previous: Box::new(NullTransformer) }\n     }\n \n@@ -168,7 +169,7 @@ pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: InFile<N>\n     N::cast(result).unwrap()\n }\n \n-impl<'a, DB: HirDatabase> AstTransform<'a> for QualifyPaths<'a, DB> {\n+impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n     fn get_substitution(\n         &self,\n         node: InFile<&ra_syntax::SyntaxNode>,"}, {"sha": "db27f9b83932739771e4b7d3cab8b40c9a6ad4c3", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -43,15 +43,35 @@ pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n \n pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n     let block = block.block()?;\n-    let expr = block.expr()?;\n-    let non_trivial_children = block.syntax().children().filter(|it| match it.kind() {\n-        WHITESPACE | T!['{'] | T!['}'] => false,\n-        _ => it != expr.syntax(),\n-    });\n-    if non_trivial_children.count() > 0 {\n-        return None;\n+    let has_anything_else = |thing: &SyntaxNode| -> bool {\n+        let mut non_trivial_children =\n+            block.syntax().children_with_tokens().filter(|it| match it.kind() {\n+                WHITESPACE | T!['{'] | T!['}'] => false,\n+                _ => it.as_node() != Some(thing),\n+            });\n+        non_trivial_children.next().is_some()\n+    };\n+\n+    if let Some(expr) = block.expr() {\n+        if has_anything_else(expr.syntax()) {\n+            return None;\n+        }\n+        return Some(expr);\n+    } else {\n+        // Unwrap `{ continue; }`\n+        let (stmt,) = block.statements().next_tuple()?;\n+        if has_anything_else(stmt.syntax()) {\n+            return None;\n+        }\n+        if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n+            let expr = expr_stmt.expr()?;\n+            match expr.syntax().kind() {\n+                CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n+                _ => (),\n+            }\n+        }\n     }\n-    Some(expr)\n+    None\n }\n \n pub fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {"}, {"sha": "99e2fe1bf12741e2f3c81375ecd2026a3b86a6bd", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -21,9 +21,9 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2939913fb7bb94ac2a6721087dc086be11410702\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2939913fb7bb94ac2a6721087dc086be11410702\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2939913fb7bb94ac2a6721087dc086be11410702\" }\n \n lalrpop-intern = \"0.15.1\"\n "}, {"sha": "17aef94903a82e8ac34cddbd52ce5068197a2032", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -14,15 +14,15 @@ use crate::db::HirDatabase;\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n-use self::chalk::{from_chalk, ToChalk, TypeFamily};\n+use self::chalk::{from_chalk, Interner, ToChalk};\n \n pub(crate) mod chalk;\n mod builtin;\n \n #[derive(Debug, Clone)]\n pub struct TraitSolver {\n     krate: CrateId,\n-    inner: Arc<Mutex<chalk_solve::Solver<TypeFamily>>>,\n+    inner: Arc<Mutex<chalk_solve::Solver<Interner>>>,\n }\n \n /// We need eq for salsa\n@@ -38,8 +38,8 @@ impl TraitSolver {\n     fn solve(\n         &self,\n         db: &impl HirDatabase,\n-        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<TypeFamily>>>,\n-    ) -> Option<chalk_solve::Solution<TypeFamily>> {\n+        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<Interner>>>,\n+    ) -> Option<chalk_solve::Solution<Interner>> {\n         let context = ChalkContext { db, krate: self.krate };\n         log::debug!(\"solve goal: {:?}\", goal);\n         let mut solver = match self.inner.lock() {\n@@ -110,7 +110,7 @@ pub(crate) fn trait_solver_query(\n     TraitSolver { krate, inner: Arc::new(Mutex::new(create_chalk_solver())) }\n }\n \n-fn create_chalk_solver() -> chalk_solve::Solver<TypeFamily> {\n+fn create_chalk_solver() -> chalk_solve::Solver<Interner> {\n     let solver_choice =\n         chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE, expected_answers: None };\n     solver_choice.into_solver()\n@@ -242,9 +242,9 @@ pub(crate) fn trait_solve_query(\n \n fn solution_from_chalk(\n     db: &impl HirDatabase,\n-    solution: chalk_solve::Solution<TypeFamily>,\n+    solution: chalk_solve::Solution<Interner>,\n ) -> Solution {\n-    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<TypeFamily>>| {\n+    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<Interner>>| {\n         let value = subst\n             .value\n             .into_iter()"}, {"sha": "5b6c1a62e09e08d5fe95ebd4fb1ce0adb5b75ab0", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -3,7 +3,7 @@ use std::{fmt, sync::Arc};\n \n use log::debug;\n \n-use chalk_ir::{cast::Cast, GoalData, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n+use chalk_ir::{cast::Cast, Goal, GoalData, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n \n use hir_def::{AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId};\n use ra_db::{\n@@ -18,13 +18,14 @@ use crate::{\n };\n \n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n-pub struct TypeFamily {}\n+pub struct Interner {}\n \n-impl chalk_ir::family::TypeFamily for TypeFamily {\n+impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Box<chalk_ir::TyData<Self>>;\n     type InternedLifetime = chalk_ir::LifetimeData<Self>;\n     type InternedParameter = chalk_ir::ParameterData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n+    type InternedGoals = Vec<Goal<Self>>;\n     type InternedSubstitution = Vec<Parameter<Self>>;\n     type DefId = InternId;\n \n@@ -85,10 +86,18 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n         Arc::new(goal)\n     }\n \n+    fn intern_goals(data: impl IntoIterator<Item = Goal<Self>>) -> Self::InternedGoals {\n+        data.into_iter().collect()\n+    }\n+\n     fn goal_data(goal: &Arc<GoalData<Self>>) -> &GoalData<Self> {\n         goal\n     }\n \n+    fn goals_data(goals: &Vec<Goal<Interner>>) -> &[Goal<Interner>] {\n+        goals\n+    }\n+\n     fn intern_substitution<E>(\n         data: impl IntoIterator<Item = Result<Parameter<Self>, E>>,\n     ) -> Result<Vec<Parameter<Self>>, E> {\n@@ -100,20 +109,20 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n     }\n }\n \n-impl chalk_ir::family::HasTypeFamily for TypeFamily {\n-    type TypeFamily = Self;\n+impl chalk_ir::interner::HasInterner for Interner {\n+    type Interner = Self;\n }\n \n-pub type AssocTypeId = chalk_ir::AssocTypeId<TypeFamily>;\n-pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<TypeFamily>;\n-pub type TraitId = chalk_ir::TraitId<TypeFamily>;\n-pub type TraitDatum = chalk_rust_ir::TraitDatum<TypeFamily>;\n-pub type StructId = chalk_ir::StructId<TypeFamily>;\n-pub type StructDatum = chalk_rust_ir::StructDatum<TypeFamily>;\n-pub type ImplId = chalk_ir::ImplId<TypeFamily>;\n-pub type ImplDatum = chalk_rust_ir::ImplDatum<TypeFamily>;\n+pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<Interner>;\n+pub type TraitId = chalk_ir::TraitId<Interner>;\n+pub type TraitDatum = chalk_rust_ir::TraitDatum<Interner>;\n+pub type StructId = chalk_ir::StructId<Interner>;\n+pub type StructDatum = chalk_rust_ir::StructDatum<Interner>;\n+pub type ImplId = chalk_ir::ImplId<Interner>;\n+pub type ImplDatum = chalk_rust_ir::ImplDatum<Interner>;\n pub type AssociatedTyValueId = chalk_rust_ir::AssociatedTyValueId;\n-pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<TypeFamily>;\n+pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<Interner>;\n \n pub(super) trait ToChalk {\n     type Chalk;\n@@ -129,8 +138,8 @@ where\n }\n \n impl ToChalk for Ty {\n-    type Chalk = chalk_ir::Ty<TypeFamily>;\n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty<TypeFamily> {\n+    type Chalk = chalk_ir::Ty<Interner>;\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty<Interner> {\n         match self {\n             Ty::Apply(apply_ty) => {\n                 let name = apply_ty.ctor.to_chalk(db);\n@@ -148,7 +157,7 @@ impl ToChalk for Ty {\n                     ui: UniverseIndex::ROOT,\n                     idx: interned_id.as_intern_id().as_usize(),\n                 }\n-                .to_ty::<TypeFamily>()\n+                .to_ty::<Interner>()\n             }\n             Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx as usize).intern(),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n@@ -169,7 +178,7 @@ impl ToChalk for Ty {\n             }\n         }\n     }\n-    fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty<TypeFamily>) -> Self {\n+    fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty<Interner>) -> Self {\n         match chalk.data().clone() {\n             chalk_ir::TyData::Apply(apply_ty) => match apply_ty.name {\n                 TypeName::Error => Ty::Unknown,\n@@ -205,13 +214,13 @@ impl ToChalk for Ty {\n }\n \n impl ToChalk for Substs {\n-    type Chalk = chalk_ir::Substitution<TypeFamily>;\n+    type Chalk = chalk_ir::Substitution<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Substitution<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Substitution<Interner> {\n         chalk_ir::Substitution::from(self.iter().map(|ty| ty.clone().to_chalk(db)))\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, parameters: chalk_ir::Substitution<TypeFamily>) -> Substs {\n+    fn from_chalk(db: &impl HirDatabase, parameters: chalk_ir::Substitution<Interner>) -> Substs {\n         let tys = parameters\n             .into_iter()\n             .map(|p| match p.ty() {\n@@ -224,15 +233,15 @@ impl ToChalk for Substs {\n }\n \n impl ToChalk for TraitRef {\n-    type Chalk = chalk_ir::TraitRef<TypeFamily>;\n+    type Chalk = chalk_ir::TraitRef<Interner>;\n \n-    fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef<TypeFamily> {\n+    fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef<Interner> {\n         let trait_id = self.trait_.to_chalk(db);\n         let substitution = self.substs.to_chalk(db);\n         chalk_ir::TraitRef { trait_id, substitution }\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef<TypeFamily>) -> Self {\n+    fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef<Interner>) -> Self {\n         let trait_ = from_chalk(db, trait_ref.trait_id);\n         let substs = from_chalk(db, trait_ref.substitution);\n         TraitRef { trait_, substs }\n@@ -252,9 +261,9 @@ impl ToChalk for hir_def::TraitId {\n }\n \n impl ToChalk for TypeCtor {\n-    type Chalk = TypeName<TypeFamily>;\n+    type Chalk = TypeName<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> TypeName<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> TypeName<Interner> {\n         match self {\n             TypeCtor::AssociatedType(type_alias) => {\n                 let type_id = type_alias.to_chalk(db);\n@@ -268,7 +277,7 @@ impl ToChalk for TypeCtor {\n         }\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, type_name: TypeName<TypeFamily>) -> TypeCtor {\n+    fn from_chalk(db: &impl HirDatabase, type_name: TypeName<Interner>) -> TypeCtor {\n         match type_name {\n             TypeName::Struct(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n             TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n@@ -317,9 +326,9 @@ impl ToChalk for AssocTyValue {\n }\n \n impl ToChalk for GenericPredicate {\n-    type Chalk = chalk_ir::QuantifiedWhereClause<TypeFamily>;\n+    type Chalk = chalk_ir::QuantifiedWhereClause<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::QuantifiedWhereClause<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::QuantifiedWhereClause<Interner> {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => {\n                 make_binders(chalk_ir::WhereClause::Implemented(trait_ref.to_chalk(db)), 0)\n@@ -337,7 +346,7 @@ impl ToChalk for GenericPredicate {\n \n     fn from_chalk(\n         db: &impl HirDatabase,\n-        where_clause: chalk_ir::QuantifiedWhereClause<TypeFamily>,\n+        where_clause: chalk_ir::QuantifiedWhereClause<Interner>,\n     ) -> GenericPredicate {\n         match where_clause.value {\n             chalk_ir::WhereClause::Implemented(tr) => {\n@@ -353,9 +362,9 @@ impl ToChalk for GenericPredicate {\n }\n \n impl ToChalk for ProjectionTy {\n-    type Chalk = chalk_ir::AliasTy<TypeFamily>;\n+    type Chalk = chalk_ir::AliasTy<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::AliasTy<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::AliasTy<Interner> {\n         chalk_ir::AliasTy {\n             associated_ty_id: self.associated_ty.to_chalk(db),\n             substitution: self.parameters.to_chalk(db),\n@@ -364,7 +373,7 @@ impl ToChalk for ProjectionTy {\n \n     fn from_chalk(\n         db: &impl HirDatabase,\n-        projection_ty: chalk_ir::AliasTy<TypeFamily>,\n+        projection_ty: chalk_ir::AliasTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n             associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n@@ -374,28 +383,28 @@ impl ToChalk for ProjectionTy {\n }\n \n impl ToChalk for super::ProjectionPredicate {\n-    type Chalk = chalk_ir::Normalize<TypeFamily>;\n+    type Chalk = chalk_ir::Normalize<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize<Interner> {\n         chalk_ir::Normalize { alias: self.projection_ty.to_chalk(db), ty: self.ty.to_chalk(db) }\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize<TypeFamily>) -> Self {\n+    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize<Interner>) -> Self {\n         unimplemented!()\n     }\n }\n \n impl ToChalk for Obligation {\n-    type Chalk = chalk_ir::DomainGoal<TypeFamily>;\n+    type Chalk = chalk_ir::DomainGoal<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal<Interner> {\n         match self {\n             Obligation::Trait(tr) => tr.to_chalk(db).cast(),\n             Obligation::Projection(pr) => pr.to_chalk(db).cast(),\n         }\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal<TypeFamily>) -> Self {\n+    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal<Interner>) -> Self {\n         unimplemented!()\n     }\n }\n@@ -418,16 +427,16 @@ where\n }\n \n impl ToChalk for Arc<super::TraitEnvironment> {\n-    type Chalk = chalk_ir::Environment<TypeFamily>;\n+    type Chalk = chalk_ir::Environment<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Environment<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Environment<Interner> {\n         let mut clauses = Vec::new();\n         for pred in &self.predicates {\n             if pred.is_error() {\n                 // for env, we just ignore errors\n                 continue;\n             }\n-            let program_clause: chalk_ir::ProgramClause<TypeFamily> =\n+            let program_clause: chalk_ir::ProgramClause<Interner> =\n                 pred.clone().to_chalk(db).cast();\n             clauses.push(program_clause.into_from_env_clause());\n         }\n@@ -436,15 +445,15 @@ impl ToChalk for Arc<super::TraitEnvironment> {\n \n     fn from_chalk(\n         _db: &impl HirDatabase,\n-        _env: chalk_ir::Environment<TypeFamily>,\n+        _env: chalk_ir::Environment<Interner>,\n     ) -> Arc<super::TraitEnvironment> {\n         unimplemented!()\n     }\n }\n \n impl<T: ToChalk> ToChalk for super::InEnvironment<T>\n where\n-    T::Chalk: chalk_ir::family::HasTypeFamily<TypeFamily = TypeFamily>,\n+    T::Chalk: chalk_ir::interner::HasInterner<Interner = Interner>,\n {\n     type Chalk = chalk_ir::InEnvironment<T::Chalk>;\n \n@@ -522,7 +531,7 @@ fn convert_where_clauses(\n     db: &impl HirDatabase,\n     def: GenericDefId,\n     substs: &Substs,\n-) -> Vec<chalk_ir::QuantifiedWhereClause<TypeFamily>> {\n+) -> Vec<chalk_ir::QuantifiedWhereClause<Interner>> {\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n@@ -535,7 +544,7 @@ fn convert_where_clauses(\n     result\n }\n \n-impl<'a, DB> chalk_solve::RustIrDatabase<TypeFamily> for ChalkContext<'a, DB>\n+impl<'a, DB> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a, DB>\n where\n     DB: HirDatabase,\n {\n@@ -554,7 +563,7 @@ where\n     fn impls_for_trait(\n         &self,\n         trait_id: TraitId,\n-        parameters: &[Parameter<TypeFamily>],\n+        parameters: &[Parameter<Interner>],\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n@@ -589,14 +598,14 @@ where\n     fn associated_ty_value(&self, id: AssociatedTyValueId) -> Arc<AssociatedTyValue> {\n         self.db.associated_ty_value(self.krate, id)\n     }\n-    fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<TypeFamily>> {\n+    fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<Interner>> {\n         vec![]\n     }\n     fn local_impls_to_coherence_check(&self, _trait_id: TraitId) -> Vec<ImplId> {\n         // We don't do coherence checking (yet)\n         unimplemented!()\n     }\n-    fn as_struct_id(&self, id: &TypeName<TypeFamily>) -> Option<StructId> {\n+    fn as_struct_id(&self, id: &TypeName<Interner>) -> Option<StructId> {\n         match id {\n             TypeName::Struct(struct_id) => Some(*struct_id),\n             _ => None,"}, {"sha": "51ac59a718b0db75a0712c68e7d6fd34978b8c27", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -4,16 +4,11 @@ use indexmap::IndexMap;\n \n use hir::db::AstDatabase;\n use ra_ide_db::RootDatabase;\n-use ra_syntax::{\n-    ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, TextRange,\n-};\n+use ra_syntax::{ast, match_ast, AstNode, TextRange};\n \n use crate::{\n-    call_info::FnCallNode,\n-    display::{ShortLabel, ToNav},\n-    expand::descend_into_macros,\n-    goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n+    call_info::FnCallNode, display::ToNav, expand::descend_into_macros, goto_definition,\n+    references, FilePosition, NavigationTarget, RangeInfo,\n };\n \n #[derive(Debug, Clone)]\n@@ -49,6 +44,7 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n     let refs = references::find_all_refs(db, position, None)?;\n \n     let mut calls = CallLocations::default();\n+    let mut sb = hir::SourceBinder::new(db);\n \n     for reference in refs.info.references() {\n         let file_id = reference.file_range.file_id;\n@@ -62,12 +58,8 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n             match_ast! {\n                 match node {\n                     ast::FnDef(it) => {\n-                        Some(NavigationTarget::from_named(\n-                            db,\n-                            token.with_value(&it),\n-                            it.doc_comment_text(),\n-                            it.short_label(),\n-                        ))\n+                        let def = sb.to_def(token.with_value(it))?;\n+                        Some(def.to_nav(sb.db))\n                     },\n                     _ => { None },\n                 }"}, {"sha": "c9d0058a621795540be5a7987beedc1d3e1be85f", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -125,7 +125,7 @@ impl NavigationTarget {\n     }\n \n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n-    pub(crate) fn from_named(\n+    fn from_named(\n         db: &RootDatabase,\n         node: InFile<&dyn ast::NameOwner>,\n         docs: Option<String>,"}, {"sha": "1e7d0621a6cb98bd2a850d5afa4d8c8f2723353d", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -145,25 +145,25 @@ fn extend_tokens_from_range(\n     let src = db.parse_or_expand(expanded.file_id)?;\n     let parent = shallowest_node(&find_covering_element(&src, expanded.value))?.parent()?;\n \n-    let validate = |token: SyntaxToken| {\n+    let validate = |token: &SyntaxToken| {\n         let node = descend_into_macros(db, file_id, token.clone());\n-        if node.file_id == expanded.file_id\n+        node.file_id == expanded.file_id\n             && node.value.text_range().is_subrange(&parent.text_range())\n-        {\n-            Some(token)\n-        } else {\n-            None\n-        }\n     };\n \n     // Find the first and last text range under expanded parent\n     let first = successors(Some(first_token), |token| {\n-        validate(skip_whitespace(token.prev_token()?, Direction::Prev)?)\n+        let token = token.prev_token()?;\n+        skip_whitespace(token, Direction::Prev)\n     })\n+    .take_while(validate)\n     .last()?;\n+\n     let last = successors(Some(last_token), |token| {\n-        validate(skip_whitespace(token.next_token()?, Direction::Next)?)\n+        let token = token.next_token()?;\n+        skip_whitespace(token, Direction::Next)\n     })\n+    .take_while(validate)\n     .last()?;\n \n     let range = union_range(first.text_range(), last.text_range());\n@@ -334,10 +334,12 @@ fn adj_comments(comment: &ast::Comment, dir: Direction) -> ast::Comment {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use crate::mock_analysis::single_file;\n     use test_utils::extract_offset;\n \n+    use crate::mock_analysis::single_file;\n+\n+    use super::*;\n+\n     fn do_check(before: &str, afters: &[&str]) {\n         let (cursor, before) = extract_offset(before);\n         let (analysis, file_id) = single_file(&before);"}, {"sha": "7d70dab9c69266a67d94b5fcb61d9c123b9a8c41", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -227,6 +227,31 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_join_lines_diverging_block() {\n+        let before = r\"\n+            fn foo() {\n+                loop {\n+                    match x {\n+                        92 => <|>{\n+                            continue;\n+                        }\n+                    }\n+                }\n+            }\n+        \";\n+        let after = r\"\n+            fn foo() {\n+                loop {\n+                    match x {\n+                        92 => <|>continue,\n+                    }\n+                }\n+            }\n+        \";\n+        check_join_lines(before, after);\n+    }\n+\n     #[test]\n     fn join_lines_adds_comma_for_block_in_match_arm() {\n         check_join_lines("}, {"sha": "82e10bc7e6ad199b1a21f83791fe5a5a4cebc660", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -75,7 +75,7 @@ pub use crate::{\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     ssr::SsrError,\n-    syntax_highlighting::HighlightedRange,\n+    syntax_highlighting::{tags, HighlightedRange},\n };\n \n pub use hir::Documentation;"}, {"sha": "812229b4e0b483a3056ecca0a750d027a7185ed3", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -17,32 +17,32 @@ use crate::{\n };\n \n pub mod tags {\n-    pub(crate) const FIELD: &str = \"field\";\n-    pub(crate) const FUNCTION: &str = \"function\";\n-    pub(crate) const MODULE: &str = \"module\";\n-    pub(crate) const CONSTANT: &str = \"constant\";\n-    pub(crate) const MACRO: &str = \"macro\";\n-\n-    pub(crate) const VARIABLE: &str = \"variable\";\n-    pub(crate) const VARIABLE_MUT: &str = \"variable.mut\";\n-\n-    pub(crate) const TYPE: &str = \"type\";\n-    pub(crate) const TYPE_BUILTIN: &str = \"type.builtin\";\n-    pub(crate) const TYPE_SELF: &str = \"type.self\";\n-    pub(crate) const TYPE_PARAM: &str = \"type.param\";\n-    pub(crate) const TYPE_LIFETIME: &str = \"type.lifetime\";\n-\n-    pub(crate) const LITERAL_BYTE: &str = \"literal.byte\";\n-    pub(crate) const LITERAL_NUMERIC: &str = \"literal.numeric\";\n-    pub(crate) const LITERAL_CHAR: &str = \"literal.char\";\n-\n-    pub(crate) const LITERAL_COMMENT: &str = \"comment\";\n-    pub(crate) const LITERAL_STRING: &str = \"string\";\n-    pub(crate) const LITERAL_ATTRIBUTE: &str = \"attribute\";\n-\n-    pub(crate) const KEYWORD: &str = \"keyword\";\n-    pub(crate) const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n-    pub(crate) const KEYWORD_CONTROL: &str = \"keyword.control\";\n+    pub const FIELD: &str = \"field\";\n+    pub const FUNCTION: &str = \"function\";\n+    pub const MODULE: &str = \"module\";\n+    pub const CONSTANT: &str = \"constant\";\n+    pub const MACRO: &str = \"macro\";\n+\n+    pub const VARIABLE: &str = \"variable\";\n+    pub const VARIABLE_MUT: &str = \"variable.mut\";\n+\n+    pub const TYPE: &str = \"type\";\n+    pub const TYPE_BUILTIN: &str = \"type.builtin\";\n+    pub const TYPE_SELF: &str = \"type.self\";\n+    pub const TYPE_PARAM: &str = \"type.param\";\n+    pub const TYPE_LIFETIME: &str = \"type.lifetime\";\n+\n+    pub const LITERAL_BYTE: &str = \"literal.byte\";\n+    pub const LITERAL_NUMERIC: &str = \"literal.numeric\";\n+    pub const LITERAL_CHAR: &str = \"literal.char\";\n+\n+    pub const LITERAL_COMMENT: &str = \"comment\";\n+    pub const LITERAL_STRING: &str = \"string\";\n+    pub const LITERAL_ATTRIBUTE: &str = \"attribute\";\n+\n+    pub const KEYWORD: &str = \"keyword\";\n+    pub const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n+    pub const KEYWORD_CONTROL: &str = \"keyword.control\";\n }\n \n #[derive(Debug)]"}, {"sha": "8efc6b368a68fa8be7d2d7c7df2001b2c7d336ee", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -12,7 +12,7 @@ doctest = false\n \n [dependencies]\n itertools = \"0.8.2\"\n-rowan = \"0.9.0\"\n+rowan = \"0.9.1\"\n rustc_lexer = \"0.1.0\"\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\""}, {"sha": "638987ee81967cd16dda30bf1e50ceaf027179f4", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,12 +1,15 @@\n //! Advertizes the capabilities of the LSP Server.\n \n+use crate::semantic_tokens;\n+\n use lsp_types::{\n     CallHierarchyServerCapability, CodeActionProviderCapability, CodeLensOptions,\n     CompletionOptions, DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n     ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n-    SelectionRangeProviderCapability, ServerCapabilities, SignatureHelpOptions,\n-    TextDocumentSyncCapability, TextDocumentSyncKind, TextDocumentSyncOptions,\n-    TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n+    SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n+    SemanticTokensOptions, SemanticTokensServerCapabilities, ServerCapabilities,\n+    SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n+    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -57,7 +60,20 @@ pub fn server_capabilities() -> ServerCapabilities {\n         execute_command_provider: None,\n         workspace: None,\n         call_hierarchy_provider: Some(CallHierarchyServerCapability::Simple(true)),\n-        semantic_tokens_provider: None,\n+        semantic_tokens_provider: Some(SemanticTokensServerCapabilities::SemanticTokensOptions(\n+            SemanticTokensOptions {\n+                legend: SemanticTokensLegend {\n+                    token_types: semantic_tokens::supported_token_types().iter().cloned().collect(),\n+                    token_modifiers: semantic_tokens::supported_token_modifiers()\n+                        .iter()\n+                        .cloned()\n+                        .collect(),\n+                },\n+\n+                document_provider: Some(SemanticTokensDocumentProvider::Bool(true)),\n+                ..SemanticTokensOptions::default()\n+            },\n+        )),\n         experimental: Default::default(),\n     }\n }"}, {"sha": "5fcb46b6174b2d839588f007cc8100e9a6ab386e", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -4,19 +4,20 @@\n use lsp_types::{\n     self, CreateFile, DiagnosticSeverity, DocumentChangeOperation, DocumentChanges, Documentation,\n     Location, LocationLink, MarkupContent, MarkupKind, Position, Range, RenameFile, ResourceOp,\n-    SymbolKind, TextDocumentEdit, TextDocumentIdentifier, TextDocumentItem,\n-    TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, WorkspaceEdit,\n+    SemanticTokenModifier, SemanticTokenType, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n+    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n+    WorkspaceEdit,\n };\n use ra_ide::{\n-    translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n+    tags, translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n     FileRange, FileSystemEdit, Fold, FoldKind, InsertTextFormat, LineCol, LineIndex,\n     NavigationTarget, RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_vfs::LineEndings;\n \n-use crate::{req, world::WorldSnapshot, Result};\n+use crate::{req, semantic_tokens, world::WorldSnapshot, Result};\n \n pub trait Conv {\n     type Output;\n@@ -302,6 +303,76 @@ impl ConvWith<&FoldConvCtx<'_>> for Fold {\n     }\n }\n \n+impl Conv for &'static str {\n+    type Output = (SemanticTokenType, Vec<SemanticTokenModifier>);\n+\n+    fn conv(self) -> (SemanticTokenType, Vec<SemanticTokenModifier>) {\n+        let token_type: SemanticTokenType = match self {\n+            tags::FIELD => SemanticTokenType::MEMBER,\n+            tags::FUNCTION => SemanticTokenType::FUNCTION,\n+            tags::MODULE => SemanticTokenType::NAMESPACE,\n+            tags::CONSTANT => {\n+                return (\n+                    SemanticTokenType::VARIABLE,\n+                    vec![SemanticTokenModifier::STATIC, SemanticTokenModifier::READONLY],\n+                )\n+            }\n+            tags::MACRO => SemanticTokenType::MACRO,\n+\n+            tags::VARIABLE => {\n+                return (SemanticTokenType::VARIABLE, vec![SemanticTokenModifier::READONLY])\n+            }\n+            tags::VARIABLE_MUT => SemanticTokenType::VARIABLE,\n+\n+            tags::TYPE => SemanticTokenType::TYPE,\n+            tags::TYPE_BUILTIN => SemanticTokenType::TYPE,\n+            tags::TYPE_SELF => {\n+                return (SemanticTokenType::TYPE, vec![SemanticTokenModifier::REFERENCE])\n+            }\n+            tags::TYPE_PARAM => SemanticTokenType::TYPE_PARAMETER,\n+            tags::TYPE_LIFETIME => {\n+                return (SemanticTokenType::LABEL, vec![SemanticTokenModifier::REFERENCE])\n+            }\n+\n+            tags::LITERAL_BYTE => SemanticTokenType::NUMBER,\n+            tags::LITERAL_NUMERIC => SemanticTokenType::NUMBER,\n+            tags::LITERAL_CHAR => SemanticTokenType::NUMBER,\n+\n+            tags::LITERAL_COMMENT => {\n+                return (SemanticTokenType::COMMENT, vec![SemanticTokenModifier::DOCUMENTATION])\n+            }\n+\n+            tags::LITERAL_STRING => SemanticTokenType::STRING,\n+            tags::LITERAL_ATTRIBUTE => SemanticTokenType::KEYWORD,\n+\n+            tags::KEYWORD => SemanticTokenType::KEYWORD,\n+            tags::KEYWORD_UNSAFE => SemanticTokenType::KEYWORD,\n+            tags::KEYWORD_CONTROL => SemanticTokenType::KEYWORD,\n+            unknown => panic!(\"Unknown semantic token: {}\", unknown),\n+        };\n+\n+        (token_type, vec![])\n+    }\n+}\n+\n+impl Conv for (SemanticTokenType, Vec<SemanticTokenModifier>) {\n+    type Output = (u32, u32);\n+\n+    fn conv(self) -> Self::Output {\n+        let token_index =\n+            semantic_tokens::supported_token_types().iter().position(|it| *it == self.0).unwrap();\n+        let mut token_modifier_bitset = 0;\n+        for modifier in self.1.iter() {\n+            token_modifier_bitset |= semantic_tokens::supported_token_modifiers()\n+                .iter()\n+                .position(|it| it == modifier)\n+                .unwrap();\n+        }\n+\n+        (token_index as u32, token_modifier_bitset as u32)\n+    }\n+}\n+\n impl<T: ConvWith<CTX>, CTX> ConvWith<CTX> for Option<T> {\n     type Output = Option<T::Output>;\n "}, {"sha": "a0f96882341dd16220a1e0953bc0778a860cfcf7", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -36,6 +36,7 @@ pub mod req;\n mod config;\n mod world;\n mod diagnostics;\n+mod semantic_tokens;\n \n use serde::de::DeserializeOwned;\n "}, {"sha": "6e9e604a6556039752dea2ffa79ee2cccf18cfd4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -528,6 +528,7 @@ fn on_request(\n         .on::<req::CallHierarchyIncomingCalls>(handlers::handle_call_hierarchy_incoming)?\n         .on::<req::CallHierarchyOutgoingCalls>(handlers::handle_call_hierarchy_outgoing)?\n         .on::<req::Ssr>(handlers::handle_ssr)?\n+        .on::<req::SemanticTokensRequest>(handlers::handle_semantic_tokens)?\n         .finish();\n     Ok(())\n }"}, {"sha": "e13e7c95a25f046e54a46ccfa27b2433b59849bd", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -16,8 +16,9 @@ use lsp_types::{\n     CodeAction, CodeActionOrCommand, CodeActionResponse, CodeLens, Command, CompletionItem,\n     Diagnostic, DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n-    PrepareRenameResponse, Range, RenameParams, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, WorkspaceEdit,\n+    PrepareRenameResponse, Range, RenameParams, SemanticTokenModifier, SemanticTokenType,\n+    SemanticTokens, SemanticTokensParams, SemanticTokensResult, SymbolInformation,\n+    TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n     AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n@@ -38,6 +39,7 @@ use crate::{\n     diagnostics::DiagnosticTask,\n     from_json,\n     req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n+    semantic_tokens::SemanticTokensBuilder,\n     world::WorldSnapshot,\n     LspError, Result,\n };\n@@ -1068,3 +1070,25 @@ pub fn handle_call_hierarchy_outgoing(\n \n     Ok(Some(res))\n }\n+\n+pub fn handle_semantic_tokens(\n+    world: WorldSnapshot,\n+    params: SemanticTokensParams,\n+) -> Result<Option<SemanticTokensResult>> {\n+    let _p = profile(\"handle_semantic_tokens\");\n+\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+\n+    let mut builder = SemanticTokensBuilder::default();\n+\n+    for h in world.analysis().highlight(file_id)?.into_iter() {\n+        let type_and_modifiers: (SemanticTokenType, Vec<SemanticTokenModifier>) = h.tag.conv();\n+        let (token_type, token_modifiers) = type_and_modifiers.conv();\n+        builder.push(h.range.conv_with(&line_index), token_type, token_modifiers);\n+    }\n+\n+    let tokens = SemanticTokens { data: builder.build(), ..Default::default() };\n+\n+    Ok(Some(tokens.into()))\n+}"}, {"sha": "3734899bc09b6ad965566655d9c54a37d0f418fb", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -12,9 +12,9 @@ pub use lsp_types::{\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n     PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,\n     PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams, SelectionRange,\n-    SelectionRangeParams, ServerCapabilities, ShowMessageParams, SignatureHelp, SymbolKind,\n-    TextDocumentEdit, TextDocumentPositionParams, TextEdit, WorkDoneProgressParams, WorkspaceEdit,\n-    WorkspaceSymbolParams,\n+    SelectionRangeParams, SemanticTokensParams, SemanticTokensResult, ServerCapabilities,\n+    ShowMessageParams, SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams,\n+    TextEdit, WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}, {"sha": "e6a8eb146f410ef5d6256b6cd4dca390d091abce", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -0,0 +1,94 @@\n+//! Semantic Tokens helpers\n+\n+use lsp_types::{Range, SemanticToken, SemanticTokenModifier, SemanticTokenType};\n+\n+const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n+    SemanticTokenType::COMMENT,\n+    SemanticTokenType::KEYWORD,\n+    SemanticTokenType::STRING,\n+    SemanticTokenType::NUMBER,\n+    SemanticTokenType::REGEXP,\n+    SemanticTokenType::OPERATOR,\n+    SemanticTokenType::NAMESPACE,\n+    SemanticTokenType::TYPE,\n+    SemanticTokenType::STRUCT,\n+    SemanticTokenType::CLASS,\n+    SemanticTokenType::INTERFACE,\n+    SemanticTokenType::ENUM,\n+    SemanticTokenType::TYPE_PARAMETER,\n+    SemanticTokenType::FUNCTION,\n+    SemanticTokenType::MEMBER,\n+    SemanticTokenType::PROPERTY,\n+    SemanticTokenType::MACRO,\n+    SemanticTokenType::VARIABLE,\n+    SemanticTokenType::PARAMETER,\n+    SemanticTokenType::LABEL,\n+];\n+\n+const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n+    SemanticTokenModifier::DOCUMENTATION,\n+    SemanticTokenModifier::DECLARATION,\n+    SemanticTokenModifier::DEFINITION,\n+    SemanticTokenModifier::REFERENCE,\n+    SemanticTokenModifier::STATIC,\n+    SemanticTokenModifier::ABSTRACT,\n+    SemanticTokenModifier::DEPRECATED,\n+    SemanticTokenModifier::ASYNC,\n+    SemanticTokenModifier::VOLATILE,\n+    SemanticTokenModifier::READONLY,\n+];\n+\n+/// Token types that the server supports\n+pub(crate) fn supported_token_types() -> &'static [SemanticTokenType] {\n+    SUPPORTED_TYPES\n+}\n+\n+/// Token modifiers that the server supports\n+pub(crate) fn supported_token_modifiers() -> &'static [SemanticTokenModifier] {\n+    SUPPORTED_MODIFIERS\n+}\n+\n+/// Tokens are encoded relative to each other.\n+///\n+/// This is a direct port of https://github.com/microsoft/vscode-languageserver-node/blob/f425af9de46a0187adb78ec8a46b9b2ce80c5412/server/src/sematicTokens.proposed.ts#L45\n+#[derive(Default)]\n+pub(crate) struct SemanticTokensBuilder {\n+    prev_line: u32,\n+    prev_char: u32,\n+    data: Vec<SemanticToken>,\n+}\n+\n+impl SemanticTokensBuilder {\n+    /// Push a new token onto the builder\n+    pub fn push(&mut self, range: Range, token_index: u32, modifier_bitset: u32) {\n+        let mut push_line = range.start.line as u32;\n+        let mut push_char = range.start.character as u32;\n+\n+        if !self.data.is_empty() {\n+            push_line -= self.prev_line;\n+            if push_line == 0 {\n+                push_char -= self.prev_char;\n+            }\n+        }\n+\n+        // A token cannot be multiline\n+        let token_len = range.end.character - range.start.character;\n+\n+        let token = SemanticToken {\n+            delta_line: push_line,\n+            delta_start: push_char,\n+            length: token_len as u32,\n+            token_type: token_index,\n+            token_modifiers_bitset: modifier_bitset,\n+        };\n+\n+        self.data.push(token);\n+\n+        self.prev_line = range.start.line as u32;\n+        self.prev_char = range.start.character as u32;\n+    }\n+\n+    pub fn build(self) -> Vec<SemanticToken> {\n+        self.data\n+    }\n+}"}, {"sha": "c6bf410f4b56f009534563ce51713cf43f2f9a09", "filename": "editors/code/.eslintrc.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.eslintrc.js?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -32,6 +32,7 @@ module.exports = {\n         \"@typescript-eslint/semi\": [\n             \"error\",\n             \"always\"\n-        ]\n+        ],\n+        \"@typescript-eslint/no-unnecessary-type-assertion\": \"error\"\n     }\n };"}, {"sha": "0288a468e015a92315c990813c376c05c9ca2f00", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1575,9 +1575,9 @@\n             }\n         },\n         \"typescript\": {\n-            \"version\": \"3.7.5\",\n-            \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-3.7.5.tgz\",\n-            \"integrity\": \"sha512-/P5lkRXkWHNAbcJIiHPfRoKqyd7bsyCma1hZNUGfn20qm64T6ZBlrzprymeu918H+mB/0rIg2gGK/BXkhhYgBw==\",\n+            \"version\": \"3.8.2\",\n+            \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-3.8.2.tgz\",\n+            \"integrity\": \"sha512-EgOVgL/4xfVrCMbhYKUQTdF37SQn4Iw73H5BgCrF1Abdun7Kwy/QZsE/ssAy0y4LxBbvua3PIbFsbRczWWnDdQ==\",\n             \"dev\": true\n         },\n         \"typescript-formatter\": {"}, {"sha": "dff535fcd1f599ac6651624468980fe3be4f5d3d", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -42,7 +42,7 @@\n         \"eslint\": \"^6.8.0\",\n         \"rollup\": \"^1.31.1\",\n         \"tslib\": \"^1.10.0\",\n-        \"typescript\": \"^3.7.5\",\n+        \"typescript\": \"^3.8.2\",\n         \"typescript-formatter\": \"^7.2.2\",\n         \"vsce\": \"^1.73.0\"\n     },"}, {"sha": "1c6ea399b1c73e65e21e499a33c6555a7fdea0db", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n \n+import * as ra from '../rust-analyzer-api';\n import { Ctx, Cmd } from '../ctx';\n \n // Shows status of rust-analyzer (for debugging)\n@@ -50,10 +51,7 @@ class TextDocumentContentProvider\n         const client = this.ctx.client;\n         if (!editor || !client) return '';\n \n-        return client.sendRequest<string>(\n-            'rust-analyzer/analyzerStatus',\n-            null,\n-        );\n+        return client.sendRequest(ra.analyzerStatus, null);\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {"}, {"sha": "23f2ef1d5e362c832092e532080c411b577134b8", "filename": "editors/code/src/commands/expand_macro.ts", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -26,12 +26,7 @@ export function expandMacro(ctx: Ctx): Cmd {\n     };\n }\n \n-interface ExpandedMacro {\n-    name: string;\n-    expansion: string;\n-}\n-\n-function codeFormat(expanded: ExpandedMacro): string {\n+function codeFormat(expanded: ra.ExpandedMacro): string {\n     let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n     result += '// ' + '='.repeat(result.length - 3);\n     result += '\\n\\n';\n@@ -54,14 +49,11 @@ class TextDocumentContentProvider\n         if (!editor || !client) return '';\n \n         const position = editor.selection.active;\n-        const request: lc.TextDocumentPositionParams = {\n+\n+        const expanded = await client.sendRequest(ra.expandMacro, {\n             textDocument: { uri: editor.document.uri.toString() },\n             position,\n-        };\n-        const expanded = await client.sendRequest<ExpandedMacro>(\n-            'rust-analyzer/expandMacro',\n-            request,\n-        );\n+        });\n \n         if (expanded == null) return 'Not available';\n "}, {"sha": "bdb7fc3b03b890daa3e3ff5525fd9957f5d6589c", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n import * as sourceChange from '../source_change';\n@@ -16,9 +17,7 @@ export * from './ssr';\n export * from './server_version';\n \n export function collectGarbage(ctx: Ctx): Cmd {\n-    return async () => {\n-        await ctx.client?.sendRequest<null>('rust-analyzer/collectGarbage', null);\n-    };\n+    return async () => ctx.client.sendRequest(ra.collectGarbage, null);\n }\n \n export function showReferences(ctx: Ctx): Cmd {\n@@ -36,13 +35,13 @@ export function showReferences(ctx: Ctx): Cmd {\n }\n \n export function applySourceChange(ctx: Ctx): Cmd {\n-    return async (change: sourceChange.SourceChange) => {\n+    return async (change: ra.SourceChange) => {\n         await sourceChange.applySourceChange(ctx, change);\n     };\n }\n \n export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n-    return async (changes: sourceChange.SourceChange[]) => {\n+    return async (changes: ra.SourceChange[]) => {\n         if (changes.length === 1) {\n             await sourceChange.applySourceChange(ctx, changes[0]);\n         } else if (changes.length > 0) {"}, {"sha": "de0614653d6b13d00b3bcf80db24f51153a5706a", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,27 +1,18 @@\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n-import { applySourceChange, SourceChange } from '../source_change';\n+import { applySourceChange } from '../source_change';\n \n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const request: JoinLinesParams = {\n+        const change = await client.sendRequest(ra.joinLines, {\n             range: client.code2ProtocolConverter.asRange(editor.selection),\n             textDocument: { uri: editor.document.uri.toString() },\n-        };\n-        const change = await client.sendRequest<SourceChange>(\n-            'rust-analyzer/joinLines',\n-            request,\n-        );\n+        });\n         await applySourceChange(ctx, change);\n     };\n }\n-\n-interface JoinLinesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n-}"}, {"sha": "a60776e2d4d15cf6452abad56d391b0d0ee65a8d", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -9,16 +9,12 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const request: FindMatchingBraceParams = {\n+        const response = await client.sendRequest(ra.findMatchingBrace, {\n             textDocument: { uri: editor.document.uri.toString() },\n             offsets: editor.selections.map(s =>\n                 client.code2ProtocolConverter.asPosition(s.active),\n             ),\n-        };\n-        const response = await client.sendRequest<lc.Position[]>(\n-            'rust-analyzer/findMatchingBrace',\n-            request,\n-        );\n+        });\n         editor.selections = editor.selections.map((sel, idx) => {\n             const active = client.protocol2CodeConverter.asPosition(\n                 response[idx],\n@@ -29,8 +25,3 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         editor.revealRange(editor.selection);\n     };\n }\n-\n-interface FindMatchingBraceParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    offsets: lc.Position[];\n-}"}, {"sha": "285849db70749dce4516b52b39c4b192725c4661", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,7 +1,7 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n-import { applySourceChange, SourceChange } from '../source_change';\n+import { applySourceChange } from '../source_change';\n import { Cmd, Ctx } from '../ctx';\n \n async function handleKeypress(ctx: Ctx) {\n@@ -10,22 +10,15 @@ async function handleKeypress(ctx: Ctx) {\n \n     if (!editor || !client) return false;\n \n-    const request: lc.TextDocumentPositionParams = {\n+    const change = await client.sendRequest(ra.onEnter, {\n         textDocument: { uri: editor.document.uri.toString() },\n         position: client.code2ProtocolConverter.asPosition(\n             editor.selection.active,\n         ),\n-    };\n-    const change = await client.sendRequest<undefined | SourceChange>(\n-        'rust-analyzer/onEnter',\n-        request,\n-    ).catch(\n-        (_error: any) => {\n-            // FIXME: switch to the more modern (?) typed request infrastructure\n-            // client.logFailedRequest(OnEnterRequest.type, error);\n-            return Promise.resolve(null);\n-        }\n-    );\n+    }).catch(_error => {\n+        // client.logFailedRequest(OnEnterRequest.type, error);\n+        return null;\n+    });\n     if (!change) return false;\n \n     await applySourceChange(ctx, change);"}, {"sha": "8f78ddd71c63ad19ed28342fde235a229d540543", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -9,16 +9,12 @@ export function parentModule(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const request: lc.TextDocumentPositionParams = {\n+        const response = await client.sendRequest(ra.parentModule, {\n             textDocument: { uri: editor.document.uri.toString() },\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n-        };\n-        const response = await client.sendRequest<lc.Location[]>(\n-            'rust-analyzer/parentModule',\n-            request,\n-        );\n+        });\n         const loc = response[0];\n         if (loc == null) return;\n "}, {"sha": "06b5134668649e12d565eba945efac5fe2c44cc5", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -14,16 +15,13 @@ export function run(ctx: Ctx): Cmd {\n         const textDocument: lc.TextDocumentIdentifier = {\n             uri: editor.document.uri.toString(),\n         };\n-        const params: RunnablesParams = {\n+\n+        const runnables = await client.sendRequest(ra.runnables, {\n             textDocument,\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n-        };\n-        const runnables = await client.sendRequest<Runnable[]>(\n-            'rust-analyzer/runnables',\n-            params,\n-        );\n+        });\n         const items: RunnableQuickPick[] = [];\n         if (prevRunnable) {\n             items.push(prevRunnable);\n@@ -48,7 +46,7 @@ export function run(ctx: Ctx): Cmd {\n }\n \n export function runSingle(ctx: Ctx): Cmd {\n-    return async (runnable: Runnable) => {\n+    return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n@@ -64,26 +62,13 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-interface RunnablesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    position?: lc.Position;\n-}\n-\n-interface Runnable {\n-    label: string;\n-    bin: string;\n-    args: string[];\n-    env: { [index: string]: string };\n-    cwd?: string;\n-}\n-\n class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;\n     public detail?: string | undefined;\n     public picked?: boolean | undefined;\n \n-    constructor(public runnable: Runnable) {\n+    constructor(public runnable: ra.Runnable) {\n         this.label = runnable.label;\n     }\n }\n@@ -96,7 +81,7 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-function createTask(spec: Runnable): vscode.Task {\n+function createTask(spec: ra.Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',"}, {"sha": "eee48c69352148d9da5ec2bdf4adbf44103b4406", "filename": "editors/code/src/commands/ssr.ts", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,6 +1,8 @@\n-import { Ctx, Cmd } from '../ctx';\n-import { applySourceChange, SourceChange } from '../source_change';\n import * as vscode from 'vscode';\n+import * as ra from \"../rust-analyzer-api\";\n+\n+import { Ctx, Cmd } from '../ctx';\n+import { applySourceChange } from '../source_change';\n \n export function ssr(ctx: Ctx): Cmd {\n     return async () => {\n@@ -21,16 +23,8 @@ export function ssr(ctx: Ctx): Cmd {\n \n         if (!request) return;\n \n-        const ssrRequest: SsrRequest = { arg: request };\n-        const change = await client.sendRequest<SourceChange>(\n-            'rust-analyzer/ssr',\n-            ssrRequest,\n-        );\n+        const change = await client.sendRequest(ra.ssr, { arg: request });\n \n         await applySourceChange(ctx, change);\n     };\n }\n-\n-interface SsrRequest {\n-    arg: string;\n-}"}, {"sha": "7218bfb90082f5e7ae118a7e76b3ed9bb6dfb8e1", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -61,13 +61,8 @@ function afterLs(f: () => void) {\n     setTimeout(f, 10);\n }\n \n-interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range?: lc.Range;\n-}\n \n-class TextDocumentContentProvider\n-    implements vscode.TextDocumentContentProvider {\n+class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n     uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n@@ -79,23 +74,15 @@ class TextDocumentContentProvider\n         const client = this.ctx.client;\n         if (!editor || !client) return '';\n \n-        let range: lc.Range | undefined;\n-\n         // When the range based query is enabled we take the range of the selection\n-        if (uri.query === 'range=true') {\n-            range = editor.selection.isEmpty\n-                ? undefined\n-                : client.code2ProtocolConverter.asRange(editor.selection);\n-        }\n+        const range = uri.query === 'range=true' && !editor.selection.isEmpty\n+            ? client.code2ProtocolConverter.asRange(editor.selection)\n+            : null;\n \n-        const request: SyntaxTreeParams = {\n+        return client.sendRequest(ra.syntaxTree, {\n             textDocument: { uri: editor.document.uri.toString() },\n             range,\n-        };\n-        return client.sendRequest<string>(\n-            'rust-analyzer/syntaxTree',\n-            request,\n-        );\n+        });\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {"}, {"sha": "3e0cbdc561699672245ad53a282ad53c0a426cac", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n@@ -8,29 +8,25 @@ import { sendRequestWithRetry } from './util';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-    const client = ctx.client;\n-    if (client != null) {\n-        client.onNotification(\n-            'rust-analyzer/publishDecorations',\n-            (params: PublishDecorationsParams) => {\n-                if (!ctx.config.highlightingOn) return;\n-\n-                const targetEditor = vscode.window.visibleTextEditors.find(\n-                    editor => {\n-                        const unescapedUri = unescape(\n-                            editor.document.uri.toString(),\n-                        );\n-                        // Unescaped URI looks like:\n-                        // file:///c:/Workspace/ra-test/src/main.rs\n-                        return unescapedUri === params.uri;\n-                    },\n-                );\n-                if (!targetEditor) return;\n \n-                highlighter.setHighlights(targetEditor, params.decorations);\n+    ctx.client.onNotification(ra.publishDecorations, params => {\n+        if (!ctx.config.highlightingOn) return;\n+\n+        const targetEditor = vscode.window.visibleTextEditors.find(\n+            editor => {\n+                const unescapedUri = unescape(\n+                    editor.document.uri.toString(),\n+                );\n+                // Unescaped URI looks like:\n+                // file:///c:/Workspace/ra-test/src/main.rs\n+                return unescapedUri === params.uri;\n             },\n         );\n-    }\n+        if (!targetEditor) return;\n+\n+        highlighter.setHighlights(targetEditor, params.decorations);\n+    });\n+\n \n     vscode.workspace.onDidChangeConfiguration(\n         _ => highlighter.removeHighlights(),\n@@ -45,13 +41,10 @@ export function activateHighlighting(ctx: Ctx) {\n             const client = ctx.client;\n             if (!client) return;\n \n-            const params: lc.TextDocumentIdentifier = {\n-                uri: editor.document.uri.toString(),\n-            };\n-            const decorations = await sendRequestWithRetry<Decoration[]>(\n+            const decorations = await sendRequestWithRetry(\n                 client,\n-                'rust-analyzer/decorationsRequest',\n-                params,\n+                ra.decorationsRequest,\n+                { uri: editor.document.uri.toString() },\n             );\n             highlighter.setHighlights(editor, decorations);\n         },\n@@ -60,17 +53,6 @@ export function activateHighlighting(ctx: Ctx) {\n     );\n }\n \n-interface PublishDecorationsParams {\n-    uri: string;\n-    decorations: Decoration[];\n-}\n-\n-interface Decoration {\n-    range: lc.Range;\n-    tag: string;\n-    bindingHash?: string;\n-}\n-\n // Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n function fancify(seed: string, shade: 'light' | 'dark') {\n     const random = randomU32Numbers(hashString(seed));\n@@ -108,7 +90,7 @@ class Highlighter {\n         this.decorations = null;\n     }\n \n-    public setHighlights(editor: vscode.TextEditor, highlights: Decoration[]) {\n+    public setHighlights(editor: vscode.TextEditor, highlights: ra.Decoration[]) {\n         const client = this.ctx.client;\n         if (!client) return;\n         // Initialize decorations if necessary"}, {"sha": "5951cf1b457dc5c157b4542d0c064f633b7b28f8", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { Ctx } from './ctx';\n import { log, sendRequestWithRetry } from './util';\n@@ -39,16 +39,6 @@ export function activateInlayHints(ctx: Ctx) {\n     void hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n }\n \n-interface InlayHintsParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-\n-interface InlayHint {\n-    range: vscode.Range;\n-    kind: \"TypeHint\" | \"ParameterHint\";\n-    label: string;\n-}\n-\n const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     after: {\n         color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n@@ -107,9 +97,9 @@ class HintsUpdater {\n         if (newHints == null) return;\n \n         const newTypeDecorations = newHints\n-            .filter(hint => hint.kind === 'TypeHint')\n+            .filter(hint => hint.kind === ra.InlayKind.TypeHint)\n             .map(hint => ({\n-                range: hint.range,\n+                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n                 renderOptions: {\n                     after: {\n                         contentText: `: ${hint.label}`,\n@@ -119,9 +109,9 @@ class HintsUpdater {\n         this.setTypeDecorations(editor, newTypeDecorations);\n \n         const newParameterDecorations = newHints\n-            .filter(hint => hint.kind === 'ParameterHint')\n+            .filter(hint => hint.kind === ra.InlayKind.ParameterHint)\n             .map(hint => ({\n-                range: hint.range,\n+                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n                 renderOptions: {\n                     before: {\n                         contentText: `${hint.label}: `,\n@@ -151,20 +141,15 @@ class HintsUpdater {\n         );\n     }\n \n-    private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n+    private async queryHints(documentUri: string): Promise<ra.InlayHint[] | null> {\n         this.pending.get(documentUri)?.cancel();\n \n         const tokenSource = new vscode.CancellationTokenSource();\n         this.pending.set(documentUri, tokenSource);\n \n-        const request: InlayHintsParams = { textDocument: { uri: documentUri } };\n+        const request = { textDocument: { uri: documentUri } };\n \n-        return sendRequestWithRetry<InlayHint[]>(\n-            this.ctx.client,\n-            'rust-analyzer/inlayHints',\n-            request,\n-            tokenSource.token\n-        )\n+        return sendRequestWithRetry(this.ctx.client, ra.inlayHints, request, tokenSource.token)\n             .catch(_ => null)\n             .finally(() => {\n                 if (!tokenSource.token.isCancellationRequested) {"}, {"sha": "b1b5a3485ccc7a1436875acdaafef073222c809c", "filename": "editors/code/src/installation/fetch_artifact_release_info.ts", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -4,41 +4,61 @@ import { log } from \"../util\";\n \n const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n \n-\n /**\n- * Fetches the release with `releaseTag` (or just latest release when not specified)\n- * from GitHub `repo` and returns metadata about `artifactFileName` shipped with\n- * this release or `null` if no such artifact was published.\n+ * Fetches the release with `releaseTag` from GitHub `repo` and\n+ * returns metadata about `artifactFileName` shipped with\n+ * this release.\n+ *\n+ * @throws Error upon network failure or if no such repository, release, or artifact exists.\n  */\n export async function fetchArtifactReleaseInfo(\n-    repo: GithubRepo, artifactFileName: string, releaseTag?: string\n-): Promise<null | ArtifactReleaseInfo> {\n+    repo: GithubRepo,\n+    artifactFileName: string,\n+    releaseTag: string\n+): Promise<ArtifactReleaseInfo> {\n \n     const repoOwner = encodeURIComponent(repo.owner);\n     const repoName = encodeURIComponent(repo.name);\n \n-    const apiEndpointPath = releaseTag\n-        ? `/repos/${repoOwner}/${repoName}/releases/tags/${releaseTag}`\n-        : `/repos/${repoOwner}/${repoName}/releases/latest`;\n+    const apiEndpointPath = `/repos/${repoOwner}/${repoName}/releases/tags/${releaseTag}`;\n \n     const requestUrl = GITHUB_API_ENDPOINT_URL + apiEndpointPath;\n \n-    // We skip runtime type checks for simplicity (here we cast from `any` to `GithubRelease`)\n-\n     log.debug(\"Issuing request for released artifacts metadata to\", requestUrl);\n \n-    // FIXME: handle non-ok response\n-    const response: GithubRelease = await fetch(requestUrl, {\n-        headers: { Accept: \"application/vnd.github.v3+json\" }\n-    })\n-        .then(res => res.json());\n+    const response = await fetch(requestUrl, { headers: { Accept: \"application/vnd.github.v3+json\" } });\n \n-    const artifact = response.assets.find(artifact => artifact.name === artifactFileName);\n+    if (!response.ok) {\n+        log.error(\"Error fetching artifact release info\", {\n+            requestUrl,\n+            releaseTag,\n+            artifactFileName,\n+            response: {\n+                headers: response.headers,\n+                status: response.status,\n+                body: await response.text(),\n+            }\n+        });\n+\n+        throw new Error(\n+            `Got response ${response.status} when trying to fetch ` +\n+            `\"${artifactFileName}\" artifact release info for ${releaseTag} release`\n+        );\n+    }\n \n-    if (!artifact) return null;\n+    // We skip runtime type checks for simplicity (here we cast from `any` to `GithubRelease`)\n+    const release: GithubRelease = await response.json();\n+\n+    const artifact = release.assets.find(artifact => artifact.name === artifactFileName);\n+\n+    if (!artifact) {\n+        throw new Error(\n+            `Artifact ${artifactFileName} was not found in ${release.name} release!`\n+        );\n+    }\n \n     return {\n-        releaseName: response.name,\n+        releaseName: release.name,\n         downloadUrl: artifact.browser_download_url\n     };\n "}, {"sha": "cb5e568448aedf979afd8fe3c1525eb6f4d11a34", "filename": "editors/code/src/installation/server.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -63,7 +63,7 @@ export async function ensureServerBinary(source: null | BinarySource): Promise<n\n \n async function downloadServer(source: BinarySource.GithubRelease): Promise<boolean> {\n     try {\n-        const releaseInfo = (await fetchArtifactReleaseInfo(source.repo, source.file, source.version))!;\n+        const releaseInfo = await fetchArtifactReleaseInfo(source.repo, source.file, source.version);\n \n         await downloadArtifact(releaseInfo, source.file, source.dir, \"language server\");\n         await setServerVersion(source.storage, releaseInfo.releaseName);"}, {"sha": "c5a010e94722075a7cb8d4857135e78a51c6f322", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -0,0 +1,117 @@\n+/**\n+ * This file mirrors `crates/rust-analyzer/src/req.rs` declarations.\n+ */\n+\n+import * as lc from \"vscode-languageclient\";\n+\n+type Option<T> = null | T;\n+type Vec<T> = T[];\n+type FxHashMap<K extends PropertyKey, V> = Record<K, V>;\n+\n+function request<TParams, TResult>(method: string) {\n+    return new lc.RequestType<TParams, TResult, unknown>(`rust-analyzer/${method}`);\n+}\n+function notification<TParam>(method: string) {\n+    return new lc.NotificationType<TParam>(method);\n+}\n+\n+\n+export const analyzerStatus = request<null, string>(\"analyzerStatus\");\n+\n+\n+export const collectGarbage = request<null, null>(\"collectGarbage\");\n+\n+\n+export interface SyntaxTreeParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: Option<lc.Range>;\n+}\n+export const syntaxTree = request<SyntaxTreeParams, string>(\"syntaxTree\");\n+\n+\n+export interface ExpandMacroParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: Option<lc.Position>;\n+}\n+export interface ExpandedMacro {\n+    name: string;\n+    expansion: string;\n+}\n+export const expandMacro = request<ExpandMacroParams, Option<ExpandedMacro>>(\"expandMacro\");\n+\n+\n+export interface FindMatchingBraceParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    offsets: Vec<lc.Position>;\n+}\n+export const findMatchingBrace = request<FindMatchingBraceParams, Vec<lc.Position>>(\"findMatchingBrace\");\n+\n+\n+export interface PublishDecorationsParams {\n+    uri: string;\n+    decorations: Vec<Decoration>;\n+}\n+export interface Decoration {\n+    range: lc.Range;\n+    tag: string;\n+    bindingHash: Option<string>;\n+}\n+export const decorationsRequest = request<lc.TextDocumentIdentifier, Vec<Decoration>>(\"decorationsRequest\");\n+\n+\n+export const parentModule = request<lc.TextDocumentPositionParams, Vec<lc.Location>>(\"parentModule\");\n+\n+\n+export interface JoinLinesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n+}\n+export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n+\n+\n+export const onEnter = request<lc.TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n+\n+export interface RunnablesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: Option<lc.Position>;\n+}\n+export interface Runnable {\n+    range: lc.Range;\n+    label: string;\n+    bin: string;\n+    args: Vec<string>;\n+    env: FxHashMap<string, string>;\n+    cwd: Option<string>;\n+}\n+export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n+\n+\n+export const enum InlayKind {\n+    TypeHint = \"TypeHint\",\n+    ParameterHint = \"ParameterHint\",\n+}\n+export interface InlayHint {\n+    range: lc.Range;\n+    kind: InlayKind;\n+    label: string;\n+}\n+export interface InlayHintsParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+}\n+export const inlayHints = request<InlayHintsParams, Vec<InlayHint>>(\"inlayHints\");\n+\n+\n+export interface SsrParams {\n+    arg: string;\n+}\n+export const ssr = request<SsrParams, SourceChange>(\"ssr\");\n+\n+\n+export const publishDecorations = notification<PublishDecorationsParams>(\"publishDecorations\");\n+\n+\n+export interface SourceChange {\n+    label: string;\n+    workspaceEdit: lc.WorkspaceEdit;\n+    cursorPosition: Option<lc.TextDocumentPositionParams>;\n+}"}, {"sha": "399a150c6544037d2f2ade16851f6748a4541e06", "filename": "editors/code/src/source_change.ts", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -1,15 +1,10 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { Ctx } from './ctx';\n \n-export interface SourceChange {\n-    label: string;\n-    workspaceEdit: lc.WorkspaceEdit;\n-    cursorPosition?: lc.TextDocumentPositionParams;\n-}\n-\n-export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n+export async function applySourceChange(ctx: Ctx, change: ra.SourceChange) {\n     const client = ctx.client;\n     if (!client) return;\n "}, {"sha": "68c2a94d0455833c6fd3cfe61b64295a721d69ae", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39bd3b2bd719289a8dd03fb52d5060cdb10f9169/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=39bd3b2bd719289a8dd03fb52d5060cdb10f9169", "patch": "@@ -20,21 +20,21 @@ export const log = {\n     }\n };\n \n-export async function sendRequestWithRetry<R>(\n+export async function sendRequestWithRetry<TParam, TRet>(\n     client: lc.LanguageClient,\n-    method: string,\n-    param: unknown,\n+    reqType: lc.RequestType<TParam, TRet, unknown>,\n+    param: TParam,\n     token?: vscode.CancellationToken,\n-): Promise<R> {\n+): Promise<TRet> {\n     for (const delay of [2, 4, 6, 8, 10, null]) {\n         try {\n             return await (token\n-                ? client.sendRequest(method, param, token)\n-                : client.sendRequest(method, param)\n+                ? client.sendRequest(reqType, param, token)\n+                : client.sendRequest(reqType, param)\n             );\n         } catch (error) {\n             if (delay === null) {\n-                log.error(\"LSP request timed out\", { method, param, error });\n+                log.error(\"LSP request timed out\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -43,7 +43,7 @@ export async function sendRequestWithRetry<R>(\n             }\n \n             if (error.code !== lc.ErrorCodes.ContentModified) {\n-                log.error(\"LSP request failed\", { method, param, error });\n+                log.error(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n "}]}