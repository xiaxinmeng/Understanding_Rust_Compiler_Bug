{"sha": "33167f7decfdc70c9dca6c41f80883f12c13cfbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMTY3ZjdkZWNmZGM3MGM5ZGNhNmM0MWY4MDg4M2YxMmMxM2NmYmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-10T11:54:03Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-10T14:01:51Z"}, "message": "Adjust function signatures to allow for vecs being immediate\n\nSome code was relying on vectors being implicitly by-reference (as\nnon-immediate value). This adds the necessary &&-sigils.\n\nCloses #1021", "tree": {"sha": "6a7b610fe6af5bd7e1ff81c54e63a580505f32d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7b610fe6af5bd7e1ff81c54e63a580505f32d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33167f7decfdc70c9dca6c41f80883f12c13cfbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33167f7decfdc70c9dca6c41f80883f12c13cfbc", "html_url": "https://github.com/rust-lang/rust/commit/33167f7decfdc70c9dca6c41f80883f12c13cfbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33167f7decfdc70c9dca6c41f80883f12c13cfbc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bae8fea5943a0b95a1a9be13a8155ee45418b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bae8fea5943a0b95a1a9be13a8155ee45418b7", "html_url": "https://github.com/rust-lang/rust/commit/b4bae8fea5943a0b95a1a9be13a8155ee45418b7"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "fcf76e6e423b75530497e92a1f907c1ffc95d371", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -101,7 +101,7 @@ fn get_rpaths_relative_to_output(os: session::os,\n fn get_rpath_relative_to_output(os: session::os,\n                                 cwd: fs::path,\n                                 output: fs::path,\n-                                lib: fs::path) -> str {\n+                                &&lib: fs::path) -> str {\n     // Mac doesn't appear to support $ORIGIN\n     let prefix = alt os {\n         session::os_linux. { \"$ORIGIN\" + fs::path_sep() }\n@@ -154,7 +154,7 @@ fn get_absolute_rpaths(cwd: fs::path, libs: [fs::path]) -> [str] {\n     vec::map(bind get_absolute_rpath(cwd, _), libs)\n }\n \n-fn get_absolute_rpath(cwd: fs::path, lib: fs::path) -> str {\n+fn get_absolute_rpath(cwd: fs::path, &&lib: fs::path) -> str {\n     fs::dirname(get_absolute(cwd, lib))\n }\n "}, {"sha": "c7084138c98a0ace01198185c44824d362aa038b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -409,7 +409,7 @@ fn build_session(sopts: @session::options) -> session::session {\n                          none, 0u, filesearch);\n }\n \n-fn parse_pretty(sess: session::session, name: str) -> pp_mode {\n+fn parse_pretty(sess: session::session, &&name: str) -> pp_mode {\n     if str::eq(name, \"normal\") {\n         ret ppm_normal;\n     } else if str::eq(name, \"expanded\") {"}, {"sha": "676f77c95b3d49b8a01678a89dd43bb645d1a6bc", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -98,7 +98,7 @@ fn in_cfg(cfg: ast::crate_cfg, attrs: [ast::attribute]) -> bool {\n     // so we can match against them. This is the list of configurations for\n     // which the item is valid\n     let item_cfg_metas = {\n-        fn extract_metas(inner_items: [@ast::meta_item],\n+        fn extract_metas(&&inner_items: [@ast::meta_item],\n                          &&cfg_item: @ast::meta_item) -> [@ast::meta_item] {\n             alt cfg_item.node {\n               ast::meta_list(name, items) {"}, {"sha": "fdb2d72da6f3f9015c040d5bc395305828c18084", "filename": "src/comp/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcommon.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -67,7 +67,7 @@ const tag_items_data_item_inlineness: uint = 0x27u;\n // djb's cdb hashes.\n fn hash_node_id(&&node_id: int) -> uint { ret 177573u ^ (node_id as uint); }\n \n-fn hash_path(s: str) -> uint {\n+fn hash_path(&&s: str) -> uint {\n     let h = 5381u;\n     for ch: u8 in str::bytes(s) { h = (h << 5u) + h ^ (ch as uint); }\n     ret h;"}, {"sha": "7850b4139a1aa4b6b428a79e807be05cf09f0f4c", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -425,7 +425,7 @@ fn encode_index<T>(ebml_w: ebml::writer, buckets: [@[entry<T>]],\n     ebml::end_tag(ebml_w);\n }\n \n-fn write_str(writer: io::writer, s: str) { writer.write_str(s); }\n+fn write_str(writer: io::writer, &&s: str) { writer.write_str(s); }\n \n fn write_int(writer: io::writer, &&n: int) {\n     writer.write_be_uint(n as uint, 4u);"}, {"sha": "f2995f58b6c6aaa95f4e5e8f480f6243aa8e8bef", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -1400,7 +1400,7 @@ fn add_name(ch: checker, sp: span, name: ident) {\n     ch.seen += [name];\n }\n \n-fn ident_id(i: ident) -> ident { ret i; }\n+fn ident_id(&&i: ident) -> ident { ret i; }\n \n fn ensure_unique<T>(e: env, sp: span, elts: [T], id: fn(T) -> ident,\n                     kind: str) {"}, {"sha": "8e2fa8fedf048cdf15f0ba64745ba196e459d4ef", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -5633,7 +5633,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n                    takes_argv: bool) -> ValueRef {\n         let unit_ty = ty::mk_str(ccx.tcx);\n         let vecarg_ty: ty::arg =\n-            {mode: ast::by_ref,\n+            {mode: ast::by_val,\n              ty: ty::mk_vec(ccx.tcx, {ty: unit_ty, mut: ast::imm})};\n         // FIXME: mk_nil should have a postcondition\n         let nt = ty::mk_nil(ccx.tcx);\n@@ -5653,14 +5653,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let lltaskarg = llvm::LLVMGetParam(llfdecl, 1u);\n         let llenvarg = llvm::LLVMGetParam(llfdecl, 2u);\n         let args = [lloutputarg, lltaskarg, llenvarg];\n-        if takes_argv {\n-            let llargvarg = llvm::LLVMGetParam(llfdecl, 3u);\n-            // The runtime still passes the arg vector by value, this kludge\n-            // makes sure it becomes a pointer (to a pointer to a vec).\n-            let minus_ptr = llvm::LLVMGetElementType(val_ty(llargvarg));\n-            llargvarg = PointerCast(bcx, llargvarg, minus_ptr);\n-            args += [do_spill_noroot(bcx, llargvarg)];\n-        }\n+        if takes_argv { args += [llvm::LLVMGetParam(llfdecl, 3u)]; }\n         Call(bcx, main_llfn, args);\n         build_return(bcx);\n \n@@ -5944,7 +5937,7 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n \n fn item_path(item: @ast::item) -> [str] { ret [item.ident]; }\n \n-fn collect_native_item(ccx: @crate_ctxt, i: @ast::native_item, pt: [str],\n+fn collect_native_item(ccx: @crate_ctxt, i: @ast::native_item, &&pt: [str],\n                        _v: vt<[str]>) {\n     alt i.node {\n       ast::native_item_fn(_, _, _) {\n@@ -5956,7 +5949,8 @@ fn collect_native_item(ccx: @crate_ctxt, i: @ast::native_item, pt: [str],\n     }\n }\n \n-fn collect_item_1(ccx: @crate_ctxt, i: @ast::item, pt: [str], v: vt<[str]>) {\n+fn collect_item_1(ccx: @crate_ctxt, i: @ast::item, &&pt: [str],\n+                  v: vt<[str]>) {\n     visit::visit_item(i, pt + item_path(i), v);\n     alt i.node {\n       ast::item_const(_, _) {\n@@ -5977,7 +5971,8 @@ fn collect_item_1(ccx: @crate_ctxt, i: @ast::item, pt: [str], v: vt<[str]>) {\n     }\n }\n \n-fn collect_item_2(ccx: @crate_ctxt, i: @ast::item, pt: [str], v: vt<[str]>) {\n+fn collect_item_2(ccx: @crate_ctxt, i: @ast::item, &&pt: [str],\n+                  v: vt<[str]>) {\n     let new_pt = pt + item_path(i);\n     visit::visit_item(i, new_pt, v);\n     alt i.node {\n@@ -6018,7 +6013,7 @@ fn collect_items(ccx: @crate_ctxt, crate: @ast::crate) {\n     visit::visit_crate(*crate, [], visit::mk_vt(visitor2));\n }\n \n-fn collect_tag_ctor(ccx: @crate_ctxt, i: @ast::item, pt: [str],\n+fn collect_tag_ctor(ccx: @crate_ctxt, i: @ast::item, &&pt: [str],\n                     v: vt<[str]>) {\n     let new_pt = pt + item_path(i);\n     visit::visit_item(i, new_pt, v);\n@@ -6044,7 +6039,8 @@ fn collect_tag_ctors(ccx: @crate_ctxt, crate: @ast::crate) {\n \n \n // The constant translation pass.\n-fn trans_constant(ccx: @crate_ctxt, it: @ast::item, pt: [str], v: vt<[str]>) {\n+fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n+                  v: vt<[str]>) {\n     let new_pt = pt + item_path(it);\n     visit::visit_item(it, new_pt, v);\n     alt it.node {"}, {"sha": "656ee3663afffcaa3cdbc3267b429bcc333b8110", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -245,7 +245,7 @@ fn follow_for_trans(cx: ext_ctxt, mmaybe: option::t<arb_depth<matchable>>,\n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n iter free_vars(b: bindings, e: @expr) -> ident {\n     let idents: hashmap<ident, ()> = new_str_hash::<()>();\n-    fn mark_ident(i: ident, _fld: ast_fold, b: bindings,\n+    fn mark_ident(&&i: ident, _fld: ast_fold, b: bindings,\n                   idents: hashmap<ident, ()>) -> ident {\n         if b.contains_key(i) { idents.insert(i, ()); }\n         ret i;\n@@ -325,7 +325,7 @@ fn transcribe_exprs(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n \n // substitute, in a position that's required to be an ident\n fn transcribe_ident(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n-                    i: ident, _fld: ast_fold) -> ident {\n+                    &&i: ident, _fld: ast_fold) -> ident {\n     ret alt follow_for_trans(cx, b.find(i), idx_path) {\n           some(match_ident(a_id)) { a_id.node }\n           some(m) { match_error(cx, m, \"an identifier\") }"}, {"sha": "4a81ca1da0efd837cc257935e46360a66a39ed17", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -39,7 +39,7 @@ type ast_fold_precursor =\n      fold_mod: fn(_mod, ast_fold) -> _mod,\n      fold_native_mod: fn(native_mod, ast_fold) -> native_mod,\n      fold_variant: fn(variant_, ast_fold) -> variant_,\n-     fold_ident: fn(ident, ast_fold) -> ident,\n+     fold_ident: fn(&&ident, ast_fold) -> ident,\n      fold_path: fn(path_, ast_fold) -> path_,\n      fold_local: fn(local_, ast_fold) -> local_,\n      map_exprs: fn(fn(&&@expr) -> @expr, [@expr]) -> [@expr],\n@@ -66,7 +66,7 @@ type a_f =\n      fold_mod: fn(_mod) -> _mod,\n      fold_native_mod: fn(native_mod) -> native_mod,\n      fold_variant: fn(variant) -> variant,\n-     fold_ident: fn(ident) -> ident,\n+     fold_ident: fn(&&ident) -> ident,\n      fold_path: fn(path) -> path,\n      fold_local: fn(&&@local) -> @local,\n      map_exprs: fn(fn(&&@expr) -> @expr, [@expr]) -> [@expr],\n@@ -96,7 +96,7 @@ fn nf_fn_dummy(_f: _fn) -> _fn { fail; }\n fn nf_mod_dummy(_m: _mod) -> _mod { fail; }\n fn nf_native_mod_dummy(_n: native_mod) -> native_mod { fail; }\n fn nf_variant_dummy(_v: variant) -> variant { fail; }\n-fn nf_ident_dummy(_i: ident) -> ident { fail; }\n+fn nf_ident_dummy(&&_i: ident) -> ident { fail; }\n fn nf_path_dummy(_p: path) -> path { fail; }\n fn nf_obj_field_dummy(_o: obj_field) -> obj_field { fail; }\n fn nf_local_dummy(&&_o: @local) -> @local { fail; }\n@@ -471,7 +471,7 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n     ret {name: v.name, args: vec::map(fold_variant_arg, v.args), id: v.id};\n }\n \n-fn noop_fold_ident(i: ident, _fld: ast_fold) -> ident { ret i; }\n+fn noop_fold_ident(&&i: ident, _fld: ast_fold) -> ident { ret i; }\n \n fn noop_fold_path(p: path_, fld: ast_fold) -> path_ {\n     ret {global: p.global,\n@@ -667,7 +667,7 @@ fn make_fold(afp: ast_fold_precursor) -> @foldres {\n        variant {\n         ret {node: afp.fold_variant(x.node, f), span: afp.new_span(x.span)};\n     }\n-    fn f_ident(afp: ast_fold_precursor, f: ast_fold, x: ident) -> ident {\n+    fn f_ident(afp: ast_fold_precursor, f: ast_fold, &&x: ident) -> ident {\n         ret afp.fold_ident(x, f);\n     }\n     fn f_path(afp: ast_fold_precursor, f: ast_fold, x: path) -> path {"}, {"sha": "f20dc407ec8a5bf87363ad85fb82e845f8a047e4", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -1277,7 +1277,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       ast::view_item_export(ids, _) {\n         head(s, \"export\");\n         commasep(s, inconsistent, ids,\n-                 fn (s: ps, w: ast::ident) { word(s.s, w) });\n+                 fn (s: ps, &&w: ast::ident) { word(s.s, w) });\n       }\n     }\n     word(s.s, \";\");"}, {"sha": "06a327c507fe0fd60bd6a9d693951a1fd094a069", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -276,7 +276,7 @@ fn make_run_args(config: config, _props: test_props, testfile: str) ->\n \n fn split_maybe_args(argstr: option::t<str>) -> [str] {\n     fn rm_whitespace(v: [str]) -> [str] {\n-        fn flt(s: str) -> option::t<str> {\n+        fn flt(&&s: str) -> option::t<str> {\n             if !is_whitespace(s) { option::some(s) } else { option::none }\n         }\n "}, {"sha": "a3c8a5486920d5439e886e85e706de70ec474c97", "filename": "src/lib/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -11,11 +11,11 @@ native \"rust\" mod rustrt {\n     fn rust_str_push(&s: str, ch: u8);\n }\n \n-fn eq(a: str, b: str) -> bool { a == b }\n+fn eq(&&a: str, &&b: str) -> bool { a == b }\n \n-fn lteq(a: str, b: str) -> bool { a <= b }\n+fn lteq(&&a: str, &&b: str) -> bool { a <= b }\n \n-fn hash(s: str) -> uint {\n+fn hash(&&s: str) -> uint {\n     // djb hash.\n     // FIXME: replace with murmur.\n "}, {"sha": "1edfff5828d85d8b842a960041d963a4e6641b8e", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -29,7 +29,7 @@ import std::comm::port;\n import std::comm::recv;\n import std::comm::send;\n \n-fn map(filename: [u8], emit: map_reduce::putter<[u8], int>) {\n+fn map(&&filename: [u8], emit: map_reduce::putter<[u8], int>) {\n     let f = io::file_reader(str::unsafe_from_bytes(filename));\n \n     while true {\n@@ -40,7 +40,7 @@ fn map(filename: [u8], emit: map_reduce::putter<[u8], int>) {\n     }\n }\n \n-fn reduce(_word: [u8], get: map_reduce::getter<int>) {\n+fn reduce(&&_word: [u8], get: map_reduce::getter<int>) {\n     let count = 0;\n \n     while true { alt get() { some(_) { count += 1; } none. { break; } } }"}, {"sha": "822d1fc4b302f31fed5ba16710c84f2915da4174", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -6,7 +6,7 @@ import std::uint;\n \n fn main() {\n     let count = @mutable 0u;\n-    let hash = bind fn (_s: [@str], count: @mutable uint) -> uint {\n+    let hash = bind fn (&&_s: [@str], count: @mutable uint) -> uint {\n         *count += 1u;\n         if *count == 10u {\n             fail;\n@@ -15,7 +15,7 @@ fn main() {\n         }\n     } (_, count);\n \n-    fn eq(s: [@str], t: [@str]) -> bool {\n+    fn eq(&&s: [@str], &&t: [@str]) -> bool {\n         ret s == t;\n     }\n "}, {"sha": "c4d3b51cc28262bc545c0201d5b5dd43c2e5a104", "filename": "src/test/run-pass/bind-parameterized-args-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33167f7decfdc70c9dca6c41f80883f12c13cfbc/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs?ref=33167f7decfdc70c9dca6c41f80883f12c13cfbc", "patch": "@@ -3,5 +3,5 @@ fn main() {\n \n     let y = bind echo(42, _);\n \n-    y(fn (i: str) { });\n+    y(fn(&&i: str) { });\n }"}]}