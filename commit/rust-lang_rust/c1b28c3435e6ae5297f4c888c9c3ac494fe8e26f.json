{"sha": "c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "node_id": "C_kwDOAAsO6NoAKGMxYjI4YzM0MzVlNmFlNTI5N2Y0Yzg4OGM5YzNhYzQ5NGZlOGUyNmY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-03-30T12:07:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-30T12:07:02Z"}, "message": "Rollup merge of #109748 - compiler-errors:new-solver-discr-kind-ice, r=lcnr\n\nDon't ICE on `DiscriminantKind` projection in new solver\n\nAs title says, since we now actually call `Ty::discriminant_kind` on placeholder types \ud83d\ude03\n\nAlso drive-by simplify `Pointee::Metadata` projection logic, and fix the UI test because the `<T as Pointee>::Metadata` tests weren't actually exercising the new projection logic, since we still eagerly normalize (which hits `project.rs` in the old solver) in HIR typeck.\n\nr? `@lcnr` tho feel free to re-roll, this pr is very low-priority and not super specific to the new trait solver.\n\nFixes compiler-errors/next-solver-hir-issues#14", "tree": {"sha": "fb2a1d38ff3ab22951f8df96d8a56f2d1b30da79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb2a1d38ff3ab22951f8df96d8a56f2d1b30da79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJXtmCRBK7hj4Ov3rIwAAynwIADXxv4/o+szUo0htoTqSAMqa\nVLx8Y+vjogpCBkFwJPc203aBy0GrJNspG03dr8GD1h8ESGwlTCizW2Piy7fk305W\nppnCWTl5ImjTY/QEBtvSAaWBHhQqJxD69XHDgKlWG3EEEJE+RW+fIi2o1yR1GVzI\nHSDhjjHWP0MjRg2DDuqIqqEQQcxSxzDD1ju+9FIKLKK4bZRfgrK68yvTn3u9IlRp\n61sDGZAYq9vxuMCHLQqzNOZZohNf+FlEvyG+ptEZ5GTGq2QCT/1DwF063qHcGbG5\nZ53EnBnn+chAc6c9LGWkEcnb54B7Z6Q9PR1CGr28aO2GL44MbrRw7MrC6ayBkLM=\n=WbJu\n-----END PGP SIGNATURE-----\n", "payload": "tree fb2a1d38ff3ab22951f8df96d8a56f2d1b30da79\nparent ae9c1bf0903a75e6f7229425ce6b0f2d9f9d8e7a\nparent 321a5dba9ee42e2950bbff14c7dfb38e07d21bc4\nauthor Yuki Okushi <jtitor@2k36.org> 1680178022 +0900\ncommitter GitHub <noreply@github.com> 1680178022 +0900\n\nRollup merge of #109748 - compiler-errors:new-solver-discr-kind-ice, r=lcnr\n\nDon't ICE on `DiscriminantKind` projection in new solver\n\nAs title says, since we now actually call `Ty::discriminant_kind` on placeholder types \ud83d\ude03\n\nAlso drive-by simplify `Pointee::Metadata` projection logic, and fix the UI test because the `<T as Pointee>::Metadata` tests weren't actually exercising the new projection logic, since we still eagerly normalize (which hits `project.rs` in the old solver) in HIR typeck.\n\nr? `@lcnr` tho feel free to re-roll, this pr is very low-priority and not super specific to the new trait solver.\n\nFixes compiler-errors/next-solver-hir-issues#14\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "html_url": "https://github.com/rust-lang/rust/commit/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae9c1bf0903a75e6f7229425ce6b0f2d9f9d8e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9c1bf0903a75e6f7229425ce6b0f2d9f9d8e7a", "html_url": "https://github.com/rust-lang/rust/commit/ae9c1bf0903a75e6f7229425ce6b0f2d9f9d8e7a"}, {"sha": "321a5dba9ee42e2950bbff14c7dfb38e07d21bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/321a5dba9ee42e2950bbff14c7dfb38e07d21bc4", "html_url": "https://github.com/rust-lang/rust/commit/321a5dba9ee42e2950bbff14c7dfb38e07d21bc4"}], "stats": {"total": 109, "additions": 94, "deletions": 15}, "files": [{"sha": "fd2aa10caa23a341eeeb49fd14ccdf4e6186dd98", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "patch": "@@ -344,10 +344,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         LangItem::Sized,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n                     ));\n-\n                     ecx.add_goal(goal.with(tcx, sized_predicate));\n-                    ecx.eq(goal.param_env, goal.predicate.term, tcx.types.unit.into())?;\n-                    return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes);\n+                    tcx.types.unit\n                 }\n \n                 ty::Adt(def, substs) if def.is_struct() => {\n@@ -483,9 +481,49 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let discriminant = goal.predicate.self_ty().discriminant_ty(ecx.tcx());\n+        let self_ty = goal.predicate.self_ty();\n+        let discriminant_ty = match *self_ty.kind() {\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(..)\n+            | ty::Uint(..)\n+            | ty::Float(..)\n+            | ty::Array(..)\n+            | ty::RawPtr(..)\n+            | ty::Ref(..)\n+            | ty::FnDef(..)\n+            | ty::FnPtr(..)\n+            | ty::Closure(..)\n+            | ty::Infer(ty::IntVar(..) | ty::FloatVar(..))\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Never\n+            | ty::Foreign(..)\n+            | ty::Adt(_, _)\n+            | ty::Str\n+            | ty::Slice(_)\n+            | ty::Dynamic(_, _, _)\n+            | ty::Tuple(_)\n+            | ty::Error(_) => self_ty.discriminant_ty(ecx.tcx()),\n+\n+            // We do not call `Ty::discriminant_ty` on alias, param, or placeholder\n+            // types, which return `<self_ty as DiscriminantKind>::Discriminant`\n+            // (or ICE in the case of placeholders). Projecting a type to itself\n+            // is never really productive.\n+            ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n+                return Err(NoSolution);\n+            }\n+\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\n+                \"unexpected self ty `{:?}` when normalizing `<T as DiscriminantKind>::Discriminant`\",\n+                goal.predicate.self_ty()\n+            ),\n+        };\n+\n         ecx.probe(|ecx| {\n-            ecx.eq(goal.param_env, goal.predicate.term, discriminant.into())?;\n+            ecx.eq(goal.param_env, goal.predicate.term, discriminant_ty.into())?;\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }"}, {"sha": "e319ddea106bc792809eb51117fafb197b1db9df", "filename": "tests/ui/traits/new-solver/param-discr-kind.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs?ref=c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn foo<T>(x: T) {\n+    std::mem::discriminant(&x);\n+}\n+\n+fn main() {}"}, {"sha": "93c0542ace4bff372fd47f37bbe57b2e9ef1207e", "filename": "tests/ui/traits/new-solver/pointee.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs?ref=c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "patch": "@@ -7,17 +7,15 @@ use std::ptr::{DynMetadata, Pointee};\n trait Trait<U> {}\n struct MyDst<T: ?Sized>(T);\n \n-fn works<T>() {\n-    let _: <T as Pointee>::Metadata = ();\n-    let _: <[T] as Pointee>::Metadata = 1_usize;\n-    let _: <str as Pointee>::Metadata = 1_usize;\n-    let _: <dyn Trait<T> as Pointee>::Metadata = give::<DynMetadata<dyn Trait<T>>>();\n-    let _: <MyDst<T> as Pointee>::Metadata = ();\n-    let _: <((((([u8],),),),),) as Pointee>::Metadata = 1_usize;\n-}\n+fn meta_is<T: Pointee<Metadata = U> + ?Sized, U>() {}\n \n-fn give<U>() -> U {\n-    loop {}\n+fn works<T>() {\n+    meta_is::<T, ()>();\n+    meta_is::<[T], usize>();\n+    meta_is::<str, usize>();\n+    meta_is::<dyn Trait<T>, DynMetadata<dyn Trait<T>>>();\n+    meta_is::<MyDst<T>, ()>();\n+    meta_is::<((((([u8],),),),),), usize>();\n }\n \n fn main() {}"}, {"sha": "20296b287b17e8f419125860ea55e8d9bd697f95", "filename": "tests/ui/traits/new-solver/projection-discr-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs?ref=c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// Check that `<T::Assoc as DiscriminantKind>::Discriminant` doesn't normalize\n+// to itself and cause overflow/ambiguity.\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+fn needs_bar(_: impl Bar) {}\n+\n+fn foo<T: Foo>(x: T::Assoc) {\n+    needs_bar(std::mem::discriminant(&x));\n+    //~^ ERROR the trait bound `Discriminant<<T as Foo>::Assoc>: Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "03e28f993e25dccf2ad5fb393ca08d9dd39c72aa", "filename": "tests/ui/traits/new-solver/projection-discr-kind.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr?ref=c1b28c3435e6ae5297f4c888c9c3ac494fe8e26f", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `Discriminant<<T as Foo>::Assoc>: Bar` is not satisfied\n+  --> $DIR/projection-discr-kind.rs:14:15\n+   |\n+LL |     needs_bar(std::mem::discriminant(&x));\n+   |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `Discriminant<<T as Foo>::Assoc>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_bar`\n+  --> $DIR/projection-discr-kind.rs:11:22\n+   |\n+LL | fn needs_bar(_: impl Bar) {}\n+   |                      ^^^ required by this bound in `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}