{"sha": "2a201336ed2f253cd22561477764989050acb889", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjAxMzM2ZWQyZjI1M2NkMjI1NjE0Nzc3NjQ5ODkwNTBhY2I4ODk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-13T01:52:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T01:52:46Z"}, "message": "Rollup merge of #67642 - Mark-Simulacrum:relax-bounds, r=Amanieu\n\nRelax bounds on HashMap/HashSet\n\nThese APIs changed from the old bound listed to the new bound (possibly empty):\n\nK: Hash + Eq -> K\n* new\n* with_capacity\n\nK: Eq + Hash, S: BuildHasher -> K, S\n* with_hasher\n* with_capacity_and_hasher\n* hasher\n\nK: Eq + Hash + Debug -> K: Debug\nS: BuildHasher -> S\nHashMap as Debug\n\nK: Eq + Hash -> K\nS: BuildHasher + Default -> S: Default\nHashMap as Default\n\nResolves #44777.", "tree": {"sha": "2b9ad0ad0d224ed682b09f1af3a3f825b6f26b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9ad0ad0d224ed682b09f1af3a3f825b6f26b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a201336ed2f253cd22561477764989050acb889", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRKvuCRBK7hj4Ov3rIwAAdHIIAKBrh+8/rPA6r/OgiDBzFuKc\ndbP0mWmm0SLGokaLupjzWeF6gU2QmZ96X/zVUMfAkUrTjDTUuPuH9VekVAETecFU\nu62p7CQQYAEiAop1VMfNpAJCFujFTIMtjLq2lzBZhgpjJFyqC5HfTw6yhxzZRyfq\n//izACfSdeVzhXbI9gzZTurad3/B0H7Pju/FnvTBX3P3g/E+FIAtfG7b0xjPGUFA\nshkfTphJGYVnZg3P0hQ2Gf96PRHUPUMS86Mp3gbQh/H88mC/TbeZaLY9DenkgOG3\ntoo4NgGmvH4CuodfuLxWpRlv1PMNtZcpUoc2bNvUD9IlgkYXBti9bw3eNmCfXqc=\n=Hp8f\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b9ad0ad0d224ed682b09f1af3a3f825b6f26b5e\nparent 92d8e82f6b571cecb1809a9aa85f8947e84b648d\nparent 48859db151b839518bdd9d44a2387c0f6b65d141\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581558766 +0100\ncommitter GitHub <noreply@github.com> 1581558766 +0100\n\nRollup merge of #67642 - Mark-Simulacrum:relax-bounds, r=Amanieu\n\nRelax bounds on HashMap/HashSet\n\nThese APIs changed from the old bound listed to the new bound (possibly empty):\n\nK: Hash + Eq -> K\n* new\n* with_capacity\n\nK: Eq + Hash, S: BuildHasher -> K, S\n* with_hasher\n* with_capacity_and_hasher\n* hasher\n\nK: Eq + Hash + Debug -> K: Debug\nS: BuildHasher -> S\nHashMap as Debug\n\nK: Eq + Hash -> K\nS: BuildHasher + Default -> S: Default\nHashMap as Default\n\nResolves #44777.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a201336ed2f253cd22561477764989050acb889", "html_url": "https://github.com/rust-lang/rust/commit/2a201336ed2f253cd22561477764989050acb889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a201336ed2f253cd22561477764989050acb889/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d8e82f6b571cecb1809a9aa85f8947e84b648d", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d8e82f6b571cecb1809a9aa85f8947e84b648d", "html_url": "https://github.com/rust-lang/rust/commit/92d8e82f6b571cecb1809a9aa85f8947e84b648d"}, {"sha": "48859db151b839518bdd9d44a2387c0f6b65d141", "url": "https://api.github.com/repos/rust-lang/rust/commits/48859db151b839518bdd9d44a2387c0f6b65d141", "html_url": "https://github.com/rust-lang/rust/commit/48859db151b839518bdd9d44a2387c0f6b65d141"}], "stats": {"total": 166, "additions": 76, "deletions": 90}, "files": [{"sha": "d0e1a01b006549b8223c59388bbc0bc53a043a52", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 62, "deletions": 64, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/2a201336ed2f253cd22561477764989050acb889/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a201336ed2f253cd22561477764989050acb889/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=2a201336ed2f253cd22561477764989050acb889", "patch": "@@ -203,7 +203,7 @@ pub struct HashMap<K, V, S = RandomState> {\n     base: base::HashMap<K, V, S>,\n }\n \n-impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n+impl<K, V> HashMap<K, V, RandomState> {\n     /// Creates an empty `HashMap`.\n     ///\n     /// The hash map is initially created with a capacity of 0, so it will not allocate until it\n@@ -240,6 +240,59 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n }\n \n impl<K, V, S> HashMap<K, V, S> {\n+    /// Creates an empty `HashMap` which will use the given hash builder to hash\n+    /// keys.\n+    ///\n+    /// The created map has the default initial capacity.\n+    ///\n+    /// Warning: `hash_builder` is normally randomly generated, and\n+    /// is designed to allow HashMaps to be resistant to attacks that\n+    /// cause many collisions and very poor performance. Setting it\n+    /// manually using this function can expose a DoS attack vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let s = RandomState::new();\n+    /// let mut map = HashMap::with_hasher(s);\n+    /// map.insert(1, 2);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n+    pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n+        HashMap { base: base::HashMap::with_hasher(hash_builder) }\n+    }\n+\n+    /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n+    /// to hash the keys.\n+    ///\n+    /// The hash map will be able to hold at least `capacity` elements without\n+    /// reallocating. If `capacity` is 0, the hash map will not allocate.\n+    ///\n+    /// Warning: `hash_builder` is normally randomly generated, and\n+    /// is designed to allow HashMaps to be resistant to attacks that\n+    /// cause many collisions and very poor performance. Setting it\n+    /// manually using this function can expose a DoS attack vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let s = RandomState::new();\n+    /// let mut map = HashMap::with_capacity_and_hasher(10, s);\n+    /// map.insert(1, 2);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n+    pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {\n+        HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }\n+    }\n+\n     /// Returns the number of elements the map can hold without reallocating.\n     ///\n     /// This number is a lower bound; the `HashMap<K, V>` might be able to hold\n@@ -457,65 +510,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     pub fn clear(&mut self) {\n         self.base.clear();\n     }\n-}\n-\n-impl<K, V, S> HashMap<K, V, S>\n-where\n-    K: Eq + Hash,\n-    S: BuildHasher,\n-{\n-    /// Creates an empty `HashMap` which will use the given hash builder to hash\n-    /// keys.\n-    ///\n-    /// The created map has the default initial capacity.\n-    ///\n-    /// Warning: `hash_builder` is normally randomly generated, and\n-    /// is designed to allow HashMaps to be resistant to attacks that\n-    /// cause many collisions and very poor performance. Setting it\n-    /// manually using this function can expose a DoS attack vector.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    /// use std::collections::hash_map::RandomState;\n-    ///\n-    /// let s = RandomState::new();\n-    /// let mut map = HashMap::with_hasher(s);\n-    /// map.insert(1, 2);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n-        HashMap { base: base::HashMap::with_hasher(hash_builder) }\n-    }\n-\n-    /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n-    /// to hash the keys.\n-    ///\n-    /// The hash map will be able to hold at least `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the hash map will not allocate.\n-    ///\n-    /// Warning: `hash_builder` is normally randomly generated, and\n-    /// is designed to allow HashMaps to be resistant to attacks that\n-    /// cause many collisions and very poor performance. Setting it\n-    /// manually using this function can expose a DoS attack vector.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    /// use std::collections::hash_map::RandomState;\n-    ///\n-    /// let s = RandomState::new();\n-    /// let mut map = HashMap::with_capacity_and_hasher(10, s);\n-    /// map.insert(1, 2);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {\n-        HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }\n-    }\n \n     /// Returns a reference to the map's [`BuildHasher`].\n     ///\n@@ -536,7 +530,13 @@ where\n     pub fn hasher(&self) -> &S {\n         self.base.hasher()\n     }\n+}\n \n+impl<K, V, S> HashMap<K, V, S>\n+where\n+    K: Eq + Hash,\n+    S: BuildHasher,\n+{\n     /// Reserves capacity for at least `additional` more elements to be inserted\n     /// in the `HashMap`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n@@ -984,9 +984,8 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> Debug for HashMap<K, V, S>\n where\n-    K: Eq + Hash + Debug,\n+    K: Debug,\n     V: Debug,\n-    S: BuildHasher,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_map().entries(self.iter()).finish()\n@@ -996,8 +995,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> Default for HashMap<K, V, S>\n where\n-    K: Eq + Hash,\n-    S: BuildHasher + Default,\n+    S: Default,\n {\n     /// Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.\n     #[inline]"}, {"sha": "1ad99f03703dd2da15616898a956d59b99d2efb2", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a201336ed2f253cd22561477764989050acb889/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a201336ed2f253cd22561477764989050acb889/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=2a201336ed2f253cd22561477764989050acb889", "patch": "@@ -110,7 +110,7 @@ pub struct HashSet<T, S = RandomState> {\n     map: HashMap<T, (), S>,\n }\n \n-impl<T: Hash + Eq> HashSet<T, RandomState> {\n+impl<T> HashSet<T, RandomState> {\n     /// Creates an empty `HashSet`.\n     ///\n     /// The hash set is initially created with a capacity of 0, so it will not allocate until it\n@@ -261,13 +261,7 @@ impl<T, S> HashSet<T, S> {\n     pub fn clear(&mut self) {\n         self.map.clear()\n     }\n-}\n \n-impl<T, S> HashSet<T, S>\n-where\n-    T: Eq + Hash,\n-    S: BuildHasher,\n-{\n     /// Creates a new empty hash set which will use the given hasher to hash\n     /// keys.\n     ///\n@@ -340,7 +334,13 @@ where\n     pub fn hasher(&self) -> &S {\n         self.map.hasher()\n     }\n+}\n \n+impl<T, S> HashSet<T, S>\n+where\n+    T: Eq + Hash,\n+    S: BuildHasher,\n+{\n     /// Reserves capacity for at least `additional` more elements to be inserted\n     /// in the `HashSet`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n@@ -928,8 +928,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> fmt::Debug for HashSet<T, S>\n where\n-    T: Eq + Hash + fmt::Debug,\n-    S: BuildHasher,\n+    T: fmt::Debug,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_set().entries(self.iter()).finish()\n@@ -977,8 +976,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> Default for HashSet<T, S>\n where\n-    T: Eq + Hash,\n-    S: BuildHasher + Default,\n+    S: Default,\n {\n     /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n     #[inline]"}, {"sha": "8397d204f35cf76e9239a904fd4d865da38607c2", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a201336ed2f253cd22561477764989050acb889/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a201336ed2f253cd22561477764989050acb889/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs?ref=2a201336ed2f253cd22561477764989050acb889", "patch": "@@ -6,7 +6,6 @@ pub fn no_debug() {\n pub fn no_hash() {\n     use std::collections::HashSet;\n     let mut set = HashSet::new();\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n     set.insert([0_usize; 33]);\n     //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n }"}, {"sha": "781a179624e77644a8af385969537b1b9389f8d3", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a201336ed2f253cd22561477764989050acb889/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a201336ed2f253cd22561477764989050acb889/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=2a201336ed2f253cd22561477764989050acb889", "patch": "@@ -9,24 +9,15 @@ LL |     println!(\"{:?}\", [0_usize; 33]);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:10:16\n+  --> $DIR/core-traits-no-impls-length-33.rs:9:16\n    |\n LL |     set.insert([0_usize; 33]);\n    |                ^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n \n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:8:19\n-   |\n-LL |     let mut set = HashSet::new();\n-   |                   ^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n-   = note: required by `std::collections::HashSet::<T>::new`\n-\n error[E0369]: binary operation `==` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:15:19\n+  --> $DIR/core-traits-no-impls-length-33.rs:14:19\n    |\n LL |     [0_usize; 33] == [1_usize; 33]\n    |     ------------- ^^ ------------- [usize; 33]\n@@ -36,7 +27,7 @@ LL |     [0_usize; 33] == [1_usize; 33]\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `[usize; 33]`\n \n error[E0369]: binary operation `<` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:20:19\n+  --> $DIR/core-traits-no-impls-length-33.rs:19:19\n    |\n LL |     [0_usize; 33] < [1_usize; 33]\n    |     ------------- ^ ------------- [usize; 33]\n@@ -46,7 +37,7 @@ LL |     [0_usize; 33] < [1_usize; 33]\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `[usize; 33]`\n \n error[E0277]: the trait bound `&[usize; 33]: std::iter::IntoIterator` is not satisfied\n-  --> $DIR/core-traits-no-impls-length-33.rs:25:14\n+  --> $DIR/core-traits-no-impls-length-33.rs:24:14\n    |\n LL |     for _ in &[0_usize; 33] {\n    |              ^^^^^^^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `&[usize; 33]`\n@@ -58,7 +49,7 @@ LL |     for _ in &[0_usize; 33] {\n              <&'a mut [T] as std::iter::IntoIterator>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0369.\n For more information about an error, try `rustc --explain E0277`."}]}