{"sha": "947942e42c3856f4a673fe2e853e8c3f57e0993a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Nzk0MmU0MmMzODU2ZjRhNjczZmUyZTg1M2U4YzNmNTdlMDk5M2E=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-07-07T18:54:50Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-07-07T20:00:34Z"}, "message": "Improve non-exhaustive pattern witnesses for structs with multiple fields", "tree": {"sha": "ae7972b90b4a408c29e661723ca69551ff211a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7972b90b4a408c29e661723ca69551ff211a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947942e42c3856f4a673fe2e853e8c3f57e0993a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947942e42c3856f4a673fe2e853e8c3f57e0993a", "html_url": "https://github.com/rust-lang/rust/commit/947942e42c3856f4a673fe2e853e8c3f57e0993a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947942e42c3856f4a673fe2e853e8c3f57e0993a/comments", "author": null, "committer": null, "parents": [{"sha": "4f120e6bafe971452adfede158a7957b00562a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f120e6bafe971452adfede158a7957b00562a4e", "html_url": "https://github.com/rust-lang/rust/commit/4f120e6bafe971452adfede158a7957b00562a4e"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "0395a7c9df46ac37db06ef61956e5a44342d2b12", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=947942e42c3856f4a673fe2e853e8c3f57e0993a", "patch": "@@ -283,13 +283,15 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             };\n             if is_structure {\n                 let fields = ty::lookup_struct_fields(cx.tcx, vid);\n-                let field_pats = fields.move_iter()\n+                let field_pats: Vec<FieldPat> = fields.move_iter()\n                     .zip(pats.iter())\n+                    .filter(|&(_, pat)| pat.node != PatWild)\n                     .map(|(field, pat)| FieldPat {\n                         ident: Ident::new(field.name),\n                         pat: pat.clone()\n                     }).collect();\n-                PatStruct(def_to_path(cx.tcx, vid), field_pats, false)\n+                let has_more_fields = field_pats.len() < pats.len();\n+                PatStruct(def_to_path(cx.tcx, vid), field_pats, has_more_fields)\n             } else {\n                 PatEnum(def_to_path(cx.tcx, vid), Some(pats))\n             }"}, {"sha": "bf2101108293960cb25ea4c74b997f21ca33a4d9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=947942e42c3856f4a673fe2e853e8c3f57e0993a", "patch": "@@ -1745,13 +1745,14 @@ impl<'a> State<'a> {\n             }\n             ast::PatStruct(ref path, ref fields, etc) => {\n                 try!(self.print_path(path, true));\n-                try!(word(&mut self.s, \"{\"));\n+                try!(self.nbsp());\n+                try!(self.word_space(\"{\"));\n                 try!(self.commasep_cmnt(\n                     Consistent, fields.as_slice(),\n                     |s, f| {\n                         try!(s.cbox(indent_unit));\n                         try!(s.print_ident(f.ident));\n-                        try!(s.word_space(\":\"));\n+                        try!(s.word_nbsp(\":\"));\n                         try!(s.print_pat(&*f.pat));\n                         s.end()\n                     },\n@@ -1760,6 +1761,7 @@ impl<'a> State<'a> {\n                     if fields.len() != 0u { try!(self.word_space(\",\")); }\n                     try!(word(&mut self.s, \"..\"));\n                 }\n+                try!(space(&mut self.s));\n                 try!(word(&mut self.s, \"}\"));\n             }\n             ast::PatTup(ref elts) => {"}, {"sha": "6dc5ad8b606c37e7055f17596f5db1b43def01f0", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=947942e42c3856f4a673fe2e853e8c3f57e0993a", "patch": "@@ -23,7 +23,7 @@ enum Color {\n \n fn struct_with_a_nested_enum_and_vector() {\n     match (Foo { first: true, second: None }) {\n-    //~^ ERROR non-exhaustive patterns: `Foo{first: false, second: Some([_, _, _, _])}` not covered\n+//~^ ERROR non-exhaustive patterns: `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n         Foo { first: true, second: None } => (),\n         Foo { first: true, second: Some(_) } => (),\n         Foo { first: false, second: None } => (),\n@@ -40,7 +40,7 @@ fn enum_with_multiple_missing_variants() {\n \n fn enum_struct_variant() {\n     match Red {\n-    //~^ ERROR non-exhaustive patterns: `CustomRGBA{a: true, r: _, g: _, b: _}` not covered\n+    //~^ ERROR non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n         Red => (),\n         Green => (),\n         CustomRGBA { a: false, r: _, g: _, b: 0 } => (),"}, {"sha": "b431476f84a6636a9e3c7613d8546384df033ae8", "filename": "src/test/run-make/graphviz-flowgraph/f06.dot-expected.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/947942e42c3856f4a673fe2e853e8c3f57e0993a/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff06.dot-expected.dot?ref=947942e42c3856f4a673fe2e853e8c3f57e0993a", "patch": "@@ -4,8 +4,8 @@ digraph block {\n     N2[label=\"expr 6\"];\n     N3[label=\"expr S6{val: 6,}\"];\n     N4[label=\"local _x\"];\n-    N5[label=\"pat S6{val: _x}\"];\n-    N6[label=\"block { let S6{val: _x} = S6{val: 6,}; }\"];\n+    N5[label=\"pat S6 { val: _x }\"];\n+    N6[label=\"block { let S6 { val: _x } = S6{val: 6,}; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}]}