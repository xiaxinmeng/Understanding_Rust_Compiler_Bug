{"sha": "7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzNjOTEyODE4MzdiYmI1YzVhMGJmM2IxYzcxYTViNTI2NTRiMjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-31T07:55:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-31T07:55:15Z"}, "message": "Merge #2140\n\n2140: move builtin types to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8459ba446606dd0920a87de23276a8c5f80fd58a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8459ba446606dd0920a87de23276a8c5f80fd58a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdupNjCRBK7hj4Ov3rIwAAdHIIACNdZxW9lQGL0wE2pneoCjqO\npMBmLJVIDS+vyTWC6N/JUHCypNkKF4OEhLQD7AA4Pow4akN4HSMvqwWQZhQXRsCX\nk5rquZfkbS8KjI3iCvB3/zF3TNstIbu5VqDeYw2e9rRSbcr9ti7bI0TP4xS3ga+f\nIUvyozdHuCzJYnQ7gqBt3OcbGN+uav3xStwiSKp6X7SSjkxhGc91KIDlq8JK6Gjt\nKqv9/7amlDwLdW43391BsHXyzKoyKqSIbO+ml16SS7oLKvMzSaUjpIbOr0bC0YCV\nnNF259HvWv8RmvnLpemYQD8Tqvkau0If+eHr1xFTePpAZ3avMJu51uwXM9f1Zw8=\n=2MOQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 8459ba446606dd0920a87de23276a8c5f80fd58a\nparent 51092ee72aa87787a65645ccdf82d3cb5a015915\nparent b20d37cb49536e19f6af57b00258f86eb8f19325\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572508515 +0000\ncommitter GitHub <noreply@github.com> 1572508515 +0000\n\nMerge #2140\n\n2140: move builtin types to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "html_url": "https://github.com/rust-lang/rust/commit/7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51092ee72aa87787a65645ccdf82d3cb5a015915", "url": "https://api.github.com/repos/rust-lang/rust/commits/51092ee72aa87787a65645ccdf82d3cb5a015915", "html_url": "https://github.com/rust-lang/rust/commit/51092ee72aa87787a65645ccdf82d3cb5a015915"}, {"sha": "b20d37cb49536e19f6af57b00258f86eb8f19325", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20d37cb49536e19f6af57b00258f86eb8f19325", "html_url": "https://github.com/rust-lang/rust/commit/b20d37cb49536e19f6af57b00258f86eb8f19325"}], "stats": {"total": 166, "additions": 88, "deletions": 78}, "files": [{"sha": "e0c6d634029ce6c1b4d458ee15a77f647a3b4f97", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -6,13 +6,11 @@ pub(crate) mod docs;\n use std::sync::Arc;\n \n use hir_def::{\n+    builtin_type::BuiltinType,\n     type_ref::{Mutability, TypeRef},\n     CrateModuleId, ModuleId,\n };\n-use hir_expand::name::{\n-    self, AsName, BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128, U16,\n-    U32, U64, U8, USIZE,\n-};\n+use hir_expand::name::{self, AsName};\n use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n@@ -30,10 +28,7 @@ use crate::{\n     nameres::{ImportId, ModuleScope, Namespace},\n     resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n-    ty::{\n-        primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n-        InferenceResult, TraitRef,\n-    },\n+    ty::{InferenceResult, TraitRef},\n     Either, HasSource, Name, Ty,\n };\n \n@@ -87,41 +82,6 @@ pub struct Module {\n     pub(crate) id: ModuleId,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum BuiltinType {\n-    Char,\n-    Bool,\n-    Str,\n-    Int(IntTy),\n-    Float(FloatTy),\n-}\n-\n-impl BuiltinType {\n-    #[rustfmt::skip]\n-    pub(crate) const ALL: &'static [(Name, BuiltinType)] = &[\n-        (CHAR, BuiltinType::Char),\n-        (BOOL, BuiltinType::Bool),\n-        (STR, BuiltinType::Str),\n-\n-        (ISIZE, BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize })),\n-        (I8,    BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 })),\n-        (I16,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 })),\n-        (I32,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 })),\n-        (I64,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 })),\n-        (I128,  BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 })),\n-\n-        (USIZE, BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize })),\n-        (U8,    BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 })),\n-        (U16,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 })),\n-        (U32,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 })),\n-        (U64,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 })),\n-        (U128,  BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 })),\n-\n-        (F32, BuiltinType::Float(FloatTy { bitness: FloatBitness::X32 })),\n-        (F64, BuiltinType::Float(FloatTy { bitness: FloatBitness::X64 })),\n-    ];\n-}\n-\n /// The defs which can be visible in the module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ModuleDef {\n@@ -625,7 +585,7 @@ impl FnData {\n                 let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n                 } else {\n-                    let self_type = TypeRef::Path(SELF_TYPE.into());\n+                    let self_type = TypeRef::Path(name::SELF_TYPE.into());\n                     match self_param.kind() {\n                         ast::SelfParamKind::Owned => self_type,\n                         ast::SelfParamKind::Ref => {"}, {"sha": "40f5562b406a82dd111dbd0790519d71bb9bb4f2", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -63,9 +63,9 @@ pub use crate::{\n     code_model::{\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource, Source},\n-        Adt, AssocItem, BuiltinType, Const, ConstData, Container, Crate, CrateDependency,\n-        DefWithBody, Enum, EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module,\n-        ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+        Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n+        EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n+        ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n@@ -81,6 +81,7 @@ pub use crate::{\n };\n \n pub use hir_def::{\n+    builtin_type::BuiltinType,\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "7ba03182718cee0d579c3aa75844e330514c9215", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -54,7 +54,7 @@ mod tests;\n \n use std::sync::Arc;\n \n-use hir_def::CrateModuleId;\n+use hir_def::{builtin_type::BuiltinType, CrateModuleId};\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n use ra_db::{Edition, FileId};\n@@ -68,8 +68,7 @@ use crate::{\n     diagnostics::DiagnosticSink,\n     ids::MacroDefId,\n     nameres::diagnostics::DefDiagnostic,\n-    Adt, AstId, BuiltinType, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind,\n-    Trait,\n+    Adt, AstId, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n };\n \n pub use self::per_ns::{Namespace, PerNs};"}, {"sha": "75b24d386f16af06f04b4e3b899b25a2c9b5f808", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -2,6 +2,7 @@\n use std::sync::Arc;\n \n use hir_def::{\n+    builtin_type::BuiltinType,\n     path::{Path, PathKind},\n     CrateModuleId,\n };\n@@ -18,8 +19,7 @@ use crate::{\n     generics::GenericParams,\n     impl_block::ImplBlock,\n     nameres::{CrateDefMap, PerNs},\n-    Adt, BuiltinType, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, Static, Struct,\n-    Trait, TypeAlias,\n+    Adt, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]"}, {"sha": "dd7cd979ff47873106283614f49115e70c7b5dd9", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -9,6 +9,7 @@ use std::iter;\n use std::sync::Arc;\n \n use hir_def::{\n+    builtin_type::BuiltinType,\n     path::{GenericArg, PathSegment},\n     type_ref::{TypeBound, TypeRef},\n };\n@@ -24,10 +25,13 @@ use crate::{\n     generics::{GenericDef, WherePredicate},\n     nameres::Namespace,\n     resolve::{Resolver, TypeNs},\n-    ty::Adt,\n+    ty::{\n+        primitive::{FloatTy, IntTy},\n+        Adt,\n+    },\n     util::make_mut_slice,\n-    BuiltinType, Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField,\n-    Trait, TypeAlias, Union,\n+    Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField, Trait,\n+    TypeAlias, Union,\n };\n \n impl Ty {\n@@ -643,8 +647,10 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n         BuiltinType::Char => TypeCtor::Char,\n         BuiltinType::Bool => TypeCtor::Bool,\n         BuiltinType::Str => TypeCtor::Str,\n-        BuiltinType::Int(ty) => TypeCtor::Int(ty.into()),\n-        BuiltinType::Float(ty) => TypeCtor::Float(ty.into()),\n+        BuiltinType::Int { signedness, bitness } => {\n+            TypeCtor::Int(IntTy { signedness, bitness }.into())\n+        }\n+        BuiltinType::Float { bitness } => TypeCtor::Float(FloatTy { bitness }.into()),\n     })\n }\n "}, {"sha": "1749752f10e91442ef43a377acfae2a9fd72ff5f", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -2,27 +2,7 @@\n \n use std::fmt;\n \n-#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n-pub enum Signedness {\n-    Signed,\n-    Unsigned,\n-}\n-\n-#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n-pub enum IntBitness {\n-    Xsize,\n-    X8,\n-    X16,\n-    X32,\n-    X64,\n-    X128,\n-}\n-\n-#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n-pub enum FloatBitness {\n-    X32,\n-    X64,\n-}\n+pub use hir_def::builtin_type::{FloatBitness, IntBitness, Signedness};\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum UncertainIntTy {"}, {"sha": "12929caa9003e027dbeb8b36664805315f549884", "filename": "crates/ra_hir_def/src/builtin_type.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -0,0 +1,63 @@\n+//! This module defines built-in types.\n+//!\n+//! A peculiarity of built-in types is that they are always available and are\n+//! not associated with any particular crate.\n+\n+use hir_expand::name::{self, Name};\n+\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum Signedness {\n+    Signed,\n+    Unsigned,\n+}\n+\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum IntBitness {\n+    Xsize,\n+    X8,\n+    X16,\n+    X32,\n+    X64,\n+    X128,\n+}\n+\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+pub enum FloatBitness {\n+    X32,\n+    X64,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum BuiltinType {\n+    Char,\n+    Bool,\n+    Str,\n+    Int { signedness: Signedness, bitness: IntBitness },\n+    Float { bitness: FloatBitness },\n+}\n+\n+impl BuiltinType {\n+    #[rustfmt::skip]\n+    pub const ALL: &'static [(Name, BuiltinType)] = &[\n+        (name::CHAR, BuiltinType::Char),\n+        (name::BOOL, BuiltinType::Bool),\n+        (name::STR,  BuiltinType::Str ),\n+\n+        (name::ISIZE, BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::Xsize }),\n+        (name::I8,    BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X8    }),\n+        (name::I16,   BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X16   }),\n+        (name::I32,   BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X32   }),\n+        (name::I64,   BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X64   }),\n+        (name::I128,  BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X128  }),\n+\n+        (name::USIZE, BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize }),\n+        (name::U8,    BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X8    }),\n+        (name::U16,   BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X16   }),\n+        (name::U32,   BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X32   }),\n+        (name::U64,   BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X64   }),\n+        (name::U128,  BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X128  }),\n+\n+        (name::F32, BuiltinType::Float { bitness: FloatBitness::X32 }),\n+        (name::F64, BuiltinType::Float { bitness: FloatBitness::X64 }),\n+    ];\n+}"}, {"sha": "8cbff673cf713295849ee42dd8174e93d7584bb9", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7973c91281837bbb5c5a0bf3b1c71a5b52654b20/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "patch": "@@ -11,6 +11,7 @@ pub mod db;\n pub mod attr;\n pub mod path;\n pub mod type_ref;\n+pub mod builtin_type;\n \n // FIXME: this should be private\n pub mod nameres;"}]}