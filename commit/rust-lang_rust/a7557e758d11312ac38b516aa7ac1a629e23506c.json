{"sha": "a7557e758d11312ac38b516aa7ac1a629e23506c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTU3ZTc1OGQxMTMxMmFjMzhiNTE2YWE3YWMxYTYyOWUyMzUwNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-26T00:54:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-26T00:54:13Z"}, "message": "Auto merge of #37361 - jseyfried:fix_crate_var_regressions, r=nrc\n\nFix `$crate`-related regressions\n\nFixes #37345, fixes #37357, fixes #37352, and improves the `unused_extern_crates` lint.\nr? @nrc", "tree": {"sha": "3e27022e0cf96050c3e50370b482d9d8666d6412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e27022e0cf96050c3e50370b482d9d8666d6412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7557e758d11312ac38b516aa7ac1a629e23506c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7557e758d11312ac38b516aa7ac1a629e23506c", "html_url": "https://github.com/rust-lang/rust/commit/a7557e758d11312ac38b516aa7ac1a629e23506c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7557e758d11312ac38b516aa7ac1a629e23506c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef18be1bc4e03617177c5e9df1164ce3df49ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef18be1bc4e03617177c5e9df1164ce3df49ba2", "html_url": "https://github.com/rust-lang/rust/commit/aef18be1bc4e03617177c5e9df1164ce3df49ba2"}, {"sha": "0d30325286d01a5689735b1599173ba32a796aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d30325286d01a5689735b1599173ba32a796aa4", "html_url": "https://github.com/rust-lang/rust/commit/0d30325286d01a5689735b1599173ba32a796aa4"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "d90fe769caf63a1f89fe863d20d20b718439fa8b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a7557e758d11312ac38b516aa7ac1a629e23506c", "patch": "@@ -130,14 +130,27 @@ impl<'b> Resolver<'b> {\n \n                 match view_path.node {\n                     ViewPathSimple(binding, ref full_path) => {\n-                        let source_name = full_path.segments.last().unwrap().identifier.name;\n-                        if source_name.as_str() == \"mod\" || source_name.as_str() == \"self\" {\n+                        let mut source = full_path.segments.last().unwrap().identifier;\n+                        let source_name = source.name.as_str();\n+                        if source_name == \"mod\" || source_name == \"self\" {\n                             resolve_error(self,\n                                           view_path.span,\n                                           ResolutionError::SelfImportsOnlyAllowedWithin);\n+                        } else if source_name == \"$crate\" && full_path.segments.len() == 1 {\n+                            let crate_root = self.resolve_crate_var(source.ctxt);\n+                            let crate_name = match crate_root.kind {\n+                                ModuleKind::Def(_, name) => name,\n+                                ModuleKind::Block(..) => unreachable!(),\n+                            };\n+                            source.name = crate_name;\n+\n+                            self.session.struct_span_warn(item.span, \"`$crate` may not be imported\")\n+                                .note(\"`use $crate;` was erroneously allowed and \\\n+                                       will become a hard error in a future release\")\n+                                .emit();\n                         }\n \n-                        let subclass = ImportDirectiveSubclass::single(binding.name, source_name);\n+                        let subclass = ImportDirectiveSubclass::single(binding.name, source.name);\n                         let span = view_path.span;\n                         self.add_import_directive(module_path, subclass, span, item.id, vis);\n                     }\n@@ -500,6 +513,7 @@ impl<'b> Resolver<'b> {\n                                   legacy_imports: LegacyMacroImports,\n                                   allow_shadowing: bool) {\n         let import_macro = |this: &mut Self, name, ext: Rc<_>, span| {\n+            this.used_crates.insert(module.def_id().unwrap().krate);\n             if let SyntaxExtension::NormalTT(..) = *ext {\n                 this.macro_names.insert(name);\n             }"}, {"sha": "856eb348eaeec615cd44fff73d110046b6fd6a76", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a7557e758d11312ac38b516aa7ac1a629e23506c", "patch": "@@ -845,6 +845,10 @@ impl<'a> ModuleS<'a> {\n             _ => false,\n         }\n     }\n+\n+    fn is_local(&self) -> bool {\n+        self.normal_ancestor_id.is_some()\n+    }\n }\n \n impl<'a> fmt::Debug for ModuleS<'a> {\n@@ -1580,14 +1584,7 @@ impl<'a> Resolver<'a> {\n     fn resolve_module_prefix(&mut self, module_path: &[Ident], span: Option<Span>)\n                              -> ResolveResult<ModulePrefixResult<'a>> {\n         if &*module_path[0].name.as_str() == \"$crate\" {\n-            let mut ctxt = module_path[0].ctxt;\n-            while ctxt.source().0 != SyntaxContext::empty() {\n-                ctxt = ctxt.source().0;\n-            }\n-            let module = self.invocations[&ctxt.source().1].module.get();\n-            let crate_root =\n-                if module.def_id().unwrap().is_local() { self.graph_root } else { module };\n-            return Success(PrefixFound(crate_root, 1))\n+            return Success(PrefixFound(self.resolve_crate_var(module_path[0].ctxt), 1));\n         }\n \n         // Start at the current module if we see `self` or `super`, or at the\n@@ -1620,6 +1617,14 @@ impl<'a> Resolver<'a> {\n         return Success(PrefixFound(containing_module, i));\n     }\n \n+    fn resolve_crate_var(&mut self, mut crate_var_ctxt: SyntaxContext) -> Module<'a> {\n+        while crate_var_ctxt.source().0 != SyntaxContext::empty() {\n+            crate_var_ctxt = crate_var_ctxt.source().0;\n+        }\n+        let module = self.invocations[&crate_var_ctxt.source().1].module.get();\n+        if module.is_local() { self.graph_root } else { module }\n+    }\n+\n     // AST resolution\n     //\n     // We maintain a list of value ribs and type ribs.\n@@ -2569,7 +2574,8 @@ impl<'a> Resolver<'a> {\n         let unqualified_def = resolve_identifier_with_fallback(self, None);\n         let qualified_binding = self.resolve_module_relative_path(span, segments, namespace);\n         match (qualified_binding, unqualified_def) {\n-            (Ok(binding), Some(ref ud)) if binding.def() == ud.def => {\n+            (Ok(binding), Some(ref ud)) if binding.def() == ud.def &&\n+                                           segments[0].identifier.name.as_str() != \"$crate\" => {\n                 self.session\n                     .add_lint(lint::builtin::UNUSED_QUALIFICATIONS,\n                               id,"}, {"sha": "1dfc7a128aa1c14bfaaa7e7ed670361dc40519b4", "filename": "src/test/compile-fail/auxiliary/import_crate_var.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs?ref=a7557e758d11312ac38b516aa7ac1a629e23506c", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! m { () => { use $crate; } }"}, {"sha": "9f573945483dec388267caa904499ff607ab34e7", "filename": "src/test/compile-fail/import-crate-var.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs?ref=a7557e758d11312ac38b516aa7ac1a629e23506c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:import_crate_var.rs\n+// error-pattern: `$crate` may not be imported\n+// error-pattern: `use $crate;` was erroneously allowed and will become a hard error\n+\n+#![feature(rustc_attrs)]\n+\n+#[macro_use] extern crate import_crate_var;\n+m!();\n+\n+#[rustc_error]\n+fn main() {}"}, {"sha": "af9b21dadd1d083b08d9126053109004c78cab46", "filename": "src/test/compile-fail/lint-qualification.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs?ref=a7557e758d11312ac38b516aa7ac1a629e23506c", "patch": "@@ -18,4 +18,11 @@ fn main() {\n     use foo::bar;\n     foo::bar(); //~ ERROR: unnecessary qualification\n     bar();\n+\n+    let _ = || -> Result<(), ()> { try!(Ok(())); Ok(()) }; // issue #37345\n+\n+    macro_rules! m {\n+        () => { $crate::foo::bar(); }\n+    }\n+    m!(); // issue #37357\n }"}, {"sha": "52cb84f662dd0368ce7afdc6204cd3b8e574ccf7", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7557e758d11312ac38b516aa7ac1a629e23506c/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=a7557e758d11312ac38b516aa7ac1a629e23506c", "patch": "@@ -26,6 +26,8 @@ extern crate rand; // no error, the use marks it as used\n \n extern crate lint_unused_extern_crate as other; // no error, the use * marks it as used\n \n+#[macro_use] extern crate core; // no error, the `#[macro_use]` marks it as used\n+\n #[allow(unused_imports)]\n use rand::isaac::IsaacRng;\n "}]}