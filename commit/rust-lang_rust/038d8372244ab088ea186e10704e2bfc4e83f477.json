{"sha": "038d8372244ab088ea186e10704e2bfc4e83f477", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOGQ4MzcyMjQ0YWIwODhlYTE4NmUxMDcwNGUyYmZjNGU4M2Y0Nzc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-12T04:30:03Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-01-12T10:15:41Z"}, "message": "Fix simple formatting optimization\n\nname                        old2 ns/iter  new2 ns/iter  diff ns/iter   diff %  speedup\nfmt::write_str_macro1       12,295        12,308                  13    0.11%   x 1.00\nfmt::write_str_macro2       24,079        21,451              -2,628  -10.91%   x 1.12\nfmt::write_str_macro_debug  238,363       230,807             -7,556   -3.17%   x 1.03\nfmt::write_str_ref          6,203         6,064                 -139   -2.24%   x 1.02\nfmt::write_str_value        6,225         6,075                 -150   -2.41%   x 1.02\nfmt::write_vec_macro1       17,144        17,121                 -23   -0.13%   x 1.00\nfmt::write_vec_macro2       29,845        26,703              -3,142  -10.53%   x 1.12\nfmt::write_vec_macro_debug  248,840       242,117             -6,723   -2.70%   x 1.03\nfmt::write_vec_ref          5,954         6,438                  484    8.13%   x 0.92\nfmt::write_vec_value        5,959         6,439                  480    8.06%   x 0.93", "tree": {"sha": "df104ce3a469be16fa3d8a62cf4dde09f422914e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df104ce3a469be16fa3d8a62cf4dde09f422914e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038d8372244ab088ea186e10704e2bfc4e83f477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038d8372244ab088ea186e10704e2bfc4e83f477", "html_url": "https://github.com/rust-lang/rust/commit/038d8372244ab088ea186e10704e2bfc4e83f477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038d8372244ab088ea186e10704e2bfc4e83f477/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a7ce9edd487dc151426dcb6d89911cc741e605", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a7ce9edd487dc151426dcb6d89911cc741e605", "html_url": "https://github.com/rust-lang/rust/commit/d7a7ce9edd487dc151426dcb6d89911cc741e605"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "da440cdd72f8065d7266a09d8feaff3959dfdb15", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/038d8372244ab088ea186e10704e2bfc4e83f477/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038d8372244ab088ea186e10704e2bfc4e83f477/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=038d8372244ab088ea186e10704e2bfc4e83f477", "patch": "@@ -72,6 +72,15 @@ pub enum Position<'a> {\n     ArgumentNamed(&'a str),\n }\n \n+impl Position<'_> {\n+    pub fn index(&self) -> Option<usize> {\n+        match self {\n+            ArgumentIs(i) | ArgumentImplicitlyIs(i) => Some(*i),\n+            _ => None,\n+        }\n+    }\n+}\n+\n /// Enum of alignments which are supported.\n #[derive(Copy, Clone, PartialEq)]\n pub enum Alignment {"}, {"sha": "0613c78e495903d33edfe3995b40d7e99c9a2ce3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/038d8372244ab088ea186e10704e2bfc4e83f477/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038d8372244ab088ea186e10704e2bfc4e83f477/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=038d8372244ab088ea186e10704e2bfc4e83f477", "patch": "@@ -493,7 +493,10 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                 let fill = arg.format.fill.unwrap_or(' ');\n \n-                if *arg != simple_arg || fill != ' ' {\n+                let pos_simple =\n+                    arg.position.index() == simple_arg.position.index();\n+\n+                if !pos_simple || arg.format != simple_arg.format || fill != ' ' {\n                     self.all_pieces_simple = false;\n                 }\n "}]}