{"sha": "eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOWJhNDU3YjAxMjZiZDQ1YzQ1ZWY3NTFlOTJjY2ZkYzVmZGMyMDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-15T17:22:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-15T17:22:03Z"}, "message": "Merge #6879\n\n6879: Change HasChildSource::ChildId assoc item to generic param r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "5af185ffaa39f285ce85aaccb2eb6bb5f532e26c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af185ffaa39f285ce85aaccb2eb6bb5f532e26c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2PC7CRBK7hj4Ov3rIwAAdHIIAClLSsxYUnLZ89YQwtBMtyBB\n8diQGEWdia7IQFbTX4iCvZq32meZeAa7C0BocQM1wRNOCgG9B0HsHvDLF99AjT2W\n7Cg52psw3YZjCakhr/DU0Du5TE9rTN7w7WRaOAxL5WAJPiIgfNh5h6Lqp2IS/Np7\nx5yy2BIGgzwF4VKLhSmNfpa7C5VE+2H6nZ5qwbByIaFXU9rxacn7UHka+pigRh+t\niLQ5Fjci5ujnlmEV4vme6yqHSfzAyQQ2HF5rIi1Hyru61YnQr3P8LaK3naoe74ky\nC48v33sLIpKvK1tqcKIkoHphc1lQlk9XMDYbGIFLo2w83N5oQQr4KU413V1Vl7g=\n=DKlP\n-----END PGP SIGNATURE-----\n", "payload": "tree 5af185ffaa39f285ce85aaccb2eb6bb5f532e26c\nparent bd4c352831662762ee7a66da77ec9adf623b0a0a\nparent 2c67a4abe47ead6a00ce1b33ccc3d3bfcaaf0983\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608052923 +0000\ncommitter GitHub <noreply@github.com> 1608052923 +0000\n\nMerge #6879\n\n6879: Change HasChildSource::ChildId assoc item to generic param r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "html_url": "https://github.com/rust-lang/rust/commit/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4c352831662762ee7a66da77ec9adf623b0a0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4c352831662762ee7a66da77ec9adf623b0a0a", "html_url": "https://github.com/rust-lang/rust/commit/bd4c352831662762ee7a66da77ec9adf623b0a0a"}, {"sha": "2c67a4abe47ead6a00ce1b33ccc3d3bfcaaf0983", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c67a4abe47ead6a00ce1b33ccc3d3bfcaaf0983", "html_url": "https://github.com/rust-lang/rust/commit/2c67a4abe47ead6a00ce1b33ccc3d3bfcaaf0983"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "04845037feb3d31f2901ebb1f89198f9d2b4b79f", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "patch": "@@ -129,14 +129,14 @@ impl HasSource for TypeParam {\n     type Ast = Either<ast::Trait, ast::TypeParam>;\n     fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n-        child_source.map(|it| it.type_params[self.id.local_id].clone())\n+        child_source.map(|it| it[self.id.local_id].clone())\n     }\n }\n \n impl HasSource for LifetimeParam {\n     type Ast = ast::LifetimeParam;\n     fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n-        child_source.map(|it| it.lifetime_params[self.id.local_id].clone())\n+        child_source.map(|it| it[self.id.local_id].clone())\n     }\n }"}, {"sha": "eafa3abb6ab599e85791e9854c3755269f06330e", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "patch": "@@ -145,10 +145,12 @@ impl EnumData {\n     }\n }\n \n-impl HasChildSource for EnumId {\n-    type ChildId = LocalEnumVariantId;\n+impl HasChildSource<LocalEnumVariantId> for EnumId {\n     type Value = ast::Variant;\n-    fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n+    fn child_source(\n+        &self,\n+        db: &dyn DefDatabase,\n+    ) -> InFile<ArenaMap<LocalEnumVariantId, Self::Value>> {\n         let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n         lower_enum(db, &mut trace, &src, self.lookup(db).container.module(db));\n@@ -212,11 +214,10 @@ impl VariantData {\n     }\n }\n \n-impl HasChildSource for VariantId {\n-    type ChildId = LocalFieldId;\n+impl HasChildSource<LocalFieldId> for VariantId {\n     type Value = Either<ast::TupleField, ast::RecordField>;\n \n-    fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n+    fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<LocalFieldId, Self::Value>> {\n         let (src, module_id) = match self {\n             VariantId::EnumVariantId(it) => {\n                 // I don't really like the fact that we call into parent source"}, {"sha": "924046435b8a7e72c005241f3aad0aa6a270311b", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     db::DefDatabase,\n     dyn_map::DynMap,\n     keys,\n-    src::HasSource,\n+    src::{HasChildSource, HasSource},\n     type_ref::{LifetimeRef, TypeBound, TypeRef},\n     AdtId, GenericDefId, LifetimeParamId, LocalLifetimeParamId, LocalTypeParamId, Lookup,\n     TypeParamId,\n@@ -73,9 +73,9 @@ pub enum WherePredicateTypeTarget {\n }\n \n #[derive(Default)]\n-pub struct SourceMaps {\n-    pub type_params: ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>,\n-    pub lifetime_params: ArenaMap<LocalLifetimeParamId, ast::LifetimeParam>,\n+pub(crate) struct SourceMap {\n+    pub(crate) type_params: ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>,\n+    lifetime_params: ArenaMap<LocalLifetimeParamId, ast::LifetimeParam>,\n }\n \n impl GenericParams {\n@@ -133,9 +133,9 @@ impl GenericParams {\n         Arc::new(generics)\n     }\n \n-    fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMaps>) {\n+    fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {\n         let mut generics = GenericParams::default();\n-        let mut sm = SourceMaps::default();\n+        let mut sm = SourceMap::default();\n \n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         let file_id = match def {\n@@ -214,7 +214,7 @@ impl GenericParams {\n     pub(crate) fn fill(\n         &mut self,\n         lower_ctx: &LowerCtx,\n-        sm: &mut SourceMaps,\n+        sm: &mut SourceMap,\n         node: &dyn GenericParamsOwner,\n     ) {\n         if let Some(params) = node.generic_param_list() {\n@@ -241,7 +241,7 @@ impl GenericParams {\n     fn fill_params(\n         &mut self,\n         lower_ctx: &LowerCtx,\n-        sm: &mut SourceMaps,\n+        sm: &mut SourceMap,\n         params: ast::GenericParamList,\n     ) {\n         for type_param in params.type_params() {\n@@ -345,10 +345,24 @@ impl GenericParams {\n         })\n     }\n }\n-impl GenericDefId {\n-    // FIXME: Change HasChildSource's ChildId AssocItem to be a generic parameter instead\n-    pub fn child_source(&self, db: &dyn DefDatabase) -> InFile<SourceMaps> {\n-        GenericParams::new(db, *self).1\n+\n+impl HasChildSource<LocalTypeParamId> for GenericDefId {\n+    type Value = Either<ast::Trait, ast::TypeParam>;\n+    fn child_source(\n+        &self,\n+        db: &dyn DefDatabase,\n+    ) -> InFile<ArenaMap<LocalTypeParamId, Self::Value>> {\n+        GenericParams::new(db, *self).1.map(|source_maps| source_maps.type_params)\n+    }\n+}\n+\n+impl HasChildSource<LocalLifetimeParamId> for GenericDefId {\n+    type Value = ast::LifetimeParam;\n+    fn child_source(\n+        &self,\n+        db: &dyn DefDatabase,\n+    ) -> InFile<ArenaMap<LocalLifetimeParamId, Self::Value>> {\n+        GenericParams::new(db, *self).1.map(|source_maps| source_maps.lifetime_params)\n     }\n }\n "}, {"sha": "f67244b464701bc0b44a7937da3bd6cedfab5388", "filename": "crates/hir_def/src/src.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9ba457b0126bd45c45ef751e92ccfdc5fdc206/crates%2Fhir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fsrc.rs?ref=eb9ba457b0126bd45c45ef751e92ccfdc5fdc206", "patch": "@@ -36,8 +36,7 @@ impl<N: ItemTreeNode> HasSource for ItemLoc<N> {\n     }\n }\n \n-pub trait HasChildSource {\n-    type ChildId;\n+pub trait HasChildSource<ChildId> {\n     type Value;\n-    fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>>;\n+    fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<ChildId, Self::Value>>;\n }"}]}