{"sha": "802987dc9e5e6cacc1a59b9095717665f5311924", "node_id": "C_kwDOAAsO6NoAKDgwMjk4N2RjOWU1ZTZjYWNjMWE1OWI5MDk1NzE3NjY1ZjUzMTE5MjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-11T18:49:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-12T10:00:47Z"}, "message": "make unix path handling on Windows hosts preserve absoluteness", "tree": {"sha": "d55ed3765f51e6fbeb0eb21f4c875d85cf91f2ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d55ed3765f51e6fbeb0eb21f4c875d85cf91f2ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802987dc9e5e6cacc1a59b9095717665f5311924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802987dc9e5e6cacc1a59b9095717665f5311924", "html_url": "https://github.com/rust-lang/rust/commit/802987dc9e5e6cacc1a59b9095717665f5311924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802987dc9e5e6cacc1a59b9095717665f5311924/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66780bc3fb87b33b31e39cb4a3e34de1a80deaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66780bc3fb87b33b31e39cb4a3e34de1a80deaa", "html_url": "https://github.com/rust-lang/rust/commit/a66780bc3fb87b33b31e39cb4a3e34de1a80deaa"}], "stats": {"total": 152, "additions": 119, "deletions": 33}, "files": [{"sha": "9a4dea949d178310516fb75b0429faa409714063", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -581,7 +581,7 @@ extern \"Rust\" {\n     /// Performs conversion of path separators as needed.\n     ///\n     /// Usually Miri performs this kind of conversion automatically. However, manual conversion\n-    /// might be necessary when reading an environment variable that was set of the host\n+    /// might be necessary when reading an environment variable that was set on the host\n     /// (such as TMPDIR) and using it as a target path.\n     ///\n     /// Only works with isolation disabled."}, {"sha": "e42ebc187b4b08ba2cb5403040b3e483e2d621e6", "filename": "src/tools/miri/src/shims/os_str.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -174,7 +174,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_c_str(ptr)?;\n \n-        Ok(match this.convert_path_separator(Cow::Borrowed(os_str), PathConversion::TargetToHost) {\n+        Ok(match this.convert_path(Cow::Borrowed(os_str), PathConversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -188,10 +188,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_wide_str(ptr)?;\n \n-        Ok(this\n-            .convert_path_separator(Cow::Owned(os_str), PathConversion::TargetToHost)\n-            .into_owned()\n-            .into())\n+        Ok(this.convert_path(Cow::Owned(os_str), PathConversion::TargetToHost).into_owned().into())\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -203,8 +200,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = this\n-            .convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        let os_str =\n+            this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, ptr, size)\n     }\n \n@@ -217,8 +214,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = this\n-            .convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        let os_str =\n+            this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, ptr, size)\n     }\n \n@@ -230,18 +227,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         memkind: MemoryKind<MiriMemoryKind>,\n     ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n         let this = self.eval_context_mut();\n-        let os_str = this\n-            .convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        let os_str =\n+            this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.alloc_os_str_as_c_str(&os_str, memkind)\n     }\n \n-    fn convert_path_separator<'a>(\n+    fn convert_path<'a>(\n         &self,\n         os_str: Cow<'a, OsStr>,\n         direction: PathConversion,\n     ) -> Cow<'a, OsStr> {\n         let this = self.eval_context_ref();\n         let target_os = &this.tcx.sess.target.os;\n+\n         #[cfg(windows)]\n         return if target_os == \"windows\" {\n             // Windows-on-Windows, all fine.\n@@ -252,10 +250,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 PathConversion::HostToTarget => ('\\\\', '/'),\n                 PathConversion::TargetToHost => ('/', '\\\\'),\n             };\n-            let converted = os_str\n+            let mut converted = os_str\n                 .encode_wide()\n                 .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n                 .collect::<Vec<_>>();\n+            // We also have to ensure that absolute paths remain absolute.\n+            match direction {\n+                PathConversion::HostToTarget => {\n+                    // If this is an absolute Windows path that starts with a drive letter (`C:/...`\n+                    // after separator conversion), it would not be considered absolute by Unix\n+                    // target code.\n+                    if converted.get(1).copied() == Some(':' as u16)\n+                        && converted.get(2).copied() == Some('/' as u16)\n+                    {\n+                        // We add a `/` at the beginning, to store the absolute Windows\n+                        // path in something that looks like an absolute Unix path.\n+                        converted.insert(0, '/' as u16);\n+                    }\n+                }\n+                PathConversion::TargetToHost => {\n+                    // If the path is `\\C:\\`, the leading backslash was probably added by the above code\n+                    // and we should get rid of it again.\n+                    if converted.get(0).copied() == Some('\\\\' as u16)\n+                        && converted.get(2).copied() == Some(':' as u16)\n+                        && converted.get(3).copied() == Some('\\\\' as u16)\n+                    {\n+                        converted.remove(0);\n+                    }\n+                }\n+            }\n             Cow::Owned(OsString::from_wide(&converted))\n         };\n         #[cfg(unix)]\n@@ -270,6 +293,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 .iter()\n                 .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n                 .collect::<Vec<_>>();\n+            // TODO: Once we actually support file system things on Windows targets, we'll probably\n+            // have to also do something clever for absolute path preservation here, like above.\n             Cow::Owned(OsString::from_vec(converted))\n         } else {\n             // Unix-on-Unix, all is fine."}, {"sha": "8b869a65258bd4a0b5b13d622b324eb82ac19c59", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -1667,7 +1667,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // 'readlink' truncates the resolved path if the provided buffer is not large\n                 // enough, and does *not* add a null terminator. That means we cannot use the usual\n                 // `write_path_to_c_str` and have to re-implement parts of it ourselves.\n-                let resolved = this.convert_path_separator(\n+                let resolved = this.convert_path(\n                     Cow::Borrowed(resolved.as_ref()),\n                     crate::shims::os_str::PathConversion::HostToTarget,\n                 );"}, {"sha": "048dbbbaa0f06d9c6595376c5867f38f43580adc", "filename": "src/tools/miri/test-cargo-miri/src/main.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -2,6 +2,7 @@ use byteorder::{BigEndian, ByteOrder};\n use std::env;\n #[cfg(unix)]\n use std::io::{self, BufRead};\n+use std::path::PathBuf;\n \n fn main() {\n     // Check env var set by `build.rs`.\n@@ -21,12 +22,30 @@ fn main() {\n     // If there were no arguments, access stdin and test working dir.\n     // (We rely on the test runner to always disable isolation when passing no arguments.)\n     if std::env::args().len() <= 1 {\n+        fn host_to_target_path(path: String) -> PathBuf {\n+            use std::ffi::{CStr, CString};\n+\n+            let path = CString::new(path).unwrap();\n+            let mut out = Vec::with_capacity(1024);\n+\n+            unsafe {\n+                extern \"Rust\" {\n+                    fn miri_host_to_target_path(\n+                        path: *const i8,\n+                        out: *mut i8,\n+                        out_size: usize,\n+                    ) -> usize;\n+                }\n+                let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n+                assert_eq!(ret, 0);\n+                let out = CStr::from_ptr(out.as_ptr()).to_str().unwrap();\n+                PathBuf::from(out)\n+            }\n+        }\n+\n         // CWD should be crate root.\n-        // We have to normalize slashes, as the env var might be set for a different target's conventions.\n         let env_dir = env::current_dir().unwrap();\n-        let env_dir = env_dir.to_string_lossy().replace(\"\\\\\", \"/\");\n-        let crate_dir = env::var_os(\"CARGO_MANIFEST_DIR\").unwrap();\n-        let crate_dir = crate_dir.to_string_lossy().replace(\"\\\\\", \"/\");\n+        let crate_dir = host_to_target_path(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n         assert_eq!(env_dir, crate_dir);\n \n         #[cfg(unix)]"}, {"sha": "1cb8091f87750a1703e60f5d7f57919ecaadc61a", "filename": "src/tools/miri/test-cargo-miri/subcrate/main.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -4,13 +4,30 @@ use std::path::PathBuf;\n fn main() {\n     println!(\"subcrate running\");\n \n+    fn host_to_target_path(path: String) -> PathBuf {\n+        use std::ffi::{CStr, CString};\n+\n+        let path = CString::new(path).unwrap();\n+        let mut out = Vec::with_capacity(1024);\n+\n+        unsafe {\n+            extern \"Rust\" {\n+                fn miri_host_to_target_path(\n+                    path: *const i8,\n+                    out: *mut i8,\n+                    out_size: usize,\n+                ) -> usize;\n+            }\n+            let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n+            assert_eq!(ret, 0);\n+            let out = CStr::from_ptr(out.as_ptr()).to_str().unwrap();\n+            PathBuf::from(out)\n+        }\n+    }\n+\n     // CWD should be workspace root, i.e., one level up from crate root.\n-    // We have to normalize slashes, as the env var might be set for a different target's conventions.\n     let env_dir = env::current_dir().unwrap();\n-    let env_dir = env_dir.to_string_lossy().replace(\"\\\\\", \"/\");\n-    let crate_dir = env::var_os(\"CARGO_MANIFEST_DIR\").unwrap();\n-    let crate_dir = crate_dir.to_string_lossy().replace(\"\\\\\", \"/\");\n-    let crate_dir = PathBuf::from(crate_dir);\n-    let crate_dir = crate_dir.parent().unwrap().to_string_lossy();\n+    let crate_dir = host_to_target_path(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n+    let crate_dir = crate_dir.parent().unwrap();\n     assert_eq!(env_dir, crate_dir);\n }"}, {"sha": "619d8c72fd0a7aae05a129bc720ac543f336b707", "filename": "src/tools/miri/test-cargo-miri/subcrate/test.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -1,16 +1,37 @@\n use std::env;\n \n+use std::path::PathBuf;\n+\n use byteorder::{ByteOrder, LittleEndian};\n \n fn main() {\n     println!(\"subcrate testing\");\n \n+    fn host_to_target_path(path: String) -> PathBuf {\n+        use std::ffi::{CStr, CString};\n+\n+        let path = CString::new(path).unwrap();\n+        let mut out = Vec::with_capacity(1024);\n+\n+        unsafe {\n+            extern \"Rust\" {\n+                fn miri_host_to_target_path(\n+                    path: *const i8,\n+                    out: *mut i8,\n+                    out_size: usize,\n+                ) -> usize;\n+            }\n+            let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n+            assert_eq!(ret, 0);\n+            let out = CStr::from_ptr(out.as_ptr()).to_str().unwrap();\n+            PathBuf::from(out)\n+        }\n+    }\n+\n     // CWD should be crate root.\n     // We have to normalize slashes, as the env var might be set for a different target's conventions.\n     let env_dir = env::current_dir().unwrap();\n-    let env_dir = env_dir.to_string_lossy().replace(\"\\\\\", \"/\");\n-    let crate_dir = env::var_os(\"CARGO_MANIFEST_DIR\").unwrap();\n-    let crate_dir = crate_dir.to_string_lossy().replace(\"\\\\\", \"/\");\n+    let crate_dir = host_to_target_path(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n     assert_eq!(env_dir, crate_dir);\n \n     // Make sure we can call dev-dependencies."}, {"sha": "a7d4800faecc4b973904c79b678dc3a886d90e3a", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802987dc9e5e6cacc1a59b9095717665f5311924/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=802987dc9e5e6cacc1a59b9095717665f5311924", "patch": "@@ -15,6 +15,7 @@ use std::io::{Error, ErrorKind, IsTerminal, Read, Result, Seek, SeekFrom, Write}\n use std::path::{Path, PathBuf};\n \n fn main() {\n+    test_path_conversion();\n     test_file();\n     test_file_clone();\n     test_file_create_new();\n@@ -28,15 +29,11 @@ fn main() {\n     test_directory();\n     test_canonicalize();\n     test_from_raw_os_error();\n-    test_path_conversion();\n }\n \n-fn tmp() -> PathBuf {\n+fn host_to_target_path(path: String) -> PathBuf {\n     use std::ffi::{CStr, CString};\n \n-    let path = std::env::var(\"MIRI_TEMP\")\n-        .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n-    // These are host paths. We need to convert them to the target.\n     let path = CString::new(path).unwrap();\n     let mut out = Vec::with_capacity(1024);\n \n@@ -51,6 +48,13 @@ fn tmp() -> PathBuf {\n     }\n }\n \n+fn tmp() -> PathBuf {\n+    let path = std::env::var(\"MIRI_TEMP\")\n+        .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n+    // These are host paths. We need to convert them to the target.\n+    host_to_target_path(path)\n+}\n+\n /// Prepare: compute filename and make sure the file does not exist.\n fn prepare(filename: &str) -> PathBuf {\n     let path = tmp().join(filename);"}]}