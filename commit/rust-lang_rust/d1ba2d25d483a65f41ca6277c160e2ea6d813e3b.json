{"sha": "d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "node_id": "C_kwDOAAsO6NoAKGQxYmEyZDI1ZDQ4M2E2NWY0MWNhNjI3N2MxNjBlMmVhNmQ4MTNlM2I", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-28T04:58:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-14T03:53:48Z"}, "message": "Improve parsing errors and suggestions for bad if statements", "tree": {"sha": "d480e1569f36cc601d81acb748543c11cf8d6178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d480e1569f36cc601d81acb748543c11cf8d6178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "html_url": "https://github.com/rust-lang/rust/commit/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bdec3c8abdc48e46715d7b14b764af28da1cee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdec3c8abdc48e46715d7b14b764af28da1cee3", "html_url": "https://github.com/rust-lang/rust/commit/3bdec3c8abdc48e46715d7b14b764af28da1cee3"}], "stats": {"total": 468, "additions": 325, "deletions": 143}, "files": [{"sha": "81bab0e3513c9541e6dccccdeeca17866531c9db", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 66, "deletions": 40, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2248,36 +2248,59 @@ impl<'a> Parser<'a> {\n         &mut self,\n         attrs: AttrVec,\n         lo: Span,\n-        cond: P<Expr>,\n+        mut cond: P<Expr>,\n     ) -> PResult<'a, P<Expr>> {\n-        let missing_then_block_binop_span = || {\n-            match cond.kind {\n-                ExprKind::Binary(Spanned { span: binop_span, .. }, _, ref right)\n-                    if let ExprKind::Block(..) = right.kind => Some(binop_span),\n-                _ => None\n+        let cond_span = cond.span;\n+        // Tries to interpret `cond` as either a missing expression if it's a block,\n+        // or as an unfinished expression if it's a binop and the RHS is a block.\n+        // We could probably add more recoveries here too...\n+        let mut recover_block_from_condition = |this: &mut Self| {\n+            let block = match &mut cond.kind {\n+                ExprKind::Binary(Spanned { span: binop_span, .. }, _, right)\n+                    if let ExprKind::Block(_, None) = right.kind => {\n+                        this.error_missing_if_then_block(lo, cond_span.shrink_to_lo().to(*binop_span), true).emit();\n+                        std::mem::replace(right, this.mk_expr_err(binop_span.shrink_to_hi()))\n+                    },\n+                ExprKind::Block(_, None) => {\n+                    this.error_missing_if_cond(lo, cond_span).emit();\n+                    std::mem::replace(&mut cond, this.mk_expr_err(cond_span.shrink_to_hi()))\n+                }\n+                _ => {\n+                    return None;\n+                }\n+            };\n+            if let ExprKind::Block(block, _) = &block.kind {\n+                Some(block.clone())\n+            } else {\n+                unreachable!()\n             }\n         };\n-        // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n-        // verify that the last statement is either an implicit return (no `;`) or an explicit\n-        // return. This won't catch blocks with an explicit `return`, but that would be caught by\n-        // the dead code lint.\n-        let thn = if self.token.is_keyword(kw::Else) || !cond.returns() {\n-            if let Some(binop_span) = missing_then_block_binop_span() {\n-                self.error_missing_if_then_block(lo, None, Some(binop_span)).emit();\n-                self.mk_block_err(cond.span)\n+        // Parse then block\n+        let thn = if self.token.is_keyword(kw::Else) {\n+            if let Some(block) = recover_block_from_condition(self) {\n+                block\n             } else {\n-                self.error_missing_if_cond(lo, cond.span)\n+                self.error_missing_if_then_block(lo, cond_span, false).emit();\n+                self.mk_block_err(cond_span.shrink_to_hi())\n             }\n         } else {\n             let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n-            let not_block = self.token != token::OpenDelim(Delimiter::Brace);\n-            let block = self.parse_block().map_err(|err| {\n-                if not_block {\n-                    self.error_missing_if_then_block(lo, Some(err), missing_then_block_binop_span())\n+            let block = if self.check(&token::OpenDelim(Delimiter::Brace)) {\n+                self.parse_block()?\n+            } else {\n+                if let Some(block) = recover_block_from_condition(self) {\n+                    block\n                 } else {\n-                    err\n+                    // Parse block, which will always fail, but we can add a nice note to the error\n+                    self.parse_block().map_err(|mut err| {\n+                        err.span_note(\n+                            cond_span,\n+                            \"the `if` expression is missing a block after this condition\",\n+                        );\n+                        err\n+                    })?\n                 }\n-            })?;\n+            };\n             self.error_on_if_block_attrs(lo, false, block.span, &attrs);\n             block\n         };\n@@ -2288,31 +2311,34 @@ impl<'a> Parser<'a> {\n     fn error_missing_if_then_block(\n         &self,\n         if_span: Span,\n-        err: Option<DiagnosticBuilder<'a, ErrorGuaranteed>>,\n-        binop_span: Option<Span>,\n+        cond_span: Span,\n+        is_unfinished: bool,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let msg = \"this `if` expression has a condition, but no block\";\n-\n-        let mut err = if let Some(mut err) = err {\n-            err.span_label(if_span, msg);\n-            err\n+        let mut err = self.struct_span_err(\n+            if_span,\n+            \"this `if` expression is missing a block after the condition\",\n+        );\n+        if is_unfinished {\n+            err.span_help(cond_span, \"this binary operation is possibly unfinished\");\n         } else {\n-            self.struct_span_err(if_span, msg)\n-        };\n-\n-        if let Some(binop_span) = binop_span {\n-            err.span_help(binop_span, \"maybe you forgot the right operand of the condition?\");\n+            err.span_help(cond_span.shrink_to_hi(), \"add a block here\");\n         }\n-\n         err\n     }\n \n-    fn error_missing_if_cond(&self, lo: Span, span: Span) -> P<ast::Block> {\n-        let sp = self.sess.source_map().next_point(lo);\n-        self.struct_span_err(sp, \"missing condition for `if` expression\")\n-            .span_label(sp, \"expected if condition here\")\n-            .emit();\n-        self.mk_block_err(span)\n+    fn error_missing_if_cond(\n+        &self,\n+        lo: Span,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let next_span = self.sess.source_map().next_point(lo);\n+        let mut err = self.struct_span_err(next_span, \"missing condition for `if` expression\");\n+        err.span_label(next_span, \"expected condition here\");\n+        err.span_label(\n+            self.sess.source_map().start_point(span),\n+            \"if this block is the condition of the `if` expression, then it must be followed by another block\"\n+        );\n+        err\n     }\n \n     /// Parses the condition of a `if` or `while` expression."}, {"sha": "51bd9d2d386ad03d1110e902f727513f8caf174b", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -432,10 +432,23 @@ impl<'a> Parser<'a> {\n         //\n         // which is valid in other languages, but not Rust.\n         match self.parse_stmt_without_recovery(false, ForceCollect::No) {\n-            // If the next token is an open brace (e.g., `if a b {`), the place-\n-            // inside-a-block suggestion would be more likely wrong than right.\n+            // If the next token is an open brace, e.g., we have:\n+            //\n+            //     if expr other_expr {\n+            //        ^    ^          ^- lookahead(1) is a brace\n+            //        |    |- current token is not \"else\"\n+            //        |- (statement we just parsed)\n+            //\n+            // the place-inside-a-block suggestion would be more likely wrong than right.\n+            //\n+            // FIXME(compiler-errors): this should probably parse an arbitrary expr and not\n+            // just lookahead one token, so we can see if there's a brace after _that_,\n+            // since we want to protect against:\n+            //     `if 1 1 + 1 {` being suggested as  `if { 1 } 1 + 1 {`\n+            //                                            +   +\n             Ok(Some(_))\n-                if self.look_ahead(1, |t| t == &token::OpenDelim(Delimiter::Brace))\n+                if (!self.token.is_keyword(kw::Else)\n+                    && self.look_ahead(1, |t| t == &token::OpenDelim(Delimiter::Brace)))\n                     || do_not_suggest_help => {}\n             // Do not suggest `if foo println!(\"\") {;}` (as would be seen in test for #46836).\n             Ok(Some(Stmt { kind: StmtKind::Empty, .. })) => {}"}, {"sha": "3ccc14bba5422e471ffe7f36ed4c6409c98616e7", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -25,10 +25,16 @@ LL |         println!(\"Then when?\");\n error: expected `{`, found `;`\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:20:31\n    |\n-LL |     if not  // lack of braces is [sic]\n-   |     -- this `if` expression has a condition, but no block\n LL |         println!(\"Then when?\");\n    |                               ^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:19:8\n+   |\n+LL |       if not  // lack of braces is [sic]\n+   |  ________^\n+LL | |         println!(\"Then when?\");\n+   | |______________________________^\n \n error: unexpected `2` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:26:24"}, {"sha": "5add9dfda4b9dd6f1c5e05aad9be77b66f9e872c", "filename": "src/test/ui/expr/if/if-without-block.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -1,9 +1,7 @@\n fn main() {\n     let n = 1;\n     if 5 == {\n-    //~^ NOTE this `if` expression has a condition, but no block\n+    //~^ ERROR this `if` expression is missing a block after the condition\n         println!(\"five\");\n     }\n }\n-//~^ ERROR expected `{`, found `}`\n-//~| NOTE expected `{`"}, {"sha": "2d1ee04ce09a8bf3071161b2ae89ea9a4e26547c", "filename": "src/test/ui/expr/if/if-without-block.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -1,17 +1,14 @@\n-error: expected `{`, found `}`\n-  --> $DIR/if-without-block.rs:7:1\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/if-without-block.rs:3:5\n    |\n LL |     if 5 == {\n-   |     -- this `if` expression has a condition, but no block\n-...\n-LL | }\n-   | ^ expected `{`\n+   |     ^^\n    |\n-help: maybe you forgot the right operand of the condition?\n-  --> $DIR/if-without-block.rs:3:10\n+help: this binary operation is possibly unfinished\n+  --> $DIR/if-without-block.rs:3:8\n    |\n LL |     if 5 == {\n-   |          ^^\n+   |        ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "387ef0776ff4a0af713f0b70a1042fcd5db06d66", "filename": "src/test/ui/issues/issue-39848.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,13 +2,19 @@ error: expected `{`, found `foo`\n   --> $DIR/issue-39848.rs:3:21\n    |\n LL |         if $tgt.has_$field() {}\n-   |         --          ^^^^^^ expected `{`\n-   |         |\n-   |         this `if` expression has a condition, but no block\n+   |                     ^^^^^^ expected `{`\n ...\n LL |     get_opt!(bar, foo);\n    |     ------------------ in this macro invocation\n    |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/issue-39848.rs:3:12\n+   |\n+LL |         if $tgt.has_$field() {}\n+   |            ^^^^^^^^^\n+...\n+LL |     get_opt!(bar, foo);\n+   |     ------------------ in this macro invocation\n    = note: this error originates in the macro `get_opt` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: try placing this code inside a block\n    |"}, {"sha": "16954223a452113cabf70ddcca4913d6f1143391", "filename": "src/test/ui/missing/missing-block-hint.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,18 +2,25 @@ error: expected `{`, found `=>`\n   --> $DIR/missing-block-hint.rs:3:18\n    |\n LL |         if (foo) => {}\n-   |         --       ^^ expected `{`\n-   |         |\n-   |         this `if` expression has a condition, but no block\n+   |                  ^^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/missing-block-hint.rs:3:12\n+   |\n+LL |         if (foo) => {}\n+   |            ^^^^^\n \n error: expected `{`, found `bar`\n   --> $DIR/missing-block-hint.rs:7:13\n    |\n-LL |         if (foo)\n-   |         -- this `if` expression has a condition, but no block\n LL |             bar;\n    |             ^^^ expected `{`\n    |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/missing-block-hint.rs:6:12\n+   |\n+LL |         if (foo)\n+   |            ^^^^^\n help: try placing this code inside a block\n    |\n LL |             { bar; }"}, {"sha": "2c501e3a5b3994c43aac294cd8abf2198d134f1a", "filename": "src/test/ui/parser/bad-if-statements.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fbad-if-statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fbad-if-statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-if-statements.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -0,0 +1,38 @@\n+fn a() {\n+    if {}\n+    //~^ ERROR missing condition for `if` expression\n+}\n+\n+fn b() {\n+    if true && {}\n+    //~^ ERROR this `if` expression is missing a block after the condition\n+}\n+\n+fn c() {\n+    let x = {};\n+    if true x\n+    //~^ ERROR expected `{`, found `x`\n+}\n+\n+fn a2() {\n+    if {} else {}\n+    //~^ ERROR missing condition for `if` expression\n+}\n+\n+fn b2() {\n+    if true && {} else {}\n+    //~^ ERROR this `if` expression is missing a block after the condition\n+}\n+\n+fn c2() {\n+    let x = {};\n+    if true x else {}\n+    //~^ ERROR expected `{`, found `x`\n+}\n+\n+fn d() {\n+    if true else {}\n+    //~^ ERROR this `if` expression is missing a block after the condition\n+}\n+\n+fn main() {}"}, {"sha": "ee839db64550923d9c3edaa701ec67764b03e49d", "filename": "src/test/ui/parser/bad-if-statements.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fbad-if-statements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fbad-if-statements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-if-statements.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -0,0 +1,86 @@\n+error: missing condition for `if` expression\n+  --> $DIR/bad-if-statements.rs:2:7\n+   |\n+LL |     if {}\n+   |       ^- if this block is the condition of the `if` expression, then it must be followed by another block\n+   |       |\n+   |       expected condition here\n+\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/bad-if-statements.rs:7:5\n+   |\n+LL |     if true && {}\n+   |     ^^\n+   |\n+help: this binary operation is possibly unfinished\n+  --> $DIR/bad-if-statements.rs:7:8\n+   |\n+LL |     if true && {}\n+   |        ^^^^^^^\n+\n+error: expected `{`, found `x`\n+  --> $DIR/bad-if-statements.rs:13:13\n+   |\n+LL |     if true x\n+   |             ^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/bad-if-statements.rs:13:8\n+   |\n+LL |     if true x\n+   |        ^^^^\n+help: try placing this code inside a block\n+   |\n+LL |     if true { x }\n+   |             +   +\n+\n+error: missing condition for `if` expression\n+  --> $DIR/bad-if-statements.rs:18:7\n+   |\n+LL |     if {} else {}\n+   |       ^- if this block is the condition of the `if` expression, then it must be followed by another block\n+   |       |\n+   |       expected condition here\n+\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/bad-if-statements.rs:23:5\n+   |\n+LL |     if true && {} else {}\n+   |     ^^\n+   |\n+help: this binary operation is possibly unfinished\n+  --> $DIR/bad-if-statements.rs:23:8\n+   |\n+LL |     if true && {} else {}\n+   |        ^^^^^^^\n+\n+error: expected `{`, found `x`\n+  --> $DIR/bad-if-statements.rs:29:13\n+   |\n+LL |     if true x else {}\n+   |             ^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/bad-if-statements.rs:29:8\n+   |\n+LL |     if true x else {}\n+   |        ^^^^\n+help: try placing this code inside a block\n+   |\n+LL |     if true { x } else {}\n+   |             +   +\n+\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/bad-if-statements.rs:34:5\n+   |\n+LL |     if true else {}\n+   |     ^^\n+   |\n+help: add a block here\n+  --> $DIR/bad-if-statements.rs:34:12\n+   |\n+LL |     if true else {}\n+   |            ^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "4063a33708402aa0b52a8a7995200455411e736d", "filename": "src/test/ui/parser/if-block-unreachable-expr.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fif-block-unreachable-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fif-block-unreachable-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-block-unreachable-expr.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+\n+// This regressed from 1.20 -> 1.21 -- the condition is unreachable,\n+// but it's still an expression, and should parse fine.\n+\n+fn main() {\n+    if { if true { return; } else { return; }; } {}\n+}"}, {"sha": "03f51c6e3a8f4c520ccf70833cbff15d6d0bc4f4", "filename": "src/test/ui/parser/issue-61858.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-61858.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-61858.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-61858.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,9 +2,13 @@ error: expected `{`, found `)`\n   --> $DIR/issue-61858.rs:2:15\n    |\n LL |     (if foobar)\n-   |      --       ^ expected `{`\n-   |      |\n-   |      this `if` expression has a condition, but no block\n+   |               ^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/issue-61858.rs:2:9\n+   |\n+LL |     (if foobar)\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "57d36feb37b13f686537abb097b9041ea95b0d04", "filename": "src/test/ui/parser/issue-68091-unicode-ident-after-if.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-68091-unicode-ident-after-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-68091-unicode-ident-after-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68091-unicode-ident-after-if.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -1,7 +1,8 @@\n macro_rules! x {\n     ($($c:tt)*) => {\n-        $($c)\u00f6* {} //~ ERROR missing condition for `if` expression\n-    };             //~| ERROR mismatched types\n+        $($c)\u00f6* {}\n+        //~^ ERROR missing condition for `if` expression\n+    };\n }\n \n fn main() {"}, {"sha": "6674b924e9c4b257bbb18a864a2bde391f92ac90", "filename": "src/test/ui/parser/issue-68091-unicode-ident-after-if.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-68091-unicode-ident-after-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-68091-unicode-ident-after-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68091-unicode-ident-after-if.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,19 +2,9 @@ error: missing condition for `if` expression\n   --> $DIR/issue-68091-unicode-ident-after-if.rs:3:14\n    |\n LL |         $($c)\u00f6* {}\n-   |              ^ expected if condition here\n+   |              ^  - if this block is the condition of the `if` expression, then it must be followed by another block\n+   |              |\n+   |              expected condition here\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-68091-unicode-ident-after-if.rs:3:17\n-   |\n-LL |         $($c)\u00f6* {}\n-   |                 ^^ expected `bool`, found `()`\n-...\n-LL |     x!(if);\n-   |     ------ in this macro invocation\n-   |\n-   = note: this error originates in the macro `x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "8bba27f37243973258538a7c948b27ee69f0637a", "filename": "src/test/ui/parser/issue-91421.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-91421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-91421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-91421.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,9 +2,8 @@\n \n fn main() {\n     let value = if true && {\n-    //~^ ERROR: this `if` expression has a condition, but no block\n-    //~| HELP: maybe you forgot the right operand of the condition?\n+    //~^ ERROR: this `if` expression is missing a block after the condition\n+    //~| HELP: this binary operation is possibly unfinished\n         3\n-        //~^ ERROR: mismatched types [E0308]\n     } else { 4 };\n }"}, {"sha": "2d9652051dd56a25ae801519416ff0989a404332", "filename": "src/test/ui/parser/issue-91421.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-91421.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissue-91421.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-91421.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -1,21 +1,14 @@\n-error: this `if` expression has a condition, but no block\n+error: this `if` expression is missing a block after the condition\n   --> $DIR/issue-91421.rs:4:17\n    |\n LL |     let value = if true && {\n    |                 ^^\n    |\n-help: maybe you forgot the right operand of the condition?\n-  --> $DIR/issue-91421.rs:4:25\n+help: this binary operation is possibly unfinished\n+  --> $DIR/issue-91421.rs:4:20\n    |\n LL |     let value = if true && {\n-   |                         ^^\n+   |                    ^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-91421.rs:7:9\n-   |\n-LL |         3\n-   |         ^ expected `bool`, found integer\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4e32fcab3f098a8d83e1857b06f430b4cd3fd909", "filename": "src/test/ui/parser/issues/issue-13483.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-13483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-13483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-13483.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -1,15 +1,15 @@\n fn main() {\n     if true {\n-    } else if { //~ ERROR missing condition\n-    //~^ ERROR mismatched types\n+    } else if {\n+    //~^ ERROR missing condition for `if` expression\n     } else {\n     }\n }\n \n fn foo() {\n     if true {\n-    } else if { //~ ERROR missing condition\n-    //~^ ERROR mismatched types\n+    } else if {\n+    //~^ ERROR missing condition for `if` expression\n     }\n     bar();\n }"}, {"sha": "f5534090f18a4cf19f5b58b5dc1ac9acc5fbc427", "filename": "src/test/ui/parser/issues/issue-13483.stderr", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-13483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-13483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-13483.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,32 +2,17 @@ error: missing condition for `if` expression\n   --> $DIR/issue-13483.rs:3:14\n    |\n LL |     } else if {\n-   |              ^ expected if condition here\n+   |              ^- if this block is the condition of the `if` expression, then it must be followed by another block\n+   |              |\n+   |              expected condition here\n \n error: missing condition for `if` expression\n   --> $DIR/issue-13483.rs:11:14\n    |\n LL |     } else if {\n-   |              ^ expected if condition here\n+   |              ^- if this block is the condition of the `if` expression, then it must be followed by another block\n+   |              |\n+   |              expected condition here\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-13483.rs:3:15\n-   |\n-LL |       } else if {\n-   |  _______________^\n-LL | |\n-LL | |     } else {\n-   | |_____^ expected `bool`, found `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-13483.rs:11:15\n-   |\n-LL |       } else if {\n-   |  _______________^\n-LL | |\n-LL | |     }\n-   | |_____^ expected `bool`, found `()`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4a5653fdb513e39d1ee0baf2bf88961095a485b5", "filename": "src/test/ui/parser/issues/issue-51602.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-51602.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-51602.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-51602.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -2,9 +2,13 @@ error: expected `{`, found keyword `in`\n   --> $DIR/issue-51602.rs:2:10\n    |\n LL |     if i in 1..10 {\n-   |     --   ^^ expected `{`\n-   |     |\n-   |     this `if` expression has a condition, but no block\n+   |          ^^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/issue-51602.rs:2:8\n+   |\n+LL |     if i in 1..10 {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "9e62572e388fd1ec37c5690abebc08731ebba331", "filename": "src/test/ui/parser/issues/issue-62554.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62554.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -57,10 +57,13 @@ error: expected `{`, found `macro_rules`\n   --> $DIR/issue-62554.rs:6:23\n    |\n LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n-   |                 --    ^^^^^^^^^^^ expected `{`\n-   |                 |\n-   |                 this `if` expression has a condition, but no block\n+   |                       ^^^^^^^^^^^ expected `{`\n    |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/issue-62554.rs:6:20\n+   |\n+LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n+   |                    ^^\n help: try placing this code inside a block\n    |\n LL | fn foo(u: u8) { if u8 { macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 { }"}, {"sha": "e66caa19ec96b70a6c6da4b609de03a7e0240fb9", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -21,15 +21,15 @@ fn main() {\n     };\n \n     if let Some(n) = opt else {\n-    //~^ ERROR missing condition for `if` expression\n+    //~^ ERROR this `if` expression is missing a block after the condition\n         return;\n     };\n     if let Some(n) = opt && n == 1 else {\n-    //~^ ERROR missing condition for `if` expression\n+    //~^ ERROR this `if` expression is missing a block after the condition\n         return;\n     };\n     if let Some(n) = opt && let another = n else {\n-    //~^ ERROR missing condition for `if` expression\n+    //~^ ERROR this `if` expression is missing a block after the condition\n         return;\n     };\n "}, {"sha": "eea8ed0c9633ec984d6b3db5b6bd09eb85db8be5", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ba2d25d483a65f41ca6277c160e2ea6d813e3b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=d1ba2d25d483a65f41ca6277c160e2ea6d813e3b", "patch": "@@ -20,23 +20,41 @@ help: wrap the expression in parentheses\n LL |     let Some(n) = (opt && let another = n) else {\n    |                   +                      +\n \n-error: missing condition for `if` expression\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:7\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:5\n    |\n LL |     if let Some(n) = opt else {\n-   |       ^ expected if condition here\n+   |     ^^\n+   |\n+help: add a block here\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:25\n+   |\n+LL |     if let Some(n) = opt else {\n+   |                         ^\n \n-error: missing condition for `if` expression\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:7\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:5\n    |\n LL |     if let Some(n) = opt && n == 1 else {\n-   |       ^ expected if condition here\n+   |     ^^\n+   |\n+help: add a block here\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:35\n+   |\n+LL |     if let Some(n) = opt && n == 1 else {\n+   |                                   ^\n \n-error: missing condition for `if` expression\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:7\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:5\n+   |\n+LL |     if let Some(n) = opt && let another = n else {\n+   |     ^^\n+   |\n+help: add a block here\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:44\n    |\n LL |     if let Some(n) = opt && let another = n else {\n-   |       ^ expected if condition here\n+   |                                            ^\n \n error: expected `{`, found keyword `else`\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:37:33"}]}