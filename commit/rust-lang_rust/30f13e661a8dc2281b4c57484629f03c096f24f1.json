{"sha": "30f13e661a8dc2281b4c57484629f03c096f24f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjEzZTY2MWE4ZGMyMjgxYjRjNTc0ODQ2MjlmMDNjMDk2ZjI0ZjE=", "commit": {"author": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-07-21T13:39:01Z"}, "committer": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-07-21T13:39:01Z"}, "message": "Add slice_from and slice_to methods for vec, like the\nmethods of the same names that already exist for strs.", "tree": {"sha": "bb7a8fcaa4f8e023aabdbb19e4564581f8684eae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7a8fcaa4f8e023aabdbb19e4564581f8684eae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f13e661a8dc2281b4c57484629f03c096f24f1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f13e661a8dc2281b4c57484629f03c096f24f1", "html_url": "https://github.com/rust-lang/rust/commit/30f13e661a8dc2281b4c57484629f03c096f24f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f13e661a8dc2281b4c57484629f03c096f24f1/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b6216943eebbf17e6ea5641a0f32976633c4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6216943eebbf17e6ea5641a0f32976633c4f2", "html_url": "https://github.com/rust-lang/rust/commit/c4b6216943eebbf17e6ea5641a0f32976633c4f2"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "124eefdc28fb00dd4c9259c82c3eaf2d1e2c15b2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/30f13e661a8dc2281b4c57484629f03c096f24f1/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f13e661a8dc2281b4c57484629f03c096f24f1/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=30f13e661a8dc2281b4c57484629f03c096f24f1", "patch": "@@ -702,6 +702,8 @@ impl<'self,T:Clone> CopyableVector<T> for &'self [T] {\n #[allow(missing_doc)]\n pub trait ImmutableVector<'self, T> {\n     fn slice(&self, start: uint, end: uint) -> &'self [T];\n+    fn slice_from(&self, start: uint) -> &'self [T];\n+    fn slice_to(&self, end: uint) -> &'self [T];\n     fn iter(self) -> VecIterator<'self, T>;\n     fn rev_iter(self) -> VecRevIterator<'self, T>;\n     fn split_iter(self, pred: &'self fn(&T) -> bool) -> VecSplitIterator<'self, T>;\n@@ -733,11 +735,17 @@ pub trait ImmutableVector<'self, T> {\n \n /// Extension methods for vectors\n impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n-    /// Return a slice that points into another slice.\n+\n+    /**\n+     * Returns a slice of self between `start` and `end`.\n+     *\n+     * Fails when `start` or `end` point outside the bounds of self,\n+     * or when `start` > `end`.\n+     */\n     #[inline]\n     fn slice(&self, start: uint, end: uint) -> &'self [T] {\n-    assert!(start <= end);\n-    assert!(end <= self.len());\n+        assert!(start <= end);\n+        assert!(end <= self.len());\n         do self.as_imm_buf |p, _len| {\n             unsafe {\n                 transmute((ptr::offset(p, start),\n@@ -746,6 +754,26 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         }\n     }\n \n+    /**\n+     * Returns a slice of self from `start` to the end of the vec.\n+     *\n+     * Fails when `start` points outside the bounds of self.\n+     */\n+    #[inline]\n+    fn slice_from(&self, start: uint) -> &'self [T] {\n+        self.slice(start, self.len())\n+    }\n+\n+    /**\n+     * Returns a slice of self from the start of the vec to `end`.\n+     *\n+     * Fails when `end` points outside the bounds of self.\n+     */\n+    #[inline]\n+    fn slice_to(&self, end: uint) -> &'self [T] {\n+        self.slice(0, end)\n+    }\n+\n     #[inline]\n     fn iter(self) -> VecIterator<'self, T> {\n         unsafe {\n@@ -2570,6 +2598,22 @@ mod tests {\n         assert_eq!(v_d[4], 6);\n     }\n \n+    #[test]\n+    fn test_slice_from() {\n+        let vec = &[1, 2, 3, 4];\n+        assert_eq!(vec.slice_from(0), vec);\n+        assert_eq!(vec.slice_from(2), &[3, 4]);\n+        assert_eq!(vec.slice_from(4), &[]);\n+    }\n+\n+    #[test]\n+    fn test_slice_to() {\n+        let vec = &[1, 2, 3, 4];\n+        assert_eq!(vec.slice_to(4), vec);\n+        assert_eq!(vec.slice_to(2), &[1, 2]);\n+        assert_eq!(vec.slice_to(0), &[]);\n+    }\n+\n     #[test]\n     fn test_pop() {\n         // Test on-heap pop."}]}