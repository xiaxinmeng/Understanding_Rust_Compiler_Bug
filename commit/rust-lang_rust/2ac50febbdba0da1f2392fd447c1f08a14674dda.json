{"sha": "2ac50febbdba0da1f2392fd447c1f08a14674dda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzUwZmViYmRiYTBkYTFmMjM5MmZkNDQ3YzFmMDhhMTQ2NzRkZGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-05T09:22:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-05T09:22:07Z"}, "message": "Rollup merge of #47149 - dtolnay:spans, r=jseyfried\n\nSpan::resolved_at and Span::located_at to combine behavior of two spans\n\nProc macro spans serve two mostly unrelated purposes: controlling name resolution and controlling error messages. It can be useful to mix the name resolution behavior of one span with the line/column error message locations of a different span.\n\nIn particular, consider the case of a trait brought into scope within the def_site of a custom derive. I want to invoke trait methods on the fields of the user's struct. If the field type does not implement the right trait, I want the error message to underline the corresponding struct field.\n\nGenerating the method call with the def_site span is not ideal -- it compiles and runs but error messages sadly always point to the derive attribute like we saw with Macros 1.1.\n\n```\n  |\n4 | #[derive(HeapSize)]\n  |          ^^^^^^^^\n```\n\nGenerating the method call with the same span as the struct field's ident or type is not correct -- it shows the right underlines but fails to resolve to the trait in scope at the def_site.\n\n```\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nThe correct span for the method call is one that combines the def_site's name resolution with the struct field's line/column.\n\n```rust\nfield.span.resolved_at(Span::def_site())\n\n// equivalently\nSpan::def_site().located_at(field.span)\n```\n\nAdding both because which one is more natural will depend on context.\n\nAddresses https://github.com/rust-lang/rust/issues/38356#issuecomment-354947143. r? @jseyfried", "tree": {"sha": "4e8e9ade9d781058e2c6d7d0be95e8fbf585fe2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8e9ade9d781058e2c6d7d0be95e8fbf585fe2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac50febbdba0da1f2392fd447c1f08a14674dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac50febbdba0da1f2392fd447c1f08a14674dda", "html_url": "https://github.com/rust-lang/rust/commit/2ac50febbdba0da1f2392fd447c1f08a14674dda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac50febbdba0da1f2392fd447c1f08a14674dda/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d129ce3900df3536f29f84b955b6fe8d6b35d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d129ce3900df3536f29f84b955b6fe8d6b35d0", "html_url": "https://github.com/rust-lang/rust/commit/26d129ce3900df3536f29f84b955b6fe8d6b35d0"}, {"sha": "000e907c1fc73ca249252cba3b2c9b1a20de857d", "url": "https://api.github.com/repos/rust-lang/rust/commits/000e907c1fc73ca249252cba3b2c9b1a20de857d", "html_url": "https://github.com/rust-lang/rust/commit/000e907c1fc73ca249252cba3b2c9b1a20de857d"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "f2936f2bca83d1cca1b8fd2da575b3ab0c797c18", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ac50febbdba0da1f2392fd447c1f08a14674dda/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac50febbdba0da1f2392fd447c1f08a14674dda/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=2ac50febbdba0da1f2392fd447c1f08a14674dda", "patch": "@@ -254,6 +254,20 @@ impl Span {\n         Some(Span(self.0.to(other.0)))\n     }\n \n+    /// Creates a new span with the same line/column information as `self` but\n+    /// that resolves symbols as though it were at `other`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn resolved_at(&self, other: Span) -> Span {\n+        Span(self.0.with_ctxt(other.0.ctxt()))\n+    }\n+\n+    /// Creates a new span with the same name resolution behavior as `self` but\n+    /// with the line/column information of `other`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn located_at(&self, other: Span) -> Span {\n+        other.resolved_at(*self)\n+    }\n+\n     diagnostic_method!(error, Level::Error);\n     diagnostic_method!(warning, Level::Warning);\n     diagnostic_method!(note, Level::Note);"}]}