{"sha": "56128fb3acdbb40876d1fc8aee613792ebef3080", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTI4ZmIzYWNkYmI0MDg3NmQxZmM4YWVlNjEzNzkyZWJlZjMwODA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-19T00:03:38Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:37Z"}, "message": "Implement available paths list.", "tree": {"sha": "c8753059843a319610a541faa01b990a0aac6e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8753059843a319610a541faa01b990a0aac6e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56128fb3acdbb40876d1fc8aee613792ebef3080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56128fb3acdbb40876d1fc8aee613792ebef3080", "html_url": "https://github.com/rust-lang/rust/commit/56128fb3acdbb40876d1fc8aee613792ebef3080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56128fb3acdbb40876d1fc8aee613792ebef3080/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca1e2ffd1658e800e15e730dee5d6cc02722270", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca1e2ffd1658e800e15e730dee5d6cc02722270", "html_url": "https://github.com/rust-lang/rust/commit/bca1e2ffd1658e800e15e730dee5d6cc02722270"}], "stats": {"total": 380, "additions": 224, "deletions": 156}, "files": [{"sha": "8613bc7a7ba91d53645553d30d55cca2d5b4ef4a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 98, "deletions": 7, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -16,6 +16,7 @@ use std::process::Command;\n use std::fs;\n use std::ops::Deref;\n use std::any::Any;\n+use std::collections::BTreeSet;\n \n use compile;\n use install;\n@@ -70,7 +71,7 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// will execute. However, it does not get called in a \"default\" context\n     /// when we are not passed any paths; in that case, make_run is called\n     /// directly.\n-    fn should_run(builder: &Builder, path: &Path) -> bool;\n+    fn should_run(run: ShouldRun) -> ShouldRun;\n \n     /// Build up a \"root\" rule, either as a default rule or from a path passed\n     /// to us.\n@@ -92,6 +93,43 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     }\n }\n \n+#[derive(Clone)]\n+pub struct ShouldRun<'a> {\n+    builder: &'a Builder<'a>,\n+    // use a BTreeSet to maintain sort order\n+    paths: BTreeSet<PathBuf>,\n+}\n+\n+impl<'a> ShouldRun<'a> {\n+    fn new(builder: &'a Builder) -> ShouldRun<'a> {\n+        ShouldRun {\n+            builder: builder,\n+            paths: BTreeSet::new(),\n+        }\n+    }\n+\n+    pub fn krate(mut self, name: &str) -> Self {\n+        for (_, krate_path) in self.builder.crates(name) {\n+            self.paths.insert(PathBuf::from(krate_path));\n+        }\n+        self\n+    }\n+\n+    pub fn path(mut self, path: &str) -> Self {\n+        self.paths.insert(PathBuf::from(path));\n+        self\n+    }\n+\n+    // allows being more explicit about why should_run in Step returns the value passed to it\n+    pub fn never(self) -> ShouldRun<'a> {\n+        self\n+    }\n+\n+    fn run(&self, path: &Path) -> bool {\n+        self.paths.iter().any(|p| path.ends_with(p))\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Kind {\n     Build,\n@@ -115,7 +153,7 @@ macro_rules! check {\n             for path in paths {\n                 let mut attempted_run = false;\n                 $({\n-                    if <$rule>::should_run($self, path) {\n+                    if <$rule>::should_run(ShouldRun::new($self)).run(path) {\n                         attempted_run = true;\n                         $self.maybe_run::<$rule>(Some(path));\n                     }\n@@ -129,6 +167,60 @@ macro_rules! check {\n }\n \n impl<'a> Builder<'a> {\n+    pub fn get_help(build: &Build, subcommand: &str) -> Option<String> {\n+        let kind = match subcommand {\n+            \"build\" => Kind::Build,\n+            \"doc\" => Kind::Doc,\n+            \"test\" => Kind::Test,\n+            \"bench\" => Kind::Bench,\n+            \"dist\" => Kind::Dist,\n+            \"install\" => Kind::Install,\n+            _ => return None,\n+        };\n+\n+        let builder = Builder {\n+            build: build,\n+            top_stage: build.flags.stage.unwrap_or(2),\n+            kind: kind,\n+            cache: Cache::new(),\n+            stack: RefCell::new(Vec::new()),\n+        };\n+\n+        let builder = &builder;\n+        let mut should_run = ShouldRun::new(builder);\n+        macro_rules! into_shouldrun {\n+            ($should_run:ident, $($rule:ty),+ $(,)*) => {{\n+                $(\n+                    $should_run = <$rule>::should_run($should_run);\n+                )+\n+            }};\n+        }\n+        match builder.kind {\n+            Kind::Build => into_shouldrun!(should_run, compile::Std, compile::Test, compile::Rustc,\n+                compile::StartupObjects, tool::BuildManifest, tool::Rustbook, tool::ErrorIndex,\n+                tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n+                tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n+                tool::RustInstaller, tool::Cargo, tool::Rls),\n+            Kind::Test => into_shouldrun!(should_run, check::Tidy, check::Bootstrap,\n+                check::Compiletest, check::Crate, check::CrateLibrustc, check::Linkcheck,\n+                check::Cargotest, check::Cargo, check::Docs, check::ErrorIndex, check::Distcheck),\n+            Kind::Bench => into_shouldrun!(should_run, check::Crate, check::CrateLibrustc),\n+            Kind::Doc => into_shouldrun!(should_run, doc::UnstableBook, doc::UnstableBookGen,\n+                doc::TheBook, doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex,\n+                doc::Nomicon, doc::Reference),\n+            Kind::Dist => into_shouldrun!(should_run, dist::Docs, dist::Mingw, dist::Rustc,\n+                dist::DebuggerScripts, dist::Std, dist::Analysis, dist::Src,\n+                dist::PlainSourceTarball, dist::Cargo, dist::Rls, dist::Extended, dist::HashSign),\n+            Kind::Install => into_shouldrun!(should_run, install::Docs, install::Std,\n+                install::Cargo, install::Rls, install::Analysis, install::Src, install::Rustc),\n+        }\n+        let mut help = String::from(\"Available paths:\\n\");\n+        for path in should_run.paths {\n+            help.push_str(format!(\"    ./x.py {} {}\\n\", subcommand, path.display()).as_str());\n+        }\n+        Some(help)\n+    }\n+\n     pub fn run(build: &Build) {\n         let (kind, paths) = match build.flags.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n@@ -170,9 +262,8 @@ impl<'a> Builder<'a> {\n \n     pub fn default_doc(&self, paths: Option<&[PathBuf]>) {\n         let paths = paths.unwrap_or(&[]);\n-        check!(self, paths, doc::UnstableBook, doc::UnstableBookGen, doc::Rustbook, doc::TheBook,\n-            doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex,\n-            doc::Nomicon, doc::Reference);\n+        check!(self, paths, doc::UnstableBook, doc::UnstableBookGen, doc::TheBook, doc::Standalone,\n+            doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon, doc::Reference);\n     }\n \n     /// Obtain a compiler at a given stage and for a given host. Explictly does\n@@ -200,8 +291,8 @@ impl<'a> Builder<'a> {\n         impl Step for Libdir {\n             type Output = Interned<PathBuf>;\n \n-            fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-                false\n+            fn should_run(run: ShouldRun) -> ShouldRun {\n+                run.never()\n             }\n \n             fn run(self, builder: &Builder) -> Interned<PathBuf> {"}, {"sha": "847307959cb8dd4f0fd411aafd1507e18849447d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -31,7 +31,7 @@ use util::{self, dylib_path, dylib_path_var};\n \n use compile;\n use native;\n-use builder::{Kind, Builder, Compiler, Step};\n+use builder::{Kind, ShouldRun, Builder, Compiler, Step};\n use tool::{self, Tool};\n use cache::{INTERNER, Interned};\n \n@@ -121,8 +121,8 @@ impl Step for Linkcheck {\n                             .arg(build.out.join(host).join(\"doc\")));\n     }\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/linkchecker\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/linkchecker\")\n     }\n \n     fn make_run(\n@@ -157,8 +157,8 @@ impl Step for Cargotest {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/cargotest\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/cargotest\")\n     }\n \n     fn make_run(\n@@ -212,8 +212,8 @@ impl Step for Cargo {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/cargo\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/cargo\")\n     }\n \n     fn make_run(\n@@ -264,8 +264,8 @@ impl Step for Rls {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/rls\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rls\")\n     }\n \n     fn make_run(\n@@ -348,8 +348,8 @@ impl Step for Tidy {\n         try_run(build, &mut cmd);\n     }\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/tidy\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/tidy\")\n     }\n \n     fn make_run(\n@@ -531,13 +531,14 @@ impl Step for Compiletest {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+    fn should_run(mut run: ShouldRun) -> ShouldRun {\n         // Note that this is general, while a few more cases are skipped inside\n         // run() itself. This is to avoid duplication across should_run and\n         // make_run.\n-        COMPILETESTS.iter().chain(DEFAULT_COMPILETESTS).chain(HOST_COMPILETESTS).any(|&test| {\n-            path.ends_with(test.path)\n-        })\n+        for test in COMPILETESTS.iter().chain(DEFAULT_COMPILETESTS).chain(HOST_COMPILETESTS) {\n+            run = run.path(test.path);\n+        }\n+        run\n     }\n \n     fn make_run(\n@@ -803,8 +804,8 @@ impl Step for Docs {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/doc\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/doc\")\n     }\n \n     fn make_run(\n@@ -873,8 +874,8 @@ impl Step for ErrorIndex {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/error_index_generator\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/error_index_generator\")\n     }\n \n     fn make_run(\n@@ -973,10 +974,8 @@ impl Step for CrateLibrustc {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        builder.crates(\"rustc-main\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.krate(\"rustc-main\")\n     }\n \n     fn make_run(\n@@ -1087,13 +1086,8 @@ impl Step for Crate {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        builder.crates(\"std\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        }) ||\n-        builder.crates(\"test\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.krate(\"std\").krate(\"test\")\n     }\n \n     fn make_run(\n@@ -1358,8 +1352,8 @@ pub struct RemoteCopyLibs {\n impl Step for RemoteCopyLibs {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     fn run(self, builder: &Builder) {\n@@ -1413,8 +1407,8 @@ pub struct Distcheck;\n impl Step for Distcheck {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"distcheck\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"distcheck\")\n     }\n \n     /// Run \"distcheck\", a 'make check' from a tarball\n@@ -1503,8 +1497,8 @@ impl Step for Bootstrap {\n         try_run(build, &mut cmd);\n     }\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/bootstrap\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/bootstrap\")\n     }\n \n     fn make_run("}, {"sha": "134d957220da8c5329a175cbc6998435f0789a2e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -34,7 +34,7 @@ use {Build, Compiler, Mode};\n use native;\n \n use cache::{INTERNER, Interned};\n-use builder::{Step, Builder};\n+use builder::{Step, ShouldRun, Builder};\n \n //\n //    // Crates which have build scripts need to rely on this rule to ensure that\n@@ -152,11 +152,8 @@ impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/libstd\") ||\n-        builder.crates(\"std\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/libstd\").krate(\"std\")\n     }\n \n     fn make_run(\n@@ -277,8 +274,8 @@ struct StdLink {\n impl Step for StdLink {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Link all libstd rlibs/dylibs into the sysroot location.\n@@ -350,8 +347,8 @@ pub struct StartupObjects {\n impl Step for StartupObjects {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/rtstartup\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/rtstartup\")\n     }\n \n     fn make_run(\n@@ -422,11 +419,8 @@ impl Step for Test {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/libtest\") ||\n-        builder.crates(\"test\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/libtest\").krate(\"test\")\n     }\n \n     fn make_run(\n@@ -508,8 +502,8 @@ pub struct TestLink {\n impl Step for TestLink {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Same as `std_link`, only for libtest\n@@ -548,11 +542,8 @@ impl Step for Rustc {\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/librustc\") ||\n-        builder.crates(\"rustc-main\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/librustc\").krate(\"rustc-main\")\n     }\n \n     fn make_run(\n@@ -700,8 +691,8 @@ struct RustcLink {\n impl Step for RustcLink {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Same as `std_link`, only for librustc\n@@ -756,8 +747,8 @@ pub struct Sysroot {\n impl Step for Sysroot {\n     type Output = Interned<PathBuf>;\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Returns the sysroot for the `compiler` specified that *this build system\n@@ -806,8 +797,8 @@ pub struct Assemble {\n impl Step for Assemble {\n     type Output = Compiler;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/rustc\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/rustc\")\n     }\n \n     /// Prepare a new compiler from the artifacts in `stage`"}, {"sha": "e3d6c74ec221c514196778d59fa5b639229cedc3", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -37,7 +37,7 @@ use build_helper::output;\n use {Build, Compiler, Mode};\n use channel;\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n-use builder::{Builder, Step};\n+use builder::{Builder, ShouldRun, Step};\n use compile;\n use tool::{self, Tool};\n use cache::{INTERNER, Interned};\n@@ -83,8 +83,8 @@ impl Step for Docs {\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/doc\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/doc\")\n     }\n \n     fn make_run(\n@@ -296,8 +296,8 @@ impl Step for Mingw {\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     fn make_run(\n@@ -367,8 +367,8 @@ impl Step for Rustc {\n     const ONLY_HOSTS: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/librustc\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/librustc\")\n     }\n \n     fn make_run(\n@@ -508,8 +508,8 @@ pub struct DebuggerScripts {\n impl Step for DebuggerScripts {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/etc/lldb_batchmode.py\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/lldb_batchmode.py\")\n     }\n \n     fn make_run(\n@@ -584,8 +584,8 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/libstd\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/libstd\")\n     }\n \n     fn make_run(\n@@ -666,8 +666,8 @@ impl Step for Analysis {\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"analysis\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"analysis\")\n     }\n \n     fn make_run(\n@@ -794,8 +794,8 @@ impl Step for Src {\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_BUILD: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src\")\n     }\n \n     fn make_run(\n@@ -893,8 +893,8 @@ impl Step for PlainSourceTarball {\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_BUILD: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src\")\n     }\n \n     fn make_run(\n@@ -1046,8 +1046,8 @@ impl Step for Cargo {\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"cargo\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"cargo\")\n     }\n \n     fn make_run(\n@@ -1144,8 +1144,8 @@ impl Step for Rls {\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"rls\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"rls\")\n     }\n \n     fn make_run(\n@@ -1240,8 +1240,8 @@ impl Step for Extended {\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"cargo\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"cargo\")\n     }\n \n     fn make_run(\n@@ -1648,8 +1648,8 @@ impl Step for HashSign {\n     const ONLY_HOSTS: bool = true;\n     const ONLY_BUILD: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"hash-and-sign\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"hash-and-sign\")\n     }\n \n     fn make_run("}, {"sha": "1fd39ba878f0da77e44111e8c4007d8c4f181492", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -27,7 +27,7 @@ use Mode;\n use build_helper::up_to_date;\n \n use util::{cp_r, symlink_dir};\n-use builder::{Builder, Step};\n+use builder::{Builder, ShouldRun, Step};\n use tool::Tool;\n use compile;\n use cache::{INTERNER, Interned};\n@@ -44,8 +44,8 @@ macro_rules! book {\n             type Output = ();\n             const DEFAULT: bool = true;\n \n-            fn should_run(_builder: &Builder, path: &Path) -> bool {\n-                path.ends_with($path)\n+            fn should_run(run: ShouldRun) -> ShouldRun {\n+                run.path($path)\n             }\n \n             fn make_run(\n@@ -99,7 +99,7 @@ book!(\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Rustbook {\n+struct Rustbook {\n     target: Interned<String>,\n     name: Interned<String>,\n }\n@@ -109,8 +109,8 @@ impl Step for Rustbook {\n \n     // rustbook is never directly called, and only serves as a shim for the nomicon and the\n     // reference.\n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Invoke `rustbook` for `target` for the doc book `name`.\n@@ -149,8 +149,8 @@ impl Step for UnstableBook {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/doc/unstable-book\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/doc/unstable-book\")\n     }\n \n     fn make_run(\n@@ -179,7 +179,7 @@ impl Step for UnstableBook {\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct RustbookSrc {\n+struct RustbookSrc {\n     target: Interned<String>,\n     name: Interned<String>,\n     src: Interned<PathBuf>,\n@@ -188,9 +188,8 @@ pub struct RustbookSrc {\n impl Step for RustbookSrc {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        // RustbookSrc is also never run directly, only as a helper to other rules\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Invoke `rustbook` for `target` for the doc book `name` from the `src` path.\n@@ -242,8 +241,8 @@ impl Step for TheBook {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/doc/book\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/doc/book\")\n     }\n \n     fn make_run(\n@@ -366,8 +365,8 @@ impl Step for Standalone {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/doc\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/doc\")\n     }\n \n     fn make_run(\n@@ -475,12 +474,11 @@ impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        builder.crates(\"std\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.krate(\"std\")\n     }\n \n+\n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n@@ -588,10 +586,8 @@ impl Step for Test {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        builder.crates(\"test\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.krate(\"test\")\n     }\n \n     fn make_run(\n@@ -678,10 +674,8 @@ impl Step for Rustc {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(builder: &Builder, path: &Path) -> bool {\n-        builder.crates(\"rustc-main\").into_iter().any(|(_, krate_path)| {\n-            path.ends_with(krate_path)\n-        })\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.krate(\"rustc-main\")\n     }\n \n     fn make_run(\n@@ -780,8 +774,8 @@ impl Step for ErrorIndex {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/error_index_generator\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/error_index_generator\")\n     }\n \n     fn make_run(\n@@ -844,8 +838,8 @@ impl Step for UnstableBookGen {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/doc/unstable-book\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/unstable-book-gen\")\n     }\n \n     fn make_run("}, {"sha": "1a3a008ed26147c00d97c47c3b1eaf452ced02ae", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -23,6 +23,7 @@ use getopts::Options;\n use Build;\n use config::Config;\n use metadata;\n+use builder::Builder;\n \n use cache::{Interned, INTERNER};\n \n@@ -248,11 +249,8 @@ Arguments:\n             let mut build = Build::new(flags, config);\n             metadata::build(&mut build);\n \n-            // FIXME: How should this happen now? Not super clear...\n-            // let maybe_rules_help = step::build_rules(&build).get_help(subcommand);\n-            // if maybe_rules_help.is_some() {\n-            //     extra_help.push_str(maybe_rules_help.unwrap().as_str());\n-            // }\n+            let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());\n+            extra_help.push_str(maybe_rules_help.unwrap_or_default().as_str());\n         } else {\n             extra_help.push_str(format!(\"Run `./x.py {} -h -v` to see a list of available paths.\",\n                      subcommand).as_str());"}, {"sha": "fac69f89dc1d16967ebbd1b7b2c04a9ca58b4033", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -20,7 +20,7 @@ use std::process::Command;\n \n use dist::{self, pkgname, sanitize_sh, tmpdir};\n \n-use builder::{Builder, Step};\n+use builder::{Builder, ShouldRun, Step};\n use cache::Interned;\n \n pub fn install_docs(builder: &Builder, stage: u32, host: Interned<String>) {\n@@ -149,8 +149,8 @@ macro_rules! install {\n             const ONLY_HOSTS: bool = $only_hosts;\n             $(const $c: bool = true;)*\n \n-            fn should_run(_builder: &Builder, path: &Path) -> bool {\n-                path.ends_with($path)\n+            fn should_run(run: ShouldRun) -> ShouldRun {\n+                run.path($path)\n             }\n \n             fn make_run("}, {"sha": "af13d86649734aa735c2d254d87ff80ee015f5d1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -32,7 +32,7 @@ use gcc;\n use Build;\n use util;\n use build_helper::up_to_date;\n-use builder::{Builder, Step};\n+use builder::{Builder, ShouldRun, Step};\n use cache::Interned;\n \n // rules.build(\"llvm\", \"src/llvm\")\n@@ -55,8 +55,8 @@ impl Step for Llvm {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/llvm\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/llvm\")\n     }\n \n     /// Compile LLVM for `target`.\n@@ -257,8 +257,8 @@ pub struct TestHelpers {\n impl Step for TestHelpers {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/rt/rust_test_helpers.c\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/rt/rust_test_helpers.c\")\n     }\n \n     fn make_run(\n@@ -322,8 +322,8 @@ pub struct Openssl {\n impl Step for Openssl {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     fn run(self, builder: &Builder) {"}, {"sha": "9554eb3e2a5bda5fe1f12bfc2c69c29fa105c136", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56128fb3acdbb40876d1fc8aee613792ebef3080/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=56128fb3acdbb40876d1fc8aee613792ebef3080", "patch": "@@ -14,7 +14,7 @@ use std::process::Command;\n \n use Mode;\n use Compiler;\n-use builder::{Step, Builder};\n+use builder::{Step, ShouldRun, Builder};\n use util::{exe, add_lib_path};\n use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp, Rustc};\n use native;\n@@ -55,8 +55,8 @@ pub struct CleanTools {\n impl Step for CleanTools {\n     type Output = ();\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Build a tool in `src/tools`\n@@ -93,8 +93,8 @@ pub struct ToolBuild {\n impl Step for ToolBuild {\n     type Output = PathBuf;\n \n-    fn should_run(_builder: &Builder, _path: &Path) -> bool {\n-        false\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n     }\n \n     /// Build a tool in `src/tools`\n@@ -183,8 +183,8 @@ macro_rules! tool {\n         impl Step for $name {\n             type Output = PathBuf;\n \n-            fn should_run(_builder: &Builder, path: &Path) -> bool {\n-                path.ends_with($path)\n+            fn should_run(run: ShouldRun) -> ShouldRun {\n+                run.path($path)\n             }\n \n             fn make_run(\n@@ -274,8 +274,8 @@ pub struct RemoteTestServer {\n impl Step for RemoteTestServer {\n     type Output = PathBuf;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/remote-test-server\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/remote-test-server\")\n     }\n \n     fn make_run(\n@@ -325,8 +325,8 @@ impl Step for Cargo {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/cargo\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/cargo\")\n     }\n \n     fn make_run(\n@@ -384,8 +384,8 @@ impl Step for Rls {\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n-    fn should_run(_builder: &Builder, path: &Path) -> bool {\n-        path.ends_with(\"src/tools/rls\")\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rls\")\n     }\n \n     fn make_run("}]}