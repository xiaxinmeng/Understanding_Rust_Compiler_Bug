{"sha": "8f132d85498e12e0a248f29644d74fcac15f0d96", "node_id": "C_kwDOAAsO6NoAKDhmMTMyZDg1NDk4ZTEyZTBhMjQ4ZjI5NjQ0ZDc0ZmNhYzE1ZjBkOTY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-15T17:19:38Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:58Z"}, "message": "Run the resolver after TyCtxt construction", "tree": {"sha": "da346b7311855301767394d92c79f5178ab4e39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da346b7311855301767394d92c79f5178ab4e39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f132d85498e12e0a248f29644d74fcac15f0d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f132d85498e12e0a248f29644d74fcac15f0d96", "html_url": "https://github.com/rust-lang/rust/commit/8f132d85498e12e0a248f29644d74fcac15f0d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f132d85498e12e0a248f29644d74fcac15f0d96/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6924e3c374563217a724f7ffca1a5087166e8f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/6924e3c374563217a724f7ffca1a5087166e8f49", "html_url": "https://github.com/rust-lang/rust/commit/6924e3c374563217a724f7ffca1a5087166e8f49"}], "stats": {"total": 126, "additions": 69, "deletions": 57}, "files": [{"sha": "6c17edd302081e8044fd3780b2b79e3fbc87d149", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f132d85498e12e0a248f29644d74fcac15f0d96/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8f132d85498e12e0a248f29644d74fcac15f0d96/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8f132d85498e12e0a248f29644d74fcac15f0d96", "patch": "@@ -4180,6 +4180,7 @@ dependencies = [\n  \"rustc_hir_analysis\",\n  \"rustc_hir_typeck\",\n  \"rustc_incremental\",\n+ \"rustc_index\",\n  \"rustc_lint\",\n  \"rustc_macros\",\n  \"rustc_metadata\","}, {"sha": "ac6e8fca69554baadc02d292dab06640bea461f6", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=8f132d85498e12e0a248f29644d74fcac15f0d96", "patch": "@@ -24,6 +24,7 @@ rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_lowering = { path = \"../rustc_ast_lowering\" }\n rustc_ast_passes = { path = \"../rustc_ast_passes\" }\n rustc_incremental = { path = \"../rustc_incremental\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_traits = { path = \"../rustc_traits\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }"}, {"sha": "dcce5e53fb2d220e318e140d38e6e00f13ed1ed2", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 53, "deletions": 38, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=8f132d85498e12e0a248f29644d74fcac15f0d96", "patch": "@@ -7,16 +7,20 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n-use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_data_structures::sync::{Lrc, OnceCell, RwLock, WorkerLocal};\n+use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::definitions::Definitions;\n use rustc_incremental::DepGraphFuture;\n+use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n+use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_resolve::Resolver;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n+use rustc_session::cstore::Untracked;\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n@@ -187,40 +191,20 @@ impl<'tcx> Queries<'tcx> {\n         self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, lint_store) = self.register_plugins()?.steal();\n-            let (krate, resolver_outputs) = {\n-                let _timer = self.session().timer(\"configure_and_expand\");\n-                let sess = self.session();\n-\n-                let arenas = Resolver::arenas();\n-                let mut resolver = Resolver::new(\n-                    sess,\n-                    &krate,\n-                    crate_name,\n-                    self.codegen_backend().metadata_loader(),\n-                    &arenas,\n-                );\n-                let krate = passes::configure_and_expand(\n-                    sess,\n-                    &lint_store,\n-                    krate,\n-                    crate_name,\n-                    &mut resolver,\n-                )?;\n-                (Lrc::new(krate), resolver.into_outputs())\n-            };\n-\n-            let ty::ResolverOutputs {\n-                untracked,\n-                global_ctxt: untracked_resolutions,\n-                ast_lowering: untracked_resolver_for_lowering,\n-            } = resolver_outputs;\n \n-            // Make sure we don't mutate the cstore from here on.\n-            std::mem::forget(untracked.cstore.read());\n+            let sess = self.session();\n \n-            let gcx = passes::create_global_ctxt(\n+            let cstore = RwLock::new(Box::new(CStore::new(sess)) as _);\n+            let definitions = RwLock::new(Definitions::new(sess.local_stable_crate_id()));\n+            let mut source_span = IndexVec::default();\n+            let _id = source_span.push(krate.spans.inner_span);\n+            debug_assert_eq!(_id, CRATE_DEF_ID);\n+            let source_span = RwLock::new(source_span);\n+            let untracked = Untracked { cstore, source_span, definitions };\n+\n+            let qcx = passes::create_global_ctxt(\n                 self.compiler,\n-                lint_store,\n+                lint_store.clone(),\n                 self.dep_graph()?.steal(),\n                 untracked,\n                 &self.queries,\n@@ -229,17 +213,48 @@ impl<'tcx> Queries<'tcx> {\n                 &self.hir_arena,\n             );\n \n-            gcx.enter(|tcx| {\n+            qcx.enter(|tcx| {\n+                let feed = tcx.feed_local_crate();\n+                feed.crate_name(crate_name);\n+                let (krate, resolver_outputs) = {\n+                    let _timer = sess.timer(\"configure_and_expand\");\n+\n+                    let arenas = Resolver::arenas();\n+                    let mut resolver = Resolver::new(\n+                        sess,\n+                        &krate,\n+                        crate_name,\n+                        self.codegen_backend().metadata_loader(),\n+                        &arenas,\n+                        tcx.untracked(),\n+                    );\n+                    let krate = passes::configure_and_expand(\n+                        sess,\n+                        &lint_store,\n+                        krate,\n+                        crate_name,\n+                        &mut resolver,\n+                    )?;\n+\n+                    // Make sure we don't mutate the cstore from here on.\n+                    tcx.untracked().cstore.leak();\n+                    (Lrc::new(krate), resolver.into_outputs())\n+                };\n+\n+                let ty::ResolverOutputs {\n+                    global_ctxt: untracked_resolutions,\n+                    ast_lowering: untracked_resolver_for_lowering,\n+                } = resolver_outputs;\n+\n                 let feed = tcx.feed_unit_query();\n                 feed.resolver_for_lowering(\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n                 );\n                 feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n                 feed.features_query(tcx.sess.features_untracked());\n-                let feed = tcx.feed_local_crate();\n-                feed.crate_name(crate_name);\n-            });\n-            Ok(gcx)\n+                Ok(())\n+            })?;\n+            Ok(qcx)\n         })\n     }\n "}, {"sha": "cf4836ded474bb94538f4f10b50fffd5eae371aa", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8f132d85498e12e0a248f29644d74fcac15f0d96", "patch": "@@ -1015,6 +1015,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         ReadGuard::map(self.untracked.cstore.read(), |c| &**c)\n     }\n \n+    /// Give out access to the untracked data without any sanity checks.\n+    pub fn untracked(self) -> &'tcx Untracked {\n+        &self.untracked\n+    }\n     /// Note that this is *untracked* and should only be used within the query\n     /// system if the result is otherwise tracked through queries\n     #[inline]"}, {"sha": "f61fe707ac934fd41a631060c88a00798824a8e1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8f132d85498e12e0a248f29644d74fcac15f0d96", "patch": "@@ -43,7 +43,6 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};\n-use rustc_session::cstore::Untracked;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, ExpnKind, Span};\n@@ -157,7 +156,6 @@ pub type RegisteredTools = FxHashSet<Ident>;\n pub struct ResolverOutputs {\n     pub global_ctxt: ResolverGlobalCtxt,\n     pub ast_lowering: ResolverAstLowering,\n-    pub untracked: Untracked,\n }\n \n #[derive(Debug)]"}, {"sha": "f8bfb113d832d70256ccadc937b9e1ef0d8a5542", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f132d85498e12e0a248f29644d74fcac15f0d96/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=8f132d85498e12e0a248f29644d74fcac15f0d96", "patch": "@@ -27,14 +27,14 @@ use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::sync::{Lrc, MappedReadGuard, ReadGuard, RwLock};\n+use rustc_data_structures::sync::{Lrc, MappedReadGuard, ReadGuard};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorOf, DefKind, DocLinkResMap, LifetimeRes, PartialRes, PerNS};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId};\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefPathData, Definitions};\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n@@ -962,7 +962,7 @@ pub struct Resolver<'a, 'tcx> {\n \n     local_crate_name: Symbol,\n     metadata_loader: Box<MetadataLoaderDyn>,\n-    untracked: Untracked,\n+    untracked: &'tcx Untracked,\n     used_extern_options: FxHashSet<Symbol>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n@@ -1211,6 +1211,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         crate_name: Symbol,\n         metadata_loader: Box<MetadataLoaderDyn>,\n         arenas: &'a ResolverArenas<'a>,\n+        untracked: &'tcx Untracked,\n     ) -> Resolver<'a, 'tcx> {\n         let tcx = TyCtxt { sess: session };\n \n@@ -1233,8 +1234,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             &mut FxHashMap::default(),\n         );\n \n-        let definitions = Definitions::new(session.local_stable_crate_id());\n-\n         let mut visibilities = FxHashMap::default();\n         visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);\n \n@@ -1246,10 +1245,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut invocation_parents = FxHashMap::default();\n         invocation_parents.insert(LocalExpnId::ROOT, (CRATE_DEF_ID, ImplTraitContext::Existential));\n \n-        let mut source_span = IndexVec::default();\n-        let _id = source_span.push(krate.spans.inner_span);\n-        debug_assert_eq!(_id, CRATE_DEF_ID);\n-\n         let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session\n             .opts\n             .externs\n@@ -1327,11 +1322,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             metadata_loader,\n             local_crate_name: crate_name,\n             used_extern_options: Default::default(),\n-            untracked: Untracked {\n-                cstore: RwLock::new(Box::new(CStore::new(session))),\n-                source_span: RwLock::new(source_span),\n-                definitions: RwLock::new(definitions),\n-            },\n+            untracked,\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             builtin_macro_kinds: Default::default(),\n@@ -1436,7 +1427,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let main_def = self.main_def;\n         let confused_type_with_std_module = self.confused_type_with_std_module;\n         let effective_visibilities = self.effective_visibilities;\n-        let untracked = self.untracked;\n         let global_ctxt = ResolverGlobalCtxt {\n             expn_that_defined,\n             visibilities,\n@@ -1475,11 +1465,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             builtin_macro_kinds: self.builtin_macro_kinds,\n             lifetime_elision_allowed: self.lifetime_elision_allowed,\n         };\n-        ResolverOutputs { global_ctxt, ast_lowering, untracked }\n+        ResolverOutputs { global_ctxt, ast_lowering }\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n-        StableHashingContext::new(self.tcx.sess, &self.untracked)\n+        StableHashingContext::new(self.tcx.sess, self.untracked)\n     }\n \n     fn crate_loader<T>(&mut self, f: impl FnOnce(&mut CrateLoader<'_>) -> T) -> T {\n@@ -1543,6 +1533,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 .sess\n                 .time(\"resolve_postprocess\", || self.crate_loader(|c| c.postprocess(krate)));\n         });\n+\n+        // Make sure we don't mutate the cstore from here on.\n+        self.untracked.cstore.leak();\n     }\n \n     fn traits_in_scope("}]}