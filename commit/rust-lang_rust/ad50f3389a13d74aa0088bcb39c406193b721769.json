{"sha": "ad50f3389a13d74aa0088bcb39c406193b721769", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNTBmMzM4OWExM2Q3NGFhMDA4OGJjYjM5YzQwNjE5M2I3MjE3Njk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-22T16:35:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-22T16:35:54Z"}, "message": "Optimise decode return expression for unit structs", "tree": {"sha": "30af0f94caa13ff66e1256749903b9e11ac51ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30af0f94caa13ff66e1256749903b9e11ac51ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad50f3389a13d74aa0088bcb39c406193b721769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad50f3389a13d74aa0088bcb39c406193b721769", "html_url": "https://github.com/rust-lang/rust/commit/ad50f3389a13d74aa0088bcb39c406193b721769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad50f3389a13d74aa0088bcb39c406193b721769/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d278ca6a887b0adc2b1b852c09f24892b8397b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d278ca6a887b0adc2b1b852c09f24892b8397b4", "html_url": "https://github.com/rust-lang/rust/commit/0d278ca6a887b0adc2b1b852c09f24892b8397b4"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "88baa22e7fa1160561b664e82bb4f4a1437447b4", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad50f3389a13d74aa0088bcb39c406193b721769/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad50f3389a13d74aa0088bcb39c406193b721769/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=ad50f3389a13d74aa0088bcb39c406193b721769", "patch": "@@ -228,13 +228,13 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n             }\n \n             // unit structs have no fields and need to return Ok()\n-            if stmts.is_empty() {\n+            let blk = if stmts.is_empty() {\n                 let ok = cx.expr_ok(trait_span, cx.expr_tuple(trait_span, vec![]));\n-                let ret_ok = cx.expr(trait_span, ExprKind::Ret(Some(ok)));\n-                stmts.push(cx.stmt_expr(ret_ok));\n-            }\n+                cx.lambda1(trait_span, ok, blkarg)\n+            } else {\n+                cx.lambda_stmts_1(trait_span, stmts, blkarg)\n+            };\n \n-            let blk = cx.lambda_stmts_1(trait_span, stmts, blkarg);\n             cx.expr_method_call(trait_span,\n                                 encoder,\n                                 cx.ident_of(\"emit_struct\"),"}]}