{"sha": "35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZWYzM2E4OWRmZDhmZjhjOGE3YjNjNThmYTcxMzZiYmNiMmYxZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-21T14:30:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-21T14:30:02Z"}, "message": "Auto merge of #66607 - Centril:rollup-yb7cl73, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #65355 (Stabilize `!` in Rust 1.41.0)\n - #65730 (Suggest to add lifetime constraint at explicit ouput of functions)\n - #66468 (Cleanup Miri SIMD intrinsics)\n - #66515 (Reduce size of `hir::Expr` by boxing more of `hir::InlineAsm`)\n - #66602 (Revert \"Update Source Code Pro and include italics\")\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "198a52d838a5a90eee1de769a634e6e19c077914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198a52d838a5a90eee1de769a634e6e19c077914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "html_url": "https://github.com/rust-lang/rust/commit/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "html_url": "https://github.com/rust-lang/rust/commit/f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}, {"sha": "5ab2bccbcdd48c7055eb77e348486d0bda283a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab2bccbcdd48c7055eb77e348486d0bda283a1f", "html_url": "https://github.com/rust-lang/rust/commit/5ab2bccbcdd48c7055eb77e348486d0bda283a1f"}], "stats": {"total": 996, "additions": 432, "deletions": 564}, "files": [{"sha": "86dd77f10f324f5a84812685a19427679fdbce67", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -185,7 +185,7 @@ mod impls {\n         bool char\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Clone for ! {\n         #[inline]\n         fn clone(&self) -> Self {"}, {"sha": "1e2e595f1dd0a7035ee7dfdbdc8852861e3c5170", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1128,24 +1128,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Eq for ! {}\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "89a269bdb8eb94d4f84dd7a7aba4fde0f4455a5f", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 7, "deletions": 88, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -40,8 +40,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::fmt;\n-\n /// The identity function.\n ///\n /// Two things are important to note about this function:\n@@ -426,9 +424,7 @@ pub trait TryInto<T>: Sized {\n /// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n-/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n-/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n-/// equivalent.\n+/// calling `T::try_from()` on a value of type `T` is [`!`].\n ///\n /// `TryFrom<T>` can be implemented as follows:\n ///\n@@ -477,7 +473,6 @@ pub trait TryInto<T>: Sized {\n /// [`TryInto`]: trait.TryInto.html\n /// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n /// [`!`]: ../../std/primitive.never.html\n-/// [`Infallible`]: enum.Infallible.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -615,9 +610,9 @@ impl AsRef<str> for str {\n // THE NO-ERROR ERROR TYPE\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// The error type for errors that can never happen.\n+/// A type alias for [the `!` \u201cnever\u201d type][never].\n ///\n-/// Since this enum has no variant, a value of this type can never actually exist.\n+/// `Infallible` represents types of errors that can never happen since `!` has no valid values.\n /// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n /// to indicate that the result is always [`Ok`].\n ///\n@@ -634,91 +629,15 @@ impl AsRef<str> for str {\n /// }\n /// ```\n ///\n-/// # Future compatibility\n-///\n-/// This enum has the same role as [the `!` \u201cnever\u201d type][never],\n-/// which is unstable in this version of Rust.\n-/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n-///\n-/// ```ignore (illustrates future std change)\n-/// pub type Infallible = !;\n-/// ```\n-///\n-/// \u2026 and eventually deprecate `Infallible`.\n-///\n-///\n-/// However there is one case where `!` syntax can be used\n-/// before `!` is stabilized as a full-fleged type: in the position of a function\u2019s return type.\n-/// Specifically, it is possible implementations for two different function pointer types:\n-///\n-/// ```\n-/// trait MyTrait {}\n-/// impl MyTrait for fn() -> ! {}\n-/// impl MyTrait for fn() -> std::convert::Infallible {}\n-/// ```\n+/// # Eventual deprecation\n ///\n-/// With `Infallible` being an enum, this code is valid.\n-/// However when `Infallible` becomes an alias for the never type,\n-/// the two `impl`s will start to overlap\n-/// and therefore will be disallowed by the language\u2019s trait coherence rules.\n+/// Previously, `Infallible` was defined as `enum Infallible {}`.\n+/// Now that it is merely a type alias to `!`, we will eventually deprecate `Infallible`.\n ///\n /// [`Ok`]: ../result/enum.Result.html#variant.Ok\n /// [`Result`]: ../result/enum.Result.html\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n /// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-#[derive(Copy)]\n-pub enum Infallible {}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl Clone for Infallible {\n-    fn clone(&self) -> Infallible {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl fmt::Debug for Infallible {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl fmt::Display for Infallible {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl PartialEq for Infallible {\n-    fn eq(&self, _: &Infallible) -> bool {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl Eq for Infallible {}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl PartialOrd for Infallible {\n-    fn partial_cmp(&self, _other: &Self) -> Option<crate::cmp::Ordering> {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl Ord for Infallible {\n-    fn cmp(&self, _other: &Self) -> crate::cmp::Ordering {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl From<!> for Infallible {\n-    fn from(x: !) -> Self {\n-        x\n-    }\n-}\n+pub type Infallible = !;"}, {"sha": "07dca9ad214ecca2265600105f2e43389247312f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1935,14 +1935,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self"}, {"sha": "ec19392450a4bddbc8bb230343181fb7519a6765", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -85,7 +85,7 @@\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]"}, {"sha": "86ee673cea941589af8af9b764ee3e02688f6e94", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -774,7 +774,7 @@ mod copy_impls {\n         bool char\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Copy for ! {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4313248f2636a2dab1957c795a8b7851719932c5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -4,7 +4,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::convert::{TryFrom, Infallible};\n+use crate::convert::TryFrom;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n@@ -4722,18 +4722,8 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl From<Infallible> for TryFromIntError {\n-    fn from(x: Infallible) -> TryFromIntError {\n-        match x {}\n-    }\n-}\n-\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n-        // Match rather than coerce to make sure that code like\n-        // `From<Infallible> for TryFromIntError` above will keep working\n-        // when `Infallible` becomes an alias to `!`.\n         match never {}\n     }\n }"}, {"sha": "91c19e269a7f145727c77c6454a77349bbfb6e58", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1086,10 +1086,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::InlineAsm(_, ref outputs, ref inputs) => {\n-            for expr in outputs.iter().chain(inputs.iter()) {\n-                visitor.visit_expr(expr)\n-            }\n+        ExprKind::InlineAsm(ref asm) => {\n+            walk_list!(visitor, visit_expr, &asm.outputs_exprs);\n+            walk_list!(visitor, visit_expr, &asm.inputs_exprs);\n         }\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);"}, {"sha": "ac8173f101a6559ee3d8fa8773934cbed3d239c8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2170,6 +2170,16 @@ impl<'a> LoweringContext<'a> {\n         impl_trait_return_allow: bool,\n         make_ret_async: Option<NodeId>,\n     ) -> P<hir::FnDecl> {\n+        debug!(\"lower_fn_decl(\\\n+            fn_decl: {:?}, \\\n+            in_band_ty_params: {:?}, \\\n+            impl_trait_return_allow: {}, \\\n+            make_ret_async: {:?})\",\n+            decl,\n+            in_band_ty_params,\n+            impl_trait_return_allow,\n+            make_ret_async,\n+        );\n         let lt_mode = if make_ret_async.is_some() {\n             // In `async fn`, argument-position elided lifetimes\n             // must be transformed into fresh generic parameters so that\n@@ -2462,7 +2472,7 @@ impl<'a> LoweringContext<'a> {\n \n         hir::FunctionRetTy::Return(P(hir::Ty {\n             kind: opaque_ty_ref,\n-            span,\n+            span: opaque_ty_span,\n             hir_id: self.next_id(),\n         }))\n     }\n@@ -2572,7 +2582,7 @@ impl<'a> LoweringContext<'a> {\n         hir::Lifetime {\n             hir_id: self.lower_node_id(id),\n             span,\n-            name: name,\n+            name,\n         }\n     }\n "}, {"sha": "929dce7aa0ff14c6e96a1f4d6b6f789041996510", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -966,7 +966,7 @@ impl LoweringContext<'_> {\n     }\n \n     fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind {\n-        let hir_asm = hir::InlineAsm {\n+        let inner = hir::InlineAsmInner {\n             inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n             outputs: asm.outputs\n                 .iter()\n@@ -984,18 +984,18 @@ impl LoweringContext<'_> {\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,\n         };\n-\n-        let outputs = asm.outputs\n-            .iter()\n-            .map(|out| self.lower_expr(&out.expr))\n-            .collect();\n-\n-        let inputs = asm.inputs\n-            .iter()\n-            .map(|&(_, ref input)| self.lower_expr(input))\n-            .collect();\n-\n-        hir::ExprKind::InlineAsm(P(hir_asm), outputs, inputs)\n+        let hir_asm = hir::InlineAsm {\n+            inner,\n+            inputs_exprs: asm.inputs\n+                .iter()\n+                .map(|&(_, ref input)| self.lower_expr(input))\n+                .collect(),\n+            outputs_exprs: asm.outputs\n+                .iter()\n+                .map(|out| self.lower_expr(&out.expr))\n+                .collect(),\n+        };\n+        hir::ExprKind::InlineAsm(P(hir_asm))\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field {"}, {"sha": "17b13dae37fdbdf04be4fc26608ee782d9590ef7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1457,7 +1457,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(Expr, 72);\n+static_assert_size!(Expr, 64);\n \n impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1656,7 +1656,7 @@ pub enum ExprKind {\n     Ret(Option<P<Expr>>),\n \n     /// Inline assembly (from `asm!`), with its outputs and inputs.\n-    InlineAsm(P<InlineAsm>, HirVec<Expr>, HirVec<Expr>),\n+    InlineAsm(P<InlineAsm>),\n \n     /// A struct or struct-like variant literal expression.\n     ///\n@@ -2063,7 +2063,7 @@ pub struct InlineAsmOutput {\n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n // it needs to be `Clone` and use plain `Vec<T>` instead of `HirVec<T>`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct InlineAsm {\n+pub struct InlineAsmInner {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n     pub outputs: Vec<InlineAsmOutput>,\n@@ -2074,6 +2074,13 @@ pub struct InlineAsm {\n     pub dialect: AsmDialect,\n }\n \n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub struct InlineAsm {\n+    pub inner: InlineAsmInner,\n+    pub outputs_exprs: HirVec<Expr>,\n+    pub inputs_exprs: HirVec<Expr>,\n+}\n+\n /// Represents a parameter in a function header.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Param {"}, {"sha": "4cbe0e8099126a74d2bbbba25bf94248df61d05b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1365,14 +1365,15 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(&expr, parser::PREC_JUMP);\n                 }\n             }\n-            hir::ExprKind::InlineAsm(ref a, ref outputs, ref inputs) => {\n+            hir::ExprKind::InlineAsm(ref a) => {\n+                let i = &a.inner;\n                 self.s.word(\"asm!\");\n                 self.popen();\n-                self.print_string(&a.asm.as_str(), a.asm_str_style);\n+                self.print_string(&i.asm.as_str(), i.asm_str_style);\n                 self.word_space(\":\");\n \n                 let mut out_idx = 0;\n-                self.commasep(Inconsistent, &a.outputs, |s, out| {\n+                self.commasep(Inconsistent, &i.outputs, |s, out| {\n                     let constraint = out.constraint.as_str();\n                     let mut ch = constraint.chars();\n                     match ch.next() {\n@@ -1383,36 +1384,36 @@ impl<'a> State<'a> {\n                         _ => s.print_string(&constraint, ast::StrStyle::Cooked),\n                     }\n                     s.popen();\n-                    s.print_expr(&outputs[out_idx]);\n+                    s.print_expr(&a.outputs_exprs[out_idx]);\n                     s.pclose();\n                     out_idx += 1;\n                 });\n                 self.s.space();\n                 self.word_space(\":\");\n \n                 let mut in_idx = 0;\n-                self.commasep(Inconsistent, &a.inputs, |s, co| {\n+                self.commasep(Inconsistent, &i.inputs, |s, co| {\n                     s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n                     s.popen();\n-                    s.print_expr(&inputs[in_idx]);\n+                    s.print_expr(&a.inputs_exprs[in_idx]);\n                     s.pclose();\n                     in_idx += 1;\n                 });\n                 self.s.space();\n                 self.word_space(\":\");\n \n-                self.commasep(Inconsistent, &a.clobbers, |s, co| {\n+                self.commasep(Inconsistent, &i.clobbers, |s, co| {\n                     s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n                 });\n \n                 let mut options = vec![];\n-                if a.volatile {\n+                if i.volatile {\n                     options.push(\"volatile\");\n                 }\n-                if a.alignstack {\n+                if i.alignstack {\n                     options.push(\"alignstack\");\n                 }\n-                if a.dialect == ast::AsmDialect::Intel {\n+                if i.dialect == ast::AsmDialect::Intel {\n                     options.push(\"intel\");\n                 }\n "}, {"sha": "a431b541fa42fbd4d4353b72d29876397354cebe", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ///\n     /// It will later be extended to trait objects.\n     pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n-        let (span, sub, sup) = self.get_regions();\n+        let (span, sub, sup) = self.regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n         let anon_reg_sup = self.tcx().is_suitable_region(sup)?;"}, {"sha": "09cfbf850a57dfb76d219b38991c6d2765270311", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -77,7 +77,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n     }\n \n-    pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n+    pub fn regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => (origin.span(), sub, sup),\n             (Some(SubSupConflict(_, _, origin, sub, _, sup)), None) => (origin.span(), sub, sup),"}, {"sha": "0abdeb719934452c319006fa5d33cce59d48f4da", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -11,7 +11,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'a>> {\n-        let (span, sub, sup) = self.get_regions();\n+        let (span, sub, sup) = self.regions();\n \n         debug!(\n             \"try_report_named_anon_conflict(sub={:?}, sup={:?}, error={:?})\","}, {"sha": "01ba748c4e1f9a3d6dd3ce43f01afd19ce69e897", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -20,8 +20,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ) = error.clone()\n             {\n                 let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n+                let return_ty = self.tcx().return_type_impl_trait(anon_reg_sup.def_id);\n                 if sub_r == &RegionKind::ReStatic &&\n-                    self.tcx().return_type_impl_trait(anon_reg_sup.def_id).is_some()\n+                    return_ty.is_some()\n                 {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n@@ -52,17 +53,23 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         }) => name.to_string(),\n                         _ => \"'_\".to_owned(),\n                     };\n-                    if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(return_sp) {\n-                        err.span_suggestion(\n-                            return_sp,\n-                            &format!(\n-                                \"you can add a constraint to the return type to make it last \\\n+                    let fn_return_span = return_ty.unwrap().1;\n+                    if let Ok(snippet) =\n+                        self.tcx().sess.source_map().span_to_snippet(fn_return_span) {\n+                        // only apply this suggestion onto functions with\n+                        // explicit non-desugar'able return.\n+                        if fn_return_span.desugaring_kind().is_none() {\n+                            err.span_suggestion(\n+                                fn_return_span,\n+                                &format!(\n+                                    \"you can add a constraint to the return type to make it last \\\n                                  less than `'static` and match {}\",\n-                                lifetime,\n-                            ),\n-                            format!(\"{} + {}\", snippet, lifetime_name),\n-                            Applicability::Unspecified,\n-                        );\n+                                 lifetime,\n+                                ),\n+                                format!(\"{} + {}\", snippet, lifetime_name),\n+                                Applicability::Unspecified,\n+                            );\n+                        }\n                     }\n                     err.emit();\n                     return Some(ErrorReported);"}, {"sha": "1fc157eca3e896b525781474d9bf3b944c60c5c9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -36,7 +36,7 @@\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(exhaustive_patterns)]\n #![feature(overlapping_marker_traits)]\n #![feature(extern_types)]"}, {"sha": "4571f551aa4d6aa80908c7e2a400492f7e0d3238", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -283,15 +283,15 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.borrow_expr(&base, bk);\n             }\n \n-            hir::ExprKind::InlineAsm(ref ia, ref outputs, ref inputs) => {\n-                for (o, output) in ia.outputs.iter().zip(outputs) {\n+            hir::ExprKind::InlineAsm(ref ia) => {\n+                for (o, output) in ia.inner.outputs.iter().zip(&ia.outputs_exprs) {\n                     if o.is_indirect {\n                         self.consume_expr(output);\n                     } else {\n                         self.mutate_expr(output);\n                     }\n                 }\n-                self.consume_exprs(inputs);\n+                self.consume_exprs(&ia.inputs_exprs);\n             }\n \n             hir::ExprKind::Continue(..) |"}, {"sha": "b7d0f538db5dc243b5a06a4fb61f7066efc1149a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -6,7 +6,7 @@\n \n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n-use crate::hir::{self, InlineAsm as HirInlineAsm};\n+use crate::hir;\n use crate::mir::interpret::{PanicInfo, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n@@ -1638,7 +1638,7 @@ pub enum FakeReadCause {\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct InlineAsm<'tcx> {\n-    pub asm: HirInlineAsm,\n+    pub asm: hir::InlineAsmInner,\n     pub outputs: Box<[Place<'tcx>]>,\n     pub inputs: Box<[(Span, Operand<'tcx>)]>,\n }"}, {"sha": "954565811694fcb29350f65c62d0e795de26848a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1529,14 +1529,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         return Some(FreeRegionInfo {\n             def_id: suitable_region_binding_scope,\n             boundregion: bound_region,\n-            is_impl_item: is_impl_item,\n+            is_impl_item,\n         });\n     }\n \n     pub fn return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n-    ) -> Option<Ty<'tcx>> {\n+    ) -> Option<(Ty<'tcx>, Span)> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n         let hir_id = self.hir().as_local_hir_id(scope_def_id).unwrap();\n         match self.hir().get(hir_id) {\n@@ -1557,7 +1557,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let sig = ret_ty.fn_sig(*self);\n                 let output = self.erase_late_bound_regions(&sig.output());\n                 if output.is_impl_trait() {\n-                    Some(output)\n+                    let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n+                    Some((output, fn_decl.output.span()))\n                 } else {\n                     None\n                 }\n@@ -2440,10 +2441,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n-        if self.features().never_type {\n+        if self.features().never_type_fallback {\n             self.types.never\n         } else {\n-            self.intern_tup(&[])\n+            self.types.unit\n         }\n     }\n "}, {"sha": "b9fc5f59b7bbc554f4813ad5ff39660d037e723c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             // SIMD vector types.\n             ty::Adt(def, ..) if def.repr.simd() => {\n                 let element = self.layout_of(ty.simd_type(tcx))?;\n-                let count = ty.simd_size(tcx) as u64;\n+                let count = ty.simd_size(tcx);\n                 assert!(count > 0);\n                 let scalar = match element.abi {\n                     Abi::Scalar(ref scalar) => scalar.clone(),"}, {"sha": "8fbd2e4e6b157d1e1e6d735561ecce0ea632c009", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -301,7 +301,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::syntax_pos::symbol::Symbol,\n     crate::hir::def::Res,\n     crate::hir::def_id::DefId,\n-    crate::hir::InlineAsm,\n+    crate::hir::InlineAsmInner,\n     crate::hir::MatchSource,\n     crate::hir::Mutability,\n     crate::hir::Unsafety,"}, {"sha": "ab6a3bc83b1d2ce8c427762607d8e9057224d0fe", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1813,20 +1813,30 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn simd_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind {\n-            Adt(def, substs) => {\n-                def.non_enum_variant().fields[0].ty(tcx, substs)\n-            }\n+            Adt(def, substs) => def.non_enum_variant().fields[0].ty(tcx, substs),\n             _ => bug!(\"simd_type called on invalid type\")\n         }\n     }\n \n-    pub fn simd_size(&self, _cx: TyCtxt<'_>) -> usize {\n+    pub fn simd_size(&self, _tcx: TyCtxt<'tcx>) -> u64 {\n+        // Parameter currently unused, but probably needed in the future to\n+        // allow `#[repr(simd)] struct Simd<T, const N: usize>([T; N]);`.\n         match self.kind {\n-            Adt(def, _) => def.non_enum_variant().fields.len(),\n+            Adt(def, _) => def.non_enum_variant().fields.len() as u64,\n             _ => bug!(\"simd_size called on invalid type\")\n         }\n     }\n \n+    pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {\n+        match self.kind {\n+            Adt(def, substs) => {\n+                let variant = def.non_enum_variant();\n+                (variant.fields.len() as u64, variant.fields[0].ty(tcx, substs))\n+            }\n+            _ => bug!(\"simd_size_and_type called on invalid type\")\n+        }\n+    }\n+\n     #[inline]\n     pub fn is_region_ptr(&self) -> bool {\n         match self.kind {"}, {"sha": "abdd2e3e8dbd7c9926be9f88e3d64e89a3b28465", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -17,7 +17,7 @@ use libc::{c_uint, c_char};\n impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn codegen_inline_asm(\n         &mut self,\n-        ia: &hir::InlineAsm,\n+        ia: &hir::InlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n         mut inputs: Vec<&'ll Value>,\n         span: Span,"}, {"sha": "4277ce1d1f7546bd1f349abb3c705c400b865b8a", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1105,8 +1105,8 @@ fn generic_simd_intrinsic(\n         let m_len = match in_ty.kind {\n             // Note that this `.unwrap()` crashes for isize/usize, that's sort\n             // of intentional as there's not currently a use case for that.\n-            ty::Int(i) => i.bit_width().unwrap(),\n-            ty::Uint(i) => i.bit_width().unwrap(),\n+            ty::Int(i) => i.bit_width().unwrap() as u64,\n+            ty::Uint(i) => i.bit_width().unwrap() as u64,\n             _ => return_error!(\"`{}` is not an integral type\", in_ty),\n         };\n         require_simd!(arg_tys[1], \"argument\");\n@@ -1116,7 +1116,7 @@ fn generic_simd_intrinsic(\n                  m_len, v_len\n         );\n         let i1 = bx.type_i1();\n-        let i1xn = bx.type_vector(i1, m_len as u64);\n+        let i1xn = bx.type_vector(i1, m_len);\n         let m_i1s = bx.bitcast(args[0].immediate(), i1xn);\n         return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n     }\n@@ -1160,7 +1160,7 @@ fn generic_simd_intrinsic(\n     }\n \n     if name.starts_with(\"simd_shuffle\") {\n-        let n: usize = name[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_|\n+        let n: u64 = name[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_|\n             span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\"));\n \n         require_simd!(ret_ty, \"return\");\n@@ -1175,7 +1175,7 @@ fn generic_simd_intrinsic(\n                  in_elem, in_ty,\n                  ret_ty, ret_ty.simd_type(tcx));\n \n-        let total_len = in_len as u128 * 2;\n+        let total_len = u128::from(in_len) * 2;\n \n         let vector = args[2].immediate();\n \n@@ -1251,7 +1251,7 @@ fn generic_simd_intrinsic(\n         // trailing bits.\n         let expected_int_bits = in_len.max(8);\n         match ret_ty.kind {\n-           ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => (),\n+           ty::Uint(i) if i.bit_width() == Some(expected_int_bits as usize) => (),\n             _ => return_error!(\n                 \"bitmask `{}`, expected `u{}`\",\n                 ret_ty, expected_int_bits\n@@ -1276,7 +1276,8 @@ fn generic_simd_intrinsic(\n \n         // Shift the MSB to the right by \"in_elem_bitwidth - 1\" into the first bit position.\n         let shift_indices = vec![\n-            bx.cx.const_int(bx.type_ix(in_elem_bitwidth as _), (in_elem_bitwidth - 1) as _); in_len\n+            bx.cx.const_int(bx.type_ix(in_elem_bitwidth as _), (in_elem_bitwidth - 1) as _);\n+            in_len as _\n         ];\n         let i_xn_msb = bx.lshr(i_xn, bx.const_vector(shift_indices.as_slice()));\n         // Truncate vector to an <i1 x N>\n@@ -1291,7 +1292,7 @@ fn generic_simd_intrinsic(\n         name: &str,\n         in_elem: &::rustc::ty::TyS<'_>,\n         in_ty: &::rustc::ty::TyS<'_>,\n-        in_len: usize,\n+        in_len: u64,\n         bx: &mut Builder<'a, 'll, 'tcx>,\n         span: Span,\n         args: &[OperandRef<'tcx, &'ll Value>],\n@@ -1400,7 +1401,7 @@ fn generic_simd_intrinsic(\n     // FIXME: use:\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: usize, no_pointers: usize) -> String {\n+    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: u64, no_pointers: usize) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match elem_ty.kind {\n             ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n@@ -1410,7 +1411,7 @@ fn generic_simd_intrinsic(\n         }\n     }\n \n-    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: Ty<'_>, vec_len: usize,\n+    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: Ty<'_>, vec_len: u64,\n                       mut no_pointers: usize) -> &'ll Type {\n         // FIXME: use cx.layout_of(ty).llvm_type() ?\n         let mut elem_ty = match elem_ty.kind {\n@@ -1423,7 +1424,7 @@ fn generic_simd_intrinsic(\n             elem_ty = cx.type_ptr_to(elem_ty);\n             no_pointers -= 1;\n         }\n-        cx.type_vector(elem_ty, vec_len as u64)\n+        cx.type_vector(elem_ty, vec_len)\n     }\n \n \n@@ -1506,7 +1507,7 @@ fn generic_simd_intrinsic(\n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {\n             let i1 = bx.type_i1();\n-            let i1xn = bx.type_vector(i1, in_len as u64);\n+            let i1xn = bx.type_vector(i1, in_len);\n             (bx.trunc(args[2].immediate(), i1xn), i1xn)\n         };\n \n@@ -1606,7 +1607,7 @@ fn generic_simd_intrinsic(\n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {\n             let i1 = bx.type_i1();\n-            let i1xn = bx.type_vector(i1, in_len as u64);\n+            let i1xn = bx.type_vector(i1, in_len);\n             (bx.trunc(args[2].immediate(), i1xn), i1xn)\n         };\n "}, {"sha": "612bce2d95854acdb3835c31dec1427f4b688cf2", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,13 +1,13 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n-use rustc::hir::{GlobalAsm, InlineAsm};\n+use rustc::hir::{GlobalAsm, InlineAsmInner};\n use syntax_pos::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM\n     fn codegen_inline_asm(\n         &mut self,\n-        ia: &InlineAsm,\n+        ia: &InlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n         inputs: Vec<Self::Value>,\n         span: Span,"}, {"sha": "f2739a3b30c92926c67bdb3848cf061ff9f45e8d", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n "}, {"sha": "b96a5e694dfc09fb49c5d5e584eb7804e9505884", "filename": "src/librustc_error_codes/error_codes/E0725.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -4,8 +4,8 @@ command line flags.\n Erroneous code example:\n \n ```ignore (can't specify compiler flags from doctests)\n-#![feature(never_type)] // error: the feature `never_type` is not in\n-                        // the list of allowed features\n+#![feature(specialization)] // error: the feature `specialization` is not in\n+                            // the list of allowed features\n ```\n \n Delete the offending feature attribute, or add it to the list of allowed"}, {"sha": "e6795dbfd449ca5fda2df1bc86b943b5e2ca1332", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -715,10 +715,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         if let (Some(f), Some(ty::RegionKind::ReStatic)) =\n             (self.to_error_region(fr), self.to_error_region(outlived_fr))\n         {\n-            if let Some(ty::TyS {\n+            if let Some((ty::TyS {\n                 kind: ty::Opaque(did, substs),\n                 ..\n-            }) = infcx\n+            }, _)) = infcx\n                 .tcx\n                 .is_suitable_region(f)\n                 .map(|r| r.def_id)"}, {"sha": "f25e4b0ae8639f4b8d164dc3e1851721740df95d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -533,11 +533,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             convert_path_expr(cx, expr, res)\n         }\n \n-        hir::ExprKind::InlineAsm(ref asm, ref outputs, ref inputs) => {\n+        hir::ExprKind::InlineAsm(ref asm) => {\n             ExprKind::InlineAsm {\n-                asm,\n-                outputs: outputs.to_ref(),\n-                inputs: inputs.to_ref(),\n+                asm: &asm.inner,\n+                outputs: asm.outputs_exprs.to_ref(),\n+                inputs: asm.inputs_exprs.to_ref(),\n             }\n         }\n "}, {"sha": "78e3a17d76632163f74286203030cc1a62f7f603", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -93,6 +93,10 @@ pub enum StmtKind<'tcx> {\n     },\n }\n \n+// `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+rustc_data_structures::static_assert_size!(Expr<'_>, 168);\n+\n /// The Hair trait implementor lowers their expressions (`&'tcx H::Expr`)\n /// into instances of this `Expr` enum. This lowering can be done\n /// basically as lazily or as eagerly as desired: every recursive\n@@ -264,7 +268,7 @@ pub enum ExprKind<'tcx> {\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n     InlineAsm {\n-        asm: &'tcx hir::InlineAsm,\n+        asm: &'tcx hir::InlineAsmInner,\n         outputs: Vec<ExprRef<'tcx>>,\n         inputs: Vec<ExprRef<'tcx>>\n     },"}, {"sha": "23f7b1acb54d470f73c08386288aeca37538f675", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -302,10 +302,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n             \"simd_insert\" => {\n-                let index = self.read_scalar(args[1])?.to_u32()? as u64;\n-                let scalar = args[2];\n+                let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n+                let elem = args[2];\n                 let input = args[0];\n-                let (len, e_ty) = self.read_vector_ty(input);\n+                let (len, e_ty) = input.layout.ty.simd_size_and_type(self.tcx.tcx);\n                 assert!(\n                     index < len,\n                     \"Index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n@@ -317,24 +317,24 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     dest.layout.ty, input.layout.ty\n                 );\n                 assert_eq!(\n-                    scalar.layout.ty, e_ty,\n-                    \"Scalar type `{}` must match vector element type `{}`\",\n-                    scalar.layout.ty, e_ty\n+                    elem.layout.ty, e_ty,\n+                    \"Scalar element type `{}` must match vector element type `{}`\",\n+                    elem.layout.ty, e_ty\n                 );\n \n                 for i in 0..len {\n                     let place = self.place_field(dest, i)?;\n                     let value = if i == index {\n-                        scalar\n+                        elem\n                     } else {\n                         self.operand_field(input, i)?\n                     };\n                     self.copy_op(value, place)?;\n                 }\n             }\n             \"simd_extract\" => {\n-                let index = self.read_scalar(args[1])?.to_u32()? as _;\n-                let (len, e_ty) = self.read_vector_ty(args[0]);\n+                let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n+                let (len, e_ty) = args[0].layout.ty.simd_size_and_type(self.tcx.tcx);\n                 assert!(\n                     index < len,\n                     \"index `{}` is out-of-bounds of vector type `{}` with length `{}`\","}, {"sha": "62797b313045e54eeba26ebf0cec11cdaca0d2de", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -316,17 +316,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Read vector length and element type\n-    pub fn read_vector_ty(\n-        &self, op: OpTy<'tcx, M::PointerTag>\n-    ) -> (u64, &rustc::ty::TyS<'tcx>) {\n-        if let layout::Abi::Vector { .. } = op.layout.abi {\n-            (op.layout.ty.simd_size(*self.tcx) as _, op.layout.ty.simd_type(*self.tcx))\n-        } else {\n-            bug!(\"Type `{}` is not a SIMD vector type\", op.layout.ty)\n-        }\n-    }\n-\n     /// Read a scalar from a place\n     pub fn read_scalar(\n         &self,"}, {"sha": "50c4a249c63c2741ef8bed3550213a67284b749e", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -264,6 +264,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n+                assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n+\n                 let old_stack = self.cur_frame();\n                 let old_bb = self.frame().block;\n                 M::call_intrinsic(self, span, instance, args, dest, ret, unwind)?;"}, {"sha": "cbb6408126a4559db23d577fb5ba8bcffda8119d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -16,7 +16,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(specialization)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]"}, {"sha": "8d7a038812269cff378347ae66cc51aa2c49b572", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1184,17 +1184,21 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&e, succ)\n             }\n \n-            hir::ExprKind::InlineAsm(ref ia, ref outputs, ref inputs) => {\n+            hir::ExprKind::InlineAsm(ref asm) => {\n+                let ia = &asm.inner;\n+                let outputs = &asm.outputs_exprs;\n+                let inputs = &asm.inputs_exprs;\n                 let succ = ia.outputs.iter().zip(outputs).rev().fold(succ, |succ, (o, output)| {\n-                // see comment on places\n-                // in propagate_through_place_components()\n-                if o.is_indirect {\n-                    self.propagate_through_expr(output, succ)\n-                } else {\n-                    let acc = if o.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n-                    let succ = self.write_place(output, succ, acc);\n-                    self.propagate_through_place_components(output, succ)\n-                }});\n+                    // see comment on places\n+                    // in propagate_through_place_components()\n+                    if o.is_indirect {\n+                        self.propagate_through_expr(output, succ)\n+                    } else {\n+                        let acc = if o.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n+                        let succ = self.write_place(output, succ, acc);\n+                        self.propagate_through_place_components(output, succ)\n+                    }\n+                });\n \n                 // Inputs are executed first. Propagate last because of rev order\n                 self.propagate_through_exprs(inputs, succ)\n@@ -1395,13 +1399,13 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr) {\n             }\n         }\n \n-        hir::ExprKind::InlineAsm(ref ia, ref outputs, ref inputs) => {\n-            for input in inputs {\n+        hir::ExprKind::InlineAsm(ref asm) => {\n+            for input in &asm.inputs_exprs {\n                 this.visit_expr(input);\n             }\n \n             // Output operands must be places\n-            for (o, output) in ia.outputs.iter().zip(outputs) {\n+            for (o, output) in asm.inner.outputs.iter().zip(&asm.outputs_exprs) {\n                 if !o.is_indirect {\n                     this.check_place(output);\n                 }"}, {"sha": "163412f6a16f5377a426b03237ad3eb26ca7e370", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -244,8 +244,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Path(ref qpath) => {\n                 self.check_expr_path(qpath, expr)\n             }\n-            ExprKind::InlineAsm(_, ref outputs, ref inputs) => {\n-                for expr in outputs.iter().chain(inputs.iter()) {\n+            ExprKind::InlineAsm(ref asm) => {\n+                for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n                     self.check_expr(expr);\n                 }\n                 tcx.mk_unit()"}, {"sha": "512a49d13e7cf6601e246dbc0595eda06ff09f16", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -3129,9 +3129,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with ! or () (depending on whether\n-    // feature(never_type) is enabled, unconstrained ints with i32,\n-    // unconstrained floats with f64.\n+    //\n+    // - Unconstrained ints are replaced with `i32`.\n+    //\n+    // - Unconstrained floats are replaced with with `f64`.\n+    //\n+    // - Non-numerics get replaced with `!` when `#![feature(never_type_fallback)]`\n+    //   is enabled. Otherwise, they are replaced with `()`.\n+    //\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to Error.\n     // The return value indicates whether fallback has occurred."}, {"sha": "0f147f92b5f7eefa68d234336f2b0d5181cb7a48", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -66,7 +66,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(slice_patterns)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "ba481655becb7535ba46ef59fae66d589b1c1a0b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -697,12 +697,10 @@ themePicker.onblur = handleThemeButtonsBlur;\n           static_files::source_serif_pro::ITALIC)?;\n     write(cx.dst.join(\"SourceSerifPro-LICENSE.md\"),\n           static_files::source_serif_pro::LICENSE)?;\n-    write(cx.dst.join(\"SourceCodePro-Regular.ttf.woff\"),\n+    write(cx.dst.join(\"SourceCodePro-Regular.woff\"),\n           static_files::source_code_pro::REGULAR)?;\n-    write(cx.dst.join(\"SourceCodePro-Semibold.ttf.woff\"),\n+    write(cx.dst.join(\"SourceCodePro-Semibold.woff\"),\n           static_files::source_code_pro::SEMIBOLD)?;\n-    write(cx.dst.join(\"SourceCodePro-It.ttf.woff\"),\n-          static_files::source_code_pro::ITALIC)?;\n     write(cx.dst.join(\"SourceCodePro-LICENSE.txt\"),\n           static_files::source_code_pro::LICENSE)?;\n     write(cx.dst.join(\"LICENSE-MIT.txt\"),"}, {"sha": "af77776cca431b6d88da119f16e64f66f0834f37", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -23,8 +23,7 @@ included, and carry their own copyright notices and license terms:\n     Copyright (c) Nicolas Gallagher and Jonathan Neal.\n     Licensed under the MIT license (see LICENSE-MIT.txt).\n \n-* Source Code Pro (SourceCodePro-Regular.ttf.woff,\n-    SourceCodePro-Semibold.ttf.woff, SourceCodePro-It.ttf.woff):\n+* Source Code Pro (SourceCodePro-Regular.woff, SourceCodePro-Semibold.woff):\n \n     Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/),\n     with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark"}, {"sha": "ebaaf91de0667d42e962e28142de3c9070ce0750", "filename": "src/librustdoc/html/static/SourceCodePro-It.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff?ref=f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}, {"sha": "117c7e5142c3811eed73b9321760132160c526c7", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff?ref=f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}, {"sha": "5576670903aea90041f214624c8dd1176fdf6081", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed"}, {"sha": "270873a86a09b98551ed36397921ac4c9ecaec8c", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff?ref=f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}, {"sha": "ca972a11dc428209dd66212e382b884f168e83f7", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed"}, {"sha": "ca798931953b80cd6a4d2db52ca00c77d308bc31", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -39,19 +39,13 @@\n \tfont-weight: 400;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n-\tsrc: url(\"SourceCodePro-Regular.ttf.woff\") format('woff');\n-}\n-@font-face {\n-\tfont-family: 'Source Code Pro';\n-\tfont-style: italic;\n-\tfont-weight: 400;\n-\tsrc: url(\"SourceCodePro-It.ttf.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n-\tsrc: url(\"SourceCodePro-Semibold.ttf.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Semibold.woff\") format('woff');\n }\n \n * {"}, {"sha": "9fc1d76185fb7bf6aa12c41efe419c648f9bfe0c", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -96,15 +96,11 @@ pub mod source_serif_pro {\n \n /// Files related to the Source Code Pro font.\n pub mod source_code_pro {\n-    /// The file `SourceCodePro-Regular.ttf.woff`, the Regular variant of the Source Code Pro font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceCodePro-Regular.ttf.woff\");\n+    /// The file `SourceCodePro-Regular.woff`, the Regular variant of the Source Code Pro font.\n+    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceCodePro-Regular.woff\");\n \n-    /// The file `SourceCodePro-Semibold.ttf.woff`, the Semibold variant of the Source Code Pro\n-    /// font.\n-    pub static SEMIBOLD: &'static [u8] = include_bytes!(\"static/SourceCodePro-Semibold.ttf.woff\");\n-\n-    /// The file `SourceCodePro-It.ttf.woff`, the Italic variant of the Source Code Pro font.\n-    pub static ITALIC: &'static [u8] = include_bytes!(\"static/SourceCodePro-It.ttf.woff\");\n+    /// The file `SourceCodePro-Semibold.woff`, the Semibold variant of the Source Code Pro font.\n+    pub static SEMIBOLD: &'static [u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n     pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");"}, {"sha": "6ed2d4b8477caf0a5635447b70a104a4596c1fcb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -14,7 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "13d83337f5f6f507dd38dceeb480e843396d1d27", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -11,7 +11,7 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(specialization)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "74a9e7c9e331f64cc3bd6ac2de3b9466d8b12485", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -465,7 +465,7 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }\n@@ -551,13 +551,6 @@ impl Error for string::FromUtf16Error {\n     }\n }\n \n-#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n-impl Error for string::ParseError {\n-    fn description(&self) -> &str {\n-        match *self {}\n-    }\n-}\n-\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for char::DecodeUtf16Error {\n     fn description(&self) -> &str {"}, {"sha": "acf53f7f00348ca906662ab7d2ed304b285df2df", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -280,7 +280,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]"}, {"sha": "b4495588c99498a9a09370fc66d68e0efde44113", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -71,7 +71,6 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n-/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -201,7 +200,6 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n-/// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n@@ -239,7 +237,7 @@ mod prim_bool { }\n /// [`Default`]: default/trait.Default.html\n /// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n mod prim_never { }\n \n #[doc(primitive = \"char\")]"}, {"sha": "dab83f48a03aeef54ba3a9ad816160ca8448a171", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -253,6 +253,8 @@ declare_features! (\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n     /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' any more.\n+    (accepted, never_type, \"1.41.0\", Some(35121), None),\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),"}, {"sha": "bd029514a95245aef7d522e44cab8fba329cb7a0", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -318,9 +318,6 @@ declare_features! (\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n-    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n-    (active, never_type, \"1.13.0\", Some(35121), None),\n-\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n@@ -523,6 +520,9 @@ declare_features! (\n     /// Allows using the `efiapi` ABI.\n     (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n \n+    /// Allows diverging expressions to fall back to `!` rather than `()`.\n+    (active, never_type_fallback, \"1.41.0\", Some(65992), None),\n+\n     /// Allows using the `#[register_attr]` attribute.\n     (active, register_attr, \"1.41.0\", Some(66080), None),\n "}, {"sha": "f966850254f9ad5a844bf00943cd5491bbf591ba", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -521,25 +521,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_extern(bare_fn_ty.ext);\n             }\n-            ast::TyKind::Never => {\n-                gate_feature_post!(&self, never_type, ty.span,\n-                                   \"The `!` type is experimental\");\n-            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n-        if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n-            if let ast::TyKind::Never = output_ty.kind {\n-                // Do nothing.\n-            } else {\n-                self.visit_ty(output_ty)\n-            }\n-        }\n-    }\n-\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n@@ -567,10 +553,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e)\n     }\n \n-    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n-        visit::walk_arm(self, arm)\n-    }\n-\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n             PatKind::Slice(pats) => {"}, {"sha": "979074f17c7e0561be76bd76560663a27d917dfe", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -444,6 +444,7 @@ symbols! {\n         negate_unsigned,\n         never,\n         never_type,\n+        never_type_fallback,\n         new,\n         next,\n         __next,"}, {"sha": "7e00dc5463f6852cbfce901200c5f57cead33b95", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -12,8 +12,6 @@\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Placeholder\",{{.*}}extraData: i64 4294967295{{[,)].*}}\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i64 0{{[,)].*}}\n \n-#![feature(never_type)]\n-\n #[derive(Copy, Clone)]\n pub struct Entity {\n     private: std::num::NonZeroU32,"}, {"sha": "409be8587cf0fbed0f9eb4fb5a1868ae86a9910c", "filename": "src/test/mir-opt/uninhabited-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n pub enum Void {}\n \n #[no_mangle]"}, {"sha": "0c64f90cb9fae64d540934f60d741dd9c366b5e7", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -0,0 +1,29 @@\n+error[E0373]: closure may outlive the current function, but it borrows `self`, which is owned by the current function\n+  --> $DIR/issue-62097.rs:13:13\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |             ^^ ---- `self` is borrowed here\n+   |             |\n+   |             may outlive borrowed value `self`\n+   |\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `self` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         foo(move || self.bar()).await;\n+   |             ^^^^^^^\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ----- `self` is a reference that is only valid in the function body\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "ea482d3667e2b575bc5c8fb9ef9b8d76db8c296a", "filename": "src/test/ui/async-await/issues/issue-62097.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+async fn foo<F>(fun: F)\n+where\n+    F: FnOnce() + 'static\n+{\n+    fun()\n+}\n+\n+struct Struct;\n+\n+impl Struct {\n+    pub async fn run_dummy_fn(&self) { //~ ERROR cannot infer\n+        foo(|| self.bar()).await;\n+    }\n+\n+    pub fn bar(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "94afccc06a9e7c1dd1d578d4f05233faefe29a06", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -0,0 +1,16 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/issue-62097.rs:12:31\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ^^^^^ ...but this borrow...\n+LL |         foo(|| self.bar()).await;\n+   |         --- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime `'_` as defined on the method body at 12:31\n+  --> $DIR/issue-62097.rs:12:31\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e45d588c6c6c31c72d7d10ea1f36d1b8fce2742", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -20,10 +20,6 @@ note: ...can't outlive the lifetime `'_` as defined on the method body at 11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 11:14\n-   |\n-LL |         foo + '_\n-   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1864d4bb8205b7cd16da2ca581b1d73416d8de9d", "filename": "src/test/ui/binding/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(never_type)]\n+#![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]"}, {"sha": "52b2e70d159a953c64d9e52bed99958f90ae9f18", "filename": "src/test/ui/borrowck/assign-never-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n pub fn main() {\n     loop {\n         match None {"}, {"sha": "7aa5682b923a67318a00403b6480741400d85b9f", "filename": "src/test/ui/break-while-condition.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn main() {\n     // The `if false` expressions are simply to\n     // make sure we don't avoid checking everything"}, {"sha": "bae3b6765e21b8ce7016a1c399093b0fa36a35e7", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:9:20\n+  --> $DIR/break-while-condition.rs:7:20\n    |\n LL |           let _: ! = {\n    |  ____________________^\n@@ -11,7 +11,7 @@ LL | |         };\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:16:13\n+  --> $DIR/break-while-condition.rs:14:13\n    |\n LL | /             while false {\n LL | |                 break\n@@ -22,7 +22,7 @@ LL | |             }\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:24:13\n+  --> $DIR/break-while-condition.rs:22:13\n    |\n LL | /             while false {\n LL | |                 return"}, {"sha": "55beb7c252895a13f91cded9dc6c8ed18ccb9b7d", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n-\n-#![feature(never_type)]\n+#![feature(never_type_fallback)]\n #![allow(unreachable_code)]\n \n use std::error::Error;"}, {"sha": "ea1384a1dab55de5c766d5cd938f0d83838f2f09", "filename": "src/test/ui/coercion/coerce-to-bang-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n fn cast_a() {"}, {"sha": "0e17f32511f8209b7b28c47b4c1f4b4c4e707ae3", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,13 +1,13 @@\n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:6:13\n+  --> $DIR/coerce-to-bang-cast.rs:4:13\n    |\n LL |     let y = {return; 22} as !;\n    |             ^^^^^^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:11:13\n+  --> $DIR/coerce-to-bang-cast.rs:9:13\n    |\n LL |     let y = 22 as !;\n    |             ^^^^^^^"}, {"sha": "d52f79fbb7a989e2e023a6b2d25c46f99eab1503", "filename": "src/test/ui/coercion/coerce-to-bang.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {"}, {"sha": "b6fd5bf43abf207c6ae0ce4683eaff34fa1477ed", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:6:17\n+  --> $DIR/coerce-to-bang.rs:4:17\n    |\n LL |     foo(return, 22, 44);\n    |                 ^^ expected !, found integer\n@@ -8,7 +8,7 @@ LL |     foo(return, 22, 44);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:18:13\n+  --> $DIR/coerce-to-bang.rs:16:13\n    |\n LL |     foo(22, 44, return);\n    |             ^^ expected !, found integer\n@@ -17,7 +17,7 @@ LL |     foo(22, 44, return);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:26:12\n+  --> $DIR/coerce-to-bang.rs:24:12\n    |\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n    |            ^ expected !, found integer\n@@ -26,7 +26,7 @@ LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverg\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:36:12\n+  --> $DIR/coerce-to-bang.rs:34:12\n    |\n LL |     foo(a, b, c);\n    |            ^ expected !, found integer\n@@ -35,7 +35,7 @@ LL |     foo(a, b, c);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:45:12\n+  --> $DIR/coerce-to-bang.rs:43:12\n    |\n LL |     foo(a, b, c);\n    |            ^ expected !, found integer\n@@ -44,7 +44,7 @@ LL |     foo(a, b, c);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:50:21\n+  --> $DIR/coerce-to-bang.rs:48:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n    |                     ^^^^^^^^^^^^ expected !, found integer\n@@ -53,7 +53,7 @@ LL |     let x: [!; 2] = [return, 22];\n               found type `[{integer}; 2]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:55:22\n+  --> $DIR/coerce-to-bang.rs:53:22\n    |\n LL |     let x: [!; 2] = [22, return];\n    |                      ^^ expected !, found integer\n@@ -62,7 +62,7 @@ LL |     let x: [!; 2] = [22, return];\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:60:37\n+  --> $DIR/coerce-to-bang.rs:58:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, 66);\n    |                                     ^^ expected !, found integer\n@@ -71,7 +71,7 @@ LL |     let x: (usize, !, usize) = (22, 44, 66);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:65:41\n+  --> $DIR/coerce-to-bang.rs:63:41\n    |\n LL |     let x: (usize, !, usize) = (return, 44, 66);\n    |                                         ^^ expected !, found integer\n@@ -80,7 +80,7 @@ LL |     let x: (usize, !, usize) = (return, 44, 66);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:76:37\n+  --> $DIR/coerce-to-bang.rs:74:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, return);\n    |                                     ^^ expected !, found integer"}, {"sha": "1270dc4ee30e6ff78b7848cef0607026a3c987c5", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_raw_ptr_deref, never_type)]\n+#![feature(const_raw_ptr_deref)]\n \n const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n "}, {"sha": "38702f8d28f900a11c12b2cf34928e79a51ac764", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n enum Helper<T, U> {\n     T(T, [!; 0]),\n     #[allow(dead_code)]"}, {"sha": "defcd256f7d982b6aa51a51daa7138e5d7772672", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n-  --> $DIR/empty-never-array.rs:10:9\n+  --> $DIR/empty-never-array.rs:8:9\n    |\n LL | / enum Helper<T, U> {\n LL | |     T(T, [!; 0]),\n@@ -20,7 +20,7 @@ LL |     if let Helper::U(u) = Helper::T(t, []) { /* */ }\n    |\n \n error[E0381]: use of possibly-uninitialized variable: `u`\n-  --> $DIR/empty-never-array.rs:12:5\n+  --> $DIR/empty-never-array.rs:10:5\n    |\n LL |     u\n    |     ^ use of possibly-uninitialized `u`"}, {"sha": "c27089d2a05906151f427574718eeb91b8dbc32f", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn foo() -> Result<u32, !> {\n     Ok(123)\n }"}, {"sha": "e599a9ee150f4ddc628027df2a27a93324b4d430", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/feature-gate-exhaustive-patterns.rs:8:9\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:6:9\n    |\n LL |     let Ok(_x) = foo();\n    |         ^^^^^^ pattern `Err(_)` not covered"}, {"sha": "be8c27dbb1b02d63c8720d45aa356986a3545bab", "filename": "src/test/ui/feature-gates/feature-gate-never_type.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs?ref=f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "patch": "@@ -1,17 +0,0 @@\n-// Test that ! errors when used in illegal positions with feature(never_type) disabled\n-\n-trait Foo {\n-    type Wub;\n-}\n-\n-type Ma = (u32, !, i32); //~ ERROR type is experimental\n-type Meeshka = Vec<!>; //~ ERROR type is experimental\n-type Mow = &'static fn(!) -> !; //~ ERROR type is experimental\n-type Skwoz = &'static mut !; //~ ERROR type is experimental\n-\n-impl Foo for Meeshka {\n-    type Wub = !; //~ ERROR type is experimental\n-}\n-\n-fn main() {\n-}"}, {"sha": "d86ab99b82bd5bd79cc654b35c4ad105b82018f5", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "patch": "@@ -1,48 +0,0 @@\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:7:17\n-   |\n-LL | type Ma = (u32, !, i32);\n-   |                 ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:8:20\n-   |\n-LL | type Meeshka = Vec<!>;\n-   |                    ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:9:24\n-   |\n-LL | type Mow = &'static fn(!) -> !;\n-   |                        ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:10:27\n-   |\n-LL | type Skwoz = &'static mut !;\n-   |                           ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:13:16\n-   |\n-LL |     type Wub = !;\n-   |                ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "29848bb0cedaa867b8efee471f6b8dc80c1572c0", "filename": "src/test/ui/for-loop-while/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(unreachable_code)]\n-#![feature(never_type)]\n \n #[allow(unused)]\n fn never_returns() {"}, {"sha": "8f59bab26d3ef11cff88ea37b10b5bbc88eb85ad", "filename": "src/test/ui/lint/must_use-unit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![deny(unused_must_use)]\n \n #[must_use]"}, {"sha": "a6d0259a081afb1671e2af514ced22845849610a", "filename": "src/test/ui/lint/must_use-unit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,17 +1,17 @@\n error: unused return value of `foo` that must be used\n-  --> $DIR/must_use-unit.rs:13:5\n+  --> $DIR/must_use-unit.rs:12:5\n    |\n LL |     foo();\n    |     ^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/must_use-unit.rs:2:9\n+  --> $DIR/must_use-unit.rs:1:9\n    |\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n error: unused return value of `bar` that must be used\n-  --> $DIR/must_use-unit.rs:15:5\n+  --> $DIR/must_use-unit.rs:14:5\n    |\n LL |     bar();\n    |     ^^^^^^"}, {"sha": "ed2369fd650b0f45f228cf6e03dc995786a8f002", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,7 @@\n // This test checks that calling `mem::{uninitialized,zeroed}` with certain types results\n // in a lint.\n \n-#![feature(never_type, rustc_attrs)]\n+#![feature(rustc_attrs)]\n #![allow(deprecated)]\n #![deny(invalid_value)]\n "}, {"sha": "8d88aefdb51857ee7aab524ac375ac140b5a3f5d", "filename": "src/test/ui/loops/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "8c4bcd3a9b73cf43e38f1461dd500239cf965087", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,13 +1,13 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/loop-break-value.rs:26:5\n+  --> $DIR/loop-break-value.rs:24:5\n    |\n LL |     'while_loop: while true {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:28:9\n+  --> $DIR/loop-break-value.rs:26:9\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -18,7 +18,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:30:13\n+  --> $DIR/loop-break-value.rs:28:13\n    |\n LL |             break 'while_loop 123;\n    |             ^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -29,7 +29,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0571]: `break` with value from a `while let` loop\n-  --> $DIR/loop-break-value.rs:38:12\n+  --> $DIR/loop-break-value.rs:36:12\n    |\n LL |         if break () {\n    |            ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -40,7 +40,7 @@ LL |         if break {\n    |            ^^^^^\n \n error[E0571]: `break` with value from a `while let` loop\n-  --> $DIR/loop-break-value.rs:43:9\n+  --> $DIR/loop-break-value.rs:41:9\n    |\n LL |         break None;\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -51,7 +51,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while let` loop\n-  --> $DIR/loop-break-value.rs:49:13\n+  --> $DIR/loop-break-value.rs:47:13\n    |\n LL |             break 'while_let_loop \"nope\";\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -62,7 +62,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:56:9\n+  --> $DIR/loop-break-value.rs:54:9\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -73,7 +73,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:57:9\n+  --> $DIR/loop-break-value.rs:55:9\n    |\n LL |         break [()];\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -84,7 +84,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:64:13\n+  --> $DIR/loop-break-value.rs:62:13\n    |\n LL |             break 'for_loop Some(17);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -95,7 +95,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:4:31\n+  --> $DIR/loop-break-value.rs:2:31\n    |\n LL |     let val: ! = loop { break break; };\n    |                               ^^^^^ expected !, found ()\n@@ -104,7 +104,7 @@ LL |     let val: ! = loop { break break; };\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:11:19\n+  --> $DIR/loop-break-value.rs:9:19\n    |\n LL |             break 123;\n    |                   ^^^ expected &str, found integer\n@@ -113,7 +113,7 @@ LL |             break 123;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:16:15\n+  --> $DIR/loop-break-value.rs:14:15\n    |\n LL |         break \"asdf\";\n    |               ^^^^^^ expected i32, found reference\n@@ -122,7 +122,7 @@ LL |         break \"asdf\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:21:31\n+  --> $DIR/loop-break-value.rs:19:31\n    |\n LL |             break 'outer_loop \"nope\";\n    |                               ^^^^^^ expected i32, found reference\n@@ -131,7 +131,7 @@ LL |             break 'outer_loop \"nope\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:73:26\n+  --> $DIR/loop-break-value.rs:71:26\n    |\n LL |                 break 'c 123;\n    |                          ^^^ expected (), found integer\n@@ -140,7 +140,7 @@ LL |                 break 'c 123;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:80:15\n+  --> $DIR/loop-break-value.rs:78:15\n    |\n LL |         break (break, break);\n    |               ^^^^^^^^^^^^^^ expected (), found tuple\n@@ -149,7 +149,7 @@ LL |         break (break, break);\n               found type `(!, !)`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:85:15\n+  --> $DIR/loop-break-value.rs:83:15\n    |\n LL |         break 2;\n    |               ^ expected (), found integer\n@@ -158,7 +158,7 @@ LL |         break 2;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:90:9\n+  --> $DIR/loop-break-value.rs:88:9\n    |\n LL |         break;\n    |         ^^^^^"}, {"sha": "df7c45ad1d1c7c817c68dc93ffaa3cd5c7dae0ed", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n-#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "e4d15c8a17dfae0ba01f20432ed9a7028481319b", "filename": "src/test/ui/never_type/adjust_never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x;"}, {"sha": "8a02720ab27fde69485a67dc72900308ff890609", "filename": "src/test/ui/never_type/auto-traits.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(optin_builtin_traits)]\n+\n+fn main() {\n+    enum Void {}\n+\n+    auto trait Auto {}\n+    fn assert_auto<T: Auto>() {}\n+    assert_auto::<Void>();\n+    assert_auto::<!>();\n+\n+    fn assert_send<T: Send>() {}\n+    assert_send::<Void>();\n+    assert_send::<!>();\n+}"}, {"sha": "a2b44e91f11418de6dcdc4c9fc178969cc0c57a8", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,5 @@\n // Test that we can't pass other types for !\n \n-#![feature(never_type)]\n-\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "e5cbdcbe73bdeec5debc8826ce7e836dd1dfe81b", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n+  --> $DIR/call-fn-never-arg-wrong-type.rs:8:9\n    |\n LL |     foo(\"wow\");\n    |         ^^^^^ expected !, found reference"}, {"sha": "55a7b79157a829cc98368dabb12693d79961c57f", "filename": "src/test/ui/never_type/call-fn-never-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n #![allow(unreachable_code)]\n \n fn foo(x: !) -> ! {"}, {"sha": "fbba114ab327487033ffb75593b1642398a635ca", "filename": "src/test/ui/never_type/cast-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x as u32;"}, {"sha": "c58b611748423400b8c14d2b2522efe61af8ef2e", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,6 @@\n-// We need to opt into the `!` feature in order to trigger the\n-// requirement that this is testing.\n-#![feature(never_type)]\n+// We need to opt into the `never_type_fallback` feature\n+// to trigger the requirement that this is testing.\n+#![feature(never_type_fallback)]\n \n #![allow(unused)]\n "}, {"sha": "342d5e4791515a9a339ad31759008921642fd8c4", "filename": "src/test/ui/never_type/dispatch_from_dyn_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsize, dispatch_from_dyn, never_type)]\n+#![feature(unsize, dispatch_from_dyn)]\n \n #![allow(dead_code)]\n "}, {"sha": "df04437b1ae20d05da23d7b2eb0915ec525f1fe0", "filename": "src/test/ui/never_type/diverging-fallback-control-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -11,7 +11,7 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n-#![feature(never_type)]\n+#![feature(never_type_fallback)]\n \n trait BadDefault {\n     fn default() -> Self;"}, {"sha": "3b896ec9d70c2b1200b37bf22bd922d8e618cfb6", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -0,0 +1,12 @@\n+// This is a feature gate test for `never_type_fallback`.\n+// It works by using a scenario where the type fall backs to `()` rather than \u00b4!`\n+// in the case where `#![feature(never_type_fallback)]` would change it to `!`.\n+\n+fn main() {}\n+\n+trait T {}\n+\n+fn should_ret_unit() -> impl T {\n+    //~^ ERROR the trait bound `(): T` is not satisfied\n+    panic!()\n+}"}, {"sha": "837e90d6ceb9b687994a9006a1aa2bc53723c33b", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `(): T` is not satisfied\n+  --> $DIR/feature-gate-never_type_fallback.rs:9:25\n+   |\n+LL | fn should_ret_unit() -> impl T {\n+   |                         ^^^^^^ the trait `T` is not implemented for `()`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cbfda9a2cc00a4b82e4a98591a7f04e7d945d71d", "filename": "src/test/ui/never_type/impl-for-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(never_type)]\n-\n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n trait StringifyType {"}, {"sha": "0e6588bbe78eac9c8c18122f1c031061bcb2faf4", "filename": "src/test/ui/never_type/issue-44402.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![allow(dead_code)]\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old"}, {"sha": "5c1300c715128e180a0ebc746fb98dfce7568681", "filename": "src/test/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "1dc15251d1aa1f28a5560b7570bb4af0658426e4", "filename": "src/test/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,35 +1,35 @@\n warning: unreachable statement\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:9:5\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n    |     ^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:9:5\n    |\n LL |     drop(x);\n    |     ^^^^ - any code following this expression is unreachable\n    |     |\n    |     unreachable call\n \n warning: unused variable: `x`\n-  --> $DIR/never-assign-dead-code.rs:9:9\n+  --> $DIR/never-assign-dead-code.rs:8:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |         ^ help: consider prefixing with an underscore: `_x`\n    |\n note: lint level defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^"}, {"sha": "9ca1ac7462d4d8f319ca3c8d2465b7da25e041eb", "filename": "src/test/ui/never_type/never-assign-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,5 @@\n // Test that we can't use another type in place of !\n \n-#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "32c9fab6590df1162953d2370646c40f5d1f56cf", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/never-assign-wrong-type.rs:7:16\n+  --> $DIR/never-assign-wrong-type.rs:6:16\n    |\n LL |     let x: ! = \"hello\";\n    |                ^^^^^^^ expected !, found reference"}, {"sha": "45e54b9bf7c18398c150c826caf8957705f75e3a", "filename": "src/test/ui/never_type/never-associated-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n trait Foo {\n     type Wow;\n "}, {"sha": "df74b6a53f8884acd56afae8cca1462c2433fd61", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,5 @@\n // check that the `for<T> T: From<!>` impl is reserved\n \n-#![feature(never_type)]\n-\n pub struct MyFoo;\n pub trait MyTrait {}\n "}, {"sha": "8b3155988ea956c86f97e44622e6c4deb60f21ee", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`:\n-  --> $DIR/never-from-impl-is-reserved.rs:10:1\n+  --> $DIR/never-from-impl-is-reserved.rs:8:1\n    |\n LL | impl MyTrait for MyFoo {}\n    | ---------------------- first implementation here"}, {"sha": "800553fce874da69c4596d21371638258f469516", "filename": "src/test/ui/never_type/never-result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -5,8 +5,6 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "3cbb114f43b946b44e39b475b32b17778edc8914", "filename": "src/test/ui/never_type/never-type-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n struct Wub;\n \n impl PartialEq<!> for Wub {"}, {"sha": "9bfc5572b9ee61ac8816029add99ad12dd8a16e0", "filename": "src/test/ui/never_type/never-type-rvalues.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(never_type)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n #![allow(unreachable_patterns)]"}, {"sha": "cdf04de19e5236d7c49bf0f657822ea574cd4fe8", "filename": "src/test/ui/never_type/never_transmute_never.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n \n #![crate_type=\"lib\"]\n \n-#![feature(never_type)]\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n #![allow(unused_variables)]"}, {"sha": "e5e0e188de63cc65b5776034ac7cc07bd09c4ed0", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -3,7 +3,6 @@\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n \n-#![feature(never_type)]\n #![allow(deprecated, invalid_value)]\n \n use std::{mem, panic};"}, {"sha": "977ea3656b3dda76d2eb772925f9baddc65ebcd3", "filename": "src/test/ui/never_type/try_from.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -5,8 +5,6 @@\n // This test was added to show the motivation for doing this\n // over `TryFrom` being blanket impl for all `T: From`\n \n-#![feature(never_type)]\n-\n use std::convert::{TryInto, Infallible};\n \n struct Foo<T> {"}, {"sha": "ea608651387b7738eea062c4ad25e655eb27f2ba", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod private {"}, {"sha": "66d0d9587741b629c311ea7b005f970f85164288", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not covered\n-  --> $DIR/match-privately-empty.rs:13:11\n+  --> $DIR/match-privately-empty.rs:12:11\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered"}, {"sha": "3a2ca19d8e0c3ebc6ab59dce81891525dbe5f11b", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -4,7 +4,6 @@\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects.\n \n-#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "640c2a2cf8fccdf7abde97bb3e116141fa247b03", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "11c41fdc3946bf6487753070e82a24abdcc26988", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_add.rs:17:13\n+  --> $DIR/expr_add.rs:16:13\n    |\n LL |     let x = Foo + return;\n    |             ^^^^^^------\n@@ -8,7 +8,7 @@ LL |     let x = Foo + return;\n    |             unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_add.rs:3:9\n+  --> $DIR/expr_add.rs:2:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "3914fb32432ef6c2e743a235295522b299b7fab0", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "90aec15e3be1ebca38c0e61c3f5ee45edc0694c8", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_assign.rs:10:5\n+  --> $DIR/expr_assign.rs:9:5\n    |\n LL |     x = return;\n    |     ^^^^------\n@@ -8,21 +8,21 @@ LL |     x = return;\n    |     unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_assign.rs:5:9\n+  --> $DIR/expr_assign.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:20:14\n+  --> $DIR/expr_assign.rs:19:14\n    |\n LL |         *p = return;\n    |         --   ^^^^^^ unreachable expression\n    |         |\n    |         any code following this expression is unreachable\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:26:15\n+  --> $DIR/expr_assign.rs:25:15\n    |\n LL |     *{return; &mut i} = 22;\n    |       ------  ^^^^^^ unreachable expression"}, {"sha": "ce1a94e3c4a2565b9ab9c549e8ef98db3299a2d8", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "613fc31b8613e970e524ab0355e4bb342ac6642b", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,19 +1,19 @@\n error: unreachable expression\n-  --> $DIR/expr_call.rs:13:17\n+  --> $DIR/expr_call.rs:12:17\n    |\n LL |     foo(return, 22);\n    |         ------  ^^ unreachable expression\n    |         |\n    |         any code following this expression is unreachable\n    |\n note: lint level defined here\n-  --> $DIR/expr_call.rs:5:9\n+  --> $DIR/expr_call.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable call\n-  --> $DIR/expr_call.rs:18:5\n+  --> $DIR/expr_call.rs:17:5\n    |\n LL |     bar(return);\n    |     ^^^ ------ any code following this expression is unreachable"}, {"sha": "76a7306b9d9e01c6fcb2394fc5f346ea2b205fa1", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type, type_ascription)]\n+#![feature(type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "e74a7daec88286ee16181bf4e0cb9a97d3d37087", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "7475cf7a365b5c98ab4113aaede617a31022162a", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,19 +1,19 @@\n error: unreachable expression\n-  --> $DIR/expr_method.rs:16:21\n+  --> $DIR/expr_method.rs:15:21\n    |\n LL |     Foo.foo(return, 22);\n    |             ------  ^^ unreachable expression\n    |             |\n    |             any code following this expression is unreachable\n    |\n note: lint level defined here\n-  --> $DIR/expr_method.rs:5:9\n+  --> $DIR/expr_method.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable call\n-  --> $DIR/expr_method.rs:21:9\n+  --> $DIR/expr_method.rs:20:9\n    |\n LL |     Foo.bar(return);\n    |         ^^^ ------ any code following this expression is unreachable"}, {"sha": "ff647bda0e87e3be335e5750e3b89d4932846a77", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type, type_ascription)]\n+#![feature(type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "6f221c360cb176bec7d037d74c7ac61093bc44c5", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "a576f920923356a492b2510342ba61953f4e4152", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,11 +1,11 @@\n error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:8:16\n+  --> $DIR/expr_unary.rs:7:16\n    |\n LL |     let x: ! = ! { return; };\n    |                ^^^^^^^^^^^^^ cannot apply unary operator `!`\n \n error: unreachable expression\n-  --> $DIR/expr_unary.rs:8:16\n+  --> $DIR/expr_unary.rs:7:16\n    |\n LL |     let x: ! = ! { return; };\n    |                ^^^^------^^^\n@@ -14,7 +14,7 @@ LL |     let x: ! = ! { return; };\n    |                unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_unary.rs:5:9\n+  --> $DIR/expr_unary.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "c8ff56539116fe44ad487e58af42e42cfb91fdd2", "filename": "src/test/ui/reachable/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,4 @@\n-#![feature(never_type)]\n+#![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]\n \n #![allow(unreachable_code)]"}, {"sha": "e2d89e93a2aa051caeea08d7620acde3a768d904", "filename": "src/test/ui/reachable/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(never_type, exhaustive_patterns)]\n+#![feature(exhaustive_patterns)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]\n "}, {"sha": "c38ea6ab9ad019473d3b59c5d4d2d7372a03feb0", "filename": "src/test/ui/reachable/unwarned-match-on-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,8 +1,6 @@\n #![deny(unreachable_code)]\n #![allow(dead_code)]\n \n-#![feature(never_type)]\n-\n fn foo(x: !) -> bool {\n     // Explicit matches on the never type are unwarned.\n     match x {}"}, {"sha": "6710fcb777f7a7e08e93a99e26a7b1958693c57a", "filename": "src/test/ui/reachable/unwarned-match-on-never.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/unwarned-match-on-never.rs:10:5\n+  --> $DIR/unwarned-match-on-never.rs:8:5\n    |\n LL |     match x {}\n    |           - any code following this expression is unreachable\n@@ -14,15 +14,15 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable arm\n-  --> $DIR/unwarned-match-on-never.rs:15:15\n+  --> $DIR/unwarned-match-on-never.rs:13:15\n    |\n LL |     match (return) {\n    |           -------- any code following this expression is unreachable\n LL |         () => ()\n    |               ^^ unreachable arm\n \n error: unreachable expression\n-  --> $DIR/unwarned-match-on-never.rs:21:5\n+  --> $DIR/unwarned-match-on-never.rs:19:5\n    |\n LL |       return;\n    |       ------ any code following this expression is unreachable"}, {"sha": "e074183a0490c6dfc2d39a57fc5ed6e4397a14fb", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/auxiliary/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"rlib\"]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "5684ee6b7bf862d9e0733fad808251dc6350f4ac", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,4 @@\n // aux-build:uninhabited.rs\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "dd4b0cd1e87e2890b428b0909d3213ab5e08cf47", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:23:5\n+  --> $DIR/coercions.rs:22:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n@@ -10,7 +10,7 @@ LL |     x\n               found type `uninhabited::UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:27:5\n+  --> $DIR/coercions.rs:26:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n@@ -21,7 +21,7 @@ LL |     x\n               found type `uninhabited::UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:31:5\n+  --> $DIR/coercions.rs:30:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n@@ -32,7 +32,7 @@ LL |     x\n               found type `uninhabited::UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:35:5\n+  --> $DIR/coercions.rs:34:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "c3c0ce650d73e97897fa23d33a8df0b892d757a9", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "fd49c6823988aca069235074b6d9ff4858c7b35a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:30:5\n+  --> $DIR/coercions_same_crate.rs:28:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n@@ -10,7 +10,7 @@ LL |     x\n               found type `UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:34:5\n+  --> $DIR/coercions_same_crate.rs:32:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n@@ -21,7 +21,7 @@ LL |     x\n               found type `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:38:5\n+  --> $DIR/coercions_same_crate.rs:36:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n@@ -32,7 +32,7 @@ LL |     x\n               found type `UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:42:5\n+  --> $DIR/coercions_same_crate.rs:40:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "511b6b1bf8f6c72e91903806088837afeb35be14", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,4 @@\n // aux-build:uninhabited.rs\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "b903e9b288ef7ba80cbad48299fe5cf3c299d27f", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `uninhabited::IndirectUninhabitedEnum` is not handled\n-  --> $DIR/indirect_match.rs:19:11\n+  --> $DIR/indirect_match.rs:18:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `uninhabited::IndirectUninhabitedStruct` is not handled\n-  --> $DIR/indirect_match.rs:23:11\n+  --> $DIR/indirect_match.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `uninhabited::IndirectUninhabitedTupleStruct` is not handled\n-  --> $DIR/indirect_match.rs:27:11\n+  --> $DIR/indirect_match.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `uninhabited::IndirectUninhabitedVariants` is not handled\n-  --> $DIR/indirect_match.rs:33:11\n+  --> $DIR/indirect_match.rs:32:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "9c3ec4240a5fdaabc1368df879bd4e787d3f5243", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "f94616dc64b1b30129c3a85703d3caeae5c2aec9", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `IndirectUninhabitedEnum` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:34:11\n+  --> $DIR/indirect_match_same_crate.rs:32:11\n    |\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    | ----------------------------------------------------\n@@ -13,7 +13,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `IndirectUninhabitedStruct` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:38:11\n+  --> $DIR/indirect_match_same_crate.rs:36:11\n    |\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    | --------------------------------------------------------\n@@ -27,7 +27,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `IndirectUninhabitedTupleStruct` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:42:11\n+  --> $DIR/indirect_match_same_crate.rs:40:11\n    |\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    | ------------------------------------------------------------------\n@@ -41,7 +41,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `IndirectUninhabitedVariants` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:48:11\n+  --> $DIR/indirect_match_same_crate.rs:46:11\n    |\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    | ------------------------------------------------------------"}, {"sha": "68ac42ef5878d11bf4192b7c8dd9053231f23b37", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,6 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "2c2e542934177965e1be044cff41ab6b8f4bdc42", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:23:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:27:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:31:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:30:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:37:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:36:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "06c318414f03f83fa69ba7ba42aa770d37f17367", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "fd3dbca04c00f073ec2ed89c0ccf430bd8a329d3", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,4 @@\n // aux-build:uninhabited.rs\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "de3fa900cd6220c890b39de38937fee8ae361d7b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match.rs:19:11\n+  --> $DIR/match.rs:18:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `uninhabited::UninhabitedStruct` is not handled\n-  --> $DIR/match.rs:23:11\n+  --> $DIR/match.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `uninhabited::UninhabitedTupleStruct` is not handled\n-  --> $DIR/match.rs:27:11\n+  --> $DIR/match.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `uninhabited::UninhabitedVariants` are not handled\n-  --> $DIR/match.rs:31:11\n+  --> $DIR/match.rs:30:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "c31688add91b2fa4e31224ffa80f4d5f18a6bfcf", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "3dd1a914d5542a20506ef3b213ffdbcf19897f82", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `UninhabitedStruct` is not handled\n-  --> $DIR/match_same_crate.rs:30:11\n+  --> $DIR/match_same_crate.rs:28:11\n    |\n LL |   pub struct UninhabitedStruct {\n    |   -          ----------------- variant not covered\n@@ -15,7 +15,7 @@ LL |       match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `UninhabitedTupleStruct` is not handled\n-  --> $DIR/match_same_crate.rs:34:11\n+  --> $DIR/match_same_crate.rs:32:11\n    |\n LL | pub struct UninhabitedTupleStruct(!);\n    | -------------------------------------\n@@ -29,7 +29,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `UninhabitedVariants` are not handled\n-  --> $DIR/match_same_crate.rs:38:11\n+  --> $DIR/match_same_crate.rs:36:11\n    |\n LL | / pub enum UninhabitedVariants {\n LL | |     #[non_exhaustive] Tuple(!),"}, {"sha": "37d739834d20c0760cce2cbd8acdf6e78065e3f1", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,7 +1,6 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "3b56c6890710d223612ba51ec93265851e2662ff", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:22:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:21:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:26:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:25:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:30:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:29:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedVariants` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:34:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:33:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "2b2e4b6e77d8700da17366b84f2de9101ff4f041", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "3d4cca4505ef1e930b83018da5fe2f927806add8", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,5 @@\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "fea883f8912005e8d7c50320112cb04cb69d253b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:52:9\n+  --> $DIR/patterns_same_crate.rs:51:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n@@ -11,25 +11,25 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:57:9\n+  --> $DIR/patterns_same_crate.rs:56:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:61:15\n+  --> $DIR/patterns_same_crate.rs:60:15\n    |\n LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:65:15\n+  --> $DIR/patterns_same_crate.rs:64:15\n    |\n LL |     while let Some(_x) = uninhabited_struct() {\n    |               ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:68:15\n+  --> $DIR/patterns_same_crate.rs:67:15\n    |\n LL |     while let Some(_x) = uninhabited_tuple_struct() {\n    |               ^^^^^^^^"}, {"sha": "91075ffbdb6059eecbdfcf83b21c9c4f65b7d510", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -11,10 +11,6 @@ note: ...can't outlive the lifetime `'_` as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 8:26\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0e0197803b76185773f578787de93a5bcb8e5609", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-non-lattice-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -30,7 +30,7 @@\n //\n // [ii]: http://smallcultfollowing.com/babysteps/blog/2016/09/24/intersection-impls/\n \n-#![feature(rustc_attrs, never_type)]\n+#![feature(rustc_attrs)]\n \n trait MyTrait {}\n "}, {"sha": "3dfe0ad7f72c1e19eff92963a0a28bc2c2aa46c8", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n-#![feature(never_type)]\n \n use std::mem::size_of;\n "}, {"sha": "84daa35484f81ba7c03cf1617530cce47277924d", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod foo {"}, {"sha": "6ba03ee5083168f5063d0d5f019546d3971fd5e5", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `A(_)` not covered\n-  --> $DIR/uninhabited-irrefutable.rs:27:9\n+  --> $DIR/uninhabited-irrefutable.rs:26:9\n    |\n LL | / enum Foo {\n LL | |     A(foo::SecretlyEmpty),"}, {"sha": "66a1a7f7735ebc0741379e163b8150ca4eff04ea", "filename": "src/test/ui/uninhabited/uninhabited-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,6 +1,5 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![deny(unreachable_patterns)]"}, {"sha": "4a793c4510ec1dcfbe236ba906c8bceeb9e7f2ad", "filename": "src/test/ui/uninhabited/uninhabited-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr?ref=35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "patch": "@@ -1,35 +1,35 @@\n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:27:9\n+  --> $DIR/uninhabited-patterns.rs:26:9\n    |\n LL |         &[..] => (),\n    |         ^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/uninhabited-patterns.rs:6:9\n+  --> $DIR/uninhabited-patterns.rs:5:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:32:9\n+  --> $DIR/uninhabited-patterns.rs:31:9\n    |\n LL |         Ok(box _) => (),\n    |         ^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:34:9\n+  --> $DIR/uninhabited-patterns.rs:33:9\n    |\n LL |         Err(&[..]) => (),\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:41:9\n+  --> $DIR/uninhabited-patterns.rs:40:9\n    |\n LL |         Err(Ok(_y)) => (),\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:44:15\n+  --> $DIR/uninhabited-patterns.rs:43:15\n    |\n LL |     while let Some(_y) = foo() {\n    |               ^^^^^^^^"}]}