{"sha": "759200b6991b5dac5fdb12bc6c366b16850add00", "node_id": "C_kwDOAAsO6NoAKDc1OTIwMGI2OTkxYjVkYWM1ZmRiMTJiYzZjMzY2YjE2ODUwYWRkMDA", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-17T18:42:32Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-09T09:38:19Z"}, "message": "Handle PR feedbacks first round", "tree": {"sha": "42889feed24da30f65b8e21c6d0fde54ecf00e15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42889feed24da30f65b8e21c6d0fde54ecf00e15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759200b6991b5dac5fdb12bc6c366b16850add00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759200b6991b5dac5fdb12bc6c366b16850add00", "html_url": "https://github.com/rust-lang/rust/commit/759200b6991b5dac5fdb12bc6c366b16850add00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759200b6991b5dac5fdb12bc6c366b16850add00/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "html_url": "https://github.com/rust-lang/rust/commit/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "ce89189bce9779e12305ca5c269ef9c4e359e30d", "filename": "clippy_lints/src/methods/uninit_assumed_init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs?ref=759200b6991b5dac5fdb12bc6c366b16850add00", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{is_expr_path_def_path, is_uninit_ty_valid, paths};\n+use clippy_utils::{is_expr_path_def_path, paths, ty::is_uninit_value_valid_for_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         if let hir::ExprKind::Call(callee, args) = recv.kind;\n         if args.is_empty();\n         if is_expr_path_def_path(cx, callee, &paths::MEM_MAYBEUNINIT_UNINIT);\n-        if !is_uninit_ty_valid(cx, cx.typeck_results().expr_ty_adjusted(expr));\n+        if !is_uninit_value_valid_for_ty(cx, cx.typeck_results().expr_ty_adjusted(expr));\n         then {\n             span_lint(\n                 cx,"}, {"sha": "37084f57043b5fab899925ddf948ed4fc4283952", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=759200b6991b5dac5fdb12bc6c366b16850add00", "patch": "@@ -1,11 +1,14 @@\n use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::{is_uninit_ty_valid, match_def_path, path_to_local_id, paths, peel_hir_expr_while, SpanlessEq};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{\n+    match_def_path, path_to_local_id, paths, peel_hir_expr_while, ty::is_uninit_value_valid_for_ty, SpanlessEq,\n+};\n use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, HirId, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -44,32 +47,36 @@ impl<'tcx> LateLintPass<'tcx> for UninitVec {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'_>) {\n         for w in block.stmts.windows(2) {\n             if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = w[1].kind {\n-                handle_pair(cx, &w[0], expr);\n+                handle_uninit_vec_pair(cx, &w[0], expr);\n             }\n         }\n \n         if let (Some(stmt), Some(expr)) = (block.stmts.last(), block.expr) {\n-            handle_pair(cx, stmt, expr);\n+            handle_uninit_vec_pair(cx, stmt, expr);\n         }\n     }\n }\n \n-fn handle_pair(cx: &LateContext<'tcx>, first: &'tcx Stmt<'tcx>, second: &'tcx Expr<'tcx>) {\n+fn handle_uninit_vec_pair(\n+    cx: &LateContext<'tcx>,\n+    maybe_with_capacity_or_reserve: &'tcx Stmt<'tcx>,\n+    maybe_set_len: &'tcx Expr<'tcx>,\n+) {\n     if_chain! {\n-        if let Some(vec) = extract_with_capacity_or_reserve_target(cx, first);\n-        if let Some((set_len_self, call_span)) = extract_set_len_self(cx, second);\n+        if let Some(vec) = extract_with_capacity_or_reserve_target(cx, maybe_with_capacity_or_reserve);\n+        if let Some((set_len_self, call_span)) = extract_set_len_self(cx, maybe_set_len);\n         if vec.eq_expr(cx, set_len_self);\n         if let ty::Ref(_, vec_ty, _) = cx.typeck_results().expr_ty_adjusted(set_len_self).kind();\n         if let ty::Adt(_, substs) = vec_ty.kind();\n         // Check T of Vec<T>\n-        if !is_uninit_ty_valid(cx, substs.type_at(0));\n+        if !is_uninit_value_valid_for_ty(cx, substs.type_at(0));\n         then {\n             span_lint_and_note(\n                 cx,\n                 UNINIT_VEC,\n                 call_span,\n                 \"calling `set_len()` immediately after reserving a buffer creates uninitialized values\",\n-                Some(first.span),\n+                Some(maybe_with_capacity_or_reserve.span),\n                 \"the buffer is reserved here\"\n             );\n         }\n@@ -113,16 +120,14 @@ fn extract_with_capacity_or_reserve_target(cx: &LateContext<'_>, stmt: &'tcx Stm\n                     // self.vec = Vec::with_capacity()\n                     Some(LocalOrExpr::Expr(lhs))\n                 },\n-                ExprKind::MethodCall(_, _, [vec_expr, _], _) => {\n+                ExprKind::MethodCall(path, _, [self_expr, _], _) => {\n                     // self.vec.reserve()\n-                    if_chain! {\n-                        if let Some(id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-                        if match_def_path(cx, id, &paths::VEC_RESERVE);\n-                        then {\n-                            Some(LocalOrExpr::Expr(vec_expr))\n-                        } else {\n-                            None\n-                        }\n+                    if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_expr).peel_refs(), sym::vec_type)\n+                        && path.ident.name.as_str() == \"reserve\"\n+                    {\n+                        Some(LocalOrExpr::Expr(self_expr))\n+                    } else {\n+                        None\n                     }\n                 },\n                 _ => None,"}, {"sha": "09eee78f0d1ffeb339cc1c11d6ff91dde1145281", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=759200b6991b5dac5fdb12bc6c366b16850add00", "patch": "@@ -1470,16 +1470,6 @@ pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n     false\n }\n \n-/// Checks if a given type looks safe to be uninitialized.\n-pub fn is_uninit_ty_valid(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        rustc_ty::Array(component, _) => is_uninit_ty_valid(cx, component),\n-        rustc_ty::Tuple(types) => types.types().all(|ty| is_uninit_ty_valid(cx, ty)),\n-        rustc_ty::Adt(adt, _) => match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT),\n-        _ => false,\n-    }\n-}\n-\n pub fn iter_input_pats<'tcx>(decl: &FnDecl<'_>, body: &'tcx Body<'_>) -> impl Iterator<Item = &'tcx Param<'tcx>> {\n     (0..decl.inputs.len()).map(move |i| &body.params[i])\n }"}, {"sha": "63ec10a31786dc17e6941ac11fe05b4ff94e4a82", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=759200b6991b5dac5fdb12bc6c366b16850add00", "patch": "@@ -183,7 +183,6 @@ pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n-pub const VEC_RESERVE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"reserve\"];\n pub const VEC_WITH_CAPACITY: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"with_capacity\"];\n pub const VEC_SET_LEN: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"set_len\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];"}, {"sha": "ca64ac7de3eea4b98fd9f609a82d153008dbc9df", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759200b6991b5dac5fdb12bc6c366b16850add00/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=759200b6991b5dac5fdb12bc6c366b16850add00", "patch": "@@ -367,3 +367,13 @@ pub fn same_type_and_consts(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         _ => a == b,\n     }\n }\n+\n+/// Checks if a given type looks safe to be uninitialized.\n+pub fn is_uninit_value_valid_for_ty(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n+    match ty.kind() {\n+        ty::Array(component, _) => is_uninit_value_valid_for_ty(cx, component),\n+        ty::Tuple(types) => types.types().all(|ty| is_uninit_value_valid_for_ty(cx, ty)),\n+        ty::Adt(adt, _) => cx.tcx.lang_items().maybe_uninit() == Some(adt.did),\n+        _ => false,\n+    }\n+}"}, {"sha": "34b9e07ef1d4fb85ba5468afe11e358275f5a596", "filename": "tests/ui/uninit_vec.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/759200b6991b5dac5fdb12bc6c366b16850add00/tests%2Fui%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759200b6991b5dac5fdb12bc6c366b16850add00/tests%2Fui%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.rs?ref=759200b6991b5dac5fdb12bc6c366b16850add00", "patch": "@@ -25,8 +25,14 @@ fn main() {\n     }\n \n     // MaybeUninit-wrapped types should not be detected\n-    let mut vec: Vec<MaybeUninit<u8>> = Vec::with_capacity(1000);\n     unsafe {\n+        let mut vec: Vec<MaybeUninit<u8>> = Vec::with_capacity(1000);\n+        vec.set_len(200);\n+\n+        let mut vec: Vec<(MaybeUninit<u8>, MaybeUninit<bool>)> = Vec::with_capacity(1000);\n+        vec.set_len(200);\n+\n+        let mut vec: Vec<(MaybeUninit<u8>, [MaybeUninit<bool>; 2])> = Vec::with_capacity(1000);\n         vec.set_len(200);\n     }\n }"}]}