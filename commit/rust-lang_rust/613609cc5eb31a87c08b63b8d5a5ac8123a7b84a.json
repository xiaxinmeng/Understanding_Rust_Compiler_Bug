{"sha": "613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "node_id": "C_kwDOAAsO6NoAKDYxMzYwOWNjNWViMzFhODdjMDhiNjNiOGQ1YTVhYzgxMjNhN2I4NGE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-02T17:21:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-02T17:38:39Z"}, "message": "minor: cleanup", "tree": {"sha": "3c7e41d725397cb3a501149f9eeaeedc0c3f9d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7e41d725397cb3a501149f9eeaeedc0c3f9d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "html_url": "https://github.com/rust-lang/rust/commit/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77bf7612035cdec0d2a7b27e54087ed6cb19f9e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/77bf7612035cdec0d2a7b27e54087ed6cb19f9e8", "html_url": "https://github.com/rust-lang/rust/commit/77bf7612035cdec0d2a7b27e54087ed6cb19f9e8"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "06c21dfd70fe5ec4a22d2c668d0873a1e71a839e", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "patch": "@@ -765,7 +765,7 @@ enum OpDelimited<'a> {\n \n #[derive(Debug, Clone, Copy)]\n struct OpDelimitedIter<'a> {\n-    inner: &'a Vec<Op>,\n+    inner: &'a [Op],\n     delimited: Option<&'a tt::Delimiter>,\n     idx: usize,\n }"}, {"sha": "8470ea0aaf58dd90b20fcaacb7c457cedca433d2", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "patch": "@@ -19,7 +19,7 @@ mod token_map;\n use std::fmt;\n \n use crate::{\n-    parser::{parse_pattern, parse_template, MetaTemplate, Op},\n+    parser::{MetaTemplate, Op},\n     tt_iter::TtIter,\n };\n \n@@ -275,8 +275,8 @@ impl Rule {\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?;\n \n-        let lhs = MetaTemplate(parse_pattern(lhs)?);\n-        let rhs = MetaTemplate(parse_template(rhs)?);\n+        let lhs = MetaTemplate::parse_pattern(lhs)?;\n+        let rhs = MetaTemplate::parse_template(rhs)?;\n \n         Ok(crate::Rule { lhs, rhs })\n     }"}, {"sha": "f0a9dd4a51e5ac41fe7bcb7f44ceeca1eba328a6", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "patch": "@@ -6,12 +6,38 @@ use syntax::SmolStr;\n \n use crate::{tt_iter::TtIter, ParseError};\n \n-pub(crate) fn parse_template(template: &tt::Subtree) -> Result<Vec<Op>, ParseError> {\n-    parse_inner(template, Mode::Template).into_iter().collect()\n-}\n+/// Consider\n+///\n+/// ```\n+/// macro_rules! an_macro {\n+///     ($x:expr + $y:expr) => ($y * $x)\n+/// }\n+/// ```\n+///\n+/// Stuff to the left of `=>` is a [`MetaTemplate`] pattern (which is matched\n+/// with input).\n+///\n+/// Stuff to the right is a [`MetaTemplate`] template which is used to produce\n+/// output.\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub(crate) struct MetaTemplate(pub(crate) Vec<Op>);\n+\n+impl MetaTemplate {\n+    pub(crate) fn parse_pattern(pattern: &tt::Subtree) -> Result<MetaTemplate, ParseError> {\n+        let ops =\n+            parse_inner(pattern, Mode::Pattern).into_iter().collect::<Result<_, ParseError>>()?;\n+        Ok(MetaTemplate(ops))\n+    }\n+\n+    pub(crate) fn parse_template(template: &tt::Subtree) -> Result<MetaTemplate, ParseError> {\n+        let ops =\n+            parse_inner(template, Mode::Template).into_iter().collect::<Result<_, ParseError>>()?;\n+        Ok(MetaTemplate(ops))\n+    }\n \n-pub(crate) fn parse_pattern(pattern: &tt::Subtree) -> Result<Vec<Op>, ParseError> {\n-    parse_inner(pattern, Mode::Pattern).into_iter().collect()\n+    pub(crate) fn iter(&self) -> impl Iterator<Item = &Op> {\n+        self.0.iter()\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -36,15 +62,6 @@ pub(crate) enum Separator {\n     Puncts(SmallVec<[tt::Punct; 3]>),\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub(crate) struct MetaTemplate(pub(crate) Vec<Op>);\n-\n-impl MetaTemplate {\n-    pub(crate) fn iter(&self) -> impl Iterator<Item = &Op> {\n-        self.0.iter()\n-    }\n-}\n-\n // Note that when we compare a Separator, we just care about its textual value.\n impl PartialEq for Separator {\n     fn eq(&self, other: &Separator) -> bool {"}]}