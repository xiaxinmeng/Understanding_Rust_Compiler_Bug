{"sha": "07c7ba72056cf03830dc508ad634b9c371cd4a89", "node_id": "C_kwDOAAsO6NoAKDA3YzdiYTcyMDU2Y2YwMzgzMGRjNTA4YWQ2MzRiOWMzNzFjZDRhODk", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-11-05T17:29:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-06-13T07:59:44Z"}, "message": "proc_macro: bypass RandomState to remove ASLR-like effects.", "tree": {"sha": "cba0c44e481d19225ef914f9561b7a7719597d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba0c44e481d19225ef914f9561b7a7719597d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c7ba72056cf03830dc508ad634b9c371cd4a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c7ba72056cf03830dc508ad634b9c371cd4a89", "html_url": "https://github.com/rust-lang/rust/commit/07c7ba72056cf03830dc508ad634b9c371cd4a89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c7ba72056cf03830dc508ad634b9c371cd4a89/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/d76573abd19d50c25c5b58ec7fc5cfef579e6eef", "html_url": "https://github.com/rust-lang/rust/commit/d76573abd19d50c25c5b58ec7fc5cfef579e6eef"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "c219a9465d39f2d091133298a697049cd0712c67", "filename": "library/proc_macro/src/bridge/handle.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07c7ba72056cf03830dc508ad634b9c371cd4a89/library%2Fproc_macro%2Fsrc%2Fbridge%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c7ba72056cf03830dc508ad634b9c371cd4a89/library%2Fproc_macro%2Fsrc%2Fbridge%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fhandle.rs?ref=07c7ba72056cf03830dc508ad634b9c371cd4a89", "patch": "@@ -1,7 +1,7 @@\n //! Server-side handles and storage for per-handle data.\n \n use std::collections::{BTreeMap, HashMap};\n-use std::hash::Hash;\n+use std::hash::{BuildHasher, Hash};\n use std::num::NonZeroU32;\n use std::ops::{Index, IndexMut};\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -51,15 +51,31 @@ impl<T> IndexMut<Handle> for OwnedStore<T> {\n     }\n }\n \n+// HACK(eddyb) deterministic `std::collections::hash_map::RandomState` replacement\n+// that doesn't require adding any dependencies to `proc_macro` (like `rustc-hash`).\n+#[derive(Clone)]\n+struct NonRandomState;\n+\n+impl BuildHasher for NonRandomState {\n+    type Hasher = std::collections::hash_map::DefaultHasher;\n+    #[inline]\n+    fn build_hasher(&self) -> Self::Hasher {\n+        Self::Hasher::new()\n+    }\n+}\n+\n /// Like `OwnedStore`, but avoids storing any value more than once.\n pub(super) struct InternedStore<T: 'static> {\n     owned: OwnedStore<T>,\n-    interner: HashMap<T, Handle>,\n+    interner: HashMap<T, Handle, NonRandomState>,\n }\n \n impl<T: Copy + Eq + Hash> InternedStore<T> {\n     pub(super) fn new(counter: &'static AtomicUsize) -> Self {\n-        InternedStore { owned: OwnedStore::new(counter), interner: HashMap::new() }\n+        InternedStore {\n+            owned: OwnedStore::new(counter),\n+            interner: HashMap::with_hasher(NonRandomState),\n+        }\n     }\n \n     pub(super) fn alloc(&mut self, x: T) -> Handle {"}]}