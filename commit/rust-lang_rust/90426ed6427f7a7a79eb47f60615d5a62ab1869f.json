{"sha": "90426ed6427f7a7a79eb47f60615d5a62ab1869f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDI2ZWQ2NDI3ZjdhN2E3OWViNDdmNjA2MTVkNWE2MmFiMTg2OWY=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-20T13:27:46Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-23T08:07:04Z"}, "message": "moving some variants from InterpError to EvalErrorPanic", "tree": {"sha": "62a35fbba1f33f591f6eb146bb37728252ac11cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a35fbba1f33f591f6eb146bb37728252ac11cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90426ed6427f7a7a79eb47f60615d5a62ab1869f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90426ed6427f7a7a79eb47f60615d5a62ab1869f", "html_url": "https://github.com/rust-lang/rust/commit/90426ed6427f7a7a79eb47f60615d5a62ab1869f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90426ed6427f7a7a79eb47f60615d5a62ab1869f/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "html_url": "https://github.com/rust-lang/rust/commit/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1"}], "stats": {"total": 166, "additions": 88, "deletions": 78}, "files": [{"sha": "41ec2029c816ea8c4d46a2b233dd86c77ebd4d5c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -284,11 +284,6 @@ pub enum InterpError<'tcx, O> {\n     Unimplemented(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n-    BoundsCheck { len: O, index: O },\n-    Overflow(mir::BinOp),\n-    OverflowNeg,\n-    DivisionByZero,\n-    RemainderByZero,\n     Intrinsic(String),\n     InvalidChar(u128),\n     StackFrameLimitReached,\n@@ -332,7 +327,6 @@ pub enum InterpError<'tcx, O> {\n     InfiniteLoop,\n }\n \n-\n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n impl<'tcx, O> InterpError<'tcx, O> {\n@@ -383,8 +377,6 @@ impl<'tcx, O> InterpError<'tcx, O> {\n                 \"tried to dereference a function pointer\",\n             ExecuteMemory =>\n                 \"tried to treat a memory pointer as a function pointer\",\n-            BoundsCheck{..} =>\n-                \"array index out of bounds\",\n             Intrinsic(..) =>\n                 \"intrinsic failed\",\n             NoMirFor(..) =>\n@@ -436,8 +428,32 @@ impl<'tcx, O> InterpError<'tcx, O> {\n                 two\",\n             Unreachable =>\n                 \"entered unreachable code\",\n-            Panic { .. } =>\n+            Panic(EvalErrorPanic::Panic{..}) =>\n                 \"the evaluated program panicked\",\n+            Panic(EvalErrorPanic::BoundsCheck{..}) =>\n+                \"array index out of bounds\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Add)) =>\n+                \"attempt to add with overflow\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Sub)) =>\n+                \"attempt to subtract with overflow\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Mul)) =>\n+                \"attempt to multiply with overflow\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Div)) =>\n+                \"attempt to divide with overflow\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Rem)) =>\n+                \"attempt to calculate the remainder with overflow\",\n+            Panic(EvalErrorPanic::OverflowNeg) =>\n+                \"attempt to negate with overflow\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Shr)) =>\n+                \"attempt to shift right with overflow\",\n+            Panic(EvalErrorPanic::Overflow(mir::BinOp::Shl)) =>\n+                \"attempt to shift left with overflow\",\n+            Panic(EvalErrorPanic::Overflow(op)) =>\n+                bug!(\"{:?} cannot overflow\", op),\n+            Panic(EvalErrorPanic::DivisionByZero) =>\n+                \"attempt to divide by zero\",\n+            Panic(EvalErrorPanic::RemainderByZero) =>\n+                \"attempt to calculate the remainder with a divisor of zero\",\n             ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n             PathNotFound(_) =>\n@@ -450,17 +466,6 @@ impl<'tcx, O> InterpError<'tcx, O> {\n                 \"encountered overly generic constant\",\n             ReferencedConstant =>\n                 \"referenced constant has errors\",\n-            Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n-            Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\",\n-            Overflow(mir::BinOp::Mul) => \"attempt to multiply with overflow\",\n-            Overflow(mir::BinOp::Div) => \"attempt to divide with overflow\",\n-            Overflow(mir::BinOp::Rem) => \"attempt to calculate the remainder with overflow\",\n-            OverflowNeg => \"attempt to negate with overflow\",\n-            Overflow(mir::BinOp::Shr) => \"attempt to shift right with overflow\",\n-            Overflow(mir::BinOp::Shl) => \"attempt to shift left with overflow\",\n-            Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n-            DivisionByZero => \"attempt to divide by zero\",\n-            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n             GeneratorResumedAfterReturn => \"generator resumed after completion\",\n             GeneratorResumedAfterPanic => \"generator resumed after panicking\",\n             InfiniteLoop =>\n@@ -507,8 +512,6 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                     callee_ty, caller_ty),\n             FunctionArgCountMismatch =>\n                 write!(f, \"tried to call a function with incorrect number of arguments\"),\n-            BoundsCheck { ref len, ref index } =>\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             ReallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n@@ -532,8 +535,10 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            Panic { .. } =>\n-                write!(f, \"the evaluated program panicked\"),\n+            Panic(EvalErrorPanic::Panic { ref msg, line, col, ref file }) =>\n+                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n+            Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) =>\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n             Exit(code) =>"}, {"sha": "814cd90343c8b23e1e89b3f85d3317377ca73cc9", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -5,7 +5,7 @@ use crate::ty::layout::{self, HasDataLayout, Size};\n use rustc_macros::HashStable;\n \n use super::{\n-    AllocId, InterpResult,\n+    AllocId, InterpResult, EvalErrorPanic\n };\n \n /// Used by `check_in_alloc` to indicate context of check\n@@ -76,13 +76,13 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     #[inline]\n     fn offset<'tcx>(&self, val: u64, i: u64) -> InterpResult<'tcx, u64> {\n         let (res, over) = self.overflowing_offset(val, i);\n-        if over { err!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n+        if over { err!(Panic(EvalErrorPanic::Overflow(mir::BinOp::Add))) } else { Ok(res) }\n     }\n \n     #[inline]\n     fn signed_offset<'tcx>(&self, val: u64, i: i64) -> InterpResult<'tcx, u64> {\n         let (res, over) = self.overflowing_signed_offset(val, i128::from(i));\n-        if over { err!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n+        if over { err!(Panic(EvalErrorPanic::Overflow(mir::BinOp::Add))) } else { Ok(res) }\n     }\n }\n "}, {"sha": "ca1111d7fbf04d77dbc1b7dfaef70103bcff493c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n-use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n+use crate::mir::interpret::{ConstValue, EvalErrorPanic, InterpError::Panic, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::rustc_serialize as serialize;\n use crate::ty::adjustment::PointerCast;\n@@ -3087,11 +3087,11 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let msg = if let InterpError::BoundsCheck { ref len, ref index } = *msg {\n-                    InterpError::BoundsCheck {\n+                let msg = if let Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) = *msg {\n+                    Panic(EvalErrorPanic::BoundsCheck {\n                         len: len.fold_with(folder),\n                         index: index.fold_with(folder),\n-                    }\n+                    })\n                 } else {\n                     msg.clone()\n                 };\n@@ -3132,7 +3132,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    if let InterpError::BoundsCheck { ref len, ref index } = *msg {\n+                    if let Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) = *msg {\n                         len.visit_with(visitor) || index.visit_with(visitor)\n                     } else {\n                         false"}, {"sha": "54f987e2cf0340e0a489fdd1205d7b61f64ef31f", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -514,7 +514,8 @@ macro_rules! make_mir_visitor {\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n                 use crate::mir::interpret::InterpError::*;\n-                if let BoundsCheck { len, index } = msg {\n+                use crate::mir::interpret::EvalErrorPanic::BoundsCheck;\n+                if let Panic(BoundsCheck { len, index }) = msg {\n                     self.visit_operand(len, location);\n                     self.visit_operand(index, location);\n                 }"}, {"sha": "beb6b9421ce338df6b8fef8bdbeb809334c6d182", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -2,7 +2,7 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n-use rustc::mir::interpret::InterpError;\n+use rustc::mir::interpret::{InterpError, EvalErrorPanic};\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n use crate::base;\n@@ -368,7 +368,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let mir::interpret::InterpError::OverflowNeg = *msg {\n+            if let InterpError::Panic(EvalErrorPanic::OverflowNeg) = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -403,7 +403,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match *msg {\n-            InterpError::BoundsCheck { ref len, ref index } => {\n+            InterpError::Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n "}, {"sha": "86f2c07e6b94f17c95481ba6a27ea6d2f4c6616a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -734,8 +734,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::interpret::InterpError::BoundsCheck;\n-                if let BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::interpret::{InterpError::Panic, EvalErrorPanic};\n+                if let Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }"}, {"sha": "51a00d2f0eb6416a3d9cf4f1d01bd15f6be296ff", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -207,8 +207,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 cleanup: _,\n             } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::interpret::InterpError::BoundsCheck;\n-                if let BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::interpret::{InterpError::Panic, EvalErrorPanic::BoundsCheck};\n+                if let Panic(BoundsCheck { ref len, ref index }) = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "79020fdb4a5f37f015e09ca88f45b230b8a165dd", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -28,7 +28,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{InterpError::BoundsCheck, ConstValue};\n+use rustc::mir::interpret::{InterpError::Panic, ConstValue, EvalErrorPanic};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -1589,7 +1589,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let BoundsCheck { ref len, ref index } = *msg {\n+                if let Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) = *msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "f342761e25de01fa2e7676c890bec041c4a43d72", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -4,7 +4,7 @@ use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::mir::interpret::InterpError::BoundsCheck;\n+use rustc::mir::interpret::{InterpError::Panic, EvalErrorPanic::BoundsCheck};\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n \n@@ -105,10 +105,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     ),\n                 );\n \n-                let msg = BoundsCheck {\n+                let msg = Panic(BoundsCheck {\n                     len: Operand::Move(len),\n                     index: Operand::Copy(Place::from(idx)),\n-                };\n+                });\n                 let success = this.assert(block, Operand::Move(lt), true, msg, expr_span);\n                 success.and(slice.index(idx))\n             }"}, {"sha": "10bf48a85d098298e7f2f8168e1c85bd238a9bc5", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -7,7 +7,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::InterpError;\n+use rustc::mir::interpret::{InterpError::Panic, EvalErrorPanic};\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        InterpError::OverflowNeg,\n+                        Panic(EvalErrorPanic::OverflowNeg),\n                         expr_span,\n                     );\n                 }\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = InterpError::Overflow(op);\n+            let err = Panic(EvalErrorPanic::Overflow(op));\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -412,9 +412,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (InterpError::DivisionByZero, InterpError::Overflow(op))\n+                    (Panic(EvalErrorPanic::DivisionByZero), Panic(EvalErrorPanic::Overflow(op)))\n                 } else {\n-                    (InterpError::RemainderByZero, InterpError::Overflow(op))\n+                    (Panic(EvalErrorPanic::RemainderByZero), Panic(EvalErrorPanic::Overflow(op)))\n                 };\n \n                 // Check for / 0"}, {"sha": "0932b468a502aa8b25bee1bb0c948297107fa2af", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -2,7 +2,7 @@ use rustc::mir;\n use rustc::ty::{self, layout::TyLayout};\n use syntax::ast::FloatTy;\n use rustc_apfloat::Float;\n-use rustc::mir::interpret::{InterpResult, Scalar};\n+use rustc::mir::interpret::{InterpResult, EvalErrorPanic, Scalar};\n \n use super::{InterpCx, PlaceTy, Immediate, Machine, ImmTy};\n \n@@ -173,8 +173,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 return Ok((Scalar::from_bool(op(&l, &r)), false));\n             }\n             let op: Option<fn(i128, i128) -> (i128, bool)> = match bin_op {\n-                Div if r == 0 => return err!(DivisionByZero),\n-                Rem if r == 0 => return err!(RemainderByZero),\n+                Div if r == 0 => return err!(Panic(EvalErrorPanic::DivisionByZero)),\n+                Rem if r == 0 => return err!(Panic(EvalErrorPanic::RemainderByZero)),\n                 Div => Some(i128::overflowing_div),\n                 Rem => Some(i128::overflowing_rem),\n                 Add => Some(i128::overflowing_add),\n@@ -231,8 +231,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Add => u128::overflowing_add,\n                     Sub => u128::overflowing_sub,\n                     Mul => u128::overflowing_mul,\n-                    Div if r == 0 => return err!(DivisionByZero),\n-                    Rem if r == 0 => return err!(RemainderByZero),\n+                    Div if r == 0 => return err!(Panic(EvalErrorPanic::DivisionByZero)),\n+                    Rem if r == 0 => return err!(Panic(EvalErrorPanic::RemainderByZero)),\n                     Div => u128::overflowing_div,\n                     Rem => u128::overflowing_rem,\n                     _ => bug!(),"}, {"sha": "9887095882faf89ac1a638914ab430f57d71cb7b", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::TypeFoldable;\n \n use super::{\n     GlobalId, AllocId, Allocation, Scalar, InterpResult, Pointer, PointerArithmetic,\n-    InterpCx, Machine, AllocMap, AllocationExtra,\n+    InterpCx, Machine, AllocMap, AllocationExtra, EvalErrorPanic,\n     RawConst, Immediate, ImmTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind, LocalValue\n };\n \n@@ -356,7 +356,7 @@ where\n                     // This can be violated because this runs during promotion on code where the\n                     // type system has not yet ensured that such things don't happen.\n                     debug!(\"tried to access element {} of array/slice with length {}\", field, len);\n-                    return err!(BoundsCheck { len, index: field });\n+                    return err!(Panic(EvalErrorPanic::BoundsCheck { len, index: field }));\n                 }\n                 stride * field\n             }"}, {"sha": "ae1d8efa75349732e28269de0e3f75d90fa82168", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic, InterpError, Scalar,\n+    InterpResult, PointerArithmetic, InterpError, Scalar, EvalErrorPanic,\n     InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n@@ -137,19 +137,23 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     // Compute error message\n                     use rustc::mir::interpret::InterpError::*;\n                     return match *msg {\n-                        BoundsCheck { ref len, ref index } => {\n+                        Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) => {\n                             let len = self.read_immediate(self.eval_operand(len, None)?)\n                                 .expect(\"can't eval len\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n                             let index = self.read_immediate(self.eval_operand(index, None)?)\n                                 .expect(\"can't eval index\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n-                            err!(BoundsCheck { len, index })\n+                            err!(Panic(EvalErrorPanic::BoundsCheck { len, index }))\n                         }\n-                        Overflow(op) => Err(Overflow(op).into()),\n-                        OverflowNeg => Err(OverflowNeg.into()),\n-                        DivisionByZero => Err(DivisionByZero.into()),\n-                        RemainderByZero => Err(RemainderByZero.into()),\n+                        Panic(EvalErrorPanic::Overflow(op)) =>\n+                            Err(Panic(EvalErrorPanic::Overflow(op)).into()),\n+                        Panic(EvalErrorPanic::OverflowNeg) =>\n+                            Err(Panic(EvalErrorPanic::OverflowNeg).into()),\n+                        Panic(EvalErrorPanic::DivisionByZero) =>\n+                            Err(Panic(EvalErrorPanic::DivisionByZero).into()),\n+                        Panic(EvalErrorPanic::RemainderByZero) =>\n+                            Err(Panic(EvalErrorPanic::RemainderByZero).into()),\n                         GeneratorResumedAfterReturn |\n                         GeneratorResumedAfterPanic => unimplemented!(),\n                         _ => bug!(),"}, {"sha": "9d9e47ecaf4e10a546f2be565344a631d29f7aee", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90426ed6427f7a7a79eb47f60615d5a62ab1869f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=90426ed6427f7a7a79eb47f60615d5a62ab1869f", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n };\n-use rustc::mir::interpret::{InterpError, Scalar, GlobalId, InterpResult};\n+use rustc::mir::interpret::{InterpError::Panic, Scalar, GlobalId, InterpResult, EvalErrorPanic};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -339,12 +339,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     // FIXME: implement\n                     => {},\n \n-                    | Panic { .. }\n-                    | BoundsCheck{..}\n-                    | Overflow(_)\n-                    | OverflowNeg\n-                    | DivisionByZero\n-                    | RemainderByZero\n+                    | Panic(EvalErrorPanic::Panic { .. })\n+                    | Panic(EvalErrorPanic::BoundsCheck{..})\n+                    | Panic(EvalErrorPanic::Overflow(_))\n+                    | Panic(EvalErrorPanic::OverflowNeg)\n+                    | Panic(EvalErrorPanic::DivisionByZero)\n+                    | Panic(EvalErrorPanic::RemainderByZero)\n                     => {\n                         diagnostic.report_as_lint(\n                             self.ecx.tcx,\n@@ -522,7 +522,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             // Need to do overflow check here: For actual CTFE, MIR\n                             // generation emits code that does this before calling the op.\n                             if prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n-                                return err!(OverflowNeg);\n+                                return err!(Panic(EvalErrorPanic::OverflowNeg));\n                             }\n                         }\n                         UnOp::Not => {\n@@ -600,7 +600,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        let err = InterpError::Overflow(op).into();\n+                        let err = Panic(EvalErrorPanic::Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n@@ -839,11 +839,11 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             .expect(\"some part of a failing const eval must be local\");\n                         use rustc::mir::interpret::InterpError::*;\n                         let msg = match msg {\n-                            Overflow(_) |\n-                            OverflowNeg |\n-                            DivisionByZero |\n-                            RemainderByZero => msg.description().to_owned(),\n-                            BoundsCheck { ref len, ref index } => {\n+                            Panic(EvalErrorPanic::Overflow(_)) |\n+                            Panic(EvalErrorPanic::OverflowNeg) |\n+                            Panic(EvalErrorPanic::DivisionByZero) |\n+                            Panic(EvalErrorPanic::RemainderByZero) => msg.description().to_owned(),\n+                            Panic(EvalErrorPanic::BoundsCheck { ref len, ref index }) => {\n                                 let len = self\n                                     .eval_operand(len, source_info)\n                                     .expect(\"len must be const\");"}]}