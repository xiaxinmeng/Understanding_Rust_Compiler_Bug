{"sha": "3c3e372e1827d29d6e364e9710366ca5631c4fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjM2UzNzJlMTgyN2QyOWQ2ZTM2NGU5NzEwMzY2Y2E1NjMxYzRmY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-10T12:58:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-10T12:58:04Z"}, "message": "Auto merge of #54000 - jkozlowski:fix-53174, r=cramertj\n\nAllow named lifetimes in async functions.\n\n- Fixes #53174\n\nCode by @eddyb; @cramertj suggested I lift it off another change so we can fix #53174.\n\nr? @cramertj", "tree": {"sha": "ebc464d4b1263086364e86c84dca532d7e2acbda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebc464d4b1263086364e86c84dca532d7e2acbda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c3e372e1827d29d6e364e9710366ca5631c4fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3e372e1827d29d6e364e9710366ca5631c4fca", "html_url": "https://github.com/rust-lang/rust/commit/3c3e372e1827d29d6e364e9710366ca5631c4fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c3e372e1827d29d6e364e9710366ca5631c4fca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595345419d12c3ea860151df52f78744a31bafff", "url": "https://api.github.com/repos/rust-lang/rust/commits/595345419d12c3ea860151df52f78744a31bafff", "html_url": "https://github.com/rust-lang/rust/commit/595345419d12c3ea860151df52f78744a31bafff"}, {"sha": "4b7f2eb947b62974d72f9d14738c784a8a1a2095", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7f2eb947b62974d72f9d14738c784a8a1a2095", "html_url": "https://github.com/rust-lang/rust/commit/4b7f2eb947b62974d72f9d14738c784a8a1a2095"}], "stats": {"total": 110, "additions": 89, "deletions": 21}, "files": [{"sha": "cf832aee534d4cd6c1fb6e0cbf04cfcf7d4e98d1", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3c3e372e1827d29d6e364e9710366ca5631c4fca/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3e372e1827d29d6e364e9710366ca5631c4fca/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=3c3e372e1827d29d6e364e9710366ca5631c4fca", "patch": "@@ -76,23 +76,38 @@ impl<'a> DefCollector<'a> {\n     fn visit_async_fn(\n         &mut self,\n         id: NodeId,\n-        async_node_id: NodeId,\n-        return_impl_trait_id: NodeId,\n         name: Name,\n         span: Span,\n-        visit_fn: impl FnOnce(&mut DefCollector<'a>)\n+        header: &FnHeader,\n+        generics: &'a Generics,\n+        decl: &'a FnDecl,\n+        body: &'a Block,\n     ) {\n+        let (closure_id, return_impl_trait_id) = match header.asyncness {\n+            IsAsync::Async {\n+                closure_id,\n+                return_impl_trait_id,\n+            } => (closure_id, return_impl_trait_id),\n+            _ => unreachable!(),\n+        };\n+\n         // For async functions, we need to create their inner defs inside of a\n         // closure to match their desugared representation.\n         let fn_def_data = DefPathData::ValueNs(name.as_interned_str());\n         let fn_def = self.create_def(id, fn_def_data, ITEM_LIKE_SPACE, span);\n         return self.with_parent(fn_def, |this| {\n             this.create_def(return_impl_trait_id, DefPathData::ImplTrait, REGULAR_SPACE, span);\n-            let closure_def = this.create_def(async_node_id,\n+\n+            visit::walk_generics(this, generics);\n+            visit::walk_fn_decl(this, decl);\n+\n+            let closure_def = this.create_def(closure_id,\n                                   DefPathData::ClosureExpr,\n                                   REGULAR_SPACE,\n                                   span);\n-            this.with_parent(closure_def, visit_fn)\n+            this.with_parent(closure_def, |this| {\n+                visit::walk_block(this, body);\n+            })\n         })\n     }\n \n@@ -122,17 +137,20 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n-            ItemKind::Fn(_, FnHeader { asyncness: IsAsync::Async {\n-                closure_id,\n-                return_impl_trait_id,\n-            }, .. }, ..) => {\n+            ItemKind::Fn(\n+                ref decl,\n+                ref header @ FnHeader { asyncness: IsAsync::Async { .. }, .. },\n+                ref generics,\n+                ref body,\n+            ) => {\n                 return self.visit_async_fn(\n                     i.id,\n-                    closure_id,\n-                    return_impl_trait_id,\n                     i.ident.name,\n                     i.span,\n-                    |this| visit::walk_item(this, i)\n+                    header,\n+                    generics,\n+                    decl,\n+                    body,\n                 )\n             }\n             ItemKind::Mod(..) => DefPathData::Module(i.ident.as_interned_str()),\n@@ -233,18 +251,17 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(MethodSig {\n-                header: FnHeader { asyncness: IsAsync::Async {\n-                    closure_id,\n-                    return_impl_trait_id,\n-                }, .. }, ..\n-            }, ..) => {\n+                header: ref header @ FnHeader { asyncness: IsAsync::Async { .. }, .. },\n+                ref decl,\n+            }, ref body) => {\n                 return self.visit_async_fn(\n                     ii.id,\n-                    closure_id,\n-                    return_impl_trait_id,\n                     ii.ident.name,\n                     ii.span,\n-                    |this| visit::walk_impl_item(this, ii)\n+                    header,\n+                    &ii.generics,\n+                    decl,\n+                    body,\n                 )\n             }\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>"}, {"sha": "f692f57abb9c3cd80f334410a37e52a40dc157a7", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3c3e372e1827d29d6e364e9710366ca5631c4fca/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3e372e1827d29d6e364e9710366ca5631c4fca/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=3c3e372e1827d29d6e364e9710366ca5631c4fca", "patch": "@@ -67,6 +67,13 @@ fn async_block(x: u8) -> impl Future<Output = u8> {\n     }\n }\n \n+fn async_block_with_borrow_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n+    async move {\n+        await!(wake_and_yield_once());\n+        *x\n+    }\n+}\n+\n fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n     async move {\n         let future = async {\n@@ -94,6 +101,23 @@ async fn async_fn_with_borrow(x: &u8) -> u8 {\n     *x\n }\n \n+async fn async_fn_with_borrow_named_lifetime<'a>(x: &'a u8) -> u8 {\n+    await!(wake_and_yield_once());\n+    *x\n+}\n+\n+fn async_fn_with_impl_future_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n+    async move {\n+        await!(wake_and_yield_once());\n+        *x\n+    }\n+}\n+\n+async fn async_fn_with_named_lifetime_multiple_args<'a>(x: &'a u8, _y: &'a u8) -> u8 {\n+    await!(wake_and_yield_once());\n+    *x\n+}\n+\n fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n     async move {\n         await!(async_fn_with_borrow(&y))\n@@ -138,16 +162,43 @@ where\n \n fn main() {\n     macro_rules! test {\n-        ($($fn_name:ident,)*) => { $(\n+        ($($fn_name:expr,)*) => { $(\n             test_future_yields_once_then_returns($fn_name);\n         )* }\n     }\n \n+    macro_rules! test_with_borrow {\n+        ($($fn_name:expr,)*) => { $(\n+            test_future_yields_once_then_returns(|x| {\n+                async move {\n+                    await!($fn_name(&x))\n+                }\n+            });\n+        )* }\n+    }\n+\n     test! {\n         async_block,\n         async_nonmove_block,\n         async_closure,\n         async_fn,\n         async_fn_with_internal_borrow,\n+        |x| {\n+            async move {\n+                unsafe { await!(unsafe_async_fn(x)) }\n+            }\n+        },\n+    }\n+\n+    test_with_borrow! {\n+        async_block_with_borrow_named_lifetime,\n+        async_fn_with_borrow,\n+        async_fn_with_borrow_named_lifetime,\n+        async_fn_with_impl_future_named_lifetime,\n+        |x| {\n+            async move {\n+                await!(async_fn_with_named_lifetime_multiple_args(x, x))\n+            }\n+        },\n     }\n }"}]}