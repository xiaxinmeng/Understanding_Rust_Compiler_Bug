{"sha": "a891c72976824993ecb4a8749d9f16dbeceaeeed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OTFjNzI5NzY4MjQ5OTNlY2I0YTg3NDlkOWYxNmRiZWNlYWVlZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-28T09:03:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-28T09:03:00Z"}, "message": "Auto merge of #31171 - dirk:dirk/safety-section-in-cstring-docs, r=steveklabnik\n\nAlso a minor language tweak to the documentation of the `ffi::CString::from_raw` function.", "tree": {"sha": "4b2bda4f1a1de2aff5aa5ff4dcdbb37c7bab968c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2bda4f1a1de2aff5aa5ff4dcdbb37c7bab968c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a891c72976824993ecb4a8749d9f16dbeceaeeed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a891c72976824993ecb4a8749d9f16dbeceaeeed", "html_url": "https://github.com/rust-lang/rust/commit/a891c72976824993ecb4a8749d9f16dbeceaeeed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a891c72976824993ecb4a8749d9f16dbeceaeeed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035f4cca00d20fcf889c8c588125cd07b632a476", "url": "https://api.github.com/repos/rust-lang/rust/commits/035f4cca00d20fcf889c8c588125cd07b632a476", "html_url": "https://github.com/rust-lang/rust/commit/035f4cca00d20fcf889c8c588125cd07b632a476"}, {"sha": "9cfa1916fa06fa5fa809d6d7807a6f978e35c67d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfa1916fa06fa5fa809d6d7807a6f978e35c67d", "html_url": "https://github.com/rust-lang/rust/commit/9cfa1916fa06fa5fa809d6d7807a6f978e35c67d"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "ee744b868dd73065fec84300d6fcede236cc92c8", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a891c72976824993ecb4a8749d9f16dbeceaeeed/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a891c72976824993ecb4a8749d9f16dbeceaeeed/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=a891c72976824993ecb4a8749d9f16dbeceaeeed", "patch": "@@ -60,6 +60,18 @@ use vec::Vec;\n /// }\n /// # }\n /// ```\n+///\n+/// # Safety\n+///\n+/// `CString` is intended for working with traditional C-style strings\n+/// (a sequence of non-null bytes terminated by a single null byte); the\n+/// primary use case for these kinds of strings is interoperating with C-like\n+/// code. Often you will need to transfer ownership to/from that external\n+/// code. It is strongly recommended that you thoroughly read through the\n+/// documentation of `CString` before use, as improper ownership management\n+/// of `CString` instances can lead to invalid memory accesses, memory leaks,\n+/// and other memory errors.\n+\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n@@ -207,11 +219,11 @@ impl CString {\n         CString { inner: v.into_boxed_slice() }\n     }\n \n-    /// Retakes ownership of a CString that was transferred to C.\n+    /// Retakes ownership of a `CString` that was transferred to C.\n     ///\n-    /// The only appropriate argument is a pointer obtained by calling\n-    /// `into_raw`. The length of the string will be recalculated\n-    /// using the pointer.\n+    /// This should only ever be called with a pointer that was earlier\n+    /// obtained by calling `into_raw` on a `CString`. Additionally, the length\n+    /// of the string will be recalculated from the pointer.\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte"}]}