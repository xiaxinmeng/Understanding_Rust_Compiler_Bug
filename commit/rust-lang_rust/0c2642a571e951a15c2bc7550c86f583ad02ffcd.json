{"sha": "0c2642a571e951a15c2bc7550c86f583ad02ffcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjY0MmE1NzFlOTUxYTE1YzJiYzc1NTBjODZmNTgzYWQwMmZmY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-23T22:07:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-23T22:07:58Z"}, "message": "Auto merge of #25666 - tshepang:better-path-docs, r=steveklabnik", "tree": {"sha": "f60850c5025e9801f05a4a76b01ef8510e965ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60850c5025e9801f05a4a76b01ef8510e965ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c2642a571e951a15c2bc7550c86f583ad02ffcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2642a571e951a15c2bc7550c86f583ad02ffcd", "html_url": "https://github.com/rust-lang/rust/commit/0c2642a571e951a15c2bc7550c86f583ad02ffcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c2642a571e951a15c2bc7550c86f583ad02ffcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a33b808ac0ec37a8ef78b0581b3b061271c93ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a33b808ac0ec37a8ef78b0581b3b061271c93ab8", "html_url": "https://github.com/rust-lang/rust/commit/a33b808ac0ec37a8ef78b0581b3b061271c93ab8"}, {"sha": "462829cb13c75e43378ab4adab57ba17902cc293", "url": "https://api.github.com/repos/rust-lang/rust/commits/462829cb13c75e43378ab4adab57ba17902cc293", "html_url": "https://github.com/rust-lang/rust/commit/462829cb13c75e43378ab4adab57ba17902cc293"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "2f19644be8576d7f9b9c0647b7f315a5a72de58c", "filename": "src/libstd/path.rs", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0c2642a571e951a15c2bc7550c86f583ad02ffcd/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2642a571e951a15c2bc7550c86f583ad02ffcd/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=0c2642a571e951a15c2bc7550c86f583ad02ffcd", "patch": "@@ -1247,9 +1247,10 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let s = String::from(\"bar.txt\");\n-    /// let p = Path::new(&s);\n-    /// Path::new(&p);\n+    /// let string = String::from(\"foo.txt\");\n+    /// let from_string = Path::new(&string);\n+    /// let from_path = Path::new(&from_string);\n+    /// assert_eq!(from_string, from_path);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {\n@@ -1264,6 +1265,7 @@ impl Path {\n     /// use std::path::Path;\n     ///\n     /// let os_str = Path::new(\"foo.txt\").as_os_str();\n+    /// assert_eq!(os_str, std::ffi::OsStr::new(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_os_str(&self) -> &OsStr {\n@@ -1280,6 +1282,7 @@ impl Path {\n     /// use std::path::Path;\n     ///\n     /// let path_str = Path::new(\"foo.txt\").to_str();\n+    //// assert_eq!(path_str, Some(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n@@ -1296,6 +1299,7 @@ impl Path {\n     /// use std::path::Path;\n     ///\n     /// let path_str = Path::new(\"foo.txt\").to_string_lossy();\n+    /// assert_eq!(path_str, \"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n@@ -1309,7 +1313,8 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path_str = Path::new(\"foo.txt\").to_path_buf();\n+    /// let path_buf = Path::new(\"foo.txt\").to_path_buf();\n+    /// assert_eq!(path_buf, std::path::PathBuf::from(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_path_buf(&self) -> PathBuf {\n@@ -1330,7 +1335,7 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// assert_eq!(false, Path::new(\"foo.txt\").is_absolute());\n+    /// assert!(!Path::new(\"foo.txt\").is_absolute());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_absolute(&self) -> bool {\n@@ -1393,14 +1398,12 @@ impl Path {\n     /// use std::path::Path;\n     ///\n     /// let path = Path::new(\"/foo/bar\");\n-    /// let foo = path.parent().unwrap();\n+    /// let parent = path.parent().unwrap();\n+    /// assert_eq!(parent, Path::new(\"/foo\"));\n     ///\n-    /// assert!(foo == Path::new(\"/foo\"));\n-    ///\n-    /// let root = foo.parent().unwrap();\n-    ///\n-    /// assert!(root == Path::new(\"/\"));\n-    /// assert!(root.parent() == None);\n+    /// let grand_parent = parent.parent().unwrap();\n+    /// assert_eq!(grand_parent, Path::new(\"/\"));\n+    /// assert_eq!(grand_parent.parent(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn parent(&self) -> Option<&Path> {\n@@ -1416,18 +1419,19 @@ impl Path {\n \n     /// The final component of the path, if it is a normal file.\n     ///\n-    /// If the path terminates in `.`, `..`, or consists solely or a root of\n+    /// If the path terminates in `.`, `..`, or consists solely of a root of\n     /// prefix, `file_name` will return `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::path::Path;\n+    /// use std::ffi::OsStr;\n     ///\n-    /// let path = Path::new(\"hello_world.rs\");\n-    /// let filename = \"hello_world.rs\";\n+    /// let path = Path::new(\"foo.txt\");\n+    /// let os_str = OsStr::new(\"foo.txt\");\n     ///\n-    /// assert_eq!(filename, path.file_name().unwrap());\n+    /// assert_eq!(Some(os_str), path.file_name());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_name(&self) -> Option<&OsStr> {\n@@ -1538,11 +1542,9 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::path::Path;\n-    ///\n-    /// let path = Path::new(\"/tmp\");\n+    /// use std::path::{Path, PathBuf};\n     ///\n-    /// let new_path = path.join(\"foo\");\n+    /// assert_eq!(Path::new(\"/etc\").join(\"passwd\"), PathBuf::from(\"/etc/passwd\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {\n@@ -1558,11 +1560,10 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::path::Path;\n-    ///\n-    /// let path = Path::new(\"/tmp/foo.rs\");\n+    /// use std::path::{Path, PathBuf};\n     ///\n-    /// let new_path = path.with_file_name(\"bar.rs\");\n+    /// let path = Path::new(\"/tmp/foo.txt\");\n+    /// assert_eq!(path.with_file_name(\"bar.txt\"), PathBuf::from(\"/tmp/bar.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {\n@@ -1580,10 +1581,8 @@ impl Path {\n     /// ```\n     /// use std::path::{Path, PathBuf};\n     ///\n-    /// let path = Path::new(\"/tmp/foo.rs\");\n-    ///\n-    /// let new_path = path.with_extension(\"txt\");\n-    /// assert_eq!(new_path, PathBuf::from(\"/tmp/foo.txt\"));\n+    /// let path = Path::new(\"foo.rs\");\n+    /// assert_eq!(path.with_extension(\"txt\"), PathBuf::from(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {\n@@ -1597,13 +1596,15 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::path::Path;\n+    /// use std::path::{Path, Component};\n+    /// use std::ffi::OsStr;\n     ///\n-    /// let path = Path::new(\"/tmp/foo.rs\");\n+    /// let mut components = Path::new(\"/tmp/foo.txt\").components();\n     ///\n-    /// for component in path.components() {\n-    ///     println!(\"{:?}\", component);\n-    /// }\n+    /// assert_eq!(components.next(), Some(Component::RootDir));\n+    /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new(\"tmp\"))));\n+    /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new(\"foo.txt\"))));\n+    /// assert_eq!(components.next(), None)\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn components(&self) -> Components {\n@@ -1622,13 +1623,14 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::path::Path;\n-    ///\n-    /// let path = Path::new(\"/tmp/foo.rs\");\n-    ///\n-    /// for component in path.iter() {\n-    ///     println!(\"{:?}\", component);\n-    /// }\n+    /// use std::path::{self, Path};\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let mut it = Path::new(\"/tmp/foo.txt\").iter();\n+    /// assert_eq!(it.next(), Some(OsStr::new(&path::MAIN_SEPARATOR.to_string())));\n+    /// assert_eq!(it.next(), Some(OsStr::new(\"tmp\")));\n+    /// assert_eq!(it.next(), Some(OsStr::new(\"foo.txt\")));\n+    /// assert_eq!(it.next(), None)\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter {"}]}