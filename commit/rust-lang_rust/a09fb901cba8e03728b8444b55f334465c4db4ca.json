{"sha": "a09fb901cba8e03728b8444b55f334465c4db4ca", "node_id": "C_kwDOAAsO6NoAKGEwOWZiOTAxY2JhOGUwMzcyOGI4NDQ0YjU1ZjMzNDQ2NWM0ZGI0Y2E", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-28T08:53:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-28T08:56:15Z"}, "message": "rustc_session: Remove lint store from `Session`", "tree": {"sha": "c8f068076a525e47e10eda3e67b1d66a07793efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8f068076a525e47e10eda3e67b1d66a07793efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09fb901cba8e03728b8444b55f334465c4db4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09fb901cba8e03728b8444b55f334465c4db4ca", "html_url": "https://github.com/rust-lang/rust/commit/a09fb901cba8e03728b8444b55f334465c4db4ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09fb901cba8e03728b8444b55f334465c4db4ca/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a12be741290b16c29293f87bdb3e8e5129bd4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a12be741290b16c29293f87bdb3e8e5129bd4a9", "html_url": "https://github.com/rust-lang/rust/commit/8a12be741290b16c29293f87bdb3e8e5129bd4a9"}], "stats": {"total": 41, "additions": 4, "deletions": 37}, "files": [{"sha": "8aff093dd182624b1965596845be7ff17c60c04d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=a09fb901cba8e03728b8444b55f334465c4db4ca", "patch": "@@ -179,7 +179,7 @@ pub fn register_plugins<'a>(\n     register_lints: impl Fn(&Session, &mut LintStore),\n     mut krate: ast::Crate,\n     crate_name: &str,\n-) -> Result<(ast::Crate, Lrc<LintStore>)> {\n+) -> Result<(ast::Crate, LintStore)> {\n     krate = sess.time(\"attributes_injection\", || {\n         rustc_builtin_macros::cmdline_attrs::inject(\n             krate,\n@@ -230,9 +230,6 @@ pub fn register_plugins<'a>(\n         }\n     });\n \n-    let lint_store = Lrc::new(lint_store);\n-    sess.init_lint_store(lint_store.clone());\n-\n     Ok((krate, lint_store))\n }\n "}, {"sha": "a71b59b9d49bdc0e2efad8104d59e6f0eb491340", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=a09fb901cba8e03728b8444b55f334465c4db4ca", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> Queries<'tcx> {\n             let krate = self.parse()?.take();\n \n             let empty: &(dyn Fn(&Session, &mut LintStore) + Sync + Send) = &|_, _| {};\n-            let result = passes::register_plugins(\n+            let (krate, lint_store) = passes::register_plugins(\n                 self.session(),\n                 &*self.codegen_backend().metadata_loader(),\n                 self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n@@ -150,7 +150,7 @@ impl<'tcx> Queries<'tcx> {\n             // called, which happens within passes::register_plugins().\n             self.dep_graph_future().ok();\n \n-            Ok(result)\n+            Ok((krate, Lrc::new(lint_store)))\n         })\n     }\n "}, {"sha": "d235b2209444eb8bd7dfb7e6896d416e95597499", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=a09fb901cba8e03728b8444b55f334465c4db4ca", "patch": "@@ -38,7 +38,6 @@ use rustc_serialize::json::Json;\n use rustc_session::lint::{BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n-use rustc_session::SessionLintStore;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use rustc_target::abi;\n@@ -75,20 +74,6 @@ pub struct LintStore {\n     lint_groups: FxHashMap<&'static str, LintGroup>,\n }\n \n-impl SessionLintStore for LintStore {\n-    fn name_to_lint(&self, lint_name: &str) -> LintId {\n-        let lints = self\n-            .find_lints(lint_name)\n-            .unwrap_or_else(|_| panic!(\"Failed to find lint with name `{}`\", lint_name));\n-\n-        if let &[lint] = lints.as_slice() {\n-            return lint;\n-        } else {\n-            panic!(\"Found mutliple lints with name `{}`: {:?}\", lint_name, lints);\n-        }\n-    }\n-}\n-\n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n #[derive(Debug)]\n enum TargetLint {"}, {"sha": "87f9190114109c067d1ce6c0306d9a177fe88be9", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09fb901cba8e03728b8444b55f334465c4db4ca/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a09fb901cba8e03728b8444b55f334465c4db4ca", "patch": "@@ -2,10 +2,9 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use crate::config::{self, CrateType, OutputType, SwitchWithOptPath};\n-use crate::filesearch;\n-use crate::lint::{self, LintId};\n use crate::parse::ParseSess;\n use crate::search_paths::{PathKind, SearchPath};\n+use crate::{filesearch, lint};\n \n pub use rustc_ast::attr::MarkedAttrs;\n pub use rustc_ast::Attribute;\n@@ -41,10 +40,6 @@ use std::str::FromStr;\n use std::sync::Arc;\n use std::time::Duration;\n \n-pub trait SessionLintStore: sync::Send + sync::Sync {\n-    fn name_to_lint(&self, lint_name: &str) -> LintId;\n-}\n-\n pub struct OptimizationFuel {\n     /// If `-zfuel=crate=n` is specified, initially set to `n`, otherwise `0`.\n     remaining: u64,\n@@ -153,8 +148,6 @@ pub struct Session {\n \n     features: OnceCell<rustc_feature::Features>,\n \n-    lint_store: OnceCell<Lrc<dyn SessionLintStore>>,\n-\n     incr_comp_session: OneThread<RefCell<IncrCompSession>>,\n     /// Used for incremental compilation tests. Will only be populated if\n     /// `-Zquery-dep-graph` is specified.\n@@ -591,13 +584,6 @@ impl Session {\n         }\n     }\n \n-    pub fn init_lint_store(&self, lint_store: Lrc<dyn SessionLintStore>) {\n-        self.lint_store\n-            .set(lint_store)\n-            .map_err(|_| ())\n-            .expect(\"`lint_store` was initialized twice\");\n-    }\n-\n     /// Calculates the flavor of LTO to use for this compilation.\n     pub fn lto(&self) -> config::Lto {\n         // If our target has codegen requirements ignore the command line\n@@ -1315,7 +1301,6 @@ pub fn build_session(\n         crate_types: OnceCell::new(),\n         stable_crate_id: OnceCell::new(),\n         features: OnceCell::new(),\n-        lint_store: OnceCell::new(),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,\n         prof,"}]}