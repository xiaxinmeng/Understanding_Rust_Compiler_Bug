{"sha": "360f2f036d14889f4de37a8b4b6aad0d09772aad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MGYyZjAzNmQxNDg4OWY0ZGUzN2E4YjRiNmFhZDBkMDk3NzJhYWQ=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-03-31T21:19:02Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-04-01T09:56:23Z"}, "message": "Inline most of the code paths for conversions with boxed slices\n\nThis helps with the specific problem described in #49541, obviously without\nmaking any large change to how inlining works in the general case.\n\nEverything involved in the conversions is made `#[inline]`, except for the\n`<Vec<T>>::into_boxed_slice` entry point which is made `#[inline(always)]`\nafter checking that duplicating the function mentioned in the issue prevented\nits inlining if I only annotate it with `#[inline]`.\n\nFor the record, that function was:\n\n```rust\npub fn foo() -> Box<[u8]> {\n    vec![0].into_boxed_slice()\n}\n```\n\nTo help the inliner's job, we also hoist a `self.capacity() != self.len` check\nin `<Vec<T>>::shrink_to_fit` and mark it as `#[inline]` too.", "tree": {"sha": "1635a617fe742c3d3c08ed120acb15034a807a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1635a617fe742c3d3c08ed120acb15034a807a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360f2f036d14889f4de37a8b4b6aad0d09772aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360f2f036d14889f4de37a8b4b6aad0d09772aad", "html_url": "https://github.com/rust-lang/rust/commit/360f2f036d14889f4de37a8b4b6aad0d09772aad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360f2f036d14889f4de37a8b4b6aad0d09772aad/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd24c8ed4ac3e48068408fa21d491d7ffe45295", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd24c8ed4ac3e48068408fa21d491d7ffe45295", "html_url": "https://github.com/rust-lang/rust/commit/8dd24c8ed4ac3e48068408fa21d491d7ffe45295"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "2fc60a799f3bb1254196e922fa0b6e315d2de543", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=360f2f036d14889f4de37a8b4b6aad0d09772aad", "patch": "@@ -577,13 +577,15 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n+    #[inline]\n     fn from(s: &'a str) -> Box<str> {\n         unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n     }\n }\n \n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n+    #[inline]\n     fn from(s: Box<str>) -> Self {\n         unsafe { Box::from_raw(Box::into_raw(s) as *mut [u8]) }\n     }"}, {"sha": "6f05c52eb579948925fac117c6c86748c605164d", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=360f2f036d14889f4de37a8b4b6aad0d09772aad", "patch": "@@ -1811,6 +1811,7 @@ impl str {\n     /// assert_eq!(*boxed_bytes, *s.as_bytes());\n     /// ```\n     #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+    #[inline]\n     pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {\n         self.into()\n     }\n@@ -2049,6 +2050,7 @@ impl str {\n     /// assert_eq!(boxed_str.into_string(), string);\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[inline]\n     pub fn into_string(self: Box<str>) -> String {\n         let slice = Box::<[u8]>::from(self);\n         unsafe { String::from_utf8_unchecked(slice.into_vec()) }\n@@ -2307,6 +2309,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     Box::from_raw(Box::into_raw(v) as *mut str)\n }"}, {"sha": "95d5b30b67daa42af0e03f96e32bbbbbc0ba50cd", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=360f2f036d14889f4de37a8b4b6aad0d09772aad", "patch": "@@ -1587,6 +1587,7 @@ impl String {\n     /// let b = s.into_boxed_str();\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[inline]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n         unsafe { from_boxed_utf8_unchecked(slice) }"}, {"sha": "e3c036e6aacaf6be877e4e9e5ace7eece8392d9d", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360f2f036d14889f4de37a8b4b6aad0d09772aad/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=360f2f036d14889f4de37a8b4b6aad0d09772aad", "patch": "@@ -582,8 +582,11 @@ impl<T> Vec<T> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn shrink_to_fit(&mut self) {\n-        self.buf.shrink_to_fit(self.len);\n+        if self.capacity() != self.len {\n+            self.buf.shrink_to_fit(self.len);\n+        }\n     }\n \n     /// Shrinks the capacity of the vector with a lower bound.\n@@ -636,6 +639,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(slice.into_vec().capacity(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline(always)]\n     pub fn into_boxed_slice(mut self) -> Box<[T]> {\n         unsafe {\n             self.shrink_to_fit();"}]}