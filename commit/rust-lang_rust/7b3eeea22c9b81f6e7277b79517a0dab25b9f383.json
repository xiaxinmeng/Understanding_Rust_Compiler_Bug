{"sha": "7b3eeea22c9b81f6e7277b79517a0dab25b9f383", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2VlZWEyMmM5YjgxZjZlNzI3N2I3OTUxN2EwZGFiMjViOWYzODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-21T20:37:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-21T20:37:24Z"}, "message": "Auto merge of #37677 - jsen-:master, r=alexcrichton\n\nlibstd: support creation of anonymous pipe on WinXP/2K3\n\n`PIPE_REJECT_REMOTE_CLIENTS` flag is not supported on Windows < VISTA, and every invocation of `anon_pipe` including attempts to pipe `std::process::Child`'s stdio fails.\nThis PR should work around this issue by performing a runtime check of windows version and conditionally omitting this flag on \"XP and friends\".\n\nGetting the version should be probably moved out of the function `anon_pipe` itself (the OS version does not often change during runtime :) ), but:\n - I didn't find any precedent for this and assuming there's not much overhead (I hope windows does not perform any heuristics to find out it's own version, just fills couple of fields in the struct).\n - the code path is not especially performance sensitive anyway.", "tree": {"sha": "bcf91d7660f3a839d4578762c19d7b895c3c2d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf91d7660f3a839d4578762c19d7b895c3c2d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3eeea22c9b81f6e7277b79517a0dab25b9f383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3eeea22c9b81f6e7277b79517a0dab25b9f383", "html_url": "https://github.com/rust-lang/rust/commit/7b3eeea22c9b81f6e7277b79517a0dab25b9f383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3eeea22c9b81f6e7277b79517a0dab25b9f383/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a95e34fe32ca86982607a85e9c5714eb6262d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a95e34fe32ca86982607a85e9c5714eb6262d9", "html_url": "https://github.com/rust-lang/rust/commit/80a95e34fe32ca86982607a85e9c5714eb6262d9"}, {"sha": "fc5a361c84b54315a06cdbcc003e7b748ec6ac4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5a361c84b54315a06cdbcc003e7b748ec6ac4c", "html_url": "https://github.com/rust-lang/rust/commit/fc5a361c84b54315a06cdbcc003e7b748ec6ac4c"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "dfc998b88e37f69ec8ff94bcfc3a3d0a5d4e6bb6", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b3eeea22c9b81f6e7277b79517a0dab25b9f383/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3eeea22c9b81f6e7277b79517a0dab25b9f383/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=7b3eeea22c9b81f6e7277b79517a0dab25b9f383", "patch": "@@ -182,6 +182,7 @@ pub const ERROR_INVALID_HANDLE: DWORD = 6;\n pub const ERROR_NO_MORE_FILES: DWORD = 18;\n pub const ERROR_HANDLE_EOF: DWORD = 38;\n pub const ERROR_FILE_EXISTS: DWORD = 80;\n+pub const ERROR_INVALID_PARAMETER: DWORD = 87;\n pub const ERROR_BROKEN_PIPE: DWORD = 109;\n pub const ERROR_CALL_NOT_IMPLEMENTED: DWORD = 120;\n pub const ERROR_INSUFFICIENT_BUFFER: DWORD = 122;"}, {"sha": "1eb1730547642f18eb3fc162d192f977089c84b0", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7b3eeea22c9b81f6e7277b79517a0dab25b9f383/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3eeea22c9b81f6e7277b79517a0dab25b9f383/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=7b3eeea22c9b81f6e7277b79517a0dab25b9f383", "patch": "@@ -43,6 +43,7 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n         let reader;\n         let mut name;\n         let mut tries = 0;\n+        let mut reject_remote_clients_flag = c::PIPE_REJECT_REMOTE_CLIENTS;\n         loop {\n             tries += 1;\n             let key: u64 = rand::thread_rng().gen();\n@@ -56,12 +57,12 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n \n             let handle = c::CreateNamedPipeW(wide_name.as_ptr(),\n                                              c::PIPE_ACCESS_INBOUND |\n-                                              c::FILE_FLAG_FIRST_PIPE_INSTANCE |\n-                                              c::FILE_FLAG_OVERLAPPED,\n+                                             c::FILE_FLAG_FIRST_PIPE_INSTANCE |\n+                                             c::FILE_FLAG_OVERLAPPED,\n                                              c::PIPE_TYPE_BYTE |\n-                                              c::PIPE_READMODE_BYTE |\n-                                              c::PIPE_WAIT |\n-                                              c::PIPE_REJECT_REMOTE_CLIENTS,\n+                                             c::PIPE_READMODE_BYTE |\n+                                             c::PIPE_WAIT |\n+                                             reject_remote_clients_flag,\n                                              1,\n                                              4096,\n                                              4096,\n@@ -76,11 +77,27 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n             //\n             // Don't try again too much though as this could also perhaps be a\n             // legit error.\n+            // If ERROR_INVALID_PARAMETER is returned, this probably means we're\n+            // running on pre-Vista version where PIPE_REJECT_REMOTE_CLIENTS is\n+            // not supported, so we continue retrying without it. This implies\n+            // reduced security on Windows versions older than Vista by allowing\n+            // connections to this pipe from remote machines.\n+            // Proper fix would increase the number of FFI imports and introduce\n+            // significant amount of Windows XP specific code with no clean\n+            // testing strategy\n+            // for more info see https://github.com/rust-lang/rust/pull/37677\n             if handle == c::INVALID_HANDLE_VALUE {\n                 let err = io::Error::last_os_error();\n-                if tries < 10 &&\n-                   err.raw_os_error() == Some(c::ERROR_ACCESS_DENIED as i32) {\n-                    continue\n+                let raw_os_err = err.raw_os_error();\n+                if tries < 10 {\n+                    if raw_os_err == Some(c::ERROR_ACCESS_DENIED as i32) {\n+                        continue\n+                    } else if reject_remote_clients_flag != 0 &&\n+                        raw_os_err == Some(c::ERROR_INVALID_PARAMETER as i32) {\n+                        reject_remote_clients_flag = 0;\n+                        tries -= 1;\n+                        continue\n+                    }\n                 }\n                 return Err(err)\n             }"}]}