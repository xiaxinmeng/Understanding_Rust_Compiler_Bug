{"sha": "4ab22355d4d186d5eec52be0f980034685411d04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYjIyMzU1ZDRkMTg2ZDVlZWM1MmJlMGY5ODAwMzQ2ODU0MTFkMDQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-12T20:01:26Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-17T19:26:30Z"}, "message": "libcore: add borrow module\n\nFollowing [the collections reform\nRFC](https://github.com/rust-lang/rfcs/pull/235),\nthis commit adds a new `borrow` module to libcore.\n\nThe module contains traits for borrowing data (`BorrowFrom` and\n`BorrowFromMut`),\ngeneralized cloning (`ToOwned`), and a clone-on-write smartpointer (`Cow`).", "tree": {"sha": "8641ec385edff0f8725f8a5d684cf8f5183448aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8641ec385edff0f8725f8a5d684cf8f5183448aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab22355d4d186d5eec52be0f980034685411d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab22355d4d186d5eec52be0f980034685411d04", "html_url": "https://github.com/rust-lang/rust/commit/4ab22355d4d186d5eec52be0f980034685411d04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab22355d4d186d5eec52be0f980034685411d04/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09279395b6ca40f1398277971586197f949738a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a", "html_url": "https://github.com/rust-lang/rust/commit/f09279395b6ca40f1398277971586197f949738a"}], "stats": {"total": 146, "additions": 145, "deletions": 1}, "files": [{"sha": "132a07af6b67b5d758095e5edf36866387277525", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=4ab22355d4d186d5eec52be0f980034685411d04", "patch": "@@ -89,6 +89,7 @@\n \n use self::Direction::*;\n use alloc::boxed::Box;\n+use core::borrow::{BorrowFrom, BorrowFromMut};\n use core::cmp;\n use core::kinds::Sized;\n use core::mem::size_of;\n@@ -647,6 +648,16 @@ impl<T> SliceAllocPrelude<T> for [T] {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n+impl<T> BorrowFrom<Vec<T>> for [T] {\n+    fn borrow_from(owned: &Vec<T>) -> &[T] { owned[] }\n+}\n+\n+#[unstable = \"trait is unstable\"]\n+impl<T> BorrowFromMut<Vec<T>> for [T] {\n+    fn borrow_from_mut(owned: &mut Vec<T>) -> &mut [T] { owned[mut] }\n+}\n+\n /// Unsafe operations\n pub mod raw {\n     pub use core::slice::raw::{buf_as_slice, mut_buf_as_slice};"}, {"sha": "9ae009d8f6a59a198a91ee81248f442050ef4fee", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=4ab22355d4d186d5eec52be0f980034685411d04", "patch": "@@ -54,7 +54,7 @@\n pub use self::MaybeOwned::*;\n use self::RecompositionState::*;\n use self::DecompositionType::*;\n-\n+use core::borrow::BorrowFrom;\n use core::default::Default;\n use core::fmt;\n use core::cmp;\n@@ -604,6 +604,11 @@ impl<'a> fmt::Show for MaybeOwned<'a> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n+impl BorrowFrom<String> for str {\n+    fn borrow_from(owned: &String) -> &str { owned[] }\n+}\n+\n /// Unsafe string operations.\n pub mod raw {\n     pub use core::str::raw::{from_utf8, c_str_to_static_slice, slice_bytes};"}, {"sha": "34cf55334aef3d3aeae34ea4a092115e3096390c", "filename": "src/libcore/borrow.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=4ab22355d4d186d5eec52be0f980034685411d04", "patch": "@@ -0,0 +1,126 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A module for working with borrowed data.\n+//!\n+//! # The `BorrowFrom` traits\n+//!\n+//! In general, there may be several ways to \"borrow\" a piece of data.  The\n+//! typical ways of borrowing a type `T` are `&T` (a shared borrow) and `&mut T`\n+//! (a mutable borrow). But types like `Vec<T>` provide additional kinds of\n+//! borrows: the borrowed slices `&[T]` and `&mut [T]`.\n+//!\n+//! When writing generic code, it is often desirable to abstract over all ways\n+//! of borrowing data from a given type. That is the role of the `BorrowFrom`\n+//! trait: if `T: BorrowFrom<U>`, then `&T` can be borrowed from `&U`.  A given\n+//! type can be borrowed as multiple different types. In particular, `Vec<T>:\n+//! BorrowFrom<Vec<T>>` and `[T]: BorrowFrom<Vec<T>>`.\n+//!\n+//! # The `ToOwned` trait\n+//!\n+//! Some types make it possible to go from borrowed to owned, usually by\n+//! implementing the `Clone` trait. But `Clone` works only for going from `&T`\n+//! to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data\n+//! from any borrow of a given type.\n+//!\n+//! # The `Cow` (clone-on-write) type\n+//!\n+//! The type `Cow` is a smart pointer providing clone-on-write functionality: it\n+//! can enclose and provide immutable access to borrowed data, and clone the\n+//! data lazily when mutation or ownership is required. The type is designed to\n+//! work with general borrowed data via the `BorrowFrom` trait.\n+//!\n+//! `Cow` implements both `Deref` and `DerefMut`, which means that you can call\n+//! methods directly on the data it encloses. The first time a mutable reference\n+//! is required, the data will be cloned (via `to_owned`) if it is not\n+//! already owned.\n+\n+#![unstable = \"recently added as part of collections reform\"]\n+\n+use clone::Clone;\n+use kinds::Sized;\n+use ops::Deref;\n+\n+/// A trait for borrowing data.\n+pub trait BorrowFrom<Sized? Owned> for Sized? {\n+    /// Immutably borrow from an owned value.\n+    fn borrow_from(owned: &Owned) -> &Self;\n+}\n+\n+/// A trait for mutably borrowing data.\n+pub trait BorrowFromMut<Sized? Owned> for Sized? : BorrowFrom<Owned> {\n+    /// Mutably borrow from an owned value.\n+    fn borrow_from_mut(owned: &mut Owned) -> &mut Self;\n+}\n+\n+impl<Sized? T> BorrowFrom<T> for T {\n+    fn borrow_from(owned: &T) -> &T { owned }\n+}\n+\n+impl<Sized? T> BorrowFromMut<T> for T {\n+    fn borrow_from_mut(owned: &mut T) -> &mut T { owned }\n+}\n+\n+impl BorrowFrom<&'static str> for str {\n+    fn borrow_from<'a>(owned: &'a &'static str) -> &'a str { &**owned }\n+}\n+\n+/// A generalization of Clone to borrowed data.\n+pub trait ToOwned<Owned> for Sized?: BorrowFrom<Owned> {\n+    /// Create owned data from borrowed data, usually by copying.\n+    fn to_owned(&self) -> Owned;\n+}\n+\n+impl<T> ToOwned<T> for T where T: Clone {\n+    fn to_owned(&self) -> T { self.clone() }\n+}\n+\n+/// A clone-on-write smart pointer.\n+pub enum Cow<'a, T, B: 'a> where B: ToOwned<T> {\n+    /// Borrowed data.\n+    Borrowed(&'a B),\n+\n+    /// Owned data.\n+    Owned(T)\n+}\n+\n+impl<'a, T, B> Cow<'a, T, B> where B: ToOwned<T> {\n+    /// Acquire a mutable reference to the owned form of the data.\n+    ///\n+    /// Copies the data if it is not already owned.\n+    pub fn to_mut(&mut self) -> &mut T {\n+        match *self {\n+            Borrowed(borrowed) => {\n+                *self = Owned(borrowed.to_owned());\n+                self.to_mut()\n+            }\n+            Owned(ref mut owned) => owned\n+        }\n+    }\n+\n+    /// Extract the owned data.\n+    ///\n+    /// Copies the data if it is not already owned.\n+    pub fn into_owned(self) -> T {\n+        match self {\n+            Borrowed(borrowed) => borrowed.to_owned(),\n+            Owned(owned) => owned\n+        }\n+    }\n+}\n+\n+impl<'a, T, B> Deref<B> for Cow<'a, T, B> where B: ToOwned<T>  {\n+    fn deref(&self) -> &B {\n+        match *self {\n+            Borrowed(borrowed) => borrowed,\n+            Owned(ref owned) => BorrowFrom::borrow_from(owned)\n+        }\n+    }\n+}"}, {"sha": "5e3c74477d15c6ba723f283a0f4b1b7defe92601", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=4ab22355d4d186d5eec52be0f980034685411d04", "patch": "@@ -108,6 +108,7 @@ pub mod default;\n pub mod any;\n pub mod atomic;\n pub mod bool;\n+pub mod borrow;\n pub mod cell;\n pub mod char;\n pub mod panicking;"}, {"sha": "7f2a4c7e36569f4881c56d1e680db9ded0c5c9f0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab22355d4d186d5eec52be0f980034685411d04/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4ab22355d4d186d5eec52be0f980034685411d04", "patch": "@@ -141,6 +141,7 @@ extern crate rustrt;\n \n pub use core::any;\n pub use core::bool;\n+pub use core::borrow;\n pub use core::cell;\n pub use core::clone;\n #[cfg(not(test))] pub use core::cmp;"}]}