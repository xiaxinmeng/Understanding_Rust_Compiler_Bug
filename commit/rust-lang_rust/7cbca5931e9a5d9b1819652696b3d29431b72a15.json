{"sha": "7cbca5931e9a5d9b1819652696b3d29431b72a15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYmNhNTkzMWU5YTVkOWIxODE5NjUyNjk2YjNkMjk0MzFiNzJhMTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-19T00:31:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-19T00:31:42Z"}, "message": "Rollup merge of #60934 - fabric-and-ink:defindex_with_newtype_macro, r=petrochenkov\n\nDeclare DefIndex with the newtype_index macro\n\nSee #60666", "tree": {"sha": "e72c811453cd503ce0a2af57bedb3508508571c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e72c811453cd503ce0a2af57bedb3508508571c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cbca5931e9a5d9b1819652696b3d29431b72a15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4KPuCRBK7hj4Ov3rIwAAdHIIABd2mxqnSoO4sljQxrGTUCUw\nDiWUrBayFukAVlXPlh9SzxecF8t6NvGbqG0idSUH2u64ebkzKtO7xhu46LHX0B54\nmmZQoXwqomgjzrGnKRIC92rlKQqEKUAalQLeLcc/58zdo4fZ8yX2dJxN5A3Z+d/6\nJ40XGGazKQurHbVTN71AJ4BrU2E8ciaBIH+6SBz2NFmZG3Hwu+jZhya2qsHqmjUd\nMQoxFgJsmxXTKmAKpmZcpM6ChjRFkyc9ViCtNz6Oe9WP9hlNJm+7VVEEMZ+uOttj\nM6QBGrVvigMD8S7VdL+GUKWm41J//uBVnnUS5PacRDVEOyT7kY2GY2fb1OoxTkg=\n=5suc\n-----END PGP SIGNATURE-----\n", "payload": "tree e72c811453cd503ce0a2af57bedb3508508571c1\nparent de39eb81ed4d98ea75e41b96e8d3a6e96aacddc2\nparent b18de520800e2985e3313ca9ac21d5099d869428\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558225902 +0200\ncommitter GitHub <noreply@github.com> 1558225902 +0200\n\nRollup merge of #60934 - fabric-and-ink:defindex_with_newtype_macro, r=petrochenkov\n\nDeclare DefIndex with the newtype_index macro\n\nSee #60666\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbca5931e9a5d9b1819652696b3d29431b72a15", "html_url": "https://github.com/rust-lang/rust/commit/7cbca5931e9a5d9b1819652696b3d29431b72a15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cbca5931e9a5d9b1819652696b3d29431b72a15/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de39eb81ed4d98ea75e41b96e8d3a6e96aacddc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de39eb81ed4d98ea75e41b96e8d3a6e96aacddc2", "html_url": "https://github.com/rust-lang/rust/commit/de39eb81ed4d98ea75e41b96e8d3a6e96aacddc2"}, {"sha": "b18de520800e2985e3313ca9ac21d5099d869428", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18de520800e2985e3313ca9ac21d5099d869428", "html_url": "https://github.com/rust-lang/rust/commit/b18de520800e2985e3313ca9ac21d5099d869428"}], "stats": {"total": 94, "additions": 36, "deletions": 58}, "files": [{"sha": "0c4f5fb3fc167bd701087e504c7fa5feab06c876", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -96,34 +96,20 @@ impl fmt::Display for CrateNum {\n impl serialize::UseSpecializedEncodable for CrateNum {}\n impl serialize::UseSpecializedDecodable for CrateNum {}\n \n-/// A DefIndex is an index into the hir-map for a crate, identifying a\n-/// particular definition. It should really be considered an interned\n-/// shorthand for a particular DefPath.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n-pub struct DefIndex(u32);\n-\n-/// The crate root is always assigned index 0 by the AST Map code,\n-/// thanks to `NodeCollector::new`.\n-pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n+newtype_index! {\n+    /// A DefIndex is an index into the hir-map for a crate, identifying a\n+    /// particular definition. It should really be considered an interned\n+    /// shorthand for a particular DefPath.\n+    pub struct DefIndex {\n+        DEBUG_FORMAT = \"DefIndex({})\",\n \n-impl fmt::Debug for DefIndex {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefIndex({})\", self.as_array_index())\n+        /// The crate root is always assigned index 0 by the AST Map code,\n+        /// thanks to `NodeCollector::new`.\n+        const CRATE_DEF_INDEX = 0,\n     }\n }\n \n impl DefIndex {\n-    /// Converts this DefIndex into a zero-based array index.\n-    #[inline]\n-    pub fn as_array_index(&self) -> usize {\n-        self.0 as usize\n-    }\n-\n-    #[inline]\n-    pub fn from_array_index(i: usize) -> DefIndex {\n-        DefIndex(i as u32)\n-    }\n-\n     // Proc macros from a proc-macro crate have a kind of virtual DefIndex. This\n     // function maps the index of the macro within the crate (which is also the\n     // index of the macro in the CrateMetadata::proc_macros array) to the\n@@ -132,7 +118,7 @@ impl DefIndex {\n         // DefIndex for proc macros start from FIRST_FREE_DEF_INDEX,\n         // because the first FIRST_FREE_DEF_INDEX indexes are reserved\n         // for internal use.\n-        let def_index = DefIndex::from_array_index(\n+        let def_index = DefIndex::from(\n             proc_macro_index.checked_add(FIRST_FREE_DEF_INDEX)\n                 .expect(\"integer overflow adding `proc_macro_index`\"));\n         assert!(def_index != CRATE_DEF_INDEX);\n@@ -141,19 +127,11 @@ impl DefIndex {\n \n     // This function is the reverse of from_proc_macro_index() above.\n     pub fn to_proc_macro_index(self: DefIndex) -> usize {\n-        self.as_array_index().checked_sub(FIRST_FREE_DEF_INDEX)\n+        self.index().checked_sub(FIRST_FREE_DEF_INDEX)\n             .unwrap_or_else(|| {\n                 bug!(\"using local index {:?} as proc-macro index\", self)\n             })\n     }\n-\n-    pub fn from_raw_u32(x: u32) -> DefIndex {\n-        DefIndex(x)\n-    }\n-\n-    pub fn as_raw_u32(&self) -> u32 {\n-        self.0\n-    }\n }\n \n impl serialize::UseSpecializedEncodable for DefIndex {}\n@@ -169,7 +147,7 @@ pub struct DefId {\n \n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefId({}:{}\", self.krate, self.index.as_array_index())?;\n+        write!(f, \"DefId({}:{}\", self.krate, self.index.index())?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {"}, {"sha": "eeba628b3bf2168ad943ac41fe4cca076ed5bf72", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -226,7 +226,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n         debug!(\"hir_map: {:?} => {:?}\", id, entry);\n-        let local_map = &mut self.map[id.owner.as_array_index()];\n+        let local_map = &mut self.map[id.owner.index()];\n         let i = id.local_id.as_u32() as usize;\n         if local_map.is_none() {\n             *local_map = Some(IndexVec::with_capacity(i + 1));"}, {"sha": "1cc9a2c0e8a1b9d875b7f9a31520c5644f727e76", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -38,7 +38,7 @@ impl DefPathTable {\n                 def_path_hash: DefPathHash)\n                 -> DefIndex {\n         let index = {\n-            let index = DefIndex::from_array_index(self.index_to_key.len());\n+            let index = DefIndex::from(self.index_to_key.len());\n             debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n             self.index_to_key.push(key);\n             index\n@@ -49,17 +49,17 @@ impl DefPathTable {\n     }\n \n     pub fn next_id(&self) -> DefIndex {\n-        DefIndex::from_array_index(self.index_to_key.len())\n+        DefIndex::from(self.index_to_key.len())\n     }\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.as_array_index()].clone()\n+        self.index_to_key[index.index()].clone()\n     }\n \n     #[inline(always)]\n     pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n-        let ret = self.def_path_hashes[index.as_array_index()];\n+        let ret = self.def_path_hashes[index.index()];\n         debug!(\"def_path_hash({:?}) = {:?}\", index, ret);\n         return ret\n     }\n@@ -74,7 +74,7 @@ impl DefPathTable {\n                 .map(|(index, &hash)| {\n                     let def_id = DefId {\n                         krate: cnum,\n-                        index: DefIndex::from_array_index(index),\n+                        index: DefIndex::from(index),\n                     };\n                     (hash, def_id)\n                 })\n@@ -387,7 +387,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n-            let node_id = self.def_index_to_node[def_id.index.as_array_index()];\n+            let node_id = self.def_index_to_node[def_id.index.index()];\n             if node_id != ast::DUMMY_NODE_ID {\n                 return Some(node_id);\n             }\n@@ -417,7 +417,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> hir::HirId {\n-        let node_id = self.def_index_to_node[def_index.as_array_index()];\n+        let node_id = self.def_index_to_node[def_index.index()];\n         self.node_to_hir_id[node_id]\n     }\n \n@@ -508,7 +508,7 @@ impl Definitions {\n \n         // Create the definition.\n         let index = self.table.allocate(key, def_path_hash);\n-        assert_eq!(index.as_array_index(), self.def_index_to_node.len());\n+        assert_eq!(index.index(), self.def_index_to_node.len());\n         self.def_index_to_node.push(node_id);\n \n         // Some things for which we allocate DefIndices don't correspond to\n@@ -653,7 +653,7 @@ macro_rules! define_global_metadata_kind {\n                                           .position(|k| *k == def_key)\n                                           .unwrap();\n \n-                DefIndex::from_array_index(index)\n+                DefIndex::from(index)\n             }\n \n             fn name(&self) -> Symbol {"}, {"sha": "4b94f772554e76910aa228856853fe0ad3e65cb0", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -189,7 +189,7 @@ pub struct Map<'hir> {\n impl<'hir> Map<'hir> {\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n-        let local_map = self.map.get(id.owner.as_array_index())?;\n+        let local_map = self.map.get(id.owner.index())?;\n         local_map.as_ref()?.get(id.local_id)?.as_ref()\n     }\n \n@@ -1023,7 +1023,7 @@ impl<'hir> Map<'hir> {\n             local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n                 // Reconstruct the HirId based on the 3 indices we used to find it\n                 HirId {\n-                    owner: DefIndex::from_array_index(array_index),\n+                    owner: DefIndex::from(array_index),\n                     local_id: i,\n                 }\n             }))"}, {"sha": "1878afd581dd48746bc6fd4a2512f39ba2848d00", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -56,7 +56,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n     }\n \n     let requested_node = env::var(\"RUST_REGION_GRAPH_NODE\")\n-        .ok().and_then(|s| s.parse().map(DefIndex::from_raw_u32).ok());\n+        .ok().and_then(|s| s.parse().map(DefIndex::from_u32).ok());\n \n     if requested_node.is_some() && requested_node != Some(context.index) {\n         return;\n@@ -90,7 +90,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n             let mut new_str = String::new();\n             for c in output_template.chars() {\n                 if c == '%' {\n-                    new_str.push_str(&context.index.as_raw_u32().to_string());\n+                    new_str.push_str(&context.index.as_u32().to_string());\n                 } else {\n                     new_str.push(c);\n                 }"}, {"sha": "fdd1a821e31b56964bae3db7af15581bc05fd1a7", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -298,7 +298,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n     // negated `CrateNum` (so remote definitions are visited first) and then\n     // by a flattened version of the `DefIndex`.\n     trait_impls.sort_unstable_by_key(|def_id| {\n-        (-(def_id.krate.as_u32() as i64), def_id.index.as_array_index())\n+        (-(def_id.krate.as_u32() as i64), def_id.index.index())\n     });\n \n     for impl_def_id in trait_impls {"}, {"sha": "812321ff5e6c36f8fd16f772752f03b6d25eb5c2", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -648,7 +648,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     // have to be user friendly.\n     let name = format!(\n         \"hir_id_{}_{}\",\n-        hir_id.owner.as_array_index(),\n+        hir_id.owner.index(),\n         hir_id.local_id.index(),\n     );\n     let lcfg = LabelledCFG {"}, {"sha": "d882fe6f27ecc7a8f115306a43066b0a428cbb73", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefId> for DecodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<DefIndex, Self::Error> {\n-        Ok(DefIndex::from_raw_u32(self.read_u32()?))\n+        Ok(DefIndex::from_u32(self.read_u32()?))\n     }\n }\n "}, {"sha": "939aadcc9ec9bfeefd0b44d1fca11df5060d0298", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'tcx> SpecializedEncoder<DefId> for EncodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedEncoder<DefIndex> for EncodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_encode(&mut self, def_index: &DefIndex) -> Result<(), Self::Error> {\n-        self.emit_u32(def_index.as_raw_u32())\n+        self.emit_u32(def_index.as_u32())\n     }\n }\n "}, {"sha": "934e871559c79939010ffb30377007afc5b96ba6", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -93,7 +93,7 @@ impl Index {\n     pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'_>>) {\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n-        let array_index = item.as_array_index();\n+        let array_index = item.index();\n \n         let positions = &mut self.positions;\n         assert!(u32::read_from_bytes_at(positions, array_index) == u32::MAX,\n@@ -126,7 +126,7 @@ impl<'tcx> LazySeq<Index> {\n                def_index,\n                self.len);\n \n-        let position = u32::read_from_bytes_at(bytes, 1 + def_index.as_array_index());\n+        let position = u32::read_from_bytes_at(bytes, 1 + def_index.index());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None"}, {"sha": "fc4c6b3fd3f244afc5a41d37239e39c31ba8f987", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -27,7 +27,7 @@ pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n     format!(\n         \"{}_{}\",\n         def_id.krate.index(),\n-        def_id.index.as_array_index(),\n+        def_id.index.index(),\n     )\n }\n "}, {"sha": "e34a33ef8fad9b2a7476e2d8a096e11b5e610ceb", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -172,7 +172,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>) {\n         let def_id = DefId {\n             krate: CrateNum::BuiltinMacros,\n-            index: DefIndex::from_array_index(self.macro_map.len()),\n+            index: DefIndex::from(self.macro_map.len()),\n         };\n         let kind = ext.kind();\n         self.macro_map.insert(def_id, ext);"}, {"sha": "d34f5633946bfa281773da81d21cab2b44013bcc", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -1170,7 +1170,7 @@ fn generated_code(span: Span) -> bool {\n fn id_from_def_id(id: DefId) -> rls_data::Id {\n     rls_data::Id {\n         krate: id.krate.as_u32(),\n-        index: id.index.as_raw_u32(),\n+        index: id.index.as_u32(),\n     }\n }\n "}, {"sha": "2a3bc5e99617f468375a834110a7e7cf45e431ed", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbca5931e9a5d9b1819652696b3d29431b72a15/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7cbca5931e9a5d9b1819652696b3d29431b72a15", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> DocContext<'tcx> {\n             crate_num,\n             DefId {\n                 krate: crate_num,\n-                index: DefIndex::from_array_index(def_id.index.as_array_index() + 1),\n+                index: DefIndex::from(def_id.index.index() + 1),\n             },\n         );\n "}]}