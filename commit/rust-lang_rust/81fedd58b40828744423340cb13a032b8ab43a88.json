{"sha": "81fedd58b40828744423340cb13a032b8ab43a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZmVkZDU4YjQwODI4NzQ0NDIzMzQwY2IxM2EwMzJiOGFiNDNhODg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-21T18:32:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-21T18:32:34Z"}, "message": "rename `pat_ty` to `pat_ty_adjusted` for clarity", "tree": {"sha": "437fad6da1097ec927f4bcc8c338d0319a45762f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/437fad6da1097ec927f4bcc8c338d0319a45762f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81fedd58b40828744423340cb13a032b8ab43a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81fedd58b40828744423340cb13a032b8ab43a88", "html_url": "https://github.com/rust-lang/rust/commit/81fedd58b40828744423340cb13a032b8ab43a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81fedd58b40828744423340cb13a032b8ab43a88/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff1abadd7a4ec861ca4b9c77035379578ef033d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff1abadd7a4ec861ca4b9c77035379578ef033d", "html_url": "https://github.com/rust-lang/rust/commit/fff1abadd7a4ec861ca4b9c77035379578ef033d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2d3140a943b1c16bf8636eb9333559457afa4325", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81fedd58b40828744423340cb13a032b8ab43a88/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81fedd58b40828744423340cb13a032b8ab43a88/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=81fedd58b40828744423340cb13a032b8ab43a88", "patch": "@@ -517,7 +517,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     ///   implicit deref patterns attached (e.g., it is really\n     ///   `&Some(x)`). In that case, we return the \"outermost\" type\n     ///   (e.g., `&Option<T>).\n-    fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n+    fn pat_ty_adjusted(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n         // Check for implicit `&` types wrapping the pattern; note\n         // that these are never attached to binding patterns, so\n         // actually this is somewhat \"disjoint\" from the code below\n@@ -1300,7 +1300,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             };\n \n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n-                let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n+                let subpat_ty = self.pat_ty_adjusted(&subpat)?; // see (*2)\n                 let interior = InteriorField(FieldIndex(i, Name::intern(&i.to_string())));\n                 let subcmt = Rc::new(self.cat_imm_interior(pat, cmt.clone(), subpat_ty, interior));\n                 self.cat_pattern_(subcmt, &subpat, op)?;\n@@ -1323,7 +1323,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             };\n \n             for fp in field_pats {\n-                let field_ty = self.pat_ty(&fp.node.pat)?; // see (*2)\n+                let field_ty = self.pat_ty_adjusted(&fp.node.pat)?; // see (*2)\n                 let f_index = self.tcx.field_index(fp.node.id, self.tables);\n                 let cmt_field = Rc::new(self.cat_field(pat, cmt.clone(), f_index,\n                                                        fp.node.ident, field_ty));\n@@ -1342,7 +1342,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n-                let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n+                let subpat_ty = self.pat_ty_unadjusted(&subpat)?; // see (*2)\n                 let interior = InteriorField(FieldIndex(i, Name::intern(&i.to_string())));\n                 let subcmt = Rc::new(self.cat_imm_interior(pat, cmt.clone(), subpat_ty, interior));\n                 self.cat_pattern_(subcmt, &subpat, op)?;"}]}