{"sha": "3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMjNiOTg2NGMwN2U0NzI0N2M5M2Q2OWU3ZWQ4MTk3YzRjYzliMzc=", "commit": {"author": {"name": "John VanEnk", "email": "vanenkj@gmail.com", "date": "2020-01-22T06:26:13Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T04:50:59Z"}, "message": "Two test cases where Rust calls C using enums by value\n\nOne calls into C functions passing non-c-like enumerations by\nvalue. The other calls into C expecting non-C-like enumerations as\nreturns.\n\nThese test cases are based on the tests provided by @bitwalker on\nissue #68190. The original tests were provided at:\nhttps://github.com/bitwalker/rust_non_c_like_enums_issue/tree/2688d5c672bd4e289085fcdf1c6110e99e7e8ab1", "tree": {"sha": "04776927b897ac9eb3e2a23ba58f288c398dd12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04776927b897ac9eb3e2a23ba58f288c398dd12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "html_url": "https://github.com/rust-lang/rust/commit/3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/comments", "author": {"login": "sw17ch", "id": 95705, "node_id": "MDQ6VXNlcjk1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/95705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sw17ch", "html_url": "https://github.com/sw17ch", "followers_url": "https://api.github.com/users/sw17ch/followers", "following_url": "https://api.github.com/users/sw17ch/following{/other_user}", "gists_url": "https://api.github.com/users/sw17ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/sw17ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sw17ch/subscriptions", "organizations_url": "https://api.github.com/users/sw17ch/orgs", "repos_url": "https://api.github.com/users/sw17ch/repos", "events_url": "https://api.github.com/users/sw17ch/events{/privacy}", "received_events_url": "https://api.github.com/users/sw17ch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26bb0f15e7e97bc93385296c2932193fe6da6300", "url": "https://api.github.com/repos/rust-lang/rust/commits/26bb0f15e7e97bc93385296c2932193fe6da6300", "html_url": "https://github.com/rust-lang/rust/commit/26bb0f15e7e97bc93385296c2932193fe6da6300"}], "stats": {"total": 216, "additions": 216, "deletions": 0}, "files": [{"sha": "0b793b32aa1ff6c15b350092ce1ab2e36c71a562", "filename": "src/test/run-make-fulldeps/pass-non-c-like-enum-to-c/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2FMakefile?ref=3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(CC) -c test.c -o $(call STATICLIB,test) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\t$(RUSTC) nonclike.rs -L$(TMPDIR) -ltest\n+\t$(call RUN,nonclike)"}, {"sha": "22d6bdcb35bdfb170672097dc468bfb48d3078aa", "filename": "src/test/run-make-fulldeps/pass-non-c-like-enum-to-c/nonclike.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Fnonclike.rs?ref=3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "patch": "@@ -0,0 +1,24 @@\n+#![crate_type = \"bin\"]\n+#![crate_name = \"nonclike\"]\n+\n+#[repr(C, u8)]\n+pub enum TT {\n+    AA(u64, u64),\n+    BB,\n+}\n+\n+#[repr(C,u8)]\n+pub enum T {\n+    A(u64),\n+    B,\n+}\n+\n+extern \"C\" {\n+    pub fn t_add(a: T, b: T) -> u64;\n+    pub fn tt_add(a: TT, b: TT) -> u64;\n+}\n+\n+fn main() {\n+    assert_eq!(33, unsafe { tt_add(TT::AA(1,2), TT::AA(10,20)) });\n+    assert_eq!(11, unsafe { t_add(T::A(1), T::A(10)) });\n+}"}, {"sha": "99511b2530f0693979ed0ddaeb0d69e500759452", "filename": "src/test/run-make-fulldeps/pass-non-c-like-enum-to-c/test.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Ftest.c?ref=3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "patch": "@@ -0,0 +1,85 @@\n+#include <stdint.h>\n+\n+/* This is the code generated by cbindgen 0.12.1 for the `enum TT`\n+ * type in nonclike.rs . */\n+enum TT_Tag {\n+  AA,\n+  BB,\n+};\n+typedef uint8_t TT_Tag;\n+\n+typedef struct {\n+  uint64_t _0;\n+  uint64_t _1;\n+} AA_Body;\n+\n+typedef struct {\n+  TT_Tag tag;\n+  union {\n+    AA_Body aa;\n+  };\n+} TT;\n+\n+/* This is the code generated by cbindgen 0.12.1 for the `enum T` type\n+ * in nonclike.rs . */\n+enum T_Tag {\n+  A,\n+  B,\n+};\n+typedef uint8_t T_Tag;\n+\n+typedef struct {\n+  uint64_t _0;\n+} A_Body;\n+\n+typedef struct {\n+  T_Tag tag;\n+  union {\n+    A_Body a;\n+  };\n+} T;\n+\n+uint64_t tt_add(TT a, TT b) {\n+  if (a.tag == AA && b.tag == AA) {\n+    return a.aa._0 + a.aa._1 + b.aa._0 + b.aa._1;\n+  } else if (a.tag == AA) {\n+    return a.aa._0 + a.aa._1;\n+  } else if (b.tag == BB) {\n+    return b.aa._0 + b.aa._1;\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+uint64_t t_add(T a, T b) {\n+  if (a.tag == A && b.tag == A) {\n+    return a.a._0 + b.a._0;\n+  } else if (a.tag == AA) {\n+    return a.a._0;\n+  } else if (b.tag == BB) {\n+    return b.a._0;\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+TT tt_new(uint64_t a, uint64_t b) {\n+  TT tt = {\n+    .tag = AA,\n+    .aa = {\n+      ._0 = a,\n+      ._1 = b,\n+    },\n+  };\n+  return tt;\n+}\n+\n+T t_new(uint64_t a) {\n+  T t = {\n+    .tag = A,\n+    .a = {\n+      ._0 = a,\n+    },\n+  };\n+  return t;\n+}"}, {"sha": "0b793b32aa1ff6c15b350092ce1ab2e36c71a562", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum-from-c/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2FMakefile?ref=3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(CC) -c test.c -o $(call STATICLIB,test) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\t$(RUSTC) nonclike.rs -L$(TMPDIR) -ltest\n+\t$(call RUN,nonclike)"}, {"sha": "1a2686cacd0b79b71592bfd181c8a96ec4de7dad", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum-from-c/nonclike.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Fnonclike.rs?ref=3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "patch": "@@ -0,0 +1,34 @@\n+#![crate_type = \"bin\"]\n+#![crate_name = \"nonclike\"]\n+\n+#[repr(C, u8)]\n+pub enum TT {\n+    AA(u64, u64),\n+    BB,\n+}\n+\n+#[repr(C,u8)]\n+pub enum T {\n+    A(u64),\n+    B,\n+}\n+\n+extern \"C\" {\n+    pub fn t_new(a: u64) -> T;\n+    pub fn tt_new(a: u64, b: u64) -> TT;\n+}\n+\n+fn main() {\n+    if let TT::AA(a, b) = unsafe { tt_new(10, 11) } {\n+        assert_eq!(10, a);\n+        assert_eq!(11, b);\n+    } else {\n+        panic!(\"expected TT::AA\");\n+    }\n+\n+    if let T::A(a) = unsafe { t_new(10) } {\n+        assert_eq!(10, a);\n+    } else {\n+        panic!(\"expected T::A\");\n+    }\n+}"}, {"sha": "3ad135bab4a1e986c33ba940427ab52548d3688b", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum-from-c/test.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/3b23b9864c07e47247c93d69e7ed8197c4cc9b37/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Ftest.c?ref=3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "patch": "@@ -0,0 +1,61 @@\n+#include <stdint.h>\n+\n+/* This is the code generated by cbindgen 0.12.1 for the `enum TT`\n+ * type in nonclike.rs . */\n+enum TT_Tag {\n+  AA,\n+  BB,\n+};\n+typedef uint8_t TT_Tag;\n+\n+typedef struct {\n+  uint64_t _0;\n+  uint64_t _1;\n+} AA_Body;\n+\n+typedef struct {\n+  TT_Tag tag;\n+  union {\n+    AA_Body aa;\n+  };\n+} TT;\n+\n+/* This is the code generated by cbindgen 0.12.1 for the `enum T` type\n+ * in nonclike.rs . */\n+enum T_Tag {\n+  A,\n+  B,\n+};\n+typedef uint8_t T_Tag;\n+\n+typedef struct {\n+  uint64_t _0;\n+} A_Body;\n+\n+typedef struct {\n+  T_Tag tag;\n+  union {\n+    A_Body a;\n+  };\n+} T;\n+\n+TT tt_new(uint64_t a, uint64_t b) {\n+  TT tt = {\n+    .tag = AA,\n+    .aa = {\n+      ._0 = a,\n+      ._1 = b,\n+    },\n+  };\n+  return tt;\n+}\n+\n+T t_new(uint64_t a) {\n+  T t = {\n+    .tag = A,\n+    .a = {\n+      ._0 = a,\n+    },\n+  };\n+  return t;\n+}"}]}