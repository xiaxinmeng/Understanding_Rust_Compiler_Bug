{"sha": "c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYmM4OGEzMjUxYmM5NjZlYjEyOGVkYmY0ODAzZTBhODhjYzA2ZmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-11T02:19:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-11T02:20:02Z"}, "message": "rustc: Add an annotation to function and type items so that the typechecker can store types with them", "tree": {"sha": "174f0f7120b059ddec4de355e2e179a8c4aab152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/174f0f7120b059ddec4de355e2e179a8c4aab152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "html_url": "https://github.com/rust-lang/rust/commit/c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e7f0b4146aaaf3aa54902de9eb2ac44ad01160", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e7f0b4146aaaf3aa54902de9eb2ac44ad01160", "html_url": "https://github.com/rust-lang/rust/commit/d1e7f0b4146aaaf3aa54902de9eb2ac44ad01160"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "f70c6ac34514b228e269d1971f7f057ceed1542b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "patch": "@@ -149,9 +149,9 @@ type _mod = rec(vec[@item] items,\n \n type item = spanned[item_];\n tag item_ {\n-    item_fn(ident, _fn, def_id);\n+    item_fn(ident, _fn, def_id, ann);\n     item_mod(ident, _mod, def_id);\n-    item_ty(ident, @ty, def_id);\n+    item_ty(ident, @ty, def_id, ann);\n }\n \n "}, {"sha": "19c72a34f8d638f6d701111cc18ceaba15e29d50", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "patch": "@@ -868,13 +868,13 @@ impure fn parse_block(parser p) -> ast.block {\n                     }\n                     case (ast.decl_item(?it)) {\n                         alt (it.node) {\n-                            case (ast.item_fn(?i, _, _)) {\n+                            case (ast.item_fn(?i, _, _, _)) {\n                                 index.insert(i, u-1u);\n                             }\n                             case (ast.item_mod(?i, _, _)) {\n                                 index.insert(i, u-1u);\n                             }\n-                            case (ast.item_ty(?i, _, _)) {\n+                            case (ast.item_ty(?i, _, _, _)) {\n                                 index.insert(i, u-1u);\n                             }\n                         }\n@@ -915,7 +915,7 @@ impure fn parse_fn(parser p) -> tup(ast.ident, @ast.item) {\n                         output = output,\n                         body = body);\n \n-    auto item = ast.item_fn(id, f, p.next_def_id());\n+    auto item = ast.item_fn(id, f, p.next_def_id(), ast.ann_none);\n     ret tup(id, @spanned(lo, body.span, item));\n }\n "}, {"sha": "6ad6554469e580042a00f68d5c7891fb246ac677", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "patch": "@@ -140,13 +140,13 @@ type ast_fold[ENV] =\n \n      // Item folds.\n      (fn(&ENV e, &span sp, ident ident,\n-         &ast._fn f, def_id id) -> @item)         fold_item_fn,\n+         &ast._fn f, def_id id, ann a) -> @item)  fold_item_fn,\n \n      (fn(&ENV e, &span sp, ident ident,\n          &ast._mod m, def_id id) -> @item)        fold_item_mod,\n \n      (fn(&ENV e, &span sp, ident ident,\n-         @ty t, def_id id) -> @item)              fold_item_ty,\n+         @ty t, def_id id, ann a) -> @item)       fold_item_ty,\n \n      // Additional nodes.\n      (fn(&ENV e, &span sp,\n@@ -481,19 +481,19 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n \n     alt (i.node) {\n \n-        case (ast.item_fn(?ident, ?ff, ?id)) {\n+        case (ast.item_fn(?ident, ?ff, ?id, ?ann)) {\n             let ast._fn ff_ = fold_fn[ENV](env_, fld, ff);\n-            ret fld.fold_item_fn(env_, i.span, ident, ff_, id);\n+            ret fld.fold_item_fn(env_, i.span, ident, ff_, id, ann);\n         }\n \n         case (ast.item_mod(?ident, ?mm, ?id)) {\n             let ast._mod mm_ = fold_mod[ENV](env_, fld, mm);\n             ret fld.fold_item_mod(env_, i.span, ident, mm_, id);\n         }\n \n-        case (ast.item_ty(?ident, ?ty, ?id)) {\n+        case (ast.item_ty(?ident, ?ty, ?id, ?ann)) {\n             let @ast.ty ty_ = fold_ty[ENV](env_, fld, ty);\n-            ret fld.fold_item_ty(env_, i.span, ident, ty_, id);\n+            ret fld.fold_item_ty(env_, i.span, ident, ty_, id, ann);\n         }\n     }\n \n@@ -709,8 +709,8 @@ fn identity_fold_stmt_expr[ENV](&ENV e, &span sp, @expr x) -> @stmt {\n // Item identities.\n \n fn identity_fold_item_fn[ENV](&ENV e, &span sp, ident i,\n-                              &ast._fn f, def_id id) -> @item {\n-    ret @respan(sp, ast.item_fn(i, f, id));\n+                              &ast._fn f, def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_fn(i, f, id, a));\n }\n \n fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n@@ -719,8 +719,8 @@ fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n }\n \n fn identity_fold_item_ty[ENV](&ENV e, &span sp, ident i,\n-                              @ty t, def_id id) -> @item {\n-    ret @respan(sp, ast.item_ty(i, t, id));\n+                              @ty t, def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_ty(i, t, id, a));\n }\n \n \n@@ -829,9 +829,9 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n                           = bind identity_fold_stmt_check_expr[ENV](_,_,_),\n          fold_stmt_expr   = bind identity_fold_stmt_expr[ENV](_,_,_),\n \n-         fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_),\n+         fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n-         fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_),\n+         fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_),"}, {"sha": "9e999bdd159b4877bec447d78d9d3c4384d8cb85", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "patch": "@@ -28,13 +28,13 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n     fn found_def_item(@ast.item i) -> option.t[def] {\n         alt (i.node) {\n-            case (ast.item_fn(_, _, ?id)) {\n+            case (ast.item_fn(_, _, ?id, _)) {\n                 ret some[def](ast.def_fn(id));\n             }\n             case (ast.item_mod(_, _, ?id)) {\n                 ret some[def](ast.def_mod(id));\n             }\n-            case (ast.item_ty(_, _, ?id)) {\n+            case (ast.item_ty(_, _, ?id, _)) {\n                 ret some[def](ast.def_ty(id));\n             }\n         }\n@@ -75,7 +75,7 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n             case (scope_item(?it)) {\n                 alt (it.node) {\n-                    case (ast.item_fn(_, ?f, _)) {\n+                    case (ast.item_fn(_, ?f, _, _)) {\n                         for (ast.arg a in f.inputs) {\n                             if (_str.eq(a.ident, i)) {\n                                 ret some[def](ast.def_arg(a.id));"}, {"sha": "bd1836b5cbe732bf28189c77c08a798c7fa6ea48", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc88a3251bc966eb128edbf4803e0a88cc06ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c3bc88a3251bc966eb128edbf4803e0a88cc06ff", "patch": "@@ -914,7 +914,7 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n             // perhaps to pick a more tasteful one.\n             auto outptr = cx.fcx.lloutptr;\n             alt (cx.fcx.tcx.items.get(f_res._2).node) {\n-                case (ast.item_fn(_, ?ff, _)) {\n+                case (ast.item_fn(_, ?ff, _, _)) {\n                     outptr = cx.build.Alloca(type_of(cx.fcx.tcx, ff.output));\n                 }\n             }\n@@ -1182,7 +1182,7 @@ impure fn trans_fn(@trans_ctxt cx, &ast._fn f, ast.def_id fid) {\n \n impure fn trans_item(@trans_ctxt cx, &ast.item item) {\n     alt (item.node) {\n-        case (ast.item_fn(?name, ?f, ?fid)) {\n+        case (ast.item_fn(?name, ?f, ?fid, _)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n             trans_fn(sub_cx, f, fid);\n         }\n@@ -1202,7 +1202,7 @@ impure fn trans_mod(@trans_ctxt cx, &ast._mod m) {\n \n fn collect_item(&@trans_ctxt cx, @ast.item i) -> @trans_ctxt {\n     alt (i.node) {\n-        case (ast.item_fn(?name, ?f, ?fid)) {\n+        case (ast.item_fn(?name, ?f, ?fid, _)) {\n             cx.items.insert(fid, i);\n             let vec[TypeRef] args =\n                 vec(T_ptr(type_of(cx, f.output)), // outptr."}]}