{"sha": "c572b793feb8ddf4900f76f4f5700e6d704826e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NzJiNzkzZmViOGRkZjQ5MDBmNzZmNGY1NzAwZTZkNzA0ODI2ZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-15T16:06:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:24:37Z"}, "message": "fix mismatched types---make check passes on x86_64!", "tree": {"sha": "af3335b6194a6000a04b9c52c3bd0ef2a20ea4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3335b6194a6000a04b9c52c3bd0ef2a20ea4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c572b793feb8ddf4900f76f4f5700e6d704826e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c572b793feb8ddf4900f76f4f5700e6d704826e9", "html_url": "https://github.com/rust-lang/rust/commit/c572b793feb8ddf4900f76f4f5700e6d704826e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c572b793feb8ddf4900f76f4f5700e6d704826e9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25bc37cef9ac13b0fc8b51bd4a285ac1f54cbc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25bc37cef9ac13b0fc8b51bd4a285ac1f54cbc1f", "html_url": "https://github.com/rust-lang/rust/commit/25bc37cef9ac13b0fc8b51bd4a285ac1f54cbc1f"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "6bc35ea171c12a4d629bf132dcb6c390cf05e86b", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c572b793feb8ddf4900f76f4f5700e6d704826e9/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c572b793feb8ddf4900f76f4f5700e6d704826e9/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=c572b793feb8ddf4900f76f4f5700e6d704826e9", "patch": "@@ -17,6 +17,7 @@ import std::comm::chan;\n import std::comm::port;\n import std::comm::send;\n import std::comm::recv;\n+import std::ctypes::{pid_t, fd_t};\n \n export handle;\n export mk;\n@@ -33,7 +34,8 @@ type handle =\n \n tag request { exec([u8], [u8], [[u8]], chan<response>); stop; }\n \n-type response = {pid: int, infd: int, outfd: int, errfd: int};\n+type response = {pid: pid_t, infd: fd_t,\n+                 outfd: fd_t, errfd: fd_t};\n \n fn mk() -> handle {\n     let setupport = port();\n@@ -71,7 +73,7 @@ fn run(handle: handle, lib_path: str, prog: str, args: [str],\n     ret {status: status, out: output, err: errput};\n }\n \n-fn writeclose(fd: int, s: option::t<str>) {\n+fn writeclose(fd: fd_t, s: option::t<str>) {\n     if option::is_some(s) {\n         let writer = io::new_writer(io::fd_buf_writer(fd, option::none));\n         writer.write_str(option::get(s));\n@@ -80,7 +82,7 @@ fn writeclose(fd: int, s: option::t<str>) {\n     os::close(fd);\n }\n \n-fn readclose(fd: int) -> str {\n+fn readclose(fd: fd_t) -> str {\n     // Copied from run::program_output\n     let file = os::fd_FILE(fd);\n     let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n@@ -137,7 +139,7 @@ fn worker(p: port<request>) {\n         os::close(pipe_in.in);\n         os::close(pipe_out.out);\n         os::close(pipe_err.out);\n-        if pid == -1 {\n+        if pid == -1i32 {\n             os::close(pipe_in.out);\n             os::close(pipe_out.in);\n             os::close(pipe_err.in);"}, {"sha": "db5d4b28b67907380d87fd4d33e9dfc60850d74a", "filename": "src/lib/generic_os.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c572b793feb8ddf4900f76f4f5700e6d704826e9/src%2Flib%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c572b793feb8ddf4900f76f4f5700e6d704826e9/src%2Flib%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgeneric_os.rs?ref=c572b793feb8ddf4900f76f4f5700e6d704826e9", "patch": "@@ -41,16 +41,14 @@ fn getenv(n: str) -> option::t<str> unsafe {\n #[cfg(target_os = \"macos\")]\n fn setenv(n: str, v: str) {\n     // FIXME (868)\n-    let _: () =\n-        str::as_buf(n,\n-                    // FIXME (868)\n-                    {|nbuf|\n-                        let _: () =\n-                            str::as_buf(v,\n-                                        {|vbuf|\n-                                            os::libc::setenv(nbuf, vbuf, 1i32);\n-                                        });\n-                    });\n+    str::as_buf(\n+        n,\n+        // FIXME (868)\n+        {|nbuf|\n+            str::as_buf(\n+                v,\n+                {|vbuf|\n+                    os::libc::setenv(nbuf, vbuf, 1i32)})});\n }\n \n #[cfg(target_os = \"win32\")]"}, {"sha": "a553f504001f80031433e58f534b529863abb63e", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c572b793feb8ddf4900f76f4f5700e6d704826e9/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c572b793feb8ddf4900f76f4f5700e6d704826e9/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=c572b793feb8ddf4900f76f4f5700e6d704826e9", "patch": "@@ -15,8 +15,8 @@ export waitpid;\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn rust_run_program(argv: *sbuf, in_fd: fd_t, out_fd: fd_t, err_fd: fd_t) ->\n-       pid_t;\n+    fn rust_run_program(argv: *sbuf, in_fd: fd_t,\n+                        out_fd: fd_t, err_fd: fd_t) -> pid_t;\n }\n \n /* Section: Types */\n@@ -115,7 +115,8 @@ Returns:\n \n The process id of the spawned process\n */\n-fn spawn_process(prog: str, args: [str], in_fd: fd_t, out_fd: fd_t, err_fd: fd_t)\n+fn spawn_process(prog: str, args: [str], in_fd: fd_t,\n+                 out_fd: fd_t, err_fd: fd_t)\n    -> pid_t unsafe {\n     // Note: we have to hold on to these vector references while we hold a\n     // pointer to their buffers"}]}