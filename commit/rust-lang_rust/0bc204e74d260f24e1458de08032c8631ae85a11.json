{"sha": "0bc204e74d260f24e1458de08032c8631ae85a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzIwNGU3NGQyNjBmMjRlMTQ1OGRlMDgwMzJjODYzMWFlODVhMTE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-17T18:04:33Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-17T18:08:54Z"}, "message": "rm unnecessary stage0 `zero_memory` fn", "tree": {"sha": "93f236545e49512fe1ddf900810f6afffed5fd38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f236545e49512fe1ddf900810f6afffed5fd38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc204e74d260f24e1458de08032c8631ae85a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc204e74d260f24e1458de08032c8631ae85a11", "html_url": "https://github.com/rust-lang/rust/commit/0bc204e74d260f24e1458de08032c8631ae85a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc204e74d260f24e1458de08032c8631ae85a11/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0239a06a6401d789a70c0089ada071ca981874df", "url": "https://api.github.com/repos/rust-lang/rust/commits/0239a06a6401d789a70c0089ada071ca981874df", "html_url": "https://github.com/rust-lang/rust/commit/0239a06a6401d789a70c0089ada071ca981874df"}], "stats": {"total": 34, "additions": 6, "deletions": 28}, "files": [{"sha": "3f7a857e382228ad715fba6761bda9df207d5191", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0bc204e74d260f24e1458de08032c8631ae85a11/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc204e74d260f24e1458de08032c8631ae85a11/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=0bc204e74d260f24e1458de08032c8631ae85a11", "patch": "@@ -80,8 +80,7 @@ pub fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n #[inline]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memmove32;\n-    memmove32(dst, src as *T, count as u32);\n+    intrinsics::memmove32(dst, src as *T, count as u32);\n }\n \n /**\n@@ -93,8 +92,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n #[inline]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memmove64;\n-    memmove64(dst, src as *T, count as u64);\n+    intrinsics::memmove64(dst, src as *T, count as u64);\n }\n \n /**\n@@ -106,8 +104,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n #[inline]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memcpy32;\n-    memcpy32(dst, src as *T, count as u32);\n+    intrinsics::memcpy32(dst, src as *T, count as u32);\n }\n \n /**\n@@ -119,8 +116,7 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n #[inline]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memcpy64;\n-    memcpy64(dst, src as *T, count as u64);\n+    intrinsics::memcpy64(dst, src as *T, count as u64);\n }\n \n /**\n@@ -130,8 +126,7 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n #[inline]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n-    use unstable::intrinsics::memset32;\n-    memset32(dst, c, count as u32);\n+    intrinsics::memset32(dst, c, count as u32);\n }\n \n /**\n@@ -141,34 +136,17 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n #[inline]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n-    use unstable::intrinsics::memset64;\n-    memset64(dst, c, count as u64);\n+    intrinsics::memset64(dst, c, count as u64);\n }\n \n /**\n  * Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n  */\n #[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n     set_memory(dst, 0, count);\n }\n \n-/**\n- * Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n- */\n-#[inline]\n-#[cfg(stage0)]\n-pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n-    let mut count = count * sys::size_of::<T>();\n-    let mut dst = dst as *mut u8;\n-    while count > 0 {\n-        *dst = 0;\n-        dst = mut_offset(dst, 1);\n-        count -= 1;\n-    }\n-}\n-\n /**\n  * Swap the values at two mutable locations of the same type, without\n  * deinitialising or copying either one."}]}