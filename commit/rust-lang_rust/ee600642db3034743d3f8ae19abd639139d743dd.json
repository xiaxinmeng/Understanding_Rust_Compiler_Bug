{"sha": "ee600642db3034743d3f8ae19abd639139d743dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNjAwNjQyZGIzMDM0NzQzZDNmOGFlMTlhYmQ2MzkxMzlkNzQzZGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-12T21:53:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-15T08:30:26Z"}, "message": "Add E0616", "tree": {"sha": "643ef5bdb0b0e61d874f18b47f1d8eec09cf4927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643ef5bdb0b0e61d874f18b47f1d8eec09cf4927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee600642db3034743d3f8ae19abd639139d743dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee600642db3034743d3f8ae19abd639139d743dd", "html_url": "https://github.com/rust-lang/rust/commit/ee600642db3034743d3f8ae19abd639139d743dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee600642db3034743d3f8ae19abd639139d743dd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb58bf2e67e55a351619e289cc153b17633832d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb58bf2e67e55a351619e289cc153b17633832d", "html_url": "https://github.com/rust-lang/rust/commit/5bb58bf2e67e55a351619e289cc153b17633832d"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "b8016fd348207047070cd40eb1fdd3c10ce567fb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee600642db3034743d3f8ae19abd639139d743dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee600642db3034743d3f8ae19abd639139d743dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ee600642db3034743d3f8ae19abd639139d743dd", "patch": "@@ -2921,8 +2921,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some((did, field_ty)) = private_candidate {\n             let struct_path = self.tcx().item_path_str(did);\n-            let msg = format!(\"field `{}` of struct `{}` is private\", field.node, struct_path);\n-            let mut err = self.tcx().sess.struct_span_err(expr.span, &msg);\n+            let mut err = struct_span_err!(self.tcx().sess, expr.span, E0616,\n+                                           \"field `{}` of struct `{}` is private\",\n+                                           field.node, struct_path);\n             // Also check if an accessible method exists, which is often what is meant.\n             if self.method_exists(field.span, field.node, expr_t, expr.id, false) {\n                 err.note(&format!(\"a method `{}` also exists, perhaps you wish to call it\","}, {"sha": "2d8d496cff9e3b4db84edd942f85c367f0a4ca27", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ee600642db3034743d3f8ae19abd639139d743dd/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee600642db3034743d3f8ae19abd639139d743dd/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ee600642db3034743d3f8ae19abd639139d743dd", "patch": "@@ -4199,7 +4199,7 @@ mod some_module {\n         pub fn new() -> Foo { Foo(0) }\n \n         // We add the getter function.\n-        pub fn get(&self) -> &u32 { self.0 }\n+        pub fn get(&self) -> &u32 { &self.0 }\n     }\n }\n \n@@ -4339,6 +4339,66 @@ println!(\"{}\", f.x);\n ```\n \"##,\n \n+E0616: r##\"\n+Attempted to access a private field on a struct.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0616\n+mod some_module {\n+    pub struct Foo {\n+        x: u32, // So `x` is private in here.\n+    }\n+\n+    impl Foo {\n+        pub fn new() -> Foo { Foo { x: 0 } }\n+    }\n+}\n+\n+let f = some_module::Foo::new();\n+println!(\"{}\", f.x); // error: field `x` of struct `some_module::Foo` is private\n+```\n+\n+If you want to access this field, you have two options:\n+\n+1) Set the field public:\n+\n+```\n+mod some_module {\n+    pub struct Foo {\n+        pub x: u32, // `x` is now public.\n+    }\n+\n+    impl Foo {\n+        pub fn new() -> Foo { Foo { x: 0 } }\n+    }\n+}\n+\n+let f = some_module::Foo::new();\n+println!(\"{}\", f.x); // ok!\n+```\n+\n+2) Add a getter function:\n+\n+```\n+mod some_module {\n+    pub struct Foo {\n+        x: u32, // So `x` is still private in here.\n+    }\n+\n+    impl Foo {\n+        pub fn new() -> Foo { Foo { x: 0 } }\n+\n+        // We create the getter function here:\n+        pub fn get_x(&self) -> &u32 { &self.x }\n+    }\n+}\n+\n+let f = some_module::Foo::new();\n+println!(\"{}\", f.get_x()); // ok!\n+```\n+\"##,\n+\n E0617: r##\"\n Attempted to pass an invalid type of variable into a variadic function.\n "}, {"sha": "2fd9f94763d8d2d83e231d52787c65af98d4590b", "filename": "src/test/compile-fail/E0616.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee600642db3034743d3f8ae19abd639139d743dd/src%2Ftest%2Fcompile-fail%2FE0616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee600642db3034743d3f8ae19abd639139d743dd/src%2Ftest%2Fcompile-fail%2FE0616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0616.rs?ref=ee600642db3034743d3f8ae19abd639139d743dd", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod a {\n+    pub struct Foo {\n+        x: u32,\n+    }\n+\n+    impl Foo {\n+        pub fn new() -> Foo { Foo { x: 0 } }\n+    }\n+}\n+\n+fn main() {\n+    let f = a::Foo::new();\n+    f.x; //~ ERROR E0616\n+}"}]}