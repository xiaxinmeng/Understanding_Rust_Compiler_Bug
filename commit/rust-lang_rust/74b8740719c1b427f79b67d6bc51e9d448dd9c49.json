{"sha": "74b8740719c1b427f79b67d6bc51e9d448dd9c49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Yjg3NDA3MTljMWI0MjdmNzliNjdkNmJjNTFlOWQ0NDhkZDljNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-08T00:24:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-08T00:24:03Z"}, "message": "Auto merge of #21988 - kmcallister:no-std, r=sfackler\n\nFixes #21833.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton \r\n\r\nThe tests in #21912 will also need `#[feature(no_std)]`. If you're okay with both PRs, I can merge and test them.", "tree": {"sha": "51327a08df4c0f510c0a851c41a6e400645afc97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51327a08df4c0f510c0a851c41a6e400645afc97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b8740719c1b427f79b67d6bc51e9d448dd9c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b8740719c1b427f79b67d6bc51e9d448dd9c49", "html_url": "https://github.com/rust-lang/rust/commit/74b8740719c1b427f79b67d6bc51e9d448dd9c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b8740719c1b427f79b67d6bc51e9d448dd9c49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfaa1a8434de3991d9ceae3eea88674a74c5eef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfaa1a8434de3991d9ceae3eea88674a74c5eef2", "html_url": "https://github.com/rust-lang/rust/commit/bfaa1a8434de3991d9ceae3eea88674a74c5eef2"}, {"sha": "312f8bd850ca4d575b1414badabab4f5aee99c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/312f8bd850ca4d575b1414badabab4f5aee99c67", "html_url": "https://github.com/rust-lang/rust/commit/312f8bd850ca4d575b1414badabab4f5aee99c67"}], "stats": {"total": 660, "additions": 489, "deletions": 171}, "files": [{"sha": "9c8191a386ddc5f401a456b2d94cf2a65ad2896a", "filename": "src/doc/reference.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -2467,6 +2467,12 @@ The currently implemented features of the reference compiler are:\n \n * `associated_types` - Allows type aliases in traits. Experimental.\n \n+* `no_std` - Allows the `#![no_std]` crate attribute, which disables the implicit\n+             `extern crate std`. This typically requires use of the unstable APIs\n+             behind the libstd \"facade\", such as libcore and libcollections. It\n+             may also cause problems when using syntax extensions, including\n+             `#[derive]`.\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if a"}, {"sha": "b364d00f95c20b493640f3bd2e6d8f2cba024c44", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -433,6 +433,7 @@ attribute attached to the crate.\n ```ignore\n // a minimal library\n #![crate_type=\"lib\"]\n+#![feature(no_std)]\n #![no_std]\n # // fn main() {} tricked you, rustdoc!\n ```\n@@ -446,8 +447,8 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```\n+#![feature(lang_items, start, no_std)]\n #![no_std]\n-#![feature(lang_items, start)]\n \n // Pull in the system libc library for what crt0.o likely requires\n extern crate libc;\n@@ -473,6 +474,7 @@ correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n ```ignore\n+#![feature(no_std)]\n #![no_std]\n #![no_main]\n #![feature(lang_items, start)]\n@@ -528,8 +530,8 @@ As an example, here is a program that will calculate the dot product of two\n vectors provided from C, using idiomatic Rust practices.\n \n ```\n+#![feature(lang_items, start, no_std)]\n #![no_std]\n-#![feature(lang_items, start)]\n \n # extern crate libc;\n extern crate core;\n@@ -576,10 +578,6 @@ extern fn panic_fmt(args: &core::fmt::Arguments,\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n # #[start] fn start(argc: isize, argv: *const *const u8) -> isize { 0 }\n # fn main() {}\n-# mod std {  // for-loops\n-#     pub use core::iter;\n-#     pub use core::option;\n-# }\n ```\n \n Note that there is one extra lang item here which differs from the examples\n@@ -656,8 +654,8 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```\n+#![feature(lang_items, box_syntax, start, no_std)]\n #![no_std]\n-#![feature(lang_items, box_syntax, start)]\n \n extern crate libc;\n "}, {"sha": "81391fd63eb85cb2a14532dc2409a41ab088ab42", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -65,6 +65,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![feature(no_std)]\n #![no_std]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n@@ -126,7 +127,8 @@ pub fn oom() -> ! {\n #[doc(hidden)]\n pub fn fixme_14344_be_sure_to_link_to_collections() {}\n \n-#[cfg(not(test))]\n+// NOTE: remove after next snapshot\n+#[cfg(all(stage0, not(test)))]\n #[doc(hidden)]\n mod std {\n     pub use core::fmt;"}, {"sha": "5f337528d780736ecf3b0708239be492d16f6484", "filename": "src/libcollections/fmt.rs", "status": "renamed", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -134,7 +134,7 @@\n //! * `E` \u21d2 `UpperExp`\n //!\n //! What this means is that any type of argument which implements the\n-//! `std::fmt::Binary` trait can then be formatted with `{:b}`. Implementations\n+//! `fmt::Binary` trait can then be formatted with `{:b}`. Implementations\n //! are provided for these traits for a number of primitive types by the\n //! standard library as well. If no format is specified (as in `{}` or `{:6}`),\n //! then the format trait used is the `Display` trait.\n@@ -146,7 +146,7 @@\n //! # use std::fmt;\n //! # struct Foo; // our custom type\n //! # impl fmt::Display for Foo {\n-//! fn fmt(&self, f: &mut std::fmt::Formatter) -> fmt::Result {\n+//! fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n //! # write!(f, \"testing, testing\")\n //! # } }\n //! ```\n@@ -403,8 +403,6 @@\n \n #![unstable(feature = \"std_misc\")]\n \n-use string;\n-\n pub use core::fmt::{Formatter, Result, Writer, rt};\n pub use core::fmt::{Show, String, Octal, Binary};\n pub use core::fmt::{Display, Debug};\n@@ -413,6 +411,8 @@ pub use core::fmt::{LowerExp, UpperExp};\n pub use core::fmt::Error;\n pub use core::fmt::{ArgumentV1, Arguments, write, radix, Radix, RadixFmt};\n \n+use string;\n+\n /// The format function takes a precompiled format string and a list of\n /// arguments, to return the resulting formatted string.\n ///\n@@ -434,3 +434,15 @@ pub fn format(args: Arguments) -> string::String {\n     let _ = write!(&mut output, \"{}\", args);\n     output\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use prelude::*;\n+    use fmt;\n+\n+    #[test]\n+    fn test_format() {\n+        let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n+        assert_eq!(s.as_slice(), \"Hello, world!\");\n+    }\n+}", "previous_filename": "src/libstd/fmt.rs"}, {"sha": "f220724c42e098f6ea1308777282da47bfea9ab4", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -33,6 +33,7 @@\n #![cfg_attr(test, feature(test))]\n #![cfg_attr(test, allow(deprecated))] // rand\n \n+#![feature(no_std)]\n #![no_std]\n \n #[macro_use]\n@@ -68,6 +69,7 @@ mod bit;\n mod btree;\n pub mod dlist;\n pub mod enum_set;\n+pub mod fmt;\n pub mod ring_buf;\n pub mod slice;\n pub mod str;\n@@ -107,15 +109,16 @@ pub fn fixme_14344_be_sure_to_link_to_collections() {}\n \n #[cfg(not(test))]\n mod std {\n-    pub use core::fmt;      // necessary for panic!()\n-    pub use core::option;   // necessary for panic!()\n-    pub use core::clone;    // derive(Clone)\n-    pub use core::cmp;      // derive(Eq, Ord, etc.)\n-    pub use core::marker;   // derive(Copy)\n-    pub use core::hash;     // derive(Hash)\n+    // NOTE: remove after next snapshot\n+    #[cfg(stage0)] pub use core::clone;    // derive(Clone)\n+    #[cfg(stage0)] pub use core::cmp;      // derive(Eq, Ord, etc.)\n+    #[cfg(stage0)] pub use core::marker;   // derive(Copy)\n+    #[cfg(stage0)] pub use core::hash;     // derive(Hash)\n+    #[cfg(stage0)] pub use core::iter;\n+    #[cfg(stage0)] pub use core::fmt;      // necessary for panic!()\n+    #[cfg(stage0)] pub use core::option;   // necessary for panic!()\n+\n     pub use core::ops;      // RangeFull\n-    // for-loops\n-    pub use core::iter;\n }\n \n #[cfg(test)]"}, {"sha": "79c86a846f1b90e96b0b969af1eb0bd9a884df21", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -22,3 +22,19 @@ macro_rules! vec {\n     );\n     ($($x:expr,)*) => (vec![$($x),*])\n }\n+\n+/// Use the syntax described in `std::fmt` to create a value of type `String`.\n+/// See `std::fmt` for more information.\n+///\n+/// # Example\n+///\n+/// ```\n+/// format!(\"test\");\n+/// format!(\"hello {}\", \"world!\");\n+/// format!(\"x = {}, y = {y}\", 10, y = 30);\n+/// ```\n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+macro_rules! format {\n+    ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n+}"}, {"sha": "76849e6ade85a23c5fcc7d1a74ae8ffca19294b0", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -27,8 +27,8 @@ use core::ops::{Index, IndexMut};\n use core::ptr;\n use core::raw::Slice as RawSlice;\n \n-use std::hash::{Writer, Hash, Hasher};\n-use std::cmp;\n+use core::hash::{Writer, Hash, Hasher};\n+use core::cmp;\n \n use alloc::heap;\n "}, {"sha": "5df64cfaadaaab243b41d17ba90fc4fa19eea810", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -67,7 +67,7 @@ use num::{ToPrimitive, Int};\n use ops::{Add, Deref, FnMut};\n use option::Option;\n use option::Option::{Some, None};\n-use std::marker::Sized;\n+use marker::Sized;\n use usize;\n \n /// An interface for dealing with \"external iterators\". These types of iterators"}, {"sha": "df4942b509b4c347440e6d57c7dad56422b817cf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -56,6 +56,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n+#![feature(no_std)]\n #![no_std]\n #![allow(raw_pointer_derive)]\n #![deny(missing_docs)]\n@@ -148,17 +149,25 @@ mod array;\n mod core {\n     pub use panicking;\n     pub use fmt;\n+    #[cfg(not(stage0))] pub use clone;\n+    #[cfg(not(stage0))] pub use cmp;\n+    #[cfg(not(stage0))] pub use hash;\n+    #[cfg(not(stage0))] pub use marker;\n+    #[cfg(not(stage0))] pub use option;\n+    #[cfg(not(stage0))] pub use iter;\n }\n \n #[doc(hidden)]\n mod std {\n-    pub use clone;\n-    pub use cmp;\n-    pub use fmt;\n-    pub use hash;\n-    pub use marker;\n+    // NOTE: remove after next snapshot\n+    #[cfg(stage0)] pub use clone;\n+    #[cfg(stage0)] pub use cmp;\n+    #[cfg(stage0)] pub use hash;\n+    #[cfg(stage0)] pub use marker;\n+    #[cfg(stage0)] pub use option;\n+    #[cfg(stage0)] pub use fmt;\n+    #[cfg(stage0)] pub use iter;\n+\n+    // range syntax\n     pub use ops;\n-    pub use option;\n-    // for-loops\n-    pub use iter;\n }"}, {"sha": "38d5c5eb27ae2d449739d8cceca055067fad4ad1", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -16,6 +16,7 @@\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), feature(core))]\n #![feature(int_uint)]\n+#![feature(no_std)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n@@ -5729,8 +5730,9 @@ pub fn issue_14344_workaround() {} // FIXME #14344 force linkage to happen corre\n \n #[test] fn work_on_windows() { } // FIXME #10872 needed for a happy windows\n \n+// NOTE: remove after next snapshot\n #[doc(hidden)]\n-#[cfg(not(test))]\n+#[cfg(all(stage0, not(test)))]\n mod std {\n     pub use core::marker;\n }"}, {"sha": "4113718cfd15b92989dd8e86d894883470a3e3e1", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -23,6 +23,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(int_uint)]\n+#![feature(no_std)]\n #![no_std]\n #![unstable(feature = \"rand\")]\n #![feature(staged_api)]\n@@ -496,7 +497,8 @@ pub struct Open01<F>(pub F);\n /// ```\n pub struct Closed01<F>(pub F);\n \n-#[cfg(not(test))]\n+// NOTE: remove after next snapshot\n+#[cfg(all(stage0, not(test)))]\n mod std {\n     pub use core::{option, fmt}; // panic!()\n     pub use core::clone; // derive Clone"}, {"sha": "370a5d48decaec85298da73575468e6a98efb5f0", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -12,6 +12,7 @@\n #![feature(staged_api)]\n #![staged_api]\n #![crate_type = \"rlib\"]\n+#![feature(no_std)]\n #![no_std]\n #![unstable(feature = \"rustc_private\")]\n \n@@ -281,6 +282,13 @@ macro_rules! bitflags {\n     };\n }\n \n+// This is a no_std crate. So the test code's invocation of #[derive] etc, via\n+// bitflags!, will use names from the underlying crates.\n+#[cfg(test)]\n+mod core {\n+    pub use std::{fmt, hash, clone, cmp, marker, option};\n+}\n+\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {"}, {"sha": "9df9025846201b4b2172a2a2ab908580fd12c9cb", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -43,7 +43,7 @@ struct RH<'a> {\n     sub: &'a [RH<'a>]\n }\n \n-static EMPTY_SOURCE_STR: &'static str = \"#![no_std]\";\n+static EMPTY_SOURCE_STR: &'static str = \"#![feature(no_std)] #![no_std]\";\n \n struct ExpectErrorEmitter {\n     messages: Vec<String>"}, {"sha": "9a9a554ec98420e1ba84e893a4642f0f2b359500", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -124,6 +124,7 @@\n #![cfg_attr(test, feature(test))]\n \n // Don't link to std. We are std.\n+#![feature(no_std)]\n #![no_std]\n \n #![deny(missing_docs)]\n@@ -137,7 +138,7 @@\n extern crate core;\n \n #[macro_use]\n-#[macro_reexport(vec)]\n+#[macro_reexport(vec, format)]\n extern crate \"collections\" as core_collections;\n \n #[allow(deprecated)] extern crate \"rand\" as core_rand;\n@@ -180,6 +181,7 @@ pub use core::error;\n #[cfg(not(test))] pub use alloc::boxed;\n pub use alloc::rc;\n \n+pub use core_collections::fmt;\n pub use core_collections::slice;\n pub use core_collections::str;\n pub use core_collections::string;\n@@ -245,7 +247,6 @@ pub mod thread_local;\n \n pub mod dynamic_lib;\n pub mod ffi;\n-pub mod fmt;\n pub mod old_io;\n pub mod io;\n pub mod os;\n@@ -285,11 +286,12 @@ mod tuple;\n // can be resolved within libstd.\n #[doc(hidden)]\n mod std {\n+    // NOTE: remove after next snapshot\n     // mods used for deriving\n-    pub use clone;\n-    pub use cmp;\n-    pub use hash;\n-    pub use default;\n+    #[cfg(stage0)] pub use clone;\n+    #[cfg(stage0)] pub use cmp;\n+    #[cfg(stage0)] pub use hash;\n+    #[cfg(stage0)] pub use default;\n \n     pub use sync; // used for select!()\n     pub use error; // used for try!()\n@@ -312,5 +314,6 @@ mod std {\n \n     pub use boxed; // used for vec![]\n     // for-loops\n-    pub use iter;\n+    // NOTE: remove after next snapshot\n+    #[cfg(stage0)] pub use iter;\n }"}, {"sha": "6a2aafcf8f396d985b52883a2c1a938be3c0fbd8", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -70,6 +70,7 @@ macro_rules! panic {\n /// format!(\"hello {}\", \"world!\");\n /// format!(\"x = {}, y = {y}\", 10, y = 30);\n /// ```\n+#[cfg(stage0)] // NOTE: remove after snapshot\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {"}, {"sha": "778b2cabea622ef9918c1ce08028ea7151ab4f69", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -544,6 +544,7 @@ pub struct ExtCtxt<'a> {\n     pub cfg: ast::CrateConfig,\n     pub backtrace: ExpnId,\n     pub ecfg: expand::ExpansionConfig,\n+    pub use_std: bool,\n \n     pub mod_path: Vec<ast::Ident> ,\n     pub trace_mac: bool,\n@@ -563,6 +564,7 @@ impl<'a> ExtCtxt<'a> {\n             backtrace: NO_EXPANSION,\n             mod_path: Vec::new(),\n             ecfg: ecfg,\n+            use_std: true,\n             trace_mac: false,\n             exported_macros: Vec::new(),\n             syntax_env: env,\n@@ -737,6 +739,9 @@ impl<'a> ExtCtxt<'a> {\n     pub fn ident_of(&self, st: &str) -> ast::Ident {\n         str_to_ident(st)\n     }\n+    pub fn ident_of_std(&self, st: &str) -> ast::Ident {\n+        self.ident_of(if self.use_std { \"std\" } else { st })\n+    }\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)\n     }"}, {"sha": "a7d1baf08beacd0cef93fbbf511b4bca2c014c55", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -386,7 +386,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           vec!(\n-                              self.ident_of(\"std\"),\n+                              self.ident_of_std(\"core\"),\n                               self.ident_of(\"option\"),\n                               self.ident_of(\"Option\")\n                           ),\n@@ -656,7 +656,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> {\n         self.expr_call_global(sp,\n-                              vec!(self.ident_of(\"std\"),\n+                              vec!(self.ident_of_std(\"collections\"),\n                                    self.ident_of(\"vec\"),\n                                    self.ident_of(\"Vec\"),\n                                    self.ident_of(\"new\")),\n@@ -676,7 +676,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"Some\"));\n@@ -685,7 +685,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n         let none = self.path_global(sp, vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"None\")));\n@@ -712,7 +712,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_call_global(\n             span,\n             vec!(\n-                self.ident_of(\"std\"),\n+                self.ident_of_std(\"core\"),\n                 self.ident_of(\"rt\"),\n                 self.ident_of(\"begin_unwind\")),\n             vec!(\n@@ -728,7 +728,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_ok(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let ok = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Ok\"));\n@@ -737,18 +737,28 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let err = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Err\"));\n         self.expr_call_global(sp, err, vec!(expr))\n     }\n \n     fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> {\n-        let ok = self.ident_of(\"Ok\");\n-        let ok_path = self.path_ident(sp, ok);\n-        let err = self.ident_of(\"Err\");\n-        let err_path = self.path_ident(sp, err);\n+        let ok = vec![\n+            self.ident_of_std(\"core\"),\n+            self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n+            self.ident_of(\"Ok\")\n+        ];\n+        let ok_path = self.path_global(sp, ok);\n+        let err = vec![\n+            self.ident_of_std(\"core\"),\n+            self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n+            self.ident_of(\"Err\")\n+        ];\n+        let err_path = self.path_global(sp, err);\n \n         let binding_variable = self.ident_of(\"__try_var\");\n         let binding_pat = self.pat_ident(sp, binding_variable);\n@@ -758,8 +768,9 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let ok_pat = self.pat_enum(sp, ok_path, vec!(binding_pat.clone()));\n \n         // Err(__try_var)  (pattern and expression resp.)\n-        let err_pat = self.pat_enum(sp, err_path, vec!(binding_pat));\n-        let err_inner_expr = self.expr_call_ident(sp, err, vec!(binding_expr.clone()));\n+        let err_pat = self.pat_enum(sp, err_path.clone(), vec!(binding_pat));\n+        let err_inner_expr = self.expr_call(sp, self.expr_path(err_path),\n+                                            vec!(binding_expr.clone()));\n         // return Err(__try_var)\n         let err_expr = self.expr(sp, ast::ExprRet(Some(err_inner_expr)));\n \n@@ -808,7 +819,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"Some\"));\n@@ -818,7 +829,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_none(&self, span: Span) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"None\"));\n@@ -828,7 +839,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Ok\"));\n@@ -838,7 +849,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Err\"));"}, {"sha": "879718a6399f5b21f2e3bb024b35527bd1aa7752", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -45,10 +45,16 @@ pub fn expand_deriving_bound<F>(cx: &mut ExtCtxt,\n         }\n     };\n \n+    let path = Path::new(vec![\n+        if cx.use_std { \"std\" } else { \"core\" },\n+        \"marker\",\n+        name\n+    ]);\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"marker\", name)),\n+        path: path,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: Vec::new(),"}, {"sha": "9f009ad4d7869ed6e6721eb46bb70b8730fe8c90", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"clone\", \"Clone\")),\n+        path: path_std!(cx, core::clone::Clone),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -58,7 +58,7 @@ fn cs_clone(\n     let ctor_path;\n     let all_fields;\n     let fn_path = vec![\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"clone\"),\n         cx.ident_of(\"Clone\"),\n         cx.ident_of(\"clone\"),"}, {"sha": "91212a86958962d08c71761b30545ea7432e15f5", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -70,7 +70,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"bool\"))),\n+                ret_ty: Literal(path!(bool)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     $f(a, b, c)\n@@ -82,7 +82,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"PartialEq\")),\n+        path: path_std!(cx, core::cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "b109850a6bd23dac42f217f7e4b742bb527dcc7c", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -36,7 +36,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"bool\"))),\n+                ret_ty: Literal(path!(bool)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n@@ -45,8 +45,8 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         } }\n     }\n \n-    let ordering_ty = Literal(Path::new(vec![\"std\", \"cmp\", \"Ordering\"]));\n-    let ret_ty = Literal(Path::new_(vec![\"std\", \"option\", \"Option\"],\n+    let ordering_ty = Literal(path_std!(cx, core::cmp::Ordering));\n+    let ret_ty = Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                     None,\n                                     vec![box ordering_ty],\n                                     true));\n@@ -69,7 +69,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: vec![],\n-        path: Path::new(vec![\"std\", \"cmp\", \"PartialOrd\"]),\n+        path: path_std!(cx, core::cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         methods: vec![\n@@ -107,15 +107,15 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> P<Expr> {\n     let test_id = cx.ident_of(\"__test\");\n     let ordering = cx.path_global(span,\n-                                  vec!(cx.ident_of(\"std\"),\n+                                  vec!(cx.ident_of_std(\"core\"),\n                                        cx.ident_of(\"cmp\"),\n                                        cx.ident_of(\"Ordering\"),\n                                        cx.ident_of(\"Equal\")));\n     let ordering = cx.expr_path(ordering);\n     let equals_expr = cx.expr_some(span, ordering);\n \n     let partial_cmp_path = vec![\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"cmp\"),\n         cx.ident_of(\"PartialOrd\"),\n         cx.ident_of(\"partial_cmp\"),"}, {"sha": "31a754a1254bb486c88936b9674afe9c3d31f7c3", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"Eq\")),\n+        path: path_std!(cx, core::cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "2f6f99bc1ee46211bf4959321e2b09ff43d064db", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"cmp\", \"Ord\")),\n+        path: path_std!(cx, core::cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -39,7 +39,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(Path::new(vec!(\"std\", \"cmp\", \"Ordering\"))),\n+                ret_ty: Literal(path_std!(cx, core::cmp::Ordering)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_cmp(a, b, c)\n@@ -65,13 +65,13 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> P<Expr> {\n     let test_id = cx.ident_of(\"__test\");\n     let equals_path = cx.path_global(span,\n-                                     vec!(cx.ident_of(\"std\"),\n+                                     vec!(cx.ident_of_std(\"core\"),\n                                           cx.ident_of(\"cmp\"),\n                                           cx.ident_of(\"Ordering\"),\n                                           cx.ident_of(\"Equal\")));\n \n     let cmp_path = vec![\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"cmp\"),\n         cx.ident_of(\"Ord\"),\n         cx.ident_of(\"cmp\"),"}, {"sha": "f003a3453e15e578ba88034727b75d4c5654a593", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -49,6 +49,12 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                                     krate: &'static str) where\n     F: FnOnce(P<Item>),\n {\n+    if !cx.use_std {\n+        // FIXME(#21880): lift this requirement.\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        return;\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -68,7 +74,7 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(Path::new_local(\"__D\")),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n-                    vec!(\"std\", \"result\", \"Result\"),\n+                    pathvec_std!(cx, core::result::Result),\n                     None,\n                     vec!(box Self, box Literal(Path::new_(\n                         vec![\"__D\", \"Error\"], None, vec![], false"}, {"sha": "9b76f4b1658f0d47edfb82fadaaf0a32a8c4f735", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"default\", \"Default\")),\n+        path: path_std!(cx, core::default::Default),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -52,7 +52,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n \n fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n     let default_ident = vec!(\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"default\"),\n         cx.ident_of(\"Default\"),\n         cx.ident_of(\"default\")"}, {"sha": "dd6094705995e94a4b70818984235fb81c0dad3b", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -125,6 +125,12 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                                     krate: &'static str) where\n     F: FnOnce(P<Item>),\n {\n+    if !cx.use_std {\n+        // FIXME(#21880): lift this requirement.\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        return;\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -144,7 +150,7 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(Path::new_local(\"__S\")),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n-                    vec!(\"std\", \"result\", \"Result\"),\n+                    pathvec_std!(cx, core::result::Result),\n                     None,\n                     vec!(box Tuple(Vec::new()), box Literal(Path::new_(\n                         vec![\"__S\", \"Error\"], None, vec![], false"}, {"sha": "5aa9f9a0c3e761f163b476caeeabd61a5f4cc588", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -25,13 +25,13 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n \n-    let path = Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n+    let path = Path::new_(pathvec_std!(cx, core::hash::Hash), None,\n                           vec!(box Literal(Path::new_local(\"__S\"))), true);\n     let generics = LifetimeBounds {\n         lifetimes: Vec::new(),\n         bounds: vec!((\"__S\",\n-                      vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\")),\n-                           Path::new(vec!(\"std\", \"hash\", \"Hasher\"))))),\n+                      vec!(path_std!(cx, core::hash::Writer),\n+                           path_std!(cx, core::hash::Hasher)))),\n     };\n     let args = Path::new_local(\"__S\");\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n@@ -69,7 +69,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n     let call_hash = |span, thing_expr| {\n         let hash_path = {\n             let strs = vec![\n-                cx.ident_of(\"std\"),\n+                cx.ident_of_std(\"core\"),\n                 cx.ident_of(\"hash\"),\n                 cx.ident_of(\"Hash\"),\n                 cx.ident_of(\"hash\"),"}, {"sha": "9c3fa58ad0960b825d445a1968778741b33fa204", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -18,6 +18,34 @@ use ext::base::ExtCtxt;\n use codemap::Span;\n use ptr::P;\n \n+macro_rules! pathvec {\n+    ($($x:ident)::+) => (\n+        vec![ $( stringify!($x) ),+ ]\n+    )\n+}\n+\n+macro_rules! path {\n+    ($($x:tt)*) => (\n+        ::ext::deriving::generic::ty::Path::new( pathvec!( $($x)* ) )\n+    )\n+}\n+\n+macro_rules! pathvec_std {\n+    ($cx:expr, $first:ident :: $($rest:ident)::+) => (\n+        if $cx.use_std {\n+            pathvec!(std :: $($rest)::+)\n+        } else {\n+            pathvec!($first :: $($rest)::+)\n+        }\n+    )\n+}\n+\n+macro_rules! path_std {\n+    ($($x:tt)*) => (\n+        ::ext::deriving::generic::ty::Path::new( pathvec_std!( $($x)* ) )\n+    )\n+}\n+\n pub mod bounds;\n pub mod clone;\n pub mod encodable;"}, {"sha": "bf742263c6d8774561efae0158c53a59db5755fb", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -30,17 +30,16 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"num\", \"FromPrimitive\")),\n+        path: path_std!(cx, core::num::FromPrimitive),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n             MethodDef {\n                 name: \"from_i64\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: None,\n-                args: vec!(\n-                    Literal(Path::new(vec!(\"i64\")))),\n-                ret_ty: Literal(Path::new_(vec!(\"std\", \"option\", \"Option\"),\n+                args: vec!(Literal(path!(i64))),\n+                ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                            None,\n                                            vec!(box Self),\n                                            true)),\n@@ -54,9 +53,8 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                 name: \"from_u64\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: None,\n-                args: vec!(\n-                    Literal(Path::new(vec!(\"u64\")))),\n-                ret_ty: Literal(Path::new_(vec!(\"std\", \"option\", \"Option\"),\n+                args: vec!(Literal(path!(u64))),\n+                ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                            None,\n                                            vec!(box Self),\n                                            true)),"}, {"sha": "4c3678d9572da8a91e80a9154c155d2357f2f6a4", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -28,10 +28,16 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                  \"`#[derive(Rand)]` is deprecated in favour of `#[derive_Rand]` from \\\n                   `rand_macros` on crates.io\");\n \n+    if !cx.use_std {\n+        // FIXME(#21880): lift this requirement.\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        return;\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"rand\", \"Rand\")),\n+        path: path!(std::rand::Rand),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -40,7 +46,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec!((\"R\",\n-                                  vec!( Path::new(vec!(\"std\", \"rand\", \"Rng\")) )))\n+                                  vec!( path!(std::rand::Rng) ))),\n                 },\n                 explicit_self: None,\n                 args: vec!("}, {"sha": "3f5947672e022ce67971f031b5e88827b701882b", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -29,13 +29,13 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n     // &mut ::std::fmt::Formatter\n-    let fmtr = Ptr(box Literal(Path::new(vec!(\"std\", \"fmt\", \"Formatter\"))),\n+    let fmtr = Ptr(box Literal(path_std!(cx, core::fmt::Formatter)),\n                    Borrowed(None, ast::MutMutable));\n \n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec![\"std\", \"fmt\", \"Debug\"]),\n+        path: path_std!(cx, core::fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec![\n@@ -44,7 +44,7 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(fmtr),\n-                ret_ty: Literal(Path::new(vec!(\"std\", \"fmt\", \"Result\"))),\n+                ret_ty: Literal(path_std!(cx, core::fmt::Result)),\n                 attributes: Vec::new(),\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     show_substructure(a, b, c)"}, {"sha": "ef9d37998793229330fb6074fb8fe7137bc394cc", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -34,7 +34,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n       Err(..) => {\n           cx.expr_path(cx.path_all(sp,\n                                    true,\n-                                   vec!(cx.ident_of(\"std\"),\n+                                   vec!(cx.ident_of_std(\"core\"),\n                                         cx.ident_of(\"option\"),\n                                         cx.ident_of(\"Option\"),\n                                         cx.ident_of(\"None\")),\n@@ -50,7 +50,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n       }\n       Ok(s) => {\n           cx.expr_call_global(sp,\n-                              vec!(cx.ident_of(\"std\"),\n+                              vec!(cx.ident_of_std(\"core\"),\n                                    cx.ident_of(\"option\"),\n                                    cx.ident_of(\"Option\"),\n                                    cx.ident_of(\"Some\")),"}, {"sha": "fd7593f2a3b52adb4200d227ce604eb5cb18603c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -31,6 +31,7 @@ use ptr::P;\n use util::small_vector::SmallVector;\n use visit;\n use visit::Visitor;\n+use std_inject;\n \n pub fn expand_type(t: P<ast::Ty>,\n                    fld: &mut MacroExpander,\n@@ -278,7 +279,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let match_expr = {\n                 let next_path = {\n                     let strs = vec![\n-                        fld.cx.ident_of(\"std\"),\n+                        fld.cx.ident_of_std(\"core\"),\n                         fld.cx.ident_of(\"iter\"),\n                         fld.cx.ident_of(\"Iterator\"),\n                         fld.cx.ident_of(\"next\"),\n@@ -311,7 +312,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let into_iter_expr = {\n                 let into_iter_path = {\n                     let strs = vec![\n-                        fld.cx.ident_of(\"std\"),\n+                        fld.cx.ident_of_std(\"core\"),\n                         fld.cx.ident_of(\"iter\"),\n                         fld.cx.ident_of(\"IntoIterator\"),\n                         fld.cx.ident_of(\"into_iter\"),\n@@ -1429,6 +1430,8 @@ pub fn expand_crate(parse_sess: &parse::ParseSess,\n                     user_exts: Vec<NamedSyntaxExtension>,\n                     c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n+    cx.use_std = std_inject::use_std(&c);\n+\n     let mut expander = MacroExpander::new(&mut cx);\n \n     for def in imported_macros {"}, {"sha": "170a455a9132610d3658d0fd3786f6dd0e152222", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn rtpath(ecx: &ExtCtxt, s: &str) -> Vec<ast::Ident> {\n-        vec![ecx.ident_of(\"std\"), ecx.ident_of(\"fmt\"), ecx.ident_of(\"rt\"),\n+        vec![ecx.ident_of_std(\"core\"), ecx.ident_of(\"fmt\"), ecx.ident_of(\"rt\"),\n              ecx.ident_of(\"v1\"), ecx.ident_of(s)]\n     }\n \n@@ -576,7 +576,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n \n         self.ecx.expr_call_global(self.fmtsp, vec!(\n-                self.ecx.ident_of(\"std\"),\n+                self.ecx.ident_of_std(\"core\"),\n                 self.ecx.ident_of(\"fmt\"),\n                 self.ecx.ident_of(\"Arguments\"),\n                 self.ecx.ident_of(fn_name)), fn_args)\n@@ -607,20 +607,20 @@ impl<'a, 'b> Context<'a, 'b> {\n             }\n             Unsigned => {\n                 return ecx.expr_call_global(sp, vec![\n-                        ecx.ident_of(\"std\"),\n+                        ecx.ident_of_std(\"core\"),\n                         ecx.ident_of(\"fmt\"),\n                         ecx.ident_of(\"ArgumentV1\"),\n                         ecx.ident_of(\"from_uint\")], vec![arg])\n             }\n         };\n \n         let format_fn = ecx.path_global(sp, vec![\n-                ecx.ident_of(\"std\"),\n+                ecx.ident_of_std(\"core\"),\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(trait_),\n                 ecx.ident_of(\"fmt\")]);\n         ecx.expr_call_global(sp, vec![\n-                ecx.ident_of(\"std\"),\n+                ecx.ident_of_std(\"core\"),\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(\"ArgumentV1\"),\n                 ecx.ident_of(\"new\")], vec![arg, ecx.expr_path(format_fn)])"}, {"sha": "c8ab46ff8fd338f9621c0f797f0786315abea3a6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -122,7 +122,10 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"staged_api\", \"1.0.0\", Active),\n \n     // Allows using items which are missing stability attributes\n-    (\"unmarked_api\", \"1.0.0\", Active)\n+    (\"unmarked_api\", \"1.0.0\", Active),\n+\n+    // Allows using #![no_std]\n+    (\"no_std\", \"1.0.0\", Active),\n ];\n \n enum Status {\n@@ -466,6 +469,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                               attr.span,\n                               \"language items are subject to change\");\n         }\n+\n+        if attr.check_name(\"no_std\") {\n+            self.gate_feature(\"no_std\", attr.span,\n+                              \"no_std is experimental\");\n+        }\n     }\n \n     fn visit_pat(&mut self, pattern: &ast::Pat) {"}, {"sha": "0da15859ea2df15b961ce02c225ef55c04541ad5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -15,17 +15,19 @@ use ast;\n use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n use ast_util;\n+use attr;\n use owned_slice::OwnedSlice;\n use attr::{AttrMetaMethods, AttributeMethods};\n use codemap::{self, CodeMap, BytePos};\n use diagnostic;\n-use parse::token::{self, BinOpToken, Token};\n+use parse::token::{self, BinOpToken, Token, InternedString};\n use parse::lexer::comments;\n use parse;\n use print::pp::{self, break_offset, word, space, zerobreak, hardbreak};\n use print::pp::{Breaks, eof};\n use print::pp::Breaks::{Consistent, Inconsistent};\n use ptr::P;\n+use std_inject;\n \n use std::{ascii, mem};\n use std::old_io::{self, IoResult};\n@@ -113,6 +115,25 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                                       out,\n                                       ann,\n                                       is_expanded);\n+    if is_expanded && std_inject::use_std(krate) {\n+        // We need to print `#![no_std]` (and its feature gate) so that\n+        // compiling pretty-printed source won't inject libstd again.\n+        // However we don't want these attributes in the AST because\n+        // of the feature gate, so we fake them up here.\n+\n+        let no_std_meta = attr::mk_word_item(InternedString::new(\"no_std\"));\n+\n+        // #![feature(no_std)]\n+        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n+                                            attr::mk_list_item(InternedString::new(\"feature\"),\n+                                                               vec![no_std_meta.clone()]));\n+        try!(s.print_attribute(&fake_attr));\n+\n+        // #![no_std]\n+        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(), no_std_meta);\n+        try!(s.print_attribute(&fake_attr));\n+    }\n+\n     try!(s.print_mod(&krate.module, &krate.attrs[]));\n     try!(s.print_remaining_comments());\n     eof(&mut s.s)"}, {"sha": "98c193c7e6b850b1bfc90d6d39d8b8d7537b27ea", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -37,7 +37,7 @@ pub fn maybe_inject_prelude(krate: ast::Crate) -> ast::Crate {\n     }\n }\n \n-fn use_std(krate: &ast::Crate) -> bool {\n+pub fn use_std(krate: &ast::Crate) -> bool {\n     !attr::contains_name(&krate.attrs[], \"no_std\")\n }\n \n@@ -69,9 +69,6 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n             span: DUMMY_SP\n         }));\n \n-        // don't add #![no_std] here, that will block the prelude injection later.\n-        // Add it during the prelude injection instead.\n-\n         krate\n     }\n }\n@@ -87,16 +84,6 @@ struct PreludeInjector<'a>;\n \n impl<'a> fold::Folder for PreludeInjector<'a> {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n-        // Add #![no_std] here, so we don't re-inject when compiling pretty-printed source.\n-        // This must happen here and not in StandardLibraryInjector because this\n-        // fold happens second.\n-\n-        let no_std_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n-                                              attr::mk_word_item(InternedString::new(\"no_std\")));\n-        // std_inject runs after feature checking so manually mark this attr\n-        attr::mark_used(&no_std_attr);\n-        krate.attrs.push(no_std_attr);\n-\n         // only add `use std::prelude::*;` if there wasn't a\n         // `#![no_implicit_prelude]` at the crate level.\n         // fold_mod() will insert glob path."}, {"sha": "54c8fcd205b8f7e5b05affff65ce279530445c41", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -29,6 +29,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![feature(no_std)]\n #![no_std]\n #![feature(slicing_syntax)]\n #![feature(int_uint)]\n@@ -78,7 +79,9 @@ pub mod str {\n     pub use u_str::{utf16_items, Utf16Encoder};\n }\n \n+// NOTE: remove after next snapshot\n // this lets us use #[derive(..)]\n+#[cfg(stage0)]\n mod std {\n     pub use core::clone;\n     pub use core::cmp;"}, {"sha": "834667968c85bdd3cb623701249d3cf5bc6df2bc", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(no_std)]\n #![no_std]\n #![feature(lang_items)]\n "}, {"sha": "d830aef54f5ef0ff825d56f1ba83ff3e43ddea18", "filename": "src/test/auxiliary/no_std_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(no_std)]\n #![no_std]\n \n pub fn foo() {}"}, {"sha": "fa254cb91ad53e87ee17fb4ede2e84d8c126419a", "filename": "src/test/auxiliary/weak-lang-items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -13,6 +13,7 @@\n // This aux-file will require the eh_personality function to be codegen'd, but\n // it hasn't been defined just yet. Make sure we don't explode.\n \n+#![feature(no_std)]\n #![no_std]\n #![crate_type = \"rlib\"]\n "}, {"sha": "621f5ec9660fca6aff50caf0bf144f62f0b0b008", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -13,6 +13,7 @@\n \n #![crate_type = \"lib\"]\n #![feature(lang_items)]\n+#![feature(no_std)]\n #![no_std]\n \n #[lang=\"sized\"]"}, {"sha": "c91849ca53e1a780f2cba3bfafcf960ecc0a4ca5", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n \n+#![feature(no_std)]\n #![no_std]\n #![feature(lang_items)]\n "}, {"sha": "f82e7f3e36a8ac7bbd7cce6b52606ddff2b5c19b", "filename": "src/test/compile-fail/derive-no-std-not-supported.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+extern crate core;\n+extern crate rand;\n+extern crate \"serialize\" as rustc_serialize;\n+\n+#[derive(Rand)]  //~ ERROR this trait cannot be derived\n+//~^ WARNING `#[derive(Rand)]` is deprecated\n+struct Foo {\n+    x: u32,\n+}\n+\n+#[derive(RustcEncodable)]  //~ ERROR this trait cannot be derived\n+struct Bar {\n+    x: u32,\n+}\n+\n+#[derive(RustcDecodable)]  //~ ERROR this trait cannot be derived\n+struct Baz {\n+    x: u32,\n+}\n+\n+fn main() {\n+    Foo { x: 0 };\n+    Bar { x: 0 };\n+    Baz { x: 0 };\n+}"}, {"sha": "893ba8a8a86e8b5fd5b2fe2ff43c6eb579f3c3c0", "filename": "src/test/compile-fail/gated-no-std.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fgated-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fgated-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-no-std.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2105 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std] //~ ERROR no_std is experimental\n+\n+fn main() {}"}, {"sha": "14601e67a77c1c77a86391940ab74a47eb0e8820", "filename": "src/test/compile-fail/issue-19660.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: requires `copy` lang_item\n \n-#![feature(lang_items, start)]\n+#![feature(lang_items, start, no_std)]\n #![no_std]\n \n #[lang = \"sized\"]"}, {"sha": "c7426fc6fc1b06cb3f36511390f7166bd02de36f", "filename": "src/test/compile-fail/lang-item-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -13,8 +13,8 @@\n \n // error-pattern: requires `sized` lang_item\n \n+#![feature(start, no_std)]\n #![no_std]\n-#![feature(start)]\n \n #[start]\n fn start(argc: isize, argv: *const *const u8) -> isize {"}, {"sha": "e91e6efd1cbf07407b56460e907e16e6b0298b72", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(no_std)]\n #![no_std]\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]"}, {"sha": "7ebbcc2809a5802a42cfc4d598ed1171c2038703", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start)]\n+#![feature(lang_items, start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang=\"sized\"]"}, {"sha": "7b4a2a3595bf701a5f5353009021aab92b0c9d16", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(start)]\n+#![feature(start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that globs don't leak in regular `use` statements."}, {"sha": "8c9de1fa25ce784f2b00af2ea95816170a5bbcda", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(start)]\n+#![feature(start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private"}, {"sha": "bcb46663aa849da96e36e45d9275453948cdbff0", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start)]\n+#![feature(lang_items, start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang = \"sized\"] pub trait Sized {}"}, {"sha": "74c2c6e584b437184c642b1d46e9d25b87dcc165", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(lang_items, no_std)]\n #![no_std]\n-#![feature(lang_items)]\n \n // Check that explicit region bounds are allowed on the various\n // nominal types (but not on other types) and that they are type"}, {"sha": "3b8312a30190c2b1317a5e3710881b01f4070601", "filename": "src/test/compile-fail/regions-struct-not-wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -10,6 +10,7 @@\n \n // Various examples of structs whose fields are not well-formed.\n \n+#![feature(no_std)]\n #![no_std]\n #![allow(dead_code)]\n "}, {"sha": "7d252604883d6e12eb185e249389150a8c93ea2a", "filename": "src/test/compile-fail/required-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items)]\n+#![feature(lang_items, no_std)]\n #![no_std]\n \n #[lang=\"sized\"] pub trait Sized {}"}, {"sha": "42df43934a89cd19499ccbea68bf528b32f3f4a8", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -13,6 +13,7 @@\n // error-pattern: language item required, but not found: `stack_exhausted`\n // error-pattern: language item required, but not found: `eh_personality`\n \n+#![feature(no_std)]\n #![no_std]\n \n extern crate core;"}, {"sha": "60660d482742dfbbf0711db3110c92c2ad5eb9a9", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -1,3 +1,4 @@\n+#![feature(no_std)]\n #![no_std]\n #[prelude_import]\n use std::prelude::v1::*;\n@@ -41,41 +42,41 @@\n \n \n     ((::std::fmt::format as\n-         fn(core::fmt::Arguments<'_>) -> collections::string::String {std::fmt::format})(((::std::fmt::Arguments::new_v1\n-                                                                                              as\n-                                                                                              fn(&[&str], &[core::fmt::ArgumentV1<'_>]) -> core::fmt::Arguments<'_> {core::fmt::Arguments<'a>::new_v1})(({\n-                                                                                                                                                                                                             static __STATIC_FMTSTR:\n-                                                                                                                                                                                                                    &'static [&'static str]\n-                                                                                                                                                                                                                    =\n-                                                                                                                                                                                                                 (&([(\"test\"\n+         fn(core::fmt::Arguments<'_>) -> collections::string::String {collections::fmt::format})(((::std::fmt::Arguments::new_v1\n+                                                                                                      as\n+                                                                                                      fn(&[&str], &[core::fmt::ArgumentV1<'_>]) -> core::fmt::Arguments<'_> {core::fmt::Arguments<'a>::new_v1})(({\n+                                                                                                                                                                                                                     static __STATIC_FMTSTR:\n+                                                                                                                                                                                                                            &'static [&'static str]\n+                                                                                                                                                                                                                            =\n+                                                                                                                                                                                                                         (&([(\"test\"\n+                                                                                                                                                                                                                                 as\n+                                                                                                                                                                                                                                 &'static str)]\n+                                                                                                                                                                                                                               as\n+                                                                                                                                                                                                                               [&'static str; 1])\n+                                                                                                                                                                                                                             as\n+                                                                                                                                                                                                                             &'static [&'static str; 1]);\n+                                                                                                                                                                                                                     (__STATIC_FMTSTR\n                                                                                                                                                                                                                          as\n-                                                                                                                                                                                                                         &'static str)]\n-                                                                                                                                                                                                                       as\n-                                                                                                                                                                                                                       [&'static str; 1])\n-                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                     &'static [&'static str; 1]);\n-                                                                                                                                                                                                             (__STATIC_FMTSTR\n-                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                 &'static [&'static str])\n-                                                                                                                                                                                                         }\n-                                                                                                                                                                                                            as\n-                                                                                                                                                                                                            &[&str]),\n-                                                                                                                                                                                                        (&(match (()\n-                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                     ())\n-                                                                                                                                                                                                               {\n-                                                                                                                                                                                                               ()\n-                                                                                                                                                                                                               =>\n-                                                                                                                                                                                                               ([]\n-                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                   [core::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                           }\n-                                                                                                                                                                                                              as\n-                                                                                                                                                                                                              [core::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                            as\n-                                                                                                                                                                                                            &[core::fmt::ArgumentV1<'_>; 0]))\n-                                                                                             as\n-                                                                                             core::fmt::Arguments<'_>))\n+                                                                                                                                                                                                                         &'static [&'static str])\n+                                                                                                                                                                                                                 }\n+                                                                                                                                                                                                                    as\n+                                                                                                                                                                                                                    &[&str]),\n+                                                                                                                                                                                                                (&(match (()\n+                                                                                                                                                                                                                             as\n+                                                                                                                                                                                                                             ())\n+                                                                                                                                                                                                                       {\n+                                                                                                                                                                                                                       ()\n+                                                                                                                                                                                                                       =>\n+                                                                                                                                                                                                                       ([]\n+                                                                                                                                                                                                                           as\n+                                                                                                                                                                                                                           [core::fmt::ArgumentV1<'_>; 0]),\n+                                                                                                                                                                                                                   }\n+                                                                                                                                                                                                                      as\n+                                                                                                                                                                                                                      [core::fmt::ArgumentV1<'_>; 0])\n+                                                                                                                                                                                                                    as\n+                                                                                                                                                                                                                    &[core::fmt::ArgumentV1<'_>; 0]))\n+                                                                                                     as\n+                                                                                                     core::fmt::Arguments<'_>))\n         as collections::string::String);\n }\n pub type Foo = [i32; (3us as usize)];"}, {"sha": "6d30956ab2b4401b44529243cc391dd0f77bc4df", "filename": "src/test/run-make/alloc-extern-crates/fakealloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![crate_type = \"rlib\"]\n+#![feature(no_std, core)]\n #![no_std]\n-#![feature(core)]\n extern crate core;\n \n "}, {"sha": "8695ab58e5fe597748b5d503076038e61461a9b1", "filename": "src/test/run-make/mismatching-target-triples/bar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -7,5 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![feature(no_std)]\n #![no_std]\n extern crate foo;"}, {"sha": "afd4f298a97ddc600357cf4167670acbdf40811e", "filename": "src/test/run-make/mismatching-target-triples/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -7,5 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![feature(no_std)]\n #![no_std]\n #![crate_type = \"lib\"]"}, {"sha": "0bec6148189a908ea43df5f599c278c5f76236db", "filename": "src/test/run-make/no-duplicate-libs/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(lang_items, no_std)]\n #![no_std]\n-#![feature(lang_items)]\n #![crate_type = \"dylib\"]\n \n extern crate libc;"}, {"sha": "9e8afdc5696ed6dd604cd78a4acc655ad207517d", "filename": "src/test/run-make/no-duplicate-libs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(lang_items, no_std)]\n #![no_std]\n-#![feature(lang_items)]\n #![crate_type = \"dylib\"]\n \n extern crate libc;"}, {"sha": "6aff4c9b3d5a3c1cb03d52fe67281ae870d51b2c", "filename": "src/test/run-make/pretty-expanded-hygiene/input.pp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // minimal junk\n+#![feature(no_std)]\n #![no_std]\n \n "}, {"sha": "a46fa12ac05201c595ab0f215c6d662b29abad52", "filename": "src/test/run-make/pretty-expanded-hygiene/input.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // minimal junk\n+#![feature(no_std)]\n #![no_std]\n \n macro_rules! foo {"}, {"sha": "834a2adf01fd3075bfa44ef33454e2504f68f3fd", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -12,6 +12,7 @@\n #![crate_type = \"lib\"]\n // we can compile to a variety of platforms, because we don't need\n // cross-compiled standard libraries.\n+#![feature(no_std)]\n #![no_std]\n \n #![feature(simd, simd_ffi, link_llvm_intrinsics, lang_items)]\n@@ -74,7 +75,7 @@ trait Sized {}\n #[lang = \"copy\"]\n trait Copy {}\n \n-mod std {\n+mod core {\n     pub mod marker {\n         pub use Copy;\n     }"}, {"sha": "365fc039a4ec37a6f8a2f93da4d6d437ecea7dc2", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items)]\n+#![feature(lang_items, no_std)]\n #![no_std]\n \n #[lang=\"copy\"]"}, {"sha": "d3034c2d48529dfa21ed85c3fc4a4627a521b6c4", "filename": "src/test/run-pass/derive-no-std.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+extern crate core;\n+extern crate rand;\n+extern crate \"serialize\" as rustc_serialize;\n+extern crate collections;\n+\n+// Issue #16803\n+\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Default, Copy)]\n+struct Foo {\n+    x: u32,\n+}\n+\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Copy)]\n+enum Bar {\n+    Qux,\n+    Quux(u32),\n+}\n+\n+#[derive(FromPrimitive)]\n+enum Baz { A=0, B=5, }\n+\n+fn main() {\n+    Foo { x: 0 };\n+    Bar::Quux(3);\n+    Baz::A;\n+}"}, {"sha": "30c2aec33ad1ba51de99485c0fe4fc2b946b435c", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(lang_items, start, no_std)]\n+#![no_std]\n+\n+extern crate \"std\" as other;\n+\n+#[macro_use] extern crate core;\n+#[macro_use] extern crate collections;\n+\n+use core::slice::SliceExt;\n+\n+#[start]\n+fn start(_argc: int, _argv: *const *const u8) -> int {\n+    for _ in [1,2,3].iter() { }\n+    0\n+}"}, {"sha": "44d80490e693bec8fa37366ca99a57ac6edb8f15", "filename": "src/test/run-pass/format-no-std.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(lang_items, start, no_std)]\n+#![no_std]\n+\n+extern crate \"std\" as other;\n+\n+#[macro_use] extern crate core;\n+#[macro_use] extern crate collections;\n+\n+use collections::string::ToString;\n+\n+#[start]\n+fn start(_argc: int, _argv: *const *const u8) -> int {\n+    let s = format!(\"{}\", 1i);\n+    assert_eq!(s, \"1\".to_string());\n+\n+    let s = format!(\"test\");\n+    assert_eq!(s, \"test\".to_string());\n+\n+    let s = format!(\"{test}\", test=3i);\n+    assert_eq!(s, \"3\".to_string());\n+\n+    let s = format!(\"hello {}\", \"world\");\n+    assert_eq!(s, \"hello world\".to_string());\n+\n+    0\n+}"}, {"sha": "350ec68a7d1495347ffe02ba11595b627cdb5ef9", "filename": "src/test/run-pass/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flang-item-public.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -12,8 +12,8 @@\n // ignore-android\n // ignore-windows #13361\n \n+#![feature(lang_items, start, no_std)]\n #![no_std]\n-#![feature(lang_items, start)]\n \n extern crate \"lang-item-public\" as lang_lib;\n "}, {"sha": "f5f34607aff7b8955a8e0081915c83604503c253", "filename": "src/test/run-pass/no-std-xcrate2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -16,6 +16,7 @@\n // This tests that libraries built with #[no_std] can be linked to crates with\n // #[no_std] and actually run.\n \n+#![feature(no_std)]\n #![no_std]\n \n extern crate no_std_crate;"}, {"sha": "197890c1277126c1e607c3d4e555dbd7012bdba5", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -12,8 +12,8 @@\n \n // Smallest \"hello world\" with a libc runtime\n \n+#![feature(intrinsics, lang_items, start, no_std)]\n #![no_std]\n-#![feature(intrinsics, lang_items, start)]\n \n extern crate libc;\n "}, {"sha": "65a392e63c51001007737b1046f3dc31f692871f", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -10,7 +10,7 @@\n // except according to those terms.\n \n #![allow(unused_imports)]\n-#![feature(start)]\n+#![feature(start, no_std)]\n #![no_std]\n \n extern crate std;"}, {"sha": "47b87fce2abaf7b6d0669241a75ad48902178a73", "filename": "src/test/run-pass/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8740719c1b427f79b67d6bc51e9d448dd9c49/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs?ref=74b8740719c1b427f79b67d6bc51e9d448dd9c49", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start)]\n+#![feature(lang_items, start, no_std)]\n #![no_std]\n \n extern crate \"std\" as other;"}]}