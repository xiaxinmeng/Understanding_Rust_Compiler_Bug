{"sha": "718d53b0cb7dde93499cb92950d60b412f5a3d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOGQ1M2IwY2I3ZGRlOTM0OTljYjkyOTUwZDYwYjQxMmY1YTNkMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-20T08:15:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-20T08:15:15Z"}, "message": "Auto merge of #87224 - RalfJung:miri-ptr-oob, r=oli-obk\n\nmiri: better ptr-out-of-bounds errors\n\nFor offsets larger than `isize::MAX`, display them as negative offsets.\n\nr? `@oli-obk`", "tree": {"sha": "d0b67c2ac9d69e7760140c43a8464ac3233c3b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b67c2ac9d69e7760140c43a8464ac3233c3b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/718d53b0cb7dde93499cb92950d60b412f5a3d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/718d53b0cb7dde93499cb92950d60b412f5a3d05", "html_url": "https://github.com/rust-lang/rust/commit/718d53b0cb7dde93499cb92950d60b412f5a3d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/718d53b0cb7dde93499cb92950d60b412f5a3d05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72c360a30f9a8160e4f40340cecc9b1ce979cd7", "html_url": "https://github.com/rust-lang/rust/commit/a72c360a30f9a8160e4f40340cecc9b1ce979cd7"}, {"sha": "bed3b965aef7f3a3da789b4e0493fa77f75440de", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed3b965aef7f3a3da789b4e0493fa77f75440de", "html_url": "https://github.com/rust-lang/rust/commit/bed3b965aef7f3a3da789b4e0493fa77f75440de"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "94ac303b109a52011f576fdc18005eb025a85f48", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=718d53b0cb7dde93499cb92950d60b412f5a3d05", "patch": "@@ -240,12 +240,13 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Dereferencing a dangling pointer after it got freed.\n     PointerUseAfterFree(AllocId),\n     /// Used a pointer outside the bounds it is valid for.\n+    /// (If `ptr_size > 0`, determines the size of the memory range that was expected to be in-bounds.)\n     PointerOutOfBounds {\n         alloc_id: AllocId,\n-        offset: Size,\n-        size: Size,\n+        alloc_size: Size,\n+        ptr_offset: i64,\n+        ptr_size: Size,\n         msg: CheckInAllocMsg,\n-        allocation_size: Size,\n     },\n     /// Using an integer as a pointer in the wrong way.\n     DanglingIntPointer(u64, CheckInAllocMsg),\n@@ -318,24 +319,25 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             PointerUseAfterFree(a) => {\n                 write!(f, \"pointer to {} was dereferenced after this allocation got freed\", a)\n             }\n-            PointerOutOfBounds { alloc_id, offset, size: Size::ZERO, msg, allocation_size } => {\n+            PointerOutOfBounds { alloc_id, alloc_size, ptr_offset, ptr_size: Size::ZERO, msg } => {\n                 write!(\n                     f,\n-                    \"{}{} has size {}, so pointer at offset {} is out-of-bounds\",\n+                    \"{}{alloc_id} has size {alloc_size}, so pointer at offset {ptr_offset} is out-of-bounds\",\n                     msg,\n-                    alloc_id,\n-                    allocation_size.bytes(),\n-                    offset.bytes(),\n+                    alloc_id = alloc_id,\n+                    alloc_size = alloc_size.bytes(),\n+                    ptr_offset = ptr_offset,\n                 )\n             }\n-            PointerOutOfBounds { alloc_id, offset, size, msg, allocation_size } => write!(\n+            PointerOutOfBounds { alloc_id, alloc_size, ptr_offset, ptr_size, msg } => write!(\n                 f,\n-                \"{}{} has size {}, so pointer to {} bytes starting at offset {} is out-of-bounds\",\n+                \"{}{alloc_id} has size {alloc_size}, so pointer to {ptr_size} byte{ptr_size_p} starting at offset {ptr_offset} is out-of-bounds\",\n                 msg,\n-                alloc_id,\n-                allocation_size.bytes(),\n-                size.bytes(),\n-                offset.bytes(),\n+                alloc_id = alloc_id,\n+                alloc_size = alloc_size.bytes(),\n+                ptr_size = ptr_size.bytes(),\n+                ptr_size_p = pluralize!(ptr_size.bytes()),\n+                ptr_offset = ptr_offset,\n             ),\n             DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n                 write!(f, \"null pointer is not a valid pointer for this operation\")"}, {"sha": "568b3f252bf5f450efa6c5ea34d4879ed5ef17e5", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=718d53b0cb7dde93499cb92950d60b412f5a3d05", "patch": "@@ -36,6 +36,20 @@ pub trait PointerArithmetic: HasDataLayout {\n         i64::try_from(max_isize_plus_1 - 1).unwrap()\n     }\n \n+    #[inline]\n+    fn machine_usize_to_isize(&self, val: u64) -> i64 {\n+        let val = val as i64;\n+        // Now clamp into the machine_isize range.\n+        if val > self.machine_isize_max() {\n+            // This can only happen the the ptr size is < 64, so we know max_usize_plus_1 fits into\n+            // i64.\n+            let max_usize_plus_1 = 1u128 << self.pointer_size().bits();\n+            val - i64::try_from(max_usize_plus_1).unwrap()\n+        } else {\n+            val\n+        }\n+    }\n+\n     /// Helper function: truncate given value-\"overflowed flag\" pair to pointer size and\n     /// update \"overflowed flag\" if there was an overflow.\n     /// This should be called by all the other methods before returning!"}, {"sha": "6dcd944a1c3f22cc7645704784c76d9b1184a771", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=718d53b0cb7dde93499cb92950d60b412f5a3d05", "patch": "@@ -372,7 +372,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         )\n     }\n \n-    /// Check if the given pointerpoints to live memory of given `size` and `align`\n+    /// Check if the given pointer points to live memory of given `size` and `align`\n     /// (ignoring `M::enforce_alignment`). The caller can control the error message for the\n     /// out-of-bounds case.\n     #[inline(always)]\n@@ -451,11 +451,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 None\n             }\n             Ok((alloc_id, offset, ptr)) => {\n-                let (allocation_size, alloc_align, ret_val) = alloc_size(alloc_id, offset, ptr)?;\n+                let (alloc_size, alloc_align, ret_val) = alloc_size(alloc_id, offset, ptr)?;\n                 // Test bounds. This also ensures non-null.\n                 // It is sufficient to check this for the end pointer. Also check for overflow!\n-                if offset.checked_add(size, &self.tcx).map_or(true, |end| end > allocation_size) {\n-                    throw_ub!(PointerOutOfBounds { alloc_id, offset, size, allocation_size, msg })\n+                if offset.checked_add(size, &self.tcx).map_or(true, |end| end > alloc_size) {\n+                    throw_ub!(PointerOutOfBounds {\n+                        alloc_id,\n+                        alloc_size,\n+                        ptr_offset: self.machine_usize_to_isize(offset.bytes()),\n+                        ptr_size: size,\n+                        msg,\n+                    })\n                 }\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds."}, {"sha": "42a285a6eab4972fcfc2c9e235949f9d77a4d238", "filename": "src/test/ui/consts/offset_ub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718d53b0cb7dde93499cb92950d60b412f5a3d05/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs?ref=718d53b0cb7dde93499cb92950d60b412f5a3d05", "patch": "@@ -13,6 +13,7 @@ pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX)\n pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) }; //~NOTE\n pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) }; //~NOTE\n pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) }; //~NOTE\n+pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) }; //~NOTE\n \n pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) }; //~NOTE\n pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) }; //~NOTE"}, {"sha": "66a2722ed4acd1d244f4c9818fe1589ddb35875f", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/718d53b0cb7dde93499cb92950d60b412f5a3d05/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=718d53b0cb7dde93499cb92950d60b412f5a3d05", "patch": "@@ -102,13 +102,27 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 bytes starting at offset 0 is out-of-bounds\n+   |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_ub.rs:17:50\n+  ::: $DIR/offset_ub.rs:16:49\n+   |\n+LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n+   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:16:49\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   | \n+  ::: $DIR/offset_ub.rs:18:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:17:50\n+   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:18:50\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -119,10 +133,10 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  0x1 is not a valid pointer\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_ub.rs:18:42\n+  ::: $DIR/offset_ub.rs:19:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n-   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:18:42\n+   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:19:42\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -133,10 +147,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: 0x0 is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_ub.rs:21:50\n+  ::: $DIR/offset_ub.rs:22:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:21:50\n+   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:22:50\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -147,11 +161,11 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  0x7f..f is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_ub.rs:24:47\n+  ::: $DIR/offset_ub.rs:25:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n-   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:24:47\n+   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:25:47\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}