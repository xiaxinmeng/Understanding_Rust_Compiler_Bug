{"sha": "84f33fb13415b74fc5b29ee4162efb86f8b06e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjMzZmIxMzQxNWI3NGZjNWIyOWVlNDE2MmVmYjg2ZjhiMDZlOWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-16T01:31:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-16T01:31:20Z"}, "message": "Cleanup trait callees", "tree": {"sha": "6b6e0a04497daf0c6bd0069dc515000ead6c0fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b6e0a04497daf0c6bd0069dc515000ead6c0fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f33fb13415b74fc5b29ee4162efb86f8b06e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f33fb13415b74fc5b29ee4162efb86f8b06e9c", "html_url": "https://github.com/rust-lang/rust/commit/84f33fb13415b74fc5b29ee4162efb86f8b06e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f33fb13415b74fc5b29ee4162efb86f8b06e9c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6badef49fe502ca22aaabd4309bd899eea4144d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6badef49fe502ca22aaabd4309bd899eea4144d4", "html_url": "https://github.com/rust-lang/rust/commit/6badef49fe502ca22aaabd4309bd899eea4144d4"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "85b9e16e5cca117f8d4662a01155dc9de978a031", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/84f33fb13415b74fc5b29ee4162efb86f8b06e9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f33fb13415b74fc5b29ee4162efb86f8b06e9c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=84f33fb13415b74fc5b29ee4162efb86f8b06e9c", "patch": "@@ -440,39 +440,31 @@ pub fn trans_trait_callee<'a>(\n     let _icx = push_ctxt(\"impl::trans_trait_callee\");\n     let mut bcx = bcx;\n \n-    // make a local copy for trait if needed\n-    let self_ty = expr_ty_adjusted(bcx, self_expr);\n-    let self_scratch = match ty::get(self_ty).sty {\n-        ty::ty_trait(_, _, ty::RegionTraitStore(..), _, _) => {\n-            unpack_datum!(bcx, expr::trans(bcx, self_expr))\n-        }\n-        _ => {\n-            // Arrange a temporary cleanup for the object in case something\n-            // should go wrong before the method is actually *invoked*.\n-            let datum = unpack_datum!(\n-                bcx,\n-                lvalue_scratch_datum(\n-                    bcx, self_ty, \"__trait_callee\", false, arg_cleanup_scope, (),\n-                    |(), bcx, llval| expr::trans_into(bcx, self_expr,\n-                                                      expr::SaveIn(llval))));\n-            datum.to_expr_datum()\n-        }\n-    };\n+    // Translate self_datum and take ownership of the value by\n+    // converting to an rvalue.\n+    let self_datum = unpack_datum!(\n+        bcx, expr::trans(bcx, self_expr));\n+    let self_datum = unpack_datum!(\n+        bcx, self_datum.to_rvalue_datum(bcx, \"trait_callee\"));\n+\n+    // Convert to by-ref since `trans_trait_callee_from_llval` wants it\n+    // that way.\n+    let self_datum = unpack_datum!(\n+        bcx, self_datum.to_ref_datum(bcx));\n+\n+    // Arrange cleanup in case something should go wrong before the\n+    // actual call occurs.\n+    let llval = self_datum.add_clean(bcx.fcx, arg_cleanup_scope);\n \n     let callee_ty = node_id_type(bcx, callee_id);\n-    assert!(self_scratch.kind.is_by_ref()); // FIXME why special case above??\n-    trans_trait_callee_from_llval(bcx,\n-                                  callee_ty,\n-                                  n_method,\n-                                  self_scratch.val)\n+    trans_trait_callee_from_llval(bcx, callee_ty, n_method, llval)\n }\n \n-pub fn trans_trait_callee_from_llval<'a>(\n-                                     bcx: &'a Block<'a>,\n-                                     callee_ty: ty::t,\n-                                     n_method: uint,\n-                                     llpair: ValueRef)\n-                                  -> Callee<'a> {\n+pub fn trans_trait_callee_from_llval<'a>(bcx: &'a Block<'a>,\n+                                         callee_ty: ty::t,\n+                                         n_method: uint,\n+                                         llpair: ValueRef)\n+                                         -> Callee<'a> {\n     /*!\n      * Same as `trans_trait_callee()` above, except that it is given\n      * a by-ref pointer to the object pair.\n@@ -641,8 +633,8 @@ pub fn trans_trait_cast<'a>(bcx: &'a Block<'a>,\n     /*!\n      * Generates the code to convert from a pointer (`~T`, `&T`, etc)\n      * into an object (`~Trait`, `&Trait`, etc). This means creating a\n-     * pair where the first word is the pointer and the second word is\n-     * an appropriate vtable.\n+     * pair where the first word is the vtable and the second word is\n+     * the pointer.\n      */\n \n     let mut bcx = bcx;"}]}