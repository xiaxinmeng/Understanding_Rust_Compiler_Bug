{"sha": "2e8b4a753db244097b11ef111e89c95d88e625ac", "node_id": "C_kwDOAAsO6NoAKDJlOGI0YTc1M2RiMjQ0MDk3YjExZWYxMTFlODljOTVkODhlNjI1YWM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-23T14:52:34Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-23T15:10:48Z"}, "message": "Do not display `~const Drop` in rustdoc", "tree": {"sha": "bf9ae7d35cf0ae18c6de81fa75662336bc9d374d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf9ae7d35cf0ae18c6de81fa75662336bc9d374d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e8b4a753db244097b11ef111e89c95d88e625ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmHEkXgACgkQbQF6ltjm\nwvnG+Q/9FRa3vV4YlrdviZPvPS+MHKUWGOU4+TRMcbgqXuA0oGMi1Gx31Hs58MUs\n8TScKVA5UI8VYjNiKdB1u/wJjNUj0FVu0Ojsft58Nwu/zbX+N9YXdpcone6j7/o8\nHJ7IQEf3ZVroy3jXVqJ7YqUQ61mCji07AfesTehruz9NRARRWGVnCKFwJM+uovXL\nLvfhekXWUEitFxK/QXcfVRtNpa6o/tyyrrtL2B5cysITjfPOpg9rcbt2kWHTVvob\nG8Dp8xtzXMchGlfgQkfOA/fKhOAvFIexS44aQQNu/fctmcrCSp/UctrOLg4+Cj1u\ndGj0Q100LkS9eLZ5ZO57DlMw9qm2+zE0CKnaK18C3m9R1jvuQsdGmtww3XLl0d4D\n+nzvqa2YeOEF2D4EkXwyncjKIUAiErEYKpX3pTrJn1Dv2psR45LSEKl4ddF7Z+qx\nwLooGG2Hs2A5QgIi/muQ0haAkyeF+tTuGYAtbDRiC/B9uMTd46ezxHVNP1HEKwSu\n5VQKbL7dWbYF8PBhc3zEAcDSRv5iLtH5GI5GMczQ444LLOkoJY+EWpC/qa170DZ7\nAag0WjRxDfW2TzaJ2Qd0zOUtCdx3RT8csQt2y5C2iI59obDs58gnHPkaeyoTtpuc\nWlfL6NaZyii/j8hRbjcbYmNOZzvAnljOPPW7r7svSNSTdb6T8g4=\n=VszF\n-----END PGP SIGNATURE-----", "payload": "tree bf9ae7d35cf0ae18c6de81fa75662336bc9d374d\nparent c1d301bb29fd1b9f6f42de11d52015ae464cc8b2\nauthor Deadbeef <ent3rm4n@gmail.com> 1640271154 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1640272248 +0800\n\nDo not display `~const Drop` in rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8b4a753db244097b11ef111e89c95d88e625ac", "html_url": "https://github.com/rust-lang/rust/commit/2e8b4a753db244097b11ef111e89c95d88e625ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e8b4a753db244097b11ef111e89c95d88e625ac/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "html_url": "https://github.com/rust-lang/rust/commit/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "dbed66421e56cb76258632631377cb8535b725c7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2e8b4a753db244097b11ef111e89c95d88e625ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8b4a753db244097b11ef111e89c95d88e625ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2e8b4a753db244097b11ef111e89c95d88e625ac", "patch": "@@ -96,9 +96,9 @@ impl Clean<Attributes> for [ast::Attribute] {\n     }\n }\n \n-impl Clean<GenericBound> for hir::GenericBound<'_> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n-        match *self {\n+impl Clean<Option<GenericBound>> for hir::GenericBound<'_> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Option<GenericBound> {\n+        Some(match *self {\n             hir::GenericBound::Outlives(lt) => GenericBound::Outlives(lt.clean(cx)),\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n@@ -118,9 +118,16 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n                 )\n             }\n             hir::GenericBound::Trait(ref t, modifier) => {\n+                // `T: ~const Drop` is not equivalent to `T: Drop`, and we don't currently document `~const` bounds\n+                // because of its experimental status, so just don't show these.\n+                if Some(t.trait_ref.trait_def_id().unwrap()) == cx.tcx.lang_items().drop_trait()\n+                    && hir::TraitBoundModifier::MaybeConst == modifier\n+                {\n+                    return None;\n+                }\n                 GenericBound::TraitBound(t.clean(cx), modifier)\n             }\n-        }\n+        })\n     }\n }\n \n@@ -255,14 +262,14 @@ impl Clean<WherePredicate> for hir::WherePredicate<'_> {\n                     .collect();\n                 WherePredicate::BoundPredicate {\n                     ty: wbp.bounded_ty.clean(cx),\n-                    bounds: wbp.bounds.iter().map(|x| x.clean(cx)).collect(),\n+                    bounds: wbp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n                     bound_params,\n                 }\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n                 lifetime: wrp.lifetime.clean(cx),\n-                bounds: wrp.bounds.iter().map(|x| x.clean(cx)).collect(),\n+                bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n             },\n \n             hir::WherePredicate::EqPredicate(ref wrp) => {\n@@ -276,7 +283,7 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Option<WherePredicate> {\n         let bound_predicate = self.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(pred) => Some(bound_predicate.rebind(pred).clean(cx)),\n+            ty::PredicateKind::Trait(pred) => bound_predicate.rebind(pred).clean(cx),\n             ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::Projection(pred) => Some(pred.clean(cx)),\n@@ -293,14 +300,22 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n     }\n }\n \n-impl<'a> Clean<WherePredicate> for ty::PolyTraitPredicate<'a> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> WherePredicate {\n+impl<'a> Clean<Option<WherePredicate>> for ty::PolyTraitPredicate<'a> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Option<WherePredicate> {\n+        // `T: ~const Drop` is not equivalent to `T: Drop`, and we don't currently document `~const` bounds\n+        // because of its experimental status, so just don't show these.\n+        if self.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+            && Some(self.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().drop_trait()\n+        {\n+            return None;\n+        }\n+\n         let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n-        WherePredicate::BoundPredicate {\n+        Some(WherePredicate::BoundPredicate {\n             ty: poly_trait_ref.skip_binder().self_ty().clean(cx),\n             bounds: vec![poly_trait_ref.clean(cx)],\n             bound_params: Vec::new(),\n-        }\n+        })\n     }\n }\n \n@@ -427,7 +442,7 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                 self.name.ident().name,\n                 GenericParamDefKind::Type {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n-                    bounds: self.bounds.iter().map(|x| x.clean(cx)).collect(),\n+                    bounds: self.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n                     default: default.map(|t| t.clean(cx)).map(Box::new),\n                     synthetic,\n                 },\n@@ -942,7 +957,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     TyMethodItem(t)\n                 }\n                 hir::TraitItemKind::Type(bounds, ref default) => {\n-                    let bounds = bounds.iter().map(|x| x.clean(cx)).collect();\n+                    let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n                     let default = default.map(|t| t.clean(cx));\n                     AssocTypeItem(bounds, default)\n                 }\n@@ -1352,7 +1367,7 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::OpaqueDef(item_id, _) => {\n                 let item = cx.tcx.hir().item(item_id);\n                 if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n-                    ImplTrait(ty.bounds.iter().map(|x| x.clean(cx)).collect())\n+                    ImplTrait(ty.bounds.iter().filter_map(|x| x.clean(cx)).collect())\n                 } else {\n                     unreachable!()\n                 }\n@@ -1756,7 +1771,7 @@ fn clean_maybe_renamed_item(\n                 kind: ConstantKind::Local { body: body_id, def_id },\n             }),\n             ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n-                bounds: ty.bounds.iter().map(|x| x.clean(cx)).collect(),\n+                bounds: ty.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n                 generics: ty.generics.clean(cx),\n             }),\n             ItemKind::TyAlias(hir_ty, ref generics) => {\n@@ -1778,7 +1793,7 @@ fn clean_maybe_renamed_item(\n             }),\n             ItemKind::TraitAlias(ref generics, bounds) => TraitAliasItem(TraitAlias {\n                 generics: generics.clean(cx),\n-                bounds: bounds.iter().map(|x| x.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n             }),\n             ItemKind::Union(ref variant_data, ref generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n@@ -1809,7 +1824,7 @@ fn clean_maybe_renamed_item(\n                     unsafety,\n                     items,\n                     generics: generics.clean(cx),\n-                    bounds: bounds.iter().map(|x| x.clean(cx)).collect(),\n+                    bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n                     is_auto: is_auto.clean(cx),\n                 })\n             }\n@@ -2096,9 +2111,9 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n             hir::TypeBindingKind::Equality { ref ty } => {\n                 TypeBindingKind::Equality { ty: ty.clean(cx) }\n             }\n-            hir::TypeBindingKind::Constraint { bounds } => {\n-                TypeBindingKind::Constraint { bounds: bounds.iter().map(|b| b.clean(cx)).collect() }\n-            }\n+            hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n+                bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n+            },\n         }\n     }\n }"}]}