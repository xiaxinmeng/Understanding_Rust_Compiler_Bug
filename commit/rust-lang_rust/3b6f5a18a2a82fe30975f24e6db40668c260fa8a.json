{"sha": "3b6f5a18a2a82fe30975f24e6db40668c260fa8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNmY1YTE4YTJhODJmZTMwOTc1ZjI0ZTZkYjQwNjY4YzI2MGZhOGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-24T19:15:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-24T19:15:21Z"}, "message": "Merge branch 'method-vis-parse'\n\nConflicts:\n\tsrc/libsyntax/parse/parser.rs", "tree": {"sha": "beb94a96a799e4a945233dc3bea6a828ec88c093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb94a96a799e4a945233dc3bea6a828ec88c093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6f5a18a2a82fe30975f24e6db40668c260fa8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6f5a18a2a82fe30975f24e6db40668c260fa8a", "html_url": "https://github.com/rust-lang/rust/commit/3b6f5a18a2a82fe30975f24e6db40668c260fa8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6f5a18a2a82fe30975f24e6db40668c260fa8a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da58a5bd6f921b446e46cf65790975598289308", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da58a5bd6f921b446e46cf65790975598289308", "html_url": "https://github.com/rust-lang/rust/commit/4da58a5bd6f921b446e46cf65790975598289308"}, {"sha": "27fb3fe90d53ecebb874d32f02433da5e3a62a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/27fb3fe90d53ecebb874d32f02433da5e3a62a23", "html_url": "https://github.com/rust-lang/rust/commit/27fb3fe90d53ecebb874d32f02433da5e3a62a23"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "1af516424ded2693815afe40d16ad5ecf2738fb1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b6f5a18a2a82fe30975f24e6db40668c260fa8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6f5a18a2a82fe30975f24e6db40668c260fa8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3b6f5a18a2a82fe30975f24e6db40668c260fa8a", "patch": "@@ -333,10 +333,10 @@ impl Parser {\n             let is_static = p.parse_staticness();\n             let static_sty = spanned(lo, p.span.hi, sty_static);\n \n+            let vis = p.parse_visibility();\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n-            let vis = p.parse_visibility();\n             let ident = p.parse_method_name();\n \n             let tps = p.parse_ty_params();\n@@ -2528,13 +2528,14 @@ impl Parser {\n         self.parse_value_ident()\n     }\n \n-    fn parse_method(pr: visibility) -> @method {\n+    fn parse_method() -> @method {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n \n         let is_static = self.parse_staticness();\n         let static_sty = spanned(lo, self.span.hi, sty_static);\n \n+        let visa = self.parse_visibility();\n         let pur = self.parse_fn_purity();\n         let ident = self.parse_method_name();\n         let tps = self.parse_ty_params();\n@@ -2549,7 +2550,7 @@ impl Parser {\n         @{ident: ident, attrs: attrs,\n           tps: tps, self_ty: self_ty, purity: pur, decl: decl,\n           body: body, id: self.get_id(), span: mk_sp(lo, body.span.hi),\n-          self_id: self.get_id(), vis: pr}\n+          self_id: self.get_id(), vis: visa}\n     }\n \n     fn parse_item_trait() -> item_info {\n@@ -2610,8 +2611,7 @@ impl Parser {\n             let mut meths = ~[];\n             self.expect(token::LBRACE);\n             while !self.eat(token::RBRACE) {\n-                let vis = self.parse_visibility();\n-                meths.push(self.parse_method(vis));\n+                meths.push(self.parse_method());\n             }\n             meths_opt = Some(move meths);\n         }\n@@ -2772,7 +2772,7 @@ impl Parser {\n             return a_var;\n         } else {\n             self.obsolete(copy self.span, ObsoleteClassMethod);\n-            return @method_member(self.parse_method(vis));\n+            return @method_member(self.parse_method());\n         }\n     }\n \n@@ -2878,9 +2878,9 @@ impl Parser {\n         (id, item_mod(m), Some(inner_attrs.inner))\n     }\n \n-    fn parse_item_foreign_fn(vis: ast::visibility,\n-                             +attrs: ~[attribute]) -> @foreign_item {\n+    fn parse_item_foreign_fn( +attrs: ~[attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n+        let vis = self.parse_visibility();\n         let purity = self.parse_fn_purity();\n         let t = self.parse_fn_header();\n         let (decl, _) = self.parse_fn_decl(|p| p.parse_arg());\n@@ -2928,7 +2928,7 @@ impl Parser {\n         if self.is_keyword(~\"const\") {\n             self.parse_item_foreign_const(vis, move attrs)\n         } else {\n-            self.parse_item_foreign_fn(vis, move attrs)\n+            self.parse_item_foreign_fn( move attrs)\n         }\n     }\n \n@@ -3249,7 +3249,7 @@ impl Parser {\n                                           maybe_append(attrs, extra_attrs)));\n         } else if foreign_items_allowed &&\n             (self.is_keyword(~\"fn\") || self.is_keyword(~\"pure\")) {\n-                let item = self.parse_item_foreign_fn(visibility, attrs);\n+                let item = self.parse_item_foreign_fn(attrs);\n                 return iovi_foreign_item(item);\n         } else if items_allowed && self.is_keyword(~\"unsafe\")\n             && self.look_ahead(1u) != token::LBRACE {"}, {"sha": "986d6a1817b27e374856b40b3bcb63dfbbda54d8", "filename": "src/test/run-pass/issue-3753.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3b6f5a18a2a82fe30975f24e6db40668c260fa8a/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6f5a18a2a82fe30975f24e6db40668c260fa8a/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=3b6f5a18a2a82fe30975f24e6db40668c260fa8a", "patch": "@@ -0,0 +1,27 @@\n+// Issue #3656\n+// Issue Name: pub method preceeded by attribute can't be parsed\n+// Abstract: Visibility parsing failed when compiler parsing\n+\n+struct Point {\n+    x: float,\n+    y: float\n+}\n+\n+pub enum Shape {\n+    Circle(Point, float),\n+    Rectangle(Point, Point)\n+}\n+\n+pub impl Shape {\n+    pub fn area(sh: Shape) -> float {\n+        match sh {\n+            Circle(_, size) => float::consts::pi * size * size,\n+            Rectangle(Point {x, y}, Point {x: x2, y: y2}) => (x2 - x) * (y2 - y)\n+        }\n+    }\n+}\n+\n+fn main(){\n+    let s = Circle(Point { x: 1f, y: 2f }, 3f);\n+    io::println(fmt!(\"%f\", s.area(s)));\n+}\n\\ No newline at end of file"}]}