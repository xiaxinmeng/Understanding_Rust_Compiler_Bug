{"sha": "b181f5a9231c133e2809277932d3a92cb2627b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxODFmNWE5MjMxYzEzM2UyODA5Mjc3OTMyZDNhOTJjYjI2MjdiNzA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-30T23:13:26Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-02T07:47:08Z"}, "message": "Make it possible to have unboxed condvars on specific platforms.\n\nThis commit keeps all condvars boxed on all platforms, but makes it\ntrivial to remove the box on some platforms later.", "tree": {"sha": "b5c547a0a186b8ad774232401fc6908264746273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5c547a0a186b8ad774232401fc6908264746273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b181f5a9231c133e2809277932d3a92cb2627b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b181f5a9231c133e2809277932d3a92cb2627b70", "html_url": "https://github.com/rust-lang/rust/commit/b181f5a9231c133e2809277932d3a92cb2627b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b181f5a9231c133e2809277932d3a92cb2627b70/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc81cbdcb14bfaed773f0cd32f050caa108938e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc81cbdcb14bfaed773f0cd32f050caa108938e2", "html_url": "https://github.com/rust-lang/rust/commit/dc81cbdcb14bfaed773f0cd32f050caa108938e2"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "148a684370e09688ec29aab7e5eb32fad5b97689", "filename": "library/std/src/sys/cloudabi/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -15,6 +15,8 @@ pub struct Condvar {\n     condvar: UnsafeCell<AtomicU32>,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n "}, {"sha": "b45e8718f088e211a6ebef0f9473054cb70a3470", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -14,6 +14,8 @@ pub struct Condvar {\n     sem2: *const c_void,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n "}, {"sha": "dfe22e6a1b37591e7ab8d6876ff9186074bb2097", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -7,6 +7,8 @@ pub struct Condvar {\n     inner: SpinMutex<WaitVariable<()>>,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n         Condvar { inner: SpinMutex::new(WaitVariable::new(())) }"}, {"sha": "e38f91af9f0b9ba6d17543c1a216002092f3e6a6", "filename": "library/std/src/sys/unix/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -6,6 +6,8 @@ pub struct Condvar {\n     inner: UnsafeCell<libc::pthread_cond_t>,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n "}, {"sha": "e49f21bef785a05feeb033088e4a0bddf3cfb991", "filename": "library/std/src/sys/unsupported/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -3,6 +3,8 @@ use crate::time::Duration;\n \n pub struct Condvar {}\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n         Condvar {}"}, {"sha": "b4724be7c7c3b38b31e65fba624978384e98e0d5", "filename": "library/std/src/sys/vxworks/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -6,6 +6,8 @@ pub struct Condvar {\n     inner: UnsafeCell<libc::pthread_cond_t>,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n "}, {"sha": "304c3bb4c58aa3b0e2d1a5af76bfb62ec1dfdd9d", "filename": "library/std/src/sys/wasm/condvar_atomics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fcondvar_atomics.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -9,6 +9,8 @@ pub struct Condvar {\n     cnt: AtomicUsize,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n // Condition variables are implemented with a simple counter internally that is\n // likely to cause spurious wakeups. Blocking on a condition variable will first\n // read the value of the internal counter, unlock the given mutex, and then"}, {"sha": "2b2ff13c78b813667714f4540a88284f323dc467", "filename": "library/std/src/sys/windows/condvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -8,6 +8,8 @@ pub struct Condvar {\n     inner: UnsafeCell<c::CONDITION_VARIABLE>,\n }\n \n+pub type MovableCondvar = Box<Condvar>;\n+\n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n "}, {"sha": "2c02e1cd33c8165209c5b08333bdb0898882bc22", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b181f5a9231c133e2809277932d3a92cb2627b70/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=b181f5a9231c133e2809277932d3a92cb2627b70", "patch": "@@ -9,14 +9,14 @@ type CondvarCheck = <mutex_imp::MovableMutex as check::CondvarCheck>::Check;\n \n /// An OS-based condition variable.\n pub struct Condvar {\n-    inner: Box<imp::Condvar>,\n+    inner: imp::MovableCondvar,\n     check: CondvarCheck,\n }\n \n impl Condvar {\n     /// Creates a new condition variable for use.\n     pub fn new() -> Self {\n-        let mut c = box imp::Condvar::new();\n+        let mut c = imp::MovableCondvar::from(imp::Condvar::new());\n         unsafe { c.init() };\n         Self { inner: c, check: CondvarCheck::new() }\n     }"}]}