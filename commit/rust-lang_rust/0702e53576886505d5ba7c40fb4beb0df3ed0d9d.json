{"sha": "0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MDJlNTM1NzY4ODY1MDVkNWJhN2M0MGZiNGJlYjBkZjNlZDBkOWQ=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-20T05:41:54Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-20T14:43:02Z"}, "message": "libstd: cleanup warnings", "tree": {"sha": "c24d01eee4068618854b667c783e1d6bfdd93210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24d01eee4068618854b667c783e1d6bfdd93210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "html_url": "https://github.com/rust-lang/rust/commit/0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bc4d1a1206ad5f4bb31475e17fc18ecf855ed8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc4d1a1206ad5f4bb31475e17fc18ecf855ed8e", "html_url": "https://github.com/rust-lang/rust/commit/3bc4d1a1206ad5f4bb31475e17fc18ecf855ed8e"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "7918abe4ae6a925066a41a9f539036c1b1ee9c33", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -20,7 +20,6 @@ use either::{Either, Left, Right};\n use kinds::Owned;\n use option::{Option, Some, None};\n use uint;\n-use vec;\n use vec::OwnedVector;\n use util::replace;\n use unstable::sync::{Exclusive, exclusive};"}, {"sha": "83bb9eb09088e423443ed168e1d0b244aea667fe", "filename": "src/libstd/old_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_iter.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -16,7 +16,7 @@\n \n #[allow(missing_doc)];\n \n-use cmp::{Eq, Ord};\n+use cmp::{Eq};\n use kinds::Copy;\n use option::{None, Option, Some};\n use vec;"}, {"sha": "59b40b93d4d16a0d28d6b9c80d133292a4ba826f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -959,12 +959,10 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             fclose(ostream);\n \n             // Give the new file the old file's permissions\n-            unsafe {\n-                if do str::as_c_str(to.to_str()) |to_buf| {\n-                    libc::chmod(to_buf, from_mode as mode_t)\n-                } != 0 {\n-                    return false; // should be a condition...\n-                }\n+            if do str::as_c_str(to.to_str()) |to_buf| {\n+                libc::chmod(to_buf, from_mode as mode_t)\n+            } != 0 {\n+                return false; // should be a condition...\n             }\n             return ok;\n         }"}, {"sha": "26dd4af45d6c33326da437fcbfd477ace08635b7", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -86,7 +86,6 @@ bounded and unbounded protocols allows for less code duplication.\n \n use container::Container;\n use cast::{forget, transmute, transmute_copy, transmute_mut};\n-use cast;\n use either::{Either, Left, Right};\n use iterator::IteratorUtil;\n use kinds::Owned;"}, {"sha": "77053f39677936bbb1f873ecda7002418776440c", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -79,7 +79,6 @@ use cast;\n use cell::Cell;\n use container::Map;\n use comm::{Chan, GenericChan};\n-use ptr;\n use hashmap::HashSet;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n use task::rt::rust_task;"}, {"sha": "64dd5bba6bcf828de6f19e2443ce64e7c9fa3412", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -15,7 +15,6 @@ Dynamic library facilities.\n A simple wrapper over the platforms dynamic library facilities\n \n */\n-use ptr;\n use cast;\n use path;\n use libc;"}, {"sha": "f81252274c49c446537d27d94fa53e5dc9c829e9", "filename": "src/libstd/unstable/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fglobal.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -105,7 +105,7 @@ unsafe fn global_data_modify_<T:Owned>(\n                 let dtor: ~fn() = match maybe_dtor {\n                     Some(dtor) => dtor,\n                     None => {\n-                        let dtor: ~fn() = || unsafe {\n+                        let dtor: ~fn() = || {\n                             let _destroy_value: ~T = transmute(data);\n                         };\n                         dtor"}, {"sha": "d37579b0c47cf8c526f50f6c8cdd1f95df50ee16", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -387,9 +387,6 @@ pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n pub fn start(main: *u8, argc: int, argv: **c_char,\n              crate_map: *u8) -> int {\n     use rt;\n-    use sys::Closure;\n-    use ptr;\n-    use cast;\n     use os;\n \n     unsafe {\n@@ -399,17 +396,8 @@ pub fn start(main: *u8, argc: int, argv: **c_char,\n                               crate_map as *c_void) as int;\n         } else {\n             return do rt::start(argc, argv as **u8, crate_map) {\n-                unsafe {\n-                    // `main` is an `fn() -> ()` that doesn't take an environment\n-                    // XXX: Could also call this as an `extern \"Rust\" fn` once they work\n-                    let main = Closure {\n-                        code: main as *(),\n-                        env: ptr::null(),\n-                    };\n-                    let mainfn: &fn() = cast::transmute(main);\n-\n-                    mainfn();\n-                }\n+                let main: extern \"Rust\" fn() = transmute(main);\n+                main();\n             };\n         }\n     }"}, {"sha": "7f683d0070fb3a38d68eb10ae6709b56da2799ad", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0702e53576886505d5ba7c40fb4beb0df3ed0d9d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0702e53576886505d5ba7c40fb4beb0df3ed0d9d", "patch": "@@ -19,7 +19,7 @@ use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n-use iterator::{Iterator, IteratorUtil};\n+use iterator::{Iterator};\n use iter::FromIter;\n use kinds::Copy;\n use libc;"}]}