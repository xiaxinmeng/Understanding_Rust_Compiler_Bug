{"sha": "a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyODM5MjQ2YmUwYTQxYTRmZTkwNWFiMGE1MmQxYTNjN2RiMzM5N2Q=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-01T02:14:27Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-01T07:05:12Z"}, "message": "cleanup for make check", "tree": {"sha": "e687716f19230ae60333333a82556bf417175f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e687716f19230ae60333333a82556bf417175f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "html_url": "https://github.com/rust-lang/rust/commit/a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af7c643f2555d476d6ad4dc6758fafada21b084", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af7c643f2555d476d6ad4dc6758fafada21b084", "html_url": "https://github.com/rust-lang/rust/commit/4af7c643f2555d476d6ad4dc6758fafada21b084"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "a1a026b908690aec1bee3bee96304b2bdb1a8608", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "patch": "@@ -286,7 +286,7 @@ pub fn load_link(mis: ~[@ast::meta_item]) -> (Option<~str>,\n     let mut uuid = None;\n     for mis.each |a| {\n         match a.node {\n-            ast::meta_name_value(v, ast::spanned { node: ast::lit_str(s),\n+            ast::meta_name_value(v, codemap::spanned { node: ast::lit_str(s),\n                                                    _ }) => {\n                 match v {\n                     ~\"name\" => name = Some(*s),\n@@ -314,7 +314,7 @@ pub fn load_crate(filename: &Path) -> Option<Crate> {\n \n     for c.node.attrs.each |a| {\n         match a.node.value.node {\n-            ast::meta_name_value(v, ast::spanned { node: ast::lit_str(_),\n+            ast::meta_name_value(v, codemap::spanned { node: ast::lit_str(_),\n                                                    _ }) => {\n                 match v {\n                     ~\"desc\" => desc = Some(v),"}, {"sha": "fd92b144b5d5ed5118426ebe178f408044bd82a5", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "patch": "@@ -74,12 +74,12 @@ pub fn common_exprs() -> ~[ast::expr] {\n             id: 0,\n             callee_id: -1,\n             node: e,\n-            span: ast_util::dummy_sp(),\n+            span: codemap::dummy_sp(),\n         }\n     }\n \n     fn dsl(l: ast::lit_) -> ast::lit {\n-        ast::spanned { node: l, span: ast_util::dummy_sp() }\n+        codemap::spanned { node: l, span: codemap::dummy_sp() }\n     }\n \n     ~[dse(ast::expr_break(option::None)),"}, {"sha": "9ffb29bc885c81942dee21378b87fefdd32f7fef", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "patch": "@@ -344,14 +344,15 @@ pub mod test {\n \n     use syntax::ast;\n     use syntax::ast_util;\n+    use syntax::codemap;\n \n     pub fn make_crate_type_attr(+t: ~str) -> ast::attribute {\n-        ast_util::respan(codemap::dummy_sp(), ast::attribute_ {\n+        codemap::respan(codemap::dummy_sp(), ast::attribute_ {\n             style: ast::attr_outer,\n-            value: ast_util::respan(codemap::dummy_sp(),\n+            value: codemap::respan(codemap::dummy_sp(),\n                 ast::meta_name_value(\n                     ~\"crate_type\",\n-                    ast_util::respan(codemap::dummy_sp(),\n+                    codemap::respan(codemap::dummy_sp(),\n                                      ast::lit_str(@t)))),\n             is_sugared_doc: false\n         })\n@@ -361,7 +362,7 @@ pub mod test {\n         let mut attrs = ~[];\n         if with_bin { attrs += ~[make_crate_type_attr(~\"bin\")]; }\n         if with_lib { attrs += ~[make_crate_type_attr(~\"lib\")]; }\n-        @ast_util::respan(codemap::dummy_sp(), ast::crate_ {\n+        @codemap::respan(codemap::dummy_sp(), ast::crate_ {\n             module: ast::_mod { view_items: ~[], items: ~[] },\n             attrs: attrs,\n             config: ~[]"}, {"sha": "646925222865fb472d4ddc4067e5df81eed0401a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2839246be0a41a4fe905ab0a52d1a3c7db3397d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a2839246be0a41a4fe905ab0a52d1a3c7db3397d", "patch": "@@ -1515,7 +1515,7 @@ pub impl Parser {\n             token::EQ => {\n                 self.bump();\n                 let rhs = self.parse_expr();\n-                self.mk_expr(lo, rhs.span.hi, expr_assign(lhs, rhs)) \n+                self.mk_expr(lo, rhs.span.hi, expr_assign(lhs, rhs))\n           }\n           token::BINOPEQ(op) => {\n               self.bump();\n@@ -1569,7 +1569,7 @@ pub impl Parser {\n             hi = elexpr.span.hi;\n         }\n         let q = {cond: cond, then: thn, els: els, lo: lo, hi: hi};\n-        f.mk_expr(q.lo, q.hi, expr_if(q.cond, q.then, q.els))\n+        self.mk_expr(q.lo, q.hi, expr_if(q.cond, q.then, q.els))\n     }\n \n     fn parse_fn_expr(proto: Proto) -> @expr {\n@@ -1582,7 +1582,7 @@ pub impl Parser {\n         let body = self.parse_block();\n \n         self.mk_expr(lo, body.span.hi,\n-                            expr_fn(proto, decl, body, capture_clause));\n+                            expr_fn(proto, decl, body, @()))\n     }\n \n     // `|args| { ... }` like in `do` expressions"}]}