{"sha": "07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "node_id": "C_kwDOAAsO6NoAKDA3YWNkYjQ4YTBlMGIyMmQwOGE0NWUzY2VkMDM3OGUwMDI3YjQwZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T14:12:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T14:12:54Z"}, "message": "Auto merge of #90724 - JohnTitor:rollup-zg0kbm3, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #87530 (Add comments regarding superfluous `!Sync` impls)\n - #90591 (treat illumos like solaris in failing ui tests which need it)\n - #90678 (Add some GATs-related regression tests)\n - #90688 (enable `dotprod` target feature in arm)\n - #90708 (Add a note about feature(explicit_generic_args_with_impl_trait) to the relevant error message)\n - #90720 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "293752c8d35925d50e081940e25afc4d0f63e360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/293752c8d35925d50e081940e25afc4d0f63e360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "html_url": "https://github.com/rust-lang/rust/commit/07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eee8b9c7bafade55981d155dae71657f1cc55a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee8b9c7bafade55981d155dae71657f1cc55a22", "html_url": "https://github.com/rust-lang/rust/commit/eee8b9c7bafade55981d155dae71657f1cc55a22"}, {"sha": "a0d580c12a6a4754bd5019b2e9b931401490e70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d580c12a6a4754bd5019b2e9b931401490e70c", "html_url": "https://github.com/rust-lang/rust/commit/a0d580c12a6a4754bd5019b2e9b931401490e70c"}], "stats": {"total": 162, "additions": 155, "deletions": 7}, "files": [{"sha": "7cd07e3847282b9d9405a5244414c2f49283adc8", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -888,9 +888,9 @@ dependencies = [\n \n [[package]]\n name = \"curl\"\n-version = \"0.4.39\"\n+version = \"0.4.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aaa3b8db7f3341ddef15786d250106334d4a6c4b0ae4a46cd77082777d9849b9\"\n+checksum = \"877cc2f9b8367e32b6dabb9d581557e651cb3aa693a37f8679091bbf42687d5d\"\n dependencies = [\n  \"curl-sys\",\n  \"libc\",\n@@ -903,9 +903,9 @@ dependencies = [\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.49+curl-7.79.1\"\n+version = \"0.4.50+curl-7.79.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e0f44960aea24a786a46907b8824ebc0e66ca06bf4e4978408c7499620343483\"\n+checksum = \"4856b76919dd599f31236bb18db5f5bd36e2ce131e64f857ca5c259665b76171\"\n dependencies = [\n  \"cc\",\n  \"libc\","}, {"sha": "b4420df5df417a67196e3b4c70c7013449ea2cff", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -20,6 +20,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"aes\", Some(sym::arm_target_feature)),\n     (\"sha2\", Some(sym::arm_target_feature)),\n     (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"dotprod\", Some(sym::arm_target_feature)),\n     (\"v5te\", Some(sym::arm_target_feature)),\n     (\"v6\", Some(sym::arm_target_feature)),\n     (\"v6k\", Some(sym::arm_target_feature)),"}, {"sha": "2f187997b55de0fbf10a7028524a44649b5d3a68", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -672,6 +672,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.span_label(span, \"explicit generic argument not allowed\");\n             }\n \n+            err.note(\n+                \"see issue #83701 <https://github.com/rust-lang/rust/issues/83701> \\\n+                 for more information\",\n+            );\n+            if tcx.sess.is_nightly_build() {\n+                err.help(\n+                    \"add `#![feature(explicit_generic_args_with_impl_trait)]` \\\n+                     to the crate attributes to enable\",\n+                );\n+            }\n+\n             err.emit();\n         }\n "}, {"sha": "03e33a1ff2bc3b77f1223b8056497f8e40763b29", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -313,6 +313,12 @@ pub struct Rc<T: ?Sized> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Send for Rc<T> {}\n+\n+// Note that this negative impl isn't strictly necessary for correctness,\n+// as `Rc` transitively contains a `Cell`, which is itself `!Sync`.\n+// However, given how important `Rc`'s `!Sync`-ness is,\n+// having an explicit negative impl is nice for documentation purposes\n+// and results in nicer error messages.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Sync for Rc<T> {}\n "}, {"sha": "06dc5ecf2ffa610a4f93509ad05e348c2a56b984", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -240,6 +240,11 @@ pub struct Cell<T: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for Cell<T> where T: Send {}\n \n+// Note that this negative impl isn't strictly necessary for correctness,\n+// as `Cell` wraps `UnsafeCell`, which is itself `!Sync`.\n+// However, given how important `Cell`'s `!Sync`-ness is,\n+// having an explicit negative impl is nice for documentation purposes\n+// and results in nicer error messages.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Sync for Cell<T> {}\n "}, {"sha": "87e4ad500404439b6fa4c585653f292c0fee2d7c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -3,6 +3,9 @@ error[E0632]: cannot provide explicit generic arguments when `impl Trait` is use\n    |\n LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n    |                    ^^^^^^ explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "e397390783f66857560e8be8ad68f9dda875d229", "filename": "src/test/ui/generic-associated-types/issue-88595.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -0,0 +1,24 @@\n+#![feature(generic_associated_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {}\n+\n+trait A<'a> {\n+    type B<'b>: Clone\n+    // FIXME(generic_associated_types): Remove one of the below bounds\n+    // https://github.com/rust-lang/rust/pull/90678#discussion_r744976085\n+    where\n+        'a: 'b, Self: 'a, Self: 'b;\n+\n+    fn a(&'a self) -> Self::B<'a>;\n+}\n+\n+struct C;\n+\n+impl<'a> A<'a> for C {\n+    type B<'b> = impl Clone;\n+    //~^ ERROR: lifetime bound not satisfied\n+    //~| ERROR: could not find defining uses\n+\n+    fn a(&'a self) -> Self::B<'a> {} //~ ERROR: non-defining opaque type use in defining scope\n+}"}, {"sha": "1948f82d0c97f80a694f7ed066708bb5df71dcd6", "filename": "src/test/ui/generic-associated-types/issue-88595.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -0,0 +1,40 @@\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/issue-88595.rs:19:5\n+   |\n+LL |     type B<'b> = impl Clone;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n+  --> $DIR/issue-88595.rs:18:6\n+   |\n+LL | impl<'a> A<'a> for C {\n+   |      ^^\n+note: but lifetime parameter must outlive the lifetime `'b` as defined here\n+  --> $DIR/issue-88595.rs:19:12\n+   |\n+LL |     type B<'b> = impl Clone;\n+   |            ^^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-88595.rs:23:23\n+   |\n+LL |     fn a(&'a self) -> Self::B<'a> {}\n+   |                       ^^^^^^^^^^^\n+   |\n+note: lifetime used multiple times\n+  --> $DIR/issue-88595.rs:18:6\n+   |\n+LL | impl<'a> A<'a> for C {\n+   |      ^^\n+LL |     type B<'b> = impl Clone;\n+   |            ^^\n+\n+error: could not find defining uses\n+  --> $DIR/issue-88595.rs:19:18\n+   |\n+LL |     type B<'b> = impl Clone;\n+   |                  ^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "f110b069383d3c18e878a1227a60b826623e5661", "filename": "src/test/ui/generic-associated-types/issue-90014.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+\n+#![feature(generic_associated_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+use std::future::Future;\n+\n+trait MakeFut {\n+    type Fut<'a> where Self: 'a;\n+    fn make_fut<'a>(&'a self) -> Self::Fut<'a>;\n+}\n+\n+impl MakeFut for &'_ mut () {\n+    type Fut<'a> = impl Future<Output = ()>;\n+    //~^ ERROR: the type `&mut ()` does not fulfill the required lifetime\n+\n+    fn make_fut<'a>(&'a self) -> Self::Fut<'a> {\n+        async { () }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "125d817e351f42a3463ce7d187b2b057741b0ff9", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -0,0 +1,15 @@\n+error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n+  --> $DIR/issue-90014.rs:14:5\n+   |\n+LL |     type Fut<'a> = impl Future<Output = ()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must outlive the lifetime `'a` as defined here\n+  --> $DIR/issue-90014.rs:14:14\n+   |\n+LL |     type Fut<'a> = impl Future<Output = ()>;\n+   |              ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "a25c85faf4e352c86d5ef7584fbbb81899aaa999", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -3,6 +3,9 @@ error[E0632]: cannot provide explicit generic arguments when `impl Trait` is use\n    |\n LL |     foo::<str>(\"\".to_string());\n    |           ^^^ explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "90c252537ef82b1b72f94e5fbc0a3fa3f3f9ec05", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -3,6 +3,9 @@ error[E0632]: cannot provide explicit generic arguments when `impl Trait` is use\n    |\n LL |     foo::<String>('a');\n    |           ^^^^^^ explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "84b98f71f4f0caefea1347220c2dec8ea761d96b", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -5,6 +5,9 @@ LL |     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n    |                        ^^^^^^^^^  ^^^^^^^^^^^^^ explicit generic argument not allowed\n    |                        |\n    |                        explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "6007eba8c0906a2f9307ee7887ad7cbaab0f3e90", "filename": "src/test/ui/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -15,6 +15,7 @@ mod rusti {\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n           target_os = \"fuchsia\",\n+          target_os = \"illumos\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "3bc2d16cf9df2a3c09b7a9f3bd3b0c44d90390b2", "filename": "src/test/ui/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -36,6 +36,7 @@ struct Outer {\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n           target_os = \"fuchsia\",\n+          target_os = \"illumos\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "5cb9ad31fbfcc0a2ac95366084206839702fa26d", "filename": "src/test/ui/synthetic-param.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.stderr?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -3,18 +3,27 @@ error[E0632]: cannot provide explicit generic arguments when `impl Trait` is use\n    |\n LL |     func::<u8>(42);\n    |            ^^ explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/synthetic-param.rs:23:17\n    |\n LL |     Foo::func::<u8>(42);\n    |                 ^^ explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/synthetic-param.rs:26:23\n    |\n LL |     Bar::<i8>::func::<u8>(42);\n    |                       ^^ explicit generic argument not allowed\n+   |\n+   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "868923e5932438bf8b8c5d48c0093090e5a01acb", "filename": "src/test/ui/x86stdcall.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07acdb48a0e0b22d08a45e3ced0378e0027b40eb/src%2Ftest%2Fui%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fx86stdcall.rs?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -28,10 +28,11 @@ pub fn main() {\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n           target_os = \"fuchsia\",\n+          target_os = \"illumos\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"vxworks\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"vxworks\"))]\n pub fn main() { }"}, {"sha": "2e2a16e983f597da62bc132eb191bc3276d4b1bb", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "patch": "@@ -1 +1 @@\n-Subproject commit 94ca096afbf25f670e76e07dca754fcfe27134be\n+Subproject commit 2e2a16e983f597da62bc132eb191bc3276d4b1bb"}]}