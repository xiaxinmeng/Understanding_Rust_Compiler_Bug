{"sha": "ff0a706a30567f297642ba1fa6ee9537ed82c40f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGE3MDZhMzA1NjdmMjk3NjQyYmExZmE2ZWU5NTM3ZWQ4MmM0MGY=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-09-24T13:52:33Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-09-24T13:52:33Z"}, "message": "Split folding ranges into editor and lsp parts", "tree": {"sha": "7bb8c79853cf24da27a66c2c891529bcd46d8cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb8c79853cf24da27a66c2c891529bcd46d8cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0a706a30567f297642ba1fa6ee9537ed82c40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a706a30567f297642ba1fa6ee9537ed82c40f", "html_url": "https://github.com/rust-lang/rust/commit/ff0a706a30567f297642ba1fa6ee9537ed82c40f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a706a30567f297642ba1fa6ee9537ed82c40f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2b2f1b48f86d59c3b746b72a14192f75419a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2b2f1b48f86d59c3b746b72a14192f75419a84", "html_url": "https://github.com/rust-lang/rust/commit/bd2b2f1b48f86d59c3b746b72a14192f75419a84"}], "stats": {"total": 191, "additions": 114, "deletions": 77}, "files": [{"sha": "b4c7db476bccecde681ff8657543ec7a9ee57084", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=ff0a706a30567f297642ba1fa6ee9537ed82c40f", "patch": "@@ -34,6 +34,7 @@ use imp::{AnalysisImpl, AnalysisHostImpl, FileResolverImp};\n pub use ra_editor::{\n     StructureNode, LineIndex, FileSymbol,\n     Runnable, RunnableKind, HighlightedRange, CompletionItem,\n+    Fold, FoldKind\n };\n pub use job::{JobToken, JobHandle};\n \n@@ -224,6 +225,10 @@ impl Analysis {\n     pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n         self.imp.diagnostics(file_id)\n     }\n+    pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n+        let file = self.imp.file_syntax(file_id);\n+        ra_editor::folding_ranges(&file)\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "4518e8d24d0e36ed8c2c771434706caac742b45f", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=ff0a706a30567f297642ba1fa6ee9537ed82c40f", "patch": "@@ -0,0 +1,86 @@\n+use std::collections::HashSet;\n+\n+use ra_syntax::{\n+    File, TextRange, SyntaxNodeRef,\n+    SyntaxKind,\n+    algo::{walk, Direction, siblings},\n+};\n+\n+pub enum FoldKind {\n+    Comment,\n+    Imports,\n+}\n+\n+pub struct Fold {\n+    pub range: TextRange,\n+    pub kind: FoldKind,\n+}\n+\n+pub fn folding_ranges(file: &File) -> Vec<Fold> {\n+    let syntax = file.syntax();\n+\n+    let mut res = vec![];\n+    let mut visited = HashSet::new();\n+\n+    for node in walk::preorder(syntax) {\n+        if visited.contains(&node) {\n+            continue;\n+        }\n+\n+        let range_and_kind = match node.kind() {\n+            SyntaxKind::COMMENT => (\n+                contiguous_range_for(SyntaxKind::COMMENT, node, &mut visited),\n+                Some(FoldKind::Comment),\n+            ),\n+            SyntaxKind::USE_ITEM => (\n+                contiguous_range_for(SyntaxKind::USE_ITEM, node, &mut visited),\n+                Some(FoldKind::Imports),\n+            ),\n+            _ => (None, None),\n+        };\n+\n+        match range_and_kind {\n+            (Some(range), Some(kind)) => {\n+                res.push(Fold {\n+                    range: range,\n+                    kind: kind\n+                });\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    res\n+}\n+\n+fn contiguous_range_for<'a>(\n+    kind: SyntaxKind,\n+    node: SyntaxNodeRef<'a>,\n+    visited: &mut HashSet<SyntaxNodeRef<'a>>,\n+) -> Option<TextRange> {\n+    visited.insert(node);\n+\n+    let left = node;\n+    let mut right = node;\n+    for node in siblings(node, Direction::Forward) {\n+        visited.insert(node);\n+        match node.kind() {\n+            SyntaxKind::WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),\n+            k => {\n+                if k == kind {\n+                    right = node\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    if left != right {\n+        Some(TextRange::from_to(\n+            left.range().start(),\n+            right.range().end(),\n+        ))\n+    } else {\n+        None\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "de929d73a6f90cf7e5060dee2b790cb66add54b8", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=ff0a706a30567f297642ba1fa6ee9537ed82c40f", "patch": "@@ -10,6 +10,7 @@ mod extend_selection;\n mod symbols;\n mod line_index;\n mod edit;\n+mod folding_ranges;\n mod code_actions;\n mod typing;\n mod completion;\n@@ -36,6 +37,7 @@ pub use self::{\n     },\n     typing::{join_lines, on_eq_typed},\n     completion::{scope_completion, CompletionItem},\n+    folding_ranges::{Fold, FoldKind, folding_ranges}\n };\n \n #[derive(Debug)]"}, {"sha": "51061543c29b4fb0a50670561bb447c7f630c907", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 21, "deletions": 77, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a706a30567f297642ba1fa6ee9537ed82c40f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=ff0a706a30567f297642ba1fa6ee9537ed82c40f", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{HashMap, HashSet};\n+use std::collections::{HashMap};\n \n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, DocumentSymbol,\n@@ -8,11 +8,9 @@ use languageserver_types::{\n     FoldingRange, FoldingRangeParams, FoldingRangeKind\n };\n use serde_json::to_value;\n-use ra_analysis::{Query, FileId, RunnableKind, JobToken};\n+use ra_analysis::{Query, FileId, RunnableKind, JobToken, FoldKind};\n use ra_syntax::{\n-    algo::{siblings, walk, Direction},\n-    text_utils::contains_offset_nonstrict,\n-    SyntaxKind, SyntaxNodeRef, TextRange\n+    text_utils::contains_offset_nonstrict\n };\n \n use ::{\n@@ -375,82 +373,28 @@ pub fn handle_folding_range(\n     _token: JobToken,\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_syntax(file_id);\n     let line_index = world.analysis().file_line_index(file_id);\n-    let syntax = file.syntax();\n-\n-    let mut res = vec![];\n-    let mut visited = HashSet::new();\n-\n-    for node in walk::preorder(syntax) {\n-        if visited.contains(&node) {\n-            continue;\n-        }\n-\n-        let range_and_kind = match node.kind() {\n-            SyntaxKind::COMMENT => (\n-                contiguous_range_for(SyntaxKind::COMMENT, node, &mut visited),\n-                Some(FoldingRangeKind::Comment),\n-            ),\n-            SyntaxKind::USE_ITEM => (\n-                contiguous_range_for(SyntaxKind::USE_ITEM, node, &mut visited),\n-                Some(FoldingRangeKind::Imports),\n-            ),\n-            _ => (None, None),\n-        };\n \n-        match range_and_kind {\n-            (Some(range), Some(kind)) => {\n-                let range = range.conv_with(&line_index);\n-                res.push(FoldingRange {\n-                    start_line: range.start.line,\n-                    start_character: Some(range.start.character),\n-                    end_line: range.end.line,\n-                    end_character: Some(range.start.character),\n-                    kind: Some(kind),\n-                });\n+    let res = Some(world.analysis()\n+        .folding_ranges(file_id)\n+        .into_iter()\n+        .map(|fold| {\n+            let kind = match fold.kind {\n+                FoldKind::Comment => FoldingRangeKind::Comment,\n+                FoldKind::Imports => FoldingRangeKind::Imports\n+            };\n+            let range = fold.range.conv_with(&line_index);\n+            FoldingRange {\n+                start_line: range.start.line,\n+                start_character: Some(range.start.character),\n+                end_line: range.end.line,\n+                end_character: Some(range.start.character),\n+                kind: Some(kind)\n             }\n-            _ => {}\n-        }\n-    }\n-\n-    if res.is_empty() {\n-        Ok(None)\n-    } else {\n-        Ok(Some(res))\n-    }\n-}\n+        })\n+        .collect());\n \n-fn contiguous_range_for<'a>(\n-    kind: SyntaxKind,\n-    node: SyntaxNodeRef<'a>,\n-    visited: &mut HashSet<SyntaxNodeRef<'a>>,\n-) -> Option<TextRange> {\n-    visited.insert(node);\n-\n-    let left = node;\n-    let mut right = node;\n-    for node in siblings(node, Direction::Forward) {\n-        visited.insert(node);\n-        match node.kind() {\n-            SyntaxKind::WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),\n-            k => {\n-                if k == kind {\n-                    right = node\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-    if left != right {\n-        Some(TextRange::from_to(\n-            left.range().start(),\n-            right.range().end(),\n-        ))\n-    } else {\n-        None\n-    }\n+    Ok(res)\n }\n \n pub fn handle_code_action("}]}