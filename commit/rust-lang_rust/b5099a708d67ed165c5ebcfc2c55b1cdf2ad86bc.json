{"sha": "b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MDk5YTcwOGQ2N2VkMTY1YzVlYmNmYzJjNTViMWNkZjJhZDg2YmM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-04T12:19:14Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-17T15:10:40Z"}, "message": "Replace dummy spans with empty spans", "tree": {"sha": "1ac1b574e5327975ef033bddea12f6df54043f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ac1b574e5327975ef033bddea12f6df54043f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "html_url": "https://github.com/rust-lang/rust/commit/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6bdf296a42caec8711adc075782e0b8c920aa1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bdf296a42caec8711adc075782e0b8c920aa1f", "html_url": "https://github.com/rust-lang/rust/commit/d6bdf296a42caec8711adc075782e0b8c920aa1f"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "2b4cd1016bdba92becb4f982a4dcb18fe6653bc4", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -1 +1 @@\n-Subproject commit 56444a4545bd71430d64b86b8a71714cfdbe9f5d\n+Subproject commit 2b4cd1016bdba92becb4f982a4dcb18fe6653bc4"}, {"sha": "26a7f50b997981742af6490e9e6650e6f2359150", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{Crate, Attribute, LitKind, StrStyle, ExprKind};\n use syntax::ast::{Unsafety, Constness, Generics, Mutability, Ty, Mac, Arg};\n use syntax::ast::{self, Ident, Item, ItemKind, TyKind, VisibilityKind, Expr};\n use syntax::attr;\n-use syntax::codemap::dummy_spanned;\n+use syntax::codemap::{dummy_spanned, respan};\n use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::base::Resolver;\n@@ -97,7 +97,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n         ]);\n         let mut items = vec![\n             f.cx.item_extern_crate(f.span, f.alloc),\n-            f.cx.item_use_simple(f.span, dummy_spanned(VisibilityKind::Inherited), super_path),\n+            f.cx.item_use_simple(f.span, respan(f.span.empty(), VisibilityKind::Inherited), super_path),\n         ];\n         for method in ALLOCATOR_METHODS {\n             items.push(f.allocator_fn(method));"}, {"sha": "c1340d0a28a4421fa15b28efaed0bfde5ad2d225", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -497,7 +497,7 @@ impl CrateStore for cstore::CStore {\n                 tokens: body.into(),\n                 legacy: def.legacy,\n             }),\n-            vis: codemap::dummy_spanned(ast::VisibilityKind::Inherited),\n+            vis: codemap::respan(local_span.empty(), ast::VisibilityKind::Inherited),\n             tokens: None,\n         })\n     }"}, {"sha": "bf82b0774238bf4879273b5c9df5c94d4ba6dea4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -43,7 +43,7 @@ use syntax::print::pprust::{\n     ty_to_string\n };\n use syntax::ptr::P;\n-use syntax::codemap::{Spanned, DUMMY_SP, dummy_spanned};\n+use syntax::codemap::{Spanned, DUMMY_SP, respan};\n use syntax_pos::*;\n \n use {escape, generated_code, lower_attributes, PathCollector, SaveContext};\n@@ -1134,6 +1134,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n     fn process_trait_item(&mut self, trait_item: &'l ast::TraitItem, trait_id: DefId) {\n         self.process_macro_use(trait_item.span);\n+        let vis_span = trait_item.span.empty();\n         match trait_item.node {\n             ast::TraitItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n@@ -1143,7 +1144,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     &ty,\n                     expr.as_ref().map(|e| &**e),\n                     trait_id,\n-                    dummy_spanned(ast::VisibilityKind::Public),\n+                    respan(vis_span, ast::VisibilityKind::Public),\n                     &trait_item.attrs,\n                 );\n             }\n@@ -1154,7 +1155,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     trait_item.id,\n                     trait_item.ident,\n                     &trait_item.generics,\n-                    dummy_spanned(ast::VisibilityKind::Public),\n+                    respan(vis_span, ast::VisibilityKind::Public),\n                     trait_item.span,\n                 );\n             }"}, {"sha": "dd27dea4f0d978d04f73a10a6f6a11d51ddfc597", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -235,7 +235,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                 ty,\n                 expr,\n             ),\n-            vis: codemap::dummy_spanned(ast::VisibilityKind::Public),\n+            vis: codemap::respan(span.empty(), ast::VisibilityKind::Public),\n             span,\n             tokens: None,\n         })"}, {"sha": "7681f55bd8ccb4f96c4b6422c272c46c6cd7be90", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -987,7 +987,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs,\n             id: ast::DUMMY_NODE_ID,\n             node,\n-            vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+            vis: respan(span.empty(), ast::VisibilityKind::Inherited),\n             span,\n             tokens: None,\n         })\n@@ -1033,7 +1033,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 span: ty.span,\n                 ty,\n                 ident: None,\n-                vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+                vis: respan(span.empty(), ast::VisibilityKind::Inherited),\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n             }"}, {"sha": "d4d9dfb01da2c4fa181441255851577cade059ca", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             node: ast::ItemKind::Mod(krate.module),\n             ident: keywords::Invalid.ident(),\n             id: ast::DUMMY_NODE_ID,\n-            vis: dummy_spanned(ast::VisibilityKind::Public),\n+            vis: respan(krate.span.empty(), ast::VisibilityKind::Public),\n             tokens: None,\n         })));\n "}, {"sha": "7a024dbad88300e0fe451f6503c6b280c5e7c686", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast::{self, Arg, Arm, Block, Expr, Item, Pat, Stmt, Ty};\n-use codemap::dummy_spanned;\n+use codemap::respan;\n use syntax_pos::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n@@ -858,7 +858,7 @@ fn expand_wrapper(cx: &ExtCtxt,\n         let path = path.iter().map(|s| s.to_string()).collect();\n         let use_item = cx.item_use_glob(\n             sp,\n-            dummy_spanned(ast::VisibilityKind::Inherited),\n+            respan(sp.empty(), ast::VisibilityKind::Inherited),\n             ids_ext(path),\n         );\n         cx.stmt_item(sp, use_item)"}, {"sha": "1a2025b073b2b85081f96883242dda1909531f13", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -21,7 +21,7 @@\n use ast::*;\n use ast;\n use syntax_pos::Span;\n-use codemap::{Spanned, respan, dummy_spanned};\n+use codemap::{Spanned, respan};\n use parse::token::{self, Token};\n use ptr::P;\n use symbol::keywords;\n@@ -1018,7 +1018,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n         ident: keywords::Invalid.ident(),\n         attrs,\n         id: ast::DUMMY_NODE_ID,\n-        vis: dummy_spanned(ast::VisibilityKind::Public),\n+        vis: respan(span.empty(), ast::VisibilityKind::Public),\n         span,\n         node: ast::ItemKind::Mod(module),\n         tokens: None,"}, {"sha": "d2ae9904143d96e193ccbd684b27fea278039533", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -932,7 +932,7 @@ mod tests {\n                                         span: sp(15,21),\n                                         recovered: false,\n                                     })),\n-                            vis: codemap::dummy_spanned(ast::VisibilityKind::Inherited),\n+                            vis: codemap::respan(sp(0, 0), ast::VisibilityKind::Inherited),\n                             span: sp(0,21)})));\n     }\n "}, {"sha": "3dfe3c9e5b990590e12c1e8efe97a45163eb1875", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -1573,7 +1573,7 @@ impl<'a> State<'a> {\n                     ti.ident,\n                     ty,\n                     default.as_ref().map(|expr| &**expr),\n-                    &codemap::dummy_spanned(ast::VisibilityKind::Inherited),\n+                    &codemap::respan(ti.span.empty(), ast::VisibilityKind::Inherited),\n                 )?;\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n@@ -1584,7 +1584,7 @@ impl<'a> State<'a> {\n                     ti.ident,\n                     &ti.generics,\n                     sig,\n-                    &codemap::dummy_spanned(ast::VisibilityKind::Inherited),\n+                    &codemap::respan(ti.span.empty(), ast::VisibilityKind::Inherited),\n                 )?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;"}, {"sha": "da24107f4c33b53485f44008d93b9de19183d68a", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -14,7 +14,7 @@ use std::cell::Cell;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n-use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned};\n+use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned, respan};\n use ptr::P;\n use tokenstream::TokenStream;\n \n@@ -78,7 +78,7 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<Strin\n             is_sugared_doc: false,\n             span,\n         }],\n-        vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+        vis: respan(span.empty(), ast::VisibilityKind::Inherited),\n         node: ast::ItemKind::Use(P(ast::UseTree {\n             prefix: ast::Path {\n                 segments: [\"{{root}}\", name, \"prelude\", \"v1\"].into_iter().map(|name| {"}, {"sha": "1b3917efdd1e78a631da4c48c257ebf35b67e9b2", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -530,7 +530,7 @@ impl<'a> TraitDef<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident,\n-                vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+                vis: respan(self.span.empty(), ast::VisibilityKind::Inherited),\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n@@ -977,7 +977,7 @@ impl<'a> MethodDef<'a> {\n             attrs: self.attributes.clone(),\n             generics: fn_generics,\n             span: trait_.span,\n-            vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+            vis: respan(trait_.span.empty(), ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {"}, {"sha": "9605f6b5c5a9d30b60e24ad724e04d0ea089241e", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -19,7 +19,7 @@\n /// therefore apply.\n \n use syntax::ast;\n-use syntax::codemap::dummy_spanned;\n+use syntax::codemap::respan;\n use syntax::ext::base;\n use syntax::ext::base::*;\n use syntax::feature_gate;\n@@ -60,7 +60,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n             asm,\n             ctxt: cx.backtrace(),\n         })),\n-        vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+        vis: respan(sp.empty(), ast::VisibilityKind::Inherited),\n         span: sp,\n         tokens: None,\n     })))"}, {"sha": "f9e01b630aebc59483cb3b8307421cc580a93e33", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -216,6 +216,12 @@ impl Span {\n         self.data().with_ctxt(ctxt)\n     }\n \n+    /// Returns a new span representing an empty span at the beginning of this span\n+    #[inline]\n+    pub fn empty(self) -> Span {\n+        span.with_hi(self.lo())\n+    }\n+\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.source_equal(&DUMMY_SP) { other } else { self }"}, {"sha": "91e36aa86c7037de50642f2fec1cf47c3d18af02", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=b5099a708d67ed165c5ebcfc2c55b1cdf2ad86bc", "patch": "@@ -1 +1 @@\n-Subproject commit 1d6dfea44f97199d5d5c177c7dadcde393eaff9a\n+Subproject commit 91e36aa86c7037de50642f2fec1cf47c3d18af02"}]}