{"sha": "700f19ad09f480974d8cdf760e986f7334ab9e0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMGYxOWFkMDlmNDgwOTc0ZDhjZGY3NjBlOTg2ZjczMzRhYjllMGY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T18:56:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-13T18:56:47Z"}, "message": "Rollup merge of #52300 - ljedrz:dyn_target_test, r=Mark-Simulacrum\n\nDeny bare trait objects in librustc_target and libtest\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_target` and `src/libtest`.", "tree": {"sha": "cc11c2e906e3c97b374a47df6866100dd7205505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc11c2e906e3c97b374a47df6866100dd7205505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/700f19ad09f480974d8cdf760e986f7334ab9e0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbSPXvCRBK7hj4Ov3rIwAAdHIIACSuUnjurePndEzvND+peWnG\nhH3zV6AJu+i++SlouPI9TsoCzS8Q5kMuuLsEdr3rA9yw9xOQFmFLMuZcbV7ebkr2\nVgLxsgpi1ce2l2ds1MPrjQjVFcGoL32Auvto0CUKV+HheXSCzyYp6teZ54lVrLQV\nG2oRkAKVs+Co3B62HXI0xBpK8C9/scSf9mMhxZrYiJDDxcT6VPAioHEWat6iATSq\n2+qfT/q+emzdGIupcp8Vv9s4b35axI+VWI7JI6IJOyVHPMgkxN/zpVyqzclrWe4t\nHVj5mYzIwNvsxNrbyUScG5M2nGoDjMg8uC7zmnHGPl0OOIeW1a6MvKvm7GcirK4=\n=cAh7\n-----END PGP SIGNATURE-----\n", "payload": "tree cc11c2e906e3c97b374a47df6866100dd7205505\nparent a6dc16e0750024d485d7b3f465fefedb2095561f\nparent 21d9ac1d04cd59044fa96a3064dd0b56c648655a\nauthor kennytm <kennytm@gmail.com> 1531508207 +0800\ncommitter GitHub <noreply@github.com> 1531508207 +0800\n\nRollup merge of #52300 - ljedrz:dyn_target_test, r=Mark-Simulacrum\n\nDeny bare trait objects in librustc_target and libtest\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_target` and `src/libtest`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/700f19ad09f480974d8cdf760e986f7334ab9e0f", "html_url": "https://github.com/rust-lang/rust/commit/700f19ad09f480974d8cdf760e986f7334ab9e0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/700f19ad09f480974d8cdf760e986f7334ab9e0f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6dc16e0750024d485d7b3f465fefedb2095561f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6dc16e0750024d485d7b3f465fefedb2095561f", "html_url": "https://github.com/rust-lang/rust/commit/a6dc16e0750024d485d7b3f465fefedb2095561f"}, {"sha": "21d9ac1d04cd59044fa96a3064dd0b56c648655a", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d9ac1d04cd59044fa96a3064dd0b56c648655a", "html_url": "https://github.com/rust-lang/rust/commit/21d9ac1d04cd59044fa96a3064dd0b56c648655a"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "e611d26da56def22e2efcd149aaf4dd10b4d2e42", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700f19ad09f480974d8cdf760e986f7334ab9e0f/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f19ad09f480974d8cdf760e986f7334ab9e0f/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=700f19ad09f480974d8cdf760e986f7334ab9e0f", "patch": "@@ -21,6 +21,8 @@\n //! one that doesn't; the one that doesn't might get decent parallel\n //! build speedups.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "484563aa30249636d209fe11296bb57808edb8fc", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700f19ad09f480974d8cdf760e986f7334ab9e0f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f19ad09f480974d8cdf760e986f7334ab9e0f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=700f19ad09f480974d8cdf760e986f7334ab9e0f", "patch": "@@ -229,7 +229,7 @@ macro_rules! supported_targets {\n             }\n         }\n \n-        pub fn get_targets() -> Box<Iterator<Item=String>> {\n+        pub fn get_targets() -> Box<dyn Iterator<Item=String>> {\n             Box::new(TARGETS.iter().filter_map(|t| -> Option<String> {\n                 load_specific(t)\n                     .and(Ok(t.to_string()))"}, {"sha": "6b547dff9120ed3e97702933bf4dfd4431c78c32", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/700f19ad09f480974d8cdf760e986f7334ab9e0f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f19ad09f480974d8cdf760e986f7334ab9e0f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=700f19ad09f480974d8cdf760e986f7334ab9e0f", "patch": "@@ -26,6 +26,9 @@\n // NB: this is also specified in this crate's Cargo.toml, but libsyntax contains logic specific to\n // this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n // cargo) to detect this crate.\n+\n+#![deny(bare_trait_objects)]\n+\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -165,8 +168,8 @@ pub trait TDynBenchFn: Send {\n pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n-    DynTestFn(Box<FnBox() + Send>),\n-    DynBenchFn(Box<TDynBenchFn + 'static>),\n+    DynTestFn(Box<dyn FnBox() + Send>),\n+    DynBenchFn(Box<dyn TDynBenchFn + 'static>),\n }\n \n impl TestFn {\n@@ -840,7 +843,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     fn callback(\n         event: &TestEvent,\n         st: &mut ConsoleTestState,\n-        out: &mut OutputFormatter,\n+        out: &mut dyn OutputFormatter,\n     ) -> io::Result<()> {\n         match (*event).clone() {\n             TeFiltered(ref filtered_tests) => {\n@@ -897,7 +900,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n \n     let is_multithreaded = opts.test_threads.unwrap_or_else(get_concurrency) > 1;\n \n-    let mut out: Box<OutputFormatter> = match opts.format {\n+    let mut out: Box<dyn OutputFormatter> = match opts.format {\n         OutputFormat::Pretty => Box::new(PrettyFormatter::new(\n             output,\n             use_color(opts),\n@@ -1386,7 +1389,7 @@ pub fn run_test(\n         desc: TestDesc,\n         monitor_ch: Sender<MonitorMsg>,\n         nocapture: bool,\n-        testfn: Box<FnBox() + Send>,\n+        testfn: Box<dyn FnBox() + Send>,\n     ) {\n         // Buffer for capturing standard I/O\n         let data = Arc::new(Mutex::new(Vec::new()));\n@@ -1459,7 +1462,7 @@ fn __rust_begin_short_backtrace<F: FnOnce()>(f: F) {\n     f()\n }\n \n-fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> TestResult {\n+fn calc_result(desc: &TestDesc, task_result: Result<(), Box<dyn Any + Send>>) -> TestResult {\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TrOk,\n         (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {"}]}