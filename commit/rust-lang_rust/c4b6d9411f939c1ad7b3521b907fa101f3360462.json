{"sha": "c4b6d9411f939c1ad7b3521b907fa101f3360462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YjZkOTQxMWY5MzljMWFkN2IzNTIxYjkwN2ZhMTAxZjMzNjA0NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-24T04:10:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-24T04:10:54Z"}, "message": "Auto merge of #75865 - JohnTitor:rollup-yxia6d2, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #75819 (Use intra-doc-links in `core::{char, macros, fmt}`)\n - #75821 (Switch to intra-doc links in `std::macros`)\n - #75825 (Fix typo in documentation of i32 wrapping_abs())\n - #75826 (Corrected Misleading documentation for derived Ord/PartialOrd implementation )\n - #75831 (doc: Prefer https link for wikipedia URLs)\n - #75844 (publish-toolstate: show more context on HTTP error)\n - #75847 (Switch to intra-doc links in `std::collections`)\n - #75851 (Switch to intra-doc links in `core::array`)\n - #75856 (more tool clippy fixes)\n - #75859 (doc: Fix typo in std::process::Child documentation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "393510005abf73ba4c652c22062562930add8a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393510005abf73ba4c652c22062562930add8a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b6d9411f939c1ad7b3521b907fa101f3360462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6d9411f939c1ad7b3521b907fa101f3360462", "html_url": "https://github.com/rust-lang/rust/commit/c4b6d9411f939c1ad7b3521b907fa101f3360462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6d9411f939c1ad7b3521b907fa101f3360462/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a962b692a6bb6490fcf979e345c404f40ca491cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a962b692a6bb6490fcf979e345c404f40ca491cc", "html_url": "https://github.com/rust-lang/rust/commit/a962b692a6bb6490fcf979e345c404f40ca491cc"}, {"sha": "47a03d9815d7099a7555323d62a4cec7ba05dad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a03d9815d7099a7555323d62a4cec7ba05dad6", "html_url": "https://github.com/rust-lang/rust/commit/47a03d9815d7099a7555323d62a4cec7ba05dad6"}], "stats": {"total": 276, "additions": 92, "deletions": 184}, "files": [{"sha": "477a598ff5b0027512da38aae24b426601d3302f", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -12,9 +12,9 @@\n //! to solve the [shortest path problem][sssp] on a [directed graph][dir_graph].\n //! It shows how to use [`BinaryHeap`] with custom types.\n //!\n-//! [dijkstra]: http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n-//! [sssp]: http://en.wikipedia.org/wiki/Shortest_path_problem\n-//! [dir_graph]: http://en.wikipedia.org/wiki/Directed_graph\n+//! [dijkstra]: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n+//! [sssp]: https://en.wikipedia.org/wiki/Shortest_path_problem\n+//! [dir_graph]: https://en.wikipedia.org/wiki/Directed_graph\n //! [`BinaryHeap`]: struct.BinaryHeap.html\n //!\n //! ```"}, {"sha": "88795d8429d29ff57b91e63f32890936edc47827", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -32,9 +32,6 @@ pub use iter::IntoIter;\n /// Note that the traits [`AsRef`] and [`AsMut`] provide similar methods for types that\n /// may not be fixed-size arrays. Implementors should prefer those traits\n /// instead.\n-///\n-/// [`AsRef`]: ../convert/trait.AsRef.html\n-/// [`AsMut`]: ../convert/trait.AsMut.html\n #[unstable(feature = \"fixed_size_array\", issue = \"27778\")]\n pub unsafe trait FixedSizeArray<T> {\n     /// Converts the array to immutable slice"}, {"sha": "7a68de5e6afb8c8cc02476cbb0105ee93ef9afd2", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -94,7 +94,6 @@ const MAX_THREE_B: u32 = 0x10000;\n /// Point], but only ones within a certain range. `MAX` is the highest valid\n /// code point that's a valid [Unicode Scalar Value].\n ///\n-/// [`char`]: ../../std/primitive.char.html\n /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n /// [Code Point]: http://www.unicode.org/glossary/#code_point\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -114,8 +113,7 @@ pub const REPLACEMENT_CHARACTER: char = char::REPLACEMENT_CHARACTER;\n /// This `struct` is created by the [`escape_unicode`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_unicode`]: ../../std/primitive.char.html#method.escape_unicode\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`escape_unicode`]: char::escape_unicode\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n@@ -236,8 +234,7 @@ impl fmt::Display for EscapeUnicode {\n /// This `struct` is created by the [`escape_default`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_default`]: ../../std/primitive.char.html#method.escape_default\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`escape_default`]: char::escape_default\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {\n@@ -345,8 +342,7 @@ impl fmt::Display for EscapeDefault {\n /// This `struct` is created by the [`escape_debug`] method on [`char`]. See its\n /// documentation for more.\n ///\n-/// [`escape_debug`]: ../../std/primitive.char.html#method.escape_debug\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`escape_debug`]: char::escape_debug\n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeDebug(EscapeDefault);\n@@ -380,8 +376,7 @@ impl fmt::Display for EscapeDebug {\n /// This `struct` is created by the [`to_lowercase`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_lowercase`]: ../../std/primitive.char.html#method.to_lowercase\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`to_lowercase`]: char::to_lowercase\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone)]\n pub struct ToLowercase(CaseMappingIter);\n@@ -408,8 +403,7 @@ impl ExactSizeIterator for ToLowercase {}\n /// This `struct` is created by the [`to_uppercase`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_uppercase`]: ../../std/primitive.char.html#method.to_uppercase\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`to_uppercase`]: char::to_uppercase\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone)]\n pub struct ToUppercase(CaseMappingIter);"}, {"sha": "3953c73319fe419e5b33d735e68020a2cad20c85", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -25,7 +25,7 @@\n use self::Ordering::*;\n \n /// Trait for equality comparisons which are [partial equivalence\n-/// relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).\n+/// relations](https://en.wikipedia.org/wiki/Partial_equivalence_relation).\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n@@ -505,7 +505,7 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n /// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n ///\n /// ## How can I implement `Ord`?\n ///\n@@ -694,7 +694,7 @@ impl PartialOrd for Ordering {\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n /// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n ///\n /// ## How can I implement `PartialOrd`?\n ///"}, {"sha": "52f73c03e02d923c201141da94238f8d379156fa", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 14, "deletions": 50, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -117,8 +117,6 @@ pub trait Write {\n     ///\n     /// This function will return an instance of [`Error`] on error.\n     ///\n-    /// [`Error`]: struct.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -146,9 +144,6 @@ pub trait Write {\n     ///\n     /// This function will return an instance of [`Error`] on error.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`Error`]: struct.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -218,9 +213,6 @@ impl<W: Write + ?Sized> Write for &mut W {\n /// To interact with a `Formatter`, you'll call various methods to change the\n /// various options related to formatting. For examples, please see the\n /// documentation of the methods defined on `Formatter` below.\n-///\n-/// [`Debug`]: trait.Debug.html\n-/// [`Display`]: trait.Display.html\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Formatter<'a> {\n@@ -378,7 +370,7 @@ impl<'a> Arguments<'a> {\n ///\n /// The [`format_args!`] macro will safely create an instance of this structure.\n /// The macro validates the format string at compile-time so usage of the\n-/// [`write`] and [`format`] functions can be safely performed.\n+/// [`write()`] and [`format()`] functions can be safely performed.\n ///\n /// You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`\n /// and `Display` contexts as seen below. The example also shows that `Debug`\n@@ -392,9 +384,7 @@ impl<'a> Arguments<'a> {\n /// assert_eq!(display, debug);\n /// ```\n ///\n-/// [`format_args!`]: ../../std/macro.format_args.html\n-/// [`format`]: ../../std/fmt/fn.format.html\n-/// [`write`]: ../../std/fmt/fn.write.html\n+/// [`format()`]: ../../std/fmt/fn.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub struct Arguments<'a> {\n@@ -472,9 +462,7 @@ impl Display for Arguments<'_> {\n ///\n /// When used with the alternate format specifier `#?`, the output is pretty-printed.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// This trait can be used with `#[derive]` if all fields implement `Debug`. When\n /// `derive`d for structs, it will use the name of the `struct`, then `{`, then a\n@@ -535,8 +523,7 @@ impl Display for Arguments<'_> {\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n ///\n-/// [`debug_struct`]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n-/// [`Formatter`]: ../../std/fmt/struct.Formatter.html\n+/// [`debug_struct`]: Formatter::debug_struct\n ///\n /// Pretty-printing with `#?`:\n ///\n@@ -618,14 +605,10 @@ pub use macros::Debug;\n \n /// Format trait for an empty format, `{}`.\n ///\n-/// `Display` is similar to [`Debug`][debug], but `Display` is for user-facing\n+/// `Display` is similar to [`Debug`], but `Display` is for user-facing\n /// output, and so cannot be derived.\n ///\n-/// [debug]: trait.Debug.html\n-///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -697,9 +680,7 @@ pub trait Display {\n ///\n /// The alternate flag, `#`, adds a `0o` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -751,7 +732,7 @@ pub trait Octal {\n ///\n /// The alternate flag, `#`, adds a `0b` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -790,12 +771,6 @@ pub trait Octal {\n ///     \"l as binary is: 0b000000000000000000000001101011\"\n /// );\n /// ```\n-///\n-/// [module]: ../../std/fmt/index.html\n-/// [`i8`]: ../../std/primitive.i8.html\n-/// [`i128`]: ../../std/primitive.i128.html\n-/// [`isize`]: ../../std/primitive.isize.html\n-/// [`i32`]: ../../std/primitive.i32.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Binary {\n     /// Formats the value using the given formatter.\n@@ -813,9 +788,7 @@ pub trait Binary {\n ///\n /// The alternate flag, `#`, adds a `0x` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -868,9 +841,7 @@ pub trait LowerHex {\n ///\n /// The alternate flag, `#`, adds a `0x` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -918,9 +889,7 @@ pub trait UpperHex {\n /// The `Pointer` trait should format its output as a memory location. This is commonly presented\n /// as hexadecimal.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -967,9 +936,7 @@ pub trait Pointer {\n ///\n /// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -1018,9 +985,7 @@ pub trait LowerExp {\n ///\n /// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -1812,8 +1777,7 @@ impl<'a> Formatter<'a> {\n     /// Creates a [`DebugStruct`] builder designed to assist with creation of\n     /// [`fmt::Debug`] implementations for structs.\n     ///\n-    /// [`DebugStruct`]: ../../std/fmt/struct.DebugStruct.html\n-    /// [`fmt::Debug`]: ../../std/fmt/trait.Debug.html\n+    /// [`fmt::Debug`]: self::Debug\n     ///\n     /// # Examples\n     ///"}, {"sha": "d26f2124f15fd46ccb83d054919f83e02d709bc8", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 53, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -28,9 +28,6 @@ macro_rules! panic {\n /// Like [`assert!`], this macro has a second form, where a custom\n /// panic message can be provided.\n ///\n-/// [`PartialEq`]: cmp/trait.PartialEq.html\n-/// [`assert!`]: macro.assert.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -85,9 +82,6 @@ macro_rules! assert_eq {\n /// Like [`assert!`], this macro has a second form, where a custom\n /// panic message can be provided.\n ///\n-/// [`PartialEq`]: cmp/trait.PartialEq.html\n-/// [`assert!`]: macro.assert.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -158,9 +152,6 @@ macro_rules! assert_ne {\n /// with `debug_assert!` is thus only encouraged after thorough profiling, and\n /// more importantly, only in safe code!\n ///\n-/// [`panic!`]: macro.panic.html\n-/// [`assert!`]: macro.assert.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -196,8 +187,6 @@ macro_rules! debug_assert {\n /// expensive to be present in a release build but may be helpful during\n /// development. The result of expanding `debug_assert_eq!` is always type checked.\n ///\n-/// [`assert_eq!`]: ../std/macro.assert_eq.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -223,8 +212,6 @@ macro_rules! debug_assert_eq {\n /// expensive to be present in a release build but may be helpful during\n /// development. The result of expanding `debug_assert_ne!` is always type checked.\n ///\n-/// [`assert_ne!`]: ../std/macro.assert_ne.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -282,8 +269,6 @@ macro_rules! matches {\n /// Because of the early return, `try!` can only be used in functions that\n /// return [`Result`].\n ///\n-/// [`Result`]: ../std/result/enum.Result.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -354,10 +339,10 @@ macro_rules! r#try {\n ///\n /// See [`std::fmt`] for more information on the format string syntax.\n ///\n-/// [`std::fmt`]: ../std/fmt/index.html\n-/// [`std::fmt::Write`]: ../std/fmt/trait.Write.html\n+/// [`std::fmt`]: crate::fmt\n+/// [`std::fmt::Write`]: crate::fmt::Write\n /// [`std::io::Write`]: ../std/io/trait.Write.html\n-/// [`std::fmt::Result`]: ../std/fmt/type.Result.html\n+/// [`std::fmt::Result`]: crate::fmt::Result\n /// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples\n@@ -426,9 +411,7 @@ macro_rules! write {\n /// For more information, see [`write!`]. For information on the format string syntax, see\n /// [`std::fmt`].\n ///\n-/// [`write!`]: macro.write.html\n-/// [`std::fmt`]: ../std/fmt/index.html\n-///\n+/// [`std::fmt`]: crate::fmt\n ///\n /// # Examples\n ///\n@@ -494,16 +477,12 @@ macro_rules! writeln {\n /// The unsafe counterpart of this macro is the [`unreachable_unchecked`] function, which\n /// will cause undefined behavior if the code is reached.\n ///\n-/// [`panic!`]: ../std/macro.panic.html\n-/// [`unreachable_unchecked`]: ../std/hint/fn.unreachable_unchecked.html\n-/// [`std::hint`]: ../std/hint/index.html\n+/// [`unreachable_unchecked`]: crate::hint::unreachable_unchecked\n ///\n /// # Panics\n ///\n /// This will always [`panic!`]\n ///\n-/// [`panic!`]: ../std/macro.panic.html\n-///\n /// # Examples\n ///\n /// Match arms:\n@@ -637,8 +616,6 @@ macro_rules! unimplemented {\n /// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n /// Also some IDEs will mark `todo!`s.\n ///\n-/// [`unimplemented!`]: macro.unimplemented.html\n-///\n /// # Panics\n ///\n /// This will always [panic!](macro.panic.html)\n@@ -730,8 +707,6 @@ pub(crate) mod builtin {\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n     /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\");\n     /// ```\n-    ///\n-    /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n@@ -769,12 +744,11 @@ pub(crate) mod builtin {\n     ///\n     /// For more information, see the documentation in [`std::fmt`].\n     ///\n-    /// [`Display`]: ../std/fmt/trait.Display.html\n-    /// [`Debug`]: ../std/fmt/trait.Debug.html\n-    /// [`fmt::Arguments`]: ../std/fmt/struct.Arguments.html\n-    /// [`std::fmt`]: ../std/fmt/index.html\n+    /// [`Display`]: crate::fmt::Display\n+    /// [`Debug`]: crate::fmt::Debug\n+    /// [`fmt::Arguments`]: crate::fmt::Arguments\n+    /// [`std::fmt`]: crate::fmt\n     /// [`format!`]: ../std/macro.format.html\n-    /// [`write!`]: ../std/macro.write.html\n     /// [`println!`]: ../std/macro.println.html\n     ///\n     /// # Examples\n@@ -818,8 +792,6 @@ pub(crate) mod builtin {\n     /// will be emitted. To not emit a compile error, use the [`option_env!`]\n     /// macro instead.\n     ///\n-    /// [`option_env!`]: ../std/macro.option_env.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -854,13 +826,11 @@ pub(crate) mod builtin {\n     /// expand into an expression of type `Option<&'static str>` whose value is\n     /// `Some` of the value of the environment variable. If the environment\n     /// variable is not present, then this will expand to `None`. See\n-    /// [`Option<T>`][option] for more information on this type.\n+    /// [`Option<T>`][Option] for more information on this type.\n     ///\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not.\n     ///\n-    /// [option]: ../std/option/enum.Option.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -946,9 +916,6 @@ pub(crate) mod builtin {\n     /// but rather the first macro invocation leading up to the invocation\n     /// of the `line!` macro.\n     ///\n-    /// [`column!`]: macro.column.html\n-    /// [`file!`]: macro.file.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -976,9 +943,6 @@ pub(crate) mod builtin {\n     /// but rather the first macro invocation leading up to the invocation\n     /// of the `column!` macro.\n     ///\n-    /// [`line!`]: macro.line.html\n-    /// [`file!`]: macro.file.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -999,15 +963,11 @@ pub(crate) mod builtin {\n     /// With [`line!`] and [`column!`], these macros provide debugging information for\n     /// developers about the location within the source.\n     ///\n-    ///\n     /// The expanded expression has type `&'static str`, and the returned file\n     /// is not the invocation of the `file!` macro itself, but rather the\n     /// first macro invocation leading up to the invocation of the `file!`\n     /// macro.\n     ///\n-    /// [`line!`]: macro.line.html\n-    /// [`column!`]: macro.column.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1258,9 +1218,7 @@ pub(crate) mod builtin {\n     /// be provided with or without arguments for formatting. See [`std::fmt`]\n     /// for syntax for this form.\n     ///\n-    /// [`panic!`]: macro.panic.html\n-    /// [`debug_assert!`]: macro.debug_assert.html\n-    /// [`std::fmt`]: ../std/fmt/index.html\n+    /// [`std::fmt`]: crate::fmt\n     ///\n     /// # Examples\n     ///"}, {"sha": "7a88cfbb74dd45472486d181c20fd3d5cb94ca4b", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -1573,7 +1573,7 @@ $EndFeature, \"\n the boundary of the type.\n \n The only case where such wrapping can occur is when one takes the absolute value of the negative\n-minimal value for the type this is a positive value that is too large to represent in the type. In\n+minimal value for the type; this is a positive value that is too large to represent in the type. In\n such a case, this function returns `MIN` itself.\n \n # Examples"}, {"sha": "a1aab767eb26f779870cc625449edfaaee2f44d5", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -396,15 +396,7 @@\n //! assert_eq!(map.keys().next().unwrap().b, \"baz\");\n //! ```\n //!\n-//! [`Vec`]: ../../std/vec/struct.Vec.html\n-//! [`HashMap`]: ../../std/collections/struct.HashMap.html\n-//! [`VecDeque`]: ../../std/collections/struct.VecDeque.html\n-//! [`LinkedList`]: ../../std/collections/struct.LinkedList.html\n-//! [`BTreeMap`]: ../../std/collections/struct.BTreeMap.html\n-//! [`HashSet`]: ../../std/collections/struct.HashSet.html\n-//! [`BTreeSet`]: ../../std/collections/struct.BTreeSet.html\n-//! [`BinaryHeap`]: ../../std/collections/struct.BinaryHeap.html\n-//! [`IntoIterator`]: ../../std/iter/trait.IntoIterator.html\n+//! [`IntoIterator`]: crate::iter::IntoIterator\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "e8898d98ff35f3de52613408dd75cd6f37b81ffd", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -1,6 +1,6 @@\n //! Standard library macros\n //!\n-//! This modules contains a set of macros which are exported from the standard\n+//! This module contains a set of macros which are exported from the standard\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n@@ -29,9 +29,7 @@ macro_rules! panic {\n /// Use `print!` only for the primary output of your program. Use\n /// [`eprint!`] instead to print error and progress messages.\n ///\n-/// [`println!`]: ../std/macro.println.html\n-/// [flush]: ../std/io/trait.Write.html#tymethod.flush\n-/// [`eprint!`]: ../std/macro.eprint.html\n+/// [flush]: crate::io::Write::flush\n ///\n /// # Panics\n ///\n@@ -74,12 +72,13 @@ macro_rules! print {\n /// Use `println!` only for the primary output of your program. Use\n /// [`eprintln!`] instead to print error and progress messages.\n ///\n-/// [`format!`]: ../std/macro.format.html\n-/// [`std::fmt`]: ../std/fmt/index.html\n-/// [`eprintln!`]: ../std/macro.eprintln.html\n+/// [`std::fmt`]: crate::fmt\n+///\n /// # Panics\n ///\n-/// Panics if writing to `io::stdout` fails.\n+/// Panics if writing to [`io::stdout`] fails.\n+///\n+/// [`io::stdout`]: crate::io::stdout\n ///\n /// # Examples\n ///\n@@ -101,14 +100,14 @@ macro_rules! println {\n /// Prints to the standard error.\n ///\n /// Equivalent to the [`print!`] macro, except that output goes to\n-/// [`io::stderr`] instead of `io::stdout`. See [`print!`] for\n+/// [`io::stderr`] instead of [`io::stdout`]. See [`print!`] for\n /// example usage.\n ///\n /// Use `eprint!` only for error and progress messages. Use `print!`\n /// instead for the primary output of your program.\n ///\n-/// [`io::stderr`]: ../std/io/struct.Stderr.html\n-/// [`print!`]: ../std/macro.print.html\n+/// [`io::stderr`]: crate::io::stderr\n+/// [`io::stdout`]: crate::io::stdout\n ///\n /// # Panics\n ///\n@@ -129,14 +128,14 @@ macro_rules! eprint {\n /// Prints to the standard error, with a newline.\n ///\n /// Equivalent to the [`println!`] macro, except that output goes to\n-/// [`io::stderr`] instead of `io::stdout`. See [`println!`] for\n+/// [`io::stderr`] instead of [`io::stdout`]. See [`println!`] for\n /// example usage.\n ///\n /// Use `eprintln!` only for error and progress messages. Use `println!`\n /// instead for the primary output of your program.\n ///\n-/// [`io::stderr`]: ../std/io/struct.Stderr.html\n-/// [`println!`]: ../std/macro.println.html\n+/// [`io::stderr`]: crate::io::stderr\n+/// [`io::stdout`]: crate::io::stdout\n ///\n /// # Panics\n ///"}, {"sha": "c42bc1096528b7266507ce755737bd5535e16234", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -126,7 +126,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n ///\n /// # Warning\n ///\n-/// On some system, calling [`wait`] or similar is necessary for the OS to\n+/// On some systems, calling [`wait`] or similar is necessary for the OS to\n /// release resources. A process that terminated but has not been waited on is\n /// still around as a \"zombie\". Leaving too many zombies around may exhaust\n /// global resources (for example process IDs)."}, {"sha": "23c989fd2fdfb78cee8678a22addb8b61886788d", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -131,7 +131,7 @@ impl Barrier {\n         lock.count += 1;\n         if lock.count < self.num_threads {\n             // We need a while loop to guard against spurious wakeups.\n-            // http://en.wikipedia.org/wiki/Spurious_wakeup\n+            // https://en.wikipedia.org/wiki/Spurious_wakeup\n             while local_gen == lock.generation_id && lock.count < self.num_threads {\n                 lock = self.cvar.wait(lock).unwrap();\n             }"}, {"sha": "c02f93bf9d42f1ed27d8c13e56a2331075eb064c", "filename": "library/test/src/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Ftest%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/library%2Ftest%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fstats.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -84,7 +84,7 @@ pub trait Stats {\n     /// by the constant `1.4826` to allow its use as a consistent estimator for the standard\n     /// deviation.\n     ///\n-    /// See: <http://en.wikipedia.org/wiki/Median_absolute_deviation>\n+    /// See: <https://en.wikipedia.org/wiki/Median_absolute_deviation>\n     fn median_abs_dev(&self) -> f64;\n \n     /// Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.\n@@ -96,7 +96,7 @@ pub trait Stats {\n     ///\n     /// Calculated by linear interpolation between closest ranks.\n     ///\n-    /// See: <http://en.wikipedia.org/wiki/Percentile>\n+    /// See: <https://en.wikipedia.org/wiki/Percentile>\n     fn percentile(&self, pct: f64) -> f64;\n \n     /// Quartiles of the sample: three values that divide the sample into four equal groups, each\n@@ -302,7 +302,7 @@ fn percentile_of_sorted(sorted_samples: &[f64], pct: f64) -> f64 {\n /// It differs from trimming in that it does not change the number of samples,\n /// just changes the values of those that are outliers.\n ///\n-/// See: <http://en.wikipedia.org/wiki/Winsorising>\n+/// See: <https://en.wikipedia.org/wiki/Winsorising>\n pub fn winsorize(samples: &mut [f64], pct: f64) {\n     let mut tmp = samples.to_vec();\n     local_sort(&mut tmp);"}, {"sha": "9aed307ec93ae5a78398dd95ced150c549be0e0b", "filename": "src/librustc_expand/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Flibrustc_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Flibrustc_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -61,7 +61,7 @@ impl KleeneToken {\n     }\n }\n \n-/// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n+/// A Kleene-style [repetition operator](https://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]\n enum KleeneOp {"}, {"sha": "c1f354c7a15f3fd1cacfbe89b233ff55a2b777fa", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -1264,7 +1264,7 @@ rustc_index::newtype_index! {\n     /// De Bruijn index of 0, because the innermost binder in that location\n     /// is the outer fn.\n     ///\n-    /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n+    /// [dbi]: https://en.wikipedia.org/wiki/De_Bruijn_index\n     #[derive(HashStable)]\n     pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\","}, {"sha": "24356844bafc952f494bf86622532209652a3147", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -136,7 +136,7 @@ fn get_symbol_hash<'tcx>(\n }\n \n // Follow C++ namespace-mangling style, see\n-// http://en.wikipedia.org/wiki/Name_mangling for more info.\n+// https://en.wikipedia.org/wiki/Name_mangling for more info.\n //\n // It turns out that on macOS you can actually have arbitrary symbols in\n // function names (at least when given to LLVM), but this is not possible"}, {"sha": "a0fbbafe25ffbb88e4cb1c0478f061561b605fad", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -7,7 +7,7 @@ use std::marker::PhantomData;\n // closure.  As far as I can tell, coding up a recursive closure\n // requires the good ol' [Y Combinator].\n //\n-// [Y Combinator]: http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\n+// [Y Combinator]: https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\n \n struct YCombinator<F,A,R> {\n     func: F,"}, {"sha": "f7ff64036a1a96568982d9c5f88def07db5dbd76", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -48,8 +48,8 @@ impl App {\n         // Parse CLI arguments\n         let args = std::env::args().skip(1).collect::<Vec<_>>();\n         let (mode, base) = match args.iter().map(|s| s.as_str()).collect::<Vec<_>>().as_slice() {\n-            &[\"generate\", ref base] => (Mode::Generate, PathBuf::from(base)),\n-            &[\"check\", ref base] => (Mode::Check, PathBuf::from(base)),\n+            [\"generate\", ref base] => (Mode::Generate, PathBuf::from(base)),\n+            [\"check\", ref base] => (Mode::Check, PathBuf::from(base)),\n             _ => {\n                 eprintln!(\"usage: expand-yaml-anchors <source-dir> <dest-dir>\");\n                 std::process::exit(1);\n@@ -138,9 +138,7 @@ fn filter_document(document: Yaml) -> Yaml {\n                 .map(|(key, value)| (filter_document(key), filter_document(value)))\n                 .collect(),\n         ),\n-        Yaml::Array(vec) => {\n-            Yaml::Array(vec.into_iter().map(|item| filter_document(item)).collect())\n-        }\n+        Yaml::Array(vec) => Yaml::Array(vec.into_iter().map(filter_document).collect()),\n         other => other,\n     }\n }"}, {"sha": "b7ceba1e28262ff6a7f36e72e8a6cc5a1ce32fc6", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -172,10 +172,10 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n         {\n             return;\n         }\n-        let mut parts = url.splitn(2, \"#\");\n+        let mut parts = url.splitn(2, '#');\n         let url = parts.next().unwrap();\n         let fragment = parts.next();\n-        let mut parts = url.splitn(2, \"?\");\n+        let mut parts = url.splitn(2, '?');\n         let url = parts.next().unwrap();\n \n         // Once we've plucked out the URL, parse it using our base url and\n@@ -258,7 +258,7 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n                 }\n \n                 // These appear to be broken in mdbook right now?\n-                if fragment.starts_with(\"-\") {\n+                if fragment.starts_with('-') {\n                     return;\n                 }\n \n@@ -324,7 +324,7 @@ fn load_file(\n }\n \n fn maybe_redirect(source: &str) -> Option<String> {\n-    const REDIRECT: &'static str = \"<p>Redirecting to <a href=\";\n+    const REDIRECT: &str = \"<p>Redirecting to <a href=\";\n \n     let mut lines = source.lines();\n     let redirect_line = lines.nth(6)?;\n@@ -345,11 +345,11 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str,\n             // we can get away with using one pass.\n             let is_base = line[..j].ends_with(\"<base\");\n             line = rest;\n-            let pos_equals = match rest.find(\"=\") {\n+            let pos_equals = match rest.find('=') {\n                 Some(i) => i,\n                 None => continue,\n             };\n-            if rest[..pos_equals].trim_start_matches(\" \") != \"\" {\n+            if rest[..pos_equals].trim_start_matches(' ') != \"\" {\n                 continue;\n             }\n \n@@ -361,7 +361,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str,\n             };\n             let quote_delim = rest.as_bytes()[pos_quote] as char;\n \n-            if rest[..pos_quote].trim_start_matches(\" \") != \"\" {\n+            if rest[..pos_quote].trim_start_matches(' ') != \"\" {\n                 continue;\n             }\n             let rest = &rest[pos_quote + 1..];"}, {"sha": "51416c8ce63649789704368d414397f3f9596feb", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -275,7 +275,7 @@ def update_latest(\n         return message\n \n \n-if __name__ == '__main__':\n+def main():\n     repo = os.environ.get('TOOLSTATE_VALIDATE_MAINTAINERS_REPO')\n     if repo:\n         github_token = os.environ.get('TOOLSTATE_REPO_ACCESS_TOKEN')\n@@ -342,3 +342,11 @@ def update_latest(\n         }\n     ))\n     response.read()\n+\n+\n+if __name__ == '__main__':\n+    try:\n+        main()\n+    except urllib2.HTTPError as e:\n+        print(\"HTTPError: %s\\n%s\" % (e, e.read()))\n+        raise"}, {"sha": "82a5234ac5b240765fb38beb7e7179814c4366ed", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -47,9 +47,7 @@ fn check_error_code_explanation(\n     invalid_compile_fail_format\n }\n \n-fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &String) -> bool {\n-    let mut can_be_ignored = false;\n-\n+fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &str) -> bool {\n     for line in f.lines() {\n         let s = line.trim();\n         if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n@@ -58,13 +56,13 @@ fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &String) -> boo\n         if s.starts_with(\"```\") {\n             if s.contains(\"compile_fail\") && s.contains(err_code) {\n                 return true;\n-            } else if s.contains(\"(\") {\n+            } else if s.contains('(') {\n                 // It's very likely that we can't actually make it fail compilation...\n-                can_be_ignored = true;\n+                return true;\n             }\n         }\n     }\n-    can_be_ignored\n+    false\n }\n \n macro_rules! some_or_continue {"}, {"sha": "218e9668df4ae60ce6ec08672aa6e2485f01344a", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -315,7 +315,7 @@ fn version() -> String {\n fn fmt_list<V: std::fmt::Debug>(values: impl IntoIterator<Item = V>) -> String {\n     let pieces = values.into_iter().map(|b| format!(\"{:?}, \", b)).collect::<Vec<_>>();\n     let mut out = String::new();\n-    let mut line = format!(\"\\n    \");\n+    let mut line = String::from(\"\\n    \");\n     for piece in pieces {\n         if line.len() + piece.len() < 98 {\n             line.push_str(&piece);"}, {"sha": "42e7e5fb406051303305f3d059a422ed4898ef85", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -20,7 +20,7 @@ impl RawEmitter {\n         if self.file.is_empty() || self.file.ends_with(\"\\n\\n\") {\n             return;\n         }\n-        writeln!(&mut self.file, \"\").unwrap();\n+        writeln!(&mut self.file).unwrap();\n     }\n \n     fn emit_bitset(&mut self, ranges: &[Range<u32>]) {\n@@ -161,10 +161,10 @@ pub fn emit_codepoints(emitter: &mut RawEmitter, ranges: &[Range<u32>]) {\n \n     if bitset.bytes_used <= skiplist.bytes_used {\n         *emitter = bitset;\n-        emitter.desc = format!(\"bitset\");\n+        emitter.desc = String::from(\"bitset\");\n     } else {\n         *emitter = skiplist;\n-        emitter.desc = format!(\"skiplist\");\n+        emitter.desc = String::from(\"skiplist\");\n     }\n }\n \n@@ -289,7 +289,7 @@ impl Canonicalized {\n                 // Remove the now-canonicalized word from other mappings,\n                 // to ensure that we deprioritize them in the next iteration of\n                 // the while loop.\n-                for (_, mapped) in &mut mappings {\n+                for mapped in mappings.values_mut() {\n                     let mut i = 0;\n                     while i != mapped.len() {\n                         if mapped[i].0 == *from {\n@@ -309,7 +309,7 @@ impl Canonicalized {\n \n             // Remove the now-canonical word from other mappings, to ensure that\n             // we deprioritize them in the next iteration of the while loop.\n-            for (_, mapped) in &mut mappings {\n+            for mapped in mappings.values_mut() {\n                 let mut i = 0;\n                 while i != mapped.len() {\n                     if mapped[i].0 == to {"}, {"sha": "5d277e1c41f40df1abdb37c8316e51df44fc00dd", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6d9411f939c1ad7b3521b907fa101f3360462/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=c4b6d9411f939c1ad7b3521b907fa101f3360462", "patch": "@@ -94,9 +94,9 @@ fn copy_recursive(from: &Path, to: &Path) {\n }\n \n fn main() {\n-    let library_path_str = env::args_os().skip(1).next().expect(\"library path required\");\n-    let src_path_str = env::args_os().skip(2).next().expect(\"source path required\");\n-    let dest_path_str = env::args_os().skip(3).next().expect(\"destination path required\");\n+    let library_path_str = env::args_os().nth(1).expect(\"library path required\");\n+    let src_path_str = env::args_os().nth(2).expect(\"source path required\");\n+    let dest_path_str = env::args_os().nth(3).expect(\"destination path required\");\n     let library_path = Path::new(&library_path_str);\n     let src_path = Path::new(&src_path_str);\n     let dest_path = Path::new(&dest_path_str);"}]}