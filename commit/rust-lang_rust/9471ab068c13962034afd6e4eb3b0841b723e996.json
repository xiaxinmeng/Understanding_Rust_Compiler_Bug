{"sha": "9471ab068c13962034afd6e4eb3b0841b723e996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NzFhYjA2OGMxMzk2MjAzNGFmZDZlNGViM2IwODQxYjcyM2U5OTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-08-02T20:08:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T20:08:47Z"}, "message": "Rollup merge of #75059 - shengsheng:typos, r=Dylan-DPC\n\nfix typos\n\nFix common misspellings with https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines", "tree": {"sha": "eac97f5cb793471a477e62a0ae353f6837a1bed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac97f5cb793471a477e62a0ae353f6837a1bed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9471ab068c13962034afd6e4eb3b0841b723e996", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJx1PCRBK7hj4Ov3rIwAAdHIIAHq7rTJObj284kud2bBivqON\nYKQ90wP2ekHv47LIPRFD6DsXo+HRsP1fwHYvmPUD5PBeCbpMsKB5lsz5xz/Gy7Ig\nXi2QuQpelMJNbROwps+o2AdpOuCIthugtGy4K6y8pYcSTl3RcSgslPbvbLyN/JhA\nd7EmNt2dM4ZdDxje1bQcPqrwDahjxGEwRxeOaqk5DWtic9Uz+2Fw7oXbLKyQCbhT\nlkj8PTmBxpCI+Kq0LTsbYr9o+oBPZuNLnsFDNYIAlL6Y9yN+DTWYofo0z/V83K09\nOvgzX/FNaJPqZTzBT7xOyo73+1HewhFoghaXV6FiBQbNjthkzDIHhaNSFXIBT5w=\n=NX3f\n-----END PGP SIGNATURE-----\n", "payload": "tree eac97f5cb793471a477e62a0ae353f6837a1bed1\nparent db3e10f9cb6b2e925ae73cd5230df98746640b34\nparent 3b4151c9f3f66894a8d9f2d313f406ad21abf00d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1596398927 -0700\ncommitter GitHub <noreply@github.com> 1596398927 -0700\n\nRollup merge of #75059 - shengsheng:typos, r=Dylan-DPC\n\nfix typos\n\nFix common misspellings with https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9471ab068c13962034afd6e4eb3b0841b723e996", "html_url": "https://github.com/rust-lang/rust/commit/9471ab068c13962034afd6e4eb3b0841b723e996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9471ab068c13962034afd6e4eb3b0841b723e996/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3e10f9cb6b2e925ae73cd5230df98746640b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/db3e10f9cb6b2e925ae73cd5230df98746640b34", "html_url": "https://github.com/rust-lang/rust/commit/db3e10f9cb6b2e925ae73cd5230df98746640b34"}, {"sha": "3b4151c9f3f66894a8d9f2d313f406ad21abf00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4151c9f3f66894a8d9f2d313f406ad21abf00d", "html_url": "https://github.com/rust-lang/rust/commit/3b4151c9f3f66894a8d9f2d313f406ad21abf00d"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "1c61050147d817d4c8f5ecbe0189463b7fcf7240", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -2101,7 +2101,7 @@ impl<T: ?Sized> Unpin for Rc<T> {}\n ///\n /// - This function is safe for any argument if `T` is sized, and\n /// - if `T` is unsized, the pointer must have appropriate pointer metadata\n-///   aquired from the real instance that you are getting this offset for.\n+///   acquired from the real instance that you are getting this offset for.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // Align the unsized value to the end of the `RcBox`.\n     // Because it is ?Sized, it will always be the last field in memory."}, {"sha": "343a17b002f57d8281f9b55d007c872da17a1f60", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -2255,7 +2255,7 @@ impl<T: ?Sized> Unpin for Arc<T> {}\n ///\n /// - This function is safe for any argument if `T` is sized, and\n /// - if `T` is unsized, the pointer must have appropriate pointer metadata\n-///   aquired from the real instance that you are getting this offset for.\n+///   acquired from the real instance that you are getting this offset for.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // Align the unsized value to the end of the `ArcInner`.\n     // Because it is `?Sized`, it will always be the last field in memory."}, {"sha": "851ca17a365484370abe8d14971221533330ac84", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -37,7 +37,7 @@ fn box_clone_and_clone_from_equivalence() {\n /// This test might give a false positive in case the box realocates, but the alocator keeps the\n /// original pointer.\n ///\n-/// On the other hand it won't give a false negative, if it fails than the memory was definitly not\n+/// On the other hand it won't give a false negative, if it fails than the memory was definitely not\n /// reused\n #[test]\n fn box_clone_from_ptr_stability() {"}, {"sha": "c44ce9873d508a44ef3bb40fe82515e858c162c3", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -189,7 +189,7 @@ unsafe impl AllocRef for System {\n             ReallocPlacement::MayMove if layout.size() == 0 => {\n                 let new_layout =\n                     // SAFETY: The new size and layout alignement guarantees\n-                    // are transfered to the caller (they come from parameters).\n+                    // are transferred to the caller (they come from parameters).\n                     //\n                     // See the preconditions for `Layout::from_size_align` to\n                     // see what must be checked.\n@@ -254,7 +254,7 @@ unsafe impl AllocRef for System {\n                 //\n                 // See `GlobalAlloc::realloc` for more informations about the\n                 // guarantees expected by this method. `ptr`, `layout` and\n-                // `new_size` are parameters and the responsability for their\n+                // `new_size` are parameters and the responsibility for their\n                 // correctness is left to the caller.\n                 //\n                 // `realloc` probably checks for `new_size < size` or something"}, {"sha": "c98008688ab4f078d39f7511e3b522faddb8601a", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -1363,7 +1363,7 @@ mod self_upper_keyword {}\n ///\n /// let r1 = &FOO as *const _;\n /// let r2 = &FOO as *const _;\n-/// // With a strictly read-only static, references will have the same adress\n+/// // With a strictly read-only static, references will have the same address\n /// assert_eq!(r1, r2);\n /// // A static item can be used just like a variable in many cases\n /// println!(\"{:?}\", FOO);"}, {"sha": "714ec3e878617adfad8c2308741d9f599d8e2c84", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -81,7 +81,7 @@\n //   see the changes to drop the `Waiter` struct correctly.\n // * There is one place where the two atomics `Once.state_and_queue` and\n //   `Waiter.signaled` come together, and might be reordered by the compiler or\n-//   processor. Because both use Aquire ordering such a reordering is not\n+//   processor. Because both use Acquire ordering such a reordering is not\n //   allowed, so no need for SeqCst.\n \n use crate::cell::Cell;"}, {"sha": "133c4bf2db5f7a869c8ecd8a6db3654dcc67f9eb", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -166,15 +166,15 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n             (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n-                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n                     relation.const_equate_obligation(a, b);\n                 }\n                 return Ok(b);\n             }\n             (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n-                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n                     relation.const_equate_obligation(a, b);"}, {"sha": "0125e0f48e8852944dc4e5ecdacbf3b42b75c023", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n         if let (Some(ident), true) = (override_error_code, fn_returns.is_empty()) {\n-            // Provide a more targetted error code and description.\n+            // Provide a more targeted error code and description.\n             err.code(rustc_errors::error_code!(E0772));\n             err.set_primary_message(&format!(\n                 \"{} has {} but calling `{}` introduces an implicit `'static` lifetime \\"}, {"sha": "352b8bff7e2fb80df0428685f901b70a5f850154", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx> SpecializedEncoder<Span> for EncodeContext<'a, 'tcx> {\n         // real code should never need to care about this.\n         //\n         // 2. Using `Span::def_site` or `Span::mixed_site` will not\n-        // include any hygiene information associated with the defintion\n+        // include any hygiene information associated with the definition\n         // site. This means that a proc-macro cannot emit a `$crate`\n         // identifier which resolves to one of its dependencies,\n         // which also should never come up in practice."}, {"sha": "07221082048fbc3603a8995e98d7f670e3e374e1", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -585,7 +585,7 @@ struct OpaqueTypeExpander<'tcx> {\n     found_recursion: bool,\n     /// Whether or not to check for recursive opaque types.\n     /// This is `true` when we're explicitly checking for opaque type\n-    /// recursion, and 'false' otherwise to avoid unecessary work.\n+    /// recursion, and 'false' otherwise to avoid unnecessary work.\n     check_recursion: bool,\n     tcx: TyCtxt<'tcx>,\n }"}, {"sha": "f1a7338d11fd966180551bf5078984e23c5aae18", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -524,7 +524,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                                         // The `is_empty` predicate is introduced to exclude the case\n                                         // where the projection operations are [ .field, * ].\n                                         // The reason is because promotion will be illegal if field\n-                                        // accesses preceed the dereferencing.\n+                                        // accesses precede the dereferencing.\n                                         // Discussion can be found at\n                                         // https://github.com/rust-lang/rust/pull/74945#discussion_r463063247\n                                         // There may be opportunity for generalization, but this needs to be"}, {"sha": "daff10eb194f83fa15c6003f8f34094ef4533f61", "filename": "src/librustc_mir_build/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -133,7 +133,7 @@ crate enum PatKind<'tcx> {\n         var: hir::HirId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pat<'tcx>>,\n-        /// Is this the leftmost occurance of the binding, i.e., is `var` the\n+        /// Is this the leftmost occurrence of the binding, i.e., is `var` the\n         /// `HirId` of this pattern?\n         is_primary: bool,\n     },"}, {"sha": "9fcdd46539c46f15aee8c50306f9f58af128ea18", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -1717,7 +1717,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         // `-Z instrument-coverage` implies:\n-        //   * `-Z symbol-mangling-version=v0` - to ensure consistent and reversable name mangling.\n+        //   * `-Z symbol-mangling-version=v0` - to ensure consistent and reversible name mangling.\n         //     Note, LLVM coverage tools can analyze coverage over multiple runs, including some\n         //     changes to source code; so mangled names must be consistent across compilations.\n         //   * `-C link-dead-code` - so unexecuted code is still counted as zero, rather than be"}, {"sha": "9cdb7e966fef860d41608cca0e6a46e594cda302", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -63,7 +63,7 @@ impl GatedSpans {\n \n #[derive(Default)]\n pub struct SymbolGallery {\n-    /// All symbols occurred and their first occurrance span.\n+    /// All symbols occurred and their first occurrence span.\n     pub symbols: Lock<BTreeMap<Symbol, Span>>,\n }\n "}, {"sha": "a03ac4e1fdba1638c7f5adff9bcb76f2094db332", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -891,7 +891,7 @@ impl UseSpecializedDecodable for ExpnId {}\n \n #[derive(Default)]\n pub struct HygieneEncodeContext {\n-    /// All `SyntaxContexts` for which we have writen `SyntaxContextData` into crate metadata.\n+    /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.\n     /// This is `None` after we finish encoding `SyntaxContexts`, to ensure\n     /// that we don't accidentally try to encode any more `SyntaxContexts`\n     serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,\n@@ -961,7 +961,7 @@ pub struct HygieneDecodeContext {\n     // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current\n     // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create\n     // a new id in the global `HygieneData`. This map tracks the ID we end up picking,\n-    // so that multiple occurences of the same serialized id are decoded to the same\n+    // so that multiple occurrences of the same serialized id are decoded to the same\n     // `SyntaxContext`\n     remapped_ctxts: Lock<Vec<Option<SyntaxContext>>>,\n     // The same as `remapepd_ctxts`, but for `ExpnId`s"}, {"sha": "db8cdfc5b20d65ea7160c9b6f3bcc3637d38762f", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -456,7 +456,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         //\n         // Both of these trigger a special `CoerceUnsized`-related error (E0376)\n         //\n-        // We can take advantage of this fact to avoid performing unecessary work.\n+        // We can take advantage of this fact to avoid performing unnecessary work.\n         // If either `source` or `target` is a type variable, then any applicable impl\n         // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)\n         // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for"}, {"sha": "51e1af359cdcc6d42839b57679f671b40681d1d4", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -10,7 +10,7 @@\n // const-evaluator computes a value that *does* meet the conditions for\n // structural-match, but the const expression itself has abstractions (like\n // calls to const functions) that may fit better with a type-based analysis\n-// rather than a committment to a specific value.\n+// rather than a commitment to a specific value.\n \n #![warn(indirect_structural_match)]\n "}, {"sha": "b3d8610ff51730d9ef791c8fdfdff4255cdc8a7e", "filename": "src/test/ui/consts/issue-73976-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -1,5 +1,5 @@\n // This test is from #73976. We previously did not check if a type is monomorphized\n-// before calculating its type id, which leads to the bizzare behaviour below that\n+// before calculating its type id, which leads to the bizarre behaviour below that\n // TypeId of a generic type does not match itself.\n //\n // This test case should either run-pass or be rejected at compile time."}, {"sha": "034499145b78051dc57619c7732dce70d79692b9", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -23,7 +23,7 @@ struct _\u30d2b;\n struct __\u03c7a;\n //~^ ERROR type `__\u03c7a` should have an upper camel case name\n \n-// Besides this, we cannot have two continous underscores in the middle.\n+// Besides this, we cannot have two continuous underscores in the middle.\n \n struct \u5bf9__\u5426;\n //~^ ERROR type `\u5bf9__\u5426` should have an upper camel case name"}, {"sha": "0b52a5fde35dc8bb96108c89aad2cb7962a04f90", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -18,7 +18,7 @@ fn \u7f16\u7a0b() {}\n fn \u0426() {}\n //~^ ERROR function `\u0426` should have a snake case name\n \n-// besides this, you cannot use continous underscores in the middle\n+// besides this, you cannot use continuous underscores in the middle\n \n fn \u5206__\u9694() {}\n //~^ ERROR function `\u5206__\u9694` should have a snake case name"}, {"sha": "4f11f81b00bfab4b294036b46f8a720824a7907a", "filename": "src/test/ui/proc-macro/crt-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -1,4 +1,4 @@\n-// Test proc-macro crate can be built without addtional RUSTFLAGS\n+// Test proc-macro crate can be built without additional RUSTFLAGS\n // on musl target\n // override -Ctarget-feature=-crt-static from compiletest\n // compile-flags: -Ctarget-feature="}, {"sha": "f54b3f2bfe28a2f7d9debb79f04b5df486047ea3", "filename": "src/tools/clippy/tests/ui/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9471ab068c13962034afd6e4eb3b0841b723e996/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformatting.rs?ref=9471ab068c13962034afd6e4eb3b0841b723e996", "patch": "@@ -149,7 +149,7 @@ fn main() {\n         1 + 2, 3 \n                 - 4, 5\n     ];\n-    // lint if it doesnt\n+    // lint if it doesn't\n     let _ = &[\n         -1\n         -4,"}]}