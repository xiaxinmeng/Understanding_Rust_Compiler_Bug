{"sha": "921689b70da39160dd381e9716472827e36b03b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTY4OWI3MGRhMzkxNjBkZDM4MWU5NzE2NDcyODI3ZTM2YjAzYjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T18:59:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T19:03:13Z"}, "message": "kill text utils", "tree": {"sha": "a390d74ee5272a4a0070f5d4ea5281a04d4ba56a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a390d74ee5272a4a0070f5d4ea5281a04d4ba56a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921689b70da39160dd381e9716472827e36b03b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921689b70da39160dd381e9716472827e36b03b8", "html_url": "https://github.com/rust-lang/rust/commit/921689b70da39160dd381e9716472827e36b03b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921689b70da39160dd381e9716472827e36b03b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f553837c1ca30a52bf5091689c21d3c3e3362395", "url": "https://api.github.com/repos/rust-lang/rust/commits/f553837c1ca30a52bf5091689c21d3c3e3362395", "html_url": "https://github.com/rust-lang/rust/commit/f553837c1ca30a52bf5091689c21d3c3e3362395"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "1dbfca91b2c6d3bdb8c8dbb6511f80e9502c1b60", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921689b70da39160dd381e9716472827e36b03b8/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921689b70da39160dd381e9716472827e36b03b8/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=921689b70da39160dd381e9716472827e36b03b8", "patch": "@@ -31,7 +31,6 @@ mod parser_impl;\n mod reparsing;\n mod string_lexing;\n mod syntax_kinds;\n-pub mod text_utils;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n mod validation;\n@@ -75,8 +74,7 @@ impl SourceFile {\n             .map(|(green_node, errors)| SourceFile::new(green_node, errors))\n     }\n     fn full_reparse(&self, edit: &AtomTextEdit) -> TreePtr<SourceFile> {\n-        let text =\n-            text_utils::replace_range(self.syntax().text().to_string(), edit.delete, &edit.insert);\n+        let text = edit.apply(self.syntax().text().to_string());\n         SourceFile::parse(&text)\n     }\n     pub fn errors(&self) -> Vec<SyntaxError> {"}, {"sha": "2f1de6b02d82802e0df561f0384bd20833317d27", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/921689b70da39160dd381e9716472827e36b03b8/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921689b70da39160dd381e9716472827e36b03b8/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=921689b70da39160dd381e9716472827e36b03b8", "patch": "@@ -3,7 +3,6 @@ use crate::grammar;\n use crate::lexer::{tokenize, Token};\n use crate::parser_api::Parser;\n use crate::parser_impl;\n-use crate::text_utils::replace_range;\n use crate::yellow::{self, GreenNode, SyntaxError, SyntaxNode};\n use crate::{SyntaxKind::*, TextRange, TextUnit};\n use ra_text_edit::AtomTextEdit;\n@@ -62,11 +61,8 @@ fn reparse_block<'node>(\n }\n \n fn get_text_after_edit(node: &SyntaxNode, edit: &AtomTextEdit) -> String {\n-    replace_range(\n-        node.text().to_string(),\n-        edit.delete - node.range().start(),\n-        &edit.insert,\n-    )\n+    let edit = AtomTextEdit::replace(edit.delete - node.range().start(), edit.insert.clone());\n+    edit.apply(node.text().to_string())\n }\n \n fn is_contextual_kw(text: &str) -> bool {\n@@ -156,7 +152,7 @@ fn merge_errors(\n mod tests {\n     use test_utils::{extract_range, assert_eq_text};\n \n-    use crate::{SourceFile, AstNode, text_utils::replace_range, utils::dump_tree};\n+    use crate::{SourceFile, AstNode, utils::dump_tree};\n     use super::*;\n \n     fn do_check<F>(before: &str, replace_with: &str, reparser: F)\n@@ -167,7 +163,8 @@ mod tests {\n         ) -> Option<(&'a SyntaxNode, GreenNode, Vec<SyntaxError>)>,\n     {\n         let (range, before) = extract_range(before);\n-        let after = replace_range(before.clone(), range, replace_with);\n+        let edit = AtomTextEdit::replace(range, replace_with.to_owned());\n+        let after = edit.apply(before.clone());\n \n         let fully_reparsed = SourceFile::parse(&after);\n         let incrementally_reparsed = {"}, {"sha": "7aaf4c22304310d39aa159a1ab2aff970d893aa5", "filename": "crates/ra_syntax/src/text_utils.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f553837c1ca30a52bf5091689c21d3c3e3362395/crates%2Fra_syntax%2Fsrc%2Ftext_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553837c1ca30a52bf5091689c21d3c3e3362395/crates%2Fra_syntax%2Fsrc%2Ftext_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftext_utils.rs?ref=f553837c1ca30a52bf5091689c21d3c3e3362395", "patch": "@@ -1,8 +0,0 @@\n-use crate::TextRange;\n-\n-pub fn replace_range(mut text: String, range: TextRange, replace_with: &str) -> String {\n-    let start = u32::from(range.start()) as usize;\n-    let end = u32::from(range.end()) as usize;\n-    text.replace_range(start..end, replace_with);\n-    text\n-}"}, {"sha": "fb693b3ae0500e4730279245c18ce94a1299481c", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/921689b70da39160dd381e9716472827e36b03b8/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921689b70da39160dd381e9716472827e36b03b8/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=921689b70da39160dd381e9716472827e36b03b8", "patch": "@@ -28,4 +28,11 @@ impl AtomTextEdit {\n     pub fn insert(offset: TextUnit, text: String) -> AtomTextEdit {\n         AtomTextEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n     }\n+\n+    pub fn apply(&self, mut text: String) -> String {\n+        let start = u32::from(self.delete.start()) as usize;\n+        let end = u32::from(self.delete.end()) as usize;\n+        text.replace_range(start..end, &self.insert);\n+        text\n+    }\n }"}]}