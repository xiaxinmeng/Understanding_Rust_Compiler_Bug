{"sha": "bc4d574ff2ffcfe76db36116cc4f193384065985", "node_id": "C_kwDOAAsO6NoAKGJjNGQ1NzRmZjJmZmNmZTc2ZGIzNjExNmNjNGYxOTMzODQwNjU5ODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T06:52:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T06:52:39Z"}, "message": "Auto merge of #102150 - matthiaskrgr:rollup-6xmd8f3, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #102113 (OpTy: fix a method taking self rather than &self)\n - #102118 (rustdoc: clean up line numbers on code examples)\n - #102123 (Add note to clippy::non_expressive_names doc)\n - #102125 (rustdoc: remove no-op CSS `.content .item-info { position: relative }`)\n - #102127 (Use appropriate variable names)\n - #102128 (Const unification is already infallible, remove the error handling logic)\n - #102133 (Use valtrees for comparison)\n - #102135 (Improve some AllTypes fields name)\n - #102144 (Extend const_convert with const {FormResidual, Try} for ControlFlow.)\n - #102147 (rustdoc: remove no-op CSS `.location:empty { border: none }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bdaf7d8c895a80f9c18b04930238c970c963422a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdaf7d8c895a80f9c18b04930238c970c963422a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4d574ff2ffcfe76db36116cc4f193384065985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d574ff2ffcfe76db36116cc4f193384065985", "html_url": "https://github.com/rust-lang/rust/commit/bc4d574ff2ffcfe76db36116cc4f193384065985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d574ff2ffcfe76db36116cc4f193384065985/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77e7e88567691068f5fba288618023368882d60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e7e88567691068f5fba288618023368882d60b", "html_url": "https://github.com/rust-lang/rust/commit/77e7e88567691068f5fba288618023368882d60b"}, {"sha": "dfeff64550444e7840c21de36f4ffea6d9647b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfeff64550444e7840c21de36f4ffea6d9647b90", "html_url": "https://github.com/rust-lang/rust/commit/dfeff64550444e7840c21de36f4ffea6d9647b90"}], "stats": {"total": 172, "additions": 96, "deletions": 76}, "files": [{"sha": "bc1aa43b73a993e43a4d3a4ee80d391f5ebb2efc", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -280,7 +280,7 @@ impl<'tcx, Prov: Provenance> PlaceTy<'tcx, Prov> {\n \n     #[inline(always)]\n     #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n-    pub fn assert_mem_place(self) -> MPlaceTy<'tcx, Prov> {\n+    pub fn assert_mem_place(&self) -> MPlaceTy<'tcx, Prov> {\n         self.try_as_mplace().unwrap()\n     }\n }"}, {"sha": "682ad02da8635be045259acaa80c344ac51ea4ac", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -147,11 +147,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n                 ty::ConstKind::Infer(InferConst::Var(b_vid)),\n             ) => {\n-                self.inner\n-                    .borrow_mut()\n-                    .const_unification_table()\n-                    .unify_var_var(a_vid, b_vid)\n-                    .map_err(|e| const_unification_error(a_is_expected, e))?;\n+                self.inner.borrow_mut().const_unification_table().union(a_vid, b_vid);\n                 return Ok(a);\n             }\n \n@@ -246,21 +242,17 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }\n             .relate(ct, ct)?;\n \n-        self.inner\n-            .borrow_mut()\n-            .const_unification_table()\n-            .unify_var_value(\n-                target_vid,\n-                ConstVarValue {\n-                    origin: ConstVariableOrigin {\n-                        kind: ConstVariableOriginKind::ConstInference,\n-                        span: DUMMY_SP,\n-                    },\n-                    val: ConstVariableValue::Known { value },\n+        self.inner.borrow_mut().const_unification_table().union_value(\n+            target_vid,\n+            ConstVarValue {\n+                origin: ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::ConstInference,\n+                    span: DUMMY_SP,\n                 },\n-            )\n-            .map(|()| value)\n-            .map_err(|e| const_unification_error(vid_is_expected, e))\n+                val: ConstVariableValue::Known { value },\n+            },\n+        );\n+        Ok(value)\n     }\n \n     fn unify_integral_variable(\n@@ -768,13 +760,6 @@ pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n     fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n }\n \n-pub fn const_unification_error<'tcx>(\n-    a_is_expected: bool,\n-    (a, b): (ty::Const<'tcx>, ty::Const<'tcx>),\n-) -> TypeError<'tcx> {\n-    TypeError::ConstMismatch(ExpectedFound::new(a_is_expected, a, b))\n-}\n-\n fn int_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::IntVarValue, ty::IntVarValue),"}, {"sha": "41d8c7ffdb945e23bccf1953ddb87f20464f0bda", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {\n }\n \n impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n-    type Error = (ty::Const<'tcx>, ty::Const<'tcx>);\n+    type Error = NoError;\n \n     fn unify_values(&value1: &Self, &value2: &Self) -> Result<Self, Self::Error> {\n         Ok(match (value1.val, value2.val) {"}, {"sha": "41bb3c7140172fbd0ed58c0f1a5da5b33bc541e8", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -384,14 +384,7 @@ impl DeepRejectCtxt {\n             // they might unify with any value.\n             ty::ConstKind::Unevaluated(_) | ty::ConstKind::Error(_) => true,\n             ty::ConstKind::Value(obl) => match k {\n-                ty::ConstKind::Value(imp) => {\n-                    // FIXME(valtrees): Once we have valtrees, we can just\n-                    // compare them directly here.\n-                    match (obl.try_to_scalar_int(), imp.try_to_scalar_int()) {\n-                        (Some(obl), Some(imp)) => obl == imp,\n-                        _ => true,\n-                    }\n-                }\n+                ty::ConstKind::Value(imp) => obl == imp,\n                 _ => true,\n             },\n "}, {"sha": "f112f1274b8c7d417476b8a137d21bc21a0dd7ce", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -35,8 +35,8 @@ pub(crate) fn target_from_impl_item<'tcx>(\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n         hir::ImplItemKind::Fn(..) => {\n-            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id());\n-            let containing_item = tcx.hir().expect_item(parent_hir_id);\n+            let parent_def_id = tcx.hir().get_parent_item(impl_item.hir_id());\n+            let containing_item = tcx.hir().expect_item(parent_def_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {\n                 hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),\n                 _ => bug!(\"parent of an ImplItem must be an Impl\"),\n@@ -640,17 +640,17 @@ impl CheckAttrVisitor<'_> {\n         let span = meta.span();\n         if let Some(location) = match target {\n             Target::AssocTy => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                let parent_def_id = self.tcx.hir().get_parent_item(hir_id);\n+                let containing_item = self.tcx.hir().expect_item(parent_def_id);\n                 if Target::from_item(containing_item) == Target::Impl {\n                     Some(\"type alias in implementation block\")\n                 } else {\n                     None\n                 }\n             }\n             Target::AssocConst => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                let parent_def_id = self.tcx.hir().get_parent_item(hir_id);\n+                let containing_item = self.tcx.hir().expect_item(parent_def_id);\n                 // We can't link to trait impl's consts.\n                 let err = \"associated constant in trait implementation block\";\n                 match containing_item.kind {"}, {"sha": "fd567a8c68492f2a582cd57a4114f90c6f372e36", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -95,7 +95,8 @@ pub enum ControlFlow<B, C = ()> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<B, C> ops::Try for ControlFlow<B, C> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<B, C> const ops::Try for ControlFlow<B, C> {\n     type Output = C;\n     type Residual = ControlFlow<B, convert::Infallible>;\n \n@@ -114,7 +115,8 @@ impl<B, C> ops::Try for ControlFlow<B, C> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<B, C> ops::FromResidual for ControlFlow<B, C> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<B, C> const ops::FromResidual for ControlFlow<B, C> {\n     #[inline]\n     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {\n         match residual {"}, {"sha": "621f83824d96615f743d3fba1d1df6cedf162a9d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -239,8 +239,8 @@ struct AllTypes {\n     opaque_tys: FxHashSet<ItemEntry>,\n     statics: FxHashSet<ItemEntry>,\n     constants: FxHashSet<ItemEntry>,\n-    attributes: FxHashSet<ItemEntry>,\n-    derives: FxHashSet<ItemEntry>,\n+    attribute_macros: FxHashSet<ItemEntry>,\n+    derive_macros: FxHashSet<ItemEntry>,\n     trait_aliases: FxHashSet<ItemEntry>,\n }\n \n@@ -259,8 +259,8 @@ impl AllTypes {\n             opaque_tys: new_set(100),\n             statics: new_set(100),\n             constants: new_set(100),\n-            attributes: new_set(100),\n-            derives: new_set(100),\n+            attribute_macros: new_set(100),\n+            derive_macros: new_set(100),\n             trait_aliases: new_set(100),\n         }\n     }\n@@ -283,8 +283,10 @@ impl AllTypes {\n                 ItemType::OpaqueTy => self.opaque_tys.insert(ItemEntry::new(new_url, name)),\n                 ItemType::Static => self.statics.insert(ItemEntry::new(new_url, name)),\n                 ItemType::Constant => self.constants.insert(ItemEntry::new(new_url, name)),\n-                ItemType::ProcAttribute => self.attributes.insert(ItemEntry::new(new_url, name)),\n-                ItemType::ProcDerive => self.derives.insert(ItemEntry::new(new_url, name)),\n+                ItemType::ProcAttribute => {\n+                    self.attribute_macros.insert(ItemEntry::new(new_url, name))\n+                }\n+                ItemType::ProcDerive => self.derive_macros.insert(ItemEntry::new(new_url, name)),\n                 ItemType::TraitAlias => self.trait_aliases.insert(ItemEntry::new(new_url, name)),\n                 _ => true,\n             };\n@@ -327,10 +329,10 @@ impl AllTypes {\n         if !self.constants.is_empty() {\n             sections.insert(ItemSection::Constants);\n         }\n-        if !self.attributes.is_empty() {\n+        if !self.attribute_macros.is_empty() {\n             sections.insert(ItemSection::AttributeMacros);\n         }\n-        if !self.derives.is_empty() {\n+        if !self.derive_macros.is_empty() {\n             sections.insert(ItemSection::DeriveMacros);\n         }\n         if !self.trait_aliases.is_empty() {\n@@ -373,8 +375,8 @@ impl AllTypes {\n         print_entries(f, &self.primitives, ItemSection::PrimitiveTypes);\n         print_entries(f, &self.traits, ItemSection::Traits);\n         print_entries(f, &self.macros, ItemSection::Macros);\n-        print_entries(f, &self.attributes, ItemSection::AttributeMacros);\n-        print_entries(f, &self.derives, ItemSection::DeriveMacros);\n+        print_entries(f, &self.attribute_macros, ItemSection::AttributeMacros);\n+        print_entries(f, &self.derive_macros, ItemSection::DeriveMacros);\n         print_entries(f, &self.functions, ItemSection::Functions);\n         print_entries(f, &self.typedefs, ItemSection::TypeDefinitions);\n         print_entries(f, &self.trait_aliases, ItemSection::TraitAliases);"}, {"sha": "4cf91bb00c691944a307b4a50efbfe3de6740bab", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -522,10 +522,6 @@ img {\n \twidth: 100px;\n }\n \n-.location:empty {\n-\tborder: none;\n-}\n-\n .block ul, .block li {\n \tpadding: 0;\n \tmargin: 0;\n@@ -577,13 +573,9 @@ h2.location a {\n }\n \n .rustdoc .example-wrap {\n-\tdisplay: inline-flex;\n+\tdisplay: flex;\n \tmargin-bottom: 10px;\n-}\n-\n-.example-wrap {\n \tposition: relative;\n-\twidth: 100%;\n }\n \n .example-wrap > pre.line-number {\n@@ -745,7 +737,6 @@ pre, .rustdoc.source .example-wrap {\n }\n \n .content .item-info {\n-\tposition: relative;\n \tmargin-left: 24px;\n }\n "}, {"sha": "5fbe540c320453d47601ba6de7aea86359671048", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -697,20 +697,39 @@ function loadCss(cssFileName) {\n         }\n     }());\n \n+    window.rustdoc_add_line_numbers_to_examples = () => {\n+        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), x => {\n+            const parent = x.parentNode;\n+            const line_numbers = parent.querySelectorAll(\".line-number\");\n+            if (line_numbers.length > 0) {\n+                return;\n+            }\n+            const count = x.textContent.split(\"\\n\").length;\n+            const elems = [];\n+            for (let i = 0; i < count; ++i) {\n+                elems.push(i + 1);\n+            }\n+            const node = document.createElement(\"pre\");\n+            addClass(node, \"line-number\");\n+            node.innerHTML = elems.join(\"\\n\");\n+            parent.insertBefore(node, x);\n+        });\n+    };\n+\n+    window.rustdoc_remove_line_numbers_from_examples = () => {\n+        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), x => {\n+            const parent = x.parentNode;\n+            const line_numbers = parent.querySelectorAll(\".line-number\");\n+            for (const node of line_numbers) {\n+                parent.removeChild(node);\n+            }\n+        });\n+    };\n+\n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n         if (getSettingValue(\"line-numbers\") === \"true\") {\n-            onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), x => {\n-                const count = x.textContent.split(\"\\n\").length;\n-                const elems = [];\n-                for (let i = 0; i < count; ++i) {\n-                    elems.push(i + 1);\n-                }\n-                const node = document.createElement(\"pre\");\n-                addClass(node, \"line-number\");\n-                node.innerHTML = elems.join(\"\\n\");\n-                x.parentNode.insertBefore(node, x);\n-            });\n+            window.rustdoc_add_line_numbers_to_examples();\n         }\n     }());\n "}, {"sha": "1c5d33e212754671efa1a0bc6afff4e226b90b9c", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -19,6 +19,13 @@\n                 updateSystemTheme();\n                 updateLightAndDark();\n                 break;\n+            case \"line-numbers\":\n+                if (value === true) {\n+                    window.rustdoc_add_line_numbers_to_examples();\n+                } else {\n+                    window.rustdoc_remove_line_numbers_from_examples();\n+                }\n+                break;\n         }\n     }\n "}, {"sha": "ebfffbce71561ffe3f739c60ec05dbc5f96ce7ff", "filename": "src/test/rustdoc-gui/docblock-code-block-line-number.goml", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -20,3 +20,20 @@ assert-css: (\"pre.line-number\", {\n })\n // The first code block has two lines so let's check its `<pre>` elements lists both of them.\n assert-text: (\"pre.line-number\", \"1\\n2\")\n+\n+// Now, try changing the setting dynamically. We'll turn it off, using the settings menu,\n+// and make sure it goes away.\n+\n+// First, open the settings menu.\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+assert-css: (\"#settings\", {\"display\": \"block\"})\n+\n+// Then, click the toggle button.\n+click: \"input#line-numbers + .slider\"\n+wait-for: 100 // wait-for-false does not exist\n+assert-false: \"pre.line-number\"\n+\n+// Finally, turn it on again.\n+click: \"input#line-numbers + .slider\"\n+wait-for: \"pre.line-number\""}, {"sha": "47e40aa8e3b1c2a1e8f32c938d34e001a56edc03", "filename": "src/test/rustdoc-gui/source-anchor-scroll.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Ftest%2Frustdoc-gui%2Fsource-anchor-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Ftest%2Frustdoc-gui%2Fsource-anchor-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-anchor-scroll.goml?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -10,7 +10,7 @@ assert-property: (\"html\", {\"scrollTop\": \"0\"})\n click: '//a[text() = \"barbar\"]'\n assert-property: (\"html\", {\"scrollTop\": \"125\"})\n click: '//a[text() = \"bar\"]'\n-assert-property: (\"html\", {\"scrollTop\": \"166\"})\n+assert-property: (\"html\", {\"scrollTop\": \"156\"})\n click: '//a[text() = \"sub_fn\"]'\n assert-property: (\"html\", {\"scrollTop\": \"53\"})\n "}, {"sha": "a7cd1f6d0652b199f27f527d089369c975b4c71a", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d574ff2ffcfe76db36116cc4f193384065985/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=bc4d574ff2ffcfe76db36116cc4f193384065985", "patch": "@@ -15,6 +15,10 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for names that are very similar and thus confusing.\n     ///\n+    /// Note: this lint looks for similar names throughout each\n+    /// scope. To allow it, you need to allow it on the scope\n+    /// level, not on the name that is reported.\n+    ///\n     /// ### Why is this bad?\n     /// It's hard to distinguish between names that differ only\n     /// by a single character."}]}