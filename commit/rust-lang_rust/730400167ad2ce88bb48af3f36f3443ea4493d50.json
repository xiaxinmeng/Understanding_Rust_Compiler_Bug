{"sha": "730400167ad2ce88bb48af3f36f3443ea4493d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMDQwMDE2N2FkMmNlODhiYjQ4YWYzZjM2ZjM0NDNlYTQ0OTNkNTA=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-11-24T16:33:47Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-11-24T16:33:47Z"}, "message": "Support LLVM 4.0 in OptimizationDiagnostic FFI\n\n- getMsg() changed to return std::string by-value. Fix: copy the data to a rust String during unpacking.\n- getPassName() changed to return StringRef", "tree": {"sha": "79c1a845d9ddb60c09089798e35391629c2a52c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c1a845d9ddb60c09089798e35391629c2a52c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730400167ad2ce88bb48af3f36f3443ea4493d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730400167ad2ce88bb48af3f36f3443ea4493d50", "html_url": "https://github.com/rust-lang/rust/commit/730400167ad2ce88bb48af3f36f3443ea4493d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730400167ad2ce88bb48af3f36f3443ea4493d50/comments", "author": null, "committer": null, "parents": [{"sha": "29abe6f9e86829d55ba180a5957f203a64a96b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/29abe6f9e86829d55ba180a5957f203a64a96b65", "html_url": "https://github.com/rust-lang/rust/commit/29abe6f9e86829d55ba180a5957f203a64a96b65"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "e11274f2064dd43bd08d938c1501b254002fc831", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=730400167ad2ce88bb48af3f36f3443ea4493d50", "patch": "@@ -48,29 +48,32 @@ pub struct OptimizationDiagnostic {\n     pub pass_name: *const c_char,\n     pub function: ValueRef,\n     pub debug_loc: DebugLocRef,\n-    pub message: TwineRef,\n+    pub message: String,\n }\n \n impl OptimizationDiagnostic {\n     unsafe fn unpack(kind: OptimizationDiagnosticKind,\n                      di: DiagnosticInfoRef)\n                      -> OptimizationDiagnostic {\n-\n-        let mut opt = OptimizationDiagnostic {\n+        let mut pass_name = ptr::null();\n+        let mut function = ptr::null_mut();\n+        let mut debug_loc = ptr::null_mut();\n+\n+        let message = super::build_string(|message|\n+            super::LLVMRustUnpackOptimizationDiagnostic(di,\n+                                                        &mut pass_name,\n+                                                        &mut function,\n+                                                        &mut debug_loc,\n+                                                        message)\n+        );\n+\n+        OptimizationDiagnostic {\n             kind: kind,\n-            pass_name: ptr::null(),\n-            function: ptr::null_mut(),\n-            debug_loc: ptr::null_mut(),\n-            message: ptr::null_mut(),\n-        };\n-\n-        super::LLVMRustUnpackOptimizationDiagnostic(di,\n-                                                    &mut opt.pass_name,\n-                                                    &mut opt.function,\n-                                                    &mut opt.debug_loc,\n-                                                    &mut opt.message);\n-\n-        opt\n+            pass_name: pass_name,\n+            function: function,\n+            debug_loc: debug_loc,\n+            message: message.expect(\"got a non-UTF8 OptimizationDiagnostic message from LLVM\")\n+        }\n     }\n }\n "}, {"sha": "15bca0207c707a0f5ee8d1c8e847531decf87340", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=730400167ad2ce88bb48af3f36f3443ea4493d50", "patch": "@@ -1823,7 +1823,7 @@ extern \"C\" {\n                                                 pass_name_out: *mut *const c_char,\n                                                 function_out: *mut ValueRef,\n                                                 debugloc_out: *mut DebugLocRef,\n-                                                message_out: *mut TwineRef);\n+                                                message_out: RustStringRef);\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n                                              cookie_out: *mut c_uint,\n                                              message_out: *mut TwineRef,"}, {"sha": "029930472586e6370953da8dafe76838725cb058", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=730400167ad2ce88bb48af3f36f3443ea4493d50", "patch": "@@ -417,7 +417,7 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n                                                 opt.kind.describe(),\n                                                 pass_name,\n                                                 if loc.is_empty() { \"[unknown]\" } else { &*loc },\n-                                                llvm::twine_to_string(opt.message)));\n+                                                opt.message));\n             }\n         }\n "}, {"sha": "7cde282444d50a01360687c82cfa5ebbf45e7f3d", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/730400167ad2ce88bb48af3f36f3443ea4493d50/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=730400167ad2ce88bb48af3f36f3443ea4493d50", "patch": "@@ -871,16 +871,21 @@ LLVMRustUnpackOptimizationDiagnostic(\n     const char **pass_name_out,\n     LLVMValueRef *function_out,\n     LLVMDebugLocRef *debugloc_out,\n-    LLVMTwineRef *message_out)\n+    RustStringRef message_out)\n {\n     // Undefined to call this not on an optimization diagnostic!\n     llvm::DiagnosticInfoOptimizationBase *opt\n         = static_cast<llvm::DiagnosticInfoOptimizationBase*>(unwrap(di));\n \n+#if LLVM_VERSION_GE(4, 0)\n+    *pass_name_out = opt->getPassName().data();\n+#else\n     *pass_name_out = opt->getPassName();\n+#endif\n     *function_out = wrap(&opt->getFunction());\n     *debugloc_out = wrap(&opt->getDebugLoc());\n-    *message_out = wrap(&opt->getMsg());\n+    raw_rust_string_ostream os(message_out);\n+    os << opt->getMsg();\n }\n \n extern \"C\" void"}]}