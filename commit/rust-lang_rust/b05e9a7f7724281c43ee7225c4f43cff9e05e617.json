{"sha": "b05e9a7f7724281c43ee7225c4f43cff9e05e617", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNWU5YTdmNzcyNDI4MWM0M2VlNzIyNWM0ZjQzY2ZmOWUwNWU2MTc=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-12T20:14:03Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-15T22:14:21Z"}, "message": "Add backquotes around variable name", "tree": {"sha": "457ad262199729f6cc75e666a59931f6ab857cdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457ad262199729f6cc75e666a59931f6ab857cdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05e9a7f7724281c43ee7225c4f43cff9e05e617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05e9a7f7724281c43ee7225c4f43cff9e05e617", "html_url": "https://github.com/rust-lang/rust/commit/b05e9a7f7724281c43ee7225c4f43cff9e05e617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05e9a7f7724281c43ee7225c4f43cff9e05e617/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8080bdf275e7c12b8629c3b598c6ab18748957ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8080bdf275e7c12b8629c3b598c6ab18748957ee", "html_url": "https://github.com/rust-lang/rust/commit/8080bdf275e7c12b8629c3b598c6ab18748957ee"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "7ddb5a4536b2301a4d054706c392d9b72f6a41a2", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05e9a7f7724281c43ee7225c4f43cff9e05e617/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05e9a7f7724281c43ee7225c4f43cff9e05e617/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=b05e9a7f7724281c43ee7225c4f43cff9e05e617", "patch": "@@ -435,7 +435,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             err.span_note(\n                 binding_span,\n                 &format!(\n-                    \"move occurs because {} has type `{}`, \\\n+                    \"move occurs because `{}` has type `{}`, \\\n                         which does not implement the `Copy` trait\",\n                     bind_to.name.unwrap(),\n                     bind_to.ty"}, {"sha": "0493a9fa6e8ac3f5e1cc995d3c085c10f8d4070d", "filename": "src/test/ui/suggestions/dont-suggest-ref.stderr", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b05e9a7f7724281c43ee7225c4f43cff9e05e617/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b05e9a7f7724281c43ee7225c4f43cff9e05e617/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr?ref=b05e9a7f7724281c43ee7225c4f43cff9e05e617", "patch": "@@ -8,7 +8,7 @@ LL |     let X(_t) = *s;\n    |           |     help: consider removing this dereference operator: `s`\n    |           data moved here\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:47:11\n    |\n LL |     let X(_t) = *s;\n@@ -24,7 +24,7 @@ LL |     if let Either::One(_t) = *r { }\n    |                        |     help: consider removing this dereference operator: `r`\n    |                        data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:51:24\n    |\n LL |     if let Either::One(_t) = *r { }\n@@ -40,7 +40,7 @@ LL |     while let Either::One(_t) = *r { }\n    |                           |     help: consider removing this dereference operator: `r`\n    |                           data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:55:27\n    |\n LL |     while let Either::One(_t) = *r { }\n@@ -58,7 +58,7 @@ LL |     match *r {\n LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:63:21\n    |\n LL |         Either::One(_t)\n@@ -76,7 +76,7 @@ LL |     match *r {\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:70:21\n    |\n LL |         Either::One(_t) => (),\n@@ -92,7 +92,7 @@ LL |     let X(_t) = *sm;\n    |           |     help: consider removing this dereference operator: `sm`\n    |           data moved here\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:75:11\n    |\n LL |     let X(_t) = *sm;\n@@ -108,7 +108,7 @@ LL |     if let Either::One(_t) = *rm { }\n    |                        |     help: consider removing this dereference operator: `rm`\n    |                        data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:79:24\n    |\n LL |     if let Either::One(_t) = *rm { }\n@@ -124,7 +124,7 @@ LL |     while let Either::One(_t) = *rm { }\n    |                           |     help: consider removing this dereference operator: `rm`\n    |                           data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:83:27\n    |\n LL |     while let Either::One(_t) = *rm { }\n@@ -142,7 +142,7 @@ LL |     match *rm {\n LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:91:21\n    |\n LL |         Either::One(_t)\n@@ -160,7 +160,7 @@ LL |     match *rm {\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:98:21\n    |\n LL |         Either::One(_t) => (),\n@@ -178,7 +178,7 @@ LL |     match *rm {\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:106:21\n    |\n LL |         Either::One(_t) => (),\n@@ -194,7 +194,7 @@ LL |     let X(_t) = vs_[0];\n    |           |     help: consider using a reference instead: `&vs_[0]`\n    |           data moved here\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:111:11\n    |\n LL |     let X(_t) = vs_[0];\n@@ -210,7 +210,7 @@ LL |     if let Either::One(_t) = vr[0] { }\n    |                        |     help: consider using a reference instead: `&vr[0]`\n    |                        data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:115:24\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n@@ -226,7 +226,7 @@ LL |     while let Either::One(_t) = vr[0] { }\n    |                           |     help: consider using a reference instead: `&vr[0]`\n    |                           data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:119:27\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n@@ -244,7 +244,7 @@ LL |     match vr[0] {\n LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:127:21\n    |\n LL |         Either::One(_t)\n@@ -262,7 +262,7 @@ LL |     match vr[0] {\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:134:21\n    |\n LL |         Either::One(_t) => (),\n@@ -278,7 +278,7 @@ LL |     let X(_t) = vsm[0];\n    |           |     help: consider using a reference instead: `&vsm[0]`\n    |           data moved here\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:139:11\n    |\n LL |     let X(_t) = vsm[0];\n@@ -294,7 +294,7 @@ LL |     if let Either::One(_t) = vrm[0] { }\n    |                        |     help: consider using a reference instead: `&vrm[0]`\n    |                        data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:143:24\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n@@ -310,7 +310,7 @@ LL |     while let Either::One(_t) = vrm[0] { }\n    |                           |     help: consider using a reference instead: `&vrm[0]`\n    |                           data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:147:27\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n@@ -328,7 +328,7 @@ LL |     match vrm[0] {\n LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:155:21\n    |\n LL |         Either::One(_t)\n@@ -346,7 +346,7 @@ LL |     match vrm[0] {\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:162:21\n    |\n LL |         Either::One(_t) => (),\n@@ -364,7 +364,7 @@ LL |     match vrm[0] {\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:170:21\n    |\n LL |         Either::One(_t) => (),\n@@ -379,7 +379,7 @@ LL |     let &X(_t) = s;\n    |         |  data moved here\n    |         help: consider removing this borrow operator: `X(_t)`\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:177:12\n    |\n LL |     let &X(_t) = s;\n@@ -394,7 +394,7 @@ LL |     if let &Either::One(_t) = r { }\n    |            |            data moved here\n    |            help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:181:25\n    |\n LL |     if let &Either::One(_t) = r { }\n@@ -409,7 +409,7 @@ LL |     while let &Either::One(_t) = r { }\n    |               |            data moved here\n    |               help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:185:28\n    |\n LL |     while let &Either::One(_t) = r { }\n@@ -427,7 +427,7 @@ LL |         &Either::One(_t)\n    |         |            data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:191:22\n    |\n LL |         &Either::One(_t)\n@@ -445,7 +445,7 @@ LL |         &Either::One(_t) => (),\n    |         |            data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:199:22\n    |\n LL |         &Either::One(_t) => (),\n@@ -463,7 +463,7 @@ LL |         &Either::One(_t) => (),\n    |         |            data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:206:22\n    |\n LL |         &Either::One(_t) => (),\n@@ -478,7 +478,7 @@ LL |     let &mut X(_t) = sm;\n    |         |      data moved here\n    |         help: consider removing this borrow operator: `X(_t)`\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:216:16\n    |\n LL |     let &mut X(_t) = sm;\n@@ -493,7 +493,7 @@ LL |     if let &mut Either::One(_t) = rm { }\n    |            |                data moved here\n    |            help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:220:29\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n@@ -508,7 +508,7 @@ LL |     while let &mut Either::One(_t) = rm { }\n    |               |                data moved here\n    |               help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:224:32\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n@@ -526,12 +526,12 @@ LL |         &mut Either::One(_t) => (),\n LL |         &mut Either::Two(_t) => (),\n    |                          -- ... and here\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:230:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:233:26\n    |\n LL |         &mut Either::Two(_t) => (),\n@@ -557,7 +557,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:239:26\n    |\n LL |         &mut Either::One(_t) => (),\n@@ -575,7 +575,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:246:26\n    |\n LL |         &mut Either::One(_t) => (),\n@@ -593,7 +593,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:253:26\n    |\n LL |         &mut Either::One(_t) => (),\n@@ -608,7 +608,7 @@ LL |     let &X(_t) = &x;\n    |         |  data moved here\n    |         help: consider removing this borrow operator: `X(_t)`\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:265:12\n    |\n LL |     let &X(_t) = &x;\n@@ -623,7 +623,7 @@ LL |     if let &Either::One(_t) = &e { }\n    |            |            data moved here\n    |            help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:269:25\n    |\n LL |     if let &Either::One(_t) = &e { }\n@@ -638,7 +638,7 @@ LL |     while let &Either::One(_t) = &e { }\n    |               |            data moved here\n    |               help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:273:28\n    |\n LL |     while let &Either::One(_t) = &e { }\n@@ -656,7 +656,7 @@ LL |         &Either::One(_t)\n    |         |            data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:279:22\n    |\n LL |         &Either::One(_t)\n@@ -674,7 +674,7 @@ LL |         &Either::One(_t) => (),\n    |         |            data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:287:22\n    |\n LL |         &Either::One(_t) => (),\n@@ -692,7 +692,7 @@ LL |         &Either::One(_t) => (),\n    |         |            data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:294:22\n    |\n LL |         &Either::One(_t) => (),\n@@ -707,7 +707,7 @@ LL |     let &mut X(_t) = &mut xm;\n    |         |      data moved here\n    |         help: consider removing this borrow operator: `X(_t)`\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:300:16\n    |\n LL |     let &mut X(_t) = &mut xm;\n@@ -722,7 +722,7 @@ LL |     if let &mut Either::One(_t) = &mut em { }\n    |            |                data moved here\n    |            help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:304:29\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n@@ -737,7 +737,7 @@ LL |     while let &mut Either::One(_t) = &mut em { }\n    |               |                data moved here\n    |               help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:308:32\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n@@ -755,7 +755,7 @@ LL |         &mut Either::One(_t)\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:314:26\n    |\n LL |         &mut Either::One(_t)\n@@ -773,7 +773,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:322:26\n    |\n LL |         &mut Either::One(_t) => (),\n@@ -791,7 +791,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:329:26\n    |\n LL |         &mut Either::One(_t) => (),\n@@ -809,7 +809,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                data moved here\n    |         help: consider removing this borrow operator: `Either::One(_t)`\n    |\n-note: move occurs because _t has type `X`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:336:26\n    |\n LL |         &mut Either::One(_t) => (),\n@@ -825,7 +825,7 @@ LL |     fn f1(&X(_t): &X) { }\n    |           cannot move out of borrowed content\n    |           help: consider removing this borrow operator: `X(_t)`\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:211:14\n    |\n LL |     fn f1(&X(_t): &X) { }\n@@ -841,7 +841,7 @@ LL |     fn f2(&mut X(_t): &mut X) { }\n    |           cannot move out of borrowed content\n    |           help: consider removing this borrow operator: `X(_t)`\n    |\n-note: move occurs because _t has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:258:18\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }"}]}