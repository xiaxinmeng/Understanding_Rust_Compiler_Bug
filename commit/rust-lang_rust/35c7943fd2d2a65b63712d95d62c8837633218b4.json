{"sha": "35c7943fd2d2a65b63712d95d62c8837633218b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1Yzc5NDNmZDJkMmE2NWI2MzcxMmQ5NWQ2MmM4ODM3NjMzMjE4YjQ=", "commit": {"author": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-09-05T16:34:05Z"}, "committer": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-09-05T17:11:38Z"}, "message": "Add or_default to Entry APIs", "tree": {"sha": "e6071ea3dc7c8d821093ae7999b2c08417e9e1b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6071ea3dc7c8d821093ae7999b2c08417e9e1b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35c7943fd2d2a65b63712d95d62c8837633218b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDrgUCxKUwmVd3b8M1krJ1nF23HEFAlmu2soACgkQ1krJ1nF2\n3HERIBAAg/LC6uddWr0QSABvpTgcX8we+tYOfFjvJ7+5A52nw6WOt1bSlhofqrmp\njqcGmFlHYm1ozg4oJvmv07frbmfKbF8tqoH+g8kusnbewCI/3798S7C2m1UXaEim\neBlsgJnzyRuMJ6wK6mFQUn+HeAeh9Ejd6lstnrCGMbFIvYZ8Uf8vuMaD+6knf6iZ\nwIOvpqlgQArlDWoRLAf0NzrHKoO5NpdyOT9miQ7M175J5xsFYNNwc1qYgAekpqa5\nXtMLmOJbaSReSe27ttBuKSqF+F+OeG5FaiExg4IhYJukIbWwUA4TYOYhmAxRGUVE\nYaTa/gQ+8lqEYy+3rhgg35x9SxEsnONUX2STgFLF24wRv5Z05NiaWo+EakTR+W7K\nSQUe4Z4rXOWHhyShbDlmyrH3sv15mbhyzJUrdVgiRPZn2lfTJZfi1aCi7JwFAuX1\ngRCsqbKewIPeo21SSgozqzBEwMh3fUXrSijI1qStjmZZjwPzNY1Y83nuvyhpEzqA\ng4XH48hPurDZpJySCiiFGsQH62A1oBBd4zu/TR8dfYaez/TMOMslCucHqQ9kcalj\ndbB0gOocjX+gbig/+/zxGruCbIF/pbpQD9RA0b1yBv9fFKiozp3/jp/UA3ejnfHm\nowNP5x8EqdOxEDvY0TnYK98Fhr4rJYnGHavE8c1aeMJMaPvPrU0=\n=vjZ2\n-----END PGP SIGNATURE-----", "payload": "tree e6071ea3dc7c8d821093ae7999b2c08417e9e1b3\nparent 2f1ef9ef1181298d46e79d5dde6bafeb6483926f\nauthor Jon Gjengset <jon@thesquareplanet.com> 1504629245 -0400\ncommitter Jon Gjengset <jon@thesquareplanet.com> 1504631498 -0400\n\nAdd or_default to Entry APIs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35c7943fd2d2a65b63712d95d62c8837633218b4", "html_url": "https://github.com/rust-lang/rust/commit/35c7943fd2d2a65b63712d95d62c8837633218b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35c7943fd2d2a65b63712d95d62c8837633218b4/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ef9ef1181298d46e79d5dde6bafeb6483926f", "html_url": "https://github.com/rust-lang/rust/commit/2f1ef9ef1181298d46e79d5dde6bafeb6483926f"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "f8c8a2a7a718bafa31c0f1dcd8adabb885cd12f6", "filename": "src/doc/unstable-book/src/library-features/entry_or_default.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35c7943fd2d2a65b63712d95d62c8837633218b4/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry_or_default.md", "raw_url": "https://github.com/rust-lang/rust/raw/35c7943fd2d2a65b63712d95d62c8837633218b4/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry_or_default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry_or_default.md?ref=35c7943fd2d2a65b63712d95d62c8837633218b4", "patch": "@@ -0,0 +1,13 @@\n+# `entry_or_default`\n+\n+The tracking issue for this feature is: [#44324]\n+\n+[#44324]: https://github.com/rust-lang/rust/issues/44324\n+\n+------------------------\n+\n+The `entry_or_default` feature adds a new method to `hash_map::Entry`\n+and `btree_map::Entry`, `or_default`, when `V: Default`. This method is\n+semantically identical to `or_insert_with(Default::default)`, and will\n+insert the default value for the type if no entry exists for the current\n+key."}, {"sha": "0adfaf3be8f29244df5fd87b687f2b9e4d35f599", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/35c7943fd2d2a65b63712d95d62c8837633218b4/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c7943fd2d2a65b63712d95d62c8837633218b4/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=35c7943fd2d2a65b63712d95d62c8837633218b4", "patch": "@@ -2104,6 +2104,35 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     }\n }\n \n+impl<'a, K: Ord, V: Default> Entry<'a, K, V> {\n+    #[unstable(feature = \"entry_or_default\", issue = \"44324\")]\n+    /// Ensures a value is in the entry by inserting the default value if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_or_default)]\n+    /// # fn main() {\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<&str, String> = BTreeMap::new();\n+    /// let s = \"hoho\".to_string();\n+    ///\n+    /// map.entry(\"poneyland\").or_default();\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], None);\n+    /// # }\n+    /// ```\n+    pub fn or_default(self) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(Default::default()),\n+        }\n+    }\n+\n+}\n+\n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     /// Gets a reference to the key that would be used when inserting a value\n     /// through the VacantEntry."}, {"sha": "36399067a12cd87f5b39a52e835b68305696bef3", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/35c7943fd2d2a65b63712d95d62c8837633218b4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c7943fd2d2a65b63712d95d62c8837633218b4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=35c7943fd2d2a65b63712d95d62c8837633218b4", "patch": "@@ -2001,6 +2001,35 @@ impl<'a, K, V> Entry<'a, K, V> {\n     }\n }\n \n+impl<'a, K, V: Default> Entry<'a, K, V> {\n+    #[unstable(feature = \"entry_or_default\", issue = \"44324\")]\n+    /// Ensures a value is in the entry by inserting the default value if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_or_default)]\n+    /// # fn main() {\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, Option<usize>> = HashMap::new();\n+    /// let s = \"hoho\".to_string();\n+    ///\n+    /// map.entry(\"poneyland\").or_default();\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], None);\n+    /// # }\n+    /// ```\n+    pub fn or_default(self) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(Default::default()),\n+        }\n+    }\n+\n+}\n+\n impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// Gets a reference to the key in the entry.\n     ///"}]}