{"sha": "064a351953c0491eaa3eff8c9359bc0d2aed1129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NGEzNTE5NTNjMDQ5MWVhYTNlZmY4YzkzNTliYzBkMmFlZDExMjk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-23T09:32:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:35:22Z"}, "message": "Infallible version of def_span.", "tree": {"sha": "ddac0a014e2c3dcccaac3800ce1c47f6e67c2641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddac0a014e2c3dcccaac3800ce1c47f6e67c2641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/064a351953c0491eaa3eff8c9359bc0d2aed1129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/064a351953c0491eaa3eff8c9359bc0d2aed1129", "html_url": "https://github.com/rust-lang/rust/commit/064a351953c0491eaa3eff8c9359bc0d2aed1129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/064a351953c0491eaa3eff8c9359bc0d2aed1129/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cbb44ae2c80545db957763b502dc7f6ea22085", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cbb44ae2c80545db957763b502dc7f6ea22085", "html_url": "https://github.com/rust-lang/rust/commit/a4cbb44ae2c80545db957763b502dc7f6ea22085"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "e1fcc9be66417920f38fe99f3440dc9df859d11c", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/064a351953c0491eaa3eff8c9359bc0d2aed1129/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064a351953c0491eaa3eff8c9359bc0d2aed1129/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=064a351953c0491eaa3eff8c9359bc0d2aed1129", "patch": "@@ -848,50 +848,55 @@ impl<'hir> Map<'hir> {\n     /// Gets the span of the definition of the specified HIR node.\n     /// This is used by `tcx.get_span`\n     pub fn span(&self, hir_id: HirId) -> Span {\n-        match self.find_entry(hir_id).map(|entry| entry.node) {\n-            Some(Node::Param(param)) => param.span,\n-            Some(Node::Item(item)) => match &item.kind {\n+        self.opt_span(hir_id)\n+            .unwrap_or_else(|| bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id))\n+    }\n+\n+    pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {\n+        let span = match self.find_entry(hir_id)?.node {\n+            Node::Param(param) => param.span,\n+            Node::Item(item) => match &item.kind {\n                 ItemKind::Fn(sig, _, _) => sig.span,\n                 _ => item.span,\n             },\n-            Some(Node::ForeignItem(foreign_item)) => foreign_item.span,\n-            Some(Node::TraitItem(trait_item)) => match &trait_item.kind {\n+            Node::ForeignItem(foreign_item) => foreign_item.span,\n+            Node::TraitItem(trait_item) => match &trait_item.kind {\n                 TraitItemKind::Fn(sig, _) => sig.span,\n                 _ => trait_item.span,\n             },\n-            Some(Node::ImplItem(impl_item)) => match &impl_item.kind {\n+            Node::ImplItem(impl_item) => match &impl_item.kind {\n                 ImplItemKind::Fn(sig, _) => sig.span,\n                 _ => impl_item.span,\n             },\n-            Some(Node::Variant(variant)) => variant.span,\n-            Some(Node::Field(field)) => field.span,\n-            Some(Node::AnonConst(constant)) => self.body(constant.body).value.span,\n-            Some(Node::Expr(expr)) => expr.span,\n-            Some(Node::Stmt(stmt)) => stmt.span,\n-            Some(Node::PathSegment(seg)) => seg.ident.span,\n-            Some(Node::Ty(ty)) => ty.span,\n-            Some(Node::TraitRef(tr)) => tr.path.span,\n-            Some(Node::Binding(pat)) => pat.span,\n-            Some(Node::Pat(pat)) => pat.span,\n-            Some(Node::Arm(arm)) => arm.span,\n-            Some(Node::Block(block)) => block.span,\n-            Some(Node::Ctor(..)) => match self.find(self.get_parent_node(hir_id)) {\n-                Some(Node::Item(item)) => item.span,\n-                Some(Node::Variant(variant)) => variant.span,\n+            Node::Variant(variant) => variant.span,\n+            Node::Field(field) => field.span,\n+            Node::AnonConst(constant) => self.body(constant.body).value.span,\n+            Node::Expr(expr) => expr.span,\n+            Node::Stmt(stmt) => stmt.span,\n+            Node::PathSegment(seg) => seg.ident.span,\n+            Node::Ty(ty) => ty.span,\n+            Node::TraitRef(tr) => tr.path.span,\n+            Node::Binding(pat) => pat.span,\n+            Node::Pat(pat) => pat.span,\n+            Node::Arm(arm) => arm.span,\n+            Node::Block(block) => block.span,\n+            Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {\n+                Node::Item(item) => item.span,\n+                Node::Variant(variant) => variant.span,\n                 _ => unreachable!(),\n             },\n-            Some(Node::Lifetime(lifetime)) => lifetime.span,\n-            Some(Node::GenericParam(param)) => param.span,\n-            Some(Node::Visibility(&Spanned {\n+            Node::Lifetime(lifetime) => lifetime.span,\n+            Node::GenericParam(param) => param.span,\n+            Node::Visibility(&Spanned {\n                 node: VisibilityKind::Restricted { ref path, .. },\n                 ..\n-            })) => path.span,\n-            Some(Node::Visibility(v)) => bug!(\"unexpected Visibility {:?}\", v),\n-            Some(Node::Local(local)) => local.span,\n-            Some(Node::MacroDef(macro_def)) => macro_def.span,\n-            Some(Node::Crate(item)) => item.span,\n-            None => bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id),\n-        }\n+            }) => path.span,\n+            Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n+            Node::Local(local) => local.span,\n+            Node::MacroDef(macro_def) => macro_def.span,\n+            Node::Crate(item) => item.span,\n+        };\n+        Some(span)\n     }\n \n     /// Like `hir.span()`, but includes the body of function items\n@@ -907,7 +912,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n-        id.as_local().map(|id| self.span(self.local_def_id_to_hir_id(id)))\n+        id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))\n     }\n \n     pub fn res_span(&self, res: Res) -> Option<Span> {"}, {"sha": "dd4bfdd3e4a54c7d211365cda40368f17935a9aa", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/064a351953c0491eaa3eff8c9359bc0d2aed1129/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064a351953c0491eaa3eff8c9359bc0d2aed1129/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=064a351953c0491eaa3eff8c9359bc0d2aed1129", "patch": "@@ -15,6 +15,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n+use rustc_span::DUMMY_SP;\n \n pub struct Owner<'tcx> {\n     parent: HirId,\n@@ -77,6 +78,7 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n+    providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(id.expect_local());"}, {"sha": "77aa4413409126590c71c29ef6cb7f9962453e2e", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/064a351953c0491eaa3eff8c9359bc0d2aed1129/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064a351953c0491eaa3eff8c9359bc0d2aed1129/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=064a351953c0491eaa3eff8c9359bc0d2aed1129", "patch": "@@ -218,10 +218,6 @@ fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssociatedItems<'_> {\n     ty::AssociatedItems::new(items)\n }\n \n-fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n-    tcx.hir().span_if_local(def_id).unwrap()\n-}\n-\n fn def_ident_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n     tcx.hir().get_if_local(def_id).and_then(|node| node.ident()).map(|ident| ident.span)\n }\n@@ -495,7 +491,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         associated_item_def_ids,\n         associated_items,\n         adt_sized_constraint,\n-        def_span,\n         def_ident_span,\n         param_env,\n         param_env_reveal_all_normalized,"}]}