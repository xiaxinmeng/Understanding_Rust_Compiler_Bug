{"sha": "90d7dada69f92317dddc20357277bb48baa9118b", "node_id": "C_kwDOAAsO6NoAKDkwZDdkYWRhNjlmOTIzMTdkZGRjMjAzNTcyNzdiYjQ4YmFhOTExOGI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-03T02:32:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-20T21:37:14Z"}, "message": "also compare ArgAttributes", "tree": {"sha": "5bc1168fc51b40a9ddb5e42e8c5b943ecc6c0b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc1168fc51b40a9ddb5e42e8c5b943ecc6c0b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d7dada69f92317dddc20357277bb48baa9118b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d7dada69f92317dddc20357277bb48baa9118b", "html_url": "https://github.com/rust-lang/rust/commit/90d7dada69f92317dddc20357277bb48baa9118b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d7dada69f92317dddc20357277bb48baa9118b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c7530fcf879576f43d31b635e8363fd8609405", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c7530fcf879576f43d31b635e8363fd8609405", "html_url": "https://github.com/rust-lang/rust/commit/b5c7530fcf879576f43d31b635e8363fd8609405"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "27f6a75ebe84b15582eae0f8568213e1f013f479", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/90d7dada69f92317dddc20357277bb48baa9118b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d7dada69f92317dddc20357277bb48baa9118b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=90d7dada69f92317dddc20357277bb48baa9118b", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::{\n     ty::{self, Ty},\n };\n use rustc_target::abi;\n-use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n+use rustc_target::abi::call::{ArgAbi, ArgAttribute, ArgAttributes, FnAbi, PassMode};\n use rustc_target::spec::abi::Abi;\n \n use super::{\n@@ -199,41 +199,50 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n         // Padding must be fully equal.\n-        let pad_compat = || {\n-            if caller_abi.pad != callee_abi.pad {\n-                trace!(\n-                    \"check_argument_compat: incompatible pad: {:?} != {:?}\",\n-                    caller_abi.pad,\n-                    callee_abi.pad\n-                );\n+        let pad_compat = || caller_abi.pad == callee_abi.pad;\n+        // When comparing the PassMode, we have to be smart about comparing the attributes.\n+        let arg_attr_compat = |a1: ArgAttributes, a2: ArgAttributes| {\n+            // There's only one regular attribute that matters for the call ABI: InReg.\n+            // Everything else is things like noalias, dereferencable, nonnull, ...\n+            // (This also applies to pointee_size, pointee_align.)\n+            if a1.regular.contains(ArgAttribute::InReg) != a2.regular.contains(ArgAttribute::InReg)\n+            {\n+                return false;\n+            }\n+            // We also compare the sign extension mode -- this could let the callee make assumptions\n+            // about bits that conceptually were not even passed.\n+            if a1.arg_ext != a2.arg_ext {\n                 return false;\n             }\n             return true;\n         };\n-        // For comparing the PassMode, we allow the attributes to differ\n-        // (e.g., it is okay for NonNull to differ between caller and callee).\n-        // FIXME: Are there attributes (`call::ArgAttributes`) that do need to be checked?\n-        let mode_compat = || {\n-            match (caller_abi.mode, callee_abi.mode) {\n-                (PassMode::Ignore, PassMode::Ignore) => return true,\n-                (PassMode::Direct(_), PassMode::Direct(_)) => return true,\n-                (PassMode::Pair(_, _), PassMode::Pair(_, _)) => return true,\n-                (PassMode::Cast(c1), PassMode::Cast(c2)) if c1 == c2 => return true,\n-                (\n-                    PassMode::Indirect { attrs: _, extra_attrs: e1, on_stack: s1 },\n-                    PassMode::Indirect { attrs: _, extra_attrs: e2, on_stack: s2 },\n-                ) if e1.is_some() == e2.is_some() && s1 == s2 => return true,\n-                _ => {}\n+        let mode_compat = || match (caller_abi.mode, callee_abi.mode) {\n+            (PassMode::Ignore, PassMode::Ignore) => true,\n+            (PassMode::Direct(a1), PassMode::Direct(a2)) => arg_attr_compat(a1, a2),\n+            (PassMode::Pair(a1, b1), PassMode::Pair(a2, b2)) => {\n+                arg_attr_compat(a1, a2) && arg_attr_compat(b1, b2)\n             }\n-            trace!(\n-                \"check_argument_compat: incompatible modes:\\ncaller: {:?}\\ncallee: {:?}\",\n-                caller_abi.mode,\n-                callee_abi.mode\n-            );\n-            return false;\n+            (PassMode::Cast(c1), PassMode::Cast(c2)) => c1 == c2,\n+            (\n+                PassMode::Indirect { attrs: a1, extra_attrs: None, on_stack: s1 },\n+                PassMode::Indirect { attrs: a2, extra_attrs: None, on_stack: s2 },\n+            ) => arg_attr_compat(a1, a2) && s1 == s2,\n+            (\n+                PassMode::Indirect { attrs: a1, extra_attrs: Some(e1), on_stack: s1 },\n+                PassMode::Indirect { attrs: a2, extra_attrs: Some(e2), on_stack: s2 },\n+            ) => arg_attr_compat(a1, a2) && arg_attr_compat(e1, e2) && s1 == s2,\n+            _ => false,\n         };\n \n-        layout_compat() && pad_compat() && mode_compat()\n+        if layout_compat() && pad_compat() && mode_compat() {\n+            return true;\n+        }\n+        trace!(\n+            \"check_argument_compat: incompatible ABIs:\\ncaller: {:?}\\ncallee: {:?}\",\n+            caller_abi,\n+            callee_abi\n+        );\n+        return false;\n     }\n \n     /// Initialize a single callee argument, checking the types for compatibility."}]}