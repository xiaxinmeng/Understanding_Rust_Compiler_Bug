{"sha": "98718e0544f42e55642d2838b00d6a7bef1e2414", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NzE4ZTA1NDRmNDJlNTU2NDJkMjgzOGIwMGQ2YTdiZWYxZTI0MTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-15T20:07:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-15T21:18:43Z"}, "message": "Wrap remaining self/super/crate in Name{Ref}", "tree": {"sha": "15d727f30f9dc3338203f8f70f19f8023133f382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d727f30f9dc3338203f8f70f19f8023133f382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98718e0544f42e55642d2838b00d6a7bef1e2414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98718e0544f42e55642d2838b00d6a7bef1e2414", "html_url": "https://github.com/rust-lang/rust/commit/98718e0544f42e55642d2838b00d6a7bef1e2414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98718e0544f42e55642d2838b00d6a7bef1e2414/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a869e870ac6328967fb120a0ebe44a9c900eaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a869e870ac6328967fb120a0ebe44a9c900eaf0", "html_url": "https://github.com/rust-lang/rust/commit/8a869e870ac6328967fb120a0ebe44a9c900eaf0"}], "stats": {"total": 404, "additions": 236, "deletions": 168}, "files": [{"sha": "89d52a290be2e26d8a856fcc31013291058f6cd5", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -1837,9 +1837,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.8.0\"\n+version = \"1.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e33a2183403af89252547c4219a06a6cc8aef6302fee67e10e8431866af3ee72\"\n+checksum = \"b137a875a3b942539dd04bd37d193649f5d67e11407186f5b9d63ae0332b1a93\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "02782eb6deddcf34e644cbf4746cd88c0a62dc15", "filename": "crates/assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -61,7 +61,7 @@ fn generate_fn_def_assist(\n     // compute the location which implicitly has the same lifetime as the anonymous lifetime\n     let loc_needing_lifetime = if let Some(self_param) = self_param {\n         // if we have a self reference, use that\n-        Some(self_param.self_token()?.text_range().start())\n+        Some(self_param.name()?.syntax().text_range().start())\n     } else {\n         // otherwise, if there's a single reference parameter without a named liftime, use that\n         let fn_params_without_lifetime: Vec<_> = param_list"}, {"sha": "5ff75532148a2ee5d2fac44dc5191298780b6c00", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -26,7 +26,7 @@ use once_cell::race::OnceBool;\n use stdx::format_to;\n use syntax::{\n     algo,\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, NameOwner},\n     SyntaxNode,\n };\n use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};\n@@ -153,7 +153,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n         });\n         for (node, ty) in &types {\n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.value.clone()) {\n-                (self_param.self_token().unwrap().text_range(), \"self\".to_string())\n+                (self_param.name().unwrap().syntax().text_range(), \"self\".to_string())\n             } else {\n                 (node.value.text_range(), node.value.text().to_string().replace(\"\\n\", \" \"))\n             };"}, {"sha": "00e6012442bc69e0bb13e7a501685498fa6704ab", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -400,15 +400,13 @@ impl TryToNav for hir::GenericParam {\n impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let (node, focus_range) = match &src.value {\n-            Either::Left(bind_pat) => (\n-                bind_pat.syntax().clone(),\n-                bind_pat\n-                    .name()\n-                    .map(|it| src.with_value(&it.syntax().clone()).original_file_range(db).range),\n-            ),\n-            Either::Right(it) => (it.syntax().clone(), it.self_token().map(|it| it.text_range())),\n+        let (node, name) = match &src.value {\n+            Either::Left(bind_pat) => (bind_pat.syntax().clone(), bind_pat.name()),\n+            Either::Right(it) => (it.syntax().clone(), it.name()),\n         };\n+        let focus_range =\n+            name.map(|it| src.with_value(&it.syntax().clone()).original_file_range(db).range);\n+\n         let full_range = src.with_value(&node).original_file_range(db);\n         let name = match self.name(db) {\n             Some(it) => it.to_string().into(),"}, {"sha": "a1d2bce1d17b113144ecaebb2a5c47cf2c9b543f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -55,11 +55,6 @@ pub(crate) fn goto_definition(\n             } else {\n                 reference_definition(&sema, Either::Left(&lt)).to_vec()\n             },\n-            ast::SelfParam(self_param) => {\n-                let def = NameClass::classify_self_param(&sema, &self_param)?.referenced_or_defined(sema.db);\n-                let nav = def.try_to_nav(sema.db)?;\n-                vec![nav]\n-            },\n             _ => return None,\n         }\n     };"}, {"sha": "2024acd94e353fb065a1b69fee93018f9db48305", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -98,7 +98,6 @@ pub(crate) fn hover(\n             ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime)\n                 .map_or_else(|| NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced(sema.db)), |d| d.defined(sema.db)),\n-            ast::SelfParam(self_param) => NameClass::classify_self_param(&sema, &self_param).and_then(|d| d.defined(sema.db)),\n             _ => None,\n         }\n     };\n@@ -3223,7 +3222,7 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                *&self*\n+                *self*\n \n                 ```rust\n                 &Foo\n@@ -3243,7 +3242,7 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                *self: Arc<Foo>*\n+                *self*\n \n                 ```rust\n                 Arc<Foo>"}, {"sha": "4df189c98196678ca2520e60fc8b18f2e61f515f", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 32, "deletions": 44, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -1,27 +1,24 @@\n //! FIXME: write short doc here\n-use std::{\n-    convert::TryInto,\n-    fmt::{self, Display},\n-};\n+use std::fmt::{self, Display};\n \n use hir::{Module, ModuleDef, ModuleSource, Semantics};\n use ide_db::{\n-    base_db::{AnchoredPathBuf, FileId, FileRange, SourceDatabaseExt},\n+    base_db::{AnchoredPathBuf, FileId, FileRange},\n     defs::{Definition, NameClass, NameRefClass},\n     search::FileReference,\n     RootDatabase,\n };\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n-    lex_single_syntax_kind, match_ast, AstNode, SyntaxKind, SyntaxNode, SyntaxToken, T,\n+    lex_single_syntax_kind, match_ast, AstNode, SyntaxKind, SyntaxNode, T,\n };\n use test_utils::mark;\n use text_edit::TextEdit;\n \n use crate::{\n     FilePosition, FileSystemEdit, RangeInfo, ReferenceKind, ReferenceSearchResult, SourceChange,\n-    TextRange, TextSize,\n+    TextRange,\n };\n \n type RenameResult<T> = Result<T, RenameError>;\n@@ -52,10 +49,6 @@ pub(crate) fn prepare_rename(\n     let syntax = source_file.syntax();\n     if let Some(module) = find_module_at_offset(&sema, position, syntax) {\n         rename_mod(&sema, position, module, \"dummy\")\n-    } else if let Some(self_token) =\n-        syntax.token_at_offset(position.offset).find(|t| t.kind() == T![self])\n-    {\n-        rename_self_to_param(&sema, position, self_token, \"dummy\")\n     } else {\n         let RangeInfo { range, .. } = find_all_refs(&sema, position)?;\n         Ok(RangeInfo::new(range, SourceChange::default()))\n@@ -82,10 +75,6 @@ pub(crate) fn rename_with_semantics(\n \n     if let Some(module) = find_module_at_offset(&sema, position, syntax) {\n         rename_mod(&sema, position, module, new_name)\n-    } else if let Some(self_token) =\n-        syntax.token_at_offset(position.offset).find(|t| t.kind() == T![self])\n-    {\n-        rename_self_to_param(&sema, position, self_token, new_name)\n     } else {\n         rename_reference(&sema, position, new_name)\n     }\n@@ -108,7 +97,7 @@ pub(crate) fn will_rename_file(\n     Some(change)\n }\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n enum IdentifierKind {\n     Ident,\n     Lifetime,\n@@ -375,53 +364,50 @@ fn text_edit_from_self_param(\n fn rename_self_to_param(\n     sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n-    self_token: SyntaxToken,\n     new_name: &str,\n+    ident_kind: IdentifierKind,\n+    range: TextRange,\n+    refs: ReferenceSearchResult,\n ) -> Result<RangeInfo<SourceChange>, RenameError> {\n-    let ident_kind = check_identifier(new_name)?;\n     match ident_kind {\n         IdentifierKind::Lifetime => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n         IdentifierKind::ToSelf => {\n             // no-op\n             mark::hit!(rename_self_to_self);\n-            return Ok(RangeInfo::new(self_token.text_range(), SourceChange::default()));\n+            return Ok(RangeInfo::new(range, SourceChange::default()));\n         }\n         _ => (),\n     }\n     let source_file = sema.parse(position.file_id);\n     let syn = source_file.syntax();\n \n-    let text = sema.db.file_text(position.file_id);\n     let fn_def = find_node_at_offset::<ast::Fn>(syn, position.offset)\n         .ok_or_else(|| format_err!(\"No surrounding method declaration found\"))?;\n-    let search_range = fn_def.syntax().text_range();\n \n     let mut source_change = SourceChange::default();\n-\n-    for (idx, _) in text.match_indices(\"self\") {\n-        let offset: TextSize = idx.try_into().unwrap();\n-        if !search_range.contains_inclusive(offset) {\n-            continue;\n-        }\n-        if let Some(ref usage) = syn.token_at_offset(offset).find(|t| t.kind() == T![self]) {\n-            let edit = if let Some(ref self_param) = ast::SelfParam::cast(usage.parent()) {\n-                text_edit_from_self_param(syn, self_param, new_name)\n-                    .ok_or_else(|| format_err!(\"No target type found\"))?\n-            } else {\n-                TextEdit::replace(usage.text_range(), String::from(new_name))\n-            };\n+    if let Some(self_param) = fn_def.param_list().and_then(|it| it.self_param()) {\n+        if self_param\n+            .syntax()\n+            .text_range()\n+            .contains_range(refs.declaration().nav.focus_or_full_range())\n+        {\n+            let edit = text_edit_from_self_param(syn, &self_param, new_name)\n+                .ok_or_else(|| format_err!(\"No target type found\"))?;\n             source_change.insert_source_edit(position.file_id, edit);\n-        }\n-    }\n \n-    if source_change.source_file_edits.len() > 1 && ident_kind == IdentifierKind::Underscore {\n-        bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n-    }\n+            source_change.extend(refs.references().iter().map(|(&file_id, references)| {\n+                source_edit_from_references(sema, file_id, &references, new_name)\n+            }));\n \n-    let range = ast::SelfParam::cast(self_token.parent())\n-        .map_or(self_token.text_range(), |p| p.syntax().text_range());\n+            if source_change.source_file_edits.len() > 1 && ident_kind == IdentifierKind::Underscore\n+            {\n+                bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n+            }\n \n-    Ok(RangeInfo::new(range, source_change))\n+            return Ok(RangeInfo::new(range, source_change));\n+        }\n+    }\n+    Err(format_err!(\"Method has no self param\"))\n }\n \n fn rename_reference(\n@@ -444,8 +430,9 @@ fn rename_reference(\n             mark::hit!(rename_not_an_ident_ref);\n             bail!(\"Invalid name `{}`: not an identifier\", new_name)\n         }\n-        (IdentifierKind::ToSelf, ReferenceKind::SelfParam) => {\n-            unreachable!(\"rename_self_to_param should've been called instead\")\n+        (_, ReferenceKind::SelfParam) => {\n+            mark::hit!(rename_self_to_param);\n+            return rename_self_to_param(sema, position, new_name, ident_kind, range, refs);\n         }\n         (IdentifierKind::ToSelf, _) => {\n             mark::hit!(rename_to_self);\n@@ -1350,6 +1337,7 @@ impl Foo {\n \n     #[test]\n     fn test_owned_self_to_parameter() {\n+        mark::check!(rename_self_to_param);\n         check(\n             \"foo\",\n             r#\""}, {"sha": "8625ef5dfce9a113f182740ce71bc046d612de94", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -68,7 +68,8 @@ pub(super) fn element(\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n             highlight_func_by_name_ref(sema, &name_ref).unwrap_or_else(|| {\n-                match NameRefClass::classify(sema, &name_ref) {\n+                let is_self = name_ref.self_token().is_some();\n+                let h = match NameRefClass::classify(sema, &name_ref) {\n                     Some(name_kind) => match name_kind {\n                         NameRefClass::ExternCrate(_) => HlTag::Symbol(SymbolKind::Module).into(),\n                         NameRefClass::Definition(def) => {\n@@ -108,6 +109,11 @@ pub(super) fn element(\n                         highlight_name_ref_by_syntax(name_ref, sema)\n                     }\n                     None => HlTag::UnresolvedReference.into(),\n+                };\n+                if h.tag == HlTag::Symbol(SymbolKind::Module) && is_self {\n+                    HlTag::Symbol(SymbolKind::SelfParam).into()\n+                } else {\n+                    h\n                 }\n             })\n         }\n@@ -225,18 +231,8 @@ pub(super) fn element(\n                 T![for] if !is_child_of_impl(&element) => h | HlMod::ControlFlow,\n                 T![unsafe] => h | HlMod::Unsafe,\n                 T![true] | T![false] => HlTag::BoolLiteral.into(),\n-                T![self] => {\n-                    let self_param = element.parent().and_then(ast::SelfParam::cast);\n-                    if let Some(NameClass::Definition(def)) = self_param\n-                        .and_then(|self_param| NameClass::classify_self_param(sema, &self_param))\n-                    {\n-                        highlight_def(db, def) | HlMod::Definition\n-                    } else if element.ancestors().any(|it| it.kind() == USE_TREE) {\n-                        HlTag::Symbol(SymbolKind::SelfParam).into()\n-                    } else {\n-                        return None;\n-                    }\n-                }\n+                // self is handled as either a Name or NameRef already\n+                T![self] => return None,\n                 T![ref] => element\n                     .parent()\n                     .and_then(ast::IdentPat::cast)"}, {"sha": "d9875ffef6a9f46bd77a448049d20bb47ef0b974", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -117,13 +117,6 @@ impl NameClass {\n         }\n     }\n \n-    pub fn classify_self_param(\n-        sema: &Semantics<RootDatabase>,\n-        self_param: &ast::SelfParam,\n-    ) -> Option<NameClass> {\n-        sema.to_def(self_param).map(Definition::Local).map(NameClass::Definition)\n-    }\n-\n     pub fn classify(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n         let _p = profile::span(\"classify_name\");\n \n@@ -186,6 +179,10 @@ impl NameClass {\n \n                     Some(NameClass::Definition(Definition::Local(local)))\n                 },\n+                ast::SelfParam(it) => {\n+                    let def = sema.to_def(&it)?;\n+                    Some(NameClass::Definition(Definition::Local(def.into())))\n+                },\n                 ast::RecordField(it) => {\n                     let field: hir::Field = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::Field(field)))"}, {"sha": "6913e9ec2f3fbb31382f7c989caff5c9abf49809", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -190,17 +190,25 @@ fn opt_visibility(p: &mut Parser) -> bool {\n                     // test crate_visibility\n                     // pub(crate) struct S;\n                     // pub(self) struct S;\n-                    // pub(self) struct S;\n-                    // pub(self) struct S;\n+                    // pub(super) struct S;\n \n                     // test pub_parens_typepath\n                     // struct B(pub (super::A));\n                     // struct B(pub (crate::A,));\n                     T![crate] | T![self] | T![super] if p.nth(2) != T![:] => {\n                         p.bump_any();\n+                        let path_m = p.start();\n+                        let path_segment_m = p.start();\n+                        let name_ref_m = p.start();\n                         p.bump_any();\n+                        name_ref_m.complete(p, NAME_REF);\n+                        path_segment_m.complete(p, PATH_SEGMENT);\n+                        path_m.complete(p, PATH);\n                         p.expect(T![')']);\n                     }\n+                    // test crate_visibility_in\n+                    // pub(in super::A) struct S;\n+                    // pub(in crate) struct S;\n                     T![in] => {\n                         p.bump_any();\n                         p.bump_any();"}, {"sha": "1d894e907be280a3d3afcdf09072e01634a044ec", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -270,7 +270,9 @@ fn extern_crate(p: &mut Parser, m: Marker) {\n     p.bump(T![crate]);\n \n     if p.at(T![self]) {\n+        let m = p.start();\n         p.bump(T![self]);\n+        m.complete(p, NAME_REF);\n     } else {\n         name_ref(p);\n     }"}, {"sha": "6a98d736862882df5b1d737c0c5a61c70d3892dc", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -156,7 +156,7 @@ fn variadic_param(p: &mut Parser) -> bool {\n fn opt_self_param(p: &mut Parser, m: Marker) {\n     if p.at(T![self]) || p.at(T![mut]) && p.nth(1) == T![self] {\n         p.eat(T![mut]);\n-        p.eat(T![self]);\n+        self_as_name(p);\n         // test arb_self_types\n         // impl S {\n         //     fn a(self: &Self) {}\n@@ -169,24 +169,29 @@ fn opt_self_param(p: &mut Parser, m: Marker) {\n         let la1 = p.nth(1);\n         let la2 = p.nth(2);\n         let la3 = p.nth(3);\n-        let mut n_toks = match (p.current(), la1, la2, la3) {\n-            (T![&], T![self], _, _) => 2,\n-            (T![&], T![mut], T![self], _) => 3,\n-            (T![&], LIFETIME_IDENT, T![self], _) => 3,\n-            (T![&], LIFETIME_IDENT, T![mut], T![self]) => 4,\n-            _ => return m.abandon(p),\n-        };\n-        p.bump_any();\n+        if !matches!((p.current(), la1, la2, la3),\n+              (T![&], T![self], _, _)\n+            | (T![&], T![mut], T![self], _)\n+            | (T![&], LIFETIME_IDENT, T![self], _)\n+            | (T![&], LIFETIME_IDENT, T![mut], T![self])\n+        ) {\n+            return m.abandon(p);\n+        }\n+        p.bump(T![&]);\n         if p.at(LIFETIME_IDENT) {\n             lifetime(p);\n-            n_toks -= 1;\n-        }\n-        for _ in 1..n_toks {\n-            p.bump_any();\n         }\n+        p.eat(T![mut]);\n+        self_as_name(p);\n     }\n     m.complete(p, SELF_PARAM);\n     if !p.at(T![')']) {\n         p.expect(T![,]);\n     }\n }\n+\n+fn self_as_name(p: &mut Parser) {\n+    let m = p.start();\n+    p.bump(T![self]);\n+    m.complete(p, NAME);\n+}"}, {"sha": "6407d7c85178c31bc5e2e2b27398049578ce5407", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -11,6 +11,7 @@ pub struct Name {\n }\n impl Name {\n     pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NameRef {\n@@ -238,7 +239,6 @@ impl ExternCrate {\n     pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n     pub fn rename(&self) -> Option<Rename> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n@@ -406,9 +406,6 @@ pub struct Visibility {\n impl Visibility {\n     pub fn pub_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![pub]) }\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n-    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n-    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n     pub fn in_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![in]) }\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n@@ -492,11 +489,11 @@ pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for SelfParam {}\n+impl ast::NameOwner for SelfParam {}\n impl SelfParam {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n     pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n-    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }"}, {"sha": "738c92a5b5b596f453eae5b847d3c8292f8b62cb", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -198,6 +198,13 @@ impl ast::Path {\n     pub fn parent_path(&self) -> Option<ast::Path> {\n         self.syntax().parent().and_then(ast::Path::cast)\n     }\n+\n+    pub fn as_single_segment(&self) -> Option<ast::PathSegment> {\n+        match self.qualifier() {\n+            Some(_) => None,\n+            None => self.segment(),\n+        }\n+    }\n }\n \n impl ast::UseTreeList {\n@@ -448,16 +455,22 @@ pub enum VisibilityKind {\n \n impl ast::Visibility {\n     pub fn kind(&self) -> VisibilityKind {\n-        if let Some(path) = support::children(self.syntax()).next() {\n-            VisibilityKind::In(path)\n-        } else if self.crate_token().is_some() {\n-            VisibilityKind::PubCrate\n-        } else if self.super_token().is_some() {\n-            VisibilityKind::PubSuper\n-        } else if self.self_token().is_some() {\n-            VisibilityKind::PubSelf\n-        } else {\n-            VisibilityKind::Pub\n+        match self.path() {\n+            Some(path) => {\n+                if let Some(segment) =\n+                    path.as_single_segment().filter(|it| it.coloncolon_token().is_none())\n+                {\n+                    if segment.crate_token().is_some() {\n+                        return VisibilityKind::PubCrate;\n+                    } else if segment.super_token().is_some() {\n+                        return VisibilityKind::PubSuper;\n+                    } else if segment.self_token().is_some() {\n+                        return VisibilityKind::PubSelf;\n+                    }\n+                }\n+                VisibilityKind::In(path)\n+            }\n+            None => VisibilityKind::Pub,\n         }\n     }\n }"}, {"sha": "ae4dd2f3b212c6d74f00b680f350c4b4f6c1afe0", "filename": "crates/syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -50,7 +50,10 @@ SOURCE_FILE@0..118\n         VISIBILITY@56..66\n           PUB_KW@56..59 \"pub\"\n           L_PAREN@59..60 \"(\"\n-          CRATE_KW@60..65 \"crate\"\n+          PATH@60..65\n+            PATH_SEGMENT@60..65\n+              NAME_REF@60..65\n+                CRATE_KW@60..65 \"crate\"\n           R_PAREN@65..66 \")\"\n         WHITESPACE@66..67 \" \"\n         TYPE_KW@67..71 \"type\"\n@@ -69,7 +72,10 @@ SOURCE_FILE@0..118\n         VISIBILITY@86..96\n           PUB_KW@86..89 \"pub\"\n           L_PAREN@89..90 \"(\"\n-          CRATE_KW@90..95 \"crate\"\n+          PATH@90..95\n+            PATH_SEGMENT@90..95\n+              NAME_REF@90..95\n+                CRATE_KW@90..95 \"crate\"\n           R_PAREN@95..96 \")\"\n         WHITESPACE@96..97 \" \"\n         CONST_KW@97..102 \"const\""}, {"sha": "f0d152d335b6ab056619d650824aa078a7c7bfaa", "filename": "crates/syntax/test_data/parser/inline/ok/0006_self_param.rast", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -19,7 +19,8 @@ SOURCE_FILE@0..128\n         PARAM_LIST@17..23\n           L_PAREN@17..18 \"(\"\n           SELF_PARAM@18..22\n-            SELF_KW@18..22 \"self\"\n+            NAME@18..22\n+              SELF_KW@18..22 \"self\"\n           R_PAREN@22..23 \")\"\n         WHITESPACE@23..24 \" \"\n         BLOCK_EXPR@24..26\n@@ -35,7 +36,8 @@ SOURCE_FILE@0..128\n           L_PAREN@35..36 \"(\"\n           SELF_PARAM@36..41\n             AMP@36..37 \"&\"\n-            SELF_KW@37..41 \"self\"\n+            NAME@37..41\n+              SELF_KW@37..41 \"self\"\n           COMMA@41..42 \",\"\n           R_PAREN@42..43 \")\"\n         WHITESPACE@43..44 \" \"\n@@ -55,7 +57,8 @@ SOURCE_FILE@0..128\n             LIFETIME@57..59\n               LIFETIME_IDENT@57..59 \"\\'a\"\n             WHITESPACE@59..60 \" \"\n-            SELF_KW@60..64 \"self\"\n+            NAME@60..64\n+              SELF_KW@60..64 \"self\"\n           COMMA@64..65 \",\"\n           R_PAREN@65..66 \")\"\n         WHITESPACE@66..67 \" \"\n@@ -77,7 +80,8 @@ SOURCE_FILE@0..128\n             WHITESPACE@82..83 \" \"\n             MUT_KW@83..86 \"mut\"\n             WHITESPACE@86..87 \" \"\n-            SELF_KW@87..91 \"self\"\n+            NAME@87..91\n+              SELF_KW@87..91 \"self\"\n           COMMA@91..92 \",\"\n           WHITESPACE@92..93 \" \"\n           PARAM@93..99\n@@ -107,7 +111,8 @@ SOURCE_FILE@0..128\n           SELF_PARAM@113..121\n             MUT_KW@113..116 \"mut\"\n             WHITESPACE@116..117 \" \"\n-            SELF_KW@117..121 \"self\"\n+            NAME@117..121\n+              SELF_KW@117..121 \"self\"\n           R_PAREN@121..122 \")\"\n         WHITESPACE@122..123 \" \"\n         BLOCK_EXPR@123..125"}, {"sha": "df59f37a2513932b8d2673320ceff0e29fbb5ea7", "filename": "crates/syntax/test_data/parser/inline/ok/0018_arb_self_types.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -19,7 +19,8 @@ SOURCE_FILE@0..69\n         PARAM_LIST@17..30\n           L_PAREN@17..18 \"(\"\n           SELF_PARAM@18..29\n-            SELF_KW@18..22 \"self\"\n+            NAME@18..22\n+              SELF_KW@18..22 \"self\"\n             COLON@22..23 \":\"\n             WHITESPACE@23..24 \" \"\n             REF_TYPE@24..29\n@@ -45,7 +46,8 @@ SOURCE_FILE@0..69\n           SELF_PARAM@43..62\n             MUT_KW@43..46 \"mut\"\n             WHITESPACE@46..47 \" \"\n-            SELF_KW@47..51 \"self\"\n+            NAME@47..51\n+              SELF_KW@47..51 \"self\"\n             COLON@51..52 \":\"\n             WHITESPACE@52..53 \" \"\n             PATH_TYPE@53..62"}, {"sha": "dc7f6295b2228eb46dca5cff2f214a33c6012507", "filename": "crates/syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -67,7 +67,8 @@ SOURCE_FILE@0..89\n           L_PAREN@76..77 \"(\"\n           SELF_PARAM@77..82\n             AMP@77..78 \"&\"\n-            SELF_KW@78..82 \"self\"\n+            NAME@78..82\n+              SELF_KW@78..82 \"self\"\n           R_PAREN@82..83 \")\"\n         WHITESPACE@83..84 \" \"\n         BLOCK_EXPR@84..86"}, {"sha": "f2ead8a624929a05218e529a24531c75d3cbedc5", "filename": "crates/syntax/test_data/parser/inline/ok/0022_crate_visibility.rast", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -1,9 +1,12 @@\n-SOURCE_FILE@0..81\n+SOURCE_FILE@0..62\n   STRUCT@0..20\n     VISIBILITY@0..10\n       PUB_KW@0..3 \"pub\"\n       L_PAREN@3..4 \"(\"\n-      CRATE_KW@4..9 \"crate\"\n+      PATH@4..9\n+        PATH_SEGMENT@4..9\n+          NAME_REF@4..9\n+            CRATE_KW@4..9 \"crate\"\n       R_PAREN@9..10 \")\"\n     WHITESPACE@10..11 \" \"\n     STRUCT_KW@11..17 \"struct\"\n@@ -16,7 +19,10 @@ SOURCE_FILE@0..81\n     VISIBILITY@21..30\n       PUB_KW@21..24 \"pub\"\n       L_PAREN@24..25 \"(\"\n-      SELF_KW@25..29 \"self\"\n+      PATH@25..29\n+        PATH_SEGMENT@25..29\n+          NAME_REF@25..29\n+            SELF_KW@25..29 \"self\"\n       R_PAREN@29..30 \")\"\n     WHITESPACE@30..31 \" \"\n     STRUCT_KW@31..37 \"struct\"\n@@ -25,29 +31,19 @@ SOURCE_FILE@0..81\n       IDENT@38..39 \"S\"\n     SEMICOLON@39..40 \";\"\n   WHITESPACE@40..41 \"\\n\"\n-  STRUCT@41..60\n-    VISIBILITY@41..50\n+  STRUCT@41..61\n+    VISIBILITY@41..51\n       PUB_KW@41..44 \"pub\"\n       L_PAREN@44..45 \"(\"\n-      SELF_KW@45..49 \"self\"\n-      R_PAREN@49..50 \")\"\n-    WHITESPACE@50..51 \" \"\n-    STRUCT_KW@51..57 \"struct\"\n-    WHITESPACE@57..58 \" \"\n-    NAME@58..59\n-      IDENT@58..59 \"S\"\n-    SEMICOLON@59..60 \";\"\n-  WHITESPACE@60..61 \"\\n\"\n-  STRUCT@61..80\n-    VISIBILITY@61..70\n-      PUB_KW@61..64 \"pub\"\n-      L_PAREN@64..65 \"(\"\n-      SELF_KW@65..69 \"self\"\n-      R_PAREN@69..70 \")\"\n-    WHITESPACE@70..71 \" \"\n-    STRUCT_KW@71..77 \"struct\"\n-    WHITESPACE@77..78 \" \"\n-    NAME@78..79\n-      IDENT@78..79 \"S\"\n-    SEMICOLON@79..80 \";\"\n-  WHITESPACE@80..81 \"\\n\"\n+      PATH@45..50\n+        PATH_SEGMENT@45..50\n+          NAME_REF@45..50\n+            SUPER_KW@45..50 \"super\"\n+      R_PAREN@50..51 \")\"\n+    WHITESPACE@51..52 \" \"\n+    STRUCT_KW@52..58 \"struct\"\n+    WHITESPACE@58..59 \" \"\n+    NAME@59..60\n+      IDENT@59..60 \"S\"\n+    SEMICOLON@60..61 \";\"\n+  WHITESPACE@61..62 \"\\n\""}, {"sha": "a790a485f9fa7aa6213a96878ee1f2b20b77ad59", "filename": "crates/syntax/test_data/parser/inline/ok/0022_crate_visibility.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -1,4 +1,3 @@\n pub(crate) struct S;\n pub(self) struct S;\n-pub(self) struct S;\n-pub(self) struct S;\n+pub(super) struct S;"}, {"sha": "c54e64e3f978541e5aadc2840205744e9638d903", "filename": "crates/syntax/test_data/parser/inline/ok/0138_self_param_outer_attr.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_self_param_outer_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_self_param_outer_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_self_param_outer_attr.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -16,7 +16,8 @@ SOURCE_FILE@0..26\n                 IDENT@7..15 \"must_use\"\n           R_BRACK@15..16 \"]\"\n         WHITESPACE@16..17 \" \"\n-        SELF_KW@17..21 \"self\"\n+        NAME@17..21\n+          SELF_KW@17..21 \"self\"\n       R_PAREN@21..22 \")\"\n     WHITESPACE@22..23 \" \"\n     BLOCK_EXPR@23..25"}, {"sha": "3d855fc6b1c16de11cb5ef87b4b1f6d52b8f4789", "filename": "crates/syntax/test_data/parser/inline/ok/0160_crate_visibility_in.rast", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_crate_visibility_in.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_crate_visibility_in.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_crate_visibility_in.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -0,0 +1,42 @@\n+SOURCE_FILE@0..51\n+  STRUCT@0..26\n+    VISIBILITY@0..16\n+      PUB_KW@0..3 \"pub\"\n+      L_PAREN@3..4 \"(\"\n+      IN_KW@4..6 \"in\"\n+      WHITESPACE@6..7 \" \"\n+      PATH@7..15\n+        PATH@7..12\n+          PATH_SEGMENT@7..12\n+            NAME_REF@7..12\n+              SUPER_KW@7..12 \"super\"\n+        COLON2@12..14 \"::\"\n+        PATH_SEGMENT@14..15\n+          NAME_REF@14..15\n+            IDENT@14..15 \"A\"\n+      R_PAREN@15..16 \")\"\n+    WHITESPACE@16..17 \" \"\n+    STRUCT_KW@17..23 \"struct\"\n+    WHITESPACE@23..24 \" \"\n+    NAME@24..25\n+      IDENT@24..25 \"S\"\n+    SEMICOLON@25..26 \";\"\n+  WHITESPACE@26..27 \"\\n\"\n+  STRUCT@27..50\n+    VISIBILITY@27..40\n+      PUB_KW@27..30 \"pub\"\n+      L_PAREN@30..31 \"(\"\n+      IN_KW@31..33 \"in\"\n+      WHITESPACE@33..34 \" \"\n+      PATH@34..39\n+        PATH_SEGMENT@34..39\n+          NAME_REF@34..39\n+            CRATE_KW@34..39 \"crate\"\n+      R_PAREN@39..40 \")\"\n+    WHITESPACE@40..41 \" \"\n+    STRUCT_KW@41..47 \"struct\"\n+    WHITESPACE@47..48 \" \"\n+    NAME@48..49\n+      IDENT@48..49 \"S\"\n+    SEMICOLON@49..50 \";\"\n+  WHITESPACE@50..51 \"\\n\""}, {"sha": "2856dbd848f111633051bb9d413942471cc5f3ec", "filename": "crates/syntax/test_data/parser/inline/ok/0160_crate_visibility_in.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_crate_visibility_in.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_crate_visibility_in.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_crate_visibility_in.rs?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -0,0 +1,2 @@\n+pub(in super::A) struct S;\n+pub(in crate) struct S;"}, {"sha": "4babdba9279760a9cd1fb2a85a612610d3b43783", "filename": "crates/syntax/test_data/parser/ok/0007_extern_crate.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -28,7 +28,8 @@ SOURCE_FILE@0..69\n     WHITESPACE@49..50 \" \"\n     CRATE_KW@50..55 \"crate\"\n     WHITESPACE@55..56 \" \"\n-    SELF_KW@56..60 \"self\"\n+    NAME_REF@56..60\n+      SELF_KW@56..60 \"self\"\n     WHITESPACE@60..61 \" \"\n     RENAME@61..67\n       AS_KW@61..63 \"as\""}, {"sha": "c5dbfb702a14cc3bf1c86d703851361b547777a9", "filename": "crates/syntax/test_data/parser/ok/0012_visibility.rast", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -32,7 +32,10 @@ SOURCE_FILE@0..98\n     VISIBILITY@24..34\n       PUB_KW@24..27 \"pub\"\n       L_PAREN@27..28 \"(\"\n-      CRATE_KW@28..33 \"crate\"\n+      PATH@28..33\n+        PATH_SEGMENT@28..33\n+          NAME_REF@28..33\n+            CRATE_KW@28..33 \"crate\"\n       R_PAREN@33..34 \")\"\n     WHITESPACE@34..35 \" \"\n     FN_KW@35..37 \"fn\"\n@@ -51,7 +54,10 @@ SOURCE_FILE@0..98\n     VISIBILITY@45..55\n       PUB_KW@45..48 \"pub\"\n       L_PAREN@48..49 \"(\"\n-      SUPER_KW@49..54 \"super\"\n+      PATH@49..54\n+        PATH_SEGMENT@49..54\n+          NAME_REF@49..54\n+            SUPER_KW@49..54 \"super\"\n       R_PAREN@54..55 \")\"\n     WHITESPACE@55..56 \" \"\n     FN_KW@56..58 \"fn\""}, {"sha": "6afed5f05eb39bd8f9e044e88b796af4e1957de4", "filename": "crates/syntax/test_data/parser/ok/0045_block_inner_attrs.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -110,7 +110,8 @@ SOURCE_FILE@0..686\n           L_PAREN@558..559 \"(\"\n           SELF_PARAM@559..564\n             AMP@559..560 \"&\"\n-            SELF_KW@560..564 \"self\"\n+            NAME@560..564\n+              SELF_KW@560..564 \"self\"\n           COMMA@564..565 \",\"\n           WHITESPACE@565..566 \" \"\n           PARAM@566..600"}, {"sha": "e10521d8532ff88a881b85523d5a1701b1cba8ec", "filename": "crates/syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -281,7 +281,8 @@ SOURCE_FILE@0..519\n                     IDENT@259..267 \"must_use\"\n               R_BRACK@267..268 \"]\"\n             WHITESPACE@268..269 \" \"\n-            SELF_KW@269..273 \"self\"\n+            NAME@269..273\n+              SELF_KW@269..273 \"self\"\n           R_PAREN@273..274 \")\"\n         WHITESPACE@274..275 \" \"\n         BLOCK_EXPR@275..277\n@@ -305,7 +306,8 @@ SOURCE_FILE@0..519\n                     IDENT@291..295 \"attr\"\n               R_BRACK@295..296 \"]\"\n             WHITESPACE@296..297 \" \"\n-            SELF_KW@297..301 \"self\"\n+            NAME@297..301\n+              SELF_KW@297..301 \"self\"\n           R_PAREN@301..302 \")\"\n         WHITESPACE@302..303 \" \"\n         BLOCK_EXPR@303..305\n@@ -330,7 +332,8 @@ SOURCE_FILE@0..519\n               R_BRACK@323..324 \"]\"\n             WHITESPACE@324..325 \" \"\n             AMP@325..326 \"&\"\n-            SELF_KW@326..330 \"self\"\n+            NAME@326..330\n+              SELF_KW@326..330 \"self\"\n           R_PAREN@330..331 \")\"\n         WHITESPACE@331..332 \" \"\n         BLOCK_EXPR@332..334\n@@ -363,7 +366,8 @@ SOURCE_FILE@0..519\n             AMP@358..359 \"&\"\n             MUT_KW@359..362 \"mut\"\n             WHITESPACE@362..363 \" \"\n-            SELF_KW@363..367 \"self\"\n+            NAME@363..367\n+              SELF_KW@363..367 \"self\"\n           R_PAREN@367..368 \")\"\n         WHITESPACE@368..369 \" \"\n         BLOCK_EXPR@369..371\n@@ -397,7 +401,8 @@ SOURCE_FILE@0..519\n             LIFETIME@396..398\n               LIFETIME_IDENT@396..398 \"\\'a\"\n             WHITESPACE@398..399 \" \"\n-            SELF_KW@399..403 \"self\"\n+            NAME@399..403\n+              SELF_KW@399..403 \"self\"\n           R_PAREN@403..404 \")\"\n         WHITESPACE@404..405 \" \"\n         BLOCK_EXPR@405..407\n@@ -433,7 +438,8 @@ SOURCE_FILE@0..519\n             WHITESPACE@434..435 \" \"\n             MUT_KW@435..438 \"mut\"\n             WHITESPACE@438..439 \" \"\n-            SELF_KW@439..443 \"self\"\n+            NAME@439..443\n+              SELF_KW@439..443 \"self\"\n           R_PAREN@443..444 \")\"\n         WHITESPACE@444..445 \" \"\n         BLOCK_EXPR@445..447\n@@ -457,7 +463,8 @@ SOURCE_FILE@0..519\n                     IDENT@460..464 \"attr\"\n               R_BRACK@464..465 \"]\"\n             WHITESPACE@465..466 \" \"\n-            SELF_KW@466..470 \"self\"\n+            NAME@466..470\n+              SELF_KW@466..470 \"self\"\n             COLON@470..471 \":\"\n             WHITESPACE@471..472 \" \"\n             PATH_TYPE@472..476\n@@ -488,7 +495,8 @@ SOURCE_FILE@0..519\n                     IDENT@493..497 \"attr\"\n               R_BRACK@497..498 \"]\"\n             WHITESPACE@498..499 \" \"\n-            SELF_KW@499..503 \"self\"\n+            NAME@499..503\n+              SELF_KW@499..503 \"self\"\n             COLON@503..504 \":\"\n             WHITESPACE@504..505 \" \"\n             PATH_TYPE@505..513"}, {"sha": "4abc7b05396c985f93e86c84410c16769e4e48d5", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98718e0544f42e55642d2838b00d6a7bef1e2414/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98718e0544f42e55642d2838b00d6a7bef1e2414/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=98718e0544f42e55642d2838b00d6a7bef1e2414", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.8\"\n+ungrammar = \"1.9\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\""}]}