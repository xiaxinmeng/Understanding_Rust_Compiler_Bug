{"sha": "b0c7439d777bbb967be7a67fa11096aaf540fe9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzc0MzlkNzc3YmJiOTY3YmU3YTY3ZmExMTA5NmFhZjU0MGZlOWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-19T02:52:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-19T02:52:31Z"}, "message": "Implement expr_put. Un-XFAIL foreach-simple.rs; iters w/o env access work.", "tree": {"sha": "29230c000965a7d9598f750b4c434367fb38d620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29230c000965a7d9598f750b4c434367fb38d620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c7439d777bbb967be7a67fa11096aaf540fe9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c7439d777bbb967be7a67fa11096aaf540fe9f", "html_url": "https://github.com/rust-lang/rust/commit/b0c7439d777bbb967be7a67fa11096aaf540fe9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c7439d777bbb967be7a67fa11096aaf540fe9f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5508c28ff0e27d1027ddf372410cc5e1609662bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5508c28ff0e27d1027ddf372410cc5e1609662bd", "html_url": "https://github.com/rust-lang/rust/commit/5508c28ff0e27d1027ddf372410cc5e1609662bd"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "71c9807bc79de350c17763d2ffd9ce9990a7210c", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0c7439d777bbb967be7a67fa11096aaf540fe9f/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b0c7439d777bbb967be7a67fa11096aaf540fe9f/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=b0c7439d777bbb967be7a67fa11096aaf540fe9f", "patch": "@@ -475,6 +475,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         else-if.rs \\\n                         fact.rs \\\n                         fn-lval.rs \\\n+                        foreach-simple.rs \\\n                         fun-call-variants.rs \\\n                         fun-indirect-call.rs \\\n                         generic-derived-type.rs \\"}, {"sha": "efa3a41dc6a150c83933d2b6dec686efbf447be1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b0c7439d777bbb967be7a67fa11096aaf540fe9f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c7439d777bbb967be7a67fa11096aaf540fe9f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b0c7439d777bbb967be7a67fa11096aaf540fe9f", "patch": "@@ -3454,8 +3454,35 @@ fn trans_fail(@block_ctxt cx, common.span sp, str fail_str) -> result {\n }\n \n fn trans_put(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n-    cx.fcx.ccx.sess.unimpl(\"put expr\");\n-    fail;\n+    auto llcallee = C_nil();\n+    auto llenv = C_nil();\n+\n+    alt (cx.fcx.lliterbody) {\n+        case (some[ValueRef](?lli)) {\n+            auto slot = cx.build.Alloca(val_ty(lli));\n+            cx.build.Store(lli, slot);\n+\n+            llcallee = cx.build.GEP(slot, vec(C_int(0),\n+                                              C_int(abi.fn_field_code)));\n+            llcallee = cx.build.Load(llcallee);\n+\n+            llenv = cx.build.GEP(slot, vec(C_int(0),\n+                                           C_int(abi.fn_field_box)));\n+            llenv = cx.build.Load(llenv);\n+        }\n+    }\n+    auto bcx = cx;\n+    auto dummy_retslot = bcx.build.Alloca(T_nil());\n+    let vec[ValueRef] llargs = vec(dummy_retslot, cx.fcx.lltaskptr, llenv);\n+    alt (e) {\n+        case (none[@ast.expr]) { }\n+        case (some[@ast.expr](?x)) {\n+            auto r = trans_expr(bcx, x);\n+            llargs += r.val;\n+            bcx = r.bcx;\n+        }\n+    }\n+    ret res(bcx, bcx.build.FastCall(llcallee, llargs));\n }\n \n fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {"}]}