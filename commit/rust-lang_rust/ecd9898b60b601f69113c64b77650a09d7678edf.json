{"sha": "ecd9898b60b601f69113c64b77650a09d7678edf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDk4OThiNjBiNjAxZjY5MTEzYzY0Yjc3NjUwYTA5ZDc2NzhlZGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-10T16:35:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-10T16:35:16Z"}, "message": "Rollup merge of #49423 - gavento:gavento-dev, r=nikomatsakis\n\nExtend tests for RFC1598 (GAT)\n\nMore GAT tests, namely some usage for `Iterable` and `StreamingIterator`, shadowing (lifetimes and type params), `Collection<T>` and `CollectionFamily` from [the series](http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/) with default associated types. Tracking issue: #44265\n\nr? @nikomatsakis\n\nWrong GAT argument numbers / kinds and default values are next.", "tree": {"sha": "3ff346fc4d396efdc036e10b5b6fa4a0b14e8530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff346fc4d396efdc036e10b5b6fa4a0b14e8530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd9898b60b601f69113c64b77650a09d7678edf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9HTECRBK7hj4Ov3rIwAAdHIIAKay6GmhH0jsehF44ijmWgI1\nOsw984P7QCyEL7T1E09YveOz9raZk9zE9WtJ/VRgsoTX6uP4zOUFa4wERipn3VHW\nnO/vKME/c8vyFghSHPq5BuSeVWdW4w26c1DvAL0WPqVpYdfEapAGZ1H7dSIcfnIo\no9+vgXWE7HBIwvV4bMFmOYEvQox9UuYMepRQmsdCuyf7pksUu9zffrMRJ4VsZjzw\nu+ogGYAlyDehy+wJ79ysRdikaRz4UkxzKe4kYFj6JeHl5ZoS9XhqIFurdXC0ctEu\nFKFu5EP3IvdN4KywTQlOUutRXbzh3IeEWhnWlcr5WIbVr4jy/7uE0RVLzuvqEns=\n=qG9H\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ff346fc4d396efdc036e10b5b6fa4a0b14e8530\nparent 0a223d139cd26e5bfab23a478a5cad845eaab131\nparent 9073c897459a8582fa61d87f41654e18f9869b46\nauthor Alex Crichton <alex@alexcrichton.com> 1525970116 -0500\ncommitter GitHub <noreply@github.com> 1525970116 -0500\n\nRollup merge of #49423 - gavento:gavento-dev, r=nikomatsakis\n\nExtend tests for RFC1598 (GAT)\n\nMore GAT tests, namely some usage for `Iterable` and `StreamingIterator`, shadowing (lifetimes and type params), `Collection<T>` and `CollectionFamily` from [the series](http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/) with default associated types. Tracking issue: #44265\n\nr? @nikomatsakis\n\nWrong GAT argument numbers / kinds and default values are next.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd9898b60b601f69113c64b77650a09d7678edf", "html_url": "https://github.com/rust-lang/rust/commit/ecd9898b60b601f69113c64b77650a09d7678edf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd9898b60b601f69113c64b77650a09d7678edf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a223d139cd26e5bfab23a478a5cad845eaab131", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a223d139cd26e5bfab23a478a5cad845eaab131", "html_url": "https://github.com/rust-lang/rust/commit/0a223d139cd26e5bfab23a478a5cad845eaab131"}, {"sha": "9073c897459a8582fa61d87f41654e18f9869b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/9073c897459a8582fa61d87f41654e18f9869b46", "html_url": "https://github.com/rust-lang/rust/commit/9073c897459a8582fa61d87f41654e18f9869b46"}], "stats": {"total": 417, "additions": 401, "deletions": 16}, "files": [{"sha": "e71166ed65bba4ec9bbb6030dc8ab481a6a468e6", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+//follow-up PR\n+\n+// A Collection trait and collection families. Based on\n+// http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n+// associated-type-constructors-part-2-family-traits/\n+\n+trait Collection<T> {\n+    type Iter<'iter>: Iterator<Item=&'iter T>;\n+    type Family: CollectionFamily;\n+    // Test associated type defaults with parameters\n+    type Sibling<U>: Collection<U> =\n+        <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+\n+    fn empty() -> Self;\n+\n+    fn add(&mut self, value: T);\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+}\n+\n+trait CollectionFamily {\n+    type Member<T>: Collection<T, Family = Self>;\n+}\n+\n+struct VecFamily;\n+\n+impl CollectionFamily for VecFamily {\n+    type Member<T> = Vec<T>;\n+}\n+\n+impl<T> Collection<T> for Vec<T> {\n+    type Iter<'iter> = std::slice::Iter<'iter, T>;\n+    type Family = VecFamily;\n+\n+    fn empty() -> Self {\n+        Vec::new()\n+    }\n+\n+    fn add(&mut self, value: T) {\n+        self.push(value)\n+    }\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        self.iter()\n+    }\n+}\n+\n+fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n+//~^ ERROR type parameters are not allowed on this type [E0109]\n+where\n+    C: Collection<i32>,\n+{\n+    let mut res = C::Family::Member::<f32>::empty();\n+    for &v in ints.iterate() {\n+        res.add(v as f32);\n+    }\n+    res\n+}\n+\n+fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+//~^ ERROR type parameters are not allowed on this type [E0109]\n+where\n+    C: Collection<i32>,\n+{\n+    let mut res = C::Family::Member::<f32>::empty();\n+    for &v in ints.iterate() {\n+        res.add(v as f32);\n+    }\n+    res\n+}\n+\n+fn use_floatify() {\n+    let a = vec![1i32, 2, 3];\n+    let b = floatify(a);\n+    println!(\"{}\", b.iterate().next());\n+    let c = floatify_sibling(a);\n+    println!(\"{}\", c.iterate().next());\n+}\n+\n+fn main() {}"}, {"sha": "ed96570583f4ffb4bbda6230eaa2a5438f686b9d", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -0,0 +1,34 @@\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/collections.rs:65:90\n+   |\n+LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n+   |                                                                                          ^^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/collections.rs:77:69\n+   |\n+LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+   |                                                                     ^^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/collections.rs:26:71\n+   |\n+LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+   |                                                                       ^ type parameter not allowed\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/collections.rs:33:50\n+   |\n+LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/collections.rs:59:50\n+   |\n+LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n+   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0109, E0110.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "04294100315264ec5f1a26bb3a6834da7e86500b", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(generic_associated_types)]\n \n+use std::ops::Deref;\n+\n //FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n //follow-up PR\n \n@@ -18,11 +20,18 @@ trait Foo {\n }\n \n trait Baz {\n-    type Quux<'a>;\n+    type Quux<'a>: Foo;\n+\n+    // This weird type tests that we can use universal function call syntax to access the Item on\n+    type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n }\n \n impl<T> Baz for T where T: Foo {\n-    type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+    type Quux<'a> = T;\n+\n+    type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n }\n "}, {"sha": "764a0db2478a8478d7d86dd03758905bf9db48f4", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -1,9 +1,21 @@\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/construct_with_other_type.rs:25:37\n+  --> $DIR/construct_with_other_type.rs:26:46\n    |\n-LL |     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n-   |                                     ^^ lifetime parameter not allowed on this type\n+LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n+   |                                              ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to previous error\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/construct_with_other_type.rs:26:63\n+   |\n+LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n+   |                                                               ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/construct_with_other_type.rs:34:40\n+   |\n+LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n+   |                                        ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}, {"sha": "38967dbbe4530ea4ab28da1943889f4ef1e8d54f", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -20,13 +20,40 @@ trait Iterable {\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n \n-    // This weird type tests that we can use universal function call syntax to access the Item on\n-    // Self::Iter which we have declared to be an Iterator\n-    type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n+    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+}\n \n-    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n+// Impl for struct type\n+impl<T> Iterable for Vec<T> {\n+    type Item<'a> = &'a T;\n+    type Iter<'a> = std::slice::Iter<'a, T>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        self.iter()\n+    }\n+}\n+\n+// Impl for a primitive type\n+impl<T> Iterable for [T] {\n+    type Item<'a> = &'a T;\n+    type Iter<'a> = std::slice::Iter<'a, T>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        self.iter()\n+    }\n+}\n+\n+fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    it.iter()\n+}\n+\n+fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    it.iter().next()\n }\n \n fn main() {}"}, {"sha": "0e251300e451f8bb49eae67a15577a72ead73977", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -5,17 +5,35 @@ LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n    |                                               ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:25:48\n+  --> $DIR/iterable.rs:49:53\n    |\n-LL |     type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n-   |                                                ^^ lifetime parameter not allowed on this type\n+LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+   |                                                     ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:28:41\n+  --> $DIR/iterable.rs:54:60\n+   |\n+LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+   |                                                            ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:23:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to 3 previous errors\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:32:41\n+   |\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                                         ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:43:41\n+   |\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                                         ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}, {"sha": "51527d4117c2c04c35ec02748bb9a1b0401ffb8e", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+//follow-up PR\n+\n+//FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`\n+\n+trait Foo {\n+    type A<'a>;\n+    type B<'a, 'b>;\n+    type C;\n+    type D<T>;\n+    type E<'a, T>;\n+    // Test parameters in default values\n+    type FOk<T> = Self::E<'static, T>;\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    type FErr1 = Self::E<'static, 'static>; // Error\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    type FErr2<T> = Self::E<'static, T, u32>; // Error\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A = u32; // Error: parameter expected\n+    type B<'a, T> = Vec<T>; // Error: lifetime param expected\n+    type C<'a> = u32; // Error: no param expected\n+    type D<'a> = u32; // Error: type param expected\n+    type E<T, U> = u32; // Error: lifetime expected as the first param\n+}\n+\n+struct Fooer;\n+\n+impl Foo for Fooer {\n+    type A<T> = u32; // Error: lifetime parameter expected\n+    type B<'a> = u32; // Error: another lifetime param expected\n+    type C<T> = T; // Error: no param expected\n+    type D<'b, T> = u32; // Error: unexpected lifetime param\n+    type E<'a, 'b> = u32; // Error: type expected as the second param\n+}\n+\n+fn main() {}"}, {"sha": "df83fdaad5bfa66f13ce9210569fe1a31e288faf", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -0,0 +1,34 @@\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/parameter_number_and_kind.rs:26:36\n+   |\n+LL |     type FOk<T> = Self::E<'static, T>;\n+   |                                    ^ type parameter not allowed\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/parameter_number_and_kind.rs:26:27\n+   |\n+LL |     type FOk<T> = Self::E<'static, T>;\n+   |                           ^^^^^^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/parameter_number_and_kind.rs:29:26\n+   |\n+LL |     type FErr1 = Self::E<'static, 'static>; // Error\n+   |                          ^^^^^^^ lifetime parameter not allowed on this type\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/parameter_number_and_kind.rs:31:38\n+   |\n+LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n+   |                                      ^ type parameter not allowed\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/parameter_number_and_kind.rs:31:29\n+   |\n+LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n+   |                             ^^^^^^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0109, E0110.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "6cdcaf256839431ea1f8e27e9319b996748fb845", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+//FIXME(#44265): The lifetime shadowing and type parameter shadowing\n+// should cause an error. Now it compiles (errorneously) and this will be addressed\n+// by a future PR. Then remove the following:\n+// compile-pass\n+\n+trait Shadow<'a> {\n+    type Bar<'a>; // Error: shadowed lifetime\n+}\n+\n+trait NoShadow<'a> {\n+    type Bar<'b>; // OK\n+}\n+\n+impl<'a> NoShadow<'a> for &'a u32 {\n+    type Bar<'a> = i32; // Error: shadowed lifetime\n+}\n+\n+trait ShadowT<T> {\n+    type Bar<T>; // Error: shadowed type parameter\n+}\n+\n+trait NoShadowT<T> {\n+    type Bar<U>; // OK\n+}\n+\n+impl<T> NoShadowT<T> for Option<T> {\n+    type Bar<T> = i32; // Error: shadowed type parameter\n+}\n+\n+fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout?ref=ecd9898b60b601f69113c64b77650a09d7678edf"}, {"sha": "522ddb5dc135e36e162d34cc5bfb34e2f27f427b", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -35,4 +35,48 @@ struct Foo<T: StreamingIterator> {\n fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n \n+// Full example of enumerate iterator\n+\n+#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+struct StreamEnumerate<I> {\n+    iter: I,\n+    count: usize,\n+}\n+\n+impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n+    type Item<'a> = (usize, I::Item<'a>);\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n+        //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        match self.iter.next() {\n+            None => None,\n+            Some(val) => {\n+                let r = Some((self.count, val));\n+                self.count += 1;\n+                r\n+            }\n+        }\n+    }\n+}\n+\n+impl<I> StreamEnumerate<I> {\n+    pub fn new(iter: I) -> Self {\n+        StreamEnumerate {\n+            count: 0,\n+            iter: iter,\n+        }\n+    }\n+}\n+\n+fn test_stream_enumerate() {\n+    let v = vec![\"a\", \"b\", \"c\"];\n+    let se = StreamEnumerate::new(v.iter());\n+    let a: &str = se.next().unwrap().1;\n+    for (i, s) in se {\n+        println!(\"{} {}\", i, s);\n+    }\n+    println!(\"{}\", a);\n+}\n+\n+\n fn main() {}"}, {"sha": "607a4b8d57996e1cb0343783c379a9e4669093c8", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd9898b60b601f69113c64b77650a09d7678edf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=ecd9898b60b601f69113c64b77650a09d7678edf", "patch": "@@ -16,6 +16,18 @@ error[E0110]: lifetime parameters are not allowed on this type\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n    |                                                ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to 3 previous errors\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:47:37\n+   |\n+LL |     type Item<'a> = (usize, I::Item<'a>);\n+   |                                     ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:49:48\n+   |\n+LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n+   |                                                ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}]}