{"sha": "0954d31beeb924510769fe8e201386a7cc3621f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTRkMzFiZWViOTI0NTEwNzY5ZmU4ZTIwMTM4NmE3Y2MzNjIxZjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-30T12:18:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-30T12:18:31Z"}, "message": "Merge #5138\n\n5138: Refactor runnable tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fb78519e906936eeea6857ffebd4ca106a88d810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb78519e906936eeea6857ffebd4ca106a88d810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0954d31beeb924510769fe8e201386a7cc3621f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+y2XCRBK7hj4Ov3rIwAAdHIIAEyz4WJncg7/gPgm0R8zwy0N\n1ZAYnZcQHDvUNjidFlJ2w0Udkvc7ifLlrWYBa196ayJxg55/1Q1uyLpDO4wGal+b\n+1tWosJwpHJEFzZ9YmfD0FM4YOO6sJOBQcn+9Kczi78ljtyrr7BZO3H+nEtDFDQS\nxobx4HxwKyNXhNsuMVvaI5W7ukcQpGG44cMyLkazLz2cte+gX3IkZZZ79FVUfWMg\naGgTSUEzbjdxxaBBUarosK2ZM5X2BFVdOnwbo6zVNvm6AzyhgIyrFhzQS2F7IFQx\nUdsYhEeU/5AdbUxWJehVFfJq+tD78U7qfEXKyJaW+fllY1K/IDYymgDEPHBMzvI=\n=ju32\n-----END PGP SIGNATURE-----\n", "payload": "tree fb78519e906936eeea6857ffebd4ca106a88d810\nparent 3e70d0f30802472ee40c9fc37b8ead69e137a1a1\nparent de464f5e4a7f9fef444b1f8b6f649dace9cf1de5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593519511 +0000\ncommitter GitHub <noreply@github.com> 1593519511 +0000\n\nMerge #5138\n\n5138: Refactor runnable tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0954d31beeb924510769fe8e201386a7cc3621f8", "html_url": "https://github.com/rust-lang/rust/commit/0954d31beeb924510769fe8e201386a7cc3621f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0954d31beeb924510769fe8e201386a7cc3621f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e70d0f30802472ee40c9fc37b8ead69e137a1a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e70d0f30802472ee40c9fc37b8ead69e137a1a1", "html_url": "https://github.com/rust-lang/rust/commit/3e70d0f30802472ee40c9fc37b8ead69e137a1a1"}, {"sha": "de464f5e4a7f9fef444b1f8b6f649dace9cf1de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/de464f5e4a7f9fef444b1f8b6f649dace9cf1de5", "html_url": "https://github.com/rust-lang/rust/commit/de464f5e4a7f9fef444b1f8b6f649dace9cf1de5"}], "stats": {"total": 1036, "additions": 511, "deletions": 525}, "files": [{"sha": "ed15d6494f2734f86b8c96f250acfcef927bb458", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 511, "deletions": 525, "changes": 1036, "blob_url": "https://github.com/rust-lang/rust/blob/0954d31beeb924510769fe8e201386a7cc3621f8/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0954d31beeb924510769fe8e201386a7cc3621f8/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=0954d31beeb924510769fe8e201386a7cc3621f8", "patch": "@@ -251,13 +251,21 @@ fn runnable_mod(\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n     use crate::mock_analysis::analysis_and_position;\n \n-    use super::{Runnable, RunnableAction, BENCH, BIN, DOCTEST, TEST};\n-\n-    fn assert_actions(runnables: &[Runnable], actions: &[&RunnableAction]) {\n+    use super::{RunnableAction, BENCH, BIN, DOCTEST, TEST};\n+\n+    fn check(\n+        ra_fixture: &str,\n+        // FIXME: fold this into `expect` as well\n+        actions: &[&RunnableAction],\n+        expect: Expect,\n+    ) {\n+        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let runnables = analysis.runnables(position.file_id).unwrap();\n+        expect.assert_debug_eq(&runnables);\n         assert_eq!(\n             actions,\n             runnables.into_iter().map(|it| it.action()).collect::<Vec<_>>().as_slice()\n@@ -266,579 +274,557 @@ mod tests {\n \n     #[test]\n     fn test_runnables() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        fn main() {}\n-\n-        #[test]\n-        fn test_foo() {}\n-\n-        #[test]\n-        #[ignore]\n-        fn test_foo() {}\n-\n-        #[bench]\n-        fn bench() {}\n-        \"#,\n-        );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 1..21,\n-                    name: \"main\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        12..16,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Bin,\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 23..47,\n-                    name: \"test_foo\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        34..42,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"test_foo\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: false,\n+//- /lib.rs\n+<|>\n+fn main() {}\n+\n+#[test]\n+fn test_foo() {}\n+\n+#[test]\n+#[ignore]\n+fn test_foo() {}\n+\n+#[bench]\n+fn bench() {}\n+\"#,\n+            &[&BIN, &TEST, &TEST, &BENCH],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..13,\n+                            name: \"main\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                4..8,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Bin,\n+                        cfg_exprs: [],\n                     },\n-                },\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 49..83,\n-                    name: \"test_foo\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        70..78,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"test_foo\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: true,\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 15..39,\n+                            name: \"test_foo\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                26..34,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"test_foo\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 41..75,\n+                            name: \"test_foo\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                62..70,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"test_foo\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: true,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n                     },\n-                },\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 85..107,\n-                    name: \"bench\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        97..102,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Bench {\n-                    test_id: Path(\n-                        \"bench\",\n-                    ),\n-                },\n-                cfg_exprs: [],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&BIN, &TEST, &TEST, &BENCH]);\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 77..99,\n+                            name: \"bench\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                89..94,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Bench {\n+                            test_id: Path(\n+                                \"bench\",\n+                            ),\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_runnables_doc_test() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        fn main() {}\n-\n-        /// ```\n-        /// let x = 5;\n-        /// ```\n-        fn foo() {}\n-        \"#,\n+//- /lib.rs\n+<|>\n+fn main() {}\n+\n+/// ```\n+/// let x = 5;\n+/// ```\n+fn foo() {}\n+\"#,\n+            &[&BIN, &DOCTEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..13,\n+                            name: \"main\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                4..8,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Bin,\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 15..57,\n+                            name: \"foo\",\n+                            kind: FN_DEF,\n+                            focus_range: None,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"foo\",\n+                            ),\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ]\n+            \"#]],\n         );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 1..21,\n-                    name: \"main\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        12..16,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Bin,\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 23..65,\n-                    name: \"foo\",\n-                    kind: FN_DEF,\n-                    focus_range: None,\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: DocTest {\n-                    test_id: Path(\n-                        \"foo\",\n-                    ),\n-                },\n-                cfg_exprs: [],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&BIN, &DOCTEST]);\n     }\n \n     #[test]\n     fn test_runnables_doc_test_in_impl() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        fn main() {}\n-\n-        struct Data;\n-        impl Data {\n-            /// ```\n-            /// let x = 5;\n-            /// ```\n-            fn foo() {}\n-        }\n-        \"#,\n+//- /lib.rs\n+<|>\n+fn main() {}\n+\n+struct Data;\n+impl Data {\n+    /// ```\n+    /// let x = 5;\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[&BIN, &DOCTEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..13,\n+                            name: \"main\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                4..8,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Bin,\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 44..98,\n+                            name: \"foo\",\n+                            kind: FN_DEF,\n+                            focus_range: None,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data::foo\",\n+                            ),\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                ]\n+            \"#]],\n         );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 1..21,\n-                    name: \"main\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        12..16,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Bin,\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 52..106,\n-                    name: \"foo\",\n-                    kind: FN_DEF,\n-                    focus_range: None,\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: DocTest {\n-                    test_id: Path(\n-                        \"Data::foo\",\n-                    ),\n-                },\n-                cfg_exprs: [],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&BIN, &DOCTEST]);\n     }\n \n     #[test]\n     fn test_runnables_module() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        mod test_mod {\n-            #[test]\n-            fn test_foo1() {}\n-        }\n-        \"#,\n-        );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 1..59,\n-                    name: \"test_mod\",\n-                    kind: MODULE,\n-                    focus_range: Some(\n-                        13..21,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: TestMod {\n-                    path: \"test_mod\",\n-                },\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 28..57,\n-                    name: \"test_foo1\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        43..52,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"test_mod::test_foo1\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: false,\n+//- /lib.rs\n+<|>\n+mod test_mod {\n+    #[test]\n+    fn test_foo1() {}\n+}\n+\"#,\n+            &[&TEST, &TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..51,\n+                            name: \"test_mod\",\n+                            kind: MODULE,\n+                            focus_range: Some(\n+                                5..13,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: TestMod {\n+                            path: \"test_mod\",\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 20..49,\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                35..44,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"test_mod::test_foo1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n                     },\n-                },\n-                cfg_exprs: [],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&TEST, &TEST]);\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_runnables_one_depth_layer_module() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        mod foo {\n-            mod test_mod {\n-                #[test]\n-                fn test_foo1() {}\n-            }\n-        }\n-        \"#,\n-        );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 23..85,\n-                    name: \"test_mod\",\n-                    kind: MODULE,\n-                    focus_range: Some(\n-                        27..35,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: TestMod {\n-                    path: \"foo::test_mod\",\n-                },\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 46..79,\n-                    name: \"test_foo1\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        65..74,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"foo::test_mod::test_foo1\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: false,\n+//- /lib.rs\n+<|>\n+mod foo {\n+    mod test_mod {\n+        #[test]\n+        fn test_foo1() {}\n+    }\n+}\n+\"#,\n+            &[&TEST, &TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 15..77,\n+                            name: \"test_mod\",\n+                            kind: MODULE,\n+                            focus_range: Some(\n+                                19..27,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: TestMod {\n+                            path: \"foo::test_mod\",\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 38..71,\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                57..66,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"foo::test_mod::test_foo1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n                     },\n-                },\n-                cfg_exprs: [],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&TEST, &TEST]);\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_runnables_multiple_depth_module() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        mod foo {\n-            mod bar {\n-                mod test_mod {\n-                    #[test]\n-                    fn test_foo1() {}\n-                }\n-            }\n+//- /lib.rs\n+<|>\n+mod foo {\n+    mod bar {\n+        mod test_mod {\n+            #[test]\n+            fn test_foo1() {}\n         }\n-        \"#,\n-        );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 41..115,\n-                    name: \"test_mod\",\n-                    kind: MODULE,\n-                    focus_range: Some(\n-                        45..53,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: TestMod {\n-                    path: \"foo::bar::test_mod\",\n-                },\n-                cfg_exprs: [],\n-            },\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 68..105,\n-                    name: \"test_foo1\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        91..100,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"foo::bar::test_mod::test_foo1\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: false,\n+    }\n+}\n+\"#,\n+            &[&TEST, &TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 33..107,\n+                            name: \"test_mod\",\n+                            kind: MODULE,\n+                            focus_range: Some(\n+                                37..45,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: TestMod {\n+                            path: \"foo::bar::test_mod\",\n+                        },\n+                        cfg_exprs: [],\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 60..97,\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                83..92,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"foo::bar::test_mod::test_foo1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [],\n                     },\n-                },\n-                cfg_exprs: [],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&TEST, &TEST]);\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_runnables_with_feature() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs crate:foo cfg:feature=foo\n-        <|> //empty\n-        #[test]\n-        #[cfg(feature = \"foo\")]\n-        fn test_foo1() {}\n-        \"#,\n-        );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 1..58,\n-                    name: \"test_foo1\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        44..53,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"test_foo1\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: false,\n-                    },\n-                },\n-                cfg_exprs: [\n-                    KeyValue {\n-                        key: \"feature\",\n-                        value: \"foo\",\n+//- /lib.rs crate:foo cfg:feature=foo\n+<|>\n+#[test]\n+#[cfg(feature = \"foo\")]\n+fn test_foo1() {}\n+\"#,\n+            &[&TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..50,\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                36..45,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"test_foo1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg_exprs: [\n+                            KeyValue {\n+                                key: \"feature\",\n+                                value: \"foo\",\n+                            },\n+                        ],\n                     },\n-                ],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&TEST]);\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_runnables_with_features() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs crate:foo cfg:feature=foo,feature=bar\n-        <|> //empty\n-        #[test]\n-        #[cfg(all(feature = \"foo\", feature = \"bar\"))]\n-        fn test_foo1() {}\n-        \"#,\n-        );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot!(&runnables,\n-        @r###\"\n-        [\n-            Runnable {\n-                nav: NavigationTarget {\n-                    file_id: FileId(\n-                        1,\n-                    ),\n-                    full_range: 1..80,\n-                    name: \"test_foo1\",\n-                    kind: FN_DEF,\n-                    focus_range: Some(\n-                        66..75,\n-                    ),\n-                    container_name: None,\n-                    description: None,\n-                    docs: None,\n-                },\n-                kind: Test {\n-                    test_id: Path(\n-                        \"test_foo1\",\n-                    ),\n-                    attr: TestAttr {\n-                        ignore: false,\n-                    },\n-                },\n-                cfg_exprs: [\n-                    All(\n-                        [\n-                            KeyValue {\n-                                key: \"feature\",\n-                                value: \"foo\",\n-                            },\n-                            KeyValue {\n-                                key: \"feature\",\n-                                value: \"bar\",\n+//- /lib.rs crate:foo cfg:feature=foo,feature=bar\n+<|>\n+#[test]\n+#[cfg(all(feature = \"foo\", feature = \"bar\"))]\n+fn test_foo1() {}\n+\"#,\n+            &[&TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 1..72,\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n+                            focus_range: Some(\n+                                58..67,\n+                            ),\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"test_foo1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n                             },\n+                        },\n+                        cfg_exprs: [\n+                            All(\n+                                [\n+                                    KeyValue {\n+                                        key: \"feature\",\n+                                        value: \"foo\",\n+                                    },\n+                                    KeyValue {\n+                                        key: \"feature\",\n+                                        value: \"bar\",\n+                                    },\n+                                ],\n+                            ),\n                         ],\n-                    ),\n-                ],\n-            },\n-        ]\n-        \"###\n-                );\n-        assert_actions(&runnables, &[&TEST]);\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_runnables_no_test_function_in_module() {\n-        let (analysis, pos) = analysis_and_position(\n+        check(\n             r#\"\n-        //- /lib.rs\n-        <|> //empty\n-        mod test_mod {\n-            fn foo1() {}\n-        }\n-        \"#,\n+//- /lib.rs\n+<|>\n+mod test_mod {\n+    fn foo1() {}\n+}\n+\"#,\n+            &[],\n+            expect![[r#\"\n+                []\n+            \"#]],\n         );\n-        let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert!(runnables.is_empty())\n     }\n }"}]}