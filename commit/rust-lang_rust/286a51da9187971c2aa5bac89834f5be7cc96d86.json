{"sha": "286a51da9187971c2aa5bac89834f5be7cc96d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NmE1MWRhOTE4Nzk3MWMyYWE1YmFjODk4MzRmNWJlN2NjOTZkODY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-25T18:07:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-28T17:38:56Z"}, "message": "Fix id generation", "tree": {"sha": "37d34e676c674cb206b4b20f66f90965487aea98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d34e676c674cb206b4b20f66f90965487aea98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286a51da9187971c2aa5bac89834f5be7cc96d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286a51da9187971c2aa5bac89834f5be7cc96d86", "html_url": "https://github.com/rust-lang/rust/commit/286a51da9187971c2aa5bac89834f5be7cc96d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286a51da9187971c2aa5bac89834f5be7cc96d86/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e4abf47397438ca86e96ed3f848276dddd5738", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e4abf47397438ca86e96ed3f848276dddd5738", "html_url": "https://github.com/rust-lang/rust/commit/47e4abf47397438ca86e96ed3f848276dddd5738"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "a9021dc34e207438edb537e673f3511c461aa7b9", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/286a51da9187971c2aa5bac89834f5be7cc96d86/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/286a51da9187971c2aa5bac89834f5be7cc96d86/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=286a51da9187971c2aa5bac89834f5be7cc96d86", "patch": "@@ -218,7 +218,7 @@ name = \"handlebars\"\n version = \"0.25.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -243,7 +243,7 @@ dependencies = [\n \n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.4\"\n+version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -777,8 +777,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -1001,7 +1002,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"663e1728d8037fb0d4e13bcd1b1909fb5d913690a9929eb385922df157c2ff8f\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7291b1dd97d331f752620b02dfdbc231df7fc01bf282a00769e1cdb963c460dc\"\n+\"checksum lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4732c563b9a21a406565c4747daa7b46742f082911ae4753f390dc9ec7ee1a97\"\n \"checksum libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88ee81885f9f04bff991e306fea7c1c60a5f0f9e409e99f6b40e3311a3363135\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n \"checksum mdbook 0.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06a68e8738e42b38a02755d3ce5fa12d559e17acb238e4326cbc3cc056e65280\""}, {"sha": "e55f3fa91dcdc41029553188802b0cba9f2d3cac", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/286a51da9187971c2aa5bac89834f5be7cc96d86/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286a51da9187971c2aa5bac89834f5be7cc96d86/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=286a51da9187971c2aa5bac89834f5be7cc96d86", "patch": "@@ -105,17 +105,20 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n });\n \n macro_rules! event_loop_break {\n-    ($parser:expr, $toc_builder:expr, $shorter:expr, $buf:expr, $($end_event:pat)|*) => {{\n-        event_loop_break($parser, $toc_builder, $shorter, $buf, false, $($end_event:pat)|*);\n-    }};\n-    ($parser:expr, $toc_builder:expr, $shorter:expr, $buf:expr, $escape:expr,\n+    ($parser:expr, $toc_builder:expr, $shorter:expr, $buf:expr, $escape:expr, $id:expr,\n      $($end_event:pat)|*) => {{\n+        fn inner(id: &mut Option<&mut String>, s: &str) {\n+            if let Some(ref mut id) = *id {\n+                id.push_str(s);\n+            }\n+        }\n         while let Some(event) = $parser.next() {\n             match event {\n                 $($end_event)|* => break,\n                 Event::Text(ref s) => {\n+                    inner($id, s);\n                     if $escape {\n-                        $buf.push_str(&escape(s));\n+                        $buf.push_str(&format!(\"{}\", Escape(s)));\n                     } else {\n                         $buf.push_str(s);\n                     }\n@@ -124,7 +127,7 @@ macro_rules! event_loop_break {\n                     $buf.push(' ');\n                 }\n                 x => {\n-                    looper($parser, &mut $buf, Some(x), $toc_builder, $shorter);\n+                    looper($parser, &mut $buf, Some(x), $toc_builder, $shorter, $id);\n                 }\n             }\n         }\n@@ -135,13 +138,6 @@ pub fn render(w: &mut fmt::Formatter,\n               s: &str,\n               print_toc: bool,\n               shorter: MarkdownOutputStyle) -> fmt::Result {\n-    fn escape(entry: &str) -> String {\n-        entry.replace(\"<\", \"&lt;\")\n-             .replace(\"'\", \"&#39;\")\n-             .replace(\">\", \"&gt;\")\n-             .replace(\"&\", \"&amp;\")\n-    }\n-\n     fn block(parser: &mut Parser, buffer: &mut String, lang: &str) {\n         let mut origtext = String::new();\n         while let Some(event) = parser.next() {\n@@ -223,10 +219,11 @@ pub fn render(w: &mut fmt::Formatter,\n     fn header(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n               shorter: MarkdownOutputStyle, level: i32) {\n         let mut ret = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, ret, true, Event::End(Tag::Header(_)));\n+        let mut id = String::new();\n+        event_loop_break!(parser, toc_builder, shorter, ret, true, &mut Some(&mut id),\n+                          Event::End(Tag::Header(_)));\n         ret = ret.trim_right().to_owned();\n \n-        let id = ret.clone();\n         let id = id.chars().filter_map(|c| {\n             if c.is_alphanumeric() || c == '-' || c == '_' {\n                 if c.is_ascii() {\n@@ -254,30 +251,33 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n \n     fn codespan(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                shorter: MarkdownOutputStyle) {\n+                shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Code));\n+        event_loop_break!(parser, toc_builder, shorter, content, false, id, Event::End(Tag::Code));\n         buffer.push_str(&format!(\"<code>{}</code>\",\n                                  Escape(&collapse_whitespace(content.trim_right()))));\n     }\n \n     fn link(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-            shorter: MarkdownOutputStyle, url: &str, mut title: String) {\n-        event_loop_break!(parser, toc_builder, shorter, title, true, Event::End(Tag::Link(_, _)));\n+            shorter: MarkdownOutputStyle, url: &str, mut title: String,\n+            id: &mut Option<&mut String>) {\n+        event_loop_break!(parser, toc_builder, shorter, title, true, id,\n+                          Event::End(Tag::Link(_, _)));\n         buffer.push_str(&format!(\"<a href=\\\"{}\\\">{}</a>\", url, title));\n     }\n \n     fn paragraph(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                 shorter: MarkdownOutputStyle) {\n+                 shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Paragraph));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, id,\n+                          Event::End(Tag::Paragraph));\n         buffer.push_str(&format!(\"<p>{}</p>\", content.trim_right()));\n     }\n \n     fn cell(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, true,\n+        event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n                           Event::End(Tag::TableHead) |\n                               Event::End(Tag::Table(_)) |\n                               Event::End(Tag::TableRow) |\n@@ -297,7 +297,7 @@ pub fn render(w: &mut fmt::Formatter,\n                     cell(parser, &mut content, toc_builder, shorter);\n                 }\n                 x => {\n-                    looper(parser, &mut content, Some(x), toc_builder, shorter);\n+                    looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n                 }\n             }\n         }\n@@ -314,7 +314,7 @@ pub fn render(w: &mut fmt::Formatter,\n                     cell(parser, &mut content, toc_builder, shorter);\n                 }\n                 x => {\n-                    looper(parser, &mut content, Some(x), toc_builder, shorter);\n+                    looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n                 }\n             }\n         }\n@@ -351,7 +351,8 @@ pub fn render(w: &mut fmt::Formatter,\n     fn blockquote(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n                   shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::BlockQuote));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n+                          Event::End(Tag::BlockQuote));\n         buffer.push_str(&format!(\"<blockquote>{}</blockquote>\", content.trim_right()));\n     }\n \n@@ -362,10 +363,10 @@ pub fn render(w: &mut fmt::Formatter,\n             match event {\n                 Event::End(Tag::Item) => break,\n                 Event::Text(ref s) => {\n-                    content.push_str(&escape(s));\n+                    content.push_str(&format!(\"{}\", Escape(s)));\n                 }\n                 x => {\n-                    looper(parser, &mut content, Some(x), toc_builder, shorter);\n+                    looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n                 }\n             }\n         }\n@@ -382,29 +383,32 @@ pub fn render(w: &mut fmt::Formatter,\n                     list_item(parser, &mut content, toc_builder, shorter);\n                 }\n                 x => {\n-                    looper(parser, &mut content, Some(x), toc_builder, shorter);\n+                    looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n                 }\n             }\n         }\n         buffer.push_str(&format!(\"<ul>{}</ul>\", content));\n     }\n \n     fn emphasis(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                shorter: MarkdownOutputStyle) {\n+                shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Emphasis));\n+        event_loop_break!(parser, toc_builder, shorter, content, false, id,\n+                          Event::End(Tag::Emphasis));\n         buffer.push_str(&format!(\"<em>{}</em>\", content));\n     }\n \n     fn strong(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-              shorter: MarkdownOutputStyle) {\n+              shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Strong));\n+        event_loop_break!(parser, toc_builder, shorter, content, false, id,\n+                          Event::End(Tag::Strong));\n         buffer.push_str(&format!(\"<strong>{}</strong>\", content));\n     }\n \n     fn looper<'a>(parser: &'a mut Parser, buffer: &mut String, next_event: Option<Event<'a>>,\n-                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) -> bool {\n+                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n+                  id: &mut Option<&mut String>) -> bool {\n         if let Some(event) = next_event {\n             match event {\n                 Event::Start(Tag::CodeBlock(lang)) => {\n@@ -414,13 +418,13 @@ pub fn render(w: &mut fmt::Formatter,\n                     header(parser, buffer, toc_builder, shorter, level);\n                 }\n                 Event::Start(Tag::Code) => {\n-                    codespan(parser, buffer, toc_builder, shorter);\n+                    codespan(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Start(Tag::Paragraph) => {\n-                    paragraph(parser, buffer, toc_builder, shorter);\n+                    paragraph(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Start(Tag::Link(ref url, ref t)) => {\n-                    link(parser, buffer, toc_builder, shorter, url, t.as_ref().to_owned());\n+                    link(parser, buffer, toc_builder, shorter, url, t.as_ref().to_owned(), id);\n                 }\n                 Event::Start(Tag::Table(_)) => {\n                     table(parser, buffer, toc_builder, shorter);\n@@ -432,10 +436,10 @@ pub fn render(w: &mut fmt::Formatter,\n                     list(parser, buffer, toc_builder, shorter);\n                 }\n                 Event::Start(Tag::Emphasis) => {\n-                    emphasis(parser, buffer, toc_builder, shorter);\n+                    emphasis(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Start(Tag::Strong) => {\n-                    strong(parser, buffer, toc_builder, shorter);\n+                    strong(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Html(h) | Event::InlineHtml(h) => {\n                     buffer.push_str(&*h);\n@@ -457,7 +461,7 @@ pub fn render(w: &mut fmt::Formatter,\n     let mut parser = Parser::new_ext(s, pulldown_cmark::OPTION_ENABLE_TABLES);\n     loop {\n         let next_event = parser.next();\n-        if !looper(&mut parser, &mut buffer, next_event, &mut toc_builder, shorter) {\n+        if !looper(&mut parser, &mut buffer, next_event, &mut toc_builder, shorter, &mut None) {\n             break\n         }\n     }\n@@ -742,7 +746,7 @@ mod tests {\n     fn test_header() {\n         fn t(input: &str, expect: &str) {\n             let output = format!(\"{}\", Markdown(input, MarkdownOutputStyle::Fancy));\n-            assert_eq!(output, expect);\n+            assert_eq!(output, expect, \"original: {}\", input);\n             reset_ids(true);\n         }\n \n@@ -751,10 +755,10 @@ mod tests {\n         t(\"## Foo-bar_baz qux\", \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-\\\n           header\\\"><a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\");\n         t(\"### **Foo** *bar* baz!?!& -_qux_-%\",\n-          \"<h3 id=\\\"foo-bar-baz--_qux_-\\\" class=\\\"section-header\\\">\\\n-          <a href=\\\"#foo-bar-baz--_qux_-\\\"><strong>Foo</strong> \\\n-          <em>bar</em> baz!?!&amp; -_qux_-%</a></h3>\");\n-        t(\"####**Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n+          \"<h3 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n+          <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n+          <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a></h3>\");\n+        t(\"#### **Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n           \"<h4 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n           <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n           <em><code>baz</code></em> \u2764 #qux</a></h4>\");\n@@ -764,7 +768,7 @@ mod tests {\n     fn test_header_ids_multiple_blocks() {\n         fn t(input: &str, expect: &str) {\n             let output = format!(\"{}\", Markdown(input, MarkdownOutputStyle::Fancy));\n-            assert_eq!(output, expect);\n+            assert_eq!(output, expect, \"original: {}\", input);\n         }\n \n         let test = || {\n@@ -790,7 +794,7 @@ mod tests {\n     fn test_plain_summary_line() {\n         fn t(input: &str, expect: &str) {\n             let output = plain_summary_line(input);\n-            assert_eq!(output, expect);\n+            assert_eq!(output, expect, \"original: {}\", input);\n         }\n \n         t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n@@ -804,7 +808,7 @@ mod tests {\n     fn test_markdown_html_escape() {\n         fn t(input: &str, expect: &str) {\n             let output = format!(\"{}\", MarkdownHtml(input));\n-            assert_eq!(output, expect);\n+            assert_eq!(output, expect, \"original: {}\", input);\n         }\n \n         t(\"`Struct<'a, T>`\", \"<p><code>Struct&lt;&#39;a, T&gt;</code></p>\");"}]}