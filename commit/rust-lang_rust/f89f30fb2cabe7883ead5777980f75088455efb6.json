{"sha": "f89f30fb2cabe7883ead5777980f75088455efb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OWYzMGZiMmNhYmU3ODgzZWFkNTc3Nzk4MGY3NTA4ODQ1NWVmYjY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-12T01:32:21Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-12T01:46:49Z"}, "message": "Move directly when Rc/Arc::make_mut splits from Weak\n\nWhen only other `Weak` references remain, we can directly move the data\ninto the new unique allocation as a plain memory copy.", "tree": {"sha": "62dcf018ba910de29c289f9f53b87e758a926a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62dcf018ba910de29c289f9f53b87e758a926a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f89f30fb2cabe7883ead5777980f75088455efb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f89f30fb2cabe7883ead5777980f75088455efb6", "html_url": "https://github.com/rust-lang/rust/commit/f89f30fb2cabe7883ead5777980f75088455efb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f89f30fb2cabe7883ead5777980f75088455efb6/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85df44e8d54f92a23d8734cb05d14c75697a2ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85df44e8d54f92a23d8734cb05d14c75697a2ca", "html_url": "https://github.com/rust-lang/rust/commit/d85df44e8d54f92a23d8734cb05d14c75697a2ca"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "c81405d6119e1f754705db8b871254d51e10aab8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f89f30fb2cabe7883ead5777980f75088455efb6/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89f30fb2cabe7883ead5777980f75088455efb6/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=f89f30fb2cabe7883ead5777980f75088455efb6", "patch": "@@ -1048,14 +1048,16 @@ impl<T: Clone> Rc<T> {\n             }\n         } else if Rc::weak_count(this) != 0 {\n             // Can just steal the data, all that's left is Weaks\n+            let mut rc = Self::new_uninit();\n             unsafe {\n-                let mut swap = Rc::new(ptr::read(&this.ptr.as_ref().value));\n-                mem::swap(this, &mut swap);\n-                swap.inner().dec_strong();\n+                let data = Rc::get_mut_unchecked(&mut rc);\n+                data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);\n+\n+                this.inner().dec_strong();\n                 // Remove implicit strong-weak ref (no need to craft a fake\n                 // Weak here -- we know other Weaks can clean up for us)\n-                swap.inner().dec_weak();\n-                forget(swap);\n+                this.inner().dec_weak();\n+                ptr::write(this, rc.assume_init());\n             }\n         }\n         // This unsafety is ok because we're guaranteed that the pointer"}, {"sha": "5bfcbeb82a13d131d8c779894b776048ca9de3b6", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f89f30fb2cabe7883ead5777980f75088455efb6/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89f30fb2cabe7883ead5777980f75088455efb6/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=f89f30fb2cabe7883ead5777980f75088455efb6", "patch": "@@ -1392,17 +1392,14 @@ impl<T: Clone> Arc<T> {\n \n             // Materialize our own implicit weak pointer, so that it can clean\n             // up the ArcInner as needed.\n-            let weak = Weak { ptr: this.ptr };\n+            let _weak = Weak { ptr: this.ptr };\n \n-            // mark the data itself as already deallocated\n+            // Can just steal the data, all that's left is Weaks\n+            let mut arc = Self::new_uninit();\n             unsafe {\n-                // there is no data race in the implicit write caused by `read`\n-                // here (due to zeroing) because data is no longer accessed by\n-                // other threads (due to there being no more strong refs at this\n-                // point).\n-                let mut swap = Arc::new(ptr::read(&weak.ptr.as_ref().data));\n-                mem::swap(this, &mut swap);\n-                mem::forget(swap);\n+                let data = Arc::get_mut_unchecked(&mut arc);\n+                data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);\n+                ptr::write(this, arc.assume_init());\n             }\n         } else {\n             // We were the sole reference of either kind; bump back up the"}]}