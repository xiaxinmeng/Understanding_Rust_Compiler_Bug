{"sha": "8579a9b834555339e400f3161280305a99189a5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzlhOWI4MzQ1NTUzMzllNDAwZjMxNjEyODAzMDVhOTkxODlhNWY=", "commit": {"author": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-06T18:54:21Z"}, "committer": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-06T18:54:21Z"}, "message": "Added support attribute path in resolusion module fn", "tree": {"sha": "6a13244a8a72b9b2fb890dfa98fd7c84fb30e1b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a13244a8a72b9b2fb890dfa98fd7c84fb30e1b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8579a9b834555339e400f3161280305a99189a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8579a9b834555339e400f3161280305a99189a5f", "html_url": "https://github.com/rust-lang/rust/commit/8579a9b834555339e400f3161280305a99189a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8579a9b834555339e400f3161280305a99189a5f/comments", "author": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a0f04128b1ba84da8f3a107e7eed0b164733ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0f04128b1ba84da8f3a107e7eed0b164733ed", "html_url": "https://github.com/rust-lang/rust/commit/35a0f04128b1ba84da8f3a107e7eed0b164733ed"}], "stats": {"total": 124, "additions": 119, "deletions": 5}, "files": [{"sha": "9f197bb58f7a4638eb8b1046ffe4a12c4fc5914a", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8579a9b834555339e400f3161280305a99189a5f/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579a9b834555339e400f3161280305a99189a5f/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=8579a9b834555339e400f3161280305a99189a5f", "patch": "@@ -1,6 +1,6 @@\n use arrayvec::ArrayVec;\n use ra_db::FileId;\n-use ra_syntax::ast;\n+use ra_syntax::{ast, SmolStr};\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n@@ -509,10 +509,16 @@ where\n                 .collect(&*items);\n             }\n             // out of line module, resolve, parse and recurse\n-            raw::ModuleData::Declaration { name, ast_id, .. } => {\n+            raw::ModuleData::Declaration { name, ast_id, attr_path } => {\n                 let ast_id = ast_id.with_file_id(self.file_id);\n                 let is_root = self.def_collector.def_map.modules[self.module_id].parent.is_none();\n-                match resolve_submodule(self.def_collector.db, self.file_id, name, is_root) {\n+                match resolve_submodule(\n+                    self.def_collector.db,\n+                    self.file_id,\n+                    name,\n+                    is_root,\n+                    attr_path.as_ref(),\n+                ) {\n                     Ok(file_id) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n                         let raw_items = self.def_collector.db.raw_items(file_id.into());\n@@ -626,6 +632,7 @@ fn resolve_submodule(\n     file_id: HirFileId,\n     name: &Name,\n     is_root: bool,\n+    attr_path: Option<&SmolStr>,\n ) -> Result<FileId, RelativePathBuf> {\n     // FIXME: handle submodules of inline modules properly\n     let file_id = file_id.original_file(db);\n@@ -639,7 +646,13 @@ fn resolve_submodule(\n     let file_mod = dir_path.join(format!(\"{}.rs\", name));\n     let dir_mod = dir_path.join(format!(\"{}/mod.rs\", name));\n     let file_dir_mod = dir_path.join(format!(\"{}/{}.rs\", mod_name, name));\n-    let mut candidates = ArrayVec::<[_; 2]>::new();\n+    let mut candidates = ArrayVec::<[_; 3]>::new();\n+    let file_attr_mod = attr_path.map(|file_path| {\n+        let file_attr_mod = dir_path.join(file_path.to_string());\n+        candidates.push(file_attr_mod.clone());\n+\n+        file_attr_mod\n+    });\n     if is_dir_owner {\n         candidates.push(file_mod.clone());\n         candidates.push(dir_mod);\n@@ -651,7 +664,13 @@ fn resolve_submodule(\n     // FIXME: handle ambiguity\n     match points_to.next() {\n         Some(file_id) => Ok(file_id),\n-        None => Err(if is_dir_owner { file_mod } else { file_dir_mod }),\n+        None => {\n+            if let Some(file_attr_mod) = file_attr_mod {\n+                Err(file_attr_mod)\n+            } else {\n+                Err(if is_dir_owner { file_mod } else { file_dir_mod })\n+            }\n+        }\n     }\n }\n "}, {"sha": "5e8ea67806b66d2b01b8edb5546e2d24092852bb", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8579a9b834555339e400f3161280305a99189a5f/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8579a9b834555339e400f3161280305a99189a5f/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=8579a9b834555339e400f3161280305a99189a5f", "patch": "@@ -364,6 +364,101 @@ fn module_resolution_works_for_raw_modules() {\n     \"###);\n }\n \n+#[test]\n+fn module_resolution_decl_path() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /library.rs\n+        #[path = \\\"bar/baz/foo.rs\\\"]\n+        mod foo;\n+        use self::foo::Bar;\n+\n+        //- /bar/baz/foo.rs\n+        pub struct Bar;\n+        \",\n+        crate_graph! {\n+            \"library\": (\"/library.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBar: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_module_with_path_in_mod_rs() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+        \n+        //- /foo/mod.rs\n+        #[path = \\\"baz.rs\\\"]\n+        pub mod bar;\n+\n+        use self::bar::Baz;\n+\n+        //- /foo/baz.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_module_with_path_non_crate_root() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+        \n+        //- /foo.rs\n+        #[path = \\\"baz.rs\\\"]\n+        pub mod bar;\n+\n+        use self::bar::Baz;\n+\n+        //- /baz.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n #[test]\n fn name_res_works_for_broken_modules() {\n     covers!(name_res_works_for_broken_modules);"}]}