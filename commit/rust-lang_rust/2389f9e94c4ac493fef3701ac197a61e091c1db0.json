{"sha": "2389f9e94c4ac493fef3701ac197a61e091c1db0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODlmOWU5NGM0YWM0OTNmZWYzNzAxYWMxOTdhNjFlMDkxYzFkYjA=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T11:29:21Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/functions.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "46c3fb86aa1ca6820de9ae9b66cc46afe9fb997c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c3fb86aa1ca6820de9ae9b66cc46afe9fb997c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2389f9e94c4ac493fef3701ac197a61e091c1db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2389f9e94c4ac493fef3701ac197a61e091c1db0", "html_url": "https://github.com/rust-lang/rust/commit/2389f9e94c4ac493fef3701ac197a61e091c1db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2389f9e94c4ac493fef3701ac197a61e091c1db0/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5d12a3ecf8e903482c4b6ea427247b5fbe8a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5d12a3ecf8e903482c4b6ea427247b5fbe8a27", "html_url": "https://github.com/rust-lang/rust/commit/df5d12a3ecf8e903482c4b6ea427247b5fbe8a27"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "7f2330b60cc27d14cf9b5a56d96c62b45b8fe396", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2389f9e94c4ac493fef3701ac197a61e091c1db0/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389f9e94c4ac493fef3701ac197a61e091c1db0/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=2389f9e94c4ac493fef3701ac197a61e091c1db0", "patch": "@@ -9,7 +9,6 @@\n fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n \n fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n-\n }\n \n // don't lint extern fns\n@@ -19,7 +18,6 @@ pub trait Foo {\n     fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool);\n     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n \n-\n     fn ptr(p: *const u8);\n }\n \n@@ -28,7 +26,6 @@ pub struct Bar;\n impl Bar {\n     fn good_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n-\n }\n \n // ok, we don\u2019t want to warn implementations\n@@ -38,11 +35,8 @@ impl Foo for Bar {\n \n     fn ptr(p: *const u8) {\n         println!(\"{}\", unsafe { *p });\n-\n         println!(\"{:?}\", unsafe { p.as_ref() });\n-\n         unsafe { std::ptr::read(p) };\n-\n     }\n }\n \n@@ -54,11 +48,8 @@ fn private(p: *const u8) {\n \n pub fn public(p: *const u8) {\n     println!(\"{}\", unsafe { *p });\n-\n     println!(\"{:?}\", unsafe { p.as_ref() });\n-\n     unsafe { std::ptr::read(p) };\n-\n }\n \n impl Bar {\n@@ -68,11 +59,8 @@ impl Bar {\n \n     pub fn public(self, p: *const u8) {\n         println!(\"{}\", unsafe { *p });\n-\n         println!(\"{:?}\", unsafe { p.as_ref() });\n-\n         unsafe { std::ptr::read(p) };\n-\n     }\n \n     pub fn public_ok(self, p: *const u8) {"}, {"sha": "0abf8f2f0a897a2d0951193c0ae6f5bedc8c7b1a", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2389f9e94c4ac493fef3701ac197a61e091c1db0/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2389f9e94c4ac493fef3701ac197a61e091c1db0/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=2389f9e94c4ac493fef3701ac197a61e091c1db0", "patch": "@@ -2,8 +2,7 @@ error: this function has too many arguments (8/7)\n   --> $DIR/functions.rs:11:1\n    |\n 11 | / fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n-12 | |\n-13 | | }\n+12 | | }\n    | |_^\n    |\n    = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n@@ -14,25 +13,25 @@ note: lint level defined here\n    |         ^^^^^^\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:20:5\n+  --> $DIR/functions.rs:19:5\n    |\n-20 |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n+19 |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:30:5\n+  --> $DIR/functions.rs:28:5\n    |\n-30 |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n+28 |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:40:34\n+  --> $DIR/functions.rs:37:34\n    |\n-40 |         println!(\"{}\", unsafe { *p });\n+37 |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n@@ -43,65 +42,65 @@ note: lint level defined here\n    |         ^^^^^^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:42:35\n+  --> $DIR/functions.rs:38:35\n    |\n-42 |         println!(\"{:?}\", unsafe { p.as_ref() });\n+38 |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:44:33\n+  --> $DIR/functions.rs:39:33\n    |\n-44 |         unsafe { std::ptr::read(p) };\n+39 |         unsafe { std::ptr::read(p) };\n    |                                 ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:56:30\n+  --> $DIR/functions.rs:50:30\n    |\n-56 |     println!(\"{}\", unsafe { *p });\n+50 |     println!(\"{}\", unsafe { *p });\n    |                              ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:58:31\n+  --> $DIR/functions.rs:51:31\n    |\n-58 |     println!(\"{:?}\", unsafe { p.as_ref() });\n+51 |     println!(\"{:?}\", unsafe { p.as_ref() });\n    |                               ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:60:29\n+  --> $DIR/functions.rs:52:29\n    |\n-60 |     unsafe { std::ptr::read(p) };\n+52 |     unsafe { std::ptr::read(p) };\n    |                             ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:70:34\n+  --> $DIR/functions.rs:61:34\n    |\n-70 |         println!(\"{}\", unsafe { *p });\n+61 |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:72:35\n+  --> $DIR/functions.rs:62:35\n    |\n-72 |         println!(\"{:?}\", unsafe { p.as_ref() });\n+62 |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:74:33\n+  --> $DIR/functions.rs:63:33\n    |\n-74 |         unsafe { std::ptr::read(p) };\n+63 |         unsafe { std::ptr::read(p) };\n    |                                 ^\n    |\n    = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]"}]}