{"sha": "421609225a5e38eb48dd42a4394898c7ae74b7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMTYwOTIyNWE1ZTM4ZWI0OGRkNDJhNDM5NDg5OGM3YWU3NGI3ZjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-12T15:00:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T15:00:45Z"}, "message": "Merge #3122\n\n3122: Add more hir APIs for associated items r=SomeoneToIgnore a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5d58e56752b86825e61a1346ef2655f4236da82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d58e56752b86825e61a1346ef2655f4236da82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421609225a5e38eb48dd42a4394898c7ae74b7f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRBMdCRBK7hj4Ov3rIwAAdHIIAFKhSJ3DmPFjT4ulwFz+3Ihp\n7q9uKUdKrSg8KirZX6NEHjt7Pfrx5WaUt/Eh33EmLFxnuJbY6ed7KPfk0DkIJA3R\nYwGtnbE9bLdGu0XwbGZ8ok8prME+ssqZAj49/H2SP5xJnO91R7abD2YX4i7T9k0a\n2ipixgMIH28ErqWIPOBmeJG2u7FfquiCfHPg9N6QzK0xteOsm70P5jnjBG9mM2+T\n0UnFYt4BCqTGieqrNIQMEQeItNVPad+YmVt8+Y90cIF/sgAJv6dA43whaJtlEGx0\n7rOfMHa34nH4NDSbGOHuBGVpYXVo1907g6YDTDwUg8RTlzGdyWhGcLf1NO/bcR0=\n=UxMm\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d58e56752b86825e61a1346ef2655f4236da82e\nparent 759100fb0dcb41518f2a593dae5de5bbedd07776\nparent 225fc353af5a1dddc04850e59e11fd67ef6258a1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581519645 +0000\ncommitter GitHub <noreply@github.com> 1581519645 +0000\n\nMerge #3122\n\n3122: Add more hir APIs for associated items r=SomeoneToIgnore a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421609225a5e38eb48dd42a4394898c7ae74b7f3", "html_url": "https://github.com/rust-lang/rust/commit/421609225a5e38eb48dd42a4394898c7ae74b7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421609225a5e38eb48dd42a4394898c7ae74b7f3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759100fb0dcb41518f2a593dae5de5bbedd07776", "url": "https://api.github.com/repos/rust-lang/rust/commits/759100fb0dcb41518f2a593dae5de5bbedd07776", "html_url": "https://github.com/rust-lang/rust/commit/759100fb0dcb41518f2a593dae5de5bbedd07776"}, {"sha": "225fc353af5a1dddc04850e59e11fd67ef6258a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/225fc353af5a1dddc04850e59e11fd67ef6258a1", "html_url": "https://github.com/rust-lang/rust/commit/225fc353af5a1dddc04850e59e11fd67ef6258a1"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "4fb679f6dddc6bf4327e0590facf6883b04b567a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/421609225a5e38eb48dd42a4394898c7ae74b7f3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421609225a5e38eb48dd42a4394898c7ae74b7f3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=421609225a5e38eb48dd42a4394898c7ae74b7f3", "patch": "@@ -10,9 +10,9 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId,\n-    LocalEnumVariantId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId,\n+    AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule,\n+    ImplId, LocalEnumVariantId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId,\n+    StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -25,7 +25,10 @@ use hir_ty::{\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n-use ra_syntax::ast::{self, AttrsOwner};\n+use ra_syntax::{\n+    ast::{self, AttrsOwner},\n+    AstNode,\n+};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n@@ -119,7 +122,9 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub use hir_def::{attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocItemId};\n+pub use hir_def::{\n+    attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocItemId, AssocItemLoc,\n+};\n use rustc_hash::FxHashSet;\n \n impl Module {\n@@ -639,17 +644,49 @@ pub struct MacroDef {\n     pub(crate) id: MacroDefId,\n }\n \n+/// Invariant: `inner.as_assoc_item(db).is_some()`\n+/// We do not actively enforce this invariant.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItem {\n     Function(Function),\n     Const(Const),\n     TypeAlias(TypeAlias),\n }\n-// FIXME: not every function, ... is actually an assoc item. maybe we should make\n-// sure that you can only turn actual assoc items into AssocItems. This would\n-// require not implementing From, and instead having some checked way of\n-// casting them, and somehow making the constructors private, which would be annoying.\n-impl_froms!(AssocItem: Function, Const, TypeAlias);\n+pub enum AssocItemContainer {\n+    Trait(Trait),\n+    ImplBlock(ImplBlock),\n+}\n+pub trait AsAssocItem {\n+    fn as_assoc_item(self, db: &impl DefDatabase) -> Option<AssocItem>;\n+}\n+\n+impl AsAssocItem for Function {\n+    fn as_assoc_item(self, db: &impl DefDatabase) -> Option<AssocItem> {\n+        as_assoc_item(db, AssocItem::Function, self.id)\n+    }\n+}\n+impl AsAssocItem for Const {\n+    fn as_assoc_item(self, db: &impl DefDatabase) -> Option<AssocItem> {\n+        as_assoc_item(db, AssocItem::Const, self.id)\n+    }\n+}\n+impl AsAssocItem for TypeAlias {\n+    fn as_assoc_item(self, db: &impl DefDatabase) -> Option<AssocItem> {\n+        as_assoc_item(db, AssocItem::TypeAlias, self.id)\n+    }\n+}\n+fn as_assoc_item<ID, DEF, CTOR, AST>(db: &impl DefDatabase, ctor: CTOR, id: ID) -> Option<AssocItem>\n+where\n+    ID: Lookup<Data = AssocItemLoc<AST>>,\n+    DEF: From<ID>,\n+    CTOR: FnOnce(DEF) -> AssocItem,\n+    AST: AstNode,\n+{\n+    match id.lookup(db).container {\n+        AssocContainerId::TraitId(_) | AssocContainerId::ImplId(_) => Some(ctor(DEF::from(id))),\n+        AssocContainerId::ContainerId(_) => None,\n+    }\n+}\n \n impl AssocItem {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n@@ -659,6 +696,18 @@ impl AssocItem {\n             AssocItem::TypeAlias(t) => t.module(db),\n         }\n     }\n+    pub fn container(self, db: &impl DefDatabase) -> AssocItemContainer {\n+        let container = match self {\n+            AssocItem::Function(it) => it.id.lookup(db).container,\n+            AssocItem::Const(it) => it.id.lookup(db).container,\n+            AssocItem::TypeAlias(it) => it.id.lookup(db).container,\n+        };\n+        match container {\n+            AssocContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n+            AssocContainerId::ImplId(id) => AssocItemContainer::ImplBlock(id.into()),\n+            AssocContainerId::ContainerId(_) => panic!(\"invalid AssocItem\"),\n+        }\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n@@ -769,6 +818,7 @@ impl TypeParam {\n     }\n }\n \n+// FIXME: rename to `ImplBlock`\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplBlock {\n     pub(crate) id: ImplId,"}, {"sha": "5cd965f7a4f9c94e07fca084db3e219ca389f3ac", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/421609225a5e38eb48dd42a4394898c7ae74b7f3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421609225a5e38eb48dd42a4394898c7ae74b7f3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=421609225a5e38eb48dd42a4394898c7ae74b7f3", "patch": "@@ -39,10 +39,10 @@ mod has_source;\n \n pub use crate::{\n     code_model::{\n-        Adt, AssocItem, AttrDef, Const, Crate, CrateDependency, DefWithBody, Docs, Enum,\n-        EnumVariant, FieldSource, Function, GenericDef, HasAttrs, HasVisibility, ImplBlock, Local,\n-        MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n-        TypeParam, Union, VariantDef,\n+        Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n+        DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n+        HasVisibility, ImplBlock, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n+        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n     },\n     has_source::HasSource,\n     source_analyzer::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},"}]}