{"sha": "8df11e431b71caa7b4c891c70e9cc48144603067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZjExZTQzMWI3MWNhYTdiNGM4OTFjNzBlOWNjNDgxNDQ2MDMwNjc=", "commit": {"author": {"name": "Suyash458", "email": "suyash.behera458@gmail.com", "date": "2020-12-08T16:55:20Z"}, "committer": {"name": "Suyash458", "email": "suyash.behera458@gmail.com", "date": "2020-12-11T05:30:25Z"}, "message": "add instructions to include msrv in lints", "tree": {"sha": "5b6cdeb8dbea75d11d5243e345020d156331df2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6cdeb8dbea75d11d5243e345020d156331df2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8df11e431b71caa7b4c891c70e9cc48144603067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8df11e431b71caa7b4c891c70e9cc48144603067", "html_url": "https://github.com/rust-lang/rust/commit/8df11e431b71caa7b4c891c70e9cc48144603067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8df11e431b71caa7b4c891c70e9cc48144603067/comments", "author": {"login": "Suyash458", "id": 7749510, "node_id": "MDQ6VXNlcjc3NDk1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7749510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suyash458", "html_url": "https://github.com/Suyash458", "followers_url": "https://api.github.com/users/Suyash458/followers", "following_url": "https://api.github.com/users/Suyash458/following{/other_user}", "gists_url": "https://api.github.com/users/Suyash458/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suyash458/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suyash458/subscriptions", "organizations_url": "https://api.github.com/users/Suyash458/orgs", "repos_url": "https://api.github.com/users/Suyash458/repos", "events_url": "https://api.github.com/users/Suyash458/events{/privacy}", "received_events_url": "https://api.github.com/users/Suyash458/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Suyash458", "id": 7749510, "node_id": "MDQ6VXNlcjc3NDk1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7749510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suyash458", "html_url": "https://github.com/Suyash458", "followers_url": "https://api.github.com/users/Suyash458/followers", "following_url": "https://api.github.com/users/Suyash458/following{/other_user}", "gists_url": "https://api.github.com/users/Suyash458/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suyash458/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suyash458/subscriptions", "organizations_url": "https://api.github.com/users/Suyash458/orgs", "repos_url": "https://api.github.com/users/Suyash458/repos", "events_url": "https://api.github.com/users/Suyash458/events{/privacy}", "received_events_url": "https://api.github.com/users/Suyash458/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "html_url": "https://github.com/rust-lang/rust/commit/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "a723b0a4c20f7ba1e33cd088c6992d2ed3d7e31a", "filename": "doc/adding_lints.md", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8df11e431b71caa7b4c891c70e9cc48144603067/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/8df11e431b71caa7b4c891c70e9cc48144603067/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=8df11e431b71caa7b4c891c70e9cc48144603067", "patch": "@@ -226,13 +226,13 @@ store.register_early_pass(|| box foo_functions::FooFunctions);\n ```\n \n As one may expect, there is a corresponding `register_late_pass` method\n-available as well. Without a call to one of `register_early_pass` or \n+available as well. Without a call to one of `register_early_pass` or\n `register_late_pass`, the lint pass in question will not be run.\n \n-One reason that `cargo dev` does not automate this step is that multiple lints \n+One reason that `cargo dev` does not automate this step is that multiple lints\n can use the same lint pass, so registering the lint pass may already be done\n when adding a new lint. Another reason that this step is not automated is that\n-the order that the passes are registered determines the order the passes \n+the order that the passes are registered determines the order the passes\n actually run, which in turn affects the order that any emitted lints are output\n in.\n \n@@ -380,6 +380,57 @@ pass.\n [`FnKind::Fn`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/enum.FnKind.html#variant.Fn\n [ident]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Ident.html\n \n+## Specifying the lint's minimum supported Rust version (msrv)\n+\n+Projects supporting older versions of Rust would need to disable a lint if it targets features\n+present in later versions. Support for this can be added by specifying an msrv in your lint like so,\n+\n+```rust\n+const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n+```\n+\n+The project's msrv will also have to be an attribute in the lint so you'll have to add a struct\n+and constructor for your lint. The project's msrv needs to be passed when the lint is registered\n+in `lib.rs`\n+\n+```rust\n+pub struct ManualStrip {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualStrip {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+```\n+\n+The project's msrv can then be matched against the lint's msrv in the LintPass using the `meets_msrv` utility\n+function.\n+\n+``` rust\n+if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+    return;\n+}\n+```\n+\n+The project's msrv can also be specified as an inner attribute, which overrides the value from\n+`clippy.toml`. This can be accounted for using the `extract_msrv_attr!(LintContext)` macro and passing\n+LateContext/EarlyContext.\n+\n+```rust\n+impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        ...\n+    }\n+    extract_msrv_attr!(LateContext);\n+}\n+```\n+\n+Once the msrv is added to the lint, a relevant test case should be added to `tests/ui/min_rust_version_attr.rs`\n+which verifies that the lint isn't emitted if the project's msrv is lower.\n+\n ## Author lint\n \n If you have trouble implementing your lint, there is also the internal `author`"}]}