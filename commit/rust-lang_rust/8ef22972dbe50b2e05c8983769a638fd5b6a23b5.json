{"sha": "8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjIyOTcyZGJlNTBiMmUwNWM4OTgzNzY5YTYzOGZkNWI2YTIzYjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-01T22:56:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-01T22:56:21Z"}, "message": "Add ty_type.", "tree": {"sha": "f9a725868e83ecfddf01ab08ede4840ea9790539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a725868e83ecfddf01ab08ede4840ea9790539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "html_url": "https://github.com/rust-lang/rust/commit/8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef50d0e668635824cc5ed86aaa385dd6f3181b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef50d0e668635824cc5ed86aaa385dd6f3181b53", "html_url": "https://github.com/rust-lang/rust/commit/ef50d0e668635824cc5ed86aaa385dd6f3181b53"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "9fddb66f39726e0337e197375fd63ba7e2f4ed8a", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "patch": "@@ -197,6 +197,7 @@ tag ty_ {\n     ty_obj(vec[ty_method]);\n     ty_path(path, option.t[def]);\n     ty_mutable(@ty);\n+    ty_type;\n }\n \n type arg = rec(mode mode, @ty ty, ident ident, def_id id);"}, {"sha": "2926b78c50897036dd017f9d4421308c113dc133", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "patch": "@@ -471,6 +471,7 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t) -> TypeRef {\n         case (ty.ty_param(_)) {\n             ret T_typaram_ptr();\n         }\n+        case (ty.ty_type) { ret T_ptr(T_tydesc()); }\n     }\n     fail;\n }"}, {"sha": "b840be91384f132ec000e4c4997d8ea15bcfc028", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef22972dbe50b2e05c8983769a638fd5b6a23b5/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8ef22972dbe50b2e05c8983769a638fd5b6a23b5", "patch": "@@ -42,6 +42,7 @@ tag sty {\n     ty_var(int);                                    // ephemeral type var\n     ty_local(ast.def_id);                           // type of a local var\n     ty_param(ast.def_id);                           // fn type param\n+    ty_type;\n     // TODO: ty_fn_arg(@t), for a possibly-aliased function argument\n }\n \n@@ -103,6 +104,7 @@ fn ast_ty_to_str(&@ast.ty ty) -> str {\n         case (ast.ty_str)          { s = \"str\";                           }\n         case (ast.ty_box(?t))      { s = \"@\" + ast_ty_to_str(t);          }\n         case (ast.ty_vec(?t))      { s = \"vec[\" + ast_ty_to_str(t) + \"]\"; }\n+        case (ast.ty_type)         { s = \"type\";                          }\n \n         case (ast.ty_tup(?elts)) {\n             auto f = ast_ty_to_str;\n@@ -138,6 +140,7 @@ fn ast_ty_to_str(&@ast.ty ty) -> str {\n             s = \"mutable \" + ast_ty_to_str(t);\n         }\n \n+\n         case (_) {\n             fail;   // FIXME: typestate bug\n         }\n@@ -215,6 +218,7 @@ fn ty_to_str(&@t typ) -> str {\n         case (ty_str)          { s = \"str\";                       }\n         case (ty_box(?t))      { s = \"@\" + ty_to_str(t);          }\n         case (ty_vec(?t))      { s = \"vec[\" + ty_to_str(t) + \"]\"; }\n+        case (ty_type)         { s = \"type\";                      }\n \n         case (ty_tup(?elems)) {\n             auto f = ty_to_str;\n@@ -281,6 +285,7 @@ fn fold_ty(ty_fold fld, @t ty) -> @t {\n         case (ty_char)          { ret fld.fold_simple_ty(ty); }\n         case (ty_str)           { ret fld.fold_simple_ty(ty); }\n         case (ty_tag(_))        { ret fld.fold_simple_ty(ty); }\n+        case (ty_type)          { ret fld.fold_simple_ty(ty); }\n         case (ty_box(?subty)) {\n             ret rewrap(ty, ty_box(fold_ty(fld, subty)));\n         }\n@@ -363,6 +368,7 @@ fn type_is_structural(@t ty) -> bool {\n \n fn type_is_tup_like(@t ty) -> bool {\n     alt (ty.struct) {\n+        case (ty_box(_)) { ret true; }\n         case (ty_tup(_)) { ret true; }\n         case (ty_rec(_)) { ret true; }\n         case (ty_tag(_)) { ret true; }\n@@ -402,6 +408,7 @@ fn type_is_scalar(@t ty) -> bool {\n         case (ty_uint) { ret true; }\n         case (ty_machine(_)) { ret true; }\n         case (ty_char) { ret true; }\n+        case (ty_type) { ret true; }\n         case (_) { ret false; }\n     }\n     fail;\n@@ -939,6 +946,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n             case (ty.ty_machine(_)) { ret struct_cmp(expected, actual); }\n             case (ty.ty_char)       { ret struct_cmp(expected, actual); }\n             case (ty.ty_str)        { ret struct_cmp(expected, actual); }\n+            case (ty.ty_type)       { ret struct_cmp(expected, actual); }\n \n             case (ty.ty_tag(?expected_id)) {\n                 alt (actual.struct) {"}]}