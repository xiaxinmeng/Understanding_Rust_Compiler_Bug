{"sha": "1a2122fff015d1d7fb31fe3a55e49027d67d79af", "node_id": "C_kwDOAAsO6NoAKDFhMjEyMmZmZjAxNWQxZDdmYjMxZmUzYTU1ZTQ5MDI3ZDY3ZDc5YWY", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-07T07:43:54Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-08-05T16:18:51Z"}, "message": "non-linux platforms\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "374f8a15ec2b3e0c8a61f25bebdb5122c265041e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374f8a15ec2b3e0c8a61f25bebdb5122c265041e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2122fff015d1d7fb31fe3a55e49027d67d79af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2122fff015d1d7fb31fe3a55e49027d67d79af", "html_url": "https://github.com/rust-lang/rust/commit/1a2122fff015d1d7fb31fe3a55e49027d67d79af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2122fff015d1d7fb31fe3a55e49027d67d79af/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56cf67ce14580111ffb07a08a293e217566e116", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56cf67ce14580111ffb07a08a293e217566e116", "html_url": "https://github.com/rust-lang/rust/commit/b56cf67ce14580111ffb07a08a293e217566e116"}], "stats": {"total": 345, "additions": 205, "deletions": 140}, "files": [{"sha": "98aa40db321760f2d7f4892fd71664350c834430", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -13,7 +13,7 @@ mod tests;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, BorrowCursor, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n use crate::path::{Path, PathBuf};\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n@@ -703,7 +703,7 @@ impl Read for File {\n         self.inner.read_vectored(bufs)\n     }\n \n-    fn read_buf(&mut self, cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         self.inner.read_buf(cursor)\n     }\n \n@@ -755,7 +755,7 @@ impl Read for &File {\n         self.inner.read(buf)\n     }\n \n-    fn read_buf(&mut self, cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         self.inner.read_buf(cursor)\n     }\n "}, {"sha": "dced922ea572ef6fb00a975fbee968bece142a28", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -2,8 +2,7 @@ mod buffer;\n \n use crate::fmt;\n use crate::io::{\n-    self, BorrowBuf, BorrowCursor, BufRead, IoSliceMut, Read, Seek, SeekFrom, SizeHint,\n-    DEFAULT_BUF_SIZE,\n+    self, BorrowedCursor, BufRead, IoSliceMut, Read, Seek, SeekFrom, SizeHint, DEFAULT_BUF_SIZE,\n };\n use buffer::Buffer;\n \n@@ -267,7 +266,7 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n-    fn read_buf(&mut self, mut cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         // If we don't have any buffered data and we're doing a massive read\n         // (larger than our internal buffer), bypass our internal buffer\n         // entirely."}, {"sha": "b122a6c0ccc57a11a4f85011414a541c2c5d24d8", "filename": "library/std/src/io/buffered/bufreader/buffer.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -9,7 +9,7 @@\n /// that user code which wants to do reads from a `BufReader` via `buffer` + `consume` can do so\n /// without encountering any runtime bounds checks.\n use crate::cmp;\n-use crate::io::{self, Read, ReadBuf};\n+use crate::io::{self, BorrowedBuf, Read};\n use crate::mem::MaybeUninit;\n \n pub struct Buffer {\n@@ -93,11 +93,15 @@ impl Buffer {\n         if self.pos >= self.filled {\n             debug_assert!(self.pos == self.filled);\n \n-            let mut readbuf = ReadBuf::uninit(&mut self.buf);\n+            let mut buf: BorrowedBuf<'_> = (&mut *self.buf).into();\n+            // SAFETY: `self.filled` bytes will always have been initialized.\n+            unsafe {\n+                buf.set_init(self.filled);\n+            }\n \n-            reader.read_buf(&mut readbuf)?;\n+            reader.read_buf(buf.unfilled())?;\n \n-            self.filled = readbuf.filled_len();\n+            self.filled = buf.len();\n             self.pos = 0;\n         }\n         Ok(self.buffer())"}, {"sha": "bd6d95242ad94e4b04bfda9951c624da84a2ef23", "filename": "library/std/src/io/buffered/tests.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -1,5 +1,7 @@\n use crate::io::prelude::*;\n-use crate::io::{self, BorrowBuf, BufReader, BufWriter, ErrorKind, IoSlice, LineWriter, SeekFrom};\n+use crate::io::{\n+    self, BorrowedBuf, BufReader, BufWriter, ErrorKind, IoSlice, LineWriter, SeekFrom,\n+};\n use crate::mem::MaybeUninit;\n use crate::panic;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n@@ -62,31 +64,31 @@ fn test_buffered_reader_read_buf() {\n     let mut reader = BufReader::with_capacity(2, inner);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 3];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n \n     reader.read_buf(buf.unfilled()).unwrap();\n \n     assert_eq!(buf.filled(), [5, 6, 7]);\n     assert_eq!(reader.buffer(), []);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 2];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n \n     reader.read_buf(buf.unfilled()).unwrap();\n \n     assert_eq!(buf.filled(), [0, 1]);\n     assert_eq!(reader.buffer(), []);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 1];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n \n     reader.read_buf(buf.unfilled()).unwrap();\n \n     assert_eq!(buf.filled(), [2]);\n     assert_eq!(reader.buffer(), [3]);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 3];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n \n     reader.read_buf(buf.unfilled()).unwrap();\n "}, {"sha": "1efd98b92aa00c971b3cf42c79e21d504e7543cf", "filename": "library/std/src/io/copy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -1,4 +1,4 @@\n-use super::{BorrowBuf, BufWriter, ErrorKind, Read, Result, Write, DEFAULT_BUF_SIZE};\n+use super::{BorrowedBuf, BufWriter, ErrorKind, Read, Result, Write, DEFAULT_BUF_SIZE};\n use crate::mem::MaybeUninit;\n \n /// Copies the entire contents of a reader into a writer.\n@@ -97,7 +97,7 @@ impl<I: Write> BufferedCopySpec for BufWriter<I> {\n \n         loop {\n             let buf = writer.buffer_mut();\n-            let mut read_buf: BorrowBuf<'_> = buf.spare_capacity_mut().into();\n+            let mut read_buf: BorrowedBuf<'_> = buf.spare_capacity_mut().into();\n \n             unsafe {\n                 // SAFETY: init is either 0 or the init_len from the previous iteration.\n@@ -117,7 +117,7 @@ impl<I: Write> BufferedCopySpec for BufWriter<I> {\n                         init = read_buf.init_len() - bytes_read;\n                         len += bytes_read as u64;\n \n-                        // SAFETY: BorrowBuf guarantees all of its filled bytes are init\n+                        // SAFETY: BorrowedBuf guarantees all of its filled bytes are init\n                         unsafe { buf.set_len(buf.len() + bytes_read) };\n \n                         // Read again if the buffer still has enough capacity, as BufWriter itself would do\n@@ -139,7 +139,7 @@ fn stack_buffer_copy<R: Read + ?Sized, W: Write + ?Sized>(\n     writer: &mut W,\n ) -> Result<u64> {\n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); DEFAULT_BUF_SIZE];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n \n     let mut len = 0;\n "}, {"sha": "e00577b51073ed3ce0cd5b5051f6104826f04db7", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -5,7 +5,7 @@ use crate::io::prelude::*;\n \n use crate::alloc::Allocator;\n use crate::cmp;\n-use crate::io::{self, BorrowCursor, ErrorKind, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, BorrowedCursor, ErrorKind, IoSlice, IoSliceMut, SeekFrom};\n \n /// A `Cursor` wraps an in-memory buffer and provides it with a\n /// [`Seek`] implementation.\n@@ -323,7 +323,7 @@ where\n         Ok(n)\n     }\n \n-    fn read_buf(&mut self, mut cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         let prev_written = cursor.written();\n \n         Read::read_buf(&mut self.fill_buf()?, cursor.clone())?;"}, {"sha": "183c8c660b490c81f9ea63ecf75673164bfb3cdd", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -6,7 +6,7 @@ use crate::cmp;\n use crate::collections::VecDeque;\n use crate::fmt;\n use crate::io::{\n-    self, BorrowCursor, BufRead, ErrorKind, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write,\n+    self, BorrowedCursor, BufRead, ErrorKind, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write,\n };\n use crate::mem;\n \n@@ -21,7 +21,7 @@ impl<R: Read + ?Sized> Read for &mut R {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         (**self).read_buf(cursor)\n     }\n \n@@ -125,7 +125,7 @@ impl<R: Read + ?Sized> Read for Box<R> {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         (**self).read_buf(cursor)\n     }\n \n@@ -249,7 +249,7 @@ impl Read for &[u8] {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, mut cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         let amt = cmp::min(cursor.capacity(), self.len());\n         let (a, b) = self.split_at(amt);\n \n@@ -427,10 +427,10 @@ impl<A: Allocator> Read for VecDeque<u8, A> {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+    fn read_buf(&mut self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         let (ref mut front, _) = self.as_slices();\n-        let n = cmp::min(buf.remaining(), front.len());\n-        Read::read_buf(front, buf)?;\n+        let n = cmp::min(cursor.capacity(), front.len());\n+        Read::read_buf(front, cursor)?;\n         self.drain(..n);\n         Ok(())\n     }"}, {"sha": "02f82a7e9957a925a89a22622fd6388b5b1dc647", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -278,7 +278,7 @@ pub use self::{\n };\n \n #[unstable(feature = \"read_buf\", issue = \"78485\")]\n-pub use self::readbuf::{BorrowBuf, BorrowCursor};\n+pub use self::readbuf::{BorrowedBuf, BorrowedCursor};\n pub(crate) use error::const_io_error;\n \n mod buffered;\n@@ -362,7 +362,7 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n             buf.reserve(32); // buf is full, need more space\n         }\n \n-        let mut read_buf: BorrowBuf<'_> = buf.spare_capacity_mut().into();\n+        let mut read_buf: BorrowedBuf<'_> = buf.spare_capacity_mut().into();\n \n         // SAFETY: These bytes were initialized but not filled in the previous loop\n         unsafe {\n@@ -383,7 +383,7 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n         // store how much was initialized but not filled\n         initialized = cursor.init_ref().len();\n \n-        // SAFETY: BorrowBuf's invariants mean this much memory is initialized.\n+        // SAFETY: BorrowedBuf's invariants mean this much memory is initialized.\n         unsafe {\n             let new_len = read_buf.filled().len() + buf.len();\n             buf.set_len(new_len);\n@@ -462,7 +462,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n     }\n }\n \n-pub(crate) fn default_read_buf<F>(read: F, mut cursor: BorrowCursor<'_, '_>) -> Result<()>\n+pub(crate) fn default_read_buf<F>(read: F, mut cursor: BorrowedCursor<'_, '_>) -> Result<()>\n where\n     F: FnOnce(&mut [u8]) -> Result<usize>,\n {\n@@ -805,24 +805,23 @@ pub trait Read {\n         default_read_exact(self, buf)\n     }\n \n-    // TODO naming, if should the method be read_cursor? Or should we change the names of the data structures?\n     /// Pull some bytes from this source into the specified buffer.\n     ///\n-    /// This is equivalent to the [`read`](Read::read) method, except that it is passed a [`BorrowCursor`] rather than `[u8]` to allow use\n+    /// This is equivalent to the [`read`](Read::read) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to allow use\n     /// with uninitialized buffers. The new data will be appended to any existing contents of `buf`.\n     ///\n     /// The default implementation delegates to `read`.\n     #[unstable(feature = \"read_buf\", issue = \"78485\")]\n-    fn read_buf(&mut self, buf: BorrowCursor<'_, '_>) -> Result<()> {\n+    fn read_buf(&mut self, buf: BorrowedCursor<'_, '_>) -> Result<()> {\n         default_read_buf(|b| self.read(b), buf)\n     }\n \n     /// Read the exact number of bytes required to fill `cursor`.\n     ///\n-    /// This is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`BorrowCursor`] rather than `[u8]` to\n+    /// This is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to\n     /// allow use with uninitialized buffers.\n     #[unstable(feature = \"read_buf\", issue = \"78485\")]\n-    fn read_buf_exact(&mut self, mut cursor: BorrowCursor<'_, '_>) -> Result<()> {\n+    fn read_buf_exact(&mut self, mut cursor: BorrowedCursor<'_, '_>) -> Result<()> {\n         while cursor.capacity() > 0 {\n             let prev_written = cursor.written();\n             match self.read_buf(cursor.clone()) {\n@@ -2587,7 +2586,7 @@ impl<T: Read> Read for Take<T> {\n         Ok(n)\n     }\n \n-    fn read_buf(&mut self, mut buf: BorrowCursor<'_, '_>) -> Result<()> {\n+    fn read_buf(&mut self, mut buf: BorrowedCursor<'_, '_>) -> Result<()> {\n         // Don't call into inner reader at all at EOF because it may still block\n         if self.limit == 0 {\n             return Ok(());\n@@ -2602,7 +2601,7 @@ impl<T: Read> Read for Take<T> {\n             // SAFETY: no uninit data is written to ibuf\n             let ibuf = unsafe { &mut buf.as_mut()[..limit] };\n \n-            let mut sliced_buf: BorrowBuf<'_> = ibuf.into();\n+            let mut sliced_buf: BorrowedBuf<'_> = ibuf.into();\n \n             // SAFETY: extra_init bytes of ibuf are known to be initialized\n             unsafe {"}, {"sha": "ae3fbcc6a2f1427f2c5ff046f96495a4ada0ccca", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 57, "deletions": 50, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -5,6 +5,7 @@ mod tests;\n \n use crate::cmp;\n use crate::fmt::{self, Debug, Formatter};\n+use crate::io::{Result, Write};\n use crate::mem::MaybeUninit;\n \n /// A borrowed byte buffer which is incrementally filled and initialized.\n@@ -21,58 +22,58 @@ use crate::mem::MaybeUninit;\n /// [    initialized    | uninitialized ]\n /// ```\n ///\n-/// A `BorrowBuf` is created around some existing data (or capacity for data) via a unique reference\n-/// (`&mut`). The `BorrowBuf` can be configured (e.g., using `clear` or `set_init`), but otherwise\n-/// is read-only. To write into the buffer, use `unfilled` to create a `BorrowCursor`. The cursor\n+/// A `BorrowedBuf` is created around some existing data (or capacity for data) via a unique reference\n+/// (`&mut`). The `BorrowedBuf` can be configured (e.g., using `clear` or `set_init`), but otherwise\n+/// is read-only. To write into the buffer, use `unfilled` to create a `BorrowedCursor`. The cursor\n /// has write-only access to the unfilled portion of the buffer (you can think of it like a\n /// write-only iterator).\n ///\n-/// The lifetime `'a` is a bound on the lifetime of the underlying data.\n-pub struct BorrowBuf<'a> {\n+/// The lifetime `'data` is a bound on the lifetime of the underlying data.\n+pub struct BorrowedBuf<'data> {\n     /// The buffer's underlying data.\n-    buf: &'a mut [MaybeUninit<u8>],\n+    buf: &'data mut [MaybeUninit<u8>],\n     /// The length of `self.buf` which is known to be filled.\n     filled: usize,\n     /// The length of `self.buf` which is known to be initialized.\n-    initialized: usize,\n+    init: usize,\n }\n \n-impl Debug for BorrowBuf<'_> {\n+impl Debug for BorrowedBuf<'_> {\n     fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"ReadBuf\")\n-            .field(\"init\", &self.initialized)\n+        f.debug_struct(\"BorrowedBuf\")\n+            .field(\"init\", &self.init)\n             .field(\"filled\", &self.filled)\n             .field(\"capacity\", &self.capacity())\n             .finish()\n     }\n }\n \n-/// Create a new `BorrowBuf` from a fully initialized slice.\n-impl<'a> From<&'a mut [u8]> for BorrowBuf<'a> {\n+/// Create a new `BorrowedBuf` from a fully initialized slice.\n+impl<'data> From<&'data mut [u8]> for BorrowedBuf<'data> {\n     #[inline]\n-    fn from(slice: &'a mut [u8]) -> BorrowBuf<'a> {\n+    fn from(slice: &'data mut [u8]) -> BorrowedBuf<'data> {\n         let len = slice.len();\n \n-        BorrowBuf {\n-            //SAFETY: initialized data never becoming uninitialized is an invariant of BorrowBuf\n+        BorrowedBuf {\n+            //SAFETY: initialized data never becoming uninitialized is an invariant of BorrowedBuf\n             buf: unsafe { (slice as *mut [u8]).as_uninit_slice_mut().unwrap() },\n             filled: 0,\n-            initialized: len,\n+            init: len,\n         }\n     }\n }\n \n-/// Create a new `BorrowBuf` from an uninitialized buffer.\n+/// Create a new `BorrowedBuf` from an uninitialized buffer.\n ///\n /// Use `set_init` if part of the buffer is known to be already initialized.\n-impl<'a> From<&'a mut [MaybeUninit<u8>]> for BorrowBuf<'a> {\n+impl<'data> From<&'data mut [MaybeUninit<u8>]> for BorrowedBuf<'data> {\n     #[inline]\n-    fn from(buf: &'a mut [MaybeUninit<u8>]) -> BorrowBuf<'a> {\n-        BorrowBuf { buf, filled: 0, initialized: 0 }\n+    fn from(buf: &'data mut [MaybeUninit<u8>]) -> BorrowedBuf<'data> {\n+        BorrowedBuf { buf, filled: 0, init: 0 }\n     }\n }\n \n-impl<'a> BorrowBuf<'a> {\n+impl<'data> BorrowedBuf<'data> {\n     /// Returns the total capacity of the buffer.\n     #[inline]\n     pub fn capacity(&self) -> usize {\n@@ -88,7 +89,7 @@ impl<'a> BorrowBuf<'a> {\n     /// Returns the length of the initialized part of the buffer.\n     #[inline]\n     pub fn init_len(&self) -> usize {\n-        self.initialized\n+        self.init\n     }\n \n     /// Returns a shared reference to the filled portion of the buffer.\n@@ -100,8 +101,8 @@ impl<'a> BorrowBuf<'a> {\n \n     /// Returns a cursor over the unfilled part of the buffer.\n     #[inline]\n-    pub fn unfilled<'this>(&'this mut self) -> BorrowCursor<'this, 'a> {\n-        BorrowCursor { start: self.filled, buf: self }\n+    pub fn unfilled<'this>(&'this mut self) -> BorrowedCursor<'this, 'data> {\n+        BorrowedCursor { start: self.filled, buf: self }\n     }\n \n     /// Clears the buffer, resetting the filled region to empty.\n@@ -115,50 +116,50 @@ impl<'a> BorrowBuf<'a> {\n \n     /// Asserts that the first `n` bytes of the buffer are initialized.\n     ///\n-    /// `BorrowBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\n+    /// `BorrowedBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\n     /// bytes than are already known to be initialized.\n     ///\n     /// # Safety\n     ///\n     /// The caller must ensure that the first `n` unfilled bytes of the buffer have already been initialized.\n     #[inline]\n     pub unsafe fn set_init(&mut self, n: usize) -> &mut Self {\n-        self.initialized = cmp::max(self.initialized, n);\n+        self.init = cmp::max(self.init, n);\n         self\n     }\n }\n \n-/// A writeable view of the unfilled portion of a [`BorrowBuf`](BorrowBuf).\n+/// A writeable view of the unfilled portion of a [`BorrowedBuf`](BorrowedBuf).\n ///\n-/// Provides access to the initialized and uninitialized parts of the underlying `BorrowBuf`.\n-/// Data can be written directly to the cursor by using [`append`](BorrowCursor::append) or\n+/// Provides access to the initialized and uninitialized parts of the underlying `BorrowedBuf`.\n+/// Data can be written directly to the cursor by using [`append`](BorrowedCursor::append) or\n /// indirectly by getting a slice of part or all of the cursor and writing into the slice. In the\n-/// indirect case, the caller must call [`advance`](BorrowCursor::advance) after writing to inform\n+/// indirect case, the caller must call [`advance`](BorrowedCursor::advance) after writing to inform\n /// the cursor how many bytes have been written.\n ///\n /// Once data is written to the cursor, it becomes part of the filled portion of the underlying\n-/// `BorrowBuf` and can no longer be accessed or re-written by the cursor. I.e., the cursor tracks\n-/// the unfilled part of the underlying `BorrowBuf`.\n+/// `BorrowedBuf` and can no longer be accessed or re-written by the cursor. I.e., the cursor tracks\n+/// the unfilled part of the underlying `BorrowedBuf`.\n ///\n /// The `'buf` lifetime is a bound on the lifetime of the underlying buffer. `'data` is a bound on\n /// that buffer's underlying data.\n #[derive(Debug)]\n-pub struct BorrowCursor<'buf, 'data> {\n+pub struct BorrowedCursor<'buf, 'data> {\n     /// The underlying buffer.\n-    buf: &'buf mut BorrowBuf<'data>,\n+    buf: &'buf mut BorrowedBuf<'data>,\n     /// The length of the filled portion of the underlying buffer at the time of the cursor's\n     /// creation.\n     start: usize,\n }\n \n-impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n+impl<'buf, 'data> BorrowedCursor<'buf, 'data> {\n     /// Clone this cursor.\n     ///\n     /// Since a cursor maintains unique access to its underlying buffer, the cloned cursor is not\n     /// accessible while the clone is alive.\n     #[inline]\n-    pub fn clone<'this>(&'this mut self) -> BorrowCursor<'this, 'data> {\n-        BorrowCursor { buf: self.buf, start: self.start }\n+    pub fn clone<'this>(&'this mut self) -> BorrowedCursor<'this, 'data> {\n+        BorrowedCursor { buf: self.buf, start: self.start }\n     }\n \n     /// Returns the available space in the cursor.\n@@ -167,7 +168,7 @@ impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n         self.buf.capacity() - self.buf.filled\n     }\n \n-    /// Returns the number of bytes written to this cursor since it was created from a `BorrowBuf`.\n+    /// Returns the number of bytes written to this cursor since it was created from a `BorrowedBuf`.\n     ///\n     /// Note that if this cursor is a clone of another, then the count returned is the count written\n     /// via either cursor, not the count since the cursor was cloned.\n@@ -180,19 +181,15 @@ impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n     #[inline]\n     pub fn init_ref(&self) -> &[u8] {\n         //SAFETY: We only slice the initialized part of the buffer, which is always valid\n-        unsafe {\n-            MaybeUninit::slice_assume_init_ref(&self.buf.buf[self.buf.filled..self.buf.initialized])\n-        }\n+        unsafe { MaybeUninit::slice_assume_init_ref(&self.buf.buf[self.buf.filled..self.buf.init]) }\n     }\n \n     /// Returns a mutable reference to the initialized portion of the cursor.\n     #[inline]\n     pub fn init_mut(&mut self) -> &mut [u8] {\n         //SAFETY: We only slice the initialized part of the buffer, which is always valid\n         unsafe {\n-            MaybeUninit::slice_assume_init_mut(\n-                &mut self.buf.buf[self.buf.filled..self.buf.initialized],\n-            )\n+            MaybeUninit::slice_assume_init_mut(&mut self.buf.buf[self.buf.filled..self.buf.init])\n         }\n     }\n \n@@ -201,7 +198,7 @@ impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n     /// It is safe to uninitialize any of these bytes.\n     #[inline]\n     pub fn uninit_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n-        &mut self.buf.buf[self.buf.initialized..]\n+        &mut self.buf.buf[self.buf.init..]\n     }\n \n     /// Returns a mutable reference to the whole cursor.\n@@ -227,7 +224,7 @@ impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n     #[inline]\n     pub unsafe fn advance(&mut self, n: usize) -> &mut Self {\n         self.buf.filled += n;\n-        self.buf.initialized = cmp::max(self.buf.initialized, self.buf.filled);\n+        self.buf.init = cmp::max(self.buf.init, self.buf.filled);\n         self\n     }\n \n@@ -237,22 +234,22 @@ impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n         for byte in self.uninit_mut() {\n             byte.write(0);\n         }\n-        self.buf.initialized = self.buf.capacity();\n+        self.buf.init = self.buf.capacity();\n \n         self\n     }\n \n     /// Asserts that the first `n` unfilled bytes of the cursor are initialized.\n     ///\n-    /// `BorrowBuf` assumes that bytes are never de-initialized, so this method does nothing when\n+    /// `BorrowedBuf` assumes that bytes are never de-initialized, so this method does nothing when\n     /// called with fewer bytes than are already known to be initialized.\n     ///\n     /// # Safety\n     ///\n     /// The caller must ensure that the first `n` bytes of the buffer have already been initialized.\n     #[inline]\n     pub unsafe fn set_init(&mut self, n: usize) -> &mut Self {\n-        self.buf.initialized = cmp::max(self.buf.initialized, self.buf.filled + n);\n+        self.buf.init = cmp::max(self.buf.init, self.buf.filled + n);\n         self\n     }\n \n@@ -272,9 +269,19 @@ impl<'buf, 'data> BorrowCursor<'buf, 'data> {\n \n         // SAFETY: We just added the entire contents of buf to the filled section.\n         unsafe {\n-\n             self.set_init(buf.len());\n         }\n         self.buf.filled += buf.len();\n     }\n }\n+\n+impl<'buf, 'data> Write for BorrowedCursor<'buf, 'data> {\n+    fn write(&mut self, buf: &[u8]) -> Result<usize> {\n+        self.append(buf);\n+        Ok(buf.len())\n+    }\n+\n+    fn flush(&mut self) -> Result<()> {\n+        Ok(())\n+    }\n+}"}, {"sha": "8037a95790899061c2b7fc315f330ee8add19c37", "filename": "library/std/src/io/readbuf/tests.rs", "status": "modified", "additions": 69, "deletions": 11, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -1,23 +1,23 @@\n-use super::BorrowBuf;\n+use super::BorrowedBuf;\n use crate::mem::MaybeUninit;\n \n-/// Test that BorrowBuf has the correct numbers when created with new\n+/// Test that BorrowedBuf has the correct numbers when created with new\n #[test]\n fn new() {\n     let buf: &mut [_] = &mut [0; 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     assert_eq!(rbuf.filled().len(), 0);\n     assert_eq!(rbuf.init_len(), 16);\n     assert_eq!(rbuf.capacity(), 16);\n     assert_eq!(rbuf.unfilled().capacity(), 16);\n }\n \n-/// Test that BorrowBuf has the correct numbers when created with uninit\n+/// Test that BorrowedBuf has the correct numbers when created with uninit\n #[test]\n fn uninit() {\n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     assert_eq!(rbuf.filled().len(), 0);\n     assert_eq!(rbuf.init_len(), 0);\n@@ -28,17 +28,17 @@ fn uninit() {\n #[test]\n fn initialize_unfilled() {\n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     rbuf.unfilled().ensure_init();\n \n     assert_eq!(rbuf.init_len(), 16);\n }\n \n #[test]\n-fn add_filled() {\n+fn addvance_filled() {\n     let buf: &mut [_] = &mut [0; 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     unsafe {\n         rbuf.unfilled().advance(1);\n@@ -51,7 +51,7 @@ fn add_filled() {\n #[test]\n fn clear() {\n     let buf: &mut [_] = &mut [255; 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     unsafe {\n         rbuf.unfilled().advance(16);\n@@ -71,7 +71,7 @@ fn clear() {\n #[test]\n fn set_init() {\n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     unsafe {\n         rbuf.set_init(8);\n@@ -99,7 +99,7 @@ fn set_init() {\n #[test]\n fn append() {\n     let buf: &mut [_] = &mut [MaybeUninit::new(255); 16];\n-    let mut rbuf: BorrowBuf<'_> = buf.into();\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n \n     rbuf.unfilled().append(&[0; 8]);\n \n@@ -115,3 +115,61 @@ fn append() {\n     assert_eq!(rbuf.filled().len(), 16);\n     assert_eq!(rbuf.filled(), [1; 16]);\n }\n+\n+#[test]\n+fn clone_written() {\n+    let buf: &mut [_] = &mut [MaybeUninit::new(0); 32];\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n+\n+    let mut cursor = buf.unfilled();\n+    cursor.append(&[1; 16]);\n+\n+    let mut cursor2 = cursor.clone();\n+    cursor2.append(&[2; 16]);\n+\n+    assert_eq!(cursor2.written(), 32);\n+    assert_eq!(cursor.written(), 32);\n+\n+    assert_eq!(buf.unfilled().written(), 0);\n+    assert_eq!(buf.init_len(), 32);\n+    assert_eq!(buf.filled().len(), 32);\n+    let filled = buf.filled();\n+    assert_eq!(&filled[..16], [1; 16]);\n+    assert_eq!(&filled[16..], [2; 16]);\n+}\n+\n+#[test]\n+fn cursor_set_init() {\n+    let buf: &mut [_] = &mut [MaybeUninit::uninit(); 16];\n+    let mut rbuf: BorrowedBuf<'_> = buf.into();\n+\n+    unsafe {\n+        rbuf.unfilled().set_init(8);\n+    }\n+\n+    assert_eq!(rbuf.init_len(), 8);\n+    assert_eq!(rbuf.unfilled().init_ref().len(), 8);\n+    assert_eq!(rbuf.unfilled().init_mut().len(), 8);\n+    assert_eq!(rbuf.unfilled().uninit_mut().len(), 8);\n+    assert_eq!(unsafe { rbuf.unfilled().as_mut() }.len(), 16);\n+\n+    unsafe {\n+        rbuf.unfilled().advance(4);\n+    }\n+\n+    unsafe {\n+        rbuf.unfilled().set_init(2);\n+    }\n+\n+    assert_eq!(rbuf.init_len(), 8);\n+\n+    unsafe {\n+        rbuf.unfilled().set_init(8);\n+    }\n+\n+    assert_eq!(rbuf.init_len(), 12);\n+    assert_eq!(rbuf.unfilled().init_ref().len(), 8);\n+    assert_eq!(rbuf.unfilled().init_mut().len(), 8);\n+    assert_eq!(rbuf.unfilled().uninit_mut().len(), 4);\n+    assert_eq!(unsafe { rbuf.unfilled().as_mut() }.len(), 12);\n+}"}, {"sha": "c5c476ec3bfee90e86e5f87c1c9a0f2ec67a536b", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -1,4 +1,4 @@\n-use super::{repeat, BorrowBuf, Cursor, SeekFrom};\n+use super::{repeat, BorrowedBuf, Cursor, SeekFrom};\n use crate::cmp::{self, min};\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::io::{BufRead, BufReader, Read, Seek, Write};\n@@ -160,7 +160,7 @@ fn read_exact_slice() {\n #[test]\n fn read_buf_exact() {\n     let buf: &mut [_] = &mut [0; 4];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n \n     let mut c = Cursor::new(&b\"\"[..]);\n     assert_eq!(c.read_buf_exact(buf.unfilled()).unwrap_err().kind(), io::ErrorKind::UnexpectedEof);\n@@ -616,7 +616,7 @@ fn bench_take_read_buf(b: &mut test::Bencher) {\n     b.iter(|| {\n         let buf: &mut [_] = &mut [MaybeUninit::uninit(); 64];\n \n-        let mut buf: BorrowBuf<'_> = buf.into();\n+        let mut buf: BorrowedBuf<'_> = buf.into();\n \n         [255; 128].take(64).read_buf(buf.unfilled()).unwrap();\n     });"}, {"sha": "7475d71119a760e3643f61eea01e70daaf7a683c", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -5,7 +5,7 @@ mod tests;\n \n use crate::fmt;\n use crate::io::{\n-    self, BorrowCursor, BufRead, IoSlice, IoSliceMut, Read, Seek, SeekFrom, SizeHint, Write,\n+    self, BorrowedCursor, BufRead, IoSlice, IoSliceMut, Read, Seek, SeekFrom, SizeHint, Write,\n };\n \n /// A reader which is always at EOF.\n@@ -47,7 +47,7 @@ impl Read for Empty {\n     }\n \n     #[inline]\n-    fn read_buf(&mut self, _cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, _cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -130,7 +130,7 @@ impl Read for Repeat {\n         Ok(buf.len())\n     }\n \n-    fn read_buf(&mut self, mut buf: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    fn read_buf(&mut self, mut buf: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         // SAFETY: No uninit bytes are being written\n         for slot in unsafe { buf.as_mut() } {\n             slot.write(self.byte);"}, {"sha": "ce5e2c9da1dbf15694197e6fc161152a52a92f16", "filename": "library/std/src/io/util/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -1,7 +1,7 @@\n use crate::cmp::{max, min};\n use crate::io::prelude::*;\n use crate::io::{\n-    copy, empty, repeat, sink, BorrowBuf, BufWriter, Empty, Repeat, Result, SeekFrom, Sink,\n+    copy, empty, repeat, sink, BorrowedBuf, BufWriter, Empty, Repeat, Result, SeekFrom, Sink,\n     DEFAULT_BUF_SIZE,\n };\n \n@@ -80,25 +80,25 @@ fn empty_reads() {\n     assert_eq!(e.by_ref().read(&mut [0; 1024]).unwrap(), 0);\n \n     let buf: &mut [MaybeUninit<_>] = &mut [];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n     e.read_buf(buf.unfilled()).unwrap();\n     assert_eq!(buf.len(), 0);\n     assert_eq!(buf.init_len(), 0);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit()];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n     e.read_buf(buf.unfilled()).unwrap();\n     assert_eq!(buf.len(), 0);\n     assert_eq!(buf.init_len(), 0);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 1024];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n     e.read_buf(buf.unfilled()).unwrap();\n     assert_eq!(buf.len(), 0);\n     assert_eq!(buf.init_len(), 0);\n \n     let buf: &mut [_] = &mut [MaybeUninit::uninit(); 1024];\n-    let mut buf: BorrowBuf<'_> = buf.into();\n+    let mut buf: BorrowedBuf<'_> = buf.into();\n     e.by_ref().read_buf(buf.unfilled()).unwrap();\n     assert_eq!(buf.len(), 0);\n     assert_eq!(buf.init_len(), 0);"}, {"sha": "51321c51972acf4f71780325eb42d8207a0c9df0", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::{CStr, CString, OsString};\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::io::{self, Error, ErrorKind};\n-use crate::io::{IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n+use crate::io::{BorrowedCursor, IoSlice, IoSliceMut, SeekFrom};\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n use crate::sys::cvt;\n@@ -312,8 +312,8 @@ impl File {\n         false\n     }\n \n-    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n-        crate::io::default_read_buf(|buf| self.read(buf), buf)\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+        crate::io::default_read_buf(|buf| self.read(buf), cursor)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "0848d3d8f102d631ac1c08225500d11d16e1bd0a", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -2,7 +2,7 @@ use super::{abi, error};\n use crate::{\n     ffi::{CStr, CString, OsStr, OsString},\n     fmt,\n-    io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom},\n+    io::{self, BorrowedCursor, IoSlice, IoSliceMut, SeekFrom},\n     mem::MaybeUninit,\n     os::raw::{c_int, c_short},\n     os::solid::ffi::OsStrExt,\n@@ -358,13 +358,13 @@ impl File {\n         }\n     }\n \n-    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         unsafe {\n-            let len = buf.remaining();\n+            let len = cursor.capacity();\n             let mut out_num_bytes = MaybeUninit::uninit();\n             error::SolidError::err_if_negative(abi::SOLID_FS_Read(\n                 self.fd.raw(),\n-                buf.unfilled_mut().as_mut_ptr() as *mut u8,\n+                cursor.as_mut().as_mut_ptr() as *mut u8,\n                 len,\n                 out_num_bytes.as_mut_ptr(),\n             ))\n@@ -376,9 +376,7 @@ impl File {\n \n             // Safety: `num_bytes_read` bytes were written to the unfilled\n             // portion of the buffer\n-            buf.assume_init(num_bytes_read);\n-\n-            buf.add_filled(num_bytes_read);\n+            cursor.advance(num_bytes_read);\n \n             Ok(())\n         }"}, {"sha": "76a269bb9b59cf4f06b3ff1b1e08619b038cc271", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -4,7 +4,7 @@\n mod tests;\n \n use crate::cmp;\n-use crate::io::{self, BorrowCursor, IoSlice, IoSliceMut, Read};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, Read};\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n@@ -131,7 +131,7 @@ impl FileDesc {\n         }\n     }\n \n-    pub fn read_buf(&self, mut cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         let ret = cvt(unsafe {\n             libc::read(\n                 self.as_raw_fd(),"}, {"sha": "5056134544279d0fa2cecc131bfbdd549f2c43c5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n-use crate::io::{self, BorrowCursor, Error, IoSlice, IoSliceMut, SeekFrom};\n+use crate::io::{self, BorrowedCursor, Error, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd};\n use crate::path::{Path, PathBuf};\n@@ -1031,7 +1031,7 @@ impl File {\n         self.0.read_at(buf, offset)\n     }\n \n-    pub fn read_buf(&self, cursor: BorrowCursor<'_, '_>) -> io::Result<()> {\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         self.0.read_buf(cursor)\n     }\n "}, {"sha": "41e39ce27cec9644fc486ec3db0b0c26b5395942", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, SeekFrom};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n@@ -214,7 +214,7 @@ impl File {\n         self.0\n     }\n \n-    pub fn read_buf(&self, _buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+    pub fn read_buf(&self, _cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n         self.0\n     }\n "}, {"sha": "b5b5eab1a24ec982412a0f629b07891b091a58f9", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -3,7 +3,7 @@\n use super::fd::WasiFd;\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n+use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, SeekFrom};\n use crate::iter;\n use crate::mem::{self, ManuallyDrop};\n use crate::os::raw::c_int;\n@@ -439,8 +439,8 @@ impl File {\n         true\n     }\n \n-    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n-        crate::io::default_read_buf(|buf| self.read(buf), buf)\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+        crate::io::default_read_buf(|buf| self.read(buf), cursor)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "bfc2477dff46b9104bee230d7f4dc71017451048", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -2,7 +2,7 @@ use crate::os::windows::prelude::*;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, Error, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n+use crate::io::{self, BorrowedCursor, Error, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::os::windows::io::{AsHandle, BorrowedHandle};\n use crate::path::{Path, PathBuf};\n@@ -415,8 +415,8 @@ impl File {\n         self.handle.read_at(buf, offset)\n     }\n \n-    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n-        self.handle.read_buf(buf)\n+    pub fn read_buf(&self, cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+        self.handle.read_buf(cursor)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "0ea6876af5b931cc899cb9027a2a5701f136a7a9", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2122fff015d1d7fb31fe3a55e49027d67d79af/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=1a2122fff015d1d7fb31fe3a55e49027d67d79af", "patch": "@@ -4,7 +4,7 @@\n mod tests;\n \n use crate::cmp;\n-use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, Read, ReadBuf};\n+use crate::io::{self, BorrowedCursor, ErrorKind, IoSlice, IoSliceMut, Read};\n use crate::mem;\n use crate::os::windows::io::{\n     AsHandle, AsRawHandle, BorrowedHandle, FromRawHandle, IntoRawHandle, OwnedHandle, RawHandle,\n@@ -112,18 +112,16 @@ impl Handle {\n         }\n     }\n \n-    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n-        let res = unsafe {\n-            self.synchronous_read(buf.unfilled_mut().as_mut_ptr(), buf.remaining(), None)\n-        };\n+    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_, '_>) -> io::Result<()> {\n+        let res =\n+            unsafe { self.synchronous_read(cursor.as_mut().as_mut_ptr(), cursor.capacity(), None) };\n \n         match res {\n             Ok(read) => {\n                 // Safety: `read` bytes were written to the initialized portion of the buffer\n                 unsafe {\n-                    buf.assume_init(read as usize);\n+                    cursor.advance(read as usize);\n                 }\n-                buf.add_filled(read as usize);\n                 Ok(())\n             }\n "}]}