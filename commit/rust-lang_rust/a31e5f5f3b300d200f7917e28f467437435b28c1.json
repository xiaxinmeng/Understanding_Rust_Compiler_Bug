{"sha": "a31e5f5f3b300d200f7917e28f467437435b28c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMWU1ZjVmM2IzMDBkMjAwZjc5MTdlMjhmNDY3NDM3NDM1YjI4YzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-02-03T03:57:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-02-03T03:57:08Z"}, "message": "Run rustfmt", "tree": {"sha": "ec2b26f1d6ea0b45d1d4792d99ada815056ca461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2b26f1d6ea0b45d1d4792d99ada815056ca461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a31e5f5f3b300d200f7917e28f467437435b28c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a31e5f5f3b300d200f7917e28f467437435b28c1", "html_url": "https://github.com/rust-lang/rust/commit/a31e5f5f3b300d200f7917e28f467437435b28c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a31e5f5f3b300d200f7917e28f467437435b28c1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb10755c046ddc376efa27c396bc0e527059785", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb10755c046ddc376efa27c396bc0e527059785", "html_url": "https://github.com/rust-lang/rust/commit/6fb10755c046ddc376efa27c396bc0e527059785"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "1348f7530f41e0a68799819eb7430894126afbb1", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=a31e5f5f3b300d200f7917e28f467437435b28c1", "patch": "@@ -563,9 +563,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             | ItemKind::ExternCrate(..)\n                             | ItemKind::ForeignMod(..) => return false,\n                             // We found a main function ...\n-                            ItemKind::Fn(box FnKind(_, sig, _, Some(block)))\n-                                if item.ident.name == sym::main =>\n-                            {\n+                            ItemKind::Fn(box FnKind(_, sig, _, Some(block))) if item.ident.name == sym::main => {\n                                 let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,"}, {"sha": "6a85b57af0779044cc2e6fcf009541caa8c7bc32", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=a31e5f5f3b300d200f7917e28f467437435b28c1", "patch": "@@ -1,7 +1,5 @@\n use crate::utils::{attr_by_name, in_macro, match_path_ast, span_lint_and_help};\n-use rustc_ast::ast::{\n-    AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind,\n-};\n+use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -160,15 +158,17 @@ impl EarlyLintPass for ExcessiveBools {\n                         \"consider using a state machine or refactoring bools into two-variant enums\",\n                     );\n                 }\n-            }\n-            ItemKind::Impl(box ImplKind { of_trait: None, items, .. })\n+            },\n+            ItemKind::Impl(box ImplKind {\n+                of_trait: None, items, ..\n+            })\n             | ItemKind::Trait(box TraitKind(.., items)) => {\n                 for item in items {\n                     if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n                         self.check_fn_sig(cx, fn_sig, item.span);\n                     }\n                 }\n-            }\n+            },\n             ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n             _ => (),\n         }"}, {"sha": "7c74b31601872cdc6c51750abc60ec70125f51be", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=a31e5f5f3b300d200f7917e28f467437435b28c1", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat,\n-    PatKind,\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "44eb3968ae738113b8e226687baec8ddd3c9c8ee", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=a31e5f5f3b300d200f7917e28f467437435b28c1", "patch": "@@ -229,25 +229,16 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => {\n-            lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n-        (Const(ld, lt, le), Const(rd, rt, re)) => {\n-            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n-        (Mod(l), Mod(r)) => {\n-            l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n+        (Mod(l), Mod(r)) => l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind)),\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n-        }\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n@@ -259,7 +250,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n-        }\n+        },\n         (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n@@ -308,15 +299,10 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n     use ForeignItemKind::*;\n     match (l, r) {\n-        (Static(lt, lm, le), Static(rt, rm, re)) => {\n-            lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n@@ -331,15 +317,10 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => {\n-            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)"}, {"sha": "e40fdca6a99478608f116af92c6db07af8daeed4", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31e5f5f3b300d200f7917e28f467437435b28c1/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=a31e5f5f3b300d200f7917e28f467437435b28c1", "patch": "@@ -231,7 +231,7 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl (box ImplKind {\n+        if let ItemKind::Impl(box ImplKind {\n             of_trait: Some(trait_ref),\n             ..\n         }) = &item.kind"}]}