{"sha": "9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTNkN2EwN2UzYzcwZjVmNDFjOGE5MmFhMzRjMTIwYzlmZGJhMGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T15:15:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:49Z"}, "message": "Unify associated item pretty printing.", "tree": {"sha": "f21e5e855259ee3c23d318230442c3b460dbe5d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f21e5e855259ee3c23d318230442c3b460dbe5d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "html_url": "https://github.com/rust-lang/rust/commit/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d91709b672d91ea9623ae4bc2275e8b003fc2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d91709b672d91ea9623ae4bc2275e8b003fc2c", "html_url": "https://github.com/rust-lang/rust/commit/34d91709b672d91ea9623ae4bc2275e8b003fc2c"}], "stats": {"total": 96, "additions": 21, "deletions": 75}, "files": [{"sha": "9e4615f60c03c9e2b95613ef226bd5f6b47fd0b1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 75, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "patch": "@@ -335,8 +335,8 @@ pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtLifetime(e)        => e.to_string(),\n         token::NtLiteral(ref e)     => expr_to_string(e),\n         token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n-        token::NtImplItem(ref e)    => impl_item_to_string(e),\n-        token::NtTraitItem(ref e)   => trait_item_to_string(e),\n+        // FIXME(Centril): merge these variants.\n+        token::NtImplItem(ref e) | token::NtTraitItem(ref e) => assoc_item_to_string(e),\n         token::NtVis(ref e)         => vis_to_string(e),\n         token::NtForeignItem(ref e) => foreign_item_to_string(e),\n     }\n@@ -374,12 +374,8 @@ pub fn item_to_string(i: &ast::Item) -> String {\n     to_string(|s| s.print_item(i))\n }\n \n-fn impl_item_to_string(i: &ast::ImplItem) -> String {\n-    to_string(|s| s.print_impl_item(i))\n-}\n-\n-fn trait_item_to_string(i: &ast::TraitItem) -> String {\n-    to_string(|s| s.print_trait_item(i))\n+fn assoc_item_to_string(i: &ast::AssocItem) -> String {\n+    to_string(|s| s.print_assoc_item(i))\n }\n \n pub fn generic_params_to_string(generic_params: &[ast::GenericParam]) -> String {\n@@ -1301,7 +1297,7 @@ impl<'a> State<'a> {\n                 self.bopen();\n                 self.print_inner_attributes(&item.attrs);\n                 for impl_item in impl_items {\n-                    self.print_impl_item(impl_item);\n+                    self.print_assoc_item(impl_item);\n                 }\n                 self.bclose(item.span);\n             }\n@@ -1328,7 +1324,7 @@ impl<'a> State<'a> {\n                 self.s.word(\" \");\n                 self.bopen();\n                 for trait_item in trait_items {\n-                    self.print_trait_item(trait_item);\n+                    self.print_assoc_item(trait_item);\n                 }\n                 self.bclose(item.span);\n             }\n@@ -1522,89 +1518,39 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_method_sig(&mut self,\n-                            ident: ast::Ident,\n-                            generics: &ast::Generics,\n-                            m: &ast::FnSig,\n-                            vis: &ast::Visibility)\n-                            {\n-        self.print_fn(&m.decl,\n-                      m.header,\n-                      Some(ident),\n-                      &generics,\n-                      vis)\n-    }\n-\n-    crate fn print_trait_item(&mut self, ti: &ast::TraitItem)\n-                            {\n-        self.ann.pre(self, AnnNode::SubItem(ti.id));\n+    crate fn print_assoc_item(&mut self, item: &ast::AssocItem) {\n+        self.ann.pre(self, AnnNode::SubItem(item.id));\n         self.hardbreak_if_not_bol();\n-        self.maybe_print_comment(ti.span.lo());\n-        self.print_outer_attributes(&ti.attrs);\n-        self.print_defaultness(ti.defaultness);\n-        match ti.kind {\n-            ast::TraitItemKind::Const(ref ty, ref default) => {\n-                self.print_associated_const(ti.ident, ty, default.as_deref(), &ti.vis);\n-            }\n-            ast::TraitItemKind::Method(ref sig, ref body) => {\n-                if body.is_some() {\n-                    self.head(\"\");\n-                }\n-                self.print_method_sig(ti.ident, &ti.generics, sig, &ti.vis);\n-                if let Some(ref body) = *body {\n-                    self.nbsp();\n-                    self.print_block_with_attrs(body, &ti.attrs);\n-                } else {\n-                    self.s.word(\";\");\n-                }\n-            }\n-            ast::TraitItemKind::TyAlias(ref bounds, ref default) => {\n-                self.print_associated_type(ti.ident, bounds, default.as_deref());\n-            }\n-            ast::TraitItemKind::Macro(ref mac) => {\n-                self.print_mac(mac);\n-                if mac.args.need_semicolon() {\n-                    self.s.word(\";\");\n-                }\n+        self.maybe_print_comment(item.span.lo());\n+        self.print_outer_attributes(&item.attrs);\n+        self.print_defaultness(item.defaultness);\n+        match &item.kind {\n+            ast::AssocItemKind::Const(ty, expr) => {\n+                self.print_associated_const(item.ident, ty, expr.as_deref(), &item.vis);\n             }\n-        }\n-        self.ann.post(self, AnnNode::SubItem(ti.id))\n-    }\n-\n-    // FIXME(Centril): merge with function above.\n-    crate fn print_impl_item(&mut self, ii: &ast::ImplItem) {\n-        self.ann.pre(self, AnnNode::SubItem(ii.id));\n-        self.hardbreak_if_not_bol();\n-        self.maybe_print_comment(ii.span.lo());\n-        self.print_outer_attributes(&ii.attrs);\n-        self.print_defaultness(ii.defaultness);\n-        match ii.kind {\n-            ast::ImplItemKind::Const(ref ty, ref expr) => {\n-                self.print_associated_const(ii.ident, ty, expr.as_deref(), &ii.vis);\n-            }\n-            ast::ImplItemKind::Method(ref sig, ref body) => {\n+            ast::AssocItemKind::Method(sig, body) => {\n                 if body.is_some() {\n                     self.head(\"\");\n                 }\n-                self.print_method_sig(ii.ident, &ii.generics, sig, &ii.vis);\n+                self.print_fn(&sig.decl, sig.header, Some(item.ident), &item.generics, &item.vis);\n                 if let Some(body) = body {\n                     self.nbsp();\n-                    self.print_block_with_attrs(body, &ii.attrs);\n+                    self.print_block_with_attrs(body, &item.attrs);\n                 } else {\n                     self.s.word(\";\");\n                 }\n             }\n-            ast::ImplItemKind::TyAlias(ref bounds, ref ty) => {\n-                self.print_associated_type(ii.ident, bounds, ty.as_deref());\n+            ast::AssocItemKind::TyAlias(bounds, ty) => {\n+                self.print_associated_type(item.ident, bounds, ty.as_deref());\n             }\n-            ast::ImplItemKind::Macro(ref mac) => {\n+            ast::AssocItemKind::Macro(mac) => {\n                 self.print_mac(mac);\n                 if mac.args.need_semicolon() {\n                     self.s.word(\";\");\n                 }\n             }\n         }\n-        self.ann.post(self, AnnNode::SubItem(ii.id))\n+        self.ann.post(self, AnnNode::SubItem(item.id))\n     }\n \n     crate fn print_stmt(&mut self, st: &ast::Stmt) {"}]}