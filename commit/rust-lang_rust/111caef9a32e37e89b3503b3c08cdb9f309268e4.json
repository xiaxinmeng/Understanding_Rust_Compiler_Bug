{"sha": "111caef9a32e37e89b3503b3c08cdb9f309268e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMWNhZWY5YTMyZTM3ZTg5YjM1MDNiM2MwOGNkYjlmMzA5MjY4ZTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-11T03:42:06Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-11T05:14:08Z"}, "message": "Clean up the scopes of expanded `#[macro_use]` imports.", "tree": {"sha": "8c32d3d1e325f3917882c707ae12d7a400297042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c32d3d1e325f3917882c707ae12d7a400297042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111caef9a32e37e89b3503b3c08cdb9f309268e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111caef9a32e37e89b3503b3c08cdb9f309268e4", "html_url": "https://github.com/rust-lang/rust/commit/111caef9a32e37e89b3503b3c08cdb9f309268e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111caef9a32e37e89b3503b3c08cdb9f309268e4/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e0e12e6986ca369e9e27fa713c40b174c4d573", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e0e12e6986ca369e9e27fa713c40b174c4d573", "html_url": "https://github.com/rust-lang/rust/commit/31e0e12e6986ca369e9e27fa713c40b174c4d573"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "5600669d45fb97988583fb08e6e6b300a77dacc9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=111caef9a32e37e89b3503b3c08cdb9f309268e4", "patch": "@@ -13,7 +13,7 @@\n //! Here we build the \"reduced graph\": the graph of the module tree without\n //! any imports resolved.\n \n-use macros::{InvocationData, LegacyImports, LegacyScope};\n+use macros::{InvocationData, LegacyScope};\n use resolve_imports::ImportDirectiveSubclass::{self, GlobImport};\n use {Module, ModuleS, ModuleKind};\n use Namespace::{self, TypeNS, ValueNS};\n@@ -84,7 +84,7 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Constructs the reduced graph for one item.\n-    fn build_reduced_graph_for_item(&mut self, item: &Item, legacy_imports: &mut LegacyImports) {\n+    fn build_reduced_graph_for_item(&mut self, item: &Item, expansion: Mark) {\n         let parent = self.current_module;\n         let name = item.ident.name;\n         let sp = item.span;\n@@ -202,7 +202,14 @@ impl<'b> Resolver<'b> {\n                             if def.use_locally {\n                                 let ext =\n                                     Rc::new(macro_rules::compile(&self.session.parse_sess, &def));\n-                                legacy_imports.insert(name, (ext, loaded_macro.import_site));\n+                                if self.builtin_macros.insert(name, ext).is_some() &&\n+                                   expansion != Mark::root() {\n+                                    let msg = format!(\"`{}` is already in scope\", name);\n+                                    self.session.struct_span_err(loaded_macro.import_site, &msg)\n+                                        .note(\"macro-expanded `#[macro_use]`s may not shadow \\\n+                                               existing macros (see RFC 1560)\")\n+                                        .emit();\n+                                }\n                                 self.macro_names.insert(name);\n                             }\n                             if def.export {\n@@ -513,7 +520,7 @@ impl<'b> Resolver<'b> {\n pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n     pub resolver: &'a mut Resolver<'b>,\n     pub legacy_scope: LegacyScope<'b>,\n-    pub legacy_imports: LegacyImports,\n+    pub expansion: Mark,\n }\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n@@ -554,7 +561,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         let (parent, legacy_scope) = (self.resolver.current_module, self.legacy_scope);\n-        self.resolver.build_reduced_graph_for_item(item, &mut self.legacy_imports);\n+        self.resolver.build_reduced_graph_for_item(item, self.expansion);\n         visit::walk_item(self, item);\n         self.resolver.current_module = parent;\n         if !macro_use {"}, {"sha": "38a042735ff85adde656db3e307c8e290d416d76", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=111caef9a32e37e89b3503b3c08cdb9f309268e4", "patch": "@@ -3389,8 +3389,8 @@ impl<'a> Resolver<'a> {\n                reported_errors.insert((name, span)) {\n                 let msg = format!(\"`{}` is already in scope\", name);\n                 self.session.struct_span_err(span, &msg)\n-                    .note(\"macro-expanded `macro_rules!`s and `#[macro_use]`s \\\n-                           may not shadow existing macros (see RFC 1560)\")\n+                    .note(\"macro-expanded `macro_rules!`s may not shadow \\\n+                           existing macros (see RFC 1560)\")\n                     .emit();\n             }\n         }"}, {"sha": "6b00ebf3d05fc7b5e05acee666474e6813820c8c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=111caef9a32e37e89b3503b3c08cdb9f309268e4", "patch": "@@ -111,19 +111,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let mut visitor = BuildReducedGraphVisitor {\n             resolver: self,\n             legacy_scope: LegacyScope::Invocation(invocation),\n-            legacy_imports: FnvHashMap(),\n+            expansion: mark,\n         };\n         expansion.visit_with(&mut visitor);\n         invocation.expansion.set(visitor.legacy_scope);\n-\n-        if !visitor.legacy_imports.is_empty() {\n-            invocation.legacy_scope.set({\n-                LegacyScope::Binding(self.arenas.alloc_legacy_binding(LegacyBinding {\n-                    parent: invocation.legacy_scope.get(),\n-                    kind: LegacyBindingKind::MacroUse(visitor.legacy_imports),\n-                }))\n-            });\n-        }\n     }\n \n     fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef) {\n@@ -173,7 +164,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         None\n     }\n \n-    fn resolve_invoc(&mut self, scope: Mark, invoc: &Invocation, _force: bool)\n+    fn resolve_invoc(&mut self, scope: Mark, invoc: &Invocation, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {\n         let (name, span) = match invoc.kind {\n             InvocationKind::Bang { ref mac, .. } => {\n@@ -194,11 +185,15 @@ impl<'a> base::Resolver for Resolver<'a> {\n             invocation.legacy_scope.set(LegacyScope::simplify_expansion(parent));\n         }\n         self.resolve_macro_name(invocation.legacy_scope.get(), name, true).ok_or_else(|| {\n-            let mut err =\n-                self.session.struct_span_err(span, &format!(\"macro undefined: '{}!'\", name));\n-            self.suggest_macro_name(&name.as_str(), &mut err);\n-            err.emit();\n-            Determinacy::Determined\n+            if force {\n+                let mut err =\n+                    self.session.struct_span_err(span, &format!(\"macro undefined: '{}!'\", name));\n+                self.suggest_macro_name(&name.as_str(), &mut err);\n+                err.emit();\n+                Determinacy::Determined\n+            } else {\n+                Determinacy::Undetermined\n+            }\n         })\n     }\n "}, {"sha": "8381dc34a6a15f695630b44de9be358fdbdfc825", "filename": "src/test/compile-fail/macro-shadowing.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Ftest%2Fcompile-fail%2Fmacro-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111caef9a32e37e89b3503b3c08cdb9f309268e4/src%2Ftest%2Fcompile-fail%2Fmacro-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-shadowing.rs?ref=111caef9a32e37e89b3503b3c08cdb9f309268e4", "patch": "@@ -12,31 +12,28 @@\n \n macro_rules! foo { () => {} }\n macro_rules! macro_one { () => {} }\n+#[macro_use(macro_two)] extern crate two_macros;\n \n macro_rules! m1 { () => {\n     macro_rules! foo { () => {} } //~ ERROR `foo` is already in scope\n-    //~^ NOTE macro-expanded `macro_rules!`s and `#[macro_use]`s may not shadow existing macros\n+    //~^ NOTE macro-expanded `macro_rules!`s may not shadow existing macros\n \n-    #[macro_use] //~ ERROR `macro_one` is already in scope\n-    //~^ NOTE macro-expanded `macro_rules!`s and `#[macro_use]`s may not shadow existing macros\n-    extern crate two_macros;\n+    #[macro_use] //~ ERROR `macro_two` is already in scope\n+    //~^ NOTE macro-expanded `#[macro_use]`s may not shadow existing macros\n+    extern crate two_macros as __;\n }}\n m1!(); //~ NOTE in this expansion\n        //~| NOTE in this expansion\n        //~| NOTE in this expansion\n        //~| NOTE in this expansion\n \n-fn f() { macro_one!(); }\n foo!();\n \n macro_rules! m2 { () => {\n     macro_rules! foo { () => {} }\n-    #[macro_use] extern crate two_macros as __;\n-\n-    fn g() { macro_one!(); }\n     foo!();\n }}\n m2!();\n-//^ Since `foo` and `macro_one` are not used outside this expansion, they are not shadowing errors.\n+//^ Since `foo` is not used outside this expansion, it is not a shadowing error.\n \n fn main() {}"}]}