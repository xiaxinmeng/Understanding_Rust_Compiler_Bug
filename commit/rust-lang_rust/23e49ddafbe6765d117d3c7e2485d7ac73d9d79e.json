{"sha": "23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZTQ5ZGRhZmJlNjc2NWQxMTdkM2M3ZTI0ODVkN2FjNzNkOWQ3OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-06T10:29:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-06T10:29:54Z"}, "message": "Auto merge of #76370 - fusion-engineering-forks:synconcecell-soundness, r=nagisa\n\nFix dropck issue of SyncOnceCell.\n\nFixes #76367.", "tree": {"sha": "8506d047a9fd1a8b6acd44871ff278adf9dc33e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8506d047a9fd1a8b6acd44871ff278adf9dc33e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "html_url": "https://github.com/rust-lang/rust/commit/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c6003a7ad5e1f03c7c458003bf469d267df5688", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6003a7ad5e1f03c7c458003bf469d267df5688", "html_url": "https://github.com/rust-lang/rust/commit/6c6003a7ad5e1f03c7c458003bf469d267df5688"}, {"sha": "e56ea68db50d23f4a7efa712c53ba02e506fd61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e56ea68db50d23f4a7efa712c53ba02e506fd61a", "html_url": "https://github.com/rust-lang/rust/commit/e56ea68db50d23f4a7efa712c53ba02e506fd61a"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "d171231b0f1e63f1fc1c53731c85e8433b37520d", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e49ddafbe6765d117d3c7e2485d7ac73d9d79e/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=23e49ddafbe6765d117d3c7e2485d7ac73d9d79e", "patch": "@@ -6,6 +6,7 @@ mod tests;\n use crate::{\n     cell::{Cell, UnsafeCell},\n     fmt,\n+    marker::PhantomData,\n     mem::{self, MaybeUninit},\n     ops::{Deref, Drop},\n     panic::{RefUnwindSafe, UnwindSafe},\n@@ -46,6 +47,26 @@ pub struct SyncOnceCell<T> {\n     once: Once,\n     // Whether or not the value is initialized is tracked by `state_and_queue`.\n     value: UnsafeCell<MaybeUninit<T>>,\n+    /// `PhantomData` to make sure dropck understands we're dropping T in our Drop impl.\n+    ///\n+    /// ```compile_fail,E0597\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// struct A<'a>(&'a str);\n+    ///\n+    /// impl<'a> Drop for A<'a> {\n+    ///     fn drop(&mut self) {}\n+    /// }\n+    ///\n+    /// let cell = SyncOnceCell::new();\n+    /// {\n+    ///     let s = String::new();\n+    ///     let _ = cell.set(A(&s));\n+    /// }\n+    /// ```\n+    _marker: PhantomData<T>,\n }\n \n // Why do we need `T: Send`?\n@@ -119,7 +140,11 @@ impl<T> SyncOnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new() -> SyncOnceCell<T> {\n-        SyncOnceCell { once: Once::new(), value: UnsafeCell::new(MaybeUninit::uninit()) }\n+        SyncOnceCell {\n+            once: Once::new(),\n+            value: UnsafeCell::new(MaybeUninit::uninit()),\n+            _marker: PhantomData,\n+        }\n     }\n \n     /// Gets the reference to the underlying value."}]}