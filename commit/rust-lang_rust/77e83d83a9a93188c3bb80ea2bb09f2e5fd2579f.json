{"sha": "77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZTgzZDgzYTlhOTMxODhjM2JiODBlYTJiYjA5ZjJlNWZkMjU3OWY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T01:10:48Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T18:14:15Z"}, "message": "Change calls of `proto!` to use parens.", "tree": {"sha": "c3c72442481cd54d7db5fc47e3a419429ac96f4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c72442481cd54d7db5fc47e3a419429ac96f4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "html_url": "https://github.com/rust-lang/rust/commit/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74a442e86abf885b53dba8a1a33359c70f49e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74a442e86abf885b53dba8a1a33359c70f49e15", "html_url": "https://github.com/rust-lang/rust/commit/c74a442e86abf885b53dba8a1a33359c70f49e15"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "10a1376614061c1e45fb6aa10b6899d943cf1367", "filename": "src/libcore/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -134,11 +134,11 @@ fn with<A,B>(future: &Future<A>, blk: fn((&A)) -> B) -> B {\n     blk(v)\n }\n \n-proto! future_pipe {\n+proto! future_pipe (\n     waiting:recv<T:send> {\n         completed(T) -> !\n     }\n-}\n+)\n \n #[test]\n fn test_from_value() {"}, {"sha": "7d5db0473637363e7b39839646c76d9c7d532de6", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -7,14 +7,14 @@ directions they can flow at any given point are determined by a\n protocol. Below is an example protocol.\n \n ~~~\n-proto! pingpong {\n+proto! pingpong (\n     ping: send {\n         ping -> pong\n     }\n     pong: recv {\n         pong -> ping\n     }\n-}\n+)\n ~~~\n \n The `proto!` syntax extension will convert this into a module called\n@@ -893,11 +893,11 @@ fn spawn_service_recv<T: send, Tb: send>(\n \n // Streams - Make pipes a little easier in general.\n \n-proto! streamp {\n+proto! streamp (\n     open:send<T: send> {\n         data(T) -> open<T>\n     }\n-}\n+)\n \n /// A trait for things that can send multiple messages.\n trait channel<T: send> {\n@@ -1138,11 +1138,11 @@ impl<T: send, U: send, Left: selectable recv<T>, Right: selectable recv<U>>\n     }\n }\n \n-proto! oneshot {\n+proto! oneshot (\n     oneshot:send<T:send> {\n         send(T) -> !\n     }\n-}\n+)\n \n /// The send end of a oneshot pipe.\n type chan_one<T: send> = oneshot::client::oneshot<T>;"}, {"sha": "479e3afe51b0903dc467724071ca0bdd52d18ef3", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -3,14 +3,14 @@\n This is frequently called the pipe compiler. It handles code such as...\n \n ~~~\n-proto! pingpong {\n+proto! pingpong (\n     ping: send {\n         ping -> pong\n     }\n     pong: recv {\n         pong -> ping\n     }\n-}\n+)\n ~~~\n \n There are several components:"}, {"sha": "10ae60a0a0d90ab4a7059cfc14fac25ae8b5385a", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -15,11 +15,11 @@ import std::time;\n \n import pipes::recv;\n \n-proto! ring {\n+proto! ring (\n     num:send {\n         num(uint) -> num\n     }\n-}\n+)\n \n fn macros() {\n     #macro["}, {"sha": "a06bbbbc109162c9437893ce52fb281f5728f64e", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -7,17 +7,17 @@ use std;\n import pipes::{spawn_service, recv};\n import std::time::precise_time_s;\n \n-proto! pingpong {\n+proto! pingpong (\n     ping: send {\n         ping -> pong\n     }\n \n     pong: recv {\n         pong -> ping\n     }\n-}\n+)\n \n-proto! pingpong_unbounded {\n+proto! pingpong_unbounded (\n     ping: send {\n         ping -> pong\n     }\n@@ -29,7 +29,7 @@ proto! pingpong_unbounded {\n     you_will_never_catch_me: send {\n         never_ever_ever -> you_will_never_catch_me\n     }\n-}\n+)\n \n // This stuff should go in libcore::pipes\n macro_rules! move_it ("}, {"sha": "06ecec92d8d68f06b2d2c2b735d4a93dca5de728", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -142,7 +142,7 @@ mod map_reduce {\n     }\n \n \n-    proto! ctrl_proto {\n+    proto! ctrl_proto (\n         open: send<K: copy send, V: copy send> {\n             find_reducer(K) -> reducer_response<K, V>,\n             mapper_done -> !\n@@ -151,7 +151,7 @@ mod map_reduce {\n         reducer_response: recv<K: copy send, V: copy send> {\n             reducer(Chan<reduce_proto<V>>) -> open<K, V>\n         }\n-    }\n+    )\n \n     enum reduce_proto<V: copy send> { emit_val(V), done, addref, release }\n "}, {"sha": "6b7bd97e6d4621c29780f2747d14589443a6e597", "filename": "src/test/run-pass/issue-2834.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2834.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -2,11 +2,11 @@\n //\n // xfail-test\n \n-proto! streamp {\n+proto! streamp (\n     open:send<T: send> {\n         data(T) -> open<T>\n     }\n-}\n+)\n \n fn rendezvous() {\n     let (c, s) = streamp::init();"}, {"sha": "0d24f72cb238cf52256ca422832370803ea98be7", "filename": "src/test/run-pass/issue-2930.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2930.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -1,8 +1,8 @@\n-proto! stream {\n+proto! stream (\n     stream:send<T:send> {\n         send(T) -> stream<T>\n     }\n-}\n+)\n \n fn main() {\n     let (bc, _bp) = stream::init();"}, {"sha": "4e81153be29eb833a34d308c433366545ae57359", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -11,7 +11,7 @@ type password = ~str;\n type money = float;\n type amount = float;\n \n-proto! bank {\n+proto! bank (\n     login:send {\n         login(username, password) -> login_response\n     }\n@@ -30,7 +30,7 @@ proto! bank {\n         money(money) -> connected,\n         insufficient_funds -> connected\n     }\n-}\n+)\n \n macro_rules! move_it (\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }"}, {"sha": "f2590b6a76fb846a6c2102746ec9e4fe85d4616c", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -9,11 +9,11 @@ import std::uv;\n \n import pipes::{try_recv, recv};\n \n-proto! oneshot {\n+proto! oneshot (\n     waiting:send {\n         signal -> !\n     }\n-}\n+)\n \n fn main() {\n     let iotask = uv::global_loop::get();"}, {"sha": "ed0a2a3d75b54d2cd598675e73cff4cfdf8a2675", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -4,11 +4,11 @@ use std;\n import std::timer::sleep;\n import std::uv;\n \n-proto! oneshot {\n+proto! oneshot (\n     waiting:send {\n         signal -> !\n     }\n-}\n+)\n \n fn main() {\n     let (c, p) = oneshot::init();"}, {"sha": "1afcce0047f089986f0eb52263b9b1b8ecef8b81", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -2,15 +2,15 @@\n \n // xfail-pretty\n \n-proto! pingpong {\n+proto! pingpong (\n     ping:send {\n         ping -> pong\n     }\n \n     pong:recv {\n         pong -> ping\n     }\n-}\n+)\n \n mod test {\n     import pipes::recv;"}, {"sha": "eba21e329714a34586437651e480e6a3fda197b3", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -71,7 +71,7 @@ struct Buffer {\n     drop { }\n }\n \n-proto! double_buffer {\n+proto! double_buffer (\n     acquire:send {\n         request -> wait_buffer\n     }\n@@ -83,7 +83,7 @@ proto! double_buffer {\n     release:send {\n         release(Buffer) -> acquire\n     }\n-}\n+)\n \n // Code examples\n fn render(_buffer: &Buffer) {"}, {"sha": "1e868d3d24996667599e7b69666e05c66417e241", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -1,13 +1,13 @@\n // xfail-pretty\n \n // Protocols\n-proto! foo {\n+proto! foo (\n     foo:recv {\n         do_foo -> foo\n     }\n-}\n+)\n \n-proto! bar {\n+proto! bar (\n     bar:recv {\n         do_bar(int) -> barbar,\n         do_baz(bool) -> bazbar,\n@@ -20,7 +20,7 @@ proto! bar {\n     bazbar:send {\n         rebazbar -> bar\n     }\n-}\n+)\n \n fn macros() {\n     include!(\"select-macro.rs\");"}, {"sha": "1c69fdd0955e5b9869cdc8c899c46aa2a55756b2", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -7,17 +7,17 @@ import std::uv;\n \n import pipes::{recv, select};\n \n-proto! oneshot {\n+proto! oneshot (\n     waiting:send {\n         signal -> !\n     }\n-}\n+)\n \n-proto! stream {\n+proto! stream (\n     stream:send<T:send> {\n         send(T) -> stream<T>\n     }\n-}\n+)\n \n fn main() {\n     import oneshot::client::*;"}, {"sha": "65aa3b2f228803d3fa09a6c2e83752daa2275a38", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=77e83d83a9a93188c3bb80ea2bb09f2e5fd2579f", "patch": "@@ -5,11 +5,11 @@ import std::timer::sleep;\n import std::uv;\n import pipes::recv;\n \n-proto! oneshot {\n+proto! oneshot (\n     waiting:send {\n         signal -> !\n     }\n-}\n+)\n \n fn main() {\n     import oneshot::client::*;"}]}