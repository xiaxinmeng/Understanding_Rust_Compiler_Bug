{"sha": "29cc8ec2d1b959190c9664b1071add7ae327c59c", "node_id": "C_kwDOAAsO6NoAKDI5Y2M4ZWMyZDFiOTU5MTkwYzk2NjRiMTA3MWFkZDdhZTMyN2M1OWM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-17T23:43:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T00:38:00Z"}, "message": "explain why prepare_relocation_copy works the way it does", "tree": {"sha": "abb4dc3485b7a916599f69343eedb4f49dee26ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb4dc3485b7a916599f69343eedb4f49dee26ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29cc8ec2d1b959190c9664b1071add7ae327c59c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29cc8ec2d1b959190c9664b1071add7ae327c59c", "html_url": "https://github.com/rust-lang/rust/commit/29cc8ec2d1b959190c9664b1071add7ae327c59c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29cc8ec2d1b959190c9664b1071add7ae327c59c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec1febbf570b555c35db8228b27c4e300d11e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec1febbf570b555c35db8228b27c4e300d11e0b", "html_url": "https://github.com/rust-lang/rust/commit/3ec1febbf570b555c35db8228b27c4e300d11e0b"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "7723f7a64f7691e0bcb53ad367560e9309a9d6cd", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29cc8ec2d1b959190c9664b1071add7ae327c59c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cc8ec2d1b959190c9664b1071add7ae327c59c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=29cc8ec2d1b959190c9664b1071add7ae327c59c", "patch": "@@ -567,8 +567,10 @@ impl<Tag> Deref for Relocations<Tag> {\n }\n \n /// A partial, owned list of relocations to transfer into another allocation.\n+///\n+/// Offsets are already adjusted to the destination allocation.\n pub struct AllocationRelocations<Tag> {\n-    relative_relocations: Vec<(Size, Tag)>,\n+    dest_relocations: Vec<(Size, Tag)>,\n }\n \n impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n@@ -581,12 +583,17 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     ) -> AllocationRelocations<Tag> {\n         let relocations = self.get_relocations(cx, src);\n         if relocations.is_empty() {\n-            return AllocationRelocations { relative_relocations: Vec::new() };\n+            return AllocationRelocations { dest_relocations: Vec::new() };\n         }\n \n         let size = src.size;\n         let mut new_relocations = Vec::with_capacity(relocations.len() * (count as usize));\n \n+        // If `count` is large, this is rather wasteful -- we are allocating a big array here, which\n+        // is mostly filled with redundant information since it's just N copies of the same `Tag`s\n+        // at slightly adjusted offsets. The reason we do this is so that in `mark_relocation_range`\n+        // we can use `insert_presorted`. That wouldn't work with an `Iterator` that just produces\n+        // the right sequence of relocations for all N copies.\n         for i in 0..count {\n             new_relocations.extend(relocations.iter().map(|&(offset, reloc)| {\n                 // compute offset for current repetition\n@@ -599,7 +606,7 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n             }));\n         }\n \n-        AllocationRelocations { relative_relocations: new_relocations }\n+        AllocationRelocations { dest_relocations: new_relocations }\n     }\n \n     /// Applies a relocation copy.\n@@ -609,7 +616,7 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// This is dangerous to use as it can violate internal `Allocation` invariants!\n     /// It only exists to support an efficient implementation of `mem_copy_repeatedly`.\n     pub fn mark_relocation_range(&mut self, relocations: AllocationRelocations<Tag>) {\n-        self.relocations.0.insert_presorted(relocations.relative_relocations);\n+        self.relocations.0.insert_presorted(relocations.dest_relocations);\n     }\n }\n "}]}