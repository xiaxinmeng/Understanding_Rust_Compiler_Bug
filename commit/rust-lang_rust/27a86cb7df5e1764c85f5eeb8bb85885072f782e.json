{"sha": "27a86cb7df5e1764c85f5eeb8bb85885072f782e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTg2Y2I3ZGY1ZTE3NjRjODVmNWVlYjhiYjg1ODg1MDcyZjc4MmU=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-10T10:37:06Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-10T10:37:06Z"}, "message": "Collapse comments upon join", "tree": {"sha": "93cc44024c35b619cb101e95dfc470f9a948cdaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93cc44024c35b619cb101e95dfc470f9a948cdaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a86cb7df5e1764c85f5eeb8bb85885072f782e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a86cb7df5e1764c85f5eeb8bb85885072f782e", "html_url": "https://github.com/rust-lang/rust/commit/27a86cb7df5e1764c85f5eeb8bb85885072f782e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a86cb7df5e1764c85f5eeb8bb85885072f782e/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c41087bf83a4ffda87a7bee16d8eb31562bac23", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c41087bf83a4ffda87a7bee16d8eb31562bac23", "html_url": "https://github.com/rust-lang/rust/commit/3c41087bf83a4ffda87a7bee16d8eb31562bac23"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "6c1a91ffb7ec7536a45682d412d6aa0a5ba69743", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 64, "deletions": 15, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/27a86cb7df5e1764c85f5eeb8bb85885072f782e/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a86cb7df5e1764c85f5eeb8bb85885072f782e/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=27a86cb7df5e1764c85f5eeb8bb85885072f782e", "patch": "@@ -30,6 +30,7 @@ pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n     } else {\n         range\n     };\n+\n     let node = find_covering_node(file.syntax(), range);\n     let mut edit = EditBuilder::new();\n     for node in node.descendants() {\n@@ -140,30 +141,71 @@ fn remove_newline(\n     offset: TextUnit,\n ) {\n     if node.kind() == WHITESPACE && node_text.bytes().filter(|&b| b == b'\\n').count() == 1 {\n+        // Special case that turns something like:\n+        //\n+        // ```\n+        // my_function({<|>\n+        //    <some-expr>\n+        // })\n+        // ```\n+        //\n+        // into `my_function(<some-expr>)`\n         if join_single_expr_block(edit, node).is_some() {\n             return\n         }\n-        match (node.prev_sibling(), node.next_sibling()) {\n-            (Some(prev), Some(next)) => {\n-                let range = TextRange::from_to(prev.range().start(), node.range().end());\n-                if is_trailing_comma(prev.kind(), next.kind()) {\n-                    edit.delete(range);\n-                } else if no_space_required(prev.kind(), next.kind()) {\n-                    edit.delete(node.range());\n-                } else if prev.kind() == COMMA && next.kind() == R_CURLY {\n-                    edit.replace(range, \" \".to_string());\n+\n+        if let (Some(prev), Some(next)) = (node.prev_sibling(), node.next_sibling()) {\n+            let range = TextRange::from_to(prev.range().start(), node.range().end());\n+            if is_trailing_comma(prev.kind(), next.kind()) {\n+                // Removes: trailing comma, newline (incl. surrounding whitespace)\n+                edit.delete(range);\n+            } else if no_space_required(prev.kind(), next.kind()) {\n+                // Removes: newline (incl. surrounding whitespace)\n+                edit.delete(node.range());\n+            } else if prev.kind() == COMMA && next.kind() == R_CURLY {\n+                // Removes: comma, newline (incl. surrounding whitespace)\n+                // Adds: a single whitespace\n+                edit.replace(range, \" \".to_string());\n+            } else if prev.kind() == COMMENT && next.kind() == COMMENT {\n+                // Removes: newline (incl. surrounding whitespace), start of the next comment\n+\n+                // FIXME: I guess it is safe to unwrap here? A comment always has text, right?\n+                let comment_text = next.leaf_text().unwrap().as_str();\n+                let comment_start_length = comment_start_length(comment_text);\n+\n+                if let Some(newline_pos) = comment_text.find('\\n') {\n+                    // Special case for multi-line c-like comments: join the comment content but\n+                    // keep the leading `/*`\n+\n+                    let newline_offset = next.range().start()\n+                                        + TextUnit::from(newline_pos as u32)\n+                                        + TextUnit::of_char('\\n');\n+\n+                    edit.insert(newline_offset, \"/*\".to_string());\n+                    edit.delete(TextRange::from_to(\n+                        node.range().start(),\n+                        next.range().start() + comment_start_length\n+                    ));\n                 } else {\n-                    edit.replace(\n-                        node.range(),\n-                        compute_ws(prev, next).to_string(),\n-                    );\n+                    // Single-line comments\n+                    edit.delete(TextRange::from_to(\n+                        node.range().start(),\n+                        next.range().start() + comment_start_length\n+                    ));\n                 }\n-                return;\n+            } else {\n+                // Remove newline but add a computed amount of whitespace characters\n+                edit.replace(\n+                    node.range(),\n+                    compute_ws(prev, next).to_string(),\n+                );\n             }\n-            _ => (),\n+\n+            return;\n         }\n     }\n \n+    // FIXME: do we ever reach this point? What does it mean to be here? I think we should document it\n     let suff = &node_text[TextRange::from_to(\n         offset - node.range().start() + TextUnit::of_char('\\n'),\n         TextUnit::of_str(node_text),\n@@ -176,6 +218,13 @@ fn remove_newline(\n     );\n }\n \n+// Return the start length of the comment (e.g. 2 for `//` and 3 for `//!`)\n+fn comment_start_length(_text: &str) -> TextUnit {\n+    // TODO: use the parser here instead of reimplementing comment parsing?\n+    // Otherwise, reimplement comment parsing :)\n+    return TextUnit::from(2);\n+}\n+\n fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n     match (left, right) {\n        (COMMA, R_PAREN) | (COMMA, R_BRACK) => true,"}]}