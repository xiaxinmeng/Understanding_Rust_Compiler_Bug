{"sha": "a1cce2d06a1bcde6d8af7319b21772312e1b6579", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExY2NlMmQwNmExYmNkZTZkOGFmNzMxOWIyMTc3MjMxMmUxYjY1Nzk=", "commit": {"author": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2018-07-24T06:55:38Z"}, "committer": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2018-07-24T09:38:58Z"}, "message": "Inline utils::in_external_macro", "tree": {"sha": "91898a11acf254baf90922bed5eb0e244b943d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91898a11acf254baf90922bed5eb0e244b943d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1cce2d06a1bcde6d8af7319b21772312e1b6579", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEERGS9JmrgEHKCFADQTyVuPRUd9e8FAltW87IACgkQTyVuPRUd\n9e/4Vg/+JGgMq+mQc0nSp7i35A/4erfsFoc2nXLnkJZWa1pQBXzkoGAdzdRT+Xzz\nJkmStj98pTKk7TRIUZsCcCAwjDjNiFnfjspuG2yce5SdnAkR4fLmIzKWhrxmLwhC\nVF+iaHnna5g8CpVjXufQJYYWeJEvUPUAwwoNtroAqwD5EvOlgkhxsLH+pZnjZAIj\nxfIOo4rz1WAoc+9bxu8UM7ZKcocSXZXKvPIZ4FzsFI8SfQw98yWznnNq2fySMNxx\nKyqpQfqsPb2Etzrn0Jp2sGiRFTTOAkMnvZSxnRmybCdJTal3cUzRh6mfcQcLtBaH\nlD3w7zFjIdeY3kv0b+TPFVzR4S+7vSarUCdcBwnP0ooJYC+uiYBcpR4OuYUDfaC6\nhZxkLNkC8Y64xabewpBb+OkTr210XPrLKeCW+pEfQw/RzKEv72CVz5v15Tztefjo\nxulF5YhfYjA0lrEpgTnqOdIIiA8P8xcwcUlyqq9XCY9/ulSMNeiLrhoNiXJOf1VR\njNy6OUKVFITbCJ8PLX52q6IeJqZDxeo5AKfEdovlcfrFFbWBiCZ0an3xjUP1r6YE\nUs6LxeHW1QWNAjrHlhuucdrig52WmbkhTSB9DYHlQJLiMg65UUDTqgpYZJL3F4d7\n/js6cExYE9LaEejglsQI0S0vo7M3ZV/DCVm2Q+aeUb4GV14eRpk=\n=eQeJ\n-----END PGP SIGNATURE-----", "payload": "tree 91898a11acf254baf90922bed5eb0e244b943d68\nparent b1fa7b91baed3d2d5e46584701c9828d3a1f160d\nauthor Dale Wijnand <dale.wijnand@gmail.com> 1532415338 +0100\ncommitter Dale Wijnand <dale.wijnand@gmail.com> 1532425138 +0100\n\nInline utils::in_external_macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cce2d06a1bcde6d8af7319b21772312e1b6579", "html_url": "https://github.com/rust-lang/rust/commit/a1cce2d06a1bcde6d8af7319b21772312e1b6579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1cce2d06a1bcde6d8af7319b21772312e1b6579/comments", "author": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1fa7b91baed3d2d5e46584701c9828d3a1f160d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1fa7b91baed3d2d5e46584701c9828d3a1f160d", "html_url": "https://github.com/rust-lang/rust/commit/b1fa7b91baed3d2d5e46584701c9828d3a1f160d"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "39404bbafcca7cc53c608a6304da04ce3d70f8c1", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::*;\n use rustc::{declare_lint, lint_array};\n use syntax::ast::*;\n \n-use crate::utils::{in_external_macro, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n /// **What it does:** Checks for usage of if expressions with an `else if` branch,\n /// but without a final `else` branch.\n@@ -50,7 +50,7 @@ impl LintPass for ElseIfWithoutElse {\n \n impl EarlyLintPass for ElseIfWithoutElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, mut item: &Expr) {\n-        if in_external_macro(cx, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n "}, {"sha": "fea3069f37d3a40e7a9810fcfebdfd9284c527d5", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -5,7 +5,7 @@ use rustc::lint::*;\n use rustc::{declare_lint, lint_array};\n use syntax::ast::*;\n \n-use crate::utils::{in_external_macro, span_help_and_lint};\n+use crate::utils::span_help_and_lint;\n \n /// **What it does:** Checks for usage of `!` or `!=` in an if condition with an\n /// else branch.\n@@ -48,7 +48,7 @@ impl LintPass for IfNotElse {\n \n impl EarlyLintPass for IfNotElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, item: &Expr) {\n-        if in_external_macro(cx, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n         if let ExprKind::If(ref cond, _, Some(ref els)) = item.node {"}, {"sha": "cf7a016231e347f41dfb829918e2d93b405bec9d", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::*;\n use std::collections::{HashMap, HashSet};\n use syntax::codemap::Span;\n-use crate::utils::{in_external_macro, last_path_segment, span_lint};\n+use crate::utils::{last_path_segment, span_lint};\n use syntax::symbol::keywords;\n \n /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -98,7 +98,7 @@ fn check_fn_inner<'a, 'tcx>(\n     generics: &'tcx Generics,\n     span: Span,\n ) {\n-    if in_external_macro(cx, span) || has_where_lifetimes(cx, &generics.where_clause) {\n+    if in_external_macro(cx.sess(), span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n     }\n "}, {"sha": "45f9af49a15fe279cadc8d8211be17272c46ff3e", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -6,7 +6,7 @@ use rustc::{declare_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast::*;\n use syntax_pos;\n-use crate::utils::{in_external_macro, snippet_opt, span_lint_and_sugg};\n+use crate::utils::{snippet_opt, span_lint_and_sugg};\n \n /// **What it does:** Warns if a long integral or floating-point constant does\n /// not contain underscores.\n@@ -282,7 +282,7 @@ impl LintPass for LiteralDigitGrouping {\n \n impl EarlyLintPass for LiteralDigitGrouping {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n \n@@ -422,7 +422,7 @@ impl LintPass for LiteralRepresentation {\n \n impl EarlyLintPass for LiteralRepresentation {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "b95bc01c013daf356a5fe00633f49108656533b9", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -23,7 +23,7 @@ use crate::utils::{sugg, sext};\n use crate::utils::usage::mutated_variables;\n use crate::consts::{constant, Constant};\n \n-use crate::utils::{get_enclosing_block, get_parent_expr, higher, in_external_macro, is_integer_literal, is_refutable,\n+use crate::utils::{get_enclosing_block, get_parent_expr, higher, is_integer_literal, is_refutable,\n             last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, snippet, snippet_opt,\n             span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, SpanlessEq};\n use crate::utils::paths;\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                 && arms[1].pats.len() == 1 && arms[1].guard.is_none()\n                                 && is_simple_break_expr(&arms[1].body)\n                             {\n-                                if in_external_macro(cx, expr.span) {\n+                                if in_external_macro(cx.sess(), expr.span) {\n                                     return;\n                                 }\n "}, {"sha": "c7452f0027e914eb1debac9fb752d8fc9b8ac84e", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -8,7 +8,7 @@ use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use crate::utils::paths;\n-use crate::utils::{expr_block, in_external_macro, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg,\n+use crate::utils::{expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg,\n             remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};\n@@ -183,7 +183,7 @@ impl LintPass for MatchPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_external_macro(cx, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         if let ExprKind::Match(ref ex, ref arms, MatchSource::Normal) = expr.node {"}, {"sha": "28ff303fc83eb9023c310898b69c07bf29fe46bd", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -10,7 +10,7 @@ use std::fmt;\n use std::iter;\n use syntax::ast;\n use syntax::codemap::{Span, BytePos};\n-use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, is_expn_of, is_self,\n+use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_macro, is_copy, is_expn_of, is_self,\n             is_self_ty, iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n             match_type, method_chain_args, match_var, return_ty, remove_blocks, same_tys, single_segment_path, snippet,\n             span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq};\n@@ -806,7 +806,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, implitem: &'tcx hir::ImplItem) {\n-        if in_external_macro(cx, implitem.span) {\n+        if in_external_macro(cx.sess(), implitem.span) {\n             return;\n         }\n         let name = implitem.ident.name;"}, {"sha": "9b8e0743f39354895428940acabf2673d4ed1e54", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -6,7 +6,7 @@ use std::char;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n-use crate::utils::{constants, in_external_macro, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n+use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for structure field patterns bound to wildcards.\n ///\n@@ -294,7 +294,7 @@ impl EarlyLintPass for MiscEarly {\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         match expr.node {"}, {"sha": "0413f1ab603ffa2942fdb820d0b5c94a6cbe0d97", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::intravisit;\n use rustc::lint::*;\n use rustc::{declare_lint, lint_array};\n use rustc::ty;\n-use crate::utils::{higher, in_external_macro, span_lint};\n+use crate::utils::{higher, span_lint};\n \n /// **What it does:** Checks for instances of `mut mut` references.\n ///\n@@ -50,7 +50,7 @@ pub struct MutVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n-        if in_external_macro(self.cx, expr.span) {\n+        if in_external_macro(self.cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "42be6ec664e10a9e9c1438e9f4790566650ad025", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::*;\n use rustc::{declare_lint, lint_array};\n use if_chain::if_chain;\n \n-use crate::utils::{self, paths, span_lint, in_external_macro};\n+use crate::utils::{self, paths, span_lint};\n \n /// **What it does:**\n /// Checks for the usage of negated comparision operators on types which only implement\n@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n \n-            if !in_external_macro(cx, expr.span);\n+            if !in_external_macro(cx.sess(), expr.span);\n             if let ExprKind::Unary(UnOp::UnNot, ref inner) = expr.node;\n             if let ExprKind::Binary(ref op, ref left, _) = inner.node;\n             if let BinOpKind::Le | BinOpKind::Ge | BinOpKind::Lt | BinOpKind::Gt = op.node;"}, {"sha": "eeb131959e9a2fc94bf3ecad96cf054f8d584677", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use syntax::codemap::Span;\n use crate::utils::paths;\n-use crate::utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n+use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_and_then};\n use crate::utils::sugg::DiagnosticBuilderExt;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n             for assoc_item in items {\n                 if let hir::AssociatedItemKind::Method { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir.impl_item(assoc_item.id);\n-                    if in_external_macro(cx, impl_item.span) {\n+                    if in_external_macro(cx.sess(), impl_item.span) {\n                         return;\n                     }\n                     if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {"}, {"sha": "0ede1bc972745e7dba3e11b07a31f35d93f4a76c", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -5,7 +5,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n \n-use crate::utils::{in_external_macro, in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n /// **What it does:** Checks for return statements at the end of a block.\n ///\n@@ -90,7 +90,7 @@ impl ReturnPass {\n     }\n \n     fn emit_return_lint(&mut self, cx: &EarlyContext<'_>, ret_span: Span, inner_span: Span) {\n-        if in_external_macro(cx, inner_span) || in_macro(inner_span) {\n+        if in_external_macro(cx.sess(), inner_span) || in_macro(inner_span) {\n             return;\n         }\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n@@ -117,7 +117,7 @@ impl ReturnPass {\n             if let ast::PatKind::Ident(_, ident, _) = local.pat.node;\n             if let ast::ExprKind::Path(_, ref path) = retexpr.node;\n             if match_path_ast(path, &[&ident.as_str()]);\n-            if !in_external_macro(cx, initexpr.span);\n+            if !in_external_macro(cx.sess(), initexpr.span);\n             then {\n                     span_note_and_lint(cx,\n                                        LET_AND_RETURN,"}, {"sha": "aab578d634453f62d06d7128dc269ff8533dfee1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::ty;\n use syntax::codemap::Span;\n-use crate::utils::{contains_name, higher, in_external_macro, iter_input_pats, snippet, span_lint_and_then};\n+use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for bindings that shadow other bindings already in\n /// scope, while just changing reference level or mutability.\n@@ -90,7 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         _: Span,\n         _: NodeId,\n     ) {\n-        if in_external_macro(cx, body.value.span) {\n+        if in_external_macro(cx.sess(), body.value.span) {\n             return;\n         }\n         check_fn(cx, decl, body);\n@@ -122,7 +122,7 @@ fn check_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, binding\n }\n \n fn check_decl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl, bindings: &mut Vec<(Name, Span)>) {\n-    if in_external_macro(cx, decl.span) {\n+    if in_external_macro(cx.sess(), decl.span) {\n         return;\n     }\n     if higher::is_from_for_desugar(decl) {\n@@ -303,7 +303,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n }\n \n fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings: &mut Vec<(Name, Span)>) {\n-    if in_external_macro(cx, expr.span) {\n+    if in_external_macro(cx.sess(), expr.span) {\n         return;\n     }\n     match expr.node {"}, {"sha": "d016afb4908cdcc8d0525119e26205e5b37150e0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -14,7 +14,7 @@ use std::borrow::Cow;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n-use crate::utils::{comparisons, differing_macro_contexts, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n+use crate::utils::{comparisons, differing_macro_contexts, higher, in_constant, in_macro, last_path_segment, match_def_path, match_path,\n             match_type, multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n             span_lint_and_sugg, span_lint_and_then, clip, unsext, sext, int_bits};\n use crate::utils::paths;\n@@ -381,7 +381,7 @@ declare_clippy_lint! {\n fn check_let_unit(cx: &LateContext<'_, '_>, decl: &Decl) {\n     if let DeclKind::Local(ref local) = decl.node {\n         if is_unit(cx.tables.pat_ty(&local.pat)) {\n-            if in_external_macro(cx, decl.span) || in_macro(local.pat.span) {\n+            if in_external_macro(cx.sess(), decl.span) || in_macro(local.pat.span) {\n                 return;\n             }\n             if higher::is_from_for_desugar(decl) {\n@@ -959,7 +959,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                 use syntax::ast::{LitIntType, LitKind};\n                 match lit.node {\n                     LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n-                    _ => if cast_from.sty == cast_to.sty && !in_external_macro(cx, expr.span) {\n+                    _ => if cast_from.sty == cast_to.sty && !in_external_macro(cx.sess(), expr.span) {\n                         span_lint(\n                             cx,\n                             UNNECESSARY_CAST,\n@@ -969,7 +969,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                     },\n                 }\n             }\n-            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n+            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false) => {\n                         let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);"}, {"sha": "0b2103ca7eaa505ab71a1ebe88189fe6252b4c95", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cce2d06a1bcde6d8af7319b21772312e1b6579/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a1cce2d06a1bcde6d8af7319b21772312e1b6579", "patch": "@@ -77,12 +77,6 @@ pub fn is_range_expression(span: Span) -> bool {\n     })\n }\n \n-/// Returns true if the macro that expanded the crate was outside of the\n-/// current crate or was a compiler plugin.\n-pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n-    ::rustc::lint::in_external_macro(cx.sess(), span)\n-}\n-\n /// Check if a `DefId`'s path matches the given absolute type path usage.\n ///\n /// # Examples"}]}