{"sha": "fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMmI0ZDNhOGQwOWI5MDg3MGZkNGE0NzcxNTQ0MjlmN2ZiOGM2ZDM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-14T15:09:01Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-14T16:23:27Z"}, "message": "Remove a bunch of primitive-compiler-workarounds from pprust.rs", "tree": {"sha": "e6f70054a2ad2c872f2cfd6b4501224ad82c3415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f70054a2ad2c872f2cfd6b4501224ad82c3415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3", "html_url": "https://github.com/rust-lang/rust/commit/fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471436a2996b2f141e6ceeac87362cfb321807ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/471436a2996b2f141e6ceeac87362cfb321807ff", "html_url": "https://github.com/rust-lang/rust/commit/471436a2996b2f141e6ceeac87362cfb321807ff"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "e0e975362bdc91d2efc3c060400fd44a31df3bd6", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=fa2b4d3a8d09b90870fd4a477154429f7fb8c6d3", "patch": "@@ -164,9 +164,7 @@ fn commasep_cmnt[IN](&ps s, breaks b, vec[IN] elts, fn(&ps, &IN) op,\n \n fn commasep_exprs(&ps s, breaks b, vec[@ast::expr] exprs) {\n     fn expr_span(&@ast::expr expr) -> common::span {ret expr.span;}\n-    auto f = print_expr;\n-    auto gs = expr_span;\n-    commasep_cmnt[@ast::expr](s, b, exprs, f, gs);\n+    commasep_cmnt(s, b, exprs, print_expr, expr_span);\n }\n \n fn print_mod(&ps s, ast::_mod _mod) {\n@@ -210,8 +208,7 @@ fn print_type(&ps s, &ast::ty ty) {\n         case (ast::ty_tup(?elts)) {\n             word(s.s, \"tup\");\n             popen(s);\n-            auto f = print_mt;\n-            commasep[ast::mt](s, inconsistent, elts, f);\n+            commasep(s, inconsistent, elts, print_mt);\n             pclose(s);\n         }\n         case (ast::ty_rec(?fields)) {\n@@ -227,9 +224,7 @@ fn print_type(&ps s, &ast::ty ty) {\n             fn get_span(&ast::ty_field f) -> common::span {\n                 ret f.span;\n             }\n-            auto f = print_field;\n-            auto gs = get_span;\n-            commasep_cmnt[ast::ty_field](s, consistent, fields, f, gs);\n+            commasep_cmnt(s, consistent, fields, print_field, get_span);\n             pclose(s);\n         }\n         case (ast::ty_obj(?methods)) {\n@@ -346,13 +341,12 @@ fn print_item(&ps s, &@ast::item item) {\n                 space(s.s);\n                 maybe_print_comment(s, v.span.lo);\n                 word(s.s, v.node.name);\n-                if (vec::len[ast::variant_arg](v.node.args) > 0u) {\n+                if (vec::len(v.node.args) > 0u) {\n                     popen(s);\n                     fn print_variant_arg(&ps s, &ast::variant_arg arg) {\n                         print_type(s, *arg.ty);\n                     }\n-                    auto f = print_variant_arg;\n-                    commasep[ast::variant_arg](s, consistent, v.node.args, f);\n+                    commasep(s, consistent, v.node.args, print_variant_arg);\n                     pclose(s);\n                 }\n                 word(s.s, \";\");\n@@ -373,9 +367,7 @@ fn print_item(&ps s, &@ast::item item) {\n                 end(s);\n             }\n             fn get_span(&ast::obj_field f) -> common::span {ret f.ty.span;}\n-            auto f = print_field;\n-            auto gs = get_span;\n-            commasep_cmnt[ast::obj_field](s, consistent, _obj.fields, f, gs);\n+            commasep_cmnt(s, consistent, _obj.fields, print_field, get_span);\n             pclose(s);\n             space(s.s);\n             bopen(s);\n@@ -488,9 +480,7 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             fn get_span(&ast::elt elt) -> common::span {ret elt.expr.span;}\n             word(s.s, \"tup\");\n             popen(s);\n-            auto f = printElt;\n-            auto gs = get_span;\n-            commasep_cmnt[ast::elt](s, inconsistent, exprs, f, gs);\n+            commasep_cmnt(s, inconsistent, exprs, printElt, get_span);\n             pclose(s);\n         }\n         case (ast::expr_rec(?fields,?wth,_)) {\n@@ -507,12 +497,10 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             }\n             word(s.s, \"rec\");\n             popen(s);\n-            auto f = print_field;\n-            auto gs = get_span;\n-            commasep_cmnt[ast::field](s, consistent, fields, f, gs);\n+            commasep_cmnt(s, consistent, fields, print_field, get_span);\n             alt (wth) {\n                 case (some(?expr)) {\n-                    if (vec::len[ast::field](fields) > 0u) {space(s.s);}\n+                    if (vec::len(fields) > 0u) {space(s.s);}\n                     ibox(s, indent_unit);\n                     word_space(s, \"with\");\n                     print_expr(s, expr);\n@@ -544,8 +532,7 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             word_nbsp(s, \"bind\");\n             print_expr(s, func);\n             popen(s);\n-            auto f = print_opt;\n-            commasep[option::t[@ast::expr]](s, inconsistent, args, f);\n+            commasep(s, inconsistent, args, print_opt);\n             pclose(s);\n         }\n     case (ast::expr_spawn(_,_,?e,?es,_)) {\n@@ -792,7 +779,7 @@ fn print_expr(&ps s, &@ast::expr expr) {\n         case (ast::expr_ext(?path, ?args, ?body, _, _)) {\n             word(s.s, \"#\");\n             print_path(s, path);\n-            if (vec::len[@ast::expr](args) > 0u) {\n+            if (vec::len(args) > 0u) {\n                 popen(s);\n                 commasep_exprs(s, inconsistent, args);\n                 pclose(s);\n@@ -896,7 +883,7 @@ fn print_ident(&ps s, &ast::ident ident) {\n }\n \n fn print_for_decl(&ps s, @ast::local loc) {\n-    print_type(s, *option::get[@ast::ty](loc.node.ty));\n+    print_type(s, *option::get(loc.node.ty));\n     space(s.s);\n     word(s.s, loc.node.ident);\n }\n@@ -909,10 +896,9 @@ fn print_path(&ps s, &ast::path path) {\n         else {word(s.s, \"::\");}\n         word(s.s, id);\n     }\n-    if (vec::len[@ast::ty](path.node.types) > 0u) {\n+    if (vec::len(path.node.types) > 0u) {\n         word(s.s, \"[\");\n-        auto f = print_boxed_type;\n-        commasep[@ast::ty](s, inconsistent, path.node.types, f);\n+        commasep(s, inconsistent, path.node.types, print_boxed_type);\n         word(s.s, \"]\");\n     }\n }\n@@ -925,10 +911,9 @@ fn print_pat(&ps s, &@ast::pat pat) {\n         case (ast::pat_lit(?lit,_)) {print_literal(s, lit);}\n         case (ast::pat_tag(?path,?args,_)) {\n             print_path(s, path);\n-            if (vec::len[@ast::pat](args) > 0u) {\n+            if (vec::len(args) > 0u) {\n                 popen(s);\n-                auto f = print_pat;\n-                commasep[@ast::pat](s, inconsistent, args, f);\n+                commasep(s, inconsistent, args, print_pat);\n                 pclose(s);\n             }\n         }\n@@ -973,7 +958,7 @@ fn print_fn_args_and_ret(&ps s, &ast::fn_decl decl) {\n         word(s.s, x.ident);\n         end(s);\n     }\n-    commasep[ast::arg](s, inconsistent, decl.inputs, print_arg);\n+    commasep(s, inconsistent, decl.inputs, print_arg);\n     pclose(s);\n     maybe_print_comment(s, decl.output.span.lo);\n     if (decl.output.node != ast::ty_nil) {\n@@ -992,13 +977,12 @@ fn print_alias(&ps s, ast::mode m) {\n }\n \n fn print_type_params(&ps s, &vec[ast::ty_param] params) {\n-    if (vec::len[ast::ty_param](params) > 0u) {\n+    if (vec::len(params) > 0u) {\n         word(s.s, \"[\");\n         fn printParam(&ps s, &ast::ty_param param) {\n             word(s.s, param);\n         }\n-        auto f = printParam;\n-        commasep[ast::ty_param](s, inconsistent, params, f);\n+        commasep(s, inconsistent, params, printParam);\n         word(s.s, \"]\");\n     }\n }\n@@ -1010,7 +994,7 @@ fn print_view_item(&ps s, &@ast::view_item item) {\n         case (ast::view_item_use(?id,?mta,_,_)) {\n             head(s, \"use\");\n             word(s.s, id);\n-            if (vec::len[@ast::meta_item](mta) > 0u) {\n+            if (vec::len(mta) > 0u) {\n                 popen(s);\n                 fn print_meta(&ps s, &@ast::meta_item item) {\n                     ibox(s, indent_unit);\n@@ -1019,14 +1003,13 @@ fn print_view_item(&ps s, &@ast::view_item item) {\n                     print_string(s, item.node.value);\n                     end(s);\n                 }\n-                auto f = print_meta;\n-                commasep[@ast::meta_item](s, consistent, mta, f);\n+                commasep(s, consistent, mta, print_meta);\n                 pclose(s);\n             }\n         }\n         case (ast::view_item_import(?id,?ids,_)) {\n             head(s, \"import\");\n-            if (!str::eq(id, ids.(vec::len[str](ids)-1u))) {\n+            if (!str::eq(id, ids.(vec::len(ids)-1u))) {\n                 word_space(s, id);\n                 word_space(s, \"=\");\n             }\n@@ -1112,8 +1095,7 @@ fn print_ty_fn(&ps s, &ast::proto proto, &option::t[str] id,\n         print_alias(s, input.node.mode);\n         print_type(s, *input.node.ty);\n     }\n-    auto f = print_arg;\n-    commasep[ast::ty_arg](s, inconsistent, inputs, f);\n+    commasep(s, inconsistent, inputs, print_arg);\n     pclose(s);\n     maybe_print_comment(s, output.span.lo);\n     if (output.node != ast::ty_nil) {"}]}