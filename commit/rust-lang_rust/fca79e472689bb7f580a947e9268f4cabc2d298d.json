{"sha": "fca79e472689bb7f580a947e9268f4cabc2d298d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTc5ZTQ3MjY4OWJiN2Y1ODBhOTQ3ZTkyNjhmNGNhYmMyZDI5OGQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-15T20:05:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:53:58Z"}, "message": "Guide: improve error handling", "tree": {"sha": "a8128bd6bab06912b1b1303098868e041651393f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8128bd6bab06912b1b1303098868e041651393f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca79e472689bb7f580a947e9268f4cabc2d298d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca79e472689bb7f580a947e9268f4cabc2d298d", "html_url": "https://github.com/rust-lang/rust/commit/fca79e472689bb7f580a947e9268f4cabc2d298d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca79e472689bb7f580a947e9268f4cabc2d298d/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f15d6d28396e8700b6c3f2704204a2769e710403", "url": "https://api.github.com/repos/rust-lang/rust/commits/f15d6d28396e8700b6c3f2704204a2769e710403", "html_url": "https://github.com/rust-lang/rust/commit/f15d6d28396e8700b6c3f2704204a2769e710403"}], "stats": {"total": 180, "additions": 131, "deletions": 49}, "files": [{"sha": "cac122ee895c697d6a78d33677c04a1171f8774d", "filename": "src/doc/guide.md", "status": "modified", "additions": 131, "deletions": 49, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/fca79e472689bb7f580a947e9268f4cabc2d298d/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/fca79e472689bb7f580a947e9268f4cabc2d298d/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=fca79e472689bb7f580a947e9268f4cabc2d298d", "patch": "@@ -1143,25 +1143,31 @@ can only be _one_ of `Less`, `Equal`, or `Greater` at any given time. Here's\n an example:\n \n ```rust\n-let x = 5i;\n-let y = 10i;\n+fn cmp(a: int, b: int) -> Ordering {\n+    if a < b { Less }\n+    else if a > b { Greater }\n+    else { Equal }\n+}\n+\n+fn main() {\n+    let x = 5i;\n+    let y = 10i;\n \n-let ordering = x.cmp(&y);\n+    let ordering = cmp(x, y);\n \n-if ordering == Less {\n-    println!(\"less\");\n-} else if ordering == Greater {\n-    println!(\"greater\");\n-} else if ordering == Equal {\n-    println!(\"equal\");\n+    if ordering == Less {\n+        println!(\"less\");\n+    } else if ordering == Greater {\n+        println!(\"greater\");\n+    } else if ordering == Equal {\n+        println!(\"equal\");\n+    }\n }\n ```\n \n-`cmp` is a function that compares two things, and returns an `Ordering`. The\n-call looks a little bit strange: rather than `cmp(x, y)`, we say `x.cmp(&y)`.\n-We haven't covered methods and references yet, so it should look a little bit\n-foreign. Right now, just pretend it says `cmp(x, y)`, and we'll get to those\n-details soon.\n+`cmp` is a function that compares two things, and returns an `Ordering`. We\n+return either `Less`, `Greater`, or `Equal`, depending on if the two values\n+are greater, less, or equal.\n \n The `ordering` variable has the type `Ordering`, and so contains one of the\n three values. We can then do a bunch of `if`/`else` comparisons to check\n@@ -1172,12 +1178,12 @@ that not only makes them nicer to read, but also makes sure that you never\n miss a case. Before we get to that, though, let's talk about another kind of\n enum: one with values.\n \n-This enum has two variants, one of which has a value.:\n+This enum has two variants, one of which has a value:\n \n-```\n+```{rust}\n enum OptionalInt {\n     Value(int),\n-    Missing\n+    Missing,\n }\n \n fn main() {\n@@ -1261,30 +1267,46 @@ for every possible value of `x`, and so our program will now compile.\n section on enums?\n \n ```{rust}\n-let x = 5i;\n-let y = 10i;\n+fn cmp(a: int, b: int) -> Ordering {\n+    if a < b { Less }\n+    else if a > b { Greater }\n+    else { Equal }\n+}\n+\n+fn main() {\n+    let x = 5i;\n+    let y = 10i;\n \n-let ordering = x.cmp(&y);\n+    let ordering = cmp(x, y);\n \n-if ordering == Less {\n-    println!(\"less\");\n-} else if ordering == Greater {\n-    println!(\"greater\");\n-} else if ordering == Equal {\n-    println!(\"equal\");\n+    if ordering == Less {\n+        println!(\"less\");\n+    } else if ordering == Greater {\n+        println!(\"greater\");\n+    } else if ordering == Equal {\n+        println!(\"equal\");\n+    }\n }\n ```\n \n We can re-write this as a `match`:\n \n ```{rust}\n-let x = 5i;\n-let y = 10i;\n+fn cmp(a: int, b: int) -> Ordering {\n+    if a < b { Less }\n+    else if a > b { Greater }\n+    else { Equal }\n+}\n \n-match x.cmp(&y) {\n-    Less    => println!(\"less\"),\n-    Greater => println!(\"greater\"),\n-    Equal   => println!(\"equal\"),\n+fn main() {\n+    let x = 5i;\n+    let y = 10i;\n+\n+    match cmp(x, y) {\n+        Less    => println!(\"less\"),\n+        Greater => println!(\"greater\"),\n+        Equal   => println!(\"equal\"),\n+    }\n }\n ```\n \n@@ -1297,17 +1319,25 @@ make sure to cover all of our bases.\n `match` is also an expression, which means we can use it on the right hand side\n of a `let` binding. We could also implement the previous line like this:\n \n-```\n-let x = 5i;\n-let y = 10i;\n+```{rust}\n+fn cmp(a: int, b: int) -> Ordering {\n+    if a < b { Less }\n+    else if a > b { Greater }\n+    else { Equal }\n+}\n \n-let result = match x.cmp(&y) {\n-    Less    => \"less\",\n-    Greater => \"greater\",\n-    Equal   => \"equal\",\n-};\n+fn main() {\n+    let x = 5i;\n+    let y = 10i;\n \n-println!(\"{}\", result);\n+    let result = match cmp(x, y) {\n+        Less    => \"less\",\n+        Greater => \"greater\",\n+        Equal   => \"equal\",\n+    };\n+\n+    println!(\"{}\", result);\n+}\n ```\n \n In this case, it doesn't make a lot of sense, as we are just making a temporary\n@@ -1527,16 +1557,68 @@ a full line of input. Nice and easy.\n .ok().expect(\"Failed to read line\");\n ```\n \n-Here's the thing: reading a line from standard input could fail. For example,\n-if this program isn't running in a terminal, but is running as part of a cron\n-job, or some other context where there's no standard input. So Rust expects us\n-to handle this case. Given that we plan on always running this program in a\n-terminal, we use the `ok()` method to tell Rust that we're expecting everything\n-to be just peachy, and the `expect()` method on that result to give an error\n-message if our expectation goes wrong.\n+Do you remember this code? \n+\n+```\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+\n+fn main() {\n+    let x = Value(5);\n+    let y = Missing;\n+\n+    match x {\n+        Value(n) => println!(\"x is {:d}\", n),\n+        Missing  => println!(\"x is missing!\"),\n+    }\n+\n+    match y {\n+        Value(n) => println!(\"y is {:d}\", n),\n+        Missing  => println!(\"y is missing!\"),\n+    }\n+}\n+```\n+\n+We had to match each time, to see if we had a value or not. In this case,\n+though, we _know_ that `x` has a `Value`. But `match` forces us to handle\n+the `missing` case. This is what we want 99% of the time, but sometimes, we\n+know better than the compiler.\n+\n+Likewise, `read_line()` does not return a line of input. It _might_ return a\n+line of input. It might also fail to do so. This could happen if our program\n+isn't running in a terminal, but as part of a cron job, or some other context\n+where there's no standard input. Because of this, `read_line` returns a type\n+very similar to our `OptionalInt`: an `IoResult<T>`. We haven't talked about\n+`IoResult<T>` yet because it is the **generic** form of our `OptionalInt`.\n+Until then, you can think of it as being the same thing, just for any type, not\n+just `int`s.\n+\n+Rust provides a method on these `IoResult<T>`s called `ok()`, which does the\n+same thing as our `match` statement, but assuming that we have a valid value.\n+If we don't, it will terminate our program. In this case, if we can't get\n+input, our program doesn't work, so we're okay with that. In most cases, we\n+would want to handle the error case explicitly. The result of `ok()` has a\n+method, `expect()`, which allows us to give an error message if this crash\n+happens.\n \n We will cover the exact details of how all of this works later in the Guide.\n-For now, this is all you need.\n+For now, this gives you enough of a basic understanding to work with.\n+\n+Back to the code we were working on! Here's a refresher:\n+\n+```{rust,ignore}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = io::stdin().read_line().ok().expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n \n With long lines like this, Rust gives you some flexibility with the whitespace.\n We _could_ write the example like this:"}]}