{"sha": "10b75cbbb04796cdf5264616493f3a20eb43ed0c", "node_id": "C_kwDOAAsO6NoAKDEwYjc1Y2JiYjA0Nzk2Y2RmNTI2NDYxNjQ5M2YzYTIwZWI0M2VkMGM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-15T15:24:54Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T18:59:46Z"}, "message": "Start emitting labels even if their pointed to file is not available locally", "tree": {"sha": "b012753c128f4159c32345efc1e4bebea62a5a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b012753c128f4159c32345efc1e4bebea62a5a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b75cbbb04796cdf5264616493f3a20eb43ed0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b75cbbb04796cdf5264616493f3a20eb43ed0c", "html_url": "https://github.com/rust-lang/rust/commit/10b75cbbb04796cdf5264616493f3a20eb43ed0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b75cbbb04796cdf5264616493f3a20eb43ed0c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d7dceed302b254f21fd77084ff6b468305058a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d7dceed302b254f21fd77084ff6b468305058a", "html_url": "https://github.com/rust-lang/rust/commit/19d7dceed302b254f21fd77084ff6b468305058a"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "7e1effd83789c370815fca697cdf72f7bb668489", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/10b75cbbb04796cdf5264616493f3a20eb43ed0c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b75cbbb04796cdf5264616493f3a20eb43ed0c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=10b75cbbb04796cdf5264616493f3a20eb43ed0c", "patch": "@@ -773,6 +773,7 @@ impl EmitterWriter {\n         draw_col_separator_no_space(buffer, line_offset, width_offset - 2);\n     }\n \n+    #[instrument(level = \"trace\", skip(self), ret)]\n     fn render_source_line(\n         &self,\n         buffer: &mut StyledBuffer,\n@@ -804,6 +805,7 @@ impl EmitterWriter {\n             Some(s) => normalize_whitespace(&s),\n             None => return Vec::new(),\n         };\n+        trace!(?source_string);\n \n         let line_offset = buffer.num_lines();\n \n@@ -1323,6 +1325,7 @@ impl EmitterWriter {\n         }\n     }\n \n+    #[instrument(level = \"trace\", skip(self, args), ret)]\n     fn emit_message_default(\n         &mut self,\n         msp: &MultiSpan,\n@@ -1384,6 +1387,7 @@ impl EmitterWriter {\n             }\n         }\n         let mut annotated_files = FileWithAnnotatedLines::collect_annotations(self, args, msp);\n+        trace!(\"{annotated_files:#?}\");\n \n         // Make sure our primary file comes first\n         let primary_span = msp.primary_span().unwrap_or_default();\n@@ -1402,6 +1406,42 @@ impl EmitterWriter {\n         for annotated_file in annotated_files {\n             // we can't annotate anything if the source is unavailable.\n             if !sm.ensure_source_file_source_present(annotated_file.file.clone()) {\n+                if !self.short_message {\n+                    // We'll just print an unannotated message.\n+                    for line in annotated_file.lines {\n+                        let mut annotations = line.annotations.clone();\n+                        annotations.sort_by_key(|a| Reverse(a.start_col));\n+                        let mut line_idx = buffer.num_lines();\n+                        buffer.append(\n+                            line_idx,\n+                            &format!(\n+                                \"{}:{}:{}\",\n+                                sm.filename_for_diagnostics(&annotated_file.file.name),\n+                                sm.doctest_offset_line(&annotated_file.file.name, line.line_index),\n+                                annotations[0].start_col + 1,\n+                            ),\n+                            Style::LineAndColumn,\n+                        );\n+                        let prefix = if annotations.len() > 1 {\n+                            buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+                            line_idx += 1;\n+                            \"note: \"\n+                        } else {\n+                            \": \"\n+                        };\n+                        for (i, annotation) in annotations.into_iter().enumerate() {\n+                            if let Some(label) = &annotation.label {\n+                                let style = if annotation.is_primary {\n+                                    Style::LabelPrimary\n+                                } else {\n+                                    Style::LabelSecondary\n+                                };\n+                                buffer.append(line_idx + i, prefix, style);\n+                                buffer.append(line_idx + i, label, style);\n+                            }\n+                        }\n+                    }\n+                }\n                 continue;\n             }\n \n@@ -1648,6 +1688,7 @@ impl EmitterWriter {\n                     multilines.extend(&to_add);\n                 }\n             }\n+            trace!(\"buffer: {:#?}\", buffer.render());\n         }\n \n         if let Some(tracked) = emitted_at {\n@@ -1971,6 +2012,7 @@ impl EmitterWriter {\n         Ok(())\n     }\n \n+    #[instrument(level = \"trace\", skip(self, args, code, children, suggestions))]\n     fn emit_messages_default(\n         &mut self,\n         level: &Level,"}, {"sha": "dd4ee3bed4417cbe1b47e06a71d588852bb55d33", "filename": "src/test/ui/consts/missing_span_in_backtrace.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10b75cbbb04796cdf5264616493f3a20eb43ed0c/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b75cbbb04796cdf5264616493f3a20eb43ed0c/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs?ref=10b75cbbb04796cdf5264616493f3a20eb43ed0c", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z translate-remapped-path-to-local-path=no\n+\n+#![feature(const_swap)]\n+#![feature(const_mut_refs)]\n+use std::{\n+    mem::{self, MaybeUninit},\n+    ptr,\n+};\n+\n+const X: () = {\n+    let mut ptr1 = &1;\n+    let mut ptr2 = &2;\n+\n+    // Swap them, bytewise.\n+    unsafe {\n+        ptr::swap_nonoverlapping(\n+            &mut ptr1 as *mut _ as *mut MaybeUninit<u8>,\n+            &mut ptr2 as *mut _ as *mut MaybeUninit<u8>,\n+            mem::size_of::<&i32>(),\n+        );\n+    }\n+};\n+\n+fn main() {\n+    X\n+}"}, {"sha": "9969d5b63e77f188216368899a9bc8b76868048f", "filename": "src/test/ui/consts/missing_span_in_backtrace.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10b75cbbb04796cdf5264616493f3a20eb43ed0c/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b75cbbb04796cdf5264616493f3a20eb43ed0c/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr?ref=10b75cbbb04796cdf5264616493f3a20eb43ed0c", "patch": "@@ -0,0 +1,23 @@\n+error[E0080]: evaluation of constant value failed\n+/rustc/xyz/library/core/src/ptr/mod.rs:929:14: inside `swap_nonoverlapping::<MaybeUninit<u8>>` at /rustc/xyz/library/core/src/ptr/mod.rs:929:14\n+/rustc/xyz/library/core/src/ptr/mod.rs:948:9: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>` at /rustc/xyz/library/core/src/ptr/mod.rs:948:9\n+--> /rustc/xyz/library/core/src/ptr/mod.rs:1139:9\n+note: unable to copy parts of a pointer from memory at alloc6+0x1\n+note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>` at /rustc/xyz/library/core/src/ptr/mod.rs:1139:9\n+/rustc/xyz/library/core/src/mem/mod.rs:776:17: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>` at /rustc/xyz/library/core/src/mem/mod.rs:776:17\n+   |\n+  ::: $DIR/missing_span_in_backtrace.rs:16:9\n+   |\n+LL | /         ptr::swap_nonoverlapping(\n+LL | |             &mut ptr1 as *mut _ as *mut MaybeUninit<u8>,\n+LL | |             &mut ptr2 as *mut _ as *mut MaybeUninit<u8>,\n+LL | |             mem::size_of::<&i32>(),\n+LL | |         );\n+   | |_________- inside `X` at $DIR/missing_span_in_backtrace.rs:16:9\n+   |\n+   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n+   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c0268ec683f74deb8452b6cc08f0cdcde10888bf", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b75cbbb04796cdf5264616493f3a20eb43ed0c/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b75cbbb04796cdf5264616493f3a20eb43ed0c/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=10b75cbbb04796cdf5264616493f3a20eb43ed0c", "patch": "@@ -7,6 +7,7 @@ error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n+/rustc/xyz/library/core/src/error.rs:31:26: required by this bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n  --> $DIR/issue-71363.rs:4:6\n@@ -17,6 +18,7 @@ error[E0277]: `MyError` doesn't implement `Debug`\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n+/rustc/xyz/library/core/src/error.rs:31:18: required by this bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n 3 | #[derive(Debug)]"}]}