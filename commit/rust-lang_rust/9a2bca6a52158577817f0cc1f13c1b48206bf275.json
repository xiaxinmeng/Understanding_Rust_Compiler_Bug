{"sha": "9a2bca6a52158577817f0cc1f13c1b48206bf275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmJjYTZhNTIxNTg1Nzc4MTdmMGNjMWYxM2MxYjQ4MjA2YmYyNzU=", "commit": {"author": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-16T00:00:23Z"}, "committer": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-16T15:23:57Z"}, "message": "rustc: fix check_attr() for methods, closures and foreign functions\n\nUI tests are updated with additional error messages that were missing\nbefore.", "tree": {"sha": "1ca1a7518440f53d6a800783c40a1d8d85dce5b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca1a7518440f53d6a800783c40a1d8d85dce5b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2bca6a52158577817f0cc1f13c1b48206bf275", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEZmTnvaa2aYgexS51Fu8/ZMsgHZwFAl6YeJEACgkQFu8/ZMsg\nHZz2KhAAkQc9N6ECJDm3a4V0i0+ZZcUYwii9vN/q/Rzc+XlZXtjBAEw1IWjN3zQB\nL4LlpljPoTTRRWMr5sWFfrWA32K0LoE1M11J5h4MZYtM3Nv/iB6aHdiqyoxDfIZF\ngK47GYJXDI/aLx5uJzptxw50GAUujx4GV4HXQzsfFdTiHMpvp2xRKB6WpdgUMH/Q\nKYdJljE/JOu6MGDHuBNRuwdQGTzJNsNkVMKMnVAN5rEcxnyg9RkajrTgWOTCyRMj\nUtwvgsXRRx9dvwPGS/z2FBmZsdPCsVaDhafQMSnWVtiGgwBCFshV6w2HtdY48dcc\nSSiXIbBef/eek7K59cRCc5H5RsyrS94nv/BOp1EWaEIzzCHAWJ45XXxJB2zwDo3E\n/BkdSuddy0ffE8HxScwZsjF647kxCWiv98BkRncJcqhMGfl4U2yQ5NZ5270svqm3\nTLrWGuA520TsrLYdOb3nyQ9y+b+SxQehhh/YwHhHYBAdrjVg01Vj4gBFo0PDWG1w\nlHyLbjHVgYbMh7e4kjNFTzO/M1t82cbjNMULH7GyAbHZ+dHshzXwnxoa98xnxBNg\nrq9p5m1HIxzBxVBsDGknGmbpC/hIhsbDL76PiVnL+7LWqUQFksZX75PxLVATiOhv\n3dxSxfccJRSmCBxYQ0Z2oPtEgN8CgIIMdNPO+6V5a3pLlusjomE=\n=VZ0a\n-----END PGP SIGNATURE-----", "payload": "tree 1ca1a7518440f53d6a800783c40a1d8d85dce5b8\nparent df768c5c8fcb361c4dc94b4c776d6a78c12862e1\nauthor Matthias Schiffer <mschiffer@universe-factory.net> 1586995223 +0200\ncommitter Matthias Schiffer <mschiffer@universe-factory.net> 1587050637 +0200\n\nrustc: fix check_attr() for methods, closures and foreign functions\n\nUI tests are updated with additional error messages that were missing\nbefore.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2bca6a52158577817f0cc1f13c1b48206bf275", "html_url": "https://github.com/rust-lang/rust/commit/9a2bca6a52158577817f0cc1f13c1b48206bf275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2bca6a52158577817f0cc1f13c1b48206bf275/comments", "author": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "html_url": "https://github.com/rust-lang/rust/commit/df768c5c8fcb361c4dc94b4c776d6a78c12862e1"}], "stats": {"total": 95, "additions": 75, "deletions": 20}, "files": [{"sha": "b1b58b0e3532ba2fbcbdc4650776a9037060a9cf", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -76,7 +76,7 @@ impl CheckAttrVisitor<'tcx> {\n             return;\n         }\n \n-        if target == Target::Fn {\n+        if matches!(target, Target::Fn | Target::Method(_) | Target::ForeignFn) {\n             self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n@@ -391,6 +391,9 @@ impl CheckAttrVisitor<'tcx> {\n                 );\n             }\n         }\n+        if target == Target::Closure {\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(expr.hir_id));\n+        }\n     }\n \n     fn check_used(&self, attrs: &'hir [Attribute], target: Target) {"}, {"sha": "eecf2046ccbeaf45624054f2e4ccb2db740dbdd6", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -8,24 +8,28 @@\n struct Foo;\n impl Fn<()> for Foo {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `Fn` are experimental\n     extern \"rust-call\" fn call(self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Foo1;\n impl FnOnce() for Foo1 {\n //~^ ERROR associated type bindings are not allowed here\n+//~| ERROR manual implementations of `FnOnce` are experimental\n     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Bar;\n impl FnMut<()> for Bar {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `FnMut` are experimental\n     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }\n struct Baz;\n impl FnOnce<()> for Baz {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `FnOnce` are experimental\n     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n     //~^ ERROR rust-call ABI is subject to change\n }"}, {"sha": "22a1ce306188971b98c90c42c8fe8802697fd6b1", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:12:12\n    |\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:19:12\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:26:12\n    |\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:33:12\n    |\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n@@ -44,13 +44,13 @@ LL | impl Fn<()> for Foo {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:6\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6\n    |\n LL | impl FnOnce() for Foo1 {\n    |      ^^^^^^^^ associated type not allowed here\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6\n    |\n LL | impl FnMut<()> for Bar {\n    |      ^^^^^^^^^ help: use parenthetical notation instead: `FnMut() -> ()`\n@@ -59,15 +59,47 @@ LL | impl FnMut<()> for Bar {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:27:6\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6\n    |\n LL | impl FnOnce<()> for Baz {\n    |      ^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce() -> ()`\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error: aborting due to 8 previous errors\n+error[E0183]: manual implementations of `Fn` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:1\n+   |\n+LL | impl Fn<()> for Foo {\n+   | ^^^^^^^^^^^^^^^^^^^ manual implementations of `Fn` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnMut` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:1\n+   |\n+LL | impl FnMut<()> for Bar {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnMut` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:1\n+   |\n+LL | impl FnOnce() for Foo1 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:1\n+   |\n+LL | impl FnOnce<()> for Baz {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0229, E0658.\n For more information about an error, try `rustc --explain E0229`."}, {"sha": "ebc5a2536f672b509c756fad5c34393927f9d7d6", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.rs?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -4,6 +4,7 @@ struct Test;\n \n impl FnOnce<(u32, u32)> for Test {\n //~^ ERROR the precise format of `Fn`-family traits' type parameters is subject to change\n+//~| ERROR manual implementations of `FnOnce` are experimental\n     type Output = u32;\n \n     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {"}, {"sha": "2c8915d0ac3346e43bdf9d794d8785fd918b80ac", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures.rs:9:12\n+  --> $DIR/feature-gate-unboxed-closures.rs:10:12\n    |\n LL |     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n    |            ^^^^^^^^^^^\n@@ -16,6 +16,14 @@ LL | impl FnOnce<(u32, u32)> for Test {\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures.rs:5:1\n+   |\n+LL | impl FnOnce<(u32, u32)> for Test {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "030677c879fb516cf0507e0cafd28c3e8799a0d2", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -1,10 +1,13 @@\n+// ignore-tidy-linelength\n+\n fn foo<T>() {\n     struct Foo {\n         x: T, //~ ERROR can't use generic parameters from outer function\n     }\n \n     impl<T> Drop for Foo<T> {\n         //~^ ERROR wrong number of type arguments\n+        //~| ERROR the type parameter `T` is not constrained by the impl trait, self type, or predicates\n         fn drop(&mut self) {}\n     }\n }"}, {"sha": "30bc6cb115ffc08a7f3beff28d73ffa53956aaa5", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -1,5 +1,5 @@\n error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/issue-3214.rs:3:12\n+  --> $DIR/issue-3214.rs:5:12\n    |\n LL | fn foo<T>() {\n    |    --- - type parameter from outer function\n@@ -10,12 +10,18 @@ LL |         x: T,\n    |            ^ use of generic parameter from outer function\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-3214.rs:6:26\n+  --> $DIR/issue-3214.rs:8:26\n    |\n LL |     impl<T> Drop for Foo<T> {\n    |                          ^ unexpected type argument\n \n-error: aborting due to 2 previous errors\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-3214.rs:8:10\n+   |\n+LL |     impl<T> Drop for Foo<T> {\n+   |          ^ unconstrained type parameter\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0401.\n+Some errors have detailed explanations: E0107, E0207, E0401.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "bc70f8ffec2b288982c762941bd1b8a4543f711f", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -1,5 +1,3 @@\n-// build-fail\n-\n #![feature(track_caller)]\n \n fn main() {"}, {"sha": "3ea49e614e6337ba186d77cab71876efbdb8dc23", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2bca6a52158577817f0cc1f13c1b48206bf275/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=9a2bca6a52158577817f0cc1f13c1b48206bf275", "patch": "@@ -1,5 +1,5 @@\n error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/issue-68060.rs:8:13\n+  --> $DIR/issue-68060.rs:6:13\n    |\n LL |             #[target_feature(enable = \"\")]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n@@ -8,13 +8,13 @@ LL |             |_| (),\n    |             ------ not an `unsafe` function\n \n error: the feature named `` is not valid for this target\n-  --> $DIR/issue-68060.rs:8:30\n+  --> $DIR/issue-68060.rs:6:30\n    |\n LL |             #[target_feature(enable = \"\")]\n    |                              ^^^^^^^^^^^ `` is not valid for this target\n \n error[E0737]: `#[track_caller]` requires Rust ABI\n-  --> $DIR/issue-68060.rs:11:13\n+  --> $DIR/issue-68060.rs:9:13\n    |\n LL |             #[track_caller]\n    |             ^^^^^^^^^^^^^^^"}]}