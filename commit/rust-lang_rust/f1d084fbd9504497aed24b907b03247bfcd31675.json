{"sha": "f1d084fbd9504497aed24b907b03247bfcd31675", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZDA4NGZiZDk1MDQ0OTdhZWQyNGI5MDdiMDMyNDdiZmNkMzE2NzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-09T14:19:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-09T14:19:14Z"}, "message": "Merge #5282\n\n5282: Move diagnostics tests to expect r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2e4d75008c01531075bced1596ec65047d74ca91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4d75008c01531075bced1596ec65047d74ca91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d084fbd9504497aed24b907b03247bfcd31675", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBydiCRBK7hj4Ov3rIwAAdHIIAG7AQWVJCNFUn4poIhcMVODP\nFAkawmmEYDAGptWce7dooNGjWJgco9pbDnao1Jbs/bPtN1Ptpw4AEY+0tR4XeFRF\nmeLueFHZIQ7NKcHaCBs/05uudnYLjAO+r8O4xZGY3O5pif+DwWPqRHTU9aUrlSYH\ncXGU8EoeroRxiwt1AoTwb3Vlxnnn7aVS3gRjkhHaCVHLPnPRdrJpshMOG0LwoJ8d\nZqTZU9GgyueojqFnQBHjhi534OPSXcIqbfEjABM192s54hhE1Tl72RTugscA0+wC\njD1PhUPxbiDdzCFXv7ef5v6Dj1Uqrfa7JGG2lQKgxkrUxHtMpBOlO3ea630cyiM=\n=E4A0\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e4d75008c01531075bced1596ec65047d74ca91\nparent 6132111f87a6891db28ce37909607034c228f7a9\nparent 65d9966a4f6c35b63f97c16f5f62f83a04574f3e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594304354 +0000\ncommitter GitHub <noreply@github.com> 1594304354 +0000\n\nMerge #5282\n\n5282: Move diagnostics tests to expect r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d084fbd9504497aed24b907b03247bfcd31675", "html_url": "https://github.com/rust-lang/rust/commit/f1d084fbd9504497aed24b907b03247bfcd31675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d084fbd9504497aed24b907b03247bfcd31675/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6132111f87a6891db28ce37909607034c228f7a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6132111f87a6891db28ce37909607034c228f7a9", "html_url": "https://github.com/rust-lang/rust/commit/6132111f87a6891db28ce37909607034c228f7a9"}, {"sha": "65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "html_url": "https://github.com/rust-lang/rust/commit/65d9966a4f6c35b63f97c16f5f62f83a04574f3e"}], "stats": {"total": 609, "additions": 201, "deletions": 408}, "files": [{"sha": "b429aae01e5a74debd3bc4cbaa1e5a40d0af7327", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1435,9 +1435,9 @@ dependencies = [\n  \"anyhow\",\n  \"crossbeam-channel\",\n  \"env_logger\",\n+ \"expect\",\n  \"flycheck\",\n  \"globset\",\n- \"insta\",\n  \"itertools\",\n  \"jod-thread\",\n  \"log\","}, {"sha": "21a458d477c56414408fa7b8d4306e64c0ba6c77", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -121,6 +121,10 @@ impl ExpectFile {\n         }\n         Runtime::fail_file(self, &expected, actual);\n     }\n+    pub fn assert_debug_eq(&self, actual: &impl fmt::Debug) {\n+        let actual = format!(\"{:#?}\\n\", actual);\n+        self.assert_eq(&actual)\n+    }\n     fn read(&self) -> String {\n         fs::read_to_string(self.abs_path()).unwrap_or_default().replace(\"\\r\\n\", \"\\n\")\n     }"}, {"sha": "6804d9bda08aba669ff950e8d6df8ace4182846f", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -14,7 +14,8 @@ use std::{\n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n \n pub use cargo_metadata::diagnostic::{\n-    Applicability, Diagnostic, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion,\n+    Applicability, Diagnostic, DiagnosticCode, DiagnosticLevel, DiagnosticSpan,\n+    DiagnosticSpanMacroExpansion,\n };\n \n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "48afee5fb4a12f37de93656a8f0f8ab99f9d952c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -491,7 +491,7 @@ mod tests {\n             }\n         }\n \n-        let mut completions = get_all_completion_items(ra_fixture, &CompletionConfig::default());\n+        let mut completions = get_all_completion_items(CompletionConfig::default(), ra_fixture);\n         completions.sort_by_key(|it| (Reverse(it.score()), it.label().to_string()));\n         let actual = completions\n             .into_iter()\n@@ -835,6 +835,7 @@ fn bar(s: &S) {\n     fn suppress_arg_snippets() {\n         mark::check!(suppress_arg_snippets);\n         check_edit_with_config(\n+            CompletionConfig { add_call_argument_snippets: false, ..CompletionConfig::default() },\n             \"with_args\",\n             r#\"\n fn with_args(x: i32, y: String) {}\n@@ -844,7 +845,6 @@ fn main() { with_<|> }\n fn with_args(x: i32, y: String) {}\n fn main() { with_args($0) }\n \"#,\n-            &CompletionConfig { add_call_argument_snippets: false, ..CompletionConfig::default() },\n         );\n     }\n "}, {"sha": "9191777455be079f7942b1a010c1c5cf81bae96f", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -13,15 +13,15 @@ use crate::{\n };\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_config(code, kind, &CompletionConfig::default())\n+    do_completion_with_config(CompletionConfig::default(), code, kind)\n }\n \n pub(crate) fn do_completion_with_config(\n+    config: CompletionConfig,\n     code: &str,\n     kind: CompletionKind,\n-    config: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n-    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, config)\n+    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(config, code)\n         .into_iter()\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n@@ -30,15 +30,15 @@ pub(crate) fn do_completion_with_config(\n }\n \n pub(crate) fn completion_list(code: &str, kind: CompletionKind) -> String {\n-    completion_list_with_config(code, kind, &CompletionConfig::default())\n+    completion_list_with_config(CompletionConfig::default(), code, kind)\n }\n \n pub(crate) fn completion_list_with_config(\n+    config: CompletionConfig,\n     code: &str,\n     kind: CompletionKind,\n-    config: &CompletionConfig,\n ) -> String {\n-    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, config)\n+    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(config, code)\n         .into_iter()\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n@@ -70,19 +70,19 @@ fn monospace_width(s: &str) -> usize {\n }\n \n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check_edit_with_config(what, ra_fixture_before, ra_fixture_after, &CompletionConfig::default())\n+    check_edit_with_config(CompletionConfig::default(), what, ra_fixture_before, ra_fixture_after)\n }\n \n pub(crate) fn check_edit_with_config(\n+    config: CompletionConfig,\n     what: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    config: &CompletionConfig,\n ) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (analysis, position) = analysis_and_position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        analysis.completions(config, position).unwrap().unwrap().into();\n+        analysis.completions(&config, position).unwrap().unwrap().into();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)\n@@ -106,9 +106,9 @@ pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -\n }\n \n pub(crate) fn get_all_completion_items(\n+    config: CompletionConfig,\n     code: &str,\n-    options: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n     let (analysis, position) = analysis_and_position(code);\n-    analysis.completions(options, position).unwrap().unwrap().into()\n+    analysis.completions(&config, position).unwrap().unwrap().into()\n }"}, {"sha": "35ab741d82cf4f894f0d1d3c00c4bc9212692c79", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -351,10 +351,10 @@ mod tests {\n     use crate::{inlay_hints::InlayHintsConfig, mock_analysis::single_file};\n \n     fn check(ra_fixture: &str) {\n-        check_with_config(ra_fixture, InlayHintsConfig::default());\n+        check_with_config(InlayHintsConfig::default(), ra_fixture);\n     }\n \n-    fn check_with_config(ra_fixture: &str, config: InlayHintsConfig) {\n+    fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = single_file(ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n@@ -363,7 +363,7 @@ mod tests {\n         assert_eq!(expected, actual);\n     }\n \n-    fn check_expect(ra_fixture: &str, config: InlayHintsConfig, expect: Expect) {\n+    fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n@@ -372,6 +372,12 @@ mod tests {\n     #[test]\n     fn param_hints_only() {\n         check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n             r#\"\n fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n@@ -382,47 +388,41 @@ fn main() {\n       //^ b\n     );\n }\"#,\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n         );\n     }\n \n     #[test]\n     fn hints_disabled() {\n         check_with_config(\n-            r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n-fn main() {\n-    let _x = foo(4, 4);\n-}\"#,\n             InlayHintsConfig {\n                 type_hints: false,\n                 parameter_hints: false,\n                 chaining_hints: false,\n                 max_length: None,\n             },\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(4, 4);\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn type_hints_only() {\n         check_with_config(\n-            r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n-fn main() {\n-    let _x = foo(4, 4);\n-      //^^ i32\n-}\"#,\n             InlayHintsConfig {\n                 type_hints: true,\n                 parameter_hints: false,\n                 chaining_hints: false,\n                 max_length: None,\n             },\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(4, 4);\n+      //^^ i32\n+}\"#,\n         );\n     }\n \n@@ -590,6 +590,7 @@ fn main() {\n     #[test]\n     fn hint_truncation() {\n         check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n             r#\"\n struct Smol<T>(T);\n \n@@ -603,7 +604,6 @@ fn main() {\n     let c = Smol(Smol(0u32))\n       //^ Smol<Smol<\u2026>>\n }\"#,\n-            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n         );\n     }\n \n@@ -673,6 +673,7 @@ fn main() {\n     #[test]\n     fn omitted_parameters_hints_heuristics() {\n         check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n             r#\"\n fn map(f: i32) {}\n fn filter(predicate: i32) {}\n@@ -753,13 +754,13 @@ fn main() {\n     let _: f64 = a.div_euclid(b);\n     let _: f64 = a.abs_sub(b);\n }\"#,\n-            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n         );\n     }\n \n     #[test]\n     fn unit_structs_have_no_type_hints() {\n         check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n             r#\"\n enum Result<T, E> { Ok(T), Err(E) }\n use Result::*;\n@@ -772,13 +773,18 @@ fn main() {\n         Err(SyntheticSyntax) => (),\n     }\n }\"#,\n-            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n         );\n     }\n \n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -792,12 +798,6 @@ fn main() {\n         .into_c();\n }\n \"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n             expect![[r#\"\n                 [\n                     InlayHint {\n@@ -818,6 +818,12 @@ fn main() {\n     #[test]\n     fn chaining_hints_without_newlines() {\n         check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -828,18 +834,18 @@ struct C;\n fn main() {\n     let c = A(B(C)).into_b().into_c();\n }\"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n         );\n     }\n \n     #[test]\n     fn struct_access_chaining_hints() {\n         check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n@@ -858,12 +864,6 @@ fn main() {\n     let x = D\n         .foo();\n }\"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n             expect![[r#\"\n                 [\n                     InlayHint {\n@@ -884,6 +884,12 @@ fn main() {\n     #[test]\n     fn generic_chaining_hints() {\n         check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A<T>(T);\n struct B<T>(T);\n@@ -903,12 +909,6 @@ fn main() {\n         .into_c();\n }\n \"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n             expect![[r#\"\n                 [\n                     InlayHint {"}, {"sha": "dc8dbbe772232ea6442c7aba0de8bee80827c28c", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -58,7 +58,7 @@ winapi = \"0.3.8\"\n \n [dev-dependencies]\n tempfile = \"3.1.0\"\n-insta = \"0.16.0\"\n+expect = { path = \"../expect\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }"}, {"sha": "d24c55cee6ecb95d63db9459b50d6f88e62750dc", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -18,7 +18,9 @@ pub struct DiagnosticsConfig {\n \n #[derive(Debug, Default, Clone)]\n pub(crate) struct DiagnosticCollection {\n+    // FIXME: should be FxHashMap<FileId, Vec<ra_id::Diagnostic>>\n     pub(crate) native: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    // FIXME: should be Vec<flycheck::Diagnostic>\n     pub(crate) check: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n     pub(crate) check_fixes: CheckFixes,\n     changes: FxHashSet<FileId>,"}, {"sha": "b1b222deb82809dcd402667fc406bf7872d5af83", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 120, "deletions": 174, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -2,34 +2,33 @@\n //! `cargo check` json format to the LSP diagnostic format.\n use std::{collections::HashMap, path::Path};\n \n-use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n-use lsp_types::{\n-    Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n-    NumberOrString, Position, Range, TextEdit, Url,\n-};\n+use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n use super::DiagnosticsConfig;\n \n /// Determines the LSP severity from a diagnostic\n-fn map_diagnostic_to_severity(\n+fn diagnostic_severity(\n     config: &DiagnosticsConfig,\n-    val: &flycheck::Diagnostic,\n-) -> Option<DiagnosticSeverity> {\n-    let res = match val.level {\n-        DiagnosticLevel::Ice => DiagnosticSeverity::Error,\n-        DiagnosticLevel::Error => DiagnosticSeverity::Error,\n-        DiagnosticLevel::Warning => match &val.code {\n-            Some(code) if config.warnings_as_hint.contains(&code.code) => DiagnosticSeverity::Hint,\n+    level: flycheck::DiagnosticLevel,\n+    code: Option<flycheck::DiagnosticCode>,\n+) -> Option<lsp_types::DiagnosticSeverity> {\n+    let res = match level {\n+        DiagnosticLevel::Ice => lsp_types::DiagnosticSeverity::Error,\n+        DiagnosticLevel::Error => lsp_types::DiagnosticSeverity::Error,\n+        DiagnosticLevel::Warning => match &code {\n+            Some(code) if config.warnings_as_hint.contains(&code.code) => {\n+                lsp_types::DiagnosticSeverity::Hint\n+            }\n             Some(code) if config.warnings_as_info.contains(&code.code) => {\n-                DiagnosticSeverity::Information\n+                lsp_types::DiagnosticSeverity::Information\n             }\n-            _ => DiagnosticSeverity::Warning,\n+            _ => lsp_types::DiagnosticSeverity::Warning,\n         },\n-        DiagnosticLevel::Note => DiagnosticSeverity::Information,\n-        DiagnosticLevel::Help => DiagnosticSeverity::Hint,\n+        DiagnosticLevel::Note => lsp_types::DiagnosticSeverity::Information,\n+        DiagnosticLevel::Help => lsp_types::DiagnosticSeverity::Hint,\n         DiagnosticLevel::Unknown => return None,\n     };\n     Some(res)\n@@ -40,90 +39,50 @@ fn is_from_macro(file_name: &str) -> bool {\n     file_name.starts_with('<') && file_name.ends_with('>')\n }\n \n-/// Converts a Rust macro span to a LSP location recursively\n-fn map_macro_span_to_location(\n-    span_macro: &DiagnosticSpanMacroExpansion,\n-    workspace_root: &Path,\n-) -> Option<Location> {\n-    if !is_from_macro(&span_macro.span.file_name) {\n-        return Some(map_span_to_location(&span_macro.span, workspace_root));\n-    }\n-\n-    if let Some(expansion) = &span_macro.span.expansion {\n-        return map_macro_span_to_location(&expansion, workspace_root);\n-    }\n-\n-    None\n-}\n-\n /// Converts a Rust span to a LSP location, resolving macro expansion site if neccesary\n-fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &Path) -> Location {\n-    if span.expansion.is_some() {\n-        let expansion = span.expansion.as_ref().unwrap();\n-        if let Some(macro_range) = map_macro_span_to_location(&expansion, workspace_root) {\n-            return macro_range;\n-        }\n+fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+    let mut span = span.clone();\n+    while let Some(expansion) = span.expansion {\n+        span = expansion.span;\n     }\n-\n-    map_span_to_location_naive(span, workspace_root)\n+    return location_naive(workspace_root, &span);\n }\n \n /// Converts a Rust span to a LSP location\n-fn map_span_to_location_naive(span: &DiagnosticSpan, workspace_root: &Path) -> Location {\n-    let mut file_name = workspace_root.to_path_buf();\n-    file_name.push(&span.file_name);\n+fn location_naive(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+    let file_name = workspace_root.join(&span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n     // FIXME: this doesn't handle UTF16 offsets correctly\n-    let range = Range::new(\n-        Position::new(span.line_start as u64 - 1, span.column_start as u64 - 1),\n-        Position::new(span.line_end as u64 - 1, span.column_end as u64 - 1),\n+    let range = lsp_types::Range::new(\n+        lsp_types::Position::new(span.line_start as u64 - 1, span.column_start as u64 - 1),\n+        lsp_types::Position::new(span.line_end as u64 - 1, span.column_end as u64 - 1),\n     );\n \n-    Location { uri, range }\n+    lsp_types::Location { uri, range }\n }\n \n-/// Converts a secondary Rust span to a LSP related information\n+/// Converts a secondary Rust span to a LSP related inflocation(ormation\n ///\n /// If the span is unlabelled this will return `None`.\n-fn map_secondary_span_to_related(\n-    span: &DiagnosticSpan,\n+fn diagnostic_related_information(\n     workspace_root: &Path,\n-) -> Option<DiagnosticRelatedInformation> {\n+    span: &DiagnosticSpan,\n+) -> Option<lsp_types::DiagnosticRelatedInformation> {\n     let message = span.label.clone()?;\n-    let location = map_span_to_location(span, workspace_root);\n-    Some(DiagnosticRelatedInformation { location, message })\n-}\n-\n-/// Determines if diagnostic is related to unused code\n-fn is_unused_or_unnecessary(rd: &flycheck::Diagnostic) -> bool {\n-    match &rd.code {\n-        Some(code) => match code.code.as_str() {\n-            \"dead_code\" | \"unknown_lints\" | \"unreachable_code\" | \"unused_attributes\"\n-            | \"unused_imports\" | \"unused_macros\" | \"unused_variables\" => true,\n-            _ => false,\n-        },\n-        None => false,\n-    }\n-}\n-\n-/// Determines if diagnostic is related to deprecated code\n-fn is_deprecated(rd: &flycheck::Diagnostic) -> bool {\n-    match &rd.code {\n-        Some(code) => code.code.as_str() == \"deprecated\",\n-        None => false,\n-    }\n+    let location = location(workspace_root, span);\n+    Some(lsp_types::DiagnosticRelatedInformation { location, message })\n }\n \n enum MappedRustChildDiagnostic {\n-    Related(DiagnosticRelatedInformation),\n+    Related(lsp_types::DiagnosticRelatedInformation),\n     SuggestedFix(lsp_ext::CodeAction),\n     MessageLine(String),\n }\n \n fn map_rust_child_diagnostic(\n-    rd: &flycheck::Diagnostic,\n     workspace_root: &Path,\n+    rd: &flycheck::Diagnostic,\n ) -> MappedRustChildDiagnostic {\n     let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n     if spans.is_empty() {\n@@ -132,21 +91,20 @@ fn map_rust_child_diagnostic(\n         return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n     }\n \n-    let mut edit_map: HashMap<Url, Vec<TextEdit>> = HashMap::new();\n+    let mut edit_map: HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>> = HashMap::new();\n     for &span in &spans {\n-        match (&span.suggestion_applicability, &span.suggested_replacement) {\n-            (Some(Applicability::MachineApplicable), Some(suggested_replacement)) => {\n-                let location = map_span_to_location(span, workspace_root);\n-                let edit = TextEdit::new(location.range, suggested_replacement.clone());\n-                edit_map.entry(location.uri).or_default().push(edit);\n-            }\n-            _ => {}\n+        if let (Some(Applicability::MachineApplicable), Some(suggested_replacement)) =\n+            (&span.suggestion_applicability, &span.suggested_replacement)\n+        {\n+            let location = location(workspace_root, span);\n+            let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n+            edit_map.entry(location.uri).or_default().push(edit);\n         }\n     }\n \n     if edit_map.is_empty() {\n-        MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n-            location: map_span_to_location(spans[0], workspace_root),\n+        MappedRustChildDiagnostic::Related(lsp_types::DiagnosticRelatedInformation {\n+            location: location(workspace_root, spans[0]),\n             message: rd.message.clone(),\n         })\n     } else {\n@@ -167,8 +125,8 @@ fn map_rust_child_diagnostic(\n \n #[derive(Debug)]\n pub(crate) struct MappedRustDiagnostic {\n-    pub(crate) location: Location,\n-    pub(crate) diagnostic: Diagnostic,\n+    pub(crate) url: lsp_types::Url,\n+    pub(crate) diagnostic: lsp_types::Diagnostic,\n     pub(crate) fixes: Vec<lsp_ext::CodeAction>,\n }\n \n@@ -192,7 +150,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         return Vec::new();\n     }\n \n-    let severity = map_diagnostic_to_severity(config, rd);\n+    let severity = diagnostic_severity(config, rd.level.clone(), rd.code.clone());\n \n     let mut source = String::from(\"rustc\");\n     let mut code = rd.code.as_ref().map(|c| c.code.clone());\n@@ -210,7 +168,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     let mut tags = Vec::new();\n \n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n-        let related = map_secondary_span_to_related(secondary_span, workspace_root);\n+        let related = diagnostic_related_information(workspace_root, secondary_span);\n         if let Some(related) = related {\n             related_information.push(related);\n         }\n@@ -219,7 +177,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     let mut fixes = Vec::new();\n     let mut message = rd.message.clone();\n     for child in &rd.children {\n-        let child = map_rust_child_diagnostic(&child, workspace_root);\n+        let child = map_rust_child_diagnostic(workspace_root, &child);\n         match child {\n             MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n             MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action),\n@@ -233,18 +191,30 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         }\n     }\n \n-    if is_unused_or_unnecessary(rd) {\n-        tags.push(DiagnosticTag::Unnecessary);\n-    }\n+    if let Some(code) = &rd.code {\n+        let code = code.code.as_str();\n+        if matches!(\n+            code,\n+            \"dead_code\"\n+                | \"unknown_lints\"\n+                | \"unreachable_code\"\n+                | \"unused_attributes\"\n+                | \"unused_imports\"\n+                | \"unused_macros\"\n+                | \"unused_variables\"\n+        ) {\n+            tags.push(lsp_types::DiagnosticTag::Unnecessary);\n+        }\n \n-    if is_deprecated(rd) {\n-        tags.push(DiagnosticTag::Deprecated);\n+        if matches!(code, \"deprecated\") {\n+            tags.push(lsp_types::DiagnosticTag::Deprecated);\n+        }\n     }\n \n     primary_spans\n         .iter()\n         .map(|primary_span| {\n-            let location = map_span_to_location(&primary_span, workspace_root);\n+            let location = location(workspace_root, &primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -256,17 +226,16 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n             // If error occurs from macro expansion, add related info pointing to\n             // where the error originated\n             if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-                let def_loc = map_span_to_location_naive(&primary_span, workspace_root);\n-                related_information.push(DiagnosticRelatedInformation {\n-                    location: def_loc,\n+                related_information.push(lsp_types::DiagnosticRelatedInformation {\n+                    location: location_naive(workspace_root, &primary_span),\n                     message: \"Error originated from macro here\".to_string(),\n                 });\n             }\n \n-            let diagnostic = Diagnostic {\n+            let diagnostic = lsp_types::Diagnostic {\n                 range: location.range,\n                 severity,\n-                code: code.clone().map(NumberOrString::String),\n+                code: code.clone().map(lsp_types::NumberOrString::String),\n                 source: Some(source.clone()),\n                 message,\n                 related_information: if related_information.is_empty() {\n@@ -277,7 +246,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n             };\n \n-            MappedRustDiagnostic { location, diagnostic, fixes: fixes.clone() }\n+            MappedRustDiagnostic { url: location.uri, diagnostic, fixes: fixes.clone() }\n         })\n         .collect()\n }\n@@ -287,13 +256,22 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n mod tests {\n     use super::*;\n \n-    fn parse_diagnostic(val: &str) -> flycheck::Diagnostic {\n-        serde_json::from_str::<flycheck::Diagnostic>(val).unwrap()\n+    use expect::{expect_file, ExpectFile};\n+\n+    fn check(diagnostics_json: &str, expect: ExpectFile) {\n+        check_with_config(DiagnosticsConfig::default(), diagnostics_json, expect)\n+    }\n+\n+    fn check_with_config(config: DiagnosticsConfig, diagnostics_json: &str, expect: ExpectFile) {\n+        let diagnostic: flycheck::Diagnostic = serde_json::from_str(diagnostics_json).unwrap();\n+        let workspace_root = Path::new(\"/test/\");\n+        let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root);\n+        expect.assert_debug_eq(&actual)\n     }\n \n     #[test]\n-    fn snap_rustc_incompatible_type_for_trait() {\n-        let diag = parse_diagnostic(\n+    fn rustc_incompatible_type_for_trait() {\n+        check(\n             r##\"{\n                 \"message\": \"method `next` has an incompatible type for trait\",\n                 \"code\": {\n@@ -337,16 +315,13 @@ mod tests {\n                 \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n             }\n             \"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_incompatible_type_for_trait.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_rustc_unused_variable() {\n-        let diag = parse_diagnostic(\n+    fn rustc_unused_variable() {\n+        check(\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n     \"code\": {\n@@ -419,17 +394,18 @@ mod tests {\n     ],\n     \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_unused_variable.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n     #[cfg(not(windows))]\n-    fn snap_rustc_unused_variable_as_info() {\n-        let diag = parse_diagnostic(\n+    fn rustc_unused_variable_as_info() {\n+        check_with_config(\n+            DiagnosticsConfig {\n+                warnings_as_info: vec![\"unused_variables\".to_string()],\n+                ..DiagnosticsConfig::default()\n+            },\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n     \"code\": {\n@@ -502,22 +478,18 @@ mod tests {\n     ],\n     \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_unused_variable_as_info.txt\"],\n         );\n-\n-        let config = DiagnosticsConfig {\n-            warnings_as_info: vec![\"unused_variables\".to_string()],\n-            ..DiagnosticsConfig::default()\n-        };\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n     #[cfg(not(windows))]\n-    fn snap_rustc_unused_variable_as_hint() {\n-        let diag = parse_diagnostic(\n+    fn rustc_unused_variable_as_hint() {\n+        check_with_config(\n+            DiagnosticsConfig {\n+                warnings_as_hint: vec![\"unused_variables\".to_string()],\n+                ..DiagnosticsConfig::default()\n+            },\n             r##\"{\n     \"message\": \"unused variable: `foo`\",\n     \"code\": {\n@@ -590,21 +562,13 @@ mod tests {\n     ],\n     \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_unused_variable_as_hint.txt\"],\n         );\n-\n-        let config = DiagnosticsConfig {\n-            warnings_as_hint: vec![\"unused_variables\".to_string()],\n-            ..DiagnosticsConfig::default()\n-        };\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_rustc_wrong_number_of_parameters() {\n-        let diag = parse_diagnostic(\n+    fn rustc_wrong_number_of_parameters() {\n+        check(\n             r##\"{\n     \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n     \"code\": {\n@@ -719,16 +683,13 @@ mod tests {\n     \"children\": [],\n     \"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_wrong_number_of_parameters.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_clippy_pass_by_ref() {\n-        let diag = parse_diagnostic(\n+    fn clippy_pass_by_ref() {\n+        check(\n             r##\"{\n     \"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n     \"code\": {\n@@ -839,16 +800,13 @@ mod tests {\n     ],\n     \"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/clippy_pass_by_ref.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_rustc_mismatched_type() {\n-        let diag = parse_diagnostic(\n+    fn rustc_mismatched_type() {\n+        check(\n             r##\"{\n     \"message\": \"mismatched types\",\n     \"code\": {\n@@ -882,16 +840,13 @@ mod tests {\n     \"children\": [],\n     \"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/rustc_mismatched_type.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_handles_macro_location() {\n-        let diag = parse_diagnostic(\n+    fn handles_macro_location() {\n+        check(\n             r##\"{\n     \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n     \"children\": [\n@@ -1153,16 +1108,13 @@ mod tests {\n         }\n     ]\n     }\"##,\n+            expect_file![\"crates/rust-analyzer/test_data/handles_macro_location.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n-    fn snap_macro_compiler_error() {\n-        let diag = parse_diagnostic(\n+    fn macro_compiler_error() {\n+        check(\n             r##\"{\n         \"rendered\": \"error: Please register your known path in the path module\\n   --> crates/ra_hir_def/src/path.rs:265:9\\n    |\\n265 |         compile_error!(\\\"Please register your known path in the path module\\\")\\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n    | \\n   ::: crates/ra_hir_def/src/data.rs:80:16\\n    |\\n80  |     let path = path![std::future::Future];\\n    |                -------------------------- in this macro invocation\\n\\n\",\n         \"children\": [],\n@@ -1382,16 +1334,13 @@ mod tests {\n         ]\n     }\n             \"##,\n+            expect_file![\"crates/rust-analyzer/test_data/macro_compiler_error.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n \n     #[test]\n     fn snap_multi_line_fix() {\n-        let diag = parse_diagnostic(\n+        check(\n             r##\"{\n                 \"rendered\": \"warning: returning the result of a let binding from a block\\n --> src/main.rs:4:5\\n  |\\n3 |     let a = (0..10).collect();\\n  |     -------------------------- unnecessary let binding\\n4 |     a\\n  |     ^\\n  |\\n  = note: `#[warn(clippy::let_and_return)]` on by default\\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\\nhelp: return the expression directly\\n  |\\n3 |     \\n4 |     (0..10).collect()\\n  |\\n\\n\",\n                 \"children\": [\n@@ -1515,10 +1464,7 @@ mod tests {\n                 ]\n             }\n             \"##,\n+            expect_file![\"crates/rust-analyzer/test_data/snap_multi_line_fix.txt\"],\n         );\n-\n-        let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n-        insta::assert_debug_snapshot!(diag);\n     }\n }"}, {"sha": "4e556bd50615e09b5e311cae9ea35f476948f4d3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -238,7 +238,7 @@ impl GlobalState {\n                         &workspace_root,\n                     );\n                     for diag in diagnostics {\n-                        match url_to_file_id(&self.vfs.read().0, &diag.location.uri) {\n+                        match url_to_file_id(&self.vfs.read().0, &diag.url) {\n                             Ok(file_id) => self.diagnostics.add_check_diagnostic(\n                                 file_id,\n                                 diag.diagnostic,"}, {"sha": "d0651712607de1199efdf98812c99fc37fbc2712", "filename": "crates/rust-analyzer/test_data/clippy_pass_by_ref.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/compiler/mir/tagset.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 41,\n-                    character: 23,\n-                },\n-                end: Position {\n-                    line: 41,\n-                    character: 28,\n-                },\n-            },\n-        },\n+        url: \"file:///test/compiler/mir/tagset.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_clippy_pass_by_ref.snap"}, {"sha": "f5de2f07f3a0aae48e23741074495c5900692f93", "filename": "crates/rust-analyzer/test_data/handles_macro_location.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fhandles_macro_location.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fhandles_macro_location.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fhandles_macro_location.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/src/main.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 1,\n-                    character: 4,\n-                },\n-                end: Position {\n-                    line: 1,\n-                    character: 26,\n-                },\n-            },\n-        },\n+        url: \"file:///test/src/main.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_handles_macro_location.snap"}, {"sha": "f695db73ceb5c7f329b7e89d13172cd80be3d021", "filename": "crates/rust-analyzer/test_data/macro_compiler_error.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fmacro_compiler_error.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/crates/ra_hir_def/src/data.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 79,\n-                    character: 15,\n-                },\n-                end: Position {\n-                    line: 79,\n-                    character: 41,\n-                },\n-            },\n-        },\n+        url: \"file:///test/crates/ra_hir_def/src/data.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_macro_compiler_error.snap"}, {"sha": "fc54440be2385f04c6bc5166e0de9c0f7cccf34b", "filename": "crates/rust-analyzer/test_data/rustc_incompatible_type_for_trait.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_incompatible_type_for_trait.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/compiler/ty/list_iter.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 51,\n-                    character: 4,\n-                },\n-                end: Position {\n-                    line: 51,\n-                    character: 47,\n-                },\n-            },\n-        },\n+        url: \"file:///test/compiler/ty/list_iter.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_incompatible_type_for_trait.snap"}, {"sha": "c269af218ce8c681f32229ea290bc2065fd87b4b", "filename": "crates/rust-analyzer/test_data/rustc_mismatched_type.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_mismatched_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_mismatched_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_mismatched_type.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/runtime/compiler_support.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 47,\n-                    character: 64,\n-                },\n-                end: Position {\n-                    line: 47,\n-                    character: 69,\n-                },\n-            },\n-        },\n+        url: \"file:///test/runtime/compiler_support.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_mismatched_type.snap"}, {"sha": "81f180a8615bc6818ff6e68f53d69585f9e33c1c", "filename": "crates/rust-analyzer/test_data/rustc_unused_variable.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/driver/subcommand/repl.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 290,\n-                    character: 8,\n-                },\n-                end: Position {\n-                    line: 290,\n-                    character: 11,\n-                },\n-            },\n-        },\n+        url: \"file:///test/driver/subcommand/repl.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap"}, {"sha": "d5d78fd800c1c17fa9c2bc6fe8374192995c4efc", "filename": "crates/rust-analyzer/test_data/rustc_unused_variable_as_hint.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/driver/subcommand/repl.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 290,\n-                    character: 8,\n-                },\n-                end: Position {\n-                    line: 290,\n-                    character: 11,\n-                },\n-            },\n-        },\n+        url: \"file:///test/driver/subcommand/repl.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap"}, {"sha": "2a7505c59f0b6a8aca72a7414c95ce95704a6249", "filename": "crates/rust-analyzer/test_data/rustc_unused_variable_as_info.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/driver/subcommand/repl.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 290,\n-                    character: 8,\n-                },\n-                end: Position {\n-                    line: 290,\n-                    character: 11,\n-                },\n-            },\n-        },\n+        url: \"file:///test/driver/subcommand/repl.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap"}, {"sha": "efe37261db3a73f02fe7d194d0cd1649efffda68", "filename": "crates/rust-analyzer/test_data/rustc_wrong_number_of_parameters.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Frustc_wrong_number_of_parameters.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/compiler/ty/select.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 103,\n-                    character: 17,\n-                },\n-                end: Position {\n-                    line: 103,\n-                    character: 29,\n-                },\n-            },\n-        },\n+        url: \"file:///test/compiler/ty/select.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_wrong_number_of_parameters.snap"}, {"sha": "6eca3ae2f215266c61bd3137044f7f33e8de446f", "filename": "crates/rust-analyzer/test_data/snap_multi_line_fix.txt", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1d084fbd9504497aed24b907b03247bfcd31675/crates%2Frust-analyzer%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=f1d084fbd9504497aed24b907b03247bfcd31675", "patch": "@@ -1,22 +1,6 @@\n----\n-source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n-expression: diag\n----\n [\n     MappedRustDiagnostic {\n-        location: Location {\n-            uri: \"file:///test/src/main.rs\",\n-            range: Range {\n-                start: Position {\n-                    line: 3,\n-                    character: 4,\n-                },\n-                end: Position {\n-                    line: 3,\n-                    character: 5,\n-                },\n-            },\n-        },\n+        url: \"file:///test/src/main.rs\",\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {", "previous_filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap"}]}