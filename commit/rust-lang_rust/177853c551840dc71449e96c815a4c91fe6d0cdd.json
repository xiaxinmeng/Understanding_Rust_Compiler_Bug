{"sha": "177853c551840dc71449e96c815a4c91fe6d0cdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Nzg1M2M1NTE4NDBkYzcxNDQ5ZTk2YzgxNWE0YzkxZmU2ZDBjZGQ=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2012-07-06T21:55:25Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2012-07-06T21:55:25Z"}, "message": "tutorial: Formatting fix", "tree": {"sha": "adca544293678ccb501e017a441df336096f076d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adca544293678ccb501e017a441df336096f076d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/177853c551840dc71449e96c815a4c91fe6d0cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/177853c551840dc71449e96c815a4c91fe6d0cdd", "html_url": "https://github.com/rust-lang/rust/commit/177853c551840dc71449e96c815a4c91fe6d0cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/177853c551840dc71449e96c815a4c91fe6d0cdd/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702f0cd73456cc72e030c1c936f83ec2523d9b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/702f0cd73456cc72e030c1c936f83ec2523d9b0f", "html_url": "https://github.com/rust-lang/rust/commit/702f0cd73456cc72e030c1c936f83ec2523d9b0f"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "51805f4feea5d325628a7766fe1d11bea223947d", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177853c551840dc71449e96c815a4c91fe6d0cdd/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/177853c551840dc71449e96c815a4c91fe6d0cdd/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=177853c551840dc71449e96c815a4c91fe6d0cdd", "patch": "@@ -1187,7 +1187,7 @@ Empty argument lists can be omitted from `do` expressions.\n \n Most iteration in Rust is done with `for` loops. Like `do`,\n `for` is a nice syntax for doing control flow with closures.\n-Additionally, within a `for` loop, `break, `cont`, and `ret`\n+Additionally, within a `for` loop, `break`, `cont`, and `ret`\n work just as they do with `while` and `loop`.\n \n Consider again our `each` function, this time improved to"}]}