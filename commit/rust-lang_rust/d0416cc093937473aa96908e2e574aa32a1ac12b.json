{"sha": "d0416cc093937473aa96908e2e574aa32a1ac12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDE2Y2MwOTM5Mzc0NzNhYTk2OTA4ZTJlNTc0YWEzMmExYWMxMmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-16T13:45:24Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-16T14:58:08Z"}, "message": "Add helper method to determine if local had ever been initialized at current point in flow.", "tree": {"sha": "fe31ab639058a6b273da7c0e3c083836f3b91e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe31ab639058a6b273da7c0e3c083836f3b91e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0416cc093937473aa96908e2e574aa32a1ac12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0416cc093937473aa96908e2e574aa32a1ac12b", "html_url": "https://github.com/rust-lang/rust/commit/d0416cc093937473aa96908e2e574aa32a1ac12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0416cc093937473aa96908e2e574aa32a1ac12b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc61541423a3281b6305de1616939c9ead42364d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc61541423a3281b6305de1616939c9ead42364d", "html_url": "https://github.com/rust-lang/rust/commit/bc61541423a3281b6305de1616939c9ead42364d"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "f9a1e1e1108254ce47d12e8581380a836fb4e44a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d0416cc093937473aa96908e2e574aa32a1ac12b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0416cc093937473aa96908e2e574aa32a1ac12b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d0416cc093937473aa96908e2e574aa32a1ac12b", "patch": "@@ -36,9 +36,8 @@ use std::collections::BTreeMap;\n \n use syntax_pos::Span;\n \n-use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError, MovePathIndex};\n-use dataflow::move_paths::indexes::MoveOutIndex;\n+use dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n+use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n use dataflow::Borrows;\n use dataflow::DataflowResultsConsumer;\n use dataflow::FlowAtLocation;\n@@ -1442,10 +1441,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n \n         // Check if any of the initializiations of `local` have happened yet:\n-        let mpi = self.move_data.rev_lookup.find_local(local);\n-        let init_indices = &self.move_data.init_path_map[mpi];\n-        let first_init_index = init_indices.iter().find(|&ii| flow_state.ever_inits.contains(*ii));\n-        if let Some(&init_index) = first_init_index {\n+        if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {\n             // And, if so, report an error.\n             let init = &self.move_data.inits[init_index];\n             let span = init.span(&self.mir);\n@@ -1889,6 +1885,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         return true;\n     }\n \n+    fn is_local_ever_initialized(&self,\n+                                 local: Local,\n+                                 flow_state: &Flows<'cx, 'gcx, 'tcx>)\n+                                 -> Option<InitIndex>\n+    {\n+        let mpi = self.move_data.rev_lookup.find_local(local);\n+        let ii = &self.move_data.init_path_map[mpi];\n+        for &index in ii {\n+            if flow_state.ever_inits.contains(index) {\n+                return Some(index);\n+            }\n+        }\n+        return None;\n+    }\n+\n     /// Adds the place into the used mutable variables set\n     fn add_used_mut<'d>(\n         &mut self,\n@@ -1900,18 +1911,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 place: Place::Local(local),\n                 is_local_mutation_allowed,\n             } => {\n-                if is_local_mutation_allowed != LocalMutationIsAllowed::Yes {\n-                    // If the local may be initialized, and it is now currently being\n-                    // mutated, then it is justified to be annotated with the `mut`\n-                    // keyword, since the mutation may be a possible reassignment.\n-                    let mpi = self.move_data.rev_lookup.find_local(*local);\n-                    let ii = &self.move_data.init_path_map[mpi];\n-                    for &index in ii {\n-                        if flow_state.ever_inits.contains(index) {\n-                            self.used_mut.insert(*local);\n-                            break;\n-                        }\n-                    }\n+                // If the local may have been initialized, and it is now currently being\n+                // mutated, then it is justified to be annotated with the `mut`\n+                // keyword, since the mutation may be a possible reassignment.\n+                if is_local_mutation_allowed != LocalMutationIsAllowed::Yes &&\n+                    self.is_local_ever_initialized(*local, flow_state).is_some()\n+                {\n+                    self.used_mut.insert(*local);\n                 }\n             }\n             RootPlace {"}]}