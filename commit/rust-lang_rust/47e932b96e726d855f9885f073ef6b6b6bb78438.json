{"sha": "47e932b96e726d855f9885f073ef6b6b6bb78438", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZTkzMmI5NmU3MjZkODU1Zjk4ODVmMDczZWY2YjZiNmJiNzg0Mzg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-12-12T15:51:19Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-12-12T15:51:19Z"}, "message": "Fix weird implicit dependency between rustllvm and rustc_codegen_llvm\n\nrustllvm relies on the `LLVMRustStringWriteImpl` symbol existing, but\nthis symbol was previously defined in a *downstream* crate\n(rustc_codegen_llvm, which depends on rustc_llvm.\n\nWhile this somehow worked under the old 'separate bootstrap step for\ncodegen' scheme, it meant that rustc_llvm could not actually be built by\nitself, since it relied linking to the downstream rustc_codegen_llvm\ncrate.\n\nNow that librustc_codegen_llvm is just a normal crate, we actually try\nto build a standalone rustc_llvm when we run tests. This commit moves\n`LLVMRustStringWriteImpl` into rustc_llvm (technically the rustllvm\ndirectory, which has its contents built by rustc_llvm). This ensures\nthat we can build each crate in the graph by itself, without requiring\nthat any downstream crates be linked in as well.", "tree": {"sha": "b80c38b75e4492e379dca84129d7d4a6e31d36b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80c38b75e4492e379dca84129d7d4a6e31d36b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e932b96e726d855f9885f073ef6b6b6bb78438", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3yY0EACgkQtAh+UQ6Y\nsWSiFBAAgnXmoxcA9iOcHVzR4NsDqILO+MGbAUSGSk5u5iW8TiskNQCEEShYymjP\n+CPGfhugZZBR5fNt3wfQDF6GZRh6qV4hy+gy7MfBAGrmppd1N6UgUtscQ2Lk/F9K\nDUMSnS79f4/JGkJTVUpo+Odya7dYJpp60sHSANw5Cdtn+8bqGvUmP2Riw5Ia3s8K\nryzUxUJCfm+t1XF5eveHrEEfqvHJyYGZcsxuE/LjesdxtRjR24edjSf/rOR7kqPq\nqnWYe/Co94TyKq+pPwKEUkXhAsS7KhQTMJhLJpb87+O48pzXluDmCna4x8nHYHJm\nTR4LzGVGnQw34NHMdK+oMYDRVYZLJ98SVbk+pzyb/0V76hnJNWRwi7BjO/GeXRZc\nFY2M07HNyoDY6UyXTKBToE2SxgI7pqX7P02wYRk5ESXn76sFq8aUJrWgo54Vf9wh\ntM95+9Tfoegdzb6vWBc9Q7MPj8myq3MClj2chE2NJMedsS2STUEfrAeDzkxUilT9\nEOv3zwesDg5V4U7pWKzdA9vK69hYICQIM6bEOLFatWuW+V926grDWoQz8YE+PtgB\nDZ3ljbcX/fYlmcHvugBkVSTtkM1pvLakePxsHE9Zdh6u0mRO7Zw/b24BWd8S01At\n+shWJCQbc8E7l6I/YQLn9/eqq7eZ8H0+KpTQxUbrNQf9aC6s62I=\n=igj3\n-----END PGP SIGNATURE-----", "payload": "tree b80c38b75e4492e379dca84129d7d4a6e31d36b9\nparent 150d328d2e70b4cbc63d0f7d2dc802e1d6d2ac39\nauthor Aaron Hill <aa1ronham@gmail.com> 1576165879 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1576165879 -0500\n\nFix weird implicit dependency between rustllvm and rustc_codegen_llvm\n\nrustllvm relies on the `LLVMRustStringWriteImpl` symbol existing, but\nthis symbol was previously defined in a *downstream* crate\n(rustc_codegen_llvm, which depends on rustc_llvm.\n\nWhile this somehow worked under the old 'separate bootstrap step for\ncodegen' scheme, it meant that rustc_llvm could not actually be built by\nitself, since it relied linking to the downstream rustc_codegen_llvm\ncrate.\n\nNow that librustc_codegen_llvm is just a normal crate, we actually try\nto build a standalone rustc_llvm when we run tests. This commit moves\n`LLVMRustStringWriteImpl` into rustc_llvm (technically the rustllvm\ndirectory, which has its contents built by rustc_llvm). This ensures\nthat we can build each crate in the graph by itself, without requiring\nthat any downstream crates be linked in as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e932b96e726d855f9885f073ef6b6b6bb78438", "html_url": "https://github.com/rust-lang/rust/commit/47e932b96e726d855f9885f073ef6b6b6bb78438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e932b96e726d855f9885f073ef6b6b6bb78438/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150d328d2e70b4cbc63d0f7d2dc802e1d6d2ac39", "url": "https://api.github.com/repos/rust-lang/rust/commits/150d328d2e70b4cbc63d0f7d2dc802e1d6d2ac39", "html_url": "https://github.com/rust-lang/rust/commit/150d328d2e70b4cbc63d0f7d2dc802e1d6d2ac39"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "fc4e3bcd83afcc875b186f90c94e591aff7257ef", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47e932b96e726d855f9885f073ef6b6b6bb78438/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/47e932b96e726d855f9885f073ef6b6b6bb78438/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=47e932b96e726d855f9885f073ef6b6b6bb78438", "patch": "@@ -3672,6 +3672,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper\",\n  \"cc\",\n+ \"libc\",\n ]\n \n [[package]]"}, {"sha": "975756753d6adeef06aceada629b9ab553e49db3", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47e932b96e726d855f9885f073ef6b6b6bb78438/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e932b96e726d855f9885f073ef6b6b6bb78438/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=47e932b96e726d855f9885f073ef6b6b6bb78438", "patch": "@@ -10,11 +10,11 @@ pub use self::Linkage::*;\n \n use std::str::FromStr;\n use std::string::FromUtf8Error;\n-use std::slice;\n use std::ffi::CStr;\n use std::cell::RefCell;\n-use libc::{c_uint, c_char, size_t};\n+use libc::c_uint;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_llvm::RustString;\n \n pub mod archive_ro;\n pub mod diagnostic;\n@@ -81,21 +81,6 @@ impl FromStr for ArchiveKind {\n     }\n }\n \n-#[repr(C)]\n-pub struct RustString {\n-    bytes: RefCell<Vec<u8>>,\n-}\n-\n-/// Appending to a Rust string -- used by RawRustStringOstream.\n-#[no_mangle]\n-pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: &RustString,\n-                                                 ptr: *const c_char,\n-                                                 size: size_t) {\n-    let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n-\n-    sr.bytes.borrow_mut().extend_from_slice(slice);\n-}\n-\n pub fn SetInstructionCallConv(instr: &'a Value, cc: CallConv) {\n     unsafe {\n         LLVMSetInstructionCallConv(instr, cc as c_uint);"}, {"sha": "4fc02e348f64637a61aeff09833cd5a561fa9fef", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47e932b96e726d855f9885f073ef6b6b6bb78438/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/47e932b96e726d855f9885f073ef6b6b6bb78438/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=47e932b96e726d855f9885f073ef6b6b6bb78438", "patch": "@@ -13,6 +13,9 @@ path = \"lib.rs\"\n static-libstdcpp = []\n emscripten = []\n \n+[dependencies]\n+libc = \"0.2\"\n+\n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n cc = \"1.0.1\""}, {"sha": "9c8943a9559a32724ed5ec1fa78566a455f1ae47", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/47e932b96e726d855f9885f073ef6b6b6bb78438/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e932b96e726d855f9885f073ef6b6b6bb78438/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=47e932b96e726d855f9885f073ef6b6b6bb78438", "patch": "@@ -5,6 +5,26 @@\n \n // NOTE: This crate only exists to allow linking on mingw targets.\n \n+use std::cell::RefCell;\n+use std::slice;\n+use libc::{c_char, size_t};\n+\n+\n+#[repr(C)]\n+pub struct RustString {\n+    pub bytes: RefCell<Vec<u8>>,\n+}\n+\n+/// Appending to a Rust string -- used by RawRustStringOstream.\n+#[no_mangle]\n+pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: &RustString,\n+                                                 ptr: *const c_char,\n+                                                 size: size_t) {\n+    let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n+\n+    sr.bytes.borrow_mut().extend_from_slice(slice);\n+}\n+\n /// Initialize targets enabled by the build script via `cfg(llvm_component = \"...\")`.\n /// N.B., this function can't be moved to `rustc_codegen_llvm` because of the `cfg`s.\n pub fn initialize_available_targets() {"}]}