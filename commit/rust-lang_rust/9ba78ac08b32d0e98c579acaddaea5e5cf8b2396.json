{"sha": "9ba78ac08b32d0e98c579acaddaea5e5cf8b2396", "node_id": "C_kwDOAAsO6NoAKDliYTc4YWMwOGIzMmQwZTk4YzU3OWFjYWRkYWVhNWU1Y2Y4YjIzOTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-27T15:03:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-27T15:03:07Z"}, "message": "Rollup merge of #104892 - lukas-code:discriminant, r=scottmcm\n\nExplain how to get the discriminant out of a `#[repr(T)] enum` with payload\n\nexample stolen from https://github.com/rust-lang/reference/pull/1055\n\n````@rustbot```` label A-docs", "tree": {"sha": "5954153c86ff979532d7dbd4165c23019298c5e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5954153c86ff979532d7dbd4165c23019298c5e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba78ac08b32d0e98c579acaddaea5e5cf8b2396", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjg3wrCRBK7hj4Ov3rIwAA0hYIADMsld0b3PjjPUUjVodfv7MA\nCpcHOpen9fEddcMYaS7HUvH1/QyIzELK/IKlS7C5Nrg82NoatJo1L2n5Z0SXP2+/\nsizZZ/dTlfBWVUj80Lzs4VTCSzzJ0oyWKOQTkF3ig4x2YkJ0KAxnpvKMcrbdKiOe\ntOE3m6LkdY+1NP25GqwQVDQeeNWMC6yblggipnf50eILS1lIWElPR73fAVM+7VQb\nandV/07EMFen5V+babydrl+D9CSR/Rl14rFT1sDL6yCRSrqi5VrK/qLCOE91mEyT\nT7xu+l4SBBBJUVGsUVQTN0XHFGZvGQG1NUixKqdBn+lB5QnxX9/ylNwEY3UOOMQ=\n=BRF/\n-----END PGP SIGNATURE-----\n", "payload": "tree 5954153c86ff979532d7dbd4165c23019298c5e2\nparent 5d05cf8473736352f9517114c146a94cd62819a5\nparent 946d51e8ba2501aa24256317d8798e475dc862b5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669561387 +0100\ncommitter GitHub <noreply@github.com> 1669561387 +0100\n\nRollup merge of #104892 - lukas-code:discriminant, r=scottmcm\n\nExplain how to get the discriminant out of a `#[repr(T)] enum` with payload\n\nexample stolen from https://github.com/rust-lang/reference/pull/1055\n\n````@rustbot```` label A-docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba78ac08b32d0e98c579acaddaea5e5cf8b2396", "html_url": "https://github.com/rust-lang/rust/commit/9ba78ac08b32d0e98c579acaddaea5e5cf8b2396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba78ac08b32d0e98c579acaddaea5e5cf8b2396/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d05cf8473736352f9517114c146a94cd62819a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d05cf8473736352f9517114c146a94cd62819a5", "html_url": "https://github.com/rust-lang/rust/commit/5d05cf8473736352f9517114c146a94cd62819a5"}, {"sha": "946d51e8ba2501aa24256317d8798e475dc862b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/946d51e8ba2501aa24256317d8798e475dc862b5", "html_url": "https://github.com/rust-lang/rust/commit/946d51e8ba2501aa24256317d8798e475dc862b5"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "383bdc7b6e2e9f945d008186a4574744b186a92d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9ba78ac08b32d0e98c579acaddaea5e5cf8b2396/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba78ac08b32d0e98c579acaddaea5e5cf8b2396/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=9ba78ac08b32d0e98c579acaddaea5e5cf8b2396", "patch": "@@ -1113,7 +1113,10 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// # Stability\n ///\n /// The discriminant of an enum variant may change if the enum definition changes. A discriminant\n-/// of some variant will not change between compilations with the same compiler.\n+/// of some variant will not change between compilations with the same compiler. See the [Reference]\n+/// for more information.\n+///\n+/// [Reference]: ../../reference/items/enumerations.html#custom-discriminant-values-for-fieldless-enumerations\n ///\n /// # Examples\n ///\n@@ -1129,6 +1132,62 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));\n /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));\n /// ```\n+///\n+/// ## Accessing the numeric value of the discriminant\n+///\n+/// Note that it is *undefined behavior* to [`transmute`] from [`Discriminant`] to a primitive!\n+///\n+/// If an enum has only unit variants, then the numeric value of the discriminant can be accessed\n+/// with an [`as`] cast:\n+///\n+/// ```\n+/// enum Enum {\n+///     Foo,\n+///     Bar,\n+///     Baz,\n+/// }\n+///\n+/// assert_eq!(0, Enum::Foo as isize);\n+/// assert_eq!(1, Enum::Bar as isize);\n+/// assert_eq!(2, Enum::Baz as isize);\n+/// ```\n+///\n+/// If an enum has opted-in to having a [primitive representation] for its discriminant,\n+/// then it's possible to use pointers to read the memory location storing the discriminant.\n+/// That **cannot** be done for enums using the [default representation], however, as it's\n+/// undefined what layout the discriminant has and where it's stored \u2014 it might not even be\n+/// stored at all!\n+///\n+/// [`as`]: ../../std/keyword.as.html\n+/// [primitive representation]: ../../reference/type-layout.html#primitive-representations\n+/// [default representation]: ../../reference/type-layout.html#the-default-representation\n+/// ```\n+/// #[repr(u8)]\n+/// enum Enum {\n+///     Unit,\n+///     Tuple(bool),\n+///     Struct { a: bool },\n+/// }\n+///\n+/// impl Enum {\n+///     fn discriminant(&self) -> u8 {\n+///         // SAFETY: Because `Self` is marked `repr(u8)`, its layout is a `repr(C)` `union`\n+///         // between `repr(C)` structs, each of which has the `u8` discriminant as its first\n+///         // field, so we can read the discriminant without offsetting the pointer.\n+///         unsafe { *<*const _>::from(self).cast::<u8>() }\n+///     }\n+/// }\n+///\n+/// let unit_like = Enum::Unit;\n+/// let tuple_like = Enum::Tuple(true);\n+/// let struct_like = Enum::Struct { a: false };\n+/// assert_eq!(0, unit_like.discriminant());\n+/// assert_eq!(1, tuple_like.discriminant());\n+/// assert_eq!(2, struct_like.discriminant());\n+///\n+/// // \u26a0\ufe0f This is undefined behavior. Don't do this. \u26a0\ufe0f\n+/// // assert_eq!(0, unsafe { std::mem::transmute::<_, u8>(std::mem::discriminant(&unit_like)) });\n+/// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_discriminant\")]"}]}