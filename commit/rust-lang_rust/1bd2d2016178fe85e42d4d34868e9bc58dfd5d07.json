{"sha": "1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZDJkMjAxNjE3OGZlODVlNDJkNGQzNDg2OGU5YmM1OGRmZDVkMDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T21:30:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-06T01:02:31Z"}, "message": "std: Atomically set CLOEXEC for sockets if possible\n\nThis commit adds support for creating sockets with the `SOCK_CLOEXEC` flag.\nSupport for this flag was added in Linux 2.6.27, however, and support does not\nexist on platforms other than Linux. For this reason we still have the same\nfallback as before but just special case Linux if we can.", "tree": {"sha": "10d0249692e0ce6001d444846a96f282c9aa7c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d0249692e0ce6001d444846a96f282c9aa7c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "html_url": "https://github.com/rust-lang/rust/commit/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fff73b64a9658c9a3aa228488964d09e63115b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fff73b64a9658c9a3aa228488964d09e63115b4", "html_url": "https://github.com/rust-lang/rust/commit/0fff73b64a9658c9a3aa228488964d09e63115b4"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "728bc258c00a84cbbadd7b9838a15355d55e9609", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd2d2016178fe85e42d4d34868e9bc58dfd5d07/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=1bd2d2016178fe85e42d4d34868e9bc58dfd5d07", "patch": "@@ -25,6 +25,16 @@ pub use libc as netc;\n \n pub type wrlen_t = size_t;\n \n+// See below for the usage of SOCK_CLOEXEC, but this constant is only defined on\n+// Linux currently (e.g. support doesn't exist on other platforms). In order to\n+// get name resolution to work and things to compile we just define a dummy\n+// SOCK_CLOEXEC here for other platforms. Note that the dummy constant isn't\n+// actually ever used (the blocks below are wrapped in `if cfg!` as well.\n+#[cfg(target_os = \"linux\")]\n+use libc::SOCK_CLOEXEC;\n+#[cfg(not(target_os = \"linux\"))]\n+const SOCK_CLOEXEC: c_int = 0;\n+\n pub struct Socket(FileDesc);\n \n pub fn init() {}\n@@ -48,6 +58,19 @@ impl Socket {\n             SocketAddr::V6(..) => libc::AF_INET6,\n         };\n         unsafe {\n+            // On linux we first attempt to pass the SOCK_CLOEXEC flag to\n+            // atomically create the socket and set it as CLOEXEC. Support for\n+            // this option, however, was added in 2.6.27, and we still support\n+            // 2.6.18 as a kernel, so if the returned error is EINVAL we\n+            // fallthrough to the fallback.\n+            if cfg!(target_os = \"linux\") {\n+                match cvt(libc::socket(fam, ty | SOCK_CLOEXEC, 0)) {\n+                    Ok(fd) => return Ok(Socket(FileDesc::new(fd))),\n+                    Err(ref e) if e.raw_os_error() == Some(libc::EINVAL) => {}\n+                    Err(e) => return Err(e),\n+                }\n+            }\n+\n             let fd = try!(cvt(libc::socket(fam, ty, 0)));\n             let fd = FileDesc::new(fd);\n             fd.set_cloexec();"}]}