{"sha": "8a097f26198d9979d88e7c0cd0a3bce283ff038a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMDk3ZjI2MTk4ZDk5NzlkODhlN2MwY2QwYTNiY2UyODNmZjAzOGE=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-10T04:02:54Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-10T04:02:54Z"}, "message": "Clarify comment, dedupe match arms in shim.rs.\n\nAlso add a missing terminal newline to a test.", "tree": {"sha": "4f8e9f4b39a1ab3523a9c21ce5fff94304b53124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f8e9f4b39a1ab3523a9c21ce5fff94304b53124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a097f26198d9979d88e7c0cd0a3bce283ff038a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a097f26198d9979d88e7c0cd0a3bce283ff038a", "html_url": "https://github.com/rust-lang/rust/commit/8a097f26198d9979d88e7c0cd0a3bce283ff038a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a097f26198d9979d88e7c0cd0a3bce283ff038a/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8414c13abf9dc994f9c0dccee848a8b0fb1b061", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8414c13abf9dc994f9c0dccee848a8b0fb1b061", "html_url": "https://github.com/rust-lang/rust/commit/b8414c13abf9dc994f9c0dccee848a8b0fb1b061"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "2b9d09b20ccfc88ce2ecec5811b7d6bb51b48f3e", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a097f26198d9979d88e7c0cd0a3bce283ff038a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a097f26198d9979d88e7c0cd0a3bce283ff038a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=8a097f26198d9979d88e7c0cd0a3bce283ff038a", "patch": "@@ -26,7 +26,9 @@ pub enum InstanceDef<'tcx> {\n     /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n     VtableShim(DefId),\n \n-    /// `fn()` pointer where the function is annotated with `#[track_caller]`.\n+    /// `fn()` pointer where the function itself cannot be turned into a pointer.\n+    ///\n+    /// One example in the compiler today is functions annotated with `#[track_caller]`.\n     ReifyShim(DefId),\n \n     /// `<fn() as FnTrait>::call_*`"}, {"sha": "0d13daa26430963999283536a0c20cf863997983", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a097f26198d9979d88e7c0cd0a3bce283ff038a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a097f26198d9979d88e7c0cd0a3bce283ff038a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8a097f26198d9979d88e7c0cd0a3bce283ff038a", "patch": "@@ -41,15 +41,6 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n                 None,\n             )\n         }\n-        ty::InstanceDef::ReifyShim(def_id) => {\n-            build_call_shim(\n-                tcx,\n-                def_id,\n-                Adjustment::Identity, // TODO(anp) is this the right kind of adjustment?\n-                CallKind::Direct(def_id),\n-                None,\n-            )\n-        }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.lang_items().fn_trait_kind(trait_) {\n@@ -75,9 +66,11 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n                 Some(arg_tys)\n             )\n         }\n-        ty::InstanceDef::Virtual(def_id, _) => {\n-            // We are generating a call back to our def-id, which the\n-            // codegen backend knows to turn to an actual virtual call.\n+        // We are generating a call back to our def-id, which the\n+        // codegen backend knows to turn to an actual virtual call.\n+        ty::InstanceDef::Virtual(def_id, _) |\n+        // ...or we are generating a call to the inner closure defined by #[track_caller]\n+        ty::InstanceDef::ReifyShim(def_id) => {\n             build_call_shim(\n                 tcx,\n                 def_id,"}, {"sha": "2882d2d83ff8194dd81efce4ba8994ae75f8fec2", "filename": "src/test/ui/rfc-2091-track-caller/taking-fn-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a097f26198d9979d88e7c0cd0a3bce283ff038a/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftaking-fn-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a097f26198d9979d88e7c0cd0a3bce283ff038a/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftaking-fn-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftaking-fn-pointer.rs?ref=8a097f26198d9979d88e7c0cd0a3bce283ff038a", "patch": "@@ -13,4 +13,4 @@ fn call_it(x: fn()) {\n \n fn main() {\n     call_it(f);\n-}\n\\ No newline at end of file\n+}"}]}