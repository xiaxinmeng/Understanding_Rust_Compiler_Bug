{"sha": "8493813cd8143940264f17d7bcb026c968d43b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTM4MTNjZDgxNDM5NDAyNjRmMTdkN2JjYjAyNmM5NjhkNDNiMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-22T20:26:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-22T20:26:32Z"}, "message": "Auto merge of #45429 - frewsxcv:frewsxcv-once-docs, r=quietmisdreavus\n\nImprove docs around `Once::call_once_force` and `OnceState`.\n\nAdded some examples, clarify behavior, etc etc.\n\nFixes https://github.com/rust-lang/rust/issues/43472.", "tree": {"sha": "3f7f3de759ec6337e1f33b013589948e01ffb006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f7f3de759ec6337e1f33b013589948e01ffb006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8493813cd8143940264f17d7bcb026c968d43b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8493813cd8143940264f17d7bcb026c968d43b03", "html_url": "https://github.com/rust-lang/rust/commit/8493813cd8143940264f17d7bcb026c968d43b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8493813cd8143940264f17d7bcb026c968d43b03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1babcd03934c9299b44f6a51a719434dae224e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1babcd03934c9299b44f6a51a719434dae224e9d", "html_url": "https://github.com/rust-lang/rust/commit/1babcd03934c9299b44f6a51a719434dae224e9d"}, {"sha": "aae94c736882ec87e62ad19cec936ac514badbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/aae94c736882ec87e62ad19cec936ac514badbba", "html_url": "https://github.com/rust-lang/rust/commit/aae94c736882ec87e62ad19cec936ac514badbba"}], "stats": {"total": 94, "additions": 81, "deletions": 13}, "files": [{"sha": "30dbf02087d314cbda787d676e05fb8cab103e40", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8493813cd8143940264f17d7bcb026c968d43b03/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8493813cd8143940264f17d7bcb026c968d43b03/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=8493813cd8143940264f17d7bcb026c968d43b03", "patch": "@@ -103,8 +103,8 @@ unsafe impl Sync for Once {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Send for Once {}\n \n-/// State yielded to the [`call_once_force`] method which can be used to query\n-/// whether the [`Once`] was previously poisoned or not.\n+/// State yielded to [`call_once_force`]\u2019s closure parameter. The state can be\n+/// used to query the poison status of the [`Once`].\n ///\n /// [`call_once_force`]: struct.Once.html#method.call_once_force\n /// [`Once`]: struct.Once.html\n@@ -230,17 +230,50 @@ impl Once {\n \n     /// Performs the same function as [`call_once`] except ignores poisoning.\n     ///\n+    /// Unlike [`call_once`], if this `Once` has been poisoned (i.e. a previous\n+    /// call to `call_once` or `call_once_force` caused a panic), calling\n+    /// `call_once_force` will still invoke the closure `f` and will _not_\n+    /// result in an immediate panic. If `f` panics, the `Once` will remain\n+    /// in a poison state. If `f` does _not_ panic, the `Once` will no\n+    /// longer be in a poison state and all future calls to `call_once` or\n+    /// `call_one_force` will no-op.\n+    ///\n+    /// The closure `f` is yielded a [`OnceState`] structure which can be used\n+    /// to query the poison status of the `Once`.\n+    ///\n     /// [`call_once`]: struct.Once.html#method.call_once\n+    /// [`OnceState`]: struct.OnceState.html\n     ///\n-    /// If this `Once` has been poisoned (some initialization panicked) then\n-    /// this function will continue to attempt to call initialization functions\n-    /// until one of them doesn't panic.\n+    /// # Examples\n     ///\n-    /// The closure `f` is yielded a [`OnceState`] structure which can be used to query the\n-    /// state of this `Once` (whether initialization has previously panicked or\n-    /// not).\n+    /// ```\n+    /// #![feature(once_poison)]\n     ///\n-    /// [`OnceState`]: struct.OnceState.html\n+    /// use std::sync::{Once, ONCE_INIT};\n+    /// use std::thread;\n+    ///\n+    /// static INIT: Once = ONCE_INIT;\n+    ///\n+    /// // poison the once\n+    /// let handle = thread::spawn(|| {\n+    ///     INIT.call_once(|| panic!());\n+    /// });\n+    /// assert!(handle.join().is_err());\n+    ///\n+    /// // poisoning propagates\n+    /// let handle = thread::spawn(|| {\n+    ///     INIT.call_once(|| {});\n+    /// });\n+    /// assert!(handle.join().is_err());\n+    ///\n+    /// // call_once_force will still run and reset the poisoned state\n+    /// INIT.call_once_force(|state| {\n+    ///     assert!(state.poisoned());\n+    /// });\n+    ///\n+    /// // once any success happens, we stop propagating the poison\n+    /// INIT.call_once(|| {});\n+    /// ```\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`.\n@@ -386,12 +419,47 @@ impl Drop for Finish {\n }\n \n impl OnceState {\n-    /// Returns whether the associated [`Once`] has been poisoned.\n-    ///\n-    /// Once an initialization routine for a [`Once`] has panicked it will forever\n-    /// indicate to future forced initialization routines that it is poisoned.\n+    /// Returns whether the associated [`Once`] was poisoned prior to the\n+    /// invocation of the closure passed to [`call_once_force`].\n     ///\n+    /// [`call_once_force`]: struct.Once.html#method.call_once_force\n     /// [`Once`]: struct.Once.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// A poisoned `Once`:\n+    ///\n+    /// ```\n+    /// #![feature(once_poison)]\n+    ///\n+    /// use std::sync::{Once, ONCE_INIT};\n+    /// use std::thread;\n+    ///\n+    /// static INIT: Once = ONCE_INIT;\n+    ///\n+    /// // poison the once\n+    /// let handle = thread::spawn(|| {\n+    ///     INIT.call_once(|| panic!());\n+    /// });\n+    /// assert!(handle.join().is_err());\n+    ///\n+    /// INIT.call_once_force(|state| {\n+    ///     assert!(state.poisoned());\n+    /// });\n+    /// ```\n+    ///\n+    /// An unpoisoned `Once`:\n+    ///\n+    /// ```\n+    /// #![feature(once_poison)]\n+    ///\n+    /// use std::sync::{Once, ONCE_INIT};\n+    ///\n+    /// static INIT: Once = ONCE_INIT;\n+    ///\n+    /// INIT.call_once_force(|state| {\n+    ///     assert!(!state.poisoned());\n+    /// });\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn poisoned(&self) -> bool {\n         self.poisoned"}]}