{"sha": "9d918223a8c741e153cd3cf373a5920f7ea0dadc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTE4MjIzYThjNzQxZTE1M2NkM2NmMzczYTU5MjBmN2VhMGRhZGM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-20T17:33:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-20T17:33:13Z"}, "message": "Rollup merge of #40987 - maccoda:convert-docs, r=steveklabnik\n\nAPI docs: Convert\n\nClean up of the convert module documentation following points in #29349", "tree": {"sha": "094738d887f663dcad286b3d9b16804ff4a7afbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/094738d887f663dcad286b3d9b16804ff4a7afbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d918223a8c741e153cd3cf373a5920f7ea0dadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d918223a8c741e153cd3cf373a5920f7ea0dadc", "html_url": "https://github.com/rust-lang/rust/commit/9d918223a8c741e153cd3cf373a5920f7ea0dadc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d918223a8c741e153cd3cf373a5920f7ea0dadc/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e22b8b24c15f7a4b97b62cd53c139e6bb0cb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e22b8b24c15f7a4b97b62cd53c139e6bb0cb23", "html_url": "https://github.com/rust-lang/rust/commit/83e22b8b24c15f7a4b97b62cd53c139e6bb0cb23"}, {"sha": "2877a01febe7a0667051463ed1bb431fe17c4d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/2877a01febe7a0667051463ed1bb431fe17c4d18", "html_url": "https://github.com/rust-lang/rust/commit/2877a01febe7a0667051463ed1bb431fe17c4d18"}], "stats": {"total": 183, "additions": 133, "deletions": 50}, "files": [{"sha": "084736685e3a7f49bf23e4db4e3f7c97eec02fc9", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 133, "deletions": 50, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/9d918223a8c741e153cd3cf373a5920f7ea0dadc/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d918223a8c741e153cd3cf373a5920f7ea0dadc/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=9d918223a8c741e153cd3cf373a5920f7ea0dadc", "patch": "@@ -17,25 +17,25 @@\n //! Like many traits, these are often used as bounds for generic functions, to\n //! support arguments of multiple types.\n //!\n-//! - Impl the `As*` traits for reference-to-reference conversions\n-//! - Impl the [`Into`] trait when you want to consume the value in the conversion\n+//! - Implement the `As*` traits for reference-to-reference conversions\n+//! - Implement the [`Into`] trait when you want to consume the value in the conversion\n //! - The [`From`] trait is the most flexible, useful for value _and_ reference conversions\n //! - The [`TryFrom`] and [`TryInto`] traits behave like [`From`] and [`Into`], but allow for the\n //!   conversion to fail\n //!\n //! As a library author, you should prefer implementing [`From<T>`][`From`] or\n //! [`TryFrom<T>`][`TryFrom`] rather than [`Into<U>`][`Into`] or [`TryInto<U>`][`TryInto`],\n //! as [`From`] and [`TryFrom`] provide greater flexibility and offer\n-//! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a blanket implementation\n-//! in the standard library.\n+//! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a\n+//! blanket implementation in the standard library.\n //!\n-//! # Generic impl\n+//! # Generic Implementations\n //!\n //! - [`AsRef`] and [`AsMut`] auto-dereference if the inner type is a reference\n //! - [`From`]`<U> for T` implies [`Into`]`<T> for U`\n //! - [`TryFrom`]`<U> for T` implies [`TryInto`]`<T> for U`\n-//! - [`From`] and [`Into`] are reflexive, which means that all types can `into()`\n-//!   themselves and `from()` themselves\n+//! - [`From`] and [`Into`] are reflexive, which means that all types can\n+//!   `into` themselves and `from` themselves\n //!\n //! See each trait for usage examples.\n //!\n@@ -50,20 +50,42 @@\n \n use str::FromStr;\n \n-/// A cheap, reference-to-reference conversion.\n+/// A cheap reference-to-reference conversion. Used to convert a value to a\n+/// reference value within generic code.\n ///\n-/// `AsRef` is very similar to, but different than, [`Borrow`]. See\n-/// [the book][book] for more.\n+/// `AsRef` is very similar to, but serves a slightly different purpose than,\n+/// [`Borrow`].\n+///\n+/// `AsRef` is to be used when wishing to convert to a reference of another\n+/// type.\n+/// `Borrow` is more related to the notion of taking the reference. It is\n+/// useful when wishing to abstract over the type of reference\n+/// (`&T`, `&mut T`) or allow both the referenced and owned type to be treated\n+/// in the same manner.\n+///\n+/// The key difference between the two traits is the intention:\n+///\n+/// - Use `AsRef` when goal is to simply convert into a reference\n+/// - Use `Borrow` when goal is related to writing code that is agnostic to the\n+///   type of borrow and if is reference or value\n+///\n+/// See [the book][book] for a more detailed comparison.\n ///\n /// [book]: ../../book/borrow-and-asref.html\n /// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// **Note: this trait must not fail**. If the conversion can fail, use a\n+/// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n+/// # Generic Implementations\n+///\n+/// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n+///   reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n+///   `&mut Foo` or `&&mut Foo`)\n+///\n /// # Examples\n ///\n /// Both [`String`] and `&str` implement `AsRef<str>`:\n@@ -82,11 +104,6 @@ use str::FromStr;\n /// is_hello(s);\n /// ```\n ///\n-/// # Generic Impls\n-///\n-/// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n-/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n@@ -96,12 +113,21 @@ pub trait AsRef<T: ?Sized> {\n \n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// This trait is similar to `AsRef` but used for converting between mutable\n+/// references.\n+///\n+/// **Note: this trait must not fail**. If the conversion can fail, use a\n+/// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n+/// # Generic Implementations\n+///\n+/// - `AsMut` auto-dereferences if the inner type is a reference or a mutable\n+///   reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n+///   `&mut Foo` or `&&mut Foo`)\n+///\n /// # Examples\n ///\n /// [`Box<T>`] implements `AsMut<T>`:\n@@ -118,10 +144,6 @@ pub trait AsRef<T: ?Sized> {\n /// assert_eq!(*boxed_num, 1);\n /// ```\n ///\n-/// # Generic Impls\n-///\n-/// - `AsMut` auto-dereferences if the inner type is a reference or a mutable\n-/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n@@ -130,14 +152,22 @@ pub trait AsMut<T: ?Sized> {\n     fn as_mut(&mut self) -> &mut T;\n }\n \n-/// A conversion that consumes `self`, which may or may not be expensive.\n+/// A conversion that consumes `self`, which may or may not be expensive. The\n+/// reciprocal of [`From`][From].\n+///\n+/// **Note: this trait must not fail**. If the conversion can fail, use\n+/// [`TryInto`] or a dedicated method which returns an [`Option<T>`] or a\n+/// [`Result<T, E>`].\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use [`TryInto`] or a dedicated\n-/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// Library authors should not directly implement this trait, but should prefer\n+/// implementing the [`From`][From] trait, which offers greater flexibility and\n+/// provides an equivalent `Into` implementation for free, thanks to a blanket\n+/// implementation in the standard library.\n ///\n-/// Library authors should not directly implement this trait, but should prefer implementing\n-/// the [`From`][From] trait, which offers greater flexibility and provides an equivalent `Into`\n-/// implementation for free, thanks to a blanket implementation in the standard library.\n+/// # Generic Implementations\n+///\n+/// - [`From<T>`][From]` for U` implies `Into<U> for T`\n+/// - [`into`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n /// # Examples\n ///\n@@ -153,11 +183,6 @@ pub trait AsMut<T: ?Sized> {\n /// is_hello(s);\n /// ```\n ///\n-/// # Generic Impls\n-///\n-/// - [`From<T>`][From]` for U` implies `Into<U> for T`\n-/// - [`into`] is reflexive, which means that `Into<T> for T` is implemented\n-///\n /// [`TryInto`]: trait.TryInto.html\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n@@ -171,10 +196,31 @@ pub trait Into<T>: Sized {\n     fn into(self) -> T;\n }\n \n-/// Construct `Self` via a conversion.\n+/// Simple and safe type conversions in to `Self`. It is the reciprocal of\n+/// `Into`.\n+///\n+/// This trait is useful when performing error handling as described by\n+/// [the book][book] and is closely related to the `?` operator.\n+///\n+/// When constructing a function that is capable of failing the return type\n+/// will generally be of the form `Result<T, E>`.\n+///\n+/// The `From` trait allows for simplification of error handling by providing a\n+/// means of returning a single error type that encapsulates numerous possible\n+/// erroneous situations.\n+///\n+/// This trait is not limited to error handling, rather the general case for\n+/// this trait would be in any type conversions to have an explicit definition\n+/// of how they are performed.\n+///\n+/// **Note: this trait must not fail**. If the conversion can fail, use\n+/// [`TryFrom`] or a dedicated method which returns an [`Option<T>`] or a\n+/// [`Result<T, E>`].\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use [`TryFrom`] or a dedicated\n-/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// # Generic Implementations\n+///\n+/// - `From<T> for U` implies [`Into<U>`]` for T`\n+/// - [`from`] is reflexive, which means that `From<T> for T` is implemented\n ///\n /// # Examples\n ///\n@@ -186,29 +232,60 @@ pub trait Into<T>: Sized {\n ///\n /// assert_eq!(string, other_string);\n /// ```\n-/// # Generic impls\n ///\n-/// - `From<T> for U` implies [`Into<U>`]` for T`\n-/// - [`from`] is reflexive, which means that `From<T> for T` is implemented\n+/// An example usage for error handling:\n+///\n+/// ```\n+/// use std::io::{self, Read};\n+/// use std::num;\n+///\n+/// enum CliError {\n+///     IoError(io::Error),\n+///     ParseError(num::ParseIntError),\n+/// }\n+///\n+/// impl From<io::Error> for CliError {\n+///     fn from(error: io::Error) -> Self {\n+///         CliError::IoError(error)\n+///     }\n+/// }\n+///\n+/// impl From<num::ParseIntError> for CliError {\n+///     fn from(error: num::ParseIntError) -> Self {\n+///         CliError::ParseError(error)\n+///     }\n+/// }\n+///\n+/// fn open_and_parse_file(file_name: &str) -> Result<i32, CliError> {\n+///     let mut file = std::fs::File::open(\"test\")?;\n+///     let mut contents = String::new();\n+///     file.read_to_string(&mut contents)?;\n+///     let num: i32 = contents.trim().parse()?;\n+///     Ok(num)\n+/// }\n+/// ```\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Into<U>`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n+/// [book]: ../../book/error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(T) -> Self;\n }\n \n-/// An attempted conversion that consumes `self`, which may or may not be expensive.\n+/// An attempted conversion that consumes `self`, which may or may not be\n+/// expensive.\n ///\n-/// Library authors should not directly implement this trait, but should prefer implementing\n-/// the [`TryFrom`] trait, which offers greater flexibility and provides an equivalent `TryInto`\n-/// implementation for free, thanks to a blanket implementation in the standard library.\n+/// Library authors should not directly implement this trait, but should prefer\n+/// implementing the [`TryFrom`] trait, which offers greater flexibility and\n+/// provides an equivalent `TryInto` implementation for free, thanks to a\n+/// blanket implementation in the standard library.\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n@@ -236,15 +313,17 @@ pub trait TryFrom<T>: Sized {\n \n // As lifts over &\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U> {\n+impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U>\n+{\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n     }\n }\n \n // As lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U> {\n+impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n+{\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n     }\n@@ -260,7 +339,8 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U> {\n \n // AsMut lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n+impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U>\n+{\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()\n     }\n@@ -276,7 +356,8 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n \n // From implies Into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, U> Into<U> for T where U: From<T> {\n+impl<T, U> Into<U> for T where U: From<T>\n+{\n     fn into(self) -> U {\n         U::from(self)\n     }\n@@ -291,7 +372,8 @@ impl<T> From<T> for T {\n \n // TryFrom implies TryInto\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl<T, U> TryInto<U> for T where U: TryFrom<T> {\n+impl<T, U> TryInto<U> for T where U: TryFrom<T>\n+{\n     type Error = U::Error;\n \n     fn try_into(self) -> Result<U, U::Error> {\n@@ -327,7 +409,8 @@ impl AsRef<str> for str {\n \n // FromStr implies TryFrom<&str>\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl<'a, T> TryFrom<&'a str> for T where T: FromStr {\n+impl<'a, T> TryFrom<&'a str> for T where T: FromStr\n+{\n     type Error = <T as FromStr>::Err;\n \n     fn try_from(s: &'a str) -> Result<T, Self::Error> {"}]}