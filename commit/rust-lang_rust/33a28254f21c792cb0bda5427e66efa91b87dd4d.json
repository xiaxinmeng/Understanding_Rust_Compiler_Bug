{"sha": "33a28254f21c792cb0bda5427e66efa91b87dd4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYTI4MjU0ZjIxYzc5MmNiMGJkYTU0MjdlNjZlZmE5MWI4N2RkNGQ=", "commit": {"author": {"name": "ThePuzzlemaker", "email": "tpzker@thepuzzlemaker.info", "date": "2021-09-07T04:58:26Z"}, "committer": {"name": "ThePuzzlemaker", "email": "tpzker@thepuzzlemaker.info", "date": "2021-09-07T04:58:26Z"}, "message": "Clean up the fix a bit\n\nUse register_predicate_obligations rather than a for loop, since I\ndidn't see that before. Also destructure in the `let` rather than\nprojecting the fields individually", "tree": {"sha": "483b0b90a22c50cd33d96b42cdcb1eb9c8e16f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483b0b90a22c50cd33d96b42cdcb1eb9c8e16f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33a28254f21c792cb0bda5427e66efa91b87dd4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEcJXCCpIkPbZRdwewlozZ1xyfu2wFAmE28b8ACgkQlozZ1xyf\nu2yi5Qv/S1vGpAXPk/HczEDtzI+/kKGbpK2jxfi4j6ZaN8NbXoXCqBzAirIdgCdh\n8sCZHoKQeRDlArXMLUjBDoGDp1iy2McD8IXWu8DKpXV9nxGLtPuAek3UzV0+L62F\nGrWS4+vT6iEbkV+/FQTvIXP/ynTIuEQm0T/IdS7+qh8WZ9BV6rDGBFbdvOJBc18d\nY4vFaf0RgXPXGJ7Ydhyw90K5gfqZnDNCovy1/D+cjDixT5GmUbqk60+KqAeHoUl0\nRzkqYIf55tq39A6WYLchUmZSYvTUN4ZknjBVQqa46YGEnJxMKuxaeHuAfl0MfyFD\nch8xwW5PTE42RsaDGvrPamx+JWesNr8KCvFJ+G4BwfMEn6mpqQQTWHQi1KmI9iOx\nRzVhUphMX64+B2Ege3KpmTsxO2kYUega8LpAlbHAeNxtFV8nZLXCaBNdmhrqNqKB\nSA/JFQk5ZQdmaXTi6ZoTqXDKMhM/6sCLUmOTFy7Qy+6JKUttNd5bS2DvgaLMYEdy\nnBBZGxpN\n=tVo6\n-----END PGP SIGNATURE-----", "payload": "tree 483b0b90a22c50cd33d96b42cdcb1eb9c8e16f18\nparent 734209ed73507e214e49ef5cb7988af8901e74c7\nauthor ThePuzzlemaker <tpzker@thepuzzlemaker.info> 1630990706 -0500\ncommitter ThePuzzlemaker <tpzker@thepuzzlemaker.info> 1630990706 -0500\n\nClean up the fix a bit\n\nUse register_predicate_obligations rather than a for loop, since I\ndidn't see that before. Also destructure in the `let` rather than\nprojecting the fields individually\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33a28254f21c792cb0bda5427e66efa91b87dd4d", "html_url": "https://github.com/rust-lang/rust/commit/33a28254f21c792cb0bda5427e66efa91b87dd4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33a28254f21c792cb0bda5427e66efa91b87dd4d/comments", "author": {"login": "ThePuzzlemaker", "id": 12666617, "node_id": "MDQ6VXNlcjEyNjY2NjE3", "avatar_url": "https://avatars.githubusercontent.com/u/12666617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePuzzlemaker", "html_url": "https://github.com/ThePuzzlemaker", "followers_url": "https://api.github.com/users/ThePuzzlemaker/followers", "following_url": "https://api.github.com/users/ThePuzzlemaker/following{/other_user}", "gists_url": "https://api.github.com/users/ThePuzzlemaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePuzzlemaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePuzzlemaker/subscriptions", "organizations_url": "https://api.github.com/users/ThePuzzlemaker/orgs", "repos_url": "https://api.github.com/users/ThePuzzlemaker/repos", "events_url": "https://api.github.com/users/ThePuzzlemaker/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePuzzlemaker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThePuzzlemaker", "id": 12666617, "node_id": "MDQ6VXNlcjEyNjY2NjE3", "avatar_url": "https://avatars.githubusercontent.com/u/12666617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePuzzlemaker", "html_url": "https://github.com/ThePuzzlemaker", "followers_url": "https://api.github.com/users/ThePuzzlemaker/followers", "following_url": "https://api.github.com/users/ThePuzzlemaker/following{/other_user}", "gists_url": "https://api.github.com/users/ThePuzzlemaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePuzzlemaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePuzzlemaker/subscriptions", "organizations_url": "https://api.github.com/users/ThePuzzlemaker/orgs", "repos_url": "https://api.github.com/users/ThePuzzlemaker/repos", "events_url": "https://api.github.com/users/ThePuzzlemaker/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePuzzlemaker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734209ed73507e214e49ef5cb7988af8901e74c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/734209ed73507e214e49ef5cb7988af8901e74c7", "html_url": "https://github.com/rust-lang/rust/commit/734209ed73507e214e49ef5cb7988af8901e74c7"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "e2cbaa47272892800ce6e3fbc76631fda779d837", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33a28254f21c792cb0bda5427e66efa91b87dd4d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a28254f21c792cb0bda5427e66efa91b87dd4d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=33a28254f21c792cb0bda5427e66efa91b87dd4d", "patch": "@@ -335,16 +335,20 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n             // checking trait fulfillment, not this here. I'm not sure why it\n             // works in the example in `fn test()` given in #88609? This also\n             // probably isn't the best way to do this.\n-            let normalized = infcx.partially_normalize_associated_types_in(\n-                cause.clone(),\n+            let InferOk { value: norm_return_ty, obligations } = infcx\n+                .partially_normalize_associated_types_in(\n+                    cause.clone(),\n+                    ty::ParamEnv::empty(),\n+                    return_ty,\n+                );\n+            fulfillment_cx.register_predicate_obligations(&infcx, obligations);\n+            fulfillment_cx.register_bound(\n+                &infcx,\n                 ty::ParamEnv::empty(),\n-                return_ty,\n+                norm_return_ty,\n+                term_id,\n+                cause,\n             );\n-            let new_ty = normalized.value;\n-            for obligation in normalized.obligations {\n-                fulfillment_cx.register_predicate_obligation(&infcx, obligation);\n-            }\n-            fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), new_ty, term_id, cause);\n             if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                 infcx.report_fulfillment_errors(&err, None, false);\n                 error = true;"}]}