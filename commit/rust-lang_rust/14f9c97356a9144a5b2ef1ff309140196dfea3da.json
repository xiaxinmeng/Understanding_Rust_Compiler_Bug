{"sha": "14f9c97356a9144a5b2ef1ff309140196dfea3da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZjljOTczNTZhOTE0NGE1YjJlZjFmZjMwOTE0MDE5NmRmZWEzZGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-31T20:42:09Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-31T20:42:09Z"}, "message": "Delete unused macros from rustc_platform_intrinsics.", "tree": {"sha": "ff6acdb13edbcd0a82664f8aee934a941f9628c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6acdb13edbcd0a82664f8aee934a941f9628c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f9c97356a9144a5b2ef1ff309140196dfea3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f9c97356a9144a5b2ef1ff309140196dfea3da", "html_url": "https://github.com/rust-lang/rust/commit/14f9c97356a9144a5b2ef1ff309140196dfea3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f9c97356a9144a5b2ef1ff309140196dfea3da/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "html_url": "https://github.com/rust-lang/rust/commit/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "1727347ef7bd5bc5a9a2b588a2a70fce7ed4e2f5", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/14f9c97356a9144a5b2ef1ff309140196dfea3da/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f9c97356a9144a5b2ef1ff309140196dfea3da/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=14f9c97356a9144a5b2ef1ff309140196dfea3da", "patch": "@@ -52,46 +52,6 @@ fn agg(flatten: bool, types: Vec<Type>) -> Type {\n     Type::Aggregate(flatten, types)\n }\n \n-macro_rules! ty {\n-    (f32x8) => (v(f(32), 8));\n-    (f64x4) => (v(f(64), 4));\n-\n-    (i8x32) => (v(i(8), 32));\n-    (i16x16) => (v(i(16), 16));\n-    (i32x8) => (v(i(32), 8));\n-    (i64x4) => (v(i(64), 4));\n-\n-    (f32x4) => (v(f(32), 4));\n-    (f64x2) => (v(f(64), 2));\n-\n-    (i8x16) => (v(i(8), 16));\n-    (i16x8) => (v(i(16), 8));\n-    (i32x4) => (v(i(32), 4));\n-    (i64x2) => (v(i(64), 2));\n-\n-    (f32x2) => (v(f(32), 2));\n-    (i8x8) => (v(i(8), 8));\n-    (i16x4) => (v(i(16), 4));\n-    (i32x2) => (v(i(32), 2));\n-    (i64x1)=> (v(i(64), 1));\n-\n-    (i64) => (i(64));\n-    (i32) => (i(32));\n-    (i16) => (i(16));\n-    (i8) => (i(8));\n-    (f32) => (f(32));\n-    (f64) => (f(64));\n-}\n-macro_rules! plain {\n-    ($name: expr, ($($inputs: tt),*) -> $output: tt) => {\n-        Intrinsic {\n-            inputs: vec![$(ty!($inputs)),*],\n-            output: ty!($output),\n-            definition: ::IntrinsicDef::Named($name)\n-        }\n-    }\n-}\n-\n mod x86;\n mod arm;\n mod aarch64;"}]}