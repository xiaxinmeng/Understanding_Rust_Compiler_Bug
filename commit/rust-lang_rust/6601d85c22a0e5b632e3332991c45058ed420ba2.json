{"sha": "6601d85c22a0e5b632e3332991c45058ed420ba2", "node_id": "C_kwDOAAsO6NoAKDY2MDFkODVjMjJhMGU1YjYzMmUzMzMyOTkxYzQ1MDU4ZWQ0MjBiYTI", "commit": {"author": {"name": "Samuel \"Sam\" Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-22T21:56:17Z"}, "committer": {"name": "Samuel \"Sam\" Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-31T12:43:30Z"}, "message": "Flag `bufreader.lines().filter_map(Result::ok)` as suspicious", "tree": {"sha": "3b5464b8416002f8446cd09e055ec06df44eef12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b5464b8416002f8446cd09e055ec06df44eef12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6601d85c22a0e5b632e3332991c45058ed420ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6601d85c22a0e5b632e3332991c45058ed420ba2", "html_url": "https://github.com/rust-lang/rust/commit/6601d85c22a0e5b632e3332991c45058ed420ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6601d85c22a0e5b632e3332991c45058ed420ba2/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6", "html_url": "https://github.com/rust-lang/rust/commit/799732cbd8c1b6ce650fa2093dbbf6579c37c1f6"}], "stats": {"total": 215, "additions": 215, "deletions": 0}, "files": [{"sha": "239631777e9a3b158be26502573038619ceccbaf", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -4647,6 +4647,7 @@ Released 2018-09-13\n [`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`let_with_type_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_with_type_underscore\n+[`lines_filter_map_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#lines_filter_map_ok\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n [`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal"}, {"sha": "7836e5ccb9a6d01e15fa1f95418252562e27ac3d", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -232,6 +232,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::let_with_type_underscore::LET_WITH_TYPE_UNDERSCORE_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n     crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n+    crate::lines_filter_map_ok::LINES_FILTER_MAP_OK_INFO,\n     crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,\n     crate::literal_representation::INCONSISTENT_DIGIT_GROUPING_INFO,\n     crate::literal_representation::LARGE_DIGIT_GROUPS_INFO,"}, {"sha": "ce055f16240bc52d2dec6a7b214dfafde1841f41", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -171,6 +171,7 @@ mod let_if_seq;\n mod let_underscore;\n mod let_with_type_underscore;\n mod lifetimes;\n+mod lines_filter_map_ok;\n mod literal_representation;\n mod loops;\n mod macro_use;\n@@ -949,6 +950,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             avoid_breaking_exported_api,\n         ))\n     });\n+    store.register_late_pass(|_| Box::new(lines_filter_map_ok::LinesFilterMapOk));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "b0f9276475d3ee96fc491a2bc3e8aed25a752615", "filename": "clippy_lints/src/lines_filter_map_ok.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_lints%2Fsrc%2Flines_filter_map_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_lints%2Fsrc%2Flines_filter_map_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flines_filter_map_ok.rs?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -0,0 +1,100 @@\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then, is_diag_item_method, is_trait_method, match_def_path, path_to_local_id, paths,\n+    ty::match_type,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Body, Closure, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detect uses of `lines.filter_map(Result::ok)` or `lines.flat_map(Result::ok)`\n+    /// when `lines` has type `std::io::Lines`.\n+    ///\n+    /// ### Why is this bad?\n+    /// `Lines` instances might produce a never-ending stream of `Err`, in which case\n+    /// `filter_map(Result::ok)` will enter an infinite loop while waiting for an\n+    /// `Ok` variant. Calling `next()` once is sufficient to enter the infinite loop,\n+    /// even in the absence of explicit loops in the user code.\n+    ///\n+    /// This situation can arise when working with user-provided paths. On some platforms,\n+    /// `std::fs::File::open(path)` might return `Ok(fs)` even when `path` is a directory,\n+    /// but any later attempt to read from `fs` will return an error.\n+    ///\n+    /// ### Known problems\n+    /// This lint suggests replacing `filter_map()` or `flat_map()` applied to a `Lines`\n+    /// instance in all cases. There two cases where the suggestion might not be\n+    /// appropriate or necessary:\n+    ///\n+    /// - If the `Lines` instance can never produce any error, or if an error is produced\n+    ///   only once just before terminating the iterator, using `map_while()` is not\n+    ///   necessary but will not do any harm.\n+    /// - If the `Lines` instance can produce intermittent errors then recover and produce\n+    ///   successful results, using `map_while()` would stop at the first error.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::{fs::File, io::{self, BufRead, BufReader}};\n+    /// # let _ = || -> io::Result<()> {\n+    /// let mut lines = BufReader::new(File::open(\"some-path\")?).lines().filter_map(Result::ok);\n+    /// // If \"some-path\" points to a directory, the next statement never terminates:\n+    /// let first_line: Option<String> = lines.next();\n+    /// # Ok(()) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::{fs::File, io::{self, BufRead, BufReader}};\n+    /// # let _ = || -> io::Result<()> {\n+    /// let mut lines = BufReader::new(File::open(\"some-path\")?).lines().map_while(Result::ok);\n+    /// let first_line: Option<String> = lines.next();\n+    /// # Ok(()) };\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub LINES_FILTER_MAP_OK,\n+    suspicious,\n+    \"filtering `std::io::Lines` with `filter_map()` or `flat_map()` might cause an infinite loop\"\n+}\n+declare_lint_pass!(LinesFilterMapOk => [LINES_FILTER_MAP_OK]);\n+\n+impl LateLintPass<'_> for LinesFilterMapOk {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::MethodCall(fm_method, fm_receiver, [fm_arg], fm_span) = expr.kind &&\n+            is_trait_method(cx, expr, sym::Iterator) &&\n+            (fm_method.ident.as_str() == \"filter_map\" || fm_method.ident.as_str() == \"flat_map\") &&\n+            match_type(cx, cx.typeck_results().expr_ty_adjusted(fm_receiver), &paths::STD_IO_LINES)\n+        {\n+            let lint = match &fm_arg.kind {\n+                // Detect `Result::ok`\n+                ExprKind::Path(qpath) =>\n+                    cx.qpath_res(qpath, fm_arg.hir_id).opt_def_id().map(|did|\n+                        match_def_path(cx, did, &paths::CORE_RESULT_OK_METHOD)).unwrap_or_default(),\n+                // Detect `|x| x.ok()`\n+                ExprKind::Closure(Closure { body, .. }) =>\n+                    if let Body { params: [param], value, .. } = cx.tcx.hir().body(*body) &&\n+                        let ExprKind::MethodCall(method, receiver, [], _) = value.kind &&\n+                        path_to_local_id(receiver, param.pat.hir_id) &&\n+                        let Some(method_did) = cx.typeck_results().type_dependent_def_id(value.hir_id)\n+                    {\n+                        is_diag_item_method(cx, method_did, sym::Result) && method.ident.as_str() == \"ok\"\n+                    } else {\n+                        false\n+                    }\n+                _ => false,\n+            };\n+            if lint {\n+                span_lint_and_then(cx,\n+                    LINES_FILTER_MAP_OK,\n+                    fm_span,\n+                    &format!(\"`{}()` will run forever if the iterator repeatedly produces an `Err`\", fm_method.ident),\n+                    |diag| {\n+                        diag.span_note(\n+                            fm_receiver.span,\n+                            \"this expression returning a `std::io::Lines` may produce an infinite number of `Err` in case of a read error\");\n+                        diag.span_suggestion(fm_span, \"replace with\", \"map_while(Result::ok)\", Applicability::MaybeIncorrect);\n+                    });\n+                }\n+        }\n+    }\n+}"}, {"sha": "9be2d0eae80aad31bcc3be248e1dde9403f3d881", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -23,6 +23,7 @@ pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CORE_ITER_CLONED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"cloned\"];\n pub const CORE_ITER_COPIED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"copied\"];\n pub const CORE_ITER_FILTER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"filter\"];\n+pub const CORE_RESULT_OK_METHOD: [&str; 4] = [\"core\", \"result\", \"Result\", \"ok\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"alloc\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n@@ -113,6 +114,7 @@ pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];\n pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n pub const CONVERT_IDENTITY: [&str; 3] = [\"core\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n+pub const STD_IO_LINES: [&str; 3] = [\"std\", \"io\", \"Lines\"];\n pub const STD_IO_SEEK: [&str; 3] = [\"std\", \"io\", \"Seek\"];\n pub const STD_IO_SEEK_FROM_CURRENT: [&str; 4] = [\"std\", \"io\", \"SeekFrom\", \"Current\"];\n pub const STD_IO_SEEKFROM_START: [&str; 4] = [\"std\", \"io\", \"SeekFrom\", \"Start\"];"}, {"sha": "f4033cd8ed85069c3b5b59cf04ca728ebeb56aed", "filename": "tests/ui/lines_filter_map_ok.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/tests%2Fui%2Flines_filter_map_ok.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/tests%2Fui%2Flines_filter_map_ok.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flines_filter_map_ok.fixed?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::map_identity)]\n+#![warn(clippy::lines_filter_map_ok)]\n+\n+use std::io::{self, BufRead, BufReader};\n+\n+fn main() -> io::Result<()> {\n+    let f = std::fs::File::open(\"/\")?;\n+    // Lint\n+    BufReader::new(f).lines().map_while(Result::ok).for_each(|_| ());\n+    // Lint\n+    let f = std::fs::File::open(\"/\")?;\n+    BufReader::new(f).lines().map_while(Result::ok).for_each(|_| ());\n+    let s = \"foo\\nbar\\nbaz\\n\";\n+    // Lint\n+    io::stdin().lines().map_while(Result::ok).for_each(|_| ());\n+    // Lint\n+    io::stdin().lines().map_while(Result::ok).for_each(|_| ());\n+    // Do not lint (not a `Lines` iterator)\n+    io::stdin()\n+        .lines()\n+        .map(std::convert::identity)\n+        .filter_map(|x| x.ok())\n+        .for_each(|_| ());\n+    // Do not lint (not a `Result::ok()` extractor)\n+    io::stdin().lines().filter_map(|x| x.err()).for_each(|_| ());\n+    Ok(())\n+}"}, {"sha": "7e11816b2acd3b7e3f8eaf0f9bbf01db3d85696c", "filename": "tests/ui/lines_filter_map_ok.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/tests%2Fui%2Flines_filter_map_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/tests%2Fui%2Flines_filter_map_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flines_filter_map_ok.rs?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::map_identity)]\n+#![warn(clippy::lines_filter_map_ok)]\n+\n+use std::io::{self, BufRead, BufReader};\n+\n+fn main() -> io::Result<()> {\n+    let f = std::fs::File::open(\"/\")?;\n+    // Lint\n+    BufReader::new(f).lines().filter_map(Result::ok).for_each(|_| ());\n+    // Lint\n+    let f = std::fs::File::open(\"/\")?;\n+    BufReader::new(f).lines().flat_map(Result::ok).for_each(|_| ());\n+    let s = \"foo\\nbar\\nbaz\\n\";\n+    // Lint\n+    io::stdin().lines().filter_map(Result::ok).for_each(|_| ());\n+    // Lint\n+    io::stdin().lines().filter_map(|x| x.ok()).for_each(|_| ());\n+    // Do not lint (not a `Lines` iterator)\n+    io::stdin()\n+        .lines()\n+        .map(std::convert::identity)\n+        .filter_map(|x| x.ok())\n+        .for_each(|_| ());\n+    // Do not lint (not a `Result::ok()` extractor)\n+    io::stdin().lines().filter_map(|x| x.err()).for_each(|_| ());\n+    Ok(())\n+}"}, {"sha": "cddd403d589c383639c5333877022b100d5cf9f3", "filename": "tests/ui/lines_filter_map_ok.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6601d85c22a0e5b632e3332991c45058ed420ba2/tests%2Fui%2Flines_filter_map_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6601d85c22a0e5b632e3332991c45058ed420ba2/tests%2Fui%2Flines_filter_map_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flines_filter_map_ok.stderr?ref=6601d85c22a0e5b632e3332991c45058ed420ba2", "patch": "@@ -0,0 +1,51 @@\n+error: `filter_map()` will run forever if the iterator repeatedly produces an `Err`\n+  --> $DIR/lines_filter_map_ok.rs:11:31\n+   |\n+LL |     BufReader::new(f).lines().filter_map(Result::ok).for_each(|_| ());\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `map_while(Result::ok)`\n+   |\n+note: this expression returning a `std::io::Lines` may produce an infinite number of `Err` in case of a read error\n+  --> $DIR/lines_filter_map_ok.rs:11:5\n+   |\n+LL |     BufReader::new(f).lines().filter_map(Result::ok).for_each(|_| ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::lines-filter-map-ok` implied by `-D warnings`\n+\n+error: `flat_map()` will run forever if the iterator repeatedly produces an `Err`\n+  --> $DIR/lines_filter_map_ok.rs:14:31\n+   |\n+LL |     BufReader::new(f).lines().flat_map(Result::ok).for_each(|_| ());\n+   |                               ^^^^^^^^^^^^^^^^^^^^ help: replace with: `map_while(Result::ok)`\n+   |\n+note: this expression returning a `std::io::Lines` may produce an infinite number of `Err` in case of a read error\n+  --> $DIR/lines_filter_map_ok.rs:14:5\n+   |\n+LL |     BufReader::new(f).lines().flat_map(Result::ok).for_each(|_| ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `filter_map()` will run forever if the iterator repeatedly produces an `Err`\n+  --> $DIR/lines_filter_map_ok.rs:17:25\n+   |\n+LL |     io::stdin().lines().filter_map(Result::ok).for_each(|_| ());\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `map_while(Result::ok)`\n+   |\n+note: this expression returning a `std::io::Lines` may produce an infinite number of `Err` in case of a read error\n+  --> $DIR/lines_filter_map_ok.rs:17:5\n+   |\n+LL |     io::stdin().lines().filter_map(Result::ok).for_each(|_| ());\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: `filter_map()` will run forever if the iterator repeatedly produces an `Err`\n+  --> $DIR/lines_filter_map_ok.rs:19:25\n+   |\n+LL |     io::stdin().lines().filter_map(|x| x.ok()).for_each(|_| ());\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `map_while(Result::ok)`\n+   |\n+note: this expression returning a `std::io::Lines` may produce an infinite number of `Err` in case of a read error\n+  --> $DIR/lines_filter_map_ok.rs:19:5\n+   |\n+LL |     io::stdin().lines().filter_map(|x| x.ok()).for_each(|_| ());\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}