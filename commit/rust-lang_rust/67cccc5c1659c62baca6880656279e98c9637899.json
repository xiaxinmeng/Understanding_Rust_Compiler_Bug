{"sha": "67cccc5c1659c62baca6880656279e98c9637899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Y2NjYzVjMTY1OWM2MmJhY2E2ODgwNjU2Mjc5ZTk4Yzk2Mzc4OTk=", "commit": {"author": {"name": "messense", "email": "messense@icloud.com", "date": "2017-06-02T04:13:04Z"}, "committer": {"name": "messense", "email": "messense@icloud.com", "date": "2017-06-02T04:13:04Z"}, "message": "Try to fix compilation error on rustc 1.19.0-nightly (4ed2edaaf 2017-06-01)", "tree": {"sha": "f942b80a1fa324a3ae71d98d78855ed7ffa4b3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f942b80a1fa324a3ae71d98d78855ed7ffa4b3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67cccc5c1659c62baca6880656279e98c9637899", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGWGgMoNGfisvor0Vu0GooscWzKkFAlkw5dAACgkQu0GooscW\nzKnt3Q/8C2x0/0eplxvVtoV3trl0zVur/GZrZ0L+96tni4OQnS7uWDngGOiyAXr1\n8zahcINvKuhY1ZjC9M3ENy/NqC80Wfa7vb0WMtrnvXjlkR5FdVyCssuuyqQ8Wsur\nWqB7ML6PHf6ziT+3VyYRAlpJRxTC9I7dnJlFAF5jMB0BqUenOPiaeiBG4qB4Moae\njILjmu6/14bI6eodoLrFwbd7/iUJbQHw+cxB6ERIWYDvM81GTJOJdvwUZpXEY/br\ndCruPFKb2hPb1MT43iNtM86FdqlbiEkQzwIWAwVN24R4W0gBksNiSGOdF85dcyo3\nbJNw/ovhr5Fih2gZXgYQtjF32l+Vjr2OJ7pXQg2HG64otdp6f0k/lok7xvyLfy18\ntxWKqrK6y7KY4jSG5Aa2dxBa1NpyLfe5glH1gYi2NoaCB90oijPx+dpH+aRhJvlQ\nwLQdEonUVBk8LM/t9EhabBRJfnJKVPU5xTFUAjwE7HT+1QBVCVn5dVRXZ8cgz0/i\nq/4FTvDCq3rHE2c7Si/84uvnQRLqH/z7oQ60OlDyS4PLI8buHBEqc5yfux8R9dKb\nUUBulxRiBEwY3VuOEEw/x7SrUk8SQkUGOfFEWeGkygmQ6rSv1wtqkSOvLKce/dxR\nFIIN7Zdt21eTawUYAb5Hdo9RGEKxH/wJHb0bWfapSxwsss6Xb+I=\n=Ku1E\n-----END PGP SIGNATURE-----", "payload": "tree f942b80a1fa324a3ae71d98d78855ed7ffa4b3a4\nparent 892cc2833c63a4c3ed2df82c99d200f6fb9f11c2\nauthor messense <messense@icloud.com> 1496376784 +0800\ncommitter messense <messense@icloud.com> 1496376784 +0800\n\nTry to fix compilation error on rustc 1.19.0-nightly (4ed2edaaf 2017-06-01)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67cccc5c1659c62baca6880656279e98c9637899", "html_url": "https://github.com/rust-lang/rust/commit/67cccc5c1659c62baca6880656279e98c9637899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67cccc5c1659c62baca6880656279e98c9637899/comments", "author": {"login": "messense", "id": 1556054, "node_id": "MDQ6VXNlcjE1NTYwNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1556054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/messense", "html_url": "https://github.com/messense", "followers_url": "https://api.github.com/users/messense/followers", "following_url": "https://api.github.com/users/messense/following{/other_user}", "gists_url": "https://api.github.com/users/messense/gists{/gist_id}", "starred_url": "https://api.github.com/users/messense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/messense/subscriptions", "organizations_url": "https://api.github.com/users/messense/orgs", "repos_url": "https://api.github.com/users/messense/repos", "events_url": "https://api.github.com/users/messense/events{/privacy}", "received_events_url": "https://api.github.com/users/messense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "messense", "id": 1556054, "node_id": "MDQ6VXNlcjE1NTYwNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1556054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/messense", "html_url": "https://github.com/messense", "followers_url": "https://api.github.com/users/messense/followers", "following_url": "https://api.github.com/users/messense/following{/other_user}", "gists_url": "https://api.github.com/users/messense/gists{/gist_id}", "starred_url": "https://api.github.com/users/messense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/messense/subscriptions", "organizations_url": "https://api.github.com/users/messense/orgs", "repos_url": "https://api.github.com/users/messense/repos", "events_url": "https://api.github.com/users/messense/events{/privacy}", "received_events_url": "https://api.github.com/users/messense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892cc2833c63a4c3ed2df82c99d200f6fb9f11c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/892cc2833c63a4c3ed2df82c99d200f6fb9f11c2", "html_url": "https://github.com/rust-lang/rust/commit/892cc2833c63a4c3ed2df82c99d200f6fb9f11c2"}], "stats": {"total": 59, "additions": 20, "deletions": 39}, "files": [{"sha": "8d18e613e134bffe7dd0aedbb1ac0b76fa1c82eb", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -286,9 +286,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         match def {\n             Def::Const(def_id) |\n             Def::AssociatedConst(def_id) => {\n-                let substs = self.tables\n-                    .node_id_item_substs(id)\n-                    .unwrap_or_else(|| self.tcx.intern_substs(&[]));\n+                let substs = self.tables.node_substs(id);\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {"}, {"sha": "c68209b438389278448d79019c764053d8cdc614", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -160,29 +160,29 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n \n         if let Categorization::Local(lid) = cmt.cat {\n             if self.set.contains(&lid) {\n-                if let Some(&Adjust::DerefRef { autoderefs, .. }) =\n+                if let Some(&Adjust::Deref(ref overloaded)) =\n                     self.tables\n                         .adjustments\n                         .get(&borrow_id)\n                         .map(|a| &a.kind) {\n                     if LoanCause::AutoRef == loan_cause {\n                         // x.foo()\n-                        if autoderefs == 0 {\n+                        if overloaded == 0 {\n                             self.set.remove(&lid); // Used without autodereffing (i.e. x.clone())\n                         }\n                     } else {\n                         span_bug!(cmt.span, \"Unknown adjusted AutoRef\");\n                     }\n                 } else if LoanCause::AddrOf == loan_cause {\n                     // &x\n-                    if let Some(&Adjust::DerefRef { autoderefs, .. }) =\n+                    if let Some(&Adjust::Deref(ref overloaded)) =\n                         self.tables\n                             .adjustments\n                             .get(&self.tcx\n                                 .hir\n                                 .get_parent_node(borrow_id))\n                             .map(|a| &a.kind) {\n-                        if autoderefs <= 1 {\n+                        if overloaded <= 1 {\n                             // foo(&x) where no extra autoreffing is happening\n                             self.set.remove(&lid);\n                         }"}, {"sha": "36cae6968d444e12095ab889c704634cdb0be5e3", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -137,11 +137,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n                 }\n             },\n             ExprMethodCall(..) => {\n-                let method_call = ty::MethodCall::expr(e.id);\n                 let borrowed_table = self.cx.tables;\n-                let method_type = borrowed_table.method_map.get(&method_call).expect(\"This should never happen.\");\n-                let result_ty = method_type.ty.fn_ret();\n-                if let ty::TyNever = self.cx.tcx.erase_late_bound_regions(&result_ty).sty {\n+                if borrowed_table.expr_ty(e).is_never() {\n                     self.report_diverging_sub_expr(e);\n                 }\n             },"}, {"sha": "62a843885c76f96de0f77467387dab10d1347a42", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -184,8 +184,8 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                 }\n             },\n             hir::ExprMethodCall(_, _, ref args) => {\n-                let method_call = ty::MethodCall::expr(expr.id);\n-                let base_type = self.cx.tables.method_map[&method_call].ty;\n+                let def_id = self.cx.tables.type_dependent_defs[&expr.id].def_id();\n+                let base_type = self.cx.tcx.type_of(def_id);\n \n                 if type_is_unsafe_function(base_type) {\n                     for arg in args {"}, {"sha": "611987ae163013d5bcefd949401f650366ece4a0", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -95,7 +95,7 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]\n             {\n                 let did = cx.tcx.hir.local_def_id(item.id.node_id);\n                 let impl_ty = cx.tcx.type_of(did);\n-                impl_ty.fn_args().skip_binder().len() == 1\n+                impl_ty.fn_sig().inputs().skip_binder().len() == 1\n             }\n         } else {\n             false\n@@ -122,7 +122,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n             {\n                 let did = cx.tcx.hir.local_def_id(item.id.node_id);\n                 let impl_ty = cx.tcx.type_of(did);\n-                impl_ty.fn_args().skip_binder().len() == 1\n+                impl_ty.fn_sig().inputs().skip_binder().len() == 1\n             }\n         } else {\n             false"}, {"sha": "2e373988887ab2a5a2761ff605a6af840ba033f6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -676,13 +676,8 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                     lint_iter_method(cx, args, arg, &method_name);\n                 }\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n-                let method_call = ty::MethodCall::expr(arg.id);\n-                let fn_ty = cx.tables\n-                    .method_map\n-                    .get(&method_call)\n-                    .map(|method_callee| method_callee.ty)\n-                    .expect(\"method calls need an entry in the method map\");\n-                let fn_arg_tys = fn_ty.fn_args();\n+                let fn_ty = cx.tables.expr_ty(arg);\n+                let fn_arg_tys = fn_ty.fn_sig().inputs();\n                 assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n                 if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n                     lint_iter_method(cx, args, arg, &method_name);"}, {"sha": "4712cdde4b9ecf13ff57e357c97a704dafbc9022", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc::ty::{TypeAndMut, TypeVariants, MethodCall, TyS};\n+use rustc::ty::{TypeAndMut, TypeVariants, TyS};\n use rustc::hir::*;\n use utils::span_lint;\n \n@@ -49,9 +49,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                 }\n             },\n             ExprMethodCall(ref name, _, ref arguments) => {\n-                let method_call = MethodCall::expr(e.id);\n-                let method_type = borrowed_table.method_map.get(&method_call).expect(\"This should never happen.\");\n-                check_arguments(cx, arguments, method_type.ty, &name.node.as_str())\n+                let method_type = borrowed_table.expr_ty(e);\n+                check_arguments(cx, arguments, method_type, &name.node.as_str())\n             },\n             _ => (),\n         }"}, {"sha": "1d1d1b1f45da3c923b3c2da2622b0f210d07903c", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n         if let ExprAddrOf(MutImmutable, ref inner) = e.node {\n             if let ty::TyRef(..) = cx.tables.expr_ty(inner).sty {\n-                if let Some(&ty::adjustment::Adjust::DerefRef { autoderefs, autoref, .. }) =\n+                if let Some(&ty::adjustment::Adjust::Deref(ref overloaded)) =\n                     cx.tables.adjustments.get(&e.id).map(|a| &a.kind) {\n                     if autoderefs > 1 && autoref.is_some() {\n                         span_lint(cx,"}, {"sha": "e7065c16039c6ed7669d05cf65e6560e165218d8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccc5c1659c62baca6880656279e98c9637899/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=67cccc5c1659c62baca6880656279e98c9637899", "patch": "@@ -184,12 +184,8 @@ pub fn match_type(cx: &LateContext, ty: ty::Ty, path: &[&str]) -> bool {\n \n /// Check if the method call given in `expr` belongs to given type.\n pub fn match_impl_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n-    let method_call = ty::MethodCall::expr(expr.id);\n-\n-    let trt_id = cx.tables\n-        .method_map\n-        .get(&method_call)\n-        .and_then(|callee| cx.tcx.impl_of_method(callee.def_id));\n+    let method_call = cx.tables.type_dependent_defs[&expr.id];\n+    let trt_id = cx.tcx.impl_of_method(method_call.def_id());\n     if let Some(trt_id) = trt_id {\n         match_def_path(cx.tcx, trt_id, path)\n     } else {\n@@ -199,12 +195,8 @@ pub fn match_impl_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n \n /// Check if the method call given in `expr` belongs to given trait.\n pub fn match_trait_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n-    let method_call = ty::MethodCall::expr(expr.id);\n-\n-    let trt_id = cx.tables\n-        .method_map\n-        .get(&method_call)\n-        .and_then(|callee| cx.tcx.trait_of_item(callee.def_id));\n+    let method_call = cx.tables.type_dependent_defs[&expr.id];\n+    let trt_id = cx.tcx.trait_of_item(method_call.def_id());\n     if let Some(trt_id) = trt_id {\n         match_def_path(cx.tcx, trt_id, path)\n     } else {"}]}