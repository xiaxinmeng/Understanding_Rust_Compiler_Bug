{"sha": "d1c2815d6aa131182aa93603de215d63c52d0c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYzI4MTVkNmFhMTMxMTgyYWE5MzYwM2RlMjE1ZDYzYzUyZDBjNTM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-22T22:12:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-22T22:12:46Z"}, "message": "Use `diverges` instead of `!`-type", "tree": {"sha": "c8fee55f49b06975b367dad1f24770316ba48ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8fee55f49b06975b367dad1f24770316ba48ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c2815d6aa131182aa93603de215d63c52d0c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c2815d6aa131182aa93603de215d63c52d0c53", "html_url": "https://github.com/rust-lang/rust/commit/d1c2815d6aa131182aa93603de215d63c52d0c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c2815d6aa131182aa93603de215d63c52d0c53/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d415fae8b76cddbcd7825cb6642186a833453b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d415fae8b76cddbcd7825cb6642186a833453b3c", "html_url": "https://github.com/rust-lang/rust/commit/d415fae8b76cddbcd7825cb6642186a833453b3c"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "dce3be9399dd60e8d8f2ae6f35e89c7dfcb61ead", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c2815d6aa131182aa93603de215d63c52d0c53/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c2815d6aa131182aa93603de215d63c52d0c53/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=d1c2815d6aa131182aa93603de215d63c52d0c53", "patch": "@@ -630,7 +630,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // If we encountered a `break`, then (no surprise) it may be possible to break from the\n             // loop... unless the value being returned from the loop diverges itself, e.g.\n             // `break return 5` or `break loop {}`.\n-            ctxt.may_break |= !e_ty.is_never();\n+            ctxt.may_break |= !self.diverges.get().is_always();\n \n             // the type of a `break` is always `!`, since it diverges\n             tcx.types.never"}, {"sha": "d070fddaffc195d58775446dcd3c44e8a9cef561", "filename": "src/test/ui/break-diverging-value.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1c2815d6aa131182aa93603de215d63c52d0c53/src%2Ftest%2Fui%2Fbreak-diverging-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c2815d6aa131182aa93603de215d63c52d0c53/src%2Ftest%2Fui%2Fbreak-diverging-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-diverging-value.rs?ref=d1c2815d6aa131182aa93603de215d63c52d0c53", "patch": "@@ -12,9 +12,8 @@ fn loop_break_break() -> i32 { //~ ERROR mismatched types\n     let loop_value = loop { break break };\n }\n \n-fn loop_break_return_2() -> i32 { //~ ERROR mismatched types\n-    let loop_value = loop { break { return; () } };\n-    //~^ ERROR `return;` in a function whose return type is not `()`\n+fn loop_break_return_2() -> i32 {\n+    let loop_value = loop { break { return 0; () } }; // ok\n }\n \n enum Void {}"}, {"sha": "69edcd240800222081f7eddcaeb9b55107101345", "filename": "src/test/ui/break-diverging-value.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1c2815d6aa131182aa93603de215d63c52d0c53/src%2Ftest%2Fui%2Fbreak-diverging-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1c2815d6aa131182aa93603de215d63c52d0c53/src%2Ftest%2Fui%2Fbreak-diverging-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-diverging-value.stderr?ref=d1c2815d6aa131182aa93603de215d63c52d0c53", "patch": "@@ -6,29 +6,14 @@ LL | fn loop_break_break() -> i32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0069]: `return;` in a function whose return type is not `()`\n-  --> $DIR/break-diverging-value.rs:16:37\n-   |\n-LL |     let loop_value = loop { break { return; () } };\n-   |                                     ^^^^^^ return type is not `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/break-diverging-value.rs:15:29\n-   |\n-LL | fn loop_break_return_2() -> i32 {\n-   |    -------------------      ^^^ expected `i32`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n-\n error[E0308]: mismatched types\n-  --> $DIR/break-diverging-value.rs:26:25\n+  --> $DIR/break-diverging-value.rs:25:25\n    |\n LL | fn loop_break_void() -> i32 {\n    |    ---------------      ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0069, E0308.\n-For more information about an error, try `rustc --explain E0069`.\n+For more information about this error, try `rustc --explain E0308`."}]}