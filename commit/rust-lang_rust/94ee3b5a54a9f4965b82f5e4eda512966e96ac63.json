{"sha": "94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZWUzYjVhNTRhOWY0OTY1YjgyZjVlNGVkYTUxMjk2NmU5NmFjNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-22T09:59:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-22T09:59:07Z"}, "message": "Auto merge of #27871 - alexcrichton:stabilize-libcore, r=aturon\n\nThese commits move libcore into a state so that it's ready for stabilization, performing some minor cleanup:\r\n\r\n* The primitive modules for integers in the standard library were all removed from the source tree as they were just straight reexports of the libcore variants.\r\n* The `core::atomic` module now lives in `core::sync::atomic`. The `core::sync` module is otherwise empty, but ripe for expansion!\r\n* The `core::prelude::v1` module was stabilized after auditing that it is a subset of the standard library's prelude plus some primitive extension traits (char, str, and slice)\r\n* Some unstable-hacks for float parsing errors were shifted around to not use the same unstable hacks (e.g. the `flt2dec` module is now used for \"privacy\").\r\n\r\n\r\nAfter this commit, the remaining large unstable functionality specific to libcore is:\r\n\r\n* `raw`, `intrinsics`, `nonzero`, `array`, `panicking`, `simd` -- these modules are all unstable or not reexported in the standard library, so they're just remaining in the same status quo as before\r\n* `num::Float` - this extension trait for floats needs to be audited for functionality (much of that is happening in #27823)  and may also want to be renamed to `FloatExt` or `F32Ext`/`F64Ext`.\r\n* Should the extension traits for primitives be stabilized in libcore?\r\n\r\nI believe other unstable pieces are not isolated to just libcore but also affect the standard library.\r\n\r\ncc #27701", "tree": {"sha": "d404e61ade0e002ee43c690d64e4fb2e2900c694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d404e61ade0e002ee43c690d64e4fb2e2900c694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "html_url": "https://github.com/rust-lang/rust/commit/94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "html_url": "https://github.com/rust-lang/rust/commit/e9b74a90172e99e361ff46277f52bfc03d0a7ba4"}, {"sha": "a2b932c0b614aa5a68f7d24977fab241998a89ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b932c0b614aa5a68f7d24977fab241998a89ef", "html_url": "https://github.com/rust-lang/rust/commit/a2b932c0b614aa5a68f7d24977fab241998a89ef"}], "stats": {"total": 705, "additions": 244, "deletions": 461}, "files": [{"sha": "bb2daa2a1d74274e2a52ecb162f3a9752dcf2937", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -71,8 +71,8 @@\n \n use boxed::Box;\n \n-use core::atomic;\n-use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n+use core::sync::atomic;\n+use core::sync::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::fmt;\n use core::cmp::Ordering;\n use core::mem::{align_of_val, size_of_val};"}, {"sha": "551ea233f762759cab911d7757d748fc315b1412", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -144,7 +144,7 @@ pub mod convert;\n \n pub mod any;\n pub mod array;\n-pub mod atomic;\n+pub mod sync;\n pub mod cell;\n pub mod char;\n pub mod panicking;"}, {"sha": "4e6b6f04e9e9225a522a96bb705ad5d3f23f3eeb", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 87, "deletions": 13, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -96,8 +96,9 @@\n             issue = \"0\")]\n \n use prelude::v1::*;\n-use num::ParseFloatError as PFE;\n-use num::FloatErrorKind;\n+use fmt;\n+use str::FromStr;\n+\n use self::parse::{parse_decimal, Decimal, Sign};\n use self::parse::ParseResult::{self, Valid, ShortcutToInf, ShortcutToZero};\n use self::num::digits_to_big;\n@@ -110,14 +111,87 @@ mod num;\n pub mod rawfp;\n pub mod parse;\n \n-/// Entry point for decimal-to-f32 conversion.\n-pub fn to_f32(s: &str) -> Result<f32, PFE> {\n-    dec2flt(s)\n+macro_rules! from_str_float_impl {\n+    ($t:ty, $func:ident) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl FromStr for $t {\n+            type Err = ParseFloatError;\n+\n+            /// Converts a string in base 10 to a float.\n+            /// Accepts an optional decimal exponent.\n+            ///\n+            /// This function accepts strings such as\n+            ///\n+            /// * '3.14'\n+            /// * '-3.14'\n+            /// * '2.5E10', or equivalently, '2.5e10'\n+            /// * '2.5E-10'\n+            /// * '.' (understood as 0)\n+            /// * '5.'\n+            /// * '.5', or, equivalently,  '0.5'\n+            /// * 'inf', '-inf', 'NaN'\n+            ///\n+            /// Leading and trailing whitespace represent an error.\n+            ///\n+            /// # Arguments\n+            ///\n+            /// * src - A string\n+            ///\n+            /// # Return value\n+            ///\n+            /// `Err(ParseFloatError)` if the string did not represent a valid\n+            /// number.  Otherwise, `Ok(n)` where `n` is the floating-point\n+            /// number represented by `src`.\n+            #[inline]\n+            fn from_str(src: &str) -> Result<Self, ParseFloatError> {\n+                dec2flt(src)\n+            }\n+        }\n+    }\n+}\n+from_str_float_impl!(f32, to_f32);\n+from_str_float_impl!(f64, to_f64);\n+\n+/// An error which can be returned when parsing a float.\n+#[derive(Debug, Clone, PartialEq)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct ParseFloatError {\n+    kind: FloatErrorKind\n+}\n+\n+#[derive(Debug, Clone, PartialEq)]\n+enum FloatErrorKind {\n+    Empty,\n+    Invalid,\n+}\n+\n+impl ParseFloatError {\n+    #[unstable(feature = \"int_error_internals\",\n+               reason = \"available through Error trait and this method should \\\n+                         not be exposed publicly\",\n+               issue = \"0\")]\n+    #[doc(hidden)]\n+    pub fn __description(&self) -> &str {\n+        match self.kind {\n+            FloatErrorKind::Empty => \"cannot parse float from empty string\",\n+            FloatErrorKind::Invalid => \"invalid float literal\",\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Display for ParseFloatError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.__description().fmt(f)\n+    }\n+}\n+\n+pub fn pfe_empty() -> ParseFloatError {\n+    ParseFloatError { kind: FloatErrorKind::Empty }\n }\n \n-/// Entry point for decimal-to-f64 conversion.\n-pub fn to_f64(s: &str) -> Result<f64, PFE> {\n-    dec2flt(s)\n+pub fn pfe_invalid() -> ParseFloatError {\n+    ParseFloatError { kind: FloatErrorKind::Invalid }\n }\n \n /// Split decimal string into sign and the rest, without inspecting or validating the rest.\n@@ -131,9 +205,9 @@ fn extract_sign(s: &str) -> (Sign, &str) {\n }\n \n /// Convert a decimal string into a floating point number.\n-fn dec2flt<T: RawFloat>(s: &str) -> Result<T, PFE> {\n+fn dec2flt<T: RawFloat>(s: &str) -> Result<T, ParseFloatError> {\n     if s.is_empty() {\n-        return Err(PFE { __kind: FloatErrorKind::Empty });\n+        return Err(pfe_empty())\n     }\n     let (sign, s) = extract_sign(s);\n     let flt = match parse_decimal(s) {\n@@ -143,7 +217,7 @@ fn dec2flt<T: RawFloat>(s: &str) -> Result<T, PFE> {\n         ParseResult::Invalid => match s {\n             \"inf\" => T::infinity(),\n             \"NaN\" => T::nan(),\n-            _ => { return Err(PFE { __kind: FloatErrorKind::Invalid }); }\n+            _ => { return Err(pfe_invalid()); }\n         }\n     };\n \n@@ -155,7 +229,7 @@ fn dec2flt<T: RawFloat>(s: &str) -> Result<T, PFE> {\n \n /// The main workhorse for the decimal-to-float conversion: Orchestrate all the preprocessing\n /// and figure out which algorithm should do the actual conversion.\n-fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, PFE> {\n+fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n     simplify(&mut decimal);\n     if let Some(x) = trivial_cases(&decimal) {\n         return Ok(x);\n@@ -172,7 +246,7 @@ fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, PFE> {\n     // If we exceed this, perhaps while calculating `f * 10^e` in Algorithm R or Algorithm M,\n     // we'll crash. So we error out before getting too close, with a generous safety margin.\n     if max_digits > 375 {\n-        return Err(PFE { __kind: FloatErrorKind::Invalid });\n+        return Err(pfe_invalid());\n     }\n     let f = digits_to_big(decimal.integral, decimal.fractional);\n "}, {"sha": "88c3b756793a2b9bb9dd4664024f69c4f4a01ea7", "filename": "src/libcore/num/float_macros.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat_macros.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -23,8 +23,7 @@ macro_rules! from_str_radix_float_impl {\n     ($T:ty) => {\n         fn from_str_radix(src: &str, radix: u32)\n                           -> Result<$T, ParseFloatError> {\n-            use num::FloatErrorKind::*;\n-            use num::ParseFloatError as PFE;\n+            use num::dec2flt::{pfe_empty, pfe_invalid};\n \n             // Special values\n             match src {\n@@ -35,8 +34,8 @@ macro_rules! from_str_radix_float_impl {\n             }\n \n             let (is_positive, src) =  match src.slice_shift_char() {\n-                None             => return Err(PFE { __kind: Empty }),\n-                Some(('-', \"\"))  => return Err(PFE { __kind: Empty }),\n+                None             => return Err(pfe_empty()),\n+                Some(('-', \"\"))  => return Err(pfe_empty()),\n                 Some(('-', src)) => (false, src),\n                 Some((_, _))     => (true,  src),\n             };\n@@ -88,7 +87,7 @@ macro_rules! from_str_radix_float_impl {\n                             break;  // start of fractional part\n                         },\n                         _ => {\n-                            return Err(PFE { __kind: Invalid });\n+                            return Err(pfe_invalid())\n                         },\n                     },\n                 }\n@@ -122,7 +121,7 @@ macro_rules! from_str_radix_float_impl {\n                                 break; // start of exponent\n                             },\n                             _ => {\n-                                return Err(PFE { __kind: Invalid });\n+                                return Err(pfe_invalid())\n                             },\n                         },\n                     }\n@@ -135,7 +134,7 @@ macro_rules! from_str_radix_float_impl {\n                     let base = match c {\n                         'E' | 'e' if radix == 10 => 10.0,\n                         'P' | 'p' if radix == 16 => 2.0,\n-                        _ => return Err(PFE { __kind: Invalid }),\n+                        _ => return Err(pfe_invalid()),\n                     };\n \n                     // Parse the exponent as decimal integer\n@@ -144,13 +143,13 @@ macro_rules! from_str_radix_float_impl {\n                         Some(('-', src)) => (false, src.parse::<usize>()),\n                         Some(('+', src)) => (true,  src.parse::<usize>()),\n                         Some((_, _))     => (true,  src.parse::<usize>()),\n-                        None             => return Err(PFE { __kind: Invalid }),\n+                        None             => return Err(pfe_invalid()),\n                     };\n \n                     match (is_positive, exp) {\n                         (true,  Ok(exp)) => base.powi(exp as i32),\n                         (false, Ok(exp)) => 1.0 / base.powi(exp as i32),\n-                        (_, Err(_))      => return Err(PFE { __kind: Invalid }),\n+                        (_, Err(_))      => return Err(pfe_invalid()),\n                     }\n                 },\n                 None => 1.0, // no exponent"}, {"sha": "4054497941797140ccc4fa1c9d7c8496e8efe446", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 16-bits integers (`i16` type)\n+//! The 16-bit signed integer type.\n+//!\n+//! *[See also the `i16` primitive type](../primitive.i16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "5d2ade8d8e0e93b3dcd0e0adb539e48a9391a8e3", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 32-bits integers (`i32` type)\n+//! The 32-bit signed integer type.\n+//!\n+//! *[See also the `i32` primitive type](../primitive.i32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "b1d43a3b83872a79b2dd55de5c2ca2e0276674c9", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 64-bits integers (`i64` type)\n+//! The 64-bit signed integer type.\n+//!\n+//! *[See also the `i64` primitive type](../primitive.i64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "ee003d92b28235c47e366624cd6410722faa0548", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 8-bits integers (`i8` type)\n+//! The 8-bit signed integer type.\n+//!\n+//! *[See also the `i8` primitive type](../primitive.i8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "034a5c0eb89d4388c16be66883a5baff71bf84c8", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for pointer-sized signed integers (`isize` type)\n+//! The pointer-sized signed integer type.\n+//!\n+//! *[See also the `isize` primitive type](../primitive.isize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "05c7e8b8de48bba63d4f991076f89b8881f4c5d1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 78, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -1327,47 +1327,6 @@ pub trait Float: Sized {\n     fn to_radians(self) -> Self;\n }\n \n-macro_rules! from_str_float_impl {\n-    ($t:ty, $func:ident) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl FromStr for $t {\n-            type Err = ParseFloatError;\n-\n-            /// Converts a string in base 10 to a float.\n-            /// Accepts an optional decimal exponent.\n-            ///\n-            /// This function accepts strings such as\n-            ///\n-            /// * '3.14'\n-            /// * '-3.14'\n-            /// * '2.5E10', or equivalently, '2.5e10'\n-            /// * '2.5E-10'\n-            /// * '.' (understood as 0)\n-            /// * '5.'\n-            /// * '.5', or, equivalently,  '0.5'\n-            /// * 'inf', '-inf', 'NaN'\n-            ///\n-            /// Leading and trailing whitespace represent an error.\n-            ///\n-            /// # Arguments\n-            ///\n-            /// * src - A string\n-            ///\n-            /// # Return value\n-            ///\n-            /// `Err(ParseFloatError)` if the string did not represent a valid\n-            /// number.  Otherwise, `Ok(n)` where `n` is the floating-point\n-            /// number represented by `src`.\n-            #[inline]\n-            fn from_str(src: &str) -> Result<Self, ParseFloatError> {\n-                dec2flt::$func(src)\n-            }\n-        }\n-    }\n-}\n-from_str_float_impl!(f32, to_f32);\n-from_str_float_impl!(f64, to_f64);\n-\n macro_rules! from_str_radix_int_impl {\n     ($($t:ty)*) => {$(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1510,40 +1469,4 @@ impl fmt::Display for ParseIntError {\n     }\n }\n \n-/// An error which can be returned when parsing a float.\n-#[derive(Debug, Clone, PartialEq)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct ParseFloatError {\n-    #[doc(hidden)]\n-    #[unstable(feature = \"float_error_internals\",\n-               reason = \"should not be exposed publicly\",\n-               issue = \"0\")]\n-    pub __kind: FloatErrorKind\n-}\n-\n-#[derive(Debug, Clone, PartialEq)]\n-#[unstable(feature = \"float_error_internals\",\n-           reason = \"should not be exposed publicly\",\n-           issue = \"0\")]\n-#[doc(hidden)]\n-pub enum FloatErrorKind {\n-    Empty,\n-    Invalid,\n-}\n-\n-impl ParseFloatError {\n-    #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n-        match self.__kind {\n-            FloatErrorKind::Empty => \"cannot parse float from empty string\",\n-            FloatErrorKind::Invalid => \"invalid float literal\",\n-        }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Display for ParseFloatError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.__description().fmt(f)\n-    }\n-}\n+pub use num::dec2flt::ParseFloatError;"}, {"sha": "68e50e8a400ea021a472b0542c64509c7eaa976c", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 16-bits integers (`u16` type)\n+//! The 16-bit unsigned integer type.\n+//!\n+//! *[See also the `u16` primitive type](../primitive.u16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "c1ee96b363c27783e016f113c6a59b54e0a3f651", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 32-bits integers (`u32` type)\n+//! The 32-bit unsigned integer type.\n+//!\n+//! *[See also the `u32` primitive type](../primitive.u32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "c0d18d850a796d9a841c17f85c448a42f5becb47", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 64-bits integer (`u64` type)\n+//! The 64-bit unsigned integer type.\n+//!\n+//! *[See also the `u64` primitive type](../primitive.u64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "a60c480d810ea4e20be74b5add6271c9e95c7760", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 8-bits integers (`u8` type)\n+//! The 8-bit unsigned integer type.\n+//!\n+//! *[See also the `u8` primitive type](../primitive.u8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "70e790106e1c6706e4e96f8cb9ce4a858fae2201", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for pointer-sized unsigned integers (`usize` type)\n+//! The pointer-sized unsigned integer type.\n+//!\n+//! *[See also the `usize` primitive type](../primitive.usize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "99b1947c84e4f8fd0cb3a1d282ac3bd8c5418487", "filename": "src/libcore/prelude/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fmod.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -10,4 +10,6 @@\n \n //! The libcore prelude\n \n+#![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n+\n pub mod v1;"}, {"sha": "0457188586e49bac07d7bc637d2a27595443be03", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -14,27 +14,26 @@\n //! well. This module is imported by default when `#![no_std]` is used in the\n //! same manner as the standard library's prelude.\n \n-#![unstable(feature = \"core_prelude\",\n-            reason = \"the libcore prelude has not been scrutinized and \\\n-                      stabilized yet\",\n-            issue = \"27701\")]\n+#![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n \n // Reexported core operators\n-pub use marker::{Copy, Send, Sized, Sync};\n-pub use ops::{Drop, Fn, FnMut, FnOnce};\n+#[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n+#[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions\n-pub use mem::drop;\n+#[doc(no_inline)] pub use mem::drop;\n \n // Reexported types and traits\n-pub use char::CharExt;\n-pub use clone::Clone;\n-pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-pub use convert::{AsRef, AsMut, Into, From};\n-pub use default::Default;\n-pub use iter::IntoIterator;\n-pub use iter::{Iterator, DoubleEndedIterator, Extend, ExactSizeIterator};\n-pub use option::Option::{self, Some, None};\n-pub use result::Result::{self, Ok, Err};\n-pub use slice::SliceExt;\n-pub use str::StrExt;\n+#[doc(no_inline)] pub use clone::Clone;\n+#[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n+#[doc(no_inline)] pub use convert::{AsRef, AsMut, Into, From};\n+#[doc(no_inline)] pub use default::Default;\n+#[doc(no_inline)] pub use iter::{Iterator, Extend, IntoIterator};\n+#[doc(no_inline)] pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n+#[doc(no_inline)] pub use option::Option::{self, Some, None};\n+#[doc(no_inline)] pub use result::Result::{self, Ok, Err};\n+\n+// Reexported extension traits for primitive types\n+#[doc(no_inline)] pub use slice::SliceExt;\n+#[doc(no_inline)] pub use str::StrExt;\n+#[doc(no_inline)] pub use char::CharExt;"}, {"sha": "53952cdc9080b525a1f9514994d42848a22908d6", "filename": "src/libcore/sync/atomic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "previous_filename": "src/libcore/atomic.rs"}, {"sha": "0080e0b5e43537eb64f3ed57042501f03d7b5473", "filename": "src/libcore/sync/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcore%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fmod.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![doc(hidden)]\n+//! Synchronization primitives\n \n-macro_rules! int_module { ($T:ty) => (\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-) }\n+pub mod atomic;", "previous_filename": "src/libstd/num/int_macros.rs"}, {"sha": "b6bb5fddf4a4bdc4fed02347bfc312cc53636f0e", "filename": "src/libcoretest/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcoretest%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcoretest%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fatomic.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::atomic::*;\n-use core::atomic::Ordering::SeqCst;\n+use core::sync::atomic::*;\n+use core::sync::atomic::Ordering::SeqCst;\n \n #[test]\n fn bool_() {"}, {"sha": "131cf62957537ea4283ae43383ee2293d7329c12", "filename": "src/libcoretest/num/dec2flt/mod.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -12,7 +12,6 @@\n \n use std::{i64, f32, f64};\n use test;\n-use core::num::dec2flt::{to_f32, to_f64};\n \n mod parse;\n mod rawfp;\n@@ -27,11 +26,11 @@ macro_rules! test_literal {\n         let inputs = &[stringify!($x).into(), format!(\"{:?}\", x64), format!(\"{:e}\", x64)];\n         for input in inputs {\n             if input != \"inf\" {\n-                assert_eq!(to_f64(input), Ok(x64));\n-                assert_eq!(to_f32(input), Ok(x32));\n+                assert_eq!(input.parse(), Ok(x64));\n+                assert_eq!(input.parse(), Ok(x32));\n                 let neg_input = &format!(\"-{}\", input);\n-                assert_eq!(to_f64(neg_input), Ok(-x64));\n-                assert_eq!(to_f32(neg_input), Ok(-x32));\n+                assert_eq!(neg_input.parse(), Ok(-x64));\n+                assert_eq!(neg_input.parse(), Ok(-x32));\n             }\n         }\n     })\n@@ -99,83 +98,83 @@ fn fast_path_correct() {\n \n #[test]\n fn lonely_dot() {\n-    assert_eq!(to_f64(\".\"), Ok(0.0));\n+    assert_eq!(\".\".parse(), Ok(0.0));\n }\n \n #[test]\n fn nan() {\n-    assert!(to_f64(\"NaN\").unwrap().is_nan());\n-    assert!(to_f32(\"NaN\").unwrap().is_nan());\n+    assert!(\"NaN\".parse::<f32>().unwrap().is_nan());\n+    assert!(\"NaN\".parse::<f64>().unwrap().is_nan());\n }\n \n #[test]\n fn inf() {\n-    assert_eq!(to_f64(\"inf\"), Ok(f64::INFINITY));\n-    assert_eq!(to_f64(\"-inf\"), Ok(f64::NEG_INFINITY));\n-    assert_eq!(to_f32(\"inf\"), Ok(f32::INFINITY));\n-    assert_eq!(to_f32(\"-inf\"), Ok(f32::NEG_INFINITY));\n+    assert_eq!(\"inf\".parse(), Ok(f64::INFINITY));\n+    assert_eq!(\"-inf\".parse(), Ok(f64::NEG_INFINITY));\n+    assert_eq!(\"inf\".parse(), Ok(f32::INFINITY));\n+    assert_eq!(\"-inf\".parse(), Ok(f32::NEG_INFINITY));\n }\n \n #[test]\n fn massive_exponent() {\n     let max = i64::MAX;\n-    assert_eq!(to_f64(&format!(\"1e{}000\", max)), Ok(f64::INFINITY));\n-    assert_eq!(to_f64(&format!(\"1e-{}000\", max)), Ok(0.0));\n-    assert_eq!(to_f64(&format!(\"1e{}000\", max)), Ok(f64::INFINITY));\n+    assert_eq!(format!(\"1e{}000\", max).parse(), Ok(f64::INFINITY));\n+    assert_eq!(format!(\"1e-{}000\", max).parse(), Ok(0.0));\n+    assert_eq!(format!(\"1e{}000\", max).parse(), Ok(f64::INFINITY));\n }\n \n #[bench]\n fn bench_0(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"0.0\"));\n+    b.iter(|| \"0.0\".parse::<f64>());\n }\n \n #[bench]\n fn bench_42(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"42\"));\n+    b.iter(|| \"42\".parse::<f64>());\n }\n \n #[bench]\n fn bench_huge_int(b: &mut test::Bencher) {\n     // 2^128 - 1\n-    b.iter(|| to_f64(\"170141183460469231731687303715884105727\"));\n+    b.iter(|| \"170141183460469231731687303715884105727\".parse::<f64>());\n }\n \n #[bench]\n fn bench_short_decimal(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"1234.5678\"));\n+    b.iter(|| \"1234.5678\".parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_long(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"3.14159265358979323846264338327950288\"));\n+    b.iter(|| \"3.14159265358979323846264338327950288\".parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_short(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"3.141592653589793\"))\n+    b.iter(|| \"3.141592653589793\".parse::<f64>())\n }\n \n #[bench]\n fn bench_1e150(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"1e150\"));\n+    b.iter(|| \"1e150\".parse::<f64>());\n }\n \n #[bench]\n fn bench_long_decimal_and_exp(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"727501488517303786137132964064381141071e-123\"));\n+    b.iter(|| \"727501488517303786137132964064381141071e-123\".parse::<f64>());\n }\n \n #[bench]\n fn bench_min_subnormal(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"5e-324\"));\n+    b.iter(|| \"5e-324\".parse::<f64>());\n }\n \n #[bench]\n fn bench_min_normal(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"2.2250738585072014e-308\"));\n+    b.iter(|| \"2.2250738585072014e-308\".parse::<f64>());\n }\n \n #[bench]\n fn bench_max(b: &mut test::Bencher) {\n-    b.iter(|| to_f64(\"1.7976931348623157e308\"));\n+    b.iter(|| \"1.7976931348623157e308\".parse::<f64>());\n }"}, {"sha": "25591db64d9070bbc3c781a8a0d3d3a4b5bed9b2", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -14,6 +14,7 @@ mod tests {\n     use core::$T_i::*;\n     use num;\n     use core::ops::{BitOr, BitAnd, BitXor, Shl, Shr, Not};\n+    use std::str::FromStr;\n \n     #[test]\n     fn test_overflows() {\n@@ -121,6 +122,35 @@ mod tests {\n         assert!((10 as $T).checked_div(2) == Some(5));\n         assert!((5 as $T).checked_div(0) == None);\n     }\n-}\n \n+    fn from_str<T: FromStr>(t: &str) -> Option<T> {\n+        FromStr::from_str(t).ok()\n+    }\n+\n+    #[test]\n+    pub fn test_from_str() {\n+        assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n+        assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));\n+        assert_eq!(from_str::<$T>(\"10\"), Some(10 as $T));\n+        assert_eq!(from_str::<u32>(\"123456789\"), Some(123456789 as u32));\n+        assert_eq!(from_str::<$T>(\"00100\"), Some(100 as $T));\n+\n+        assert_eq!(from_str::<$T>(\"\"), None);\n+        assert_eq!(from_str::<$T>(\" \"), None);\n+        assert_eq!(from_str::<$T>(\"x\"), None);\n+    }\n+\n+    #[test]\n+    pub fn test_parse_bytes() {\n+        assert_eq!($T::from_str_radix(\"123\", 10), Ok(123 as $T));\n+        assert_eq!($T::from_str_radix(\"1001\", 2), Ok(9 as $T));\n+        assert_eq!($T::from_str_radix(\"123\", 8), Ok(83 as $T));\n+        assert_eq!(u16::from_str_radix(\"123\", 16), Ok(291 as u16));\n+        assert_eq!(u16::from_str_radix(\"ffff\", 16), Ok(65535 as u16));\n+        assert_eq!($T::from_str_radix(\"z\", 36), Ok(35 as $T));\n+\n+        assert_eq!($T::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n+        assert_eq!($T::from_str_radix(\"_\", 2).ok(), None::<$T>);\n+    }\n+}\n )}"}, {"sha": "179f0727d46f3e1e21fc62f253de7cfe17591d0d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -254,7 +254,6 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-#![allow(trivial_casts)]\n #![deny(missing_docs)]\n \n #[cfg(test)] extern crate test;\n@@ -264,7 +263,7 @@\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n // add a new crate name so we can attach the reexports to it.\n #[macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n-    unreachable, unimplemented, write, writeln)]\n+                 unreachable, unimplemented, write, writeln)]\n extern crate core as __core;\n \n #[macro_use]\n@@ -309,7 +308,6 @@ pub use core_collections::fmt;\n pub use core_collections::slice;\n pub use core_collections::str;\n pub use core_collections::string;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::vec;\n \n pub use rustc_unicode::char;\n@@ -328,32 +326,21 @@ pub mod prelude;\n \n /* Primitive types */\n \n-// NB: slice and str are primitive types too, but their module docs + primitive doc pages\n-// are inlined from the public re-exports of core_collections::{slice, str} above.\n-\n-#[path = \"num/float_macros.rs\"]\n-#[macro_use]\n-mod float_macros;\n-\n-#[path = \"num/int_macros.rs\"]\n-#[macro_use]\n-mod int_macros;\n-\n-#[path = \"num/uint_macros.rs\"]\n-#[macro_use]\n-mod uint_macros;\n-\n-#[path = \"num/isize.rs\"]  pub mod isize;\n-#[path = \"num/i8.rs\"]   pub mod i8;\n-#[path = \"num/i16.rs\"]  pub mod i16;\n-#[path = \"num/i32.rs\"]  pub mod i32;\n-#[path = \"num/i64.rs\"]  pub mod i64;\n-\n-#[path = \"num/usize.rs\"] pub mod usize;\n-#[path = \"num/u8.rs\"]   pub mod u8;\n-#[path = \"num/u16.rs\"]  pub mod u16;\n-#[path = \"num/u32.rs\"]  pub mod u32;\n-#[path = \"num/u64.rs\"]  pub mod u64;\n+// NB: slice and str are primitive types too, but their module docs + primitive\n+// doc pages are inlined from the public re-exports of core_collections::{slice,\n+// str} above.\n+\n+pub use core::isize;\n+pub use core::i8;\n+pub use core::i16;\n+pub use core::i32;\n+pub use core::i64;\n+\n+pub use core::usize;\n+pub use core::u8;\n+pub use core::u16;\n+pub use core::u32;\n+pub use core::u64;\n \n #[path = \"num/f32.rs\"]   pub mod f32;\n #[path = \"num/f64.rs\"]   pub mod f64;"}, {"sha": "53a14c2b21b174c8a7ef728c5a7290e86c80dbfa", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -197,6 +197,15 @@ macro_rules! log {\n     )\n }\n \n+#[cfg(test)]\n+macro_rules! assert_approx_eq {\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+}\n+\n /// Built-in macros to the compiler itself.\n ///\n /// These macros do not have any corresponding definition with a `macro_rules!`"}, {"sha": "16ad21a07d700acb842a19973f9ff4d3b98cb3fd", "filename": "src/libstd/num/float_macros.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-macro_rules! assert_approx_eq {\n-    ($a:expr, $b:expr) => ({\n-        let (a, b) = (&$a, &$b);\n-        assert!((*a - *b).abs() < 1.0e-6,\n-                \"{} is not approximately equal to {}\", *a, *b);\n-    })\n-}"}, {"sha": "eb53e0821f2a6f44fdaed228d074e35720262369", "filename": "src/libstd/num/i16.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 16-bit signed integer type.\n-//!\n-//! *[See also the `i16` primitive type](../primitive.i16.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i16::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i16 }"}, {"sha": "3c9eedf38c7cd5030236fef6b18e97c3d9e835ab", "filename": "src/libstd/num/i32.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 32-bit signed integer type.\n-//!\n-//! *[See also the `i32` primitive type](../primitive.i32.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i32::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i32 }"}, {"sha": "2df7478a820bf94df5299d1f08572ff00bc0fc4c", "filename": "src/libstd/num/i64.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 64-bit signed integer type.\n-//!\n-//! *[See also the `i64` primitive type](../primitive.i64.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i64::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i64 }"}, {"sha": "4e4bee8a791e45dce28d0dc9a12953dda4532baa", "filename": "src/libstd/num/i8.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 8-bit signed integer type.\n-//!\n-//! *[See also the `i8` primitive type](../primitive.i8.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i8::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i8 }"}, {"sha": "d46b6b80d0d25d91812ebaabf2fda216541decd8", "filename": "src/libstd/num/isize.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fisize.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The pointer-sized signed integer type.\n-//!\n-//! *[See also the `isize` primitive type](../primitive.isize.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::isize::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { isize }"}, {"sha": "893618aeffafd2d32419c7930823049415a1406b", "filename": "src/libstd/num/u16.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 16-bit unsigned integer type.\n-//!\n-//! *[See also the `u16` primitive type](../primitive.u16.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u16::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u16 }"}, {"sha": "2da25519696579ca0c72251c232ee3f494e2a7a9", "filename": "src/libstd/num/u32.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 32-bit unsigned integer type.\n-//!\n-//! *[See also the `u32` primitive type](../primitive.u32.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u32::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u32 }"}, {"sha": "26a8b5373940306b5d3f4815ce8ebddbaff2a379", "filename": "src/libstd/num/u64.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 64-bit unsigned integer type.\n-//!\n-//! *[See also the `u64` primitive type](../primitive.u64.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u64::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u64 }"}, {"sha": "385754b93a04b69668dfa18970c05e7070695e24", "filename": "src/libstd/num/u8.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 8-bit unsigned integer type.\n-//!\n-//! *[See also the `u8` primitive type](../primitive.u8.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u8::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u8 }"}, {"sha": "902c78c0a46f869e9f8306783fff25f53c0e7495", "filename": "src/libstd/num/uint_macros.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-macro_rules! uint_module { ($T:ident) => (\n-\n-#[cfg(test)]\n-mod tests {\n-    use prelude::v1::*;\n-\n-    fn from_str<T: ::str::FromStr>(t: &str) -> Option<T> {\n-        ::str::FromStr::from_str(t).ok()\n-    }\n-\n-    #[test]\n-    pub fn test_from_str() {\n-        assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n-        assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));\n-        assert_eq!(from_str::<$T>(\"10\"), Some(10 as $T));\n-        assert_eq!(from_str::<u32>(\"123456789\"), Some(123456789 as u32));\n-        assert_eq!(from_str::<$T>(\"00100\"), Some(100 as $T));\n-\n-        assert_eq!(from_str::<$T>(\"\"), None);\n-        assert_eq!(from_str::<$T>(\" \"), None);\n-        assert_eq!(from_str::<$T>(\"x\"), None);\n-    }\n-\n-    #[test]\n-    pub fn test_parse_bytes() {\n-        assert_eq!($T::from_str_radix(\"123\", 10), Ok(123 as $T));\n-        assert_eq!($T::from_str_radix(\"1001\", 2), Ok(9 as $T));\n-        assert_eq!($T::from_str_radix(\"123\", 8), Ok(83 as $T));\n-        assert_eq!(u16::from_str_radix(\"123\", 16), Ok(291 as u16));\n-        assert_eq!(u16::from_str_radix(\"ffff\", 16), Ok(65535 as u16));\n-        assert_eq!($T::from_str_radix(\"z\", 36), Ok(35 as $T));\n-\n-        assert_eq!($T::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n-        assert_eq!($T::from_str_radix(\"_\", 2).ok(), None::<$T>);\n-    }\n-}\n-\n-) }"}, {"sha": "6960ba3b8296bb2defcad4167cb755c5a4da2550", "filename": "src/libstd/num/usize.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b74a90172e99e361ff46277f52bfc03d0a7ba4/src%2Flibstd%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fusize.rs?ref=e9b74a90172e99e361ff46277f52bfc03d0a7ba4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The pointer-sized unsigned integer type.\n-//!\n-//! *[See also the `usize` primitive type](../primitive.usize.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::usize::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { usize }"}, {"sha": "4544f30d4f4974c14604f429616cb9c7627e4833", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -18,7 +18,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n pub use alloc::arc::{Arc, Weak};\n-pub use core::atomic;\n+pub use core::sync::atomic;\n \n pub use self::barrier::{Barrier, BarrierWaitResult};\n pub use self::condvar::{Condvar, StaticCondvar, WaitTimeoutResult, CONDVAR_INIT};"}, {"sha": "8c75d4680faebd7fbeef1258fd5a38442053b2e9", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -17,6 +17,6 @@ mod foo {\n fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n-    assert_clone::<foo::core::atomic::AtomicBool>();\n+    assert_clone::<foo::core::sync::atomic::AtomicBool>();\n     //~^ ERROR the trait `foo::core::clone::Clone` is not implemented for the type `foo::core::\n-}\n\\ No newline at end of file\n+}"}, {"sha": "57eb82a156bbfaf55c6328c74f94cef5ce0d9870", "filename": "src/test/compile-fail/issue-1920-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -15,6 +15,6 @@ extern crate core as bar;\n fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n-    assert_clone::<bar::atomic::AtomicBool>();\n-    //~^ ERROR the trait `bar::clone::Clone` is not implemented for the type `bar::atomic::\n-}\n\\ No newline at end of file\n+    assert_clone::<bar::sync::atomic::AtomicBool>();\n+    //~^ ERROR the trait `bar::clone::Clone` is not implemented for the type `bar::sync::atomic::\n+}"}, {"sha": "0ef7747c8a84f124c4310cd9b4fe825c29053a0d", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee3b5a54a9f4965b82f5e4eda512966e96ac63/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=94ee3b5a54a9f4965b82f5e4eda512966e96ac63", "patch": "@@ -19,6 +19,6 @@ extern crate core;\n fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n-    assert_clone::<foo::core::atomic::AtomicBool>();\n-    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `core::atomic::\n-}\n\\ No newline at end of file\n+    assert_clone::<foo::core::sync::atomic::AtomicBool>();\n+    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `core::sync::atomic::\n+}"}]}