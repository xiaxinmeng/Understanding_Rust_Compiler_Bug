{"sha": "0bc5fc99d3e009a51aa2daa1373b1774252fb443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzVmYzk5ZDNlMDA5YTUxYWEyZGFhMTM3M2IxNzc0MjUyZmI0NDM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-22T14:48:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-22T14:48:28Z"}, "message": "Rollup merge of #68099 - lukaslueg:into_raw_unsafe, r=LukasKalbertodt\n\nAmend Rc/Arc::from_raw() docs regarding unsafety\n\n[This](https://stackoverflow.com/questions/59671647/is-it-safe-to-clone-a-type-erased-arc-via-raw-pointer) question on SO boils down to \"is it safe to `::from_raw()` a `Rc<T>`/`Arc<T>` using a dummy `T` even if `T` is never dereferenced via the new `Rc`/`Arc`?\". It almost never is.\n\nThis PR amends the docs of `from_raw()` regarding this point.", "tree": {"sha": "b7d3980392c41e54b0365014241c798417106f9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7d3980392c41e54b0365014241c798417106f9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc5fc99d3e009a51aa2daa1373b1774252fb443", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJed3q9CRBK7hj4Ov3rIwAAdHIIACgpy9PYcy15X2D/JbdliuNS\nD82mBsZcXApHDuRGFVwKhUWIF2zfe+XgwtspcHx7jRS4V7EHrv0/RTq1Oq5SrngY\nUyYV59EYDfnZ/DH/GaNpeuJHotaOhMHkjeoyuWEKEmrFRlLz70KeIhW5vkXeN7li\n7mPCf9Jp3H89XbQQOtlLdb6U/jPF4mv10p44DvfTgKbo6a6kPAvGvsv1Lh30E/a9\n6DGhFNeHwoJ2S5I4yQtIF2ZDaFM2lXQWTOOG2OqLjz4mP6DUQU0nnFQ6RjS969VN\n1w5RHK5PMH/ZHjG/Yi8CNVUZW2CWHDD2xehQRaSj8HQXp7KYRA/hKBAifMjMQDQ=\n=KpRe\n-----END PGP SIGNATURE-----\n", "payload": "tree b7d3980392c41e54b0365014241c798417106f9b\nparent 94d43d656665e59abc10c7c22a3194685e7cc605\nparent 586c7e3907738938db7a6730fd70d7125f5925fa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584888508 +0100\ncommitter GitHub <noreply@github.com> 1584888508 +0100\n\nRollup merge of #68099 - lukaslueg:into_raw_unsafe, r=LukasKalbertodt\n\nAmend Rc/Arc::from_raw() docs regarding unsafety\n\n[This](https://stackoverflow.com/questions/59671647/is-it-safe-to-clone-a-type-erased-arc-via-raw-pointer) question on SO boils down to \"is it safe to `::from_raw()` a `Rc<T>`/`Arc<T>` using a dummy `T` even if `T` is never dereferenced via the new `Rc`/`Arc`?\". It almost never is.\n\nThis PR amends the docs of `from_raw()` regarding this point.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc5fc99d3e009a51aa2daa1373b1774252fb443", "html_url": "https://github.com/rust-lang/rust/commit/0bc5fc99d3e009a51aa2daa1373b1774252fb443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc5fc99d3e009a51aa2daa1373b1774252fb443/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d43d656665e59abc10c7c22a3194685e7cc605", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d43d656665e59abc10c7c22a3194685e7cc605", "html_url": "https://github.com/rust-lang/rust/commit/94d43d656665e59abc10c7c22a3194685e7cc605"}, {"sha": "586c7e3907738938db7a6730fd70d7125f5925fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/586c7e3907738938db7a6730fd70d7125f5925fa", "html_url": "https://github.com/rust-lang/rust/commit/586c7e3907738938db7a6730fd70d7125f5925fa"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "e7f7608e676a203c30505b1004d5a2375656c4a3", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0bc5fc99d3e009a51aa2daa1373b1774252fb443/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc5fc99d3e009a51aa2daa1373b1774252fb443/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=0bc5fc99d3e009a51aa2daa1373b1774252fb443", "patch": "@@ -259,6 +259,10 @@ use crate::vec::Vec;\n #[cfg(test)]\n mod tests;\n \n+// This is repr(C) to future-proof against possible field-reordering, which\n+// would interfere with otherwise safe [into|from]_raw() of transmutable\n+// inner types.\n+#[repr(C)]\n struct RcBox<T: ?Sized> {\n     strong: Cell<usize>,\n     weak: Cell<usize>,\n@@ -580,15 +584,24 @@ impl<T: ?Sized> Rc<T> {\n         }\n     }\n \n-    /// Constructs an `Rc` from a raw pointer.\n+    /// Constructs an `Rc<T>` from a raw pointer.\n     ///\n-    /// The raw pointer must have been previously returned by a call to a\n-    /// [`Rc::into_raw`][into_raw].\n+    /// The raw pointer must have been previously returned by a call to\n+    /// [`Rc<U>::into_raw`][into_raw] where `U` must have the same size\n+    /// and alignment as `T`. This is trivially true if `U` is `T`.\n+    /// Note that if `U` is not `T` but has the same size and alignment, this is\n+    /// basically like transmuting references of different types. See\n+    /// [`mem::transmute`][transmute] for more information on what\n+    /// restrictions apply in this case.\n     ///\n-    /// This function is unsafe because improper use may lead to memory problems. For example, a\n-    /// double-free may occur if the function is called twice on the same raw pointer.\n+    /// The user of `from_raw` has to make sure a specific value of `T` is only\n+    /// dropped once.\n+    ///\n+    /// This function is unsafe because improper use may lead to memory unsafety,\n+    /// even if the returned `Rc<T>` is never accessed.\n     ///\n     /// [into_raw]: struct.Rc.html#method.into_raw\n+    /// [transmute]: ../../std/mem/fn.transmute.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "e8985e202567bcd4bd628cfaea34722d32a493f0", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0bc5fc99d3e009a51aa2daa1373b1774252fb443/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc5fc99d3e009a51aa2daa1373b1774252fb443/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=0bc5fc99d3e009a51aa2daa1373b1774252fb443", "patch": "@@ -287,6 +287,10 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n     }\n }\n \n+// This is repr(C) to future-proof against possible field-reordering, which\n+// would interfere with otherwise safe [into|from]_raw() of transmutable\n+// inner types.\n+#[repr(C)]\n struct ArcInner<T: ?Sized> {\n     strong: atomic::AtomicUsize,\n \n@@ -577,15 +581,24 @@ impl<T: ?Sized> Arc<T> {\n         }\n     }\n \n-    /// Constructs an `Arc` from a raw pointer.\n+    /// Constructs an `Arc<T>` from a raw pointer.\n     ///\n-    /// The raw pointer must have been previously returned by a call to a\n-    /// [`Arc::into_raw`][into_raw].\n+    /// The raw pointer must have been previously returned by a call to\n+    /// [`Arc<U>::into_raw`][into_raw] where `U` must have the same size and\n+    /// alignment as `T`. This is trivially true if `U` is `T`.\n+    /// Note that if `U` is not `T` but has the same size and alignment, this is\n+    /// basically like transmuting references of different types. See\n+    /// [`mem::transmute`][transmute] for more information on what\n+    /// restrictions apply in this case.\n     ///\n-    /// This function is unsafe because improper use may lead to memory problems. For example, a\n-    /// double-free may occur if the function is called twice on the same raw pointer.\n+    /// The user of `from_raw` has to make sure a specific value of `T` is only\n+    /// dropped once.\n+    ///\n+    /// This function is unsafe because improper use may lead to memory unsafety,\n+    /// even if the returned `Arc<T>` is never accessed.\n     ///\n     /// [into_raw]: struct.Arc.html#method.into_raw\n+    /// [transmute]: ../../std/mem/fn.transmute.html\n     ///\n     /// # Examples\n     ///"}]}