{"sha": "55729b7caabca9ceac7a920ff09f0c80dc081d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzI5YjdjYWFiY2E5Y2VhYzdhOTIwZmYwOWYwYzgwZGMwODFkMGE=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-09-06T08:59:06Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-09-06T08:59:06Z"}, "message": "dogfooding a newly caught problem", "tree": {"sha": "1920dc6154d196a395f80f74177b1bc37e996406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1920dc6154d196a395f80f74177b1bc37e996406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55729b7caabca9ceac7a920ff09f0c80dc081d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55729b7caabca9ceac7a920ff09f0c80dc081d0a", "html_url": "https://github.com/rust-lang/rust/commit/55729b7caabca9ceac7a920ff09f0c80dc081d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55729b7caabca9ceac7a920ff09f0c80dc081d0a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54393f0ef5ecabf43da2f4749d16eb1145ad0455", "url": "https://api.github.com/repos/rust-lang/rust/commits/54393f0ef5ecabf43da2f4749d16eb1145ad0455", "html_url": "https://github.com/rust-lang/rust/commit/54393f0ef5ecabf43da2f4749d16eb1145ad0455"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "099ff7910acce149dc8226f11062a71b7d5da672", "filename": "src/loops.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/55729b7caabca9ceac7a920ff09f0c80dc081d0a/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55729b7caabca9ceac7a920ff09f0c80dc081d0a/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=55729b7caabca9ceac7a920ff09f0c80dc081d0a", "patch": "@@ -84,12 +84,11 @@ impl LintPass for LoopsPass {\n                         }\n                     }\n                     // check for looping over Iterator::next() which is not what you want\n-                    else if method_name == \"next\" {\n-                        if match_trait_method(cx, arg, &[\"core\", \"iter\", \"Iterator\"]) {\n-                            span_lint(cx, ITER_NEXT_LOOP, expr.span,\n-                                      \"you are iterating over `Iterator::next()` which is an Option; \\\n-                                       this will compile but is probably not what you want\");\n-                        }\n+                    else if method_name == \"next\" &&\n+                            match_trait_method(cx, arg, &[\"core\", \"iter\", \"Iterator\"]) {\n+                        span_lint(cx, ITER_NEXT_LOOP, expr.span,\n+                                  \"you are iterating over `Iterator::next()` which is an Option; \\\n+                                   this will compile but is probably not what you want\");\n                     }\n                 }\n             }\n@@ -127,12 +126,11 @@ impl LintPass for LoopsPass {\n     fn check_stmt(&mut self, cx: &Context, stmt: &Stmt) {\n         if let StmtSemi(ref expr, _) = stmt.node {\n             if let ExprMethodCall(ref method, _, ref args) = expr.node {\n-                if args.len() == 1 && method.node.name == \"collect\" {\n-                    if match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) {\n-                        span_lint(cx, UNUSED_COLLECT, expr.span, &format!(\n-                            \"you are collect()ing an iterator and throwing away the result. \\\n-                             Consider using an explicit for loop to exhaust the iterator\"));\n-                    }\n+                if args.len() == 1 && method.node.name == \"collect\" && \n+                        match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) {\n+                    span_lint(cx, UNUSED_COLLECT, expr.span, &format!(\n+                        \"you are collect()ing an iterator and throwing away the result. \\\n+                         Consider using an explicit for loop to exhaust the iterator\"));\n                 }\n             }\n         }"}]}