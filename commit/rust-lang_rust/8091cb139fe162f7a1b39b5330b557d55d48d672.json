{"sha": "8091cb139fe162f7a1b39b5330b557d55d48d672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOTFjYjEzOWZlMTYyZjdhMWIzOWI1MzMwYjU1N2Q1NWQ0OGQ2NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-10T07:56:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-10T07:56:49Z"}, "message": "Auto merge of #28930 - steveklabnik:update_pr, r=steveklabnik\n\nhttps://github.com/rust-lang/rust/pull/27813#issuecomment-146842041", "tree": {"sha": "c82a2c4f99a58170fd40611d5233e1c8d3a0769f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c82a2c4f99a58170fd40611d5233e1c8d3a0769f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8091cb139fe162f7a1b39b5330b557d55d48d672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8091cb139fe162f7a1b39b5330b557d55d48d672", "html_url": "https://github.com/rust-lang/rust/commit/8091cb139fe162f7a1b39b5330b557d55d48d672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8091cb139fe162f7a1b39b5330b557d55d48d672/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39376de4856f8d0e1c8560e161213314856f11f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/39376de4856f8d0e1c8560e161213314856f11f6", "html_url": "https://github.com/rust-lang/rust/commit/39376de4856f8d0e1c8560e161213314856f11f6"}, {"sha": "22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "url": "https://api.github.com/repos/rust-lang/rust/commits/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3", "html_url": "https://github.com/rust-lang/rust/commit/22fbbd4b5c57f03fa729e233c47bb5d8ff867de3"}], "stats": {"total": 312, "additions": 158, "deletions": 154}, "files": [{"sha": "6962f828e194d836255427b3a1b437c1be4af3ae", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=8091cb139fe162f7a1b39b5330b557d55d48d672", "patch": "@@ -9,9 +9,8 @@ requirements, and writing low-level code, like device drivers and operating\n systems. It improves on current languages targeting this space by having a\n number of compile-time safety checks that produce no runtime overhead, while\n eliminating all data races. Rust also aims to achieve \u2018zero-cost abstractions\u2019\n-even though some of these abstractions feel like those of a high-level\n-language. Even then, Rust still allows precise control like a low-level\n-language would.\n+even though some of these abstractions feel like those of a high-level language.\n+Even then, Rust still allows precise control like a low-level language would.\n \n [rust]: https://www.rust-lang.org\n \n@@ -34,10 +33,10 @@ is the first. After this:\n [gl]: glossary.html\n [bi]: bibliography.html\n \n-After reading this introduction, you\u2019ll want to dive into either \u2018Learn Rust\u2019\n-or \u2018Syntax and Semantics\u2019, depending on your preference: \u2018Learn Rust\u2019 if you\n-want to dive in with a project, or \u2018Syntax and Semantics\u2019 if you prefer to\n-start small, and learn a single concept thoroughly before moving onto the next.\n+After reading this introduction, you\u2019ll want to dive into either \u2018Learn Rust\u2019 or\n+\u2018Syntax and Semantics\u2019, depending on your preference: \u2018Learn Rust\u2019 if you want\n+to dive in with a project, or \u2018Syntax and Semantics\u2019 if you prefer to start\n+small, and learn a single concept thoroughly before moving onto the next.\n Copious cross-linking connects these parts together.\n \n ### Contributing\n@@ -76,11 +75,11 @@ type inference to balance out the power of static typing with the verbosity of\n annotating types.\n \n Rust prefers stack allocation to heap allocation: `x` is placed directly on the\n-stack. However, the `Vec<T>` type allocates space for the elements of the\n-vector on the heap. If you\u2019re not familiar with this distinction, you can\n-ignore it for now, or check out [\u2018The Stack and the Heap\u2019][heap]. As a systems\n-programming language, Rust gives you the ability to control how your memory is\n-allocated, but when we\u2019re getting started, it\u2019s less of a big deal.\n+stack. However, the `Vec<T>` type allocates space for the elements of the vector\n+on the heap. If you\u2019re not familiar with this distinction, you can ignore it for\n+now, or check out [\u2018The Stack and the Heap\u2019][heap]. As a systems programming\n+language, Rust gives us the ability to control how our memory is allocated, but\n+when we\u2019re getting started, it\u2019s less of a big deal.\n \n [var]: variable-bindings.html\n [macro]: macros.html\n@@ -90,10 +89,10 @@ Earlier, we mentioned that \u2018ownership\u2019 is the key new concept in Rust. In Ru\n parlance, `x` is said to \u2018own\u2019 the vector. This means that when `x` goes out of\n scope, the vector\u2019s memory will be de-allocated. This is done deterministically\n by the Rust compiler, rather than through a mechanism such as a garbage\n-collector. In other words, in Rust, you don\u2019t call functions like `malloc` and\n-`free` yourself: the compiler statically determines when you need to allocate\n-or deallocate memory, and inserts those calls itself. To err is to be human,\n-but compilers never forget.\n+collector. In other words, in Rust, we don\u2019t call functions like `malloc` and\n+`free` ourselves: the compiler statically determines when we need to allocate or\n+deallocate memory, and inserts those calls itself. To err is to be human, but\n+compilers never forget.\n \n Let\u2019s add another line to our example:\n \n@@ -105,13 +104,13 @@ fn main() {\n }\n ```\n \n-We\u2019ve introduced another binding, `y`. In this case, `y` is a \u2018reference\u2019 to\n-the first element of the vector. Rust\u2019s references are similar to pointers in\n-other languages, but with additional compile-time safety checks. References\n-interact with the ownership system by [\u2018borrowing\u2019][borrowing] what they point\n-to, rather than owning it. The difference is, when the reference goes out of\n-scope, it will not deallocate the underlying memory. If it did, we\u2019d\n-de-allocate twice, which is bad!\n+We\u2019ve introduced another binding, `y`. In this case, `y` is a \u2018reference\u2019 to the\n+first element of the vector. Rust\u2019s references are similar to pointers in other\n+languages, but with additional compile-time safety checks. References interact\n+with the ownership system by [\u2018borrowing\u2019][borrowing] what they point to, rather\n+than owning it. The difference is, when the reference goes out of scope, it\n+won't deallocate the underlying memory. If it did, we\u2019d de-allocate twice, which\n+is bad!\n \n [borrowing]: references-and-borrowing.html\n \n@@ -147,7 +146,7 @@ fn main() {\n \n Whew! The Rust compiler gives quite detailed errors at times, and this is one\n of those times. As the error explains, while we made our binding mutable, we\n-still cannot call `push`. This is because we already have a reference to an\n+still can't call `push`. This is because we already have a reference to an\n element of the vector, `y`. Mutating something while another reference exists\n is dangerous, because we may invalidate the reference. In this specific case,\n when we create the vector, we may have only allocated space for two elements."}, {"sha": "549f8c3ca5724e23a962b48a821d482e9b09f59c", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=8091cb139fe162f7a1b39b5330b557d55d48d672", "patch": "@@ -1,5 +1,5 @@\n % Getting Started\n \n-This first section of the book will get you going with Rust and its tooling.\n+This first section of the book will get us going with Rust and its tooling.\n First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager."}, {"sha": "b155a4287e879a403228333864cface493b449d1", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=8091cb139fe162f7a1b39b5330b557d55d48d672", "patch": "@@ -7,15 +7,16 @@ so it is assumed that Rust projects will use Cargo from the beginning.\n \n [cratesio]: http://doc.crates.io\n \n-Cargo manages three things: building your code, downloading the dependencies\n-your code needs, and building those dependencies. At first, your program doesn\u2019t\n-have any dependencies, so we\u2019ll only be using the first part of its\n-functionality. Eventually, we\u2019ll add more. Since we started off by using Cargo,\n-it'll be easy to add later.\n+Cargo manages three things: building our code, downloading the dependencies our\n+code needs, and building those dependencies. At first, our program doesn\u2019t have\n+any dependencies, so we\u2019ll only be using the first part of its functionality.\n+Eventually, we\u2019ll add more. Since we started off by using Cargo, it'll be easy\n+to add later.\n \n-If we installed Rust via the official installers we will also have Cargo. If we\n-installed Rust some other way, we may want to [check the Cargo\n-README][cargoreadme] for specific instructions about installing it.\n+If you installed Rust via the official installers you will also have Cargo. If\n+you installed Rust some other way, you may want to\n+[check the Cargo README][cargoreadme] for specific instructions about installing\n+it.\n \n [cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies\n \n@@ -30,29 +31,29 @@ old executable (`main.exe` on Windows, `main` everywhere else). Let's do that pa\n ```bash\n $ mkdir src\n $ mv main.rs src/main.rs\n-$ rm main  # or main.exe on Windows\n+$ rm main  # or 'rm main.exe' on Windows\n ```\n \n-Note that since we're creating an executable, we retain `main.rs` as the source\n-filename. If we want to make a library instead, we should use `lib.rs`. This\n-convention is used by Cargo to successfully compile our projects, but it can be\n-overridden if we wish. Custom file locations for the entry point can be\n-specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n+> Note: since we're creating an executable, we retain `main.rs` as the source\n+> filename. If we want to make a library instead, we should use `lib.rs`. This\n+> convention is used by Cargo to successfully compile our projects, but it can\n+> be overridden if we wish. Custom file locations for the entry point can be\n+> specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n \n [crates-custom]: http://doc.crates.io/manifest.html#configuring-a-target\n \n-Cargo expects your source files to live inside a `src` directory. That leaves\n-the top level for other things, like READMEs, license information, and anything\n-not related to your code. Cargo helps us keep our projects nice and tidy. A\n-place for everything, and everything in its place.\n+Cargo expects our source files to live inside a `src` directory. That leaves the\n+top level for other things, like READMEs, license information, and anything not\n+related to our code. Cargo helps us keep our projects nice and tidy. A place for\n+everything, and everything in its place.\n \n Next, our configuration file:\n \n ```bash\n-$ editor Cargo.toml\n+$ editor Cargo.toml # or 'notepad Cargo.toml' on Windows\n ```\n \n-Make sure to get this name right: you need the capital `C`!\n+Make sure to get this name right: we need the capital `C`!\n \n Put this inside:\n \n@@ -109,8 +110,8 @@ about the future: when our project gets more complex, we need to do more\n things to get all of the parts to properly compile. With Cargo, as our project\n grows, we can just run `cargo build`, and it\u2019ll work the right way.\n \n-When your project is finally ready for release, you can use\n-`cargo build --release` to compile your project with optimizations.\n+When our project is finally ready for release, we can use `cargo build\n+--release` to compile our project with optimizations.\n \n You'll also notice that Cargo has created a new file: `Cargo.lock`.\n \n@@ -120,14 +121,14 @@ name = \"hello_world\"\n version = \"0.0.1\"\n ```\n \n-The `Cargo.lock` file is used by Cargo to keep track of dependencies in your application.\n-Right now, we don\u2019t have any, so it\u2019s a bit sparse. You won't ever need\n-to touch this file yourself, just let Cargo handle it.\n+The `Cargo.lock` file is used by Cargo to keep track of dependencies in our\n+application. Right now, we don\u2019t have any, so it\u2019s a bit sparse. We won't ever\n+need to touch this file ourselves, just let Cargo handle it.\n \n That\u2019s it! We\u2019ve successfully built `hello_world` with Cargo. Even though our\n-program is simple, it\u2019s using much of the real tooling that you\u2019ll use for the\n-rest of your Rust career. You can expect to do this to get started with\n-virtually all Rust projects:\n+program is simple, it\u2019s using much of the real tooling that we\u2019ll use for the\n+rest of our Rust career. We can expect to do this to get started with virtually\n+all Rust projects:\n \n ```bash\n $ git clone someurl.com/foo\n@@ -137,17 +138,19 @@ $ cargo build\n \n ## A New Project\n \n-You don\u2019t have to go through this whole process every time you want to start a\n-new project! Cargo has the ability to make a bare-bones project directory in\n-which you can start developing right away.\n+We don\u2019t have to go through this whole process every time we want to start a new\n+project! Cargo has the ability to make a bare-bones project directory in which\n+we can start developing right away.\n \n-To start a new project with Cargo, use `cargo new`:\n+To start a new project with Cargo, we use `cargo new`:\n \n ```bash\n $ cargo new hello_world --bin\n ```\n \n-We\u2019re passing `--bin` because our goal is to get straight to making an executable application, as opposed to a library. Executables are often called \u2018binaries.\u2019 (as in `/usr/bin`, if you\u2019re on a Unix system)\n+We\u2019re passing `--bin` because our goal is to get straight to making an\n+executable application, as opposed to a library. Executables are often called\n+\u2018binaries.\u2019 (as in `/usr/bin`, if we\u2019re on a Unix system)\n \n Let's check out what Cargo has generated for us:\n \n@@ -162,7 +165,7 @@ $ tree .\n 1 directory, 2 files\n ```\n \n-If you don't have the `tree` command, you can probably get it from your\n+If we don't have the `tree` command, we can probably get it from our\n distribution\u2019s package manager. It\u2019s not necessary, but it\u2019s certainly useful.\n \n This is all we need to get started. First, let\u2019s check out `Cargo.toml`:\n@@ -176,7 +179,7 @@ authors = [\"Your Name <you@example.com>\"]\n ```\n \n Cargo has populated this file with reasonable defaults based off the arguments\n-you gave it and your `git` global configuration. You may notice that Cargo has\n+we gave it and our `git` global configuration. You may notice that Cargo has\n also initialized the `hello_world` directory as a `git` repository.\n \n Here\u2019s what\u2019s in `src/main.rs`:\n@@ -187,20 +190,21 @@ fn main() {\n }\n ```\n \n-Cargo has generated a \"Hello World!\" for us, and you\u2019re ready to start coding! Cargo\n-has its own [guide][guide] which covers Cargo\u2019s features in much more depth.\n+Cargo has generated a \"Hello World!\" for us, and we\u2019re ready to start coding!\n+Cargo has its own [guide][guide] which covers Cargo\u2019s features in much more\n+depth.\n \n [guide]: http://doc.crates.io/guide.html\n \n-Now that you\u2019ve got the tools down, let\u2019s actually learn more about the Rust\n-language itself. These are the basics that will serve you well through the rest\n-of your time with Rust.\n+Now that we\u2019ve got the tools down, let\u2019s actually learn more about the Rust\n+language itself. These are the basics that will serve us well through the rest\n+of our time with Rust.\n \n You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n-start from the bottom and work your way up with \u2018[Syntax and\n-Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n-\u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy either. Different\n-people learn differently! Choose whatever\u2019s right for you.\n+start from the bottom and work your way up with\n+\u2018[Syntax and Semantics][syntax]\u2019. More experienced systems programmers will\n+probably prefer \u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy\n+either. Different people learn differently! Choose whatever\u2019s right for you.\n \n [learnrust]: learn-rust.html\n [syntax]: syntax-and-semantics.html"}, {"sha": "c3de956d29dcba6aeca8825461a0f2a111745aad", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 51, "deletions": 50, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=8091cb139fe162f7a1b39b5330b557d55d48d672", "patch": "@@ -1,25 +1,25 @@\n % Hello, world!\n \n-Now that you have Rust installed, let\u2019s write your first Rust program. It\u2019s\n-traditional to make your first program in any new language one that prints the\n+Now that we have Rust installed, let\u2019s write our first Rust program. It\u2019s\n+traditional to make our first program in any new language one that prints the\n text \u201cHello, world!\u201d to the screen. The nice thing about starting with such a\n-simple program is that you can verify that your compiler isn\u2019t just installed,\n-but also working properly. And printing information to the screen is a pretty\n-common thing to do.\n+simple program is that we can verify that our compiler isn\u2019t just installed, but\n+also working properly. And printing information to the screen is a pretty common\n+thing to do.\n \n-The first thing that we need to do is make a file to put our code in. I like\n-to make a `projects` directory in my home directory, and keep all my projects\n-there. Rust does not care where your code lives.\n+The first thing that we need to do is make a file to put our code in. I like to\n+make a `projects` directory in my home directory, and keep all my projects\n+there. Rust doesn't care where our code lives.\n \n This actually leads to one other concern we should address: this guide will\n-assume that you have basic familiarity with the command line. Rust itself makes\n-no specific demands on your editing tooling, or where your code lives. If you\n-prefer an IDE to the command line, you may want to check out\n-[SolidOak][solidoak], or wherever plugins are for your favorite IDE. There are\n-a number of extensions of varying quality in development by the community. The\n-Rust team also ships [plugins for various editors][plugins]. Configuring your\n+assume that we have basic familiarity with the command line. Rust itself makes\n+no specific demands on our editing tooling, or where our code lives. If we\n+prefer an IDE to the command line, we may want to check out\n+[SolidOak][solidoak], or wherever plugins are for our favorite IDE. There are a\n+number of extensions of varying quality in development by the community. The\n+Rust team also ships [plugins for various editors][plugins]. Configuring our\n editor or IDE is out of the scope of this tutorial, so check the documentation\n-for your setup, specifically.\n+for our setup, specifically.\n \n [solidoak]: https://github.com/oakes/SolidOak\n [plugins]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n@@ -33,22 +33,22 @@ $ mkdir hello_world\n $ cd hello_world\n ```\n \n-If you\u2019re on Windows and not using PowerShell, the `~` may not work. Consult\n-the documentation for your shell for more details.\n+If we\u2019re on Windows and not using PowerShell, the `~` may not work. Consult the\n+documentation for our shell for more details.\n \n Let\u2019s make a new source file next. We\u2019ll call our file `main.rs`. Rust files\n-always end in a `.rs` extension. If you\u2019re using more than one word in your\n+always end in a `.rs` extension. If we\u2019re using more than one word in our\n filename, use an underscore: `hello_world.rs` rather than `helloworld.rs`.\n \n-Now that you\u2019ve got your file open, type this in:\n+Now that we\u2019ve got our file open, type this in:\n \n ```rust\n fn main() {\n     println!(\"Hello, world!\");\n }\n ```\n \n-Save the file, and then type this into your terminal window:\n+Save the file, and then type this into our terminal window:\n \n ```bash\n $ rustc main.rs\n@@ -72,9 +72,9 @@ we aren\u2019t returning anything from this function, we can omit the return type\n entirely. We\u2019ll get to it later.\n \n You\u2019ll also note that the function is wrapped in curly braces (`{` and `}`).\n-Rust requires these around all function bodies. It is also considered good\n-style to put the opening curly brace on the same line as the function\n-declaration, with one space in between.\n+Rust requires these around all function bodies. It is also considered good style\n+to put the opening curly brace on the same line as the function declaration,\n+with one space in between.\n \n Next up is this line:\n \n@@ -85,29 +85,30 @@ Next up is this line:\n This line does all of the work in our little program. There are a number of\n details that are important here. The first is that it\u2019s indented with four\n spaces, not tabs. Please configure your editor of choice to insert four spaces\n-with the tab key. We provide some [sample configurations for various\n-editors][configs].\n+with the tab key. We provide some\n+[sample configurations for various editors][configs].\n \n [configs]: https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md\n \n-The second point is the `println!()` part. This is calling a Rust [macro][macro],\n-which is how metaprogramming is done in Rust. If it were a function instead, it\n-would look like this: `println()`. For our purposes, we don\u2019t need to worry\n-about this difference. Just know that sometimes, you\u2019ll see a `!`, and that\n-means that you\u2019re calling a macro instead of a normal function. Rust implements\n-`println!` as a macro rather than a function for good reasons, but that's an\n-advanced topic. One last thing to mention: Rust\u2019s macros are significantly\n-different from C macros, if you\u2019ve used those. Don\u2019t be scared of using macros.\n-We\u2019ll get to the details eventually, you\u2019ll just have to trust us for now.\n+The second point is the `println!()` part. This is calling a Rust\n+[macro][macro], which is how metaprogramming is done in Rust. If it were a\n+function instead, it would look like this: `println()`. For our purposes, we\n+don\u2019t need to worry about this difference. Just know that sometimes, we\u2019ll see a\n+`!`, and that means that we\u2019re calling a macro instead of a normal function.\n+Rust implements `println!` as a macro rather than a function for good reasons,\n+but that's an advanced topic. One last thing to mention: Rust\u2019s macros are\n+significantly different from C macros, if you\u2019ve used those. Don\u2019t be scared of\n+using macros. We\u2019ll get to the details eventually, you\u2019ll just have to take it\n+on trust for now.\n \n [macro]: macros.html\n \n Next, `\"Hello, world!\"` is a \u2018string\u2019. Strings are a surprisingly complicated\n topic in a systems programming language, and this is a \u2018statically allocated\u2019\n-string. If you want to read further about allocation, check out\n-[the stack and the heap][allocation], but you don\u2019t need to right now if you\n-don\u2019t want to. We pass this string as an argument to `println!`, which prints the\n-string to the screen. Easy enough!\n+string. If you want to read further about allocation, check out [the stack and\n+the heap][allocation], but you don\u2019t need to right now if you don\u2019t want to. We\n+pass this string as an argument to `println!`, which prints the string to the\n+screen. Easy enough!\n \n [allocation]: the-stack-and-the-heap.html\n \n@@ -126,8 +127,8 @@ compiler, `rustc`, by passing it the name of our source file:\n $ rustc main.rs\n ```\n \n-This is similar to `gcc` or `clang`, if you come from a C or C++ background. Rust\n-will output a binary executable. You can see it with `ls`:\n+This is similar to `gcc` or `clang`, if you come from a C or C++ background.\n+Rust will output a binary executable. We can see it with `ls`:\n \n ```bash\n $ ls\n@@ -150,20 +151,20 @@ $ ./main  # or main.exe on Windows\n \n This prints out our `Hello, world!` text to our terminal.\n \n-If you come from a dynamic language like Ruby, Python, or JavaScript,\n-you may not be used to these two steps being separate. Rust is an\n-\u2018ahead-of-time compiled language\u2019, which means that you can compile a program,\n-give it to someone else, and they don't need to have Rust installed. If you\n-give someone a `.rb` or `.py` or `.js` file, they need to have a\n-Ruby/Python/JavaScript implementation installed, but you just need one command\n-to both compile and run your program. Everything is a tradeoff in language\n-design, and Rust has made its choice.\n+If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n+not be used to these two steps being separate. Rust is an \u2018ahead-of-time\n+compiled language\u2019, which means that we can compile a program, give it to\n+someone else, and they don't need to have Rust installed. If we give someone a\n+`.rb` or `.py` or `.js` file, they need to have a Ruby/Python/JavaScript\n+implementation installed, but we just need one command to both compile and run\n+our program. Everything is a tradeoff in language design, and Rust has made its\n+choice.\n \n Congratulations! You have officially written a Rust program. That makes you a\n Rust programmer! Welcome. \ud83c\udf8a\ud83c\udf89\ud83d\udc4d\n \n Next, I'd like to introduce you to another tool, Cargo, which is used to write\n real-world Rust programs. Just using `rustc` is nice for simple things, but as\n-your project grows, you'll want something to help you manage all of the options\n-that it has, and to make it easy to share your code with other people and\n+our project grows, we'll want something to help us manage all of the options\n+that it has, and to make it easy to share our code with other people and\n projects."}, {"sha": "a3666d1c08e0af92a874c0295afb9bd394f1e5e3", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8091cb139fe162f7a1b39b5330b557d55d48d672/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=8091cb139fe162f7a1b39b5330b557d55d48d672", "patch": "@@ -1,21 +1,21 @@\n % Installing Rust\n \n The first step to using Rust is to install it! There are a number of ways to\n-install Rust, but the easiest is to use the `rustup` script. If you're on Linux\n-or a Mac, all you need to do is this:\n+install Rust, but the easiest is to use the `rustup` script. If we're on Linux\n+or a Mac, all we need to do is this:\n \n-> Note: you don't need to type in the `$`s, they just indicate the start of\n-> each command. You\u2019ll see many tutorials and examples around the web that\n-> follow this convention: `$` for commands run as your regular user, and\n-> `#` for commands you should be running as an administrator.\n+> Note: we don't need to type in the `$`s, they just indicate the start of\n+> each command. We\u2019ll see many tutorials and examples around the web that\n+> follow this convention: `$` for commands run as our regular user, and `#` for\n+> commands we should be running as an administrator.\n \n ```bash\n $ curl -sf -L https://static.rust-lang.org/rustup.sh | sh\n ```\n \n-If you're concerned about the [potential insecurity][insecurity] of using `curl\n-| sh`, please keep reading and see our disclaimer below. And feel free to\n-use a two-step version of the installation and examine our installation script:\n+If we're concerned about the [potential insecurity][insecurity] of using `curl |\n+sh`, please keep reading and see our disclaimer below. And feel free to use a\n+two-step version of the installation and examine our installation script:\n \n ```bash\n $ curl -f -L https://static.rust-lang.org/rustup.sh -O\n@@ -25,33 +25,34 @@ $ sh rustup.sh\n [insecurity]: http://curlpipesh.tumblr.com\n \n If you're on Windows, please download the appropriate [installer][install-page].\n-**NOTE:** By default, the Windows installer will not add Rust to the %PATH%\n-system variable. If this is the only version of Rust you are installing and you\n-want to be able to run it from the command line, click on \"Advanced\" on the\n-install dialog and on the \"Product Features\" page ensure \"Add to PATH\" is\n-installed on the local hard drive.\n+\n+> Note: By default, the Windows installer won't add Rust to the %PATH% system\n+> variable. If this is the only version of Rust we are installing and we want to\n+> be able to run it from the command line, click on \"Advanced\" on the install\n+> dialog and on the \"Product Features\" page ensure \"Add to PATH\" is installed on\n+> the local hard drive.\n \n \n [install-page]: https://www.rust-lang.org/install.html\n \n ## Uninstalling\n \n If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n-Not every programming language is great for everyone. Just run the uninstall\n-script:\n+Not every programming language is great for everyone. We'll just run the\n+uninstall script:\n \n ```bash\n $ sudo /usr/local/lib/rustlib/uninstall.sh\n ```\n \n-If you used the Windows installer, just re-run the `.msi` and it will give you\n-an uninstall option.\n+If we used the Windows installer, we'll just re-run the `.msi` and it will give\n+us an uninstall option.\n \n ## That disclaimer we promised\n \n-Some people, and somewhat rightfully so, get very upset when we tell you to\n-`curl | sh`. Basically, when you do this, you are trusting that the good\n-people who maintain Rust aren't going to hack your computer and do bad things.\n+Some people, and somewhat rightfully so, get very upset when we tell them to\n+`curl | sh`. Basically, when they do this, they are trusting that the good\n+people who maintain Rust aren't going to hack their computer and do bad things.\n That's a good instinct! If you're one of those people, please check out the\n documentation on [building Rust from Source][from-source], or [the official\n binary downloads][install-page].\n@@ -62,7 +63,7 @@ binary downloads][install-page].\n \n Oh, we should also mention the officially supported platforms:\n \n-* Windows (7, 8, Server 2008 R2)\n+* Windows (7 or later, Server 2008 R2)\n * Linux (2.6.18 or later, various distributions), x86 and x86-64\n * OSX 10.7 (Lion) or later, x86 and x86-64\n \n@@ -73,12 +74,12 @@ testing.\n Finally, a comment about Windows. Rust considers Windows to be a first-class\n platform upon release, but if we're honest, the Windows experience isn't as\n integrated as the Linux/OS X experience is. We're working on it! If anything\n-does not work, it is a bug. Please let us know if that happens. Each and every\n+doesn't work, it is a bug. Please let us know if that happens. Each and every\n commit is tested against Windows just like any other platform.\n \n ## After installation\n \n-If you've got Rust installed, you can open up a shell, and type this:\n+If we've got Rust installed, we can open up a shell, and type this:\n \n ```bash\n $ rustc --version\n@@ -93,17 +94,16 @@ variable. If it isn't, run the installer again, select \"Change\" on the \"Change,\n repair, or remove installation\" page and ensure \"Add to PATH\" is installed on\n the local hard drive.\n \n-This installer also installs a copy of the documentation locally, so you can\n-read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n-On Windows, it's in a `share/doc` directory, inside wherever you installed Rust\n-to.\n-\n-If not, there are a number of places where you can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n-[Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n-(a silly nickname we call ourselves), and we can help you out. Other great\n-resources include [the user\u2019s forum][users], and\n-[Stack Overflow][stackoverflow].\n+This installer also installs a copy of the documentation locally, so we can read\n+it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location. On\n+Windows, it's in a `share/doc` directory, inside the directory to which Rust was\n+installed.\n+\n+If not, there are a number of places where we can get help. The easiest is\n+[the #rust IRC channel on irc.mozilla.org][irc], which we can access through\n+[Mibbit][mibbit]. Click that link, and we'll be chatting with other Rustaceans\n+(a silly nickname we call ourselves) who can help us out. Other great resources\n+include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n \n [irc]: irc://irc.mozilla.org/#rust\n [mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust"}]}