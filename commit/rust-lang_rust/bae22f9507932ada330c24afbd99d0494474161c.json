{"sha": "bae22f9507932ada330c24afbd99d0494474161c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTIyZjk1MDc5MzJhZGEzMzBjMjRhZmJkOTlkMDQ5NDQ3NDE2MWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-16T16:25:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-16T16:25:57Z"}, "message": "Merge #9924\n\n9924: Fix gen debug for enums r=yoshuawuyts a=yoshuawuyts\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/9914. Thanks!\r\n\r\nr? `@Veykril` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "609cbaaf59bc9e5f507704ff55423b63387dd176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/609cbaaf59bc9e5f507704ff55423b63387dd176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae22f9507932ada330c24afbd99d0494474161c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhGpGVCRBK7hj4Ov3rIwAAta8IAG+vM8fZEpDUQQ6Sj82nA1U5\nEBMPOSDmYatDxO4cT6t/hduzP+uB5wQZaMMmtBZhS1oOxdj5Yun5vqg6zj1YH0qh\nO6flhh1HqoPJ1z0HkuZLq5E8EdxH7tP/yzuWWvHqAaJTFBIWNFetAPhnrbe4T7c/\nZ/zAK00ltI2M7vd/GfjuNhavFCUuy5JTMycgZi8pBCj5D/5JfRxPWJeQuLeAkMpV\nWq5IlamyQRBLhJ36OUmj2b90XMWXOqsvWYNHcGr3A4nkEqwlTxkVlV8g0zAVYKdE\nhrD2OVdIuozsdNPUQ6mlLO1noAYx8FGpC4Mp0i87wnV6lA8wS6f0DFcEUWhrBEw=\n=yV3G\n-----END PGP SIGNATURE-----\n", "payload": "tree 609cbaaf59bc9e5f507704ff55423b63387dd176\nparent 6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723\nparent 067dc660ae3eef47549fe2531054ba942ac3fc91\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629131157 +0000\ncommitter GitHub <noreply@github.com> 1629131157 +0000\n\nMerge #9924\n\n9924: Fix gen debug for enums r=yoshuawuyts a=yoshuawuyts\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/9914. Thanks!\r\n\r\nr? `@Veykril` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae22f9507932ada330c24afbd99d0494474161c", "html_url": "https://github.com/rust-lang/rust/commit/bae22f9507932ada330c24afbd99d0494474161c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae22f9507932ada330c24afbd99d0494474161c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "html_url": "https://github.com/rust-lang/rust/commit/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723"}, {"sha": "067dc660ae3eef47549fe2531054ba942ac3fc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/067dc660ae3eef47549fe2531054ba942ac3fc91", "html_url": "https://github.com/rust-lang/rust/commit/067dc660ae3eef47549fe2531054ba942ac3fc91"}], "stats": {"total": 157, "additions": 148, "deletions": 9}, "files": [{"sha": "d6319ea5c13f7f6b04802026abf16a23bd2aaf7c", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/bae22f9507932ada330c24afbd99d0494474161c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae22f9507932ada330c24afbd99d0494474161c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=bae22f9507932ada330c24afbd99d0494474161c", "patch": "@@ -302,6 +302,71 @@ impl core::fmt::Debug for Foo {\n         }\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_debug_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: fmt\n+#[derive(Debu$0g)]\n+enum Foo {\n+    Bar(usize, usize),\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(usize, usize),\n+    Baz,\n+}\n+\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+        match self {\n+            Self::Bar(arg0, arg1) => f.debug_tuple(\"Bar\").field(arg0).field(arg1).finish(),\n+            Self::Baz => write!(f, \"Baz\"),\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_debug_record_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: fmt\n+#[derive(Debu$0g)]\n+enum Foo {\n+    Bar {\n+        baz: usize,\n+        qux: usize,\n+    },\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar {\n+        baz: usize,\n+        qux: usize,\n+    },\n+    Baz,\n+}\n+\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+        match self {\n+            Self::Bar { baz, qux } => f.debug_struct(\"Bar\").field(\"baz\", baz).field(\"qux\", qux).finish(),\n+            Self::Baz => write!(f, \"Baz\"),\n+        }\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "b9c7da71b5c01754d787fa1fbbacf9b6a08ca33d", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 83, "deletions": 9, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/bae22f9507932ada330c24afbd99d0494474161c/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae22f9507932ada330c24afbd99d0494474161c/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=bae22f9507932ada330c24afbd99d0494474161c", "patch": "@@ -149,16 +149,90 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             let mut arms = vec![];\n             for variant in list.variants() {\n                 let name = variant.name()?;\n-                let variant_name =\n-                    make::path_pat(make::ext::path_from_idents([\"Self\", &format!(\"{}\", name)])?);\n-\n+                let variant_name = make::ext::path_from_idents([\"Self\", &format!(\"{}\", name)])?;\n                 let target = make::expr_path(make::ext::ident_path(\"f\").into());\n-                let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n-                let args = make::arg_list(vec![target, fmt_string]);\n-                let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n-                let macro_call = make::expr_macro_call(macro_name, args);\n \n-                arms.push(make::match_arm(Some(variant_name.into()), None, macro_call.into()));\n+                match variant.field_list() {\n+                    Some(ast::FieldList::RecordFieldList(list)) => {\n+                        // => f.debug_struct(name)\n+                        let target = make::expr_path(make::ext::ident_path(\"f\"));\n+                        let method = make::name_ref(\"debug_struct\");\n+                        let struct_name = format!(\"\\\"{}\\\"\", name);\n+                        let args = make::arg_list(Some(make::expr_literal(&struct_name).into()));\n+                        let mut expr = make::expr_method_call(target, method, args);\n+\n+                        let mut pats = vec![];\n+                        for field in list.fields() {\n+                            let field_name = field.name()?;\n+\n+                            // create a field pattern for use in `MyStruct { fields.. }`\n+                            let pat = make::ident_pat(false, false, field_name.clone());\n+                            pats.push(pat.into());\n+\n+                            // => <expr>.field(\"field_name\", field)\n+                            let method_name = make::name_ref(\"field\");\n+                            let name = make::expr_literal(&(format!(\"\\\"{}\\\"\", field_name))).into();\n+                            let path = &format!(\"{}\", field_name);\n+                            let path = make::expr_path(make::ext::ident_path(path));\n+                            let args = make::arg_list(vec![name, path]);\n+                            expr = make::expr_method_call(expr, method_name, args);\n+                        }\n+\n+                        // => <expr>.finish()\n+                        let method = make::name_ref(\"finish\");\n+                        let expr = make::expr_method_call(expr, method, make::arg_list(None));\n+\n+                        // => MyStruct { fields.. } => f.debug_struct(\"MyStruct\")...finish(),\n+                        let pat = make::record_pat(variant_name.clone(), pats.into_iter());\n+                        arms.push(make::match_arm(Some(pat.into()), None, expr));\n+                    }\n+                    Some(ast::FieldList::TupleFieldList(list)) => {\n+                        // => f.debug_tuple(name)\n+                        let target = make::expr_path(make::ext::ident_path(\"f\"));\n+                        let method = make::name_ref(\"debug_tuple\");\n+                        let struct_name = format!(\"\\\"{}\\\"\", name);\n+                        let args = make::arg_list(Some(make::expr_literal(&struct_name).into()));\n+                        let mut expr = make::expr_method_call(target, method, args);\n+\n+                        let mut pats = vec![];\n+                        for (i, _) in list.fields().enumerate() {\n+                            let name = format!(\"arg{}\", i);\n+\n+                            // create a field pattern for use in `MyStruct(fields..)`\n+                            let field_name = make::name(&name);\n+                            let pat = make::ident_pat(false, false, field_name.clone());\n+                            pats.push(pat.into());\n+\n+                            // => <expr>.field(field)\n+                            let method_name = make::name_ref(\"field\");\n+                            let field_path = &format!(\"{}\", name);\n+                            let field_path = make::expr_path(make::ext::ident_path(field_path));\n+                            let args = make::arg_list(vec![field_path]);\n+                            expr = make::expr_method_call(expr, method_name, args);\n+                        }\n+\n+                        // => <expr>.finish()\n+                        let method = make::name_ref(\"finish\");\n+                        let expr = make::expr_method_call(expr, method, make::arg_list(None));\n+\n+                        // => MyStruct (fields..) => f.debug_tuple(\"MyStruct\")...finish(),\n+                        let pat = make::tuple_struct_pat(variant_name.clone(), pats.into_iter());\n+                        arms.push(make::match_arm(Some(pat.into()), None, expr));\n+                    }\n+                    None => {\n+                        let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n+                        let args = make::arg_list([target, fmt_string]);\n+                        let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n+                        let macro_call = make::expr_macro_call(macro_name, args);\n+\n+                        let variant_name = make::path_pat(variant_name);\n+                        arms.push(make::match_arm(\n+                            Some(variant_name.into()),\n+                            None,\n+                            macro_call.into(),\n+                        ));\n+                    }\n+                }\n             }\n \n             let match_target = make::expr_path(make::ext::ident_path(\"self\"));\n@@ -190,7 +264,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n                         let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n-                        let args = make::arg_list(vec![f_name, f_path]);\n+                        let args = make::arg_list([f_name, f_path]);\n                         expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n                     }\n                     expr"}]}