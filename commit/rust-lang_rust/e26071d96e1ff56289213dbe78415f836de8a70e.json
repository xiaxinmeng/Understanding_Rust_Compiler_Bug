{"sha": "e26071d96e1ff56289213dbe78415f836de8a70e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNjA3MWQ5NmUxZmY1NjI4OTIxM2RiZTc4NDE1ZjgzNmRlOGE3MGU=", "commit": {"author": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-10-08T21:38:33Z"}, "committer": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-10-08T21:38:33Z"}, "message": "Run prettier on all files", "tree": {"sha": "0d6d49b2eb40ad161a72adbfbf9874b64540bf74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6d49b2eb40ad161a72adbfbf9874b64540bf74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e26071d96e1ff56289213dbe78415f836de8a70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e26071d96e1ff56289213dbe78415f836de8a70e", "html_url": "https://github.com/rust-lang/rust/commit/e26071d96e1ff56289213dbe78415f836de8a70e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e26071d96e1ff56289213dbe78415f836de8a70e/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a405b65d61a5ad3176c223e4b7226a43fcd186e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a405b65d61a5ad3176c223e4b7226a43fcd186e", "html_url": "https://github.com/rust-lang/rust/commit/3a405b65d61a5ad3176c223e4b7226a43fcd186e"}], "stats": {"total": 349, "additions": 220, "deletions": 129}, "files": [{"sha": "b9d14dddd157d36dd3a88014d52dd08db251b319", "filename": "editors/code/.vscode/launch.json", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2F.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2F.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.vscode%2Flaunch.json?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -3,19 +3,15 @@\n // Hover to view descriptions of existing attributes.\n // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n {\n-\t\"version\": \"0.2.0\",\n+    \"version\": \"0.2.0\",\n     \"configurations\": [\n         {\n             \"name\": \"Extension\",\n             \"type\": \"extensionHost\",\n             \"request\": \"launch\",\n             \"runtimeExecutable\": \"${execPath}\",\n-            \"args\": [\n-                \"--extensionDevelopmentPath=${workspaceFolder}\"\n-            ],\n-            \"outFiles\": [\n-                \"${workspaceFolder}/out/**/*.js\"\n-            ],\n+            \"args\": [\"--extensionDevelopmentPath=${workspaceFolder}\"],\n+            \"outFiles\": [\"${workspaceFolder}/out/**/*.js\"],\n             \"preLaunchTask\": \"npm: watch\"\n         },\n         {\n@@ -27,9 +23,7 @@\n                 \"--extensionDevelopmentPath=${workspaceFolder}\",\n                 \"--extensionTestsPath=${workspaceFolder}/out/test\"\n             ],\n-            \"outFiles\": [\n-                \"${workspaceFolder}/out/test/**/*.js\"\n-            ],\n+            \"outFiles\": [\"${workspaceFolder}/out/test/**/*.js\"],\n             \"preLaunchTask\": \"npm: watch\"\n         }\n     ]"}, {"sha": "fa0a104874fc7e5ff38e622f425f27b200f818ea", "filename": "editors/code/.vscode/settings.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.vscode%2Fsettings.json?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -8,4 +8,4 @@\n     },\n     // Turn off tsc task auto detection since we have the necessary tasks as npm scripts\n     \"typescript.tsc.autoDetect\": \"off\"\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5deb2bccd0986cbc002697c6c01de19a02cc196b", "filename": "editors/code/.vscode/tasks.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2F.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2F.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.vscode%2Ftasks.json?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -17,4 +17,4 @@\n             }\n         }\n     ]\n-}\n\\ No newline at end of file\n+}"}, {"sha": "cd07e3be9b1ba684934c6334960175da56384695", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -23,7 +23,8 @@\n         \"travis\": \"npm run compile && npm run lint && npm run prettier --list-different\"\n     },\n     \"prettier\": {\n-        \"tabWidth\": 4\n+        \"tabWidth\": 4,\n+        \"singleQuote\": true\n     },\n     \"dependencies\": {\n         \"vscode-languageclient\": \"^4.4.0\""}, {"sha": "cf921e3ac0a66e652e14b7383cc95b5ba78327fc", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -20,8 +20,12 @@ export interface SourceChange {\n export async function handle(change: SourceChange) {\n     const wsEdit = new vscode.WorkspaceEdit();\n     for (const sourceEdit of change.sourceFileEdits) {\n-        const uri = Server.client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri);\n-        const edits = Server.client.protocol2CodeConverter.asTextEdits(sourceEdit.edits);\n+        const uri = Server.client.protocol2CodeConverter.asUri(\n+            sourceEdit.textDocument.uri\n+        );\n+        const edits = Server.client.protocol2CodeConverter.asTextEdits(\n+            sourceEdit.edits\n+        );\n         wsEdit.set(uri, edits);\n     }\n     let created;\n@@ -48,11 +52,19 @@ export async function handle(change: SourceChange) {\n         const doc = await vscode.workspace.openTextDocument(toOpen);\n         await vscode.window.showTextDocument(doc);\n     } else if (toReveal) {\n-        const uri = Server.client.protocol2CodeConverter.asUri(toReveal.textDocument.uri);\n-        const position = Server.client.protocol2CodeConverter.asPosition(toReveal.position);\n+        const uri = Server.client.protocol2CodeConverter.asUri(\n+            toReveal.textDocument.uri\n+        );\n+        const position = Server.client.protocol2CodeConverter.asPosition(\n+            toReveal.position\n+        );\n         const editor = vscode.window.activeTextEditor;\n-        if (!editor || editor.document.uri.toString() !== uri.toString()) { return; }\n-        if (!editor.selection.isEmpty) { return; }\n+        if (!editor || editor.document.uri.toString() !== uri.toString()) {\n+            return;\n+        }\n+        if (!editor.selection.isEmpty) {\n+            return;\n+        }\n         editor!.selection = new vscode.Selection(position, position);\n     }\n }"}, {"sha": "0ee6bd11d7cfb3c7299d3c0d9251b68178dcf0ce", "filename": "editors/code/src/commands/extend_selection.ts", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -14,14 +14,19 @@ interface ExtendSelectionResult {\n \n export async function handle() {\n     const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    if (editor == null || editor.document.languageId !== 'rust') {\n+        return;\n+    }\n     const request: ExtendSelectionParams = {\n-        selections: editor.selections.map((s) => {\n+        selections: editor.selections.map(s => {\n             return Server.client.code2ProtocolConverter.asRange(s);\n         }),\n-        textDocument: { uri: editor.document.uri.toString() },\n+        textDocument: { uri: editor.document.uri.toString() }\n     };\n-    const response = await Server.client.sendRequest<ExtendSelectionResult>('m/extendSelection', request);\n+    const response = await Server.client.sendRequest<ExtendSelectionResult>(\n+        'm/extendSelection',\n+        request\n+    );\n     editor.selections = response.selections.map((range: Range) => {\n         const r = Server.client.protocol2CodeConverter.asRange(range);\n         return new vscode.Selection(r.start, r.end);"}, {"sha": "2496c7ff8c623ac63d4c49c158cb7955fc3bfe5d", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -13,5 +13,5 @@ export {\n     matchingBrace,\n     parentModule,\n     runnables,\n-    syntaxTree,\n+    syntaxTree\n };"}, {"sha": "27d263b8a8b7ede866923ac1d91e579fc371e3f8", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -2,7 +2,10 @@ import * as vscode from 'vscode';\n \n import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n-import { handle as applySourceChange, SourceChange } from './apply_source_change';\n+import {\n+    handle as applySourceChange,\n+    SourceChange\n+} from './apply_source_change';\n \n interface JoinLinesParams {\n     textDocument: TextDocumentIdentifier;\n@@ -11,11 +14,16 @@ interface JoinLinesParams {\n \n export async function handle() {\n     const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    if (editor == null || editor.document.languageId !== 'rust') {\n+        return;\n+    }\n     const request: JoinLinesParams = {\n         range: Server.client.code2ProtocolConverter.asRange(editor.selection),\n-        textDocument: { uri: editor.document.uri.toString() },\n+        textDocument: { uri: editor.document.uri.toString() }\n     };\n-    const change = await Server.client.sendRequest<SourceChange>('m/joinLines', request);\n+    const change = await Server.client.sendRequest<SourceChange>(\n+        'm/joinLines',\n+        request\n+    );\n     await applySourceChange(change);\n }"}, {"sha": "5e6638e82c9c907f73c42bc32499299d280b8e67", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -10,16 +10,23 @@ interface FindMatchingBraceParams {\n \n export async function handle() {\n     const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    if (editor == null || editor.document.languageId !== 'rust') {\n+        return;\n+    }\n     const request: FindMatchingBraceParams = {\n         textDocument: { uri: editor.document.uri.toString() },\n-        offsets: editor.selections.map((s) => {\n+        offsets: editor.selections.map(s => {\n             return Server.client.code2ProtocolConverter.asPosition(s.active);\n-        }),\n+        })\n     };\n-    const response = await Server.client.sendRequest<Position[]>('m/findMatchingBrace', request);\n+    const response = await Server.client.sendRequest<Position[]>(\n+        'm/findMatchingBrace',\n+        request\n+    );\n     editor.selections = editor.selections.map((sel, idx) => {\n-        const active = Server.client.protocol2CodeConverter.asPosition(response[idx]);\n+        const active = Server.client.protocol2CodeConverter.asPosition(\n+            response[idx]\n+        );\n         const anchor = sel.isEmpty ? active : sel.anchor;\n         return new vscode.Selection(anchor, active);\n     });"}, {"sha": "4bb92eb96a703d10ae1d79a568c0799727c5b88e", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -5,13 +5,20 @@ import { Server } from '../server';\n \n export async function handle() {\n     const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    if (editor == null || editor.document.languageId !== 'rust') {\n+        return;\n+    }\n     const request: TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString(),\n+        uri: editor.document.uri.toString()\n     };\n-    const response = await Server.client.sendRequest<Location[]>('m/parentModule', request);\n+    const response = await Server.client.sendRequest<Location[]>(\n+        'm/parentModule',\n+        request\n+    );\n     const loc = response[0];\n-    if (loc == null) { return; }\n+    if (loc == null) {\n+        return;\n+    }\n     const uri = Server.client.protocol2CodeConverter.asUri(loc.uri);\n     const range = Server.client.protocol2CodeConverter.asRange(loc.range);\n "}, {"sha": "c234bfaec568a8854ef4f61dd731e6547f276333", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -41,39 +41,56 @@ function createTask(spec: Runnable): vscode.Task {\n         label: 'cargo',\n         command: spec.bin,\n         args: spec.args,\n-        env: spec.env,\n+        env: spec.env\n     };\n \n     const execCmd = `${definition.command} ${definition.args.join(' ')}`;\n     const execOption: vscode.ShellExecutionOptions = {\n         cwd: '.',\n-        env: definition.env,\n+        env: definition.env\n     };\n     const exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n \n     const f = vscode.workspace.workspaceFolders![0];\n-    const t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n+    const t = new vscode.Task(\n+        definition,\n+        f,\n+        definition.label,\n+        TASK_SOURCE,\n+        exec,\n+        ['$rustc']\n+    );\n     return t;\n }\n \n let prevRunnable: RunnableQuickPick | undefined;\n export async function handle() {\n     const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    if (editor == null || editor.document.languageId !== 'rust') {\n+        return;\n+    }\n     const textDocument: lc.TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString(),\n+        uri: editor.document.uri.toString()\n     };\n     const params: RunnablesParams = {\n         textDocument,\n-        position: Server.client.code2ProtocolConverter.asPosition(editor.selection.active),\n+        position: Server.client.code2ProtocolConverter.asPosition(\n+            editor.selection.active\n+        )\n     };\n-    const runnables = await Server.client.sendRequest<Runnable[]>('m/runnables', params);\n+    const runnables = await Server.client.sendRequest<Runnable[]>(\n+        'm/runnables',\n+        params\n+    );\n     const items: RunnableQuickPick[] = [];\n     if (prevRunnable) {\n         items.push(prevRunnable);\n     }\n     for (const r of runnables) {\n-        if (prevRunnable && JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)) {\n+        if (\n+            prevRunnable &&\n+            JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n+        ) {\n             continue;\n         }\n         items.push(new RunnableQuickPick(r));"}, {"sha": "5d5cdd7a02d2f86e24d4f95357401b6347e0eee7", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -5,17 +5,25 @@ import { Server } from '../server';\n \n export const syntaxTreeUri = vscode.Uri.parse('ra-lsp://syntaxtree');\n \n-export class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n+export class TextDocumentContentProvider\n+    implements vscode.TextDocumentContentProvider {\n     public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n     public syntaxTree: string = 'Not available';\n \n-    public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n+    public provideTextDocumentContent(\n+        uri: vscode.Uri\n+    ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n-        if (editor == null) { return ''; }\n+        if (editor == null) {\n+            return '';\n+        }\n         const request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n+            textDocument: { uri: editor.document.uri.toString() }\n         };\n-        return Server.client.sendRequest<SyntaxTreeResult>('m/syntaxTree', request);\n+        return Server.client.sendRequest<SyntaxTreeResult>(\n+            'm/syntaxTree',\n+            request\n+        );\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {\n@@ -34,5 +42,9 @@ type SyntaxTreeResult = string;\n // The contents of the file come from the `TextDocumentContentProvider`\n export async function handle() {\n     const document = await vscode.workspace.openTextDocument(syntaxTreeUri);\n-    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n+    return vscode.window.showTextDocument(\n+        document,\n+        vscode.ViewColumn.Two,\n+        true\n+    );\n }"}, {"sha": "7d05ea078ca9ee30231a659dda5f295427271911", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -3,21 +3,23 @@ import * as vscode from 'vscode';\n import { Server } from './server';\n \n export class Config {\n-  public highlightingOn = true;\n+    public highlightingOn = true;\n \n-  constructor() {\n-    vscode.workspace.onDidChangeConfiguration((_) => this.userConfigChanged());\n-    this.userConfigChanged();\n-  }\n-\n-  public userConfigChanged() {\n-    const config = vscode.workspace.getConfiguration('ra-lsp');\n-    if (config.has('highlightingOn')) {\n-      this.highlightingOn = config.get('highlightingOn') as boolean;\n+    constructor() {\n+        vscode.workspace.onDidChangeConfiguration(_ =>\n+            this.userConfigChanged()\n+        );\n+        this.userConfigChanged();\n     }\n \n-    if (!this.highlightingOn && Server) {\n-      Server.highlighter.removeHighlights();\n+    public userConfigChanged() {\n+        const config = vscode.workspace.getConfiguration('ra-lsp');\n+        if (config.has('highlightingOn')) {\n+            this.highlightingOn = config.get('highlightingOn') as boolean;\n+        }\n+\n+        if (!this.highlightingOn && Server) {\n+            Server.highlighter.removeHighlights();\n+        }\n     }\n-  }\n }"}, {"sha": "0b7ceb65d672c5544653f3f8ee1a1edb8d0f1d6e", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -5,10 +5,19 @@ import { Decoration } from '../highlighting';\n import { Server } from '../server';\n \n export async function handle(editor: TextEditor | undefined) {\n-    if (!Server.config.highlightingOn || !editor || editor.document.languageId !== 'rust') { return; }\n+    if (\n+        !Server.config.highlightingOn ||\n+        !editor ||\n+        editor.document.languageId !== 'rust'\n+    ) {\n+        return;\n+    }\n     const params: TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString(),\n+        uri: editor.document.uri.toString()\n     };\n-    const decorations = await Server.client.sendRequest<Decoration[]>('m/decorationsRequest', params);\n+    const decorations = await Server.client.sendRequest<Decoration[]>(\n+        'm/decorationsRequest',\n+        params\n+    );\n     Server.highlighter.setHighlights(editor, decorations);\n }"}, {"sha": "6be057245fa3df0de5ca5e2481a6649cbcb747c3", "filename": "editors/code/src/events/change_text_document.ts", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -1,11 +1,18 @@\n import * as vscode from 'vscode';\n \n-import { syntaxTreeUri, TextDocumentContentProvider } from '../commands/syntaxTree';\n+import {\n+    syntaxTreeUri,\n+    TextDocumentContentProvider\n+} from '../commands/syntaxTree';\n \n-export function createHandler(textDocumentContentProvider: TextDocumentContentProvider) {\n+export function createHandler(\n+    textDocumentContentProvider: TextDocumentContentProvider\n+) {\n     return (event: vscode.TextDocumentChangeEvent) => {\n         const doc = event.document;\n-        if (doc.languageId !== 'rust') { return; }\n+        if (doc.languageId !== 'rust') {\n+            return;\n+        }\n         afterLs(() => {\n             textDocumentContentProvider.eventEmitter.fire(syntaxTreeUri);\n         });"}, {"sha": "4c154563f5136fbc892dfcfea5aa6e4612487df0", "filename": "editors/code/src/events/index.ts", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -1,7 +1,4 @@\n import * as changeActiveTextEditor from './change_active_text_editor';\n import * as changeTextDocument from './change_text_document';\n \n-export {\n-    changeActiveTextEditor,\n-    changeTextDocument,\n-};\n+export { changeActiveTextEditor, changeTextDocument };"}, {"sha": "81e1107a0455ce2ce16574425b1e4a3201ca0969", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -23,26 +23,34 @@ export function activate(context: vscode.ExtensionContext) {\n     registerCommand('ra-lsp.joinLines', commands.joinLines.handle);\n     registerCommand('ra-lsp.parentModule', commands.parentModule.handle);\n     registerCommand('ra-lsp.run', commands.runnables.handle);\n-    registerCommand('ra-lsp.applySourceChange', commands.applySourceChange.handle);\n+    registerCommand(\n+        'ra-lsp.applySourceChange',\n+        commands.applySourceChange.handle\n+    );\n \n     // Notifications are events triggered by the language server\n-    const allNotifications: Iterable<[string, lc.GenericNotificationHandler]> = [\n-        ['m/publishDecorations', notifications.publishDecorations.handle],\n-    ];\n+    const allNotifications: Iterable<\n+        [string, lc.GenericNotificationHandler]\n+    > = [['m/publishDecorations', notifications.publishDecorations.handle]];\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n-    vscode.window.onDidChangeActiveTextEditor(events.changeActiveTextEditor.handle);\n+    vscode.window.onDidChangeActiveTextEditor(\n+        events.changeActiveTextEditor.handle\n+    );\n \n     const textDocumentContentProvider = new TextDocumentContentProvider();\n-    disposeOnDeactivation(vscode.workspace.registerTextDocumentContentProvider(\n-        'ra-lsp',\n-        textDocumentContentProvider,\n-    ));\n+    disposeOnDeactivation(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'ra-lsp',\n+            textDocumentContentProvider\n+        )\n+    );\n \n     vscode.workspace.onDidChangeTextDocument(\n         events.changeTextDocument.createHandler(textDocumentContentProvider),\n         null,\n-        context.subscriptions);\n+        context.subscriptions\n+    );\n \n     // Start the language server, finally!\n     Server.start(allNotifications);"}, {"sha": "ceddffe0ebf7582a2f39e6ca0f708bdeb5ed18bb", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -9,15 +9,24 @@ export interface Decoration {\n }\n \n export class Highlighter {\n-    private static initDecorations(): Map<string, vscode.TextEditorDecorationType> {\n-        const decor = (color: string) => vscode.window.createTextEditorDecorationType({ color });\n+    private static initDecorations(): Map<\n+        string,\n+        vscode.TextEditorDecorationType\n+    > {\n+        const decor = (color: string) =>\n+            vscode.window.createTextEditorDecorationType({ color });\n \n-        const decorations: Iterable<[string, vscode.TextEditorDecorationType]> = [\n+        const decorations: Iterable<\n+            [string, vscode.TextEditorDecorationType]\n+        > = [\n             ['background', decor('#3F3F3F')],\n-            ['error', vscode.window.createTextEditorDecorationType({\n-                borderColor: 'red',\n-                borderStyle: 'none none dashed none',\n-            })],\n+            [\n+                'error',\n+                vscode.window.createTextEditorDecorationType({\n+                    borderColor: 'red',\n+                    borderStyle: 'none none dashed none'\n+                })\n+            ],\n             ['comment', decor('#7F9F7F')],\n             ['string', decor('#CC9393')],\n             ['keyword', decor('#F0DFAF')],\n@@ -26,13 +35,16 @@ export class Highlighter {\n             ['builtin', decor('#DD6718')],\n             ['text', decor('#DCDCCC')],\n             ['attribute', decor('#BFEBBF')],\n-            ['literal', decor('#DFAF8F')],\n+            ['literal', decor('#DFAF8F')]\n         ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);\n     }\n \n-    private decorations: (Map<string, vscode.TextEditorDecorationType> | null) = null;\n+    private decorations: Map<\n+        string,\n+        vscode.TextEditorDecorationType\n+    > | null = null;\n \n     public removeHighlights() {\n         if (this.decorations == null) {\n@@ -47,10 +59,7 @@ export class Highlighter {\n         this.decorations = null;\n     }\n \n-    public setHighlights(\n-        editor: vscode.TextEditor,\n-        highlights: Decoration[],\n-    ) {\n+    public setHighlights(editor: vscode.TextEditor, highlights: Decoration[]) {\n         // Initialize decorations if necessary\n         //\n         // Note: decoration objects need to be kept around so we can dispose them\n@@ -68,13 +77,15 @@ export class Highlighter {\n             if (!byTag.get(d.tag)) {\n                 continue;\n             }\n-            byTag.get(d.tag)!.push(\n-                Server.client.protocol2CodeConverter.asRange(d.range),\n-            );\n+            byTag\n+                .get(d.tag)!\n+                .push(Server.client.protocol2CodeConverter.asRange(d.range));\n         }\n \n         for (const tag of byTag.keys()) {\n-            const dec = this.decorations.get(tag) as vscode.TextEditorDecorationType;\n+            const dec = this.decorations.get(\n+                tag\n+            ) as vscode.TextEditorDecorationType;\n             const ranges = byTag.get(tag)!;\n             editor.setDecorations(dec, ranges);\n         }"}, {"sha": "74c4c35637b5c290aade80a370e82317d16857d6", "filename": "editors/code/src/notifications/index.ts", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fnotifications%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fnotifications%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnotifications%2Findex.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -1,5 +1,3 @@\n import * as publishDecorations from './publish_decorations';\n \n-export {\n-    publishDecorations,\n-};\n+export { publishDecorations };"}, {"sha": "3180019b7422363013b1906904aac22f654c1a2e", "filename": "editors/code/src/notifications/publish_decorations.ts", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -10,11 +10,10 @@ export interface PublishDecorationsParams {\n \n export function handle(params: PublishDecorationsParams) {\n     const targetEditor = vscode.window.visibleTextEditors.find(\n-        (editor) => editor.document.uri.toString() === params.uri,\n-    );\n-    if (!Server.config.highlightingOn || !targetEditor) { return; }\n-    Server.highlighter.setHighlights(\n-        targetEditor,\n-        params.decorations,\n+        editor => editor.document.uri.toString() === params.uri\n     );\n+    if (!Server.config.highlightingOn || !targetEditor) {\n+        return;\n+    }\n+    Server.highlighter.setHighlights(targetEditor, params.decorations);\n }"}, {"sha": "196fc3ebc1fb9ac6bea579cec217d1af5e3d9f03", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -8,24 +8,26 @@ export class Server {\n     public static config = new Config();\n     public static client: lc.LanguageClient;\n \n-    public static start(notificationHandlers: Iterable<[string, lc.GenericNotificationHandler]>) {\n+    public static start(\n+        notificationHandlers: Iterable<[string, lc.GenericNotificationHandler]>\n+    ) {\n         const run: lc.Executable = {\n             command: 'ra_lsp_server',\n-            options: { cwd: '.' },\n+            options: { cwd: '.' }\n         };\n         const serverOptions: lc.ServerOptions = {\n             run,\n-            debug: run,\n+            debug: run\n         };\n         const clientOptions: lc.LanguageClientOptions = {\n-            documentSelector: [{ scheme: 'file', language: 'rust' }],\n+            documentSelector: [{ scheme: 'file', language: 'rust' }]\n         };\n \n         Server.client = new lc.LanguageClient(\n             'ra-lsp',\n             'rust-analyzer languge server',\n             serverOptions,\n-            clientOptions,\n+            clientOptions\n         );\n         Server.client.onReady().then(() => {\n             for (const [type, handler] of notificationHandlers) {"}, {"sha": "ef93c52b75bbc703c8f42839a84a1b2997b9e585", "filename": "editors/code/tsconfig.json", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.json?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -3,15 +3,10 @@\n         \"module\": \"commonjs\",\n         \"target\": \"es6\",\n         \"outDir\": \"out\",\n-        \"lib\": [\n-            \"es6\"\n-        ],\n+        \"lib\": [\"es6\"],\n         \"sourceMap\": true,\n         \"rootDir\": \"src\",\n         \"strict\": true\n     },\n-    \"exclude\": [\n-        \"node_modules\",\n-        \".vscode-test\"\n-    ]\n+    \"exclude\": [\"node_modules\", \".vscode-test\"]\n }"}, {"sha": "bdeb4895eee6f9ba17b868ad431ed056d6789d2b", "filename": "editors/code/tslint.json", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Ftslint.json", "raw_url": "https://github.com/rust-lang/rust/raw/e26071d96e1ff56289213dbe78415f836de8a70e/editors%2Fcode%2Ftslint.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftslint.json?ref=e26071d96e1ff56289213dbe78415f836de8a70e", "patch": "@@ -1,9 +1,9 @@\n {\n-  \"defaultSeverity\": \"error\",\n-  \"extends\": [\"tslint:recommended\", \"tslint-config-prettier\"],\n-  \"rules\": {\n-    \"quotemark\": [true, \"single\"],\n-    \"interface-name\": false,\n-    \"object-literal-sort-keys\": false\n-  }\n+    \"defaultSeverity\": \"error\",\n+    \"extends\": [\"tslint:recommended\", \"tslint-config-prettier\"],\n+    \"rules\": {\n+        \"quotemark\": [true, \"single\"],\n+        \"interface-name\": false,\n+        \"object-literal-sort-keys\": false\n+    }\n }"}]}