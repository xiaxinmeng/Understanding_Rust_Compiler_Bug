{"sha": "03661630c92365572bc5bbe51677f1190bab2131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjYxNjMwYzkyMzY1NTcyYmM1YmJlNTE2NzdmMTE5MGJhYjIxMzE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-24T11:52:57Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-24T11:52:57Z"}, "message": "Document the self keyword", "tree": {"sha": "49a646b2aedd8e7f98c9d8d239ac36ee401f5e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a646b2aedd8e7f98c9d8d239ac36ee401f5e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03661630c92365572bc5bbe51677f1190bab2131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03661630c92365572bc5bbe51677f1190bab2131", "html_url": "https://github.com/rust-lang/rust/commit/03661630c92365572bc5bbe51677f1190bab2131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03661630c92365572bc5bbe51677f1190bab2131/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c90ae8404b6b83bc3cba35840ddf7edd500cc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c90ae8404b6b83bc3cba35840ddf7edd500cc86", "html_url": "https://github.com/rust-lang/rust/commit/3c90ae8404b6b83bc3cba35840ddf7edd500cc86"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "6d98c4d01c040d1449cfd15c90d8a9c2051528c1", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/03661630c92365572bc5bbe51677f1190bab2131/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03661630c92365572bc5bbe51677f1190bab2131/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=03661630c92365572bc5bbe51677f1190bab2131", "patch": "@@ -1009,9 +1009,93 @@ mod return_keyword {}\n //\n /// The receiver of a method, or the current module.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `self` is used in two situations: referencing the current module and marking\n+/// the receiver of a method.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// In paths, `self` can be used to refer to the current module, either in a\n+/// [`use`] statement or in a path to access an element:\n+///\n+/// ```\n+/// # #![allow(unused_imports)]\n+/// use std::io::{self, Read};\n+/// ```\n+///\n+/// Is functionally the same as:\n+///\n+/// ```\n+/// # #![allow(unused_imports)]\n+/// use std::io;\n+/// use std::io::Read;\n+/// ```\n+///\n+/// Using `self` to access an element in the current module:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// # fn main() {}\n+/// fn foo() {}\n+/// fn bar() {\n+///     self::foo()\n+/// }\n+/// ```\n+///\n+/// `self` as the current receiver for a method allows to omit the parameter\n+/// type most of the time. With the exception of this particularity, `self` is\n+/// used much like any other parameter:\n+///\n+/// ```\n+/// struct Foo(i32);\n+///\n+/// impl Foo {\n+///     // No `self`.\n+///     fn new() -> Self {\n+///         Self(0)\n+///     }\n+///\n+///     // Consuming `self`.\n+///     fn consume(self) -> Self {\n+///         Self(self.0 + 1)\n+///     }\n+///\n+///     // Borrowing `self`.\n+///     fn borrow(&self) -> &i32 {\n+///         &self.0\n+///     }\n+///\n+///     // Borrowing `self` mutably.\n+///     fn borrow_mut(&mut self) -> &mut i32 {\n+///         &mut self.0\n+///     }\n+/// }\n+///\n+/// // This method must be called with a `Type::` prefix.\n+/// let foo = Foo::new();\n+/// assert_eq!(foo.0, 0);\n+///\n+/// // Those two calls produces the same result.\n+/// let foo = Foo::consume(foo);\n+/// assert_eq!(foo.0, 1);\n+/// let foo = foo.consume();\n+/// assert_eq!(foo.0, 2);\n+///\n+/// // Borrowing is handled automatically with the second syntax.\n+/// let borrow_1 = Foo::borrow(&foo);\n+/// let borrow_2 = foo.borrow();\n+/// assert_eq!(borrow_1, borrow_2);\n+///\n+/// // Borrowing mutably is handled automatically too with the second syntax.\n+/// let mut foo = Foo::new();\n+/// *Foo::borrow_mut(&mut foo) += 1;\n+/// assert_eq!(foo.0, 1);\n+/// *foo.borrow_mut() += 1;\n+/// assert_eq!(foo.0, 2);\n+/// ```\n+///\n+/// Note that this automatic conversion when calling `foo.method()` is not\n+/// limited to the examples above. See the [Reference] for more information.\n+///\n+/// [`use`]: keyword.use.html\n+/// [Reference]: ../reference/items/associated-items.html#methods\n mod self_keyword {}\n \n #[doc(keyword = \"Self\")]"}]}