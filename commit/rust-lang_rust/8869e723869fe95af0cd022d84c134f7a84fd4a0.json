{"sha": "8869e723869fe95af0cd022d84c134f7a84fd4a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NjllNzIzODY5ZmU5NWFmMGNkMDIyZDg0YzEzNGY3YTg0ZmQ0YTA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-22T04:32:13Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-22T19:06:54Z"}, "message": "Simplify path_entry's closure argument\n\nMake the closure take two arguments instead of a single `path_entry`\nstruct; remove the `path_entry` type. This eliminates a bad copy.", "tree": {"sha": "de441e046f52a05fb2581fb88d5ca3bd4da789f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de441e046f52a05fb2581fb88d5ca3bd4da789f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8869e723869fe95af0cd022d84c134f7a84fd4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8869e723869fe95af0cd022d84c134f7a84fd4a0", "html_url": "https://github.com/rust-lang/rust/commit/8869e723869fe95af0cd022d84c134f7a84fd4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8869e723869fe95af0cd022d84c134f7a84fd4a0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02449c41d3fb909270b8b5794428c33dbfe3474", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02449c41d3fb909270b8b5794428c33dbfe3474", "html_url": "https://github.com/rust-lang/rust/commit/e02449c41d3fb909270b8b5794428c33dbfe3474"}], "stats": {"total": 58, "additions": 19, "deletions": 39}, "files": [{"sha": "28f900c59dd72bfe1b43ab46efe1014296fda2cf", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=8869e723869fe95af0cd022d84c134f7a84fd4a0", "patch": "@@ -88,7 +88,7 @@ fn each_lang_item(cstore: cstore::CStore,\n \n /// Iterates over all the paths in the given crate.\n fn each_path(cstore: cstore::CStore, cnum: ast::crate_num,\n-             f: fn(decoder::path_entry) -> bool) {\n+             f: fn(&str, decoder::def_like) -> bool) {\n     let crate_data = cstore::get_crate_data(cstore, cnum);\n     let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n         cstore::get_crate_data(cstore, cnum)"}, {"sha": "3d532070166ddd0a21c28da05b0f901d0561d237", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 12, "deletions": 31, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8869e723869fe95af0cd022d84c134f7a84fd4a0", "patch": "@@ -75,7 +75,6 @@ export def_like;\n export dl_def;\n export dl_impl;\n export dl_field;\n-export path_entry;\n export each_lang_item;\n export each_path;\n export get_item_path;\n@@ -468,21 +467,6 @@ fn def_like_to_def(def_like: def_like) -> ast::def {\n     }\n }\n \n-// A path.\n-struct path_entry {\n-    // The full path, separated by '::'.\n-    path_string: ~str,\n-    // The definition, implementation, or field that this path corresponds to.\n-    def_like: def_like,\n-}\n-\n-fn path_entry(+path_string: ~str, def_like: def_like) -> path_entry {\n-    path_entry {\n-        path_string: path_string,\n-        def_like: def_like\n-    }\n-}\n-\n /// Iterates over the language items in the given crate.\n fn each_lang_item(cdata: cmd, f: &fn(ast::node_id, uint) -> bool) {\n     let root = reader::Doc(cdata.data);\n@@ -503,7 +487,7 @@ fn each_lang_item(cdata: cmd, f: &fn(ast::node_id, uint) -> bool) {\n /// Iterates over all the paths in the given crate.\n fn each_path(intr: @ident_interner, cdata: cmd,\n              get_crate_data: GetCrateDataCb,\n-             f: fn(path_entry) -> bool) {\n+             f: fn(&str, def_like) -> bool) {\n     let root = reader::Doc(cdata.data);\n     let items = reader::get_doc(root, tag_items);\n     let items_data = reader::get_doc(items, tag_items_data);\n@@ -515,7 +499,8 @@ fn each_path(intr: @ident_interner, cdata: cmd,\n         if !broken {\n             let path = ast_map::path_to_str_with_sep(\n                 item_path(intr, item_doc), ~\"::\", intr);\n-            if path != ~\"\" {\n+            let path_is_empty = path.is_empty();\n+            if !path_is_empty {\n                 // Extract the def ID.\n                 let def_id = item_def_id(item_doc, cdata);\n \n@@ -524,10 +509,8 @@ fn each_path(intr: @ident_interner, cdata: cmd,\n                 let def_like = item_to_def_like(item_doc, def_id, cdata.cnum);\n \n                 // Hand the information off to the iteratee.\n-                // XXX: Bad copy.\n-                let this_path_entry = path_entry(copy path, def_like);\n-                if !f(this_path_entry) {\n-                    broken = true;      // XXX: This is awful.\n+                if !f(path, def_like) {\n+                    broken = true;      // FIXME #4572: This is awful.\n                 }\n             }\n \n@@ -548,7 +531,7 @@ fn each_path(intr: @ident_interner, cdata: cmd,\n                     let reexport_name = reader::doc_as_str(reexport_name_doc);\n \n                     let reexport_path;\n-                    if path == ~\"\" {\n+                    if path_is_empty {\n                         reexport_path = reexport_name;\n                     } else {\n                         reexport_path = path + ~\"::\" + reexport_name;\n@@ -576,10 +559,8 @@ fn each_path(intr: @ident_interner, cdata: cmd,\n                             debug!(\"(each_path) yielding reexported \\\n                                     item: %s\", reexport_path);\n \n-                            let this_path_entry =\n-                                path_entry(reexport_path, def_like);\n-                            if (!f(this_path_entry)) {\n-                                broken = true;  // XXX: This is awful.\n+                            if (!f(reexport_path, def_like)) {\n+                                broken = true;  // FIXME #4572: This is awful.\n                             }\n                         }\n                     }\n@@ -1123,12 +1104,12 @@ fn get_crate_vers(data: @~[u8]) -> ~str {\n \n fn iter_crate_items(intr: @ident_interner, cdata: cmd,\n                     get_crate_data: GetCrateDataCb,\n-                    proc: fn(+path: ~str, ast::def_id)) {\n-    for each_path(intr, cdata, get_crate_data) |path_entry| {\n-        match path_entry.def_like {\n+                    proc: fn(path: &str, ast::def_id)) {\n+    for each_path(intr, cdata, get_crate_data) |path_string, def_like| {\n+        match def_like {\n             dl_impl(*) | dl_field => {}\n             dl_def(def) => {\n-                proc(/*bad*/copy path_entry.path_string,\n+                proc(path_string,\n                      ast_util::def_id_of_def(def))\n             }\n         }"}, {"sha": "86fdadb3b16bfe55e307fc64e3ed1a67b13db2fe", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8869e723869fe95af0cd022d84c134f7a84fd4a0", "patch": "@@ -1808,14 +1808,13 @@ impl Resolver {\n \n         // Create all the items reachable by paths.\n         for each_path(self.session.cstore, root.def_id.get().crate)\n-                |path_entry| {\n+                |path_string, def_like| {\n \n             debug!(\"(building reduced graph for external crate) found path \\\n                         entry: %s (%?)\",\n-                    path_entry.path_string,\n-                    path_entry.def_like);\n+                    path_string, def_like);\n \n-            let mut pieces = split_str(path_entry.path_string, ~\"::\");\n+            let mut pieces = split_str(path_string, ~\"::\");\n             let final_ident_str = pieces.pop();\n             let final_ident = self.session.ident_of(final_ident_str);\n \n@@ -1867,7 +1866,7 @@ impl Resolver {\n                 current_module = (*child_name_bindings).get_module();\n             }\n \n-            match path_entry.def_like {\n+            match def_like {\n                 dl_def(def) => {\n                     // Add the new child item.\n                     let (child_name_bindings, new_parent) ="}, {"sha": "087b15c93cb7e8580d9080311b86d192367f1642", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8869e723869fe95af0cd022d84c134f7a84fd4a0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=8869e723869fe95af0cd022d84c134f7a84fd4a0", "patch": "@@ -931,8 +931,8 @@ impl CoherenceChecker {\n                                       def_id { crate: crate_number,\n                                                node: 0 });\n \n-            for each_path(crate_store, crate_number) |path_entry| {\n-                match path_entry.def_like {\n+            for each_path(crate_store, crate_number) |_p, def_like| {\n+                match def_like {\n                     dl_def(def_mod(def_id)) => {\n                         self.add_impls_for_module(impls_seen,\n                                                   crate_store,"}]}