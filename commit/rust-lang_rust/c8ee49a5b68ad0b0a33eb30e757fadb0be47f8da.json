{"sha": "c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZWU0OWE1YjY4YWQwYjBhMzNlYjMwZTc1N2ZhZGIwYmU0N2Y4ZGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-04T03:06:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-04T03:06:24Z"}, "message": "docs: Call () 'unit' instead of 'nil'", "tree": {"sha": "d4211a81a30d4fabfe51f9cf755a7d846a9c4c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4211a81a30d4fabfe51f9cf755a7d846a9c4c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da", "html_url": "https://github.com/rust-lang/rust/commit/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0893fe219dc1cad9887e68bc7198180492ea0b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0893fe219dc1cad9887e68bc7198180492ea0b9", "html_url": "https://github.com/rust-lang/rust/commit/d0893fe219dc1cad9887e68bc7198180492ea0b9"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "0a48b734fa015ca226dd71d87eeae8d12fe0048c", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da", "patch": "@@ -246,7 +246,7 @@ define a struct type with the same contents, and declare\n `gettimeofday` to take a pointer to such a struct.\n \n The second argument to `gettimeofday` (the time zone) is not used by\n-this program, so it simply declares it to be a pointer to the nil\n+this program, so it simply declares it to be a pointer to the unit\n type. Since all null pointers have the same representation regardless of\n their referent type, this is safe.\n "}, {"sha": "259328b0974f4a43dbf62a408584ed9a7a8d910e", "filename": "doc/tutorial.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c8ee49a5b68ad0b0a33eb30e757fadb0be47f8da", "patch": "@@ -294,11 +294,11 @@ are not semicolons in the blocks of the second snippet. This is\n important; the lack of a semicolon after the last statement in a\n braced block gives the whole block the value of that last expression.\n \n-Put another way, the semicolon in Rust *ignores the value of an expression*.\n-Thus, if the branches of the `if` had looked like `{ 4; }`, the above example\n-would simply assign `()` (nil or void) to `price`. But without the semicolon, each\n-branch has a different value, and `price` gets the value of the branch that\n-was taken.\n+Put another way, the semicolon in Rust *ignores the value of an\n+expression*.  Thus, if the branches of the `if` had looked like `{ 4; }`,\n+the above example would simply assign `()` (unit or void) to\n+`price`. But without the semicolon, each branch has a different value,\n+and `price` gets the value of the branch that was taken.\n \n In short, everything that's not a declaration (`let` for variables,\n `fn` for functions, et cetera) is an expression, including function bodies.\n@@ -839,7 +839,7 @@ fn point_from_direction(dir: Direction) -> Point {\n Tuples in Rust behave exactly like structs, except that their fields\n do not have names (and can thus not be accessed with dot notation).\n Tuples can have any arity except for 0 or 1 (though you may consider\n-nil, `()`, as the empty tuple if you like).\n+unit, `()`, as the empty tuple if you like).\n \n ~~~~\n let mytup: (int, int, float) = (10, 20, 30.0);\n@@ -891,7 +891,7 @@ fn int_to_str(i: int) -> ~str {\n }\n ~~~~\n \n-Functions that do not return a value are said to return nil, `()`,\n+Functions that do not return a value are said to return unit, `()`,\n and both the return type and the return value may be omitted from\n the definition. The following two functions are equivalent.\n "}]}