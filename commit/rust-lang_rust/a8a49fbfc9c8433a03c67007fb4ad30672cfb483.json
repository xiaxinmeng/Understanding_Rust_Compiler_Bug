{"sha": "a8a49fbfc9c8433a03c67007fb4ad30672cfb483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTQ5ZmJmYzljODQzM2EwM2M2NzAwN2ZiNGFkMzA2NzJjZmI0ODM=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2015-06-15T17:54:37Z"}, "committer": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2015-07-22T17:15:16Z"}, "message": "musl static linking not glibc", "tree": {"sha": "6d86acd8105a3097e44b5ef48b4782d83157a6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d86acd8105a3097e44b5ef48b4782d83157a6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a49fbfc9c8433a03c67007fb4ad30672cfb483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a49fbfc9c8433a03c67007fb4ad30672cfb483", "html_url": "https://github.com/rust-lang/rust/commit/a8a49fbfc9c8433a03c67007fb4ad30672cfb483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a49fbfc9c8433a03c67007fb4ad30672cfb483/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7af865b33348730aacc02afeb3233cf8d90bb1f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7af865b33348730aacc02afeb3233cf8d90bb1f2", "html_url": "https://github.com/rust-lang/rust/commit/7af865b33348730aacc02afeb3233cf8d90bb1f2"}], "stats": {"total": 152, "additions": 71, "deletions": 81}, "files": [{"sha": "614b7893e969eab09cb58590a17e2e2b79e1ebfb", "filename": "src/doc/trpl/advanced-linking.md", "status": "modified", "additions": 71, "deletions": 81, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/a8a49fbfc9c8433a03c67007fb4ad30672cfb483/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8a49fbfc9c8433a03c67007fb4ad30672cfb483/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md?ref=a8a49fbfc9c8433a03c67007fb4ad30672cfb483", "patch": "@@ -40,14 +40,14 @@ installing the Rust everywhere. By contrast, native libraries\n (e.g. `libc` and `libm`) usually dynamically linked, but it is possible to\n change this and statically link them as well.\n \n-Linking is a very platform dependent topic - on some platforms, static linking\n+Linking is a very platform dependent topic \u2014 on some platforms, static linking\n may not be possible at all! This section assumes some basic familiarity with\n-linking on your platform on choice.\n+linking on your platform of choice.\n \n ## Linux\n \n By default, all Rust programs on Linux will link to the system `libc` along with\n-a number of other libraries. Let's look at an example on a 64-bit linux machine\n+a number of other libraries. Let's look at an example on a 64-bit Linux machine\n with GCC and `glibc` (by far the most common `libc` on Linux):\n \n ``` text\n@@ -69,91 +69,81 @@ Dynamic linking on Linux can be undesirable if you wish to use new library\n features on old systems or target systems which do not have the required\n dependencies for your program to run.\n \n-The first step in using static linking is examining the Rust linking arguments\n-with an option to rustc. Newlines have been added for readability:\n-\n-``` text\n-$ rustc example.rs -Z print-link-args\n-\"cc\"\n-    \"-Wl,--as-needed\"\n-    \"-m64\"\n-    [...]\n-    \"-o\" \"example\"\n-    \"example.o\"\n-    \"-Wl,--whole-archive\" \"-lmorestack\" \"-Wl,--no-whole-archive\"\n-    \"-Wl,--gc-sections\"\n-    \"-pie\"\n-    \"-nodefaultlibs\"\n-    [...]\n-    \"-Wl,--whole-archive\" \"-Wl,-Bstatic\"\n-    \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\"\n-    \"-ldl\" \"-lpthread\" \"-lrt\" \"-lgcc_s\" \"-lpthread\" \"-lc\" \"-lm\" \"-lcompiler-rt\"\n-```\n-\n-Arguments with a `-L` before them set up the linker search path and arguments\n-ending with `.rlib` are linking Rust crates statically into your application.\n-Neither of these are relevent for static linking so have been ommitted.\n-\n-The first step in being able to statically link is to obtain an object file.\n-This can be achieved with `rustc --emit obj example.rs`, and creates a file\n-called `example.o`, which you can see being passed in the command line above -\n-rustc automatically deletes it when finished with it by default. As you now have\n-the object file, you should be able to run the link command obtained with\n-`print-link-args` to create perform the linking stage yourself.\n-\n-In order to statically link, there are a number of changes you must make. Below\n-is the command required to perform a static link; we will go through them each\n-in turn.\n-\n-``` text\n-$ rustc example.rs -Z print-link-args\n-\"cc\"\n-    \"-static\"\n-    \"-m64\"\n-    [...]\n-    \"-o\" \"example\"\n-    \"example.o\"\n-    \"-Wl,--whole-archive\" \"-lmorestack\" \"-Wl,--no-whole-archive\"\n-    \"-Wl,--gc-sections\"\n-    \"-nodefaultlibs\"\n-    [...]\n-    \"-Wl,--whole-archive\"\n-    \"-Wl,--no-whole-archive\"\n-    \"-ldl\" \"-lpthread\" \"-lrt\" \"-lgcc_eh\" \"-lpthread\" \"-lc\" \"-lm\" \"-lcompiler-rt\"\n+Static linking is supported via an alternative `libc`, `musl` - this must be\n+enabled at Rust compile-time with some prerequisites available. You can compile\n+your own version of Rust with `musl` enabled and install it into a custom\n+directory with the instructions below:\n+\n+```text\n+$ mkdir musldist\n+$ PREFIX=$(pwd)/musldist\n+$\n+$ # Build musl\n+$ wget http://www.musl-libc.org/releases/musl-1.1.10.tar.gz\n+[...]\n+$ tar xf musl-1.1.10.tar.gz\n+$ cd musl-1.1.10/\n+musl-1.1.10 $ ./configure --disable-shared --prefix=$PREFIX\n+[...]\n+musl-1.1.10 $ make\n+[...]\n+musl-1.1.10 $ make install\n+[...]\n+musl-1.1.10 $ cd ..\n+$ du -h musldist/lib/libc.a\n+2.2M    musldist/lib/libc.a\n+$\n+$ # Build libunwind.a\n+$ wget http://llvm.org/releases/3.6.1/llvm-3.6.1.src.tar.xz\n+$ tar xf llvm-3.6.1.src.tar.xz\n+$ cd llvm-3.6.1.src/projects/\n+llvm-3.6.1.src/projects $ svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk/ libcxxabi\n+llvm-3.6.1.src/projects $ svn co http://llvm.org/svn/llvm-project/libunwind/trunk/ libunwind\n+llvm-3.6.1.src/projects $ sed -i 's#^\\(include_directories\\).*$#\\0\\n\\1(../libcxxabi/include)#' libunwind/CMakeLists.txt\n+llvm-3.6.1.src/projects $ mkdir libunwind/build\n+llvm-3.6.1.src/projects $ cd libunwind/build\n+llvm-3.6.1.src/projects/libunwind/build $ cmake -DLLVM_PATH=../../.. -DLIBUNWIND_ENABLE_SHARED=0 ..\n+llvm-3.6.1.src/projects/libunwind/build $ make\n+llvm-3.6.1.src/projects/libunwind/build $ cp lib/libunwind.a $PREFIX/lib/\n+llvm-3.6.1.src/projects/libunwind/build $ cd cd ../../../../\n+$ du -h musldist/lib/libunwind.a\n+164K    musldist/lib/libunwind.a\n+$\n+$ # Build musl-enabled rust\n+$ git clone https://github.com/rust-lang/rust.git muslrust\n+$ cd muslrust\n+muslrust $ ./configure --target=x86_64-unknown-linux-musl --musl-root=$PREFIX --prefix=$PREFIX\n+muslrust $ make\n+muslrust $ make install\n+muslrust $ cd ..\n+$ du -h musldist/bin/rustc\n+12K     musldist/bin/rustc\n ```\n \n- - `-static` was added - this is the signal to the compiler to use a static\n-   glibc, among other things\n- - `-Wl,--as-needed` was removed - this can be left in, but is unnecessary\n-   as it only applies to dynamic librares\n- - `-pie` was removed - this is not compatible with static binaries\n- - both `-Wl,-B*` options were removed - everything will be linked statically,\n-   so informing the linker of how certain libraries should be linked is not\n-   appropriate\n- - `-lgcc_s` was changed to `-lgcc_eh` - `gcc_s` is the GCC support library,\n-   which Rust uses for unwinding support. This is only available as a dynamic\n-   library, so we must specify the static version of the library providing\n-   unwinding support.\n-\n-By running this command, you will likely see some warnings like\n+You now have a build of a `musl`-enabled Rust! Because we've installed it to a\n+custom prefix we need to make sure our system can the binaries and appropriate\n+libraries when we try and run it:\n \n-``` text\n-warning: Using 'getpwuid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking\n+```text\n+$ export PATH=$PREFIX/bin:$PATH\n+$ export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH\n ```\n \n-These should be considered carefully! They indicate calls in glibc which\n-*cannot* be statically linked without significant extra effort. An application\n-using these calls will find it is not as portable as 'static binary' would imply.\n-Rust supports targeting musl as an alternative libc to be able to fully\n-statically link these calls.\n+Let's try it out!\n \n-As we are confident that our code does not use these calls, we can now see the\n-fruits of our labour:\n-\n-```\n+```text\n+$ echo 'fn main() { println!(\"hi!\"); panic!(\"failed\"); }' > example.rs\n+$ rustc --target=x86_64-unknown-linux-musl example.rs\n $ ldd example\n         not a dynamic executable\n+$ ./example\n+hi!\n+thread '<main>' panicked at 'failed', example.rs:1\n ```\n \n-This binary can be copied to virtually any 64-bit Linux machine and work\n-without requiring external libraries.\n+Success! This binary can be copied to almost any Linux machine with the same\n+machine architecture and run without issues.\n+\n+`cargo build` also permits the `--target` option so you should be able to build\n+your crates as normal. However, you may need to recompile your native libraries\n+against `musl` before they can be linked against."}]}