{"sha": "09edfb885cd0288edadb6493e8ee933f912a55c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWRmYjg4NWNkMDI4OGVkYWRiNjQ5M2U4ZWU5MzNmOTEyYTU1YzY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-03T00:53:57Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-03T00:53:57Z"}, "message": "If we encounter `_` ascribed to structural pattern like `(a, b)`, just skip relate_types.", "tree": {"sha": "bb691c32a39ca50c812d88a1a49df5d25125ebf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb691c32a39ca50c812d88a1a49df5d25125ebf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09edfb885cd0288edadb6493e8ee933f912a55c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09edfb885cd0288edadb6493e8ee933f912a55c6", "html_url": "https://github.com/rust-lang/rust/commit/09edfb885cd0288edadb6493e8ee933f912a55c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09edfb885cd0288edadb6493e8ee933f912a55c6/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05812fa8c588473f03e3fa7cf59cd84f4f37c715", "url": "https://api.github.com/repos/rust-lang/rust/commits/05812fa8c588473f03e3fa7cf59cd84f4f37c715", "html_url": "https://github.com/rust-lang/rust/commit/05812fa8c588473f03e3fa7cf59cd84f4f37c715"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "695871953669431349783d6122206fe985350f18", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/09edfb885cd0288edadb6493e8ee933f912a55c6/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09edfb885cd0288edadb6493e8ee933f912a55c6/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=09edfb885cd0288edadb6493e8ee933f912a55c6", "patch": "@@ -80,19 +80,21 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                          elem: &PlaceElem<'tcx>)\n                          -> PlaceTy<'tcx>\n     {\n-        self.projection_ty_core(tcx, elem, |_, _, ty| ty)\n+        self.projection_ty_core(tcx, elem, |_, _, ty| -> Result<Ty<'tcx>, ()> { Ok(ty) })\n+            .unwrap()\n     }\n \n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n     /// projects `place_ty` onto `elem`, returning the appropriate\n     /// `Ty` or downcast variant corresponding to that projection.\n     /// The `handle_field` callback must map a `Field` to its `Ty`,\n     /// (which should be trivial when `T` = `Ty`).\n-    pub fn projection_ty_core<V, T>(self,\n-                                    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                    elem: &ProjectionElem<'tcx, V, T>,\n-                                    mut handle_field: impl FnMut(&Self, &Field, &T) -> Ty<'tcx>)\n-                                    -> PlaceTy<'tcx>\n+    pub fn projection_ty_core<V, T, E>(\n+        self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        elem: &ProjectionElem<'tcx, V, T>,\n+        mut handle_field: impl FnMut(&Self, &Field, &T) -> Result<Ty<'tcx>, E>)\n+        -> Result<PlaceTy<'tcx>, E>\n     where\n         V: ::std::fmt::Debug, T: ::std::fmt::Debug\n     {\n@@ -142,10 +144,11 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                         bug!(\"cannot downcast non-ADT type: `{:?}`\", self)\n                     }\n                 },\n-            ProjectionElem::Field(ref f, ref fty) => PlaceTy::Ty { ty: handle_field(&self, f, fty) }\n+            ProjectionElem::Field(ref f, ref fty) =>\n+                PlaceTy::Ty { ty: handle_field(&self, f, fty)? },\n         };\n         debug!(\"projection_ty self: {:?} elem: {:?} yields: {:?}\", self, elem, answer);\n-        answer\n+        Ok(answer)\n     }\n }\n "}, {"sha": "f1ebddfd6d658ac8e49ec1fc42e82afc980f4cd4", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/09edfb885cd0288edadb6493e8ee933f912a55c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09edfb885cd0288edadb6493e8ee933f912a55c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=09edfb885cd0288edadb6493e8ee933f912a55c6", "patch": "@@ -991,20 +991,39 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let v1 = ty::Contravariant.xform(v);\n \n                 let tcx = self.infcx.tcx;\n-                let mut projected_ty = PlaceTy::from_ty(ty);\n+                let ty = self.normalize(ty, locations);\n+\n+                // We need to follow any provided projetions into the type.\n+                //\n+                // if we hit a ty var as we descend, then just skip the\n+                // attempt to relate the mir local with any type.\n+                #[derive(Debug)] struct HitTyVar;\n+                let mut curr_projected_ty: Result<PlaceTy, HitTyVar>;\n+\n+                curr_projected_ty = Ok(PlaceTy::from_ty(ty));\n                 for proj in &user_ty.projs {\n-                    projected_ty = projected_ty.projection_ty_core(\n+                    let projected_ty = if let Ok(projected_ty) = curr_projected_ty {\n+                        projected_ty\n+                    } else {\n+                        break;\n+                    };\n+                    curr_projected_ty = projected_ty.projection_ty_core(\n                         tcx, proj, |this, field, &()| {\n-                            let ty = this.field_ty(tcx, field);\n-                            self.normalize(ty, locations)\n+                            if this.to_ty(tcx).is_ty_var() {\n+                                Err(HitTyVar)\n+                            } else {\n+                                let ty = this.field_ty(tcx, field);\n+                                Ok(self.normalize(ty, locations))\n+                            }\n                         });\n                 }\n                 debug!(\"user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}\",\n-                       user_ty.base, ty, user_ty.projs, projected_ty);\n+                       user_ty.base, ty, user_ty.projs, curr_projected_ty);\n \n-                let ty = projected_ty.to_ty(tcx);\n-\n-                self.relate_types(ty, v1, a, locations, category)?;\n+                if let Ok(projected_ty) = curr_projected_ty {\n+                    let ty = projected_ty.to_ty(tcx);\n+                    self.relate_types(ty, v1, a, locations, category)?;\n+                }\n             }\n             UserTypeAnnotation::TypeOf(def_id, canonical_substs) => {\n                 let ("}, {"sha": "e635bc9efc45c0572326d00d87d6776d014aae6d", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/09edfb885cd0288edadb6493e8ee933f912a55c6/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09edfb885cd0288edadb6493e8ee933f912a55c6/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=09edfb885cd0288edadb6493e8ee933f912a55c6", "patch": "@@ -151,17 +151,35 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n         debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n         let ty = self.normalize(ty);\n \n-        let mut projected_ty = PlaceTy::from_ty(ty);\n+        // We need to follow any provided projetions into the type.\n+        //\n+        // if we hit a ty var as we descend, then just skip the\n+        // attempt to relate the mir local with any type.\n+\n+        struct HitTyVar;\n+        let mut curr_projected_ty: Result<PlaceTy, HitTyVar>;\n+        curr_projected_ty = Ok(PlaceTy::from_ty(ty));\n         for proj in projs {\n-            projected_ty = projected_ty.projection_ty_core(\n+            let projected_ty = if let Ok(projected_ty) = curr_projected_ty {\n+                projected_ty\n+            } else {\n+                break;\n+            };\n+            curr_projected_ty = projected_ty.projection_ty_core(\n                 tcx, proj, |this, field, &()| {\n-                    let ty = this.field_ty(tcx, field);\n-                    self.normalize(ty)\n+                    if this.to_ty(tcx).is_ty_var() {\n+                        Err(HitTyVar)\n+                    } else {\n+                        let ty = this.field_ty(tcx, field);\n+                        Ok(self.normalize(ty))\n+                    }\n                 });\n         }\n-        let ty = projected_ty.to_ty(tcx);\n \n-        self.relate(mir_ty, variance, ty)?;\n+        if let Ok(projected_ty) = curr_projected_ty {\n+            let ty = projected_ty.to_ty(tcx);\n+            self.relate(mir_ty, variance, ty)?;\n+        }\n \n         if let Some(UserSelfTy {\n             impl_def_id,"}]}