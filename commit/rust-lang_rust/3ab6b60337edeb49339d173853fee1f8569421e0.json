{"sha": "3ab6b60337edeb49339d173853fee1f8569421e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjZiNjAzMzdlZGViNDkzMzlkMTczODUzZmVlMWY4NTY5NDIxZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-18T05:58:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-18T05:58:16Z"}, "message": "Auto merge of #87071 - inquisitivecrystal:inclusive-range, r=estebank\n\nAdd diagnostics for mistyped inclusive range\n\nInclusive ranges are correctly typed as `..=`. However, it's quite easy to think of it as being like `==`, and type `..==` instead. This PR adds helpful diagnostics for this case.\n\nResolves #86395 (there are some other cases there, but I think those should probably have separate issues).\n\nr? `@estebank`", "tree": {"sha": "56d696f33ba36371e0eda73e4c29172bf7a01fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d696f33ba36371e0eda73e4c29172bf7a01fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab6b60337edeb49339d173853fee1f8569421e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab6b60337edeb49339d173853fee1f8569421e0", "html_url": "https://github.com/rust-lang/rust/commit/3ab6b60337edeb49339d173853fee1f8569421e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab6b60337edeb49339d173853fee1f8569421e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d155973c6c22a0e1af49a4a9bac024f697851d", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d155973c6c22a0e1af49a4a9bac024f697851d", "html_url": "https://github.com/rust-lang/rust/commit/77d155973c6c22a0e1af49a4a9bac024f697851d"}, {"sha": "b56079ec5466af5bff7d7d174ed6ae248aaa92c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56079ec5466af5bff7d7d174ed6ae248aaa92c4", "html_url": "https://github.com/rust-lang/rust/commit/b56079ec5466af5bff7d7d174ed6ae248aaa92c4"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "ef05f64da94eda90c73c974dc36e864d8b6e5daa", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab6b60337edeb49339d173853fee1f8569421e0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab6b60337edeb49339d173853fee1f8569421e0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=3ab6b60337edeb49339d173853fee1f8569421e0", "patch": "@@ -431,7 +431,8 @@ impl<'a> Parser<'a> {\n         let span = self.mk_expr_sp(&lhs, lhs.span, rhs_span);\n         let limits =\n             if op == AssocOp::DotDot { RangeLimits::HalfOpen } else { RangeLimits::Closed };\n-        Ok(self.mk_expr(span, self.mk_range(Some(lhs), rhs, limits), AttrVec::new()))\n+        let range = self.mk_range(Some(lhs), rhs, limits);\n+        Ok(self.mk_expr(span, range, AttrVec::new()))\n     }\n \n     fn is_at_start_of_range_notation_rhs(&self) -> bool {\n@@ -479,7 +480,8 @@ impl<'a> Parser<'a> {\n             } else {\n                 (lo, None)\n             };\n-            Ok(this.mk_expr(span, this.mk_range(None, opt_end, limits), attrs.into()))\n+            let range = this.mk_range(None, opt_end, limits);\n+            Ok(this.mk_expr(span, range, attrs.into()))\n         })\n     }\n \n@@ -2517,13 +2519,13 @@ impl<'a> Parser<'a> {\n     }\n \n     fn mk_range(\n-        &self,\n+        &mut self,\n         start: Option<P<Expr>>,\n         end: Option<P<Expr>>,\n         limits: RangeLimits,\n     ) -> ExprKind {\n         if end.is_none() && limits == RangeLimits::Closed {\n-            self.error_inclusive_range_with_no_end(self.prev_token.span);\n+            self.inclusive_range_with_incorrect_end(self.prev_token.span);\n             ExprKind::Err\n         } else {\n             ExprKind::Range(start, end, limits)"}, {"sha": "7219e39ea6ba004dc3379dcc6bba5d82c10207eb", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ab6b60337edeb49339d173853fee1f8569421e0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab6b60337edeb49339d173853fee1f8569421e0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=3ab6b60337edeb49339d173853fee1f8569421e0", "patch": "@@ -797,15 +797,48 @@ impl<'a> Parser<'a> {\n             // Parsing e.g. `X..`.\n             if let RangeEnd::Included(_) = re.node {\n                 // FIXME(Centril): Consider semantic errors instead in `ast_validation`.\n-                // Possibly also do this for `X..=` in *expression* contexts.\n-                self.error_inclusive_range_with_no_end(re.span);\n+                self.inclusive_range_with_incorrect_end(re.span);\n             }\n             None\n         };\n         Ok(PatKind::Range(Some(begin), end, re))\n     }\n \n-    pub(super) fn error_inclusive_range_with_no_end(&self, span: Span) {\n+    pub(super) fn inclusive_range_with_incorrect_end(&mut self, span: Span) {\n+        let tok = &self.token;\n+\n+        // If the user typed \"..==\" instead of \"..=\", we want to give them\n+        // a specific error message telling them to use \"..=\".\n+        // Otherwise, we assume that they meant to type a half open exclusive\n+        // range and give them an error telling them to do that instead.\n+        if matches!(tok.kind, token::Eq) && tok.span.lo() == span.hi() {\n+            let span_with_eq = span.to(tok.span);\n+\n+            // Ensure the user doesn't receive unhelpful unexpected token errors\n+            self.bump();\n+            if self.is_pat_range_end_start(0) {\n+                let _ = self.parse_pat_range_end();\n+            }\n+\n+            self.error_inclusive_range_with_extra_equals(span_with_eq);\n+        } else {\n+            self.error_inclusive_range_with_no_end(span);\n+        }\n+    }\n+\n+    fn error_inclusive_range_with_extra_equals(&self, span: Span) {\n+        self.struct_span_err(span, \"unexpected `=` after inclusive range\")\n+            .span_suggestion_short(\n+                span,\n+                \"use `..=` instead\",\n+                \"..=\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            )\n+            .note(\"inclusive ranges end with a single equals sign (`..=`)\")\n+            .emit();\n+    }\n+\n+    fn error_inclusive_range_with_no_end(&self, span: Span) {\n         struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n             .span_suggestion_short(\n                 span,"}, {"sha": "d41c0699cf7fb7d84237443b199ce4ba2aefd11c", "filename": "src/test/ui/parser/range-inclusive-extra-equals.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab6b60337edeb49339d173853fee1f8569421e0/src%2Ftest%2Fui%2Fparser%2Frange-inclusive-extra-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab6b60337edeb49339d173853fee1f8569421e0/src%2Ftest%2Fui%2Fparser%2Frange-inclusive-extra-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange-inclusive-extra-equals.rs?ref=3ab6b60337edeb49339d173853fee1f8569421e0", "patch": "@@ -0,0 +1,10 @@\n+// Makes sure that a helpful message is shown when someone mistypes\n+// an inclusive range as `..==` rather than `..=`. This is an\n+// easy mistake, because of the resemblance to`==`.\n+// See #86395 for a bit of background.\n+\n+pub fn main() {\n+    if let 1..==3 = 1 {} //~ERROR unexpected `=` after inclusive range\n+                      //~|HELP use `..=` instead\n+                      //~|NOTE inclusive ranges end with a single equals sign\n+}"}, {"sha": "d37b6be4fa1134ade45922de815ad8144378ece2", "filename": "src/test/ui/parser/range-inclusive-extra-equals.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab6b60337edeb49339d173853fee1f8569421e0/src%2Ftest%2Fui%2Fparser%2Frange-inclusive-extra-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab6b60337edeb49339d173853fee1f8569421e0/src%2Ftest%2Fui%2Fparser%2Frange-inclusive-extra-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange-inclusive-extra-equals.stderr?ref=3ab6b60337edeb49339d173853fee1f8569421e0", "patch": "@@ -0,0 +1,10 @@\n+error: unexpected `=` after inclusive range\n+  --> $DIR/range-inclusive-extra-equals.rs:7:13\n+   |\n+LL |     if let 1..==3 = 1 {}\n+   |             ^^^^ help: use `..=` instead\n+   |\n+   = note: inclusive ranges end with a single equals sign (`..=`)\n+\n+error: aborting due to previous error\n+"}]}