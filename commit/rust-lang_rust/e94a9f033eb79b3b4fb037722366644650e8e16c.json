{"sha": "e94a9f033eb79b3b4fb037722366644650e8e16c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NGE5ZjAzM2ViNzliM2I0ZmIwMzc3MjIzNjY2NDQ2NTBlOGUxNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-13T14:21:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-13T14:21:39Z"}, "message": "auto merge of #20997 : nikomatsakis/rust/assoc-types-enum-field-access, r=nick29581\n\nVarious fixes to enum field access. Builds on PR #20955.\r\n\r\nr? @nick29581", "tree": {"sha": "4605616c25f9853fec2b41bfbc4a542ecbc09795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4605616c25f9853fec2b41bfbc4a542ecbc09795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94a9f033eb79b3b4fb037722366644650e8e16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a9f033eb79b3b4fb037722366644650e8e16c", "html_url": "https://github.com/rust-lang/rust/commit/e94a9f033eb79b3b4fb037722366644650e8e16c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94a9f033eb79b3b4fb037722366644650e8e16c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba9acd8ab0fc6ab5ce3776a1a50fe1431125ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba9acd8ab0fc6ab5ce3776a1a50fe1431125ed8", "html_url": "https://github.com/rust-lang/rust/commit/6ba9acd8ab0fc6ab5ce3776a1a50fe1431125ed8"}, {"sha": "487a4a174afb21de5ce5573e16dfe876f6face91", "url": "https://api.github.com/repos/rust-lang/rust/commits/487a4a174afb21de5ce5573e16dfe876f6face91", "html_url": "https://github.com/rust-lang/rust/commit/487a4a174afb21de5ce5573e16dfe876f6face91"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "c1efec8600114a06c76e8e1b84c0b725740a0a8c", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=e94a9f033eb79b3b4fb037722366644650e8e16c", "patch": "@@ -702,9 +702,8 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n         let mut cx = cx;\n \n         for (i, &arg) in variant.args.iter().enumerate() {\n-            cx = (*f)(cx,\n-                   adt::trans_field_ptr(cx, repr, av, variant.disr_val, i),\n-                   arg.subst(tcx, substs));\n+            let arg = monomorphize::apply_param_substs(tcx, substs, &arg);\n+            cx = f(cx, adt::trans_field_ptr(cx, repr, av, variant.disr_val, i), arg);\n         }\n         return cx;\n     }"}, {"sha": "5c8c8b485d87d1326f6aa955687139ac898ed3a1", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=e94a9f033eb79b3b4fb037722366644650e8e16c", "patch": "@@ -619,6 +619,8 @@ pub fn check_struct_pat_fields<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             }\n         };\n \n+        let field_type = pcx.fcx.normalize_associated_types_in(span, &field_type);\n+\n         check_pat(pcx, &*field.pat, field_type);\n     }\n "}, {"sha": "a499aa6733aae0783532874e7292b1c91db1263d", "filename": "src/test/run-pass/associated-types-enum-field-named.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs?ref=e94a9f033eb79b3b4fb037722366644650e8e16c", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test associated types appearing in struct-like enum variants.\n+\n+use self::VarValue::*;\n+\n+pub trait UnifyKey {\n+    type Value;\n+    fn to_index(&self) -> usize;\n+}\n+\n+pub enum VarValue<K:UnifyKey> {\n+    Redirect { to: K },\n+    Root { value: K::Value, rank: usize },\n+}\n+\n+fn get<'a,K:UnifyKey<Value=Option<V>>,V>(table: &'a Vec<VarValue<K>>, key: &K) -> &'a Option<V> {\n+    match table[key.to_index()] {\n+        VarValue::Redirect { to: ref k } => get(table, k),\n+        VarValue::Root { value: ref v, rank: _ } => v,\n+    }\n+}\n+\n+impl UnifyKey for usize {\n+    type Value = Option<char>;\n+    fn to_index(&self) -> usize { *self }\n+}\n+\n+fn main() {\n+    let table = vec![/* 0 */ Redirect { to: 1 },\n+                     /* 1 */ Redirect { to: 3 },\n+                     /* 2 */ Root { value: Some('x'), rank: 0 },\n+                     /* 3 */ Redirect { to: 2 }];\n+    assert_eq!(get(&table, &0), &Some('x'));\n+}"}, {"sha": "e710c53327ec76840697ba206a91c28b4af6803c", "filename": "src/test/run-pass/associated-types-enum-field-numbered.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a9f033eb79b3b4fb037722366644650e8e16c/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs?ref=e94a9f033eb79b3b4fb037722366644650e8e16c", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test associated types appearing in tuple-like enum variants.\n+\n+use self::VarValue::*;\n+\n+pub trait UnifyKey {\n+    type Value;\n+    fn to_index(&self) -> usize;\n+}\n+\n+pub enum VarValue<K:UnifyKey> {\n+    Redirect(K),\n+    Root(K::Value, usize),\n+}\n+\n+fn get<'a,K:UnifyKey<Value=Option<V>>,V>(table: &'a Vec<VarValue<K>>, key: &K) -> &'a Option<V> {\n+    match table[key.to_index()] {\n+        VarValue::Redirect(ref k) => get(table, k),\n+        VarValue::Root(ref v, _) => v,\n+    }\n+}\n+\n+impl UnifyKey for usize {\n+    type Value = Option<char>;\n+    fn to_index(&self) -> usize { *self }\n+}\n+\n+fn main() {\n+    let table = vec![/* 0 */ Redirect(1),\n+                     /* 1 */ Redirect(3),\n+                     /* 2 */ Root(Some('x'), 0),\n+                     /* 3 */ Redirect(2)];\n+    assert_eq!(get(&table, &0), &Some('x'));\n+}"}]}