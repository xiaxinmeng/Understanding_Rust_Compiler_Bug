{"sha": "78092c7c66a665ada55ea09476a387014f6665b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MDkyYzdjNjZhNjY1YWRhNTVlYTA5NDc2YTM4NzAxNGY2NjY1YjA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-05T10:47:28Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-05T10:47:28Z"}, "message": "Apply the reviews suggestions", "tree": {"sha": "05035ebe7c248dc4756aac09bd5c310ffe173707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05035ebe7c248dc4756aac09bd5c310ffe173707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78092c7c66a665ada55ea09476a387014f6665b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78092c7c66a665ada55ea09476a387014f6665b0", "html_url": "https://github.com/rust-lang/rust/commit/78092c7c66a665ada55ea09476a387014f6665b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78092c7c66a665ada55ea09476a387014f6665b0/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b9952625bd1a5d56c0955fa7887e0296b30ae76", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9952625bd1a5d56c0955fa7887e0296b30ae76", "html_url": "https://github.com/rust-lang/rust/commit/2b9952625bd1a5d56c0955fa7887e0296b30ae76"}], "stats": {"total": 96, "additions": 64, "deletions": 32}, "files": [{"sha": "17cd138c20fed9d239145c146bef123cb3d9d5d4", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=78092c7c66a665ada55ea09476a387014f6665b0", "patch": "@@ -8,8 +8,8 @@ use rustc_hash::FxHashMap;\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n use crate::{\n-    CrateGraph, CrateId, Edition, Env, FileId, FilePosition, RelativePathBuf, SourceDatabaseExt,\n-    SourceRoot, SourceRootId,\n+    input::CrateName, CrateGraph, CrateId, Edition, Env, FileId, FilePosition, RelativePathBuf,\n+    SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -139,7 +139,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         for (from, to) in crate_deps {\n             let from_id = crates[&from];\n             let to_id = crates[&to];\n-            crate_graph.add_dep(from_id, to.into(), to_id).unwrap();\n+            crate_graph.add_dep(from_id, CrateName::new(&to).unwrap(), to_id).unwrap();\n         }\n     }\n "}, {"sha": "1f1dcea429f7a8cecdb1a3d0a0d6146f5b287a03", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=78092c7c66a665ada55ea09476a387014f6665b0", "patch": "@@ -85,12 +85,21 @@ pub struct CrateId(pub u32);\n \n pub struct CrateName(SmolStr);\n \n-impl<T: AsRef<str>> From<T> for CrateName {\n-    fn from(name: T) -> Self {\n-        // For root projects with dashes in their name,\n-        // cargo metadata does not do any normalization\n-        // so we do it ourselves\n-        Self(SmolStr::new(name.as_ref().replace('-', \"_\")))\n+impl CrateName {\n+    /// Crates a crate name, checking for dashes in the string provided.\n+    /// Dashes are not allowed in the crate names,\n+    /// hence the input string is returned as `Err` for those cases.\n+    pub fn new(name: &str) -> Result<CrateName, &str> {\n+        if name.contains('-') {\n+            Err(name)\n+        } else {\n+            Ok(Self(SmolStr::new(name)))\n+        }\n+    }\n+\n+    /// Crates a crate name, unconditionally replacing the dashes with underscores.\n+    pub fn normalize_dashes(name: &str) -> CrateName {\n+        Self(SmolStr::new(name.replace('-', \"_\")))\n     }\n }\n \n@@ -279,7 +288,7 @@ pub struct CyclicDependenciesError;\n \n #[cfg(test)]\n mod tests {\n-    use super::{CfgOptions, CrateGraph, Dependency, Edition::Edition2018, Env, FileId};\n+    use super::{CfgOptions, CrateGraph, CrateName, Dependency, Edition::Edition2018, Env, FileId};\n \n     #[test]\n     fn it_should_panic_because_of_cycle_dependencies() {\n@@ -290,9 +299,9 @@ mod tests {\n             graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n         let crate3 =\n             graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n-        assert!(graph.add_dep(crate1, \"crate2\".into(), crate2).is_ok());\n-        assert!(graph.add_dep(crate2, \"crate3\".into(), crate3).is_ok());\n-        assert!(graph.add_dep(crate3, \"crate1\".into(), crate1).is_err());\n+        assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n+        assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n+        assert!(graph.add_dep(crate3, CrateName::new(\"crate1\").unwrap(), crate1).is_err());\n     }\n \n     #[test]\n@@ -304,8 +313,8 @@ mod tests {\n             graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n         let crate3 =\n             graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n-        assert!(graph.add_dep(crate1, \"crate2\".into(), crate2).is_ok());\n-        assert!(graph.add_dep(crate2, \"crate3\".into(), crate3).is_ok());\n+        assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n+        assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n     }\n \n     #[test]\n@@ -315,7 +324,9 @@ mod tests {\n             graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n         let crate2 =\n             graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n-        assert!(graph.add_dep(crate1, \"crate-name-with-dashes\".into(), crate2).is_ok());\n+        assert!(graph\n+            .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n+            .is_ok());\n         assert_eq!(\n             graph.dependencies(crate1).collect::<Vec<_>>(),\n             vec![&Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]"}, {"sha": "fb002d717d9f2f05ddbdfca7d40bc7d634c26f86", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=78092c7c66a665ada55ea09476a387014f6665b0", "patch": "@@ -10,7 +10,9 @@ use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n \n pub use crate::{\n     cancellation::Canceled,\n-    input::{CrateGraph, CrateId, Dependency, Edition, Env, FileId, SourceRoot, SourceRootId},\n+    input::{\n+        CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, SourceRoot, SourceRootId,\n+    },\n };\n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;"}, {"sha": "081aaee8c92270c732483b407b9ffbe0636615f8", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=78092c7c66a665ada55ea09476a387014f6665b0", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n-use ra_db::{Env, RelativePathBuf};\n+use ra_db::{CrateName, Env, RelativePathBuf};\n use test_utils::{extract_offset, extract_range, parse_fixture, CURSOR_MARKER};\n \n use crate::{\n@@ -107,7 +107,9 @@ impl MockAnalysis {\n                     crate_graph.add_crate_root(file_id, Edition2018, cfg_options, Env::default());\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n                 if let Some(root_crate) = root_crate {\n-                    crate_graph.add_dep(root_crate, crate_name.into(), other_crate).unwrap();\n+                    crate_graph\n+                        .add_dep(root_crate, CrateName::new(crate_name).unwrap(), other_crate)\n+                        .unwrap();\n                 }\n             }\n             change.add_file(source_root, file_id, path, Arc::new(contents));"}, {"sha": "bc1d15406b2fde4f677aedecd61e3817b55b997b", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78092c7c66a665ada55ea09476a387014f6665b0/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=78092c7c66a665ada55ea09476a387014f6665b0", "patch": "@@ -13,7 +13,7 @@ use std::{\n };\n \n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateId, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -177,7 +177,9 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n                         {\n-                            if let Err(_) = crate_graph.add_dep(from, dep.name.clone().into(), to) {\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                            {\n                                 log::error!(\n                                     \"cyclic dependency {:?} -> {:?}\",\n                                     from_crate_id,\n@@ -215,7 +217,9 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (sysroot_crates.get(&from), sysroot_crates.get(&to))\n                         {\n-                            if let Err(_) = crate_graph.add_dep(from, name.into(), to) {\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, CrateName::new(name).unwrap(), to)\n+                            {\n                                 log::error!(\"cyclic dependency between sysroot crates\")\n                             }\n                         }\n@@ -257,7 +261,7 @@ impl ProjectWorkspace {\n                                 if let Some(proc_macro) = libproc_macro {\n                                     if let Err(_) = crate_graph.add_dep(\n                                         crate_id,\n-                                        \"proc_macro\".into(),\n+                                        CrateName::new(\"proc_macro\").unwrap(),\n                                         proc_macro,\n                                     ) {\n                                         log::error!(\n@@ -276,9 +280,14 @@ impl ProjectWorkspace {\n                     for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                         if let Some(to) = lib_tgt {\n                             if to != from {\n-                                if let Err(_) =\n-                                    crate_graph.add_dep(from, pkg.name(&cargo).into(), to)\n-                                {\n+                                if let Err(_) = crate_graph.add_dep(\n+                                    from,\n+                                    // For root projects with dashes in their name,\n+                                    // cargo metadata does not do any normalization,\n+                                    // so we do it ourselves currently\n+                                    CrateName::normalize_dashes(pkg.name(&cargo)),\n+                                    to,\n+                                ) {\n                                     log::error!(\n                                         \"cyclic dependency between targets of {}\",\n                                         pkg.name(&cargo)\n@@ -289,17 +298,23 @@ impl ProjectWorkspace {\n                         // core is added as a dependency before std in order to\n                         // mimic rustcs dependency order\n                         if let Some(core) = libcore {\n-                            if let Err(_) = crate_graph.add_dep(from, \"core\".into(), core) {\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, CrateName::new(\"core\").unwrap(), core)\n+                            {\n                                 log::error!(\"cyclic dependency on core for {}\", pkg.name(&cargo))\n                             }\n                         }\n                         if let Some(alloc) = liballoc {\n-                            if let Err(_) = crate_graph.add_dep(from, \"alloc\".into(), alloc) {\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, CrateName::new(\"alloc\").unwrap(), alloc)\n+                            {\n                                 log::error!(\"cyclic dependency on alloc for {}\", pkg.name(&cargo))\n                             }\n                         }\n                         if let Some(std) = libstd {\n-                            if let Err(_) = crate_graph.add_dep(from, \"std\".into(), std) {\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, CrateName::new(\"std\").unwrap(), std)\n+                            {\n                                 log::error!(\"cyclic dependency on std for {}\", pkg.name(&cargo))\n                             }\n                         }\n@@ -312,9 +327,11 @@ impl ProjectWorkspace {\n                     for dep in pkg.dependencies(&cargo) {\n                         if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                             for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                if let Err(_) =\n-                                    crate_graph.add_dep(from, dep.name.clone().into(), to)\n-                                {\n+                                if let Err(_) = crate_graph.add_dep(\n+                                    from,\n+                                    CrateName::new(&dep.name).unwrap(),\n+                                    to,\n+                                ) {\n                                     log::error!(\n                                         \"cyclic dependency {} -> {}\",\n                                         pkg.name(&cargo),"}]}