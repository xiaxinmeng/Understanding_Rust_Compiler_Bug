{"sha": "439080f0274cf4def3f393f466ceb05c8cb8bcd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTA4MGYwMjc0Y2Y0ZGVmM2YzOTNmNDY2Y2ViMDVjOGNiOGJjZDI=", "commit": {"author": {"name": "Paulo Lieuthier", "email": "paulolieuthier@gmail.com", "date": "2019-10-15T18:29:20Z"}, "committer": {"name": "Paulo Lieuthier", "email": "paulolieuthier@gmail.com", "date": "2019-11-28T19:56:06Z"}, "message": "assists: add assist for custom implementation for derived trait", "tree": {"sha": "8b81b33c7ebb16d674e4ceff44e9295dd45e166d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b81b33c7ebb16d674e4ceff44e9295dd45e166d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439080f0274cf4def3f393f466ceb05c8cb8bcd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439080f0274cf4def3f393f466ceb05c8cb8bcd2", "html_url": "https://github.com/rust-lang/rust/commit/439080f0274cf4def3f393f466ceb05c8cb8bcd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439080f0274cf4def3f393f466ceb05c8cb8bcd2/comments", "author": {"login": "paulolieuthier", "id": 1238157, "node_id": "MDQ6VXNlcjEyMzgxNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1238157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulolieuthier", "html_url": "https://github.com/paulolieuthier", "followers_url": "https://api.github.com/users/paulolieuthier/followers", "following_url": "https://api.github.com/users/paulolieuthier/following{/other_user}", "gists_url": "https://api.github.com/users/paulolieuthier/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulolieuthier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulolieuthier/subscriptions", "organizations_url": "https://api.github.com/users/paulolieuthier/orgs", "repos_url": "https://api.github.com/users/paulolieuthier/repos", "events_url": "https://api.github.com/users/paulolieuthier/events{/privacy}", "received_events_url": "https://api.github.com/users/paulolieuthier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulolieuthier", "id": 1238157, "node_id": "MDQ6VXNlcjEyMzgxNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1238157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulolieuthier", "html_url": "https://github.com/paulolieuthier", "followers_url": "https://api.github.com/users/paulolieuthier/followers", "following_url": "https://api.github.com/users/paulolieuthier/following{/other_user}", "gists_url": "https://api.github.com/users/paulolieuthier/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulolieuthier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulolieuthier/subscriptions", "organizations_url": "https://api.github.com/users/paulolieuthier/orgs", "repos_url": "https://api.github.com/users/paulolieuthier/repos", "events_url": "https://api.github.com/users/paulolieuthier/events{/privacy}", "received_events_url": "https://api.github.com/users/paulolieuthier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "922ec610d19aef7fb8b4df389ac318f4f2a0202c", "url": "https://api.github.com/repos/rust-lang/rust/commits/922ec610d19aef7fb8b4df389ac318f4f2a0202c", "html_url": "https://github.com/rust-lang/rust/commit/922ec610d19aef7fb8b4df389ac318f4f2a0202c"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "7e64cd90236af77534ce5ddb5c6fb03a126d3a3a", "filename": "crates/ra_assists/src/assists/add_custom_impl.rs", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/439080f0274cf4def3f393f466ceb05c8cb8bcd2/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439080f0274cf4def3f393f466ceb05c8cb8bcd2/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs?ref=439080f0274cf4def3f393f466ceb05c8cb8bcd2", "patch": "@@ -0,0 +1,189 @@\n+//! FIXME: write short doc here\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+use hir::db::HirDatabase;\n+use join_to_string::join;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    Direction, SmolStr,\n+    SyntaxKind::{IDENT, WHITESPACE},\n+    TextRange, TextUnit,\n+};\n+\n+const DERIVE_TRAIT: &'static str = \"derive\";\n+\n+pub(crate) fn add_custom_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let input = ctx.find_node_at_offset::<ast::AttrInput>()?;\n+    let attr = input.syntax().parent().and_then(ast::Attr::cast)?;\n+\n+    let attr_name = attr\n+        .syntax()\n+        .descendants_with_tokens()\n+        .filter(|t| t.kind() == IDENT)\n+        .find_map(|i| i.into_token())\n+        .filter(|t| *t.text() == DERIVE_TRAIT)?\n+        .text()\n+        .clone();\n+\n+    let trait_token =\n+        ctx.token_at_offset().filter(|t| t.kind() == IDENT && *t.text() != attr_name).next()?;\n+\n+    let annotated = attr.syntax().siblings(Direction::Next).find_map(|s| ast::Name::cast(s))?;\n+    let annotated_name = annotated.syntax().text().to_string();\n+    let start_offset = annotated.syntax().parent()?.text_range().end();\n+\n+    ctx.add_assist(AssistId(\"add_custom_impl\"), \"add custom impl\", |edit| {\n+        edit.target(attr.syntax().text_range());\n+\n+        let new_attr_input = input\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter(|t| t.kind() == IDENT)\n+            .filter_map(|t| t.into_token().map(|t| t.text().clone()))\n+            .filter(|t| t != trait_token.text())\n+            .collect::<Vec<SmolStr>>();\n+        let has_more_derives = new_attr_input.len() > 0;\n+        let new_attr_input =\n+            join(new_attr_input.iter()).separator(\", \").surround_with(\"(\", \")\").to_string();\n+        let new_attr_input_len = new_attr_input.len();\n+\n+        let mut buf = String::new();\n+        buf.push_str(\"\\n\\nimpl \");\n+        buf.push_str(trait_token.text().as_str());\n+        buf.push_str(\" for \");\n+        buf.push_str(annotated_name.as_str());\n+        buf.push_str(\" {\\n\");\n+\n+        let cursor_delta = if has_more_derives {\n+            edit.replace(input.syntax().text_range(), new_attr_input);\n+            input.syntax().text_range().len() - TextUnit::from_usize(new_attr_input_len)\n+        } else {\n+            let attr_range = attr.syntax().text_range();\n+            edit.delete(attr_range);\n+\n+            let line_break_range = attr\n+                .syntax()\n+                .next_sibling_or_token()\n+                .filter(|t| t.kind() == WHITESPACE)\n+                .map(|t| t.text_range())\n+                .unwrap_or(TextRange::from_to(TextUnit::from(0), TextUnit::from(0)));\n+            edit.delete(line_break_range);\n+\n+            attr_range.len() + line_break_range.len()\n+        };\n+\n+        edit.set_cursor(start_offset + TextUnit::of_str(&buf) - cursor_delta);\n+        buf.push_str(\"\\n}\");\n+        edit.insert(start_offset, buf);\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn add_custom_impl_for_unique_input() {\n+        check_assist(\n+            add_custom_impl,\n+            \"\n+#[derive(Debu<|>g)]\n+struct Foo {\n+    bar: String,\n+}\n+            \",\n+            \"\n+struct Foo {\n+    bar: String,\n+}\n+\n+impl Debug for Foo {\n+<|>\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_for_with_visibility_modifier() {\n+        check_assist(\n+            add_custom_impl,\n+            \"\n+#[derive(Debug<|>)]\n+pub struct Foo {\n+    bar: String,\n+}\n+            \",\n+            \"\n+pub struct Foo {\n+    bar: String,\n+}\n+\n+impl Debug for Foo {\n+<|>\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_when_multiple_inputs() {\n+        check_assist(\n+            add_custom_impl,\n+            \"\n+#[derive(Display, Debug<|>, Serialize)]\n+struct Foo {}\n+            \",\n+            \"\n+#[derive(Display, Serialize)]\n+struct Foo {}\n+\n+impl Debug for Foo {\n+<|>\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_derive_macro_without_input() {\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[derive(<|>)]\n+struct Foo {}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_if_cursor_on_param() {\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[derive<|>(Debug)]\n+struct Foo {}\n+            \",\n+        );\n+\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[derive(Debug)<|>]\n+struct Foo {}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_if_not_derive() {\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[allow(non_camel_<|>case_types)]\n+struct Foo {}\n+            \",\n+        )\n+    }\n+}"}, {"sha": "98fb20b227f98f0e4b32029ec4d7396a64872754", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439080f0274cf4def3f393f466ceb05c8cb8bcd2/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439080f0274cf4def3f393f466ceb05c8cb8bcd2/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=439080f0274cf4def3f393f466ceb05c8cb8bcd2", "patch": "@@ -95,6 +95,7 @@ mod assists {\n     mod add_derive;\n     mod add_explicit_type;\n     mod add_impl;\n+    mod add_custom_impl;\n     mod add_new;\n     mod apply_demorgan;\n     mod invert_if;\n@@ -121,6 +122,7 @@ mod assists {\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n             add_impl::add_impl,\n+            add_custom_impl::add_custom_impl,\n             add_new::add_new,\n             apply_demorgan::apply_demorgan,\n             invert_if::invert_if,"}]}