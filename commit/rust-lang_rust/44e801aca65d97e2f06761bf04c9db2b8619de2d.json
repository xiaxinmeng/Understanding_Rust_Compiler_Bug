{"sha": "44e801aca65d97e2f06761bf04c9db2b8619de2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZTgwMWFjYTY1ZDk3ZTJmMDY3NjFiZjA0YzlkYjJiODYxOWRlMmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-25T14:46:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-02T14:03:27Z"}, "message": "thread down the body so we can check if this is an async fn body", "tree": {"sha": "19e78160e64a0defa65cba4d602540840c319329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e78160e64a0defa65cba4d602540840c319329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e801aca65d97e2f06761bf04c9db2b8619de2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e801aca65d97e2f06761bf04c9db2b8619de2d", "html_url": "https://github.com/rust-lang/rust/commit/44e801aca65d97e2f06761bf04c9db2b8619de2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e801aca65d97e2f06761bf04c9db2b8619de2d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c845f3d0025809a8a27785a834398d138f92eac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c845f3d0025809a8a27785a834398d138f92eac9", "html_url": "https://github.com/rust-lang/rust/commit/c845f3d0025809a8a27785a834398d138f92eac9"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "cac94bec6428b332313a7e94652017cfbee82791", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44e801aca65d97e2f06761bf04c9db2b8619de2d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e801aca65d97e2f06761bf04c9db2b8619de2d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=44e801aca65d97e2f06761bf04c9db2b8619de2d", "patch": "@@ -337,7 +337,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         debug!(\"sig_of_closure_no_expectation()\");\n \n-        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n+        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl, body);\n \n         self.closure_sigs(expr_def_id, body, bound_sig)\n     }\n@@ -490,7 +490,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n-        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n+        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl, body);\n \n         debug!(\n             \"check_supplied_sig_against_expectation: supplied_sig={:?}\",\n@@ -591,14 +591,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n+        body: &hir::Body,\n     ) -> ty::PolyFnSig<'tcx> {\n         let astconv: &dyn AstConv<'_> = self;\n \n         // First, convert the types that the user supplied (if any).\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n         let supplied_return = match decl.output {\n             hir::Return(ref output) => astconv.ast_ty_to_ty(&output),\n-            hir::DefaultReturn(_) => astconv.ty_infer(None, decl.output.span()),\n+            hir::DefaultReturn(_) => match body.generator_kind {\n+                // In the case of the async block that we create for a function body,\n+                // we expect the return type of the block to match that of the enclosing\n+                // function.\n+                Some(hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn)) => {\n+                    debug!(\"supplied_sig_of_closure: closure is async fn body\");\n+\n+                    // FIXME\n+                    astconv.ty_infer(None, decl.output.span())\n+                }\n+\n+                _ => astconv.ty_infer(None, decl.output.span()),\n+            }\n         };\n \n         let result = ty::Binder::bind(self.tcx.mk_fn_sig("}]}