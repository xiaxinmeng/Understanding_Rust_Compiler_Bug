{"sha": "91bd3337e32a70c55dd5226c5310dd766f78ada4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYmQzMzM3ZTMyYTcwYzU1ZGQ1MjI2YzUzMTBkZDc2NmY3OGFkYTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-20T14:39:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T14:39:53Z"}, "message": "Rollup merge of #73404 - ajpaverd:cfguard_syntax, r=Mark-Simulacrum\n\nUpdate CFGuard syntax\n\nUpdate the naming and syntax of the control-flow-guard option, as discussed in #68793.\n\nr? @Mark-Simulacrum", "tree": {"sha": "3b985cce2784437ec9caed036d0415cefeffec42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b985cce2784437ec9caed036d0415cefeffec42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91bd3337e32a70c55dd5226c5310dd766f78ada4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7h+5CRBK7hj4Ov3rIwAAdHIIAH/9b9JRXiaKLrleC2lmpzXJ\n575Sn7kx5xik0WXv+RuqSAwO0rfqc98ffOIJm7dTlL/vOudBQ0aSdnDqujZBx9zf\nDrofDzaTNBSgjR3Hlci7de9QfopdSeq6eHrQ5ohs3cyAuuuoddoErFTfMiALmyed\nrAQybkYZELX/KKHYyUexJYVGkq1jXJ7bs2ByPao/7tbTaV/4b6RpToMYrUtglEXZ\nkxp2k0Nqi10u7a+zo8iNfss3hzScyFiCG3FPfWiPCl7TVDBWsub64Ea2EsMIaC1u\nD3UakJLC6xZwFdxjgSMQPO8ySw4roC9zeYzd0x7xTia7JNF+GrC7o0hXqOnvA5A=\n=vvvQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b985cce2784437ec9caed036d0415cefeffec42\nparent 77efcab0f2badb39ba4605ae40337e7bda51fa81\nparent 83e6c0e98657d8df3dd4f45fa22baadcac986402\nauthor Ralf Jung <post@ralfj.de> 1592663993 +0200\ncommitter GitHub <noreply@github.com> 1592663993 +0200\n\nRollup merge of #73404 - ajpaverd:cfguard_syntax, r=Mark-Simulacrum\n\nUpdate CFGuard syntax\n\nUpdate the naming and syntax of the control-flow-guard option, as discussed in #68793.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91bd3337e32a70c55dd5226c5310dd766f78ada4", "html_url": "https://github.com/rust-lang/rust/commit/91bd3337e32a70c55dd5226c5310dd766f78ada4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91bd3337e32a70c55dd5226c5310dd766f78ada4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77efcab0f2badb39ba4605ae40337e7bda51fa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/77efcab0f2badb39ba4605ae40337e7bda51fa81", "html_url": "https://github.com/rust-lang/rust/commit/77efcab0f2badb39ba4605ae40337e7bda51fa81"}, {"sha": "83e6c0e98657d8df3dd4f45fa22baadcac986402", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e6c0e98657d8df3dd4f45fa22baadcac986402", "html_url": "https://github.com/rust-lang/rust/commit/83e6c0e98657d8df3dd4f45fa22baadcac986402"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "8f0a245a5658a5f3ea7b2d0438e9d2b045ca9536", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -1206,7 +1206,7 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n-        // If Control Flow Guard is enabled, pass the `control_flow_guard=checks` flag to rustc\n+        // If Control Flow Guard is enabled, pass the `control-flow-guard` flag to rustc\n         // when compiling the standard library, since this might be linked into the final outputs\n         // produced by rustc. Since this mitigation is only available on Windows, only enable it\n         // for the standard library in case the compiler is run on a non-Windows platform.\n@@ -1217,7 +1217,7 @@ impl<'a> Builder<'a> {\n             && self.config.control_flow_guard\n             && compiler.stage >= 1\n         {\n-            rustflags.arg(\"-Zcontrol_flow_guard=checks\");\n+            rustflags.arg(\"-Zcontrol-flow-guard\");\n         }\n \n         // For `cargo doc` invocations, make rustdoc print the Rust version into the docs"}, {"sha": "4115825e920838947ab4dee93124a1811980daaf", "filename": "src/doc/unstable-book/src/compiler-flags/control-flow-guard.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -1,10 +1,10 @@\n-# `control_flow_guard`\n+# `control-flow-guard`\n \n The tracking issue for this feature is: [#68793](https://github.com/rust-lang/rust/issues/68793).\n \n ------------------------\n \n-The rustc flag `-Z control_flow_guard=checks` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n+The rustc flag `-Z control-flow-guard` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n \n CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported Windows platforms (Windows 8.1 onwards). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete. \n \n@@ -29,7 +29,7 @@ The CFG checks and metadata can potentially increase binary size and runtime ove\n \n ## Testing Control Flow Guard\n \n-The rustc flag `-Z control_flow_guard=nochecks` instructs LLVM to emit the list of valid call targets without inserting runtime checks. This flag should only be used for testing purposes as it does not provide security enforcement.\n+The rustc flag `-Z control-flow-guard=nochecks` instructs LLVM to emit the list of valid call targets without inserting runtime checks. This flag should only be used for testing purposes as it does not provide security enforcement.\n \n \n ## Control Flow Guard in libraries\n@@ -44,14 +44,14 @@ For example:\n ```cmd\n rustup toolchain install --force nightly\n rustup component add rust-src\n-SET RUSTFLAGS=-Z control_flow_guard=checks\n+SET RUSTFLAGS=-Z control-flow-guard\n cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n ```\n \n ```PowerShell\n rustup toolchain install --force nightly\n rustup component add rust-src\n-$Env:RUSTFLAGS = \"-Z control_flow_guard=checks\"\n+$Env:RUSTFLAGS = \"-Z control-flow-guard\"\n cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n ```\n "}, {"sha": "d861b444c88164e5486c23da571c51ef91a4f77a", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -465,7 +465,6 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(ast_json_noexpand, true);\n     untracked!(borrowck, String::from(\"other\"));\n     untracked!(borrowck_stats, true);\n-    untracked!(control_flow_guard, CFGuard::Checks);\n     untracked!(deduplicate_diagnostics, true);\n     untracked!(dep_tasks, true);\n     untracked!(dont_buffer_diagnostics, true);\n@@ -539,6 +538,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(binary_dep_depinfo, true);\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n+    tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);"}, {"sha": "f77bf5ddefd3f430904812ed30864a9908df6d4e", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -103,7 +103,7 @@ pub enum Strip {\n     Symbols,\n }\n \n-/// The different settings that the `-Z control_flow_guard` flag can have.\n+/// The different settings that the `-Z control-flow-guard` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum CFGuard {\n     /// Do not emit Control Flow Guard metadata or checks."}, {"sha": "6c6f27502b6142d6b8cbc7fabbe501af634d3019", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -250,7 +250,8 @@ macro_rules! options {\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n         pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n-        pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n+        pub const parse_cfguard: &str =\n+            \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n         pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n         pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n         pub const parse_optimization_fuel: &str = \"crate=integer\";\n@@ -495,12 +496,24 @@ macro_rules! options {\n         }\n \n         fn parse_cfguard(slot: &mut CFGuard, v: Option<&str>) -> bool {\n-            match v {\n-                Some(\"disabled\") => *slot = CFGuard::Disabled,\n-                Some(\"nochecks\") => *slot = CFGuard::NoChecks,\n-                Some(\"checks\") => *slot = CFGuard::Checks,\n-                _ => return false,\n+            if v.is_some() {\n+                let mut bool_arg = None;\n+                if parse_opt_bool(&mut bool_arg, v) {\n+                    *slot = if bool_arg.unwrap() {\n+                        CFGuard::Checks\n+                    } else {\n+                        CFGuard::Disabled\n+                    };\n+                    return true\n+                }\n             }\n+\n+            *slot = match v {\n+                None => CFGuard::Checks,\n+                Some(\"checks\") => CFGuard::Checks,\n+                Some(\"nochecks\") => CFGuard::NoChecks,\n+                Some(_) => return false,\n+            };\n             true\n         }\n \n@@ -796,8 +809,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable the experimental Chalk-based trait solving engine\"),\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n-    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n-        \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n+    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n+        \"use Windows Control Flow Guard (default: no)\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],"}, {"sha": "96f9158f9d39498b17a23d3445c326822e2bb8b4", "filename": "src/test/codegen/cfguard_checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control_flow_guard=checks\n+// compile-flags: -Z control-flow-guard=checks\n \n #![crate_type = \"lib\"]\n "}, {"sha": "1325ffc0f2595d3b76505cdb40daebf94ba77318", "filename": "src/test/codegen/cfguard_disabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control_flow_guard=disabled\n+// compile-flags: -Z control-flow-guard=no\n \n #![crate_type = \"lib\"]\n "}, {"sha": "ae1de4c4d26d543b6f6c7a1a309a9f04bf14064d", "filename": "src/test/codegen/cfguard_nochecks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd3337e32a70c55dd5226c5310dd766f78ada4/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs?ref=91bd3337e32a70c55dd5226c5310dd766f78ada4", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control_flow_guard=nochecks\n+// compile-flags: -Z control-flow-guard=nochecks\n \n #![crate_type = \"lib\"]\n "}]}