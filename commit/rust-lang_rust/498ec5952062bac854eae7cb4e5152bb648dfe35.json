{"sha": "498ec5952062bac854eae7cb4e5152bb648dfe35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OGVjNTk1MjA2MmJhYzg1NGVhZTdjYjRlNTE1MmJiNjQ4ZGZlMzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-01T15:36:04Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "resolve: add tests for already-bound check.", "tree": {"sha": "41a3a93eee737891a8c48630642b224dd68b9ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41a3a93eee737891a8c48630642b224dd68b9ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498ec5952062bac854eae7cb4e5152bb648dfe35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498ec5952062bac854eae7cb4e5152bb648dfe35", "html_url": "https://github.com/rust-lang/rust/commit/498ec5952062bac854eae7cb4e5152bb648dfe35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498ec5952062bac854eae7cb4e5152bb648dfe35/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166a558da6793a040657efdcb5fad13cedc6ea15", "url": "https://api.github.com/repos/rust-lang/rust/commits/166a558da6793a040657efdcb5fad13cedc6ea15", "html_url": "https://github.com/rust-lang/rust/commit/166a558da6793a040657efdcb5fad13cedc6ea15"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "67e1fffdb0bcc2c8049abe52d200720252af7306", "filename": "src/test/ui/or-patterns/already-bound-name.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/498ec5952062bac854eae7cb4e5152bb648dfe35/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498ec5952062bac854eae7cb4e5152bb648dfe35/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.rs?ref=498ec5952062bac854eae7cb4e5152bb648dfe35", "patch": "@@ -0,0 +1,45 @@\n+// This test ensures that the \"already bound identifier in a product pattern\"\n+// correctly accounts for or-patterns.\n+\n+#![allow(warnings)]\n+#![feature(or_patterns)]\n+\n+enum E<T> { A(T, T), B(T) }\n+\n+use E::*;\n+\n+fn main() {\n+    let (a, a) = (0, 1); // Standard duplication without an or-pattern.\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+\n+    let (a, A(a, _) | B(a)) = (0, A(1, 2));\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR identifier `a` is bound more than once in the same pattern\n+\n+    let (A(a, _) | B(a), a) = (A(0, 1), 2);\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+\n+    let A(a, a) | B(a) = A(0, 1);\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+\n+    let B(a) | A(a, a) = A(0, 1);\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+\n+    match A(0, 1) {\n+        B(a) | A(a, a) => {} // Let's ensure `match` has no funny business.\n+        //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    }\n+\n+    let B(A(a, _) | B(a)) | A(a, A(a, _) | B(a)) = B(B(1));\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR mismatched types\n+\n+    let B(_) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR identifier `a` is bound more than once in the same pattern\n+\n+    let B(A(a, _) | B(a)) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n+    //~^ ERROR identifier `a` is bound more than once in the same pattern\n+    //~| ERROR identifier `a` is bound more than once in the same pattern\n+}"}, {"sha": "1f8eccec9dbdd80d526ab7fdf9971c3ad75aa96c", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/498ec5952062bac854eae7cb4e5152bb648dfe35/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/498ec5952062bac854eae7cb4e5152bb648dfe35/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=498ec5952062bac854eae7cb4e5152bb648dfe35", "patch": "@@ -0,0 +1,91 @@\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:12:13\n+   |\n+LL |     let (a, a) = (0, 1); // Standard duplication without an or-pattern.\n+   |             ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:15:15\n+   |\n+LL |     let (a, A(a, _) | B(a)) = (0, A(1, 2));\n+   |               ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:15:25\n+   |\n+LL |     let (a, A(a, _) | B(a)) = (0, A(1, 2));\n+   |                         ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:19:26\n+   |\n+LL |     let (A(a, _) | B(a), a) = (A(0, 1), 2);\n+   |                          ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:22:14\n+   |\n+LL |     let A(a, a) | B(a) = A(0, 1);\n+   |              ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:25:21\n+   |\n+LL |     let B(a) | A(a, a) = A(0, 1);\n+   |                     ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:29:21\n+   |\n+LL |         B(a) | A(a, a) => {} // Let's ensure `match` has no funny business.\n+   |                     ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:33:36\n+   |\n+LL |     let B(A(a, _) | B(a)) | A(a, A(a, _) | B(a)) = B(B(1));\n+   |                                    ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:33:46\n+   |\n+LL |     let B(A(a, _) | B(a)) | A(a, A(a, _) | B(a)) = B(B(1));\n+   |                                              ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:38:36\n+   |\n+LL |     let B(_) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n+   |                                    ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:38:46\n+   |\n+LL |     let B(_) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n+   |                                              ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:42:49\n+   |\n+LL |     let B(A(a, _) | B(a)) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n+   |                                                 ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/already-bound-name.rs:42:59\n+   |\n+LL |     let B(A(a, _) | B(a)) | A(A(a, _) | B(a), A(a, _) | B(a)) = B(B(1));\n+   |                                                           ^ used in a pattern more than once\n+\n+error[E0308]: mismatched types\n+  --> $DIR/already-bound-name.rs:33:31\n+   |\n+LL |     let B(A(a, _) | B(a)) | A(a, A(a, _) | B(a)) = B(B(1));\n+   |                               ^ expected integer, found enum `E`\n+   |\n+   = note: expected type `{integer}`\n+              found type `E<{integer}>`\n+\n+error: aborting due to 14 previous errors\n+\n+Some errors have detailed explanations: E0308, E0416.\n+For more information about an error, try `rustc --explain E0308`."}]}