{"sha": "326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "node_id": "C_kwDOAAsO6NoAKDMyNmZmZWU1YjcxZTAxMTNiZTIwZmMzYjNiMmFlZmJkNGNkM2I2ZDk", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2022-08-06T20:48:52Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2022-08-06T20:53:23Z"}, "message": "Returns the old value for la_arena::ArenaMap::insert", "tree": {"sha": "d2d7f49bd67b0ced5dbdc0426d0cba2a2ddae632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d7f49bd67b0ced5dbdc0426d0cba2a2ddae632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "html_url": "https://github.com/rust-lang/rust/commit/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a94193602e65c99344ba313c71d4298b0d4c0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a94193602e65c99344ba313c71d4298b0d4c0cc", "html_url": "https://github.com/rust-lang/rust/commit/1a94193602e65c99344ba313c71d4298b0d4c0cc"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "469b28c2d9ede6a8edc9904792215579df6285af", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "patch": "@@ -451,7 +451,7 @@ impl HasChildSource<LocalTypeOrConstParamId> for GenericDefId {\n         if let GenericDefId::TraitId(id) = *self {\n             let trait_ref = id.lookup(db).source(db).value;\n             let idx = idx_iter.next().unwrap();\n-            params.insert(idx, Either::Right(trait_ref))\n+            params.insert(idx, Either::Right(trait_ref));\n         }\n \n         if let Some(generic_params_list) = generic_params_list {"}, {"sha": "087268a9ecee4f2c3cac07835bb92b13277d7b0e", "filename": "crates/hir-def/src/visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fvisibility.rs?ref=326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "patch": "@@ -224,7 +224,7 @@ pub(crate) fn field_visibilities_query(\n     let resolver = variant_id.module(db).resolver(db);\n     let mut res = ArenaMap::default();\n     for (field_id, field_data) in var_data.fields().iter() {\n-        res.insert(field_id, field_data.visibility.resolve(db, &resolver))\n+        res.insert(field_id, field_data.visibility.resolve(db, &resolver));\n     }\n     Arc::new(res)\n }"}, {"sha": "239f66bcb7e798f813a0e2d9206f78897a1d0c95", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "patch": "@@ -1126,7 +1126,7 @@ pub(crate) fn field_types_query(\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(ParamLoweringMode::Variable);\n     for (field_id, field_data) in var_data.fields().iter() {\n-        res.insert(field_id, make_binders(db, &generics, ctx.lower_ty(&field_data.type_ref)))\n+        res.insert(field_id, make_binders(db, &generics, ctx.lower_ty(&field_data.type_ref)));\n     }\n     Arc::new(res)\n }"}, {"sha": "5f347e274500eefe7b5fcf0cda0b5d281cf8c040", "filename": "lib/la-arena/src/map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/lib%2Fla-arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9/lib%2Fla-arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Fmap.rs?ref=326ffee5b71e0113be20fc3b3b2aefbd4cd3b6d9", "patch": "@@ -49,11 +49,14 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n     }\n \n     /// Inserts a value associated with a given arena index into the map.\n-    pub fn insert(&mut self, idx: Idx<T>, t: V) {\n+    ///\n+    /// If the map did not have this index present, None is returned.\n+    /// Otherwise, the value is updated, and the old value is returned.\n+    pub fn insert(&mut self, idx: Idx<T>, t: V) -> Option<V> {\n         let idx = Self::to_idx(idx);\n \n         self.v.resize_with((idx + 1).max(self.v.len()), || None);\n-        self.v[idx] = Some(t);\n+        self.v[idx].replace(t)\n     }\n \n     /// Returns a reference to the value associated with the provided index"}]}