{"sha": "c5dfd34c615b0586a101e9e66770a5c4fd31c852", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZGZkMzRjNjE1YjA1ODZhMTAxZTllNjY3NzBhNWM0ZmQzMWM4NTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-06-23T09:43:27Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-06-24T10:25:40Z"}, "message": "Added unit test for code indent of multi-line errors", "tree": {"sha": "3b70b0cc38d614ca0eae3b15e489fa07eaa26b0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b70b0cc38d614ca0eae3b15e489fa07eaa26b0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5dfd34c615b0586a101e9e66770a5c4fd31c852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dfd34c615b0586a101e9e66770a5c4fd31c852", "html_url": "https://github.com/rust-lang/rust/commit/c5dfd34c615b0586a101e9e66770a5c4fd31c852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5dfd34c615b0586a101e9e66770a5c4fd31c852/comments", "author": null, "committer": null, "parents": [{"sha": "599bf45ac9afc309332388fe4bc42a100e3d1586", "url": "https://api.github.com/repos/rust-lang/rust/commits/599bf45ac9afc309332388fe4bc42a100e3d1586", "html_url": "https://github.com/rust-lang/rust/commit/599bf45ac9afc309332388fe4bc42a100e3d1586"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "ec93d2c55362762ef3a004dd260fb0470e2be298", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c5dfd34c615b0586a101e9e66770a5c4fd31c852/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dfd34c615b0586a101e9e66770a5c4fd31c852/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=c5dfd34c615b0586a101e9e66770a5c4fd31c852", "patch": "@@ -598,7 +598,11 @@ fn highlight_lines(err: &mut EmitterWriter,\n     assert!(display_line_infos.len() > 0);\n     let mut max_line_num = display_line_infos[display_line_infos.len() - 1].line_index + 1;\n     let mut digits = 0;\n-    while max_line_num > 0 { max_line_num /= 10; digits += 1; }\n+    while max_line_num > 0 {\n+        max_line_num /= 10;\n+        digits += 1;\n+    }\n+\n     // Print the offending lines\n     for (line_info, line) in display_line_infos.iter().zip(display_line_strings) {\n         try!(write!(&mut err.dst, \"{}:{:>width$} {}\\n\",\n@@ -801,3 +805,64 @@ pub fn expect<T, M>(diag: &SpanHandler, opt: Option<T>, msg: M) -> T where\n         None => diag.handler().bug(&msg()),\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{EmitterWriter, highlight_lines, Level};\n+    use codemap::{mk_sp, CodeMap, BytePos};\n+    use std::sync::{Arc, Mutex};\n+    use std::io::{self, Write};\n+    use std::str::from_utf8;\n+\n+    // Diagnostic doesn't align properly in span where line number increases by one digit\n+    #[test]\n+    fn test_hilight_suggestion_issue_11715() {\n+        struct Sink(Arc<Mutex<Vec<u8>>>);\n+        impl Write for Sink {\n+            fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n+                Write::write(&mut *self.0.lock().unwrap(), data)\n+            }\n+            fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+        }\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())), None);\n+        let cm = CodeMap::new();\n+        let content = \"abcdefg\n+        koksi\n+        line3\n+        line4\n+        cinq\n+        line6\n+        line7\n+        line8\n+        line9\n+        line10\n+        e-l\u00e4-v\u00e4n\n+        tolv\n+        dreizehn\n+        \";\n+        let file = cm.new_filemap(\"dummy.txt\".to_string(), content.to_string());\n+        for (i, b) in content.bytes().enumerate() {\n+            if b == b'\\n' {\n+                file.next_line(BytePos(i as u32));\n+            }\n+        }\n+        let start = file.lines.borrow()[7];\n+        let end = file.lines.borrow()[11];\n+        let sp = mk_sp(start, end);\n+        let lvl = Level::Error;\n+        println!(\"span_to_lines\");\n+        let lines = cm.span_to_lines(sp);\n+        println!(\"highlight_lines\");\n+        highlight_lines(&mut ew, &cm, sp, lvl, lines).unwrap();\n+        println!(\"done\");\n+        let vec = data.lock().unwrap().clone();\n+        let vec: &[u8] = &vec;\n+        println!(\"{}\", from_utf8(vec).unwrap());\n+        assert_eq!(vec, \"dummy.txt: 8 \\n\\\n+                         dummy.txt: 9 \\n\\\n+                         dummy.txt:10 \\n\\\n+                         dummy.txt:11 \\n\\\n+                         dummy.txt:12 \\n\".as_bytes());\n+    }\n+}"}]}