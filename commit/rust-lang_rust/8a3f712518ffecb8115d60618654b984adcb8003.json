{"sha": "8a3f712518ffecb8115d60618654b984adcb8003", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhM2Y3MTI1MThmZmVjYjgxMTVkNjA2MTg2NTRiOTg0YWRjYjgwMDM=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-07T11:19:57Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-16T12:12:27Z"}, "message": "Refactor `FulfillmentError` to track less data\n\nMove the information about pointing at the call argument expression in\nan unmet obligation span from the `FulfillmentError` to a new\n`ObligationCauseCode`.", "tree": {"sha": "06b5eea3afa6835e3c7580ff1938b16e2557b164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b5eea3afa6835e3c7580ff1938b16e2557b164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3f712518ffecb8115d60618654b984adcb8003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3f712518ffecb8115d60618654b984adcb8003", "html_url": "https://github.com/rust-lang/rust/commit/8a3f712518ffecb8115d60618654b984adcb8003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3f712518ffecb8115d60618654b984adcb8003/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284a8a9ce7dd1a1d83d461f442435182547e6e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/284a8a9ce7dd1a1d83d461f442435182547e6e67", "html_url": "https://github.com/rust-lang/rust/commit/284a8a9ce7dd1a1d83d461f442435182547e6e67"}], "stats": {"total": 143, "additions": 86, "deletions": 57}, "files": [{"sha": "41c004ea59608e75426422d2000a202e9906ce5e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -1998,7 +1998,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     &obligation,\n                                     &traits::SelectionError::Unimplemented,\n                                     false,\n-                                    false,\n                                 );\n                             }\n                         }"}, {"sha": "593d06bad7b02bf14adcde627327710befd841b6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -29,7 +29,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             SubregionOrigin::Subtype(box TypeTrace { ref cause, .. }) => cause,\n             _ => return None,\n         };\n-        let (parent, impl_def_id) = match &cause.code {\n+        // If we added a \"points at argument expression\" obligation, we remove it here, we care\n+        // about the original obligation only.\n+        let code = match &cause.code {\n+            ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } => &*parent_code,\n+            _ => &cause.code,\n+        };\n+        let (parent, impl_def_id) = match code {\n             ObligationCauseCode::MatchImpl(parent, impl_def_id) => (parent, impl_def_id),\n             _ => return None,\n         };"}, {"sha": "e1d6982f164448c1f279779e78a2dc55960917ce", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -66,10 +66,6 @@ pub type Selection<'tcx> = ImplSource<'tcx, PredicateObligation<'tcx>>;\n pub struct FulfillmentError<'tcx> {\n     pub obligation: PredicateObligation<'tcx>,\n     pub code: FulfillmentErrorCode<'tcx>,\n-    /// Diagnostics only: we opportunistically change the `code.span` when we encounter an\n-    /// obligation error caused by a call argument. When this is the case, we also signal that in\n-    /// this field to ensure accuracy of suggestions.\n-    pub points_at_arg_span: bool,\n     /// Diagnostics only: the 'root' obligation which resulted in\n     /// the failure to process `obligation`. This is the obligation\n     /// that was initially passed to `register_predicate_obligation`\n@@ -128,7 +124,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n         code: FulfillmentErrorCode<'tcx>,\n         root_obligation: PredicateObligation<'tcx>,\n     ) -> FulfillmentError<'tcx> {\n-        FulfillmentError { obligation, code, points_at_arg_span: false, root_obligation }\n+        FulfillmentError { obligation, code, root_obligation }\n     }\n }\n "}, {"sha": "f63e9a087d973f9c7f589d03a565620afe696ccd", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -253,6 +253,15 @@ pub enum ObligationCauseCode<'tcx> {\n \n     DerivedObligation(DerivedObligationCause<'tcx>),\n \n+    FunctionArgumentObligation {\n+        /// The node of the relevant argument in the function call.\n+        arg_hir_id: hir::HirId,\n+        /// The node of the function call.\n+        call_hir_id: hir::HirId,\n+        /// The obligation introduced by this argument.\n+        parent_code: Lrc<ObligationCauseCode<'tcx>>,\n+    },\n+\n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplConstObligation,\n \n@@ -368,11 +377,12 @@ impl ObligationCauseCode<'_> {\n     // Return the base obligation, ignoring derived obligations.\n     pub fn peel_derives(&self) -> &Self {\n         let mut base_cause = self;\n-        while let BuiltinDerivedObligation(cause)\n-        | ImplDerivedObligation(cause)\n-        | DerivedObligation(cause) = base_cause\n+        while let BuiltinDerivedObligation(DerivedObligationCause { parent_code, .. })\n+        | ImplDerivedObligation(DerivedObligationCause { parent_code, .. })\n+        | DerivedObligation(DerivedObligationCause { parent_code, .. })\n+        | FunctionArgumentObligation { parent_code, .. } = base_cause\n         {\n-            base_cause = &cause.parent_code;\n+            base_cause = &parent_code;\n         }\n         base_cause\n     }"}, {"sha": "9c962d30ce0e8b8a575627173b019c993dee5b16", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -57,7 +57,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                 .map(|obligation| FulfillmentError {\n                     obligation: obligation.clone(),\n                     code: FulfillmentErrorCode::CodeAmbiguity,\n-                    points_at_arg_span: false,\n                     // FIXME - does Chalk have a notation of 'root obligation'?\n                     // This is just for diagnostics, so it's okay if this is wrong\n                     root_obligation: obligation.clone(),\n@@ -112,7 +111,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                                     code: FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented,\n                                     ),\n-                                    points_at_arg_span: false,\n                                     // FIXME - does Chalk have a notation of 'root obligation'?\n                                     // This is just for diagnostics, so it's okay if this is wrong\n                                     root_obligation: obligation,\n@@ -129,7 +127,6 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                         code: FulfillmentErrorCode::CodeSelectionError(\n                             SelectionError::Unimplemented,\n                         ),\n-                        points_at_arg_span: false,\n                         // FIXME - does Chalk have a notation of 'root obligation'?\n                         // This is just for diagnostics, so it's okay if this is wrong\n                         root_obligation: obligation,"}, {"sha": "8c9acd3ba73e7ce60bd3376ac93136fdfd284f9c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -66,7 +66,6 @@ pub trait InferCtxtExt<'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n-        points_at_arg: bool,\n     );\n \n     /// Given some node representing a fn-like thing in the HIR map,\n@@ -237,7 +236,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n-        points_at_arg: bool,\n     ) {\n         let tcx = self.tcx;\n         let mut span = obligation.cause.span;\n@@ -387,7 +385,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             &obligation,\n                             &mut err,\n                             &trait_ref,\n-                            points_at_arg,\n                             have_alt_message,\n                         ) {\n                             self.note_obligation_cause(&mut err, &obligation);\n@@ -430,8 +427,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(enclosing_scope_span, s.as_str());\n                         }\n \n-                        self.suggest_dereferences(&obligation, &mut err, trait_ref, points_at_arg);\n-                        self.suggest_fn_call(&obligation, &mut err, trait_ref, points_at_arg);\n+                        self.suggest_dereferences(&obligation, &mut err, trait_ref);\n+                        self.suggest_fn_call(&obligation, &mut err, trait_ref);\n                         self.suggest_remove_reference(&obligation, &mut err, trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n@@ -500,12 +497,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // Changing mutability doesn't make a difference to whether we have\n                         // an `Unsize` impl (Fixes ICE in #71036)\n                         if !is_unsize {\n-                            self.suggest_change_mut(\n-                                &obligation,\n-                                &mut err,\n-                                trait_ref,\n-                                points_at_arg,\n-                            );\n+                            self.suggest_change_mut(&obligation, &mut err, trait_ref);\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is\n@@ -1214,7 +1206,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     &error.root_obligation,\n                     selection_error,\n                     fallback_has_occurred,\n-                    error.points_at_arg_span,\n                 );\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {"}, {"sha": "3116d5cb1fab1c5b74bd7e3b1d29c8a8aed9e7b4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -54,7 +54,6 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        points_at_arg: bool,\n     );\n \n     fn get_closure_name(\n@@ -69,15 +68,13 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     );\n \n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool;\n \n@@ -93,7 +90,6 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     );\n \n     fn suggest_semicolon_removal(\n@@ -490,16 +486,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        points_at_arg: bool,\n     ) {\n         // It only make sense when suggesting dereferences for arguments\n-        if !points_at_arg {\n+        let code = if let ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } =\n+            &obligation.cause.code\n+        {\n+            std::rc::Rc::clone(parent_code)\n+        } else {\n             return;\n-        }\n+        };\n         let param_env = obligation.param_env;\n         let body_id = obligation.cause.body_id;\n         let span = obligation.cause.span;\n-        let real_trait_ref = match &obligation.cause.code {\n+        let real_trait_ref = match &*code {\n             ObligationCauseCode::ImplDerivedObligation(cause)\n             | ObligationCauseCode::DerivedObligation(cause)\n             | ObligationCauseCode::BuiltinDerivedObligation(cause) => cause.parent_trait_ref,\n@@ -584,7 +583,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     ) {\n         let self_ty = match trait_ref.self_ty().no_bound_vars() {\n             None => return,\n@@ -656,11 +654,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             _ => return,\n         };\n-        if points_at_arg {\n+        if matches!(obligation.cause.code, ObligationCauseCode::FunctionArgumentObligation { .. }) {\n             // When the obligation error has been ensured to have been caused by\n             // an argument, the `obligation.cause.span` points at the expression\n-            // of the argument, so we can provide a suggestion. This is signaled\n-            // by `points_at_arg`. Otherwise, we give a more general note.\n+            // of the argument, so we can provide a suggestion. Otherwise, we give\n+            // a more general note.\n             err.span_suggestion_verbose(\n                 obligation.cause.span.shrink_to_hi(),\n                 &msg,\n@@ -677,7 +675,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool {\n         let span = obligation.cause.span;\n@@ -686,9 +683,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n         );\n \n-        if !points_at_arg && !points_at_for_iter {\n-            return false;\n-        }\n+        let code =\n+            if let (ObligationCauseCode::FunctionArgumentObligation { parent_code, .. }, false) =\n+                (&obligation.cause.code, points_at_for_iter)\n+            {\n+                std::rc::Rc::clone(parent_code)\n+            } else {\n+                return false;\n+            };\n \n         // List of traits for which it would be nonsensical to suggest borrowing.\n         // For instance, immutable references are always Copy, so suggesting to\n@@ -787,7 +789,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return false;\n         };\n \n-        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &obligation.cause.code {\n+        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &*code {\n             let expected_trait_ref = obligation.parent_trait_ref.skip_binder();\n             let new_imm_trait_ref =\n                 ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs);\n@@ -799,7 +801,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return try_borrowing(new_mut_trait_ref, expected_trait_ref, true, &[]);\n             }\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n-        | ObligationCauseCode::ItemObligation(_) = &obligation.cause.code\n+        | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n             if try_borrowing(\n                 ty::TraitRef::new(trait_ref.def_id, imm_substs),\n@@ -891,8 +893,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-        points_at_arg: bool,\n     ) {\n+        let points_at_arg = matches!(\n+            obligation.cause.code,\n+            ObligationCauseCode::FunctionArgumentObligation { .. },\n+        );\n+\n         let span = obligation.cause.span;\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n@@ -2289,6 +2295,21 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     )\n                 });\n             }\n+            ObligationCauseCode::FunctionArgumentObligation {\n+                arg_hir_id: _,\n+                call_hir_id: _,\n+                ref parent_code,\n+            } => {\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        predicate,\n+                        &parent_code,\n+                        obligated_types,\n+                        seen_requirements,\n+                    )\n+                });\n+            }\n             ObligationCauseCode::CompareImplMethodObligation {\n                 item_name,\n                 trait_item_def_id,"}, {"sha": "013aecae586ca93369917a4e7008377de62e4dbb", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -707,13 +707,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.report_selection_error(\n-                        obligation.clone(),\n-                        &obligation,\n-                        &err,\n-                        false,\n-                        false,\n-                    );\n+                    self.report_selection_error(obligation.clone(), &obligation, &err, false);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "9cf00bad10b7a0ea9d0616da101a5c4bd1a4b7e5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -9,6 +9,7 @@ use crate::check::{\n };\n \n use rustc_ast as ast;\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -324,6 +325,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.point_at_arg_instead_of_call_if_possible(\n                         errors,\n                         &final_arg_types[..],\n+                        expr,\n                         sp,\n                         &args,\n                     );\n@@ -391,7 +393,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ) {\n                             for error in errors {\n                                 error.obligation.cause.make_mut().span = arg.span;\n-                                error.points_at_arg_span = true;\n+                                let code = error.obligation.cause.code.clone();\n+                                error.obligation.cause.make_mut().code =\n+                                    ObligationCauseCode::FunctionArgumentObligation {\n+                                        arg_hir_id: arg.hir_id,\n+                                        call_hir_id: expr.hir_id,\n+                                        parent_code: Lrc::new(code),\n+                                    };\n                             }\n                         }\n                     },\n@@ -937,6 +945,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n         final_arg_types: &[(usize, Ty<'tcx>, Ty<'tcx>)],\n+        expr: &'tcx hir::Expr<'tcx>,\n         call_sp: Span,\n         args: &'tcx [hir::Expr<'tcx>],\n     ) {\n@@ -986,7 +995,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We make sure that only *one* argument matches the obligation failure\n                     // and we assign the obligation's span to its expression's.\n                     error.obligation.cause.make_mut().span = args[ref_in].span;\n-                    error.points_at_arg_span = true;\n+                    let code = error.obligation.cause.code.clone();\n+                    error.obligation.cause.make_mut().code =\n+                        ObligationCauseCode::FunctionArgumentObligation {\n+                            arg_hir_id: args[ref_in].hir_id,\n+                            call_hir_id: expr.hir_id,\n+                            parent_code: Lrc::new(code),\n+                        };\n                 }\n             }\n         }"}, {"sha": "6b210ed9970b7c6def56e5740e28d698d7796daa", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -43,7 +43,7 @@ error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n LL |     is_send((8, TestType));\n    |             ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n    |\n-   = help: within `({integer}, dummy1c::TestType)`, the trait `Send` is not implemented for `dummy1c::TestType`\n+   = help: the trait `Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n@@ -75,7 +75,7 @@ error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n LL |     is_send(Box::new(Outer2(TestType)));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n    |\n-   = help: within `Outer2<dummy3::TestType>`, the trait `Send` is not implemented for `dummy3::TestType`\n+   = help: the trait `Send` is not implemented for `dummy3::TestType`\n note: required because it appears within the type `Outer2<dummy3::TestType>`\n   --> $DIR/negated-auto-traits-error.rs:12:8\n    |"}, {"sha": "d81c188df218a80ff3db2f64e94ff52df964f2d8", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3f712518ffecb8115d60618654b984adcb8003/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3f712518ffecb8115d60618654b984adcb8003/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=8a3f712518ffecb8115d60618654b984adcb8003", "patch": "@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n+   = help: the trait `Sized` is not implemented for `[u8]`\n note: required because it appears within the type `A<[u8]>`\n   --> $DIR/unsized-exprs.rs:3:8\n    |"}]}