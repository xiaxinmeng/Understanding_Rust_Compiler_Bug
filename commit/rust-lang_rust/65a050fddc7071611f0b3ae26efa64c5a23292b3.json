{"sha": "65a050fddc7071611f0b3ae26efa64c5a23292b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTA1MGZkZGM3MDcxNjExZjBiM2FlMjZlZmE2NGM1YTIzMjkyYjM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-02T06:06:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T06:06:11Z"}, "message": "Rollup merge of #64722 - Mark-Simulacrum:alt-parallel, r=alexcrichton\n\nMake all alt builders produce parallel-enabled compilers\n\nWe're not quite ready to ship parallel compilers by default, but the alt\nbuilders are not used too much (in theory), so we believe that shipping\na possibly-broken compiler there is not too problematic.\n\nr? @nikomatsakis", "tree": {"sha": "a6ee30234ffde1d8c8cf65d76d015e63e929c806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6ee30234ffde1d8c8cf65d76d015e63e929c806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a050fddc7071611f0b3ae26efa64c5a23292b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlD5TCRBK7hj4Ov3rIwAAdHIIACib9zv/ZoIn1+18fVMwwoHE\nDBPDRgPivnRpLkysviZhs0gvATD1jcu5qjrEs4sRy3eUuLeKqJtHWITA7i4fiOUq\nf94FEarbe53sBiceCGnRqmeZQvS5dYejFdAUntXejZkheDwoY7p/7wE1PRfpQQf8\nkasqJMKyRRip3DZBfkqGkTuhSDg1iSCF5Mt07kLjm5YB3Le2PlNRKK6e6O6Gmkrn\n7tFaBovK24TZI15DFJ4bI03k8xFgoZa+1Iu5c4vxPAxmyItqYvaCHKoBb887Lnrc\nvdWZS4MFkWoxQ+nzXjn3n6gvFWdNGH6ZgehUtkM21dwTWaUsJEB+5G8v0ifhk/I=\n=TN6O\n-----END PGP SIGNATURE-----\n", "payload": "tree a6ee30234ffde1d8c8cf65d76d015e63e929c806\nparent c11cb25262c52e2c9b6dd711eddfc6aecf59d51c\nparent 1a1067d1a537d6495f6aa9703e10119f05d578ad\nauthor Tyler Mandry <tmandry@gmail.com> 1569996371 -0700\ncommitter GitHub <noreply@github.com> 1569996371 -0700\n\nRollup merge of #64722 - Mark-Simulacrum:alt-parallel, r=alexcrichton\n\nMake all alt builders produce parallel-enabled compilers\n\nWe're not quite ready to ship parallel compilers by default, but the alt\nbuilders are not used too much (in theory), so we believe that shipping\na possibly-broken compiler there is not too problematic.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a050fddc7071611f0b3ae26efa64c5a23292b3", "html_url": "https://github.com/rust-lang/rust/commit/65a050fddc7071611f0b3ae26efa64c5a23292b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a050fddc7071611f0b3ae26efa64c5a23292b3/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c", "html_url": "https://github.com/rust-lang/rust/commit/c11cb25262c52e2c9b6dd711eddfc6aecf59d51c"}, {"sha": "1a1067d1a537d6495f6aa9703e10119f05d578ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1067d1a537d6495f6aa9703e10119f05d578ad", "html_url": "https://github.com/rust-lang/rust/commit/1a1067d1a537d6495f6aa9703e10119f05d578ad"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "0d5ea371245e42cabb533daa5d0256cca8031633", "filename": "src/ci/run.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=65a050fddc7071611f0b3ae26efa64c5a23292b3", "patch": "@@ -55,6 +55,9 @@ if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\"\n   elif [ \"$DEPLOY_ALT\" != \"\" ]; then\n+    if [ \"$NO_PARALLEL_COMPILER\" = \"\" ]; then\n+      RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.parallel-compiler\"\n+    fi\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-assertions\"\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.verify-llvm-ir\"\n   fi"}, {"sha": "2771ce69b9e0df747c6a4cac4f33bbe17b1e1666", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=65a050fddc7071611f0b3ae26efa64c5a23292b3", "patch": "@@ -805,6 +805,7 @@ macro_rules! options {\n         pub const parse_list: Option<&str> = Some(\"a space-separated list of strings\");\n         pub const parse_opt_list: Option<&str> = Some(\"a space-separated list of strings\");\n         pub const parse_opt_comma_list: Option<&str> = Some(\"a comma-separated list of strings\");\n+        pub const parse_threads: Option<&str> = Some(\"a number\");\n         pub const parse_uint: Option<&str> = Some(\"a number\");\n         pub const parse_passes: Option<&str> =\n             Some(\"a space-separated list of passes, or `all`\");\n@@ -948,6 +949,14 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_threads(slot: &mut usize, v: Option<&str>) -> bool {\n+            match v.and_then(|s| s.parse().ok()) {\n+                Some(0) => { *slot = ::num_cpus::get(); true },\n+                Some(i) => { *slot = i; true },\n+                None => false\n+            }\n+        }\n+\n         fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n@@ -1251,7 +1260,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"prints the LLVM optimization passes being run\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt\"),\n-    threads: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    // We default to 1 here since we want to behave like\n+    // a sequential compiler for now. This'll likely be adjusted\n+    // in the future. Note that -Zthreads=0 is the way to get\n+    // the num_cpus behavior.\n+    threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n         \"print the pre-expansion AST as JSON and halt\"),\n@@ -2146,14 +2159,14 @@ pub fn build_session_options_and_crate_config(\n         }\n     }\n \n-    if debugging_opts.threads == Some(0) {\n+    if debugging_opts.threads == 0 {\n         early_error(\n             error_format,\n             \"value for threads must be a positive non-zero integer\",\n         );\n     }\n \n-    if debugging_opts.threads.unwrap_or(1) > 1 && debugging_opts.fuel.is_some() {\n+    if debugging_opts.threads > 1 && debugging_opts.fuel.is_some() {\n         early_error(\n             error_format,\n             \"optimization fuel is incompatible with multiple threads\","}, {"sha": "9f57f8dfd9a06948bad1d509c10c576dcdcc4586", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=65a050fddc7071611f0b3ae26efa64c5a23292b3", "patch": "@@ -896,16 +896,10 @@ impl Session {\n         ret\n     }\n \n-    /// Returns the number of query threads that should be used for this\n-    /// compilation\n-    pub fn threads_from_count(query_threads: Option<usize>) -> usize {\n-        query_threads.unwrap_or(::num_cpus::get())\n-    }\n-\n     /// Returns the number of query threads that should be used for this\n     /// compilation\n     pub fn threads(&self) -> usize {\n-        Self::threads_from_count(self.opts.debugging_opts.threads)\n+        self.opts.debugging_opts.threads\n     }\n \n     /// Returns the number of codegen units that should be used for this"}, {"sha": "dae8fb242d58cd69cada05ce9ed638480bcfd3d7", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=65a050fddc7071611f0b3ae26efa64c5a23292b3", "patch": "@@ -147,5 +147,8 @@ where\n     F: FnOnce() -> R + Send,\n     R: Send,\n {\n-    util::spawn_thread_pool(edition, None, &None, f)\n+    // the 1 here is duplicating code in config.opts.debugging_opts.threads\n+    // which also defaults to 1; it ultimately doesn't matter as the default\n+    // isn't threaded, and just ignores this parameter\n+    util::spawn_thread_pool(edition, 1, &None, f)\n }"}, {"sha": "b05bad554f406e803213e4c0fbb134411601dfa2", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a050fddc7071611f0b3ae26efa64c5a23292b3/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=65a050fddc7071611f0b3ae26efa64c5a23292b3", "patch": "@@ -173,7 +173,7 @@ pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f:\n #[cfg(not(parallel_compiler))]\n pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n-    _threads: Option<usize>,\n+    _threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n@@ -198,7 +198,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n #[cfg(parallel_compiler)]\n pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n-    threads: Option<usize>,\n+    threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n@@ -209,7 +209,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     let mut config = ThreadPoolBuilder::new()\n         .acquire_thread_handler(jobserver::acquire_thread)\n         .release_thread_handler(jobserver::release_thread)\n-        .num_threads(Session::threads_from_count(threads))\n+        .num_threads(threads)\n         .deadlock_handler(|| unsafe { ty::query::handle_deadlock() });\n \n     if let Some(size) = get_stack_size() {"}]}