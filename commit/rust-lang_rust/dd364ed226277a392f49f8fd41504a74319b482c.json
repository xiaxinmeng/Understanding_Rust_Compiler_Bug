{"sha": "dd364ed226277a392f49f8fd41504a74319b482c", "node_id": "C_kwDOAAsO6NoAKGRkMzY0ZWQyMjYyNzdhMzkyZjQ5ZjhmZDQxNTA0YTc0MzE5YjQ4MmM", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-01-05T23:58:45Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-01-06T05:20:58Z"}, "message": "add some missing must use to float ops", "tree": {"sha": "09ae8696881940fd1699d8fbed0ae90d1d4bb824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ae8696881940fd1699d8fbed0ae90d1d4bb824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd364ed226277a392f49f8fd41504a74319b482c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd364ed226277a392f49f8fd41504a74319b482c", "html_url": "https://github.com/rust-lang/rust/commit/dd364ed226277a392f49f8fd41504a74319b482c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd364ed226277a392f49f8fd41504a74319b482c/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ce0e6a00593493a12e0e3662119786c761f375", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce0e6a00593493a12e0e3662119786c761f375", "html_url": "https://github.com/rust-lang/rust/commit/f1ce0e6a00593493a12e0e3662119786c761f375"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "85ceede5b9e3a1b227888b4fa1044d7a01111f67", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd364ed226277a392f49f8fd41504a74319b482c/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd364ed226277a392f49f8fd41504a74319b482c/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=dd364ed226277a392f49f8fd41504a74319b482c", "patch": "@@ -628,6 +628,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn recip(self) -> f32 {\n@@ -684,6 +685,7 @@ impl f32 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f32) -> f32 {\n@@ -703,6 +705,7 @@ impl f32 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f32) -> f32 {\n@@ -726,6 +729,7 @@ impl f32 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn maximum(self, other: f32) -> f32 {\n@@ -757,6 +761,7 @@ impl f32 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn minimum(self, other: f32) -> f32 {"}, {"sha": "4049c95b130f2a6bdc771a61ed13739ba240e647", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd364ed226277a392f49f8fd41504a74319b482c/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd364ed226277a392f49f8fd41504a74319b482c/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=dd364ed226277a392f49f8fd41504a74319b482c", "patch": "@@ -643,6 +643,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn recip(self) -> f64 {\n@@ -700,6 +701,7 @@ impl f64 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f64) -> f64 {\n@@ -719,6 +721,7 @@ impl f64 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f64) -> f64 {\n@@ -742,6 +745,7 @@ impl f64 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn maximum(self, other: f64) -> f64 {\n@@ -773,6 +777,7 @@ impl f64 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn minimum(self, other: f64) -> f64 {"}]}