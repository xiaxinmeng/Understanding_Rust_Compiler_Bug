{"sha": "2b816b0d6a9bc8210ca314a020a247f8632b4f38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiODE2YjBkNmE5YmM4MjEwY2EzMTRhMDIwYTI0N2Y4NjMyYjRmMzg=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T17:09:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::PathListItem_ variants", "tree": {"sha": "9505dfb9c3f8ad2d17c23239df600912206943a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9505dfb9c3f8ad2d17c23239df600912206943a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b816b0d6a9bc8210ca314a020a247f8632b4f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b816b0d6a9bc8210ca314a020a247f8632b4f38", "html_url": "https://github.com/rust-lang/rust/commit/2b816b0d6a9bc8210ca314a020a247f8632b4f38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b816b0d6a9bc8210ca314a020a247f8632b4f38/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "html_url": "https://github.com/rust-lang/rust/commit/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "977f271c3014aa77148bf4aeb99f2f845c4b72ac", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -211,31 +211,31 @@ pub fn lower_view_path(lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::V\n             ViewPathList(ref path, ref path_list_idents) => {\n                 hir::ViewPathList(lower_path(lctx, path),\n                                   path_list_idents.iter()\n-                                                  .map(|path_list_ident| {\n-                                                      Spanned {\n-                                                          node: match path_list_ident.node {\n-                                                              PathListIdent { id, name, rename } =>\n-                                                                  hir::PathListIdent {\n-                                                                  id: id,\n-                                                                  name: name.name,\n-                                                                  rename: rename.map(|x| x.name),\n-                                                              },\n-                                                              PathListMod { id, rename } =>\n-                                                                  hir::PathListMod {\n-                                                                  id: id,\n-                                                                  rename: rename.map(|x| x.name),\n-                                                              },\n-                                                          },\n-                                                          span: path_list_ident.span,\n-                                                      }\n-                                                  })\n+                                                  .map(lower_path_list_item)\n                                                   .collect())\n             }\n         },\n         span: view_path.span,\n     })\n }\n \n+fn lower_path_list_item(path_list_ident: &PathListItem) -> hir::PathListItem {\n+    Spanned {\n+        node: match path_list_ident.node {\n+            PathListItemKind::Ident { id, name, rename } => hir::PathListIdent {\n+                id: id,\n+                name: name.name,\n+                rename: rename.map(|x| x.name),\n+            },\n+            PathListItemKind::Mod { id, rename } => hir::PathListMod {\n+                id: id,\n+                rename: rename.map(|x| x.name),\n+            },\n+        },\n+        span: path_list_ident.span,\n+    }\n+}\n+\n pub fn lower_arm(lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n     hir::Arm {\n         attrs: lower_attrs(lctx, &arm.attrs),"}, {"sha": "34d806ab0a8a30f9c621ac92246aef75e9f1cc10", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -928,7 +928,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                     ast::ViewPathList(ref path, ref list) => {\n                         for plid in list {\n                             match plid.node {\n-                                ast::PathListIdent { id, .. } => {\n+                                ast::PathListItemKind::Ident { id, .. } => {\n                                     match self.lookup_type_ref(id) {\n                                         Some(def_id) => match self.lookup_def_kind(id, plid.span) {\n                                             Some(kind) => {\n@@ -943,7 +943,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                         None => (),\n                                     }\n                                 }\n-                                ast::PathListMod { .. } => (),\n+                                ast::PathListItemKind::Mod { .. } => (),\n                             }\n                         }\n "}, {"sha": "bae6d780b5e5b5535e3bbd0cda5bff222b837e9c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -11,7 +11,6 @@\n // The Rust abstract syntax tree.\n \n pub use self::Pat_::*;\n-pub use self::PathListItem_::*;\n pub use self::StructFieldKind::*;\n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n@@ -1737,42 +1736,42 @@ pub struct Variant_ {\n pub type Variant = Spanned<Variant_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum PathListItem_ {\n-    PathListIdent {\n+pub enum PathListItemKind {\n+    Ident {\n         name: Ident,\n         /// renamed in list, eg `use foo::{bar as baz};`\n         rename: Option<Ident>,\n         id: NodeId\n     },\n-    PathListMod {\n+    Mod {\n         /// renamed in list, eg `use foo::{self as baz};`\n         rename: Option<Ident>,\n         id: NodeId\n     }\n }\n \n-impl PathListItem_ {\n+impl PathListItemKind {\n     pub fn id(&self) -> NodeId {\n         match *self {\n-            PathListIdent { id, .. } | PathListMod { id, .. } => id\n+            PathListItemKind::Ident { id, .. } | PathListItemKind::Mod { id, .. } => id\n         }\n     }\n \n     pub fn name(&self) -> Option<Ident> {\n         match *self {\n-            PathListIdent { name, .. } => Some(name),\n-            PathListMod { .. } => None,\n+            PathListItemKind::Ident { name, .. } => Some(name),\n+            PathListItemKind::Mod { .. } => None,\n         }\n     }\n \n     pub fn rename(&self) -> Option<Ident> {\n         match *self {\n-            PathListIdent { rename, .. } | PathListMod { rename, .. } => rename\n+            PathListItemKind::Ident { rename, .. } | PathListItemKind::Mod { rename, .. } => rename\n         }\n     }\n }\n \n-pub type PathListItem = Spanned<PathListItem_>;\n+pub type PathListItem = Spanned<PathListItemKind>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n "}, {"sha": "31d5521799e1b852b69d468256883a263d96fa8f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -1150,7 +1150,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn item_use_list(&self, sp: Span, vis: ast::Visibility,\n                      path: Vec<ast::Ident>, imports: &[ast::Ident]) -> P<ast::Item> {\n         let imports = imports.iter().map(|id| {\n-            respan(sp, ast::PathListIdent { name: *id, rename: None, id: ast::DUMMY_NODE_ID })\n+            let item = ast::PathListItemKind::Ident {\n+                name: *id,\n+                rename: None,\n+                id: ast::DUMMY_NODE_ID,\n+            };\n+            respan(sp, item)\n         }).collect();\n \n         self.item_use(sp, vis,"}, {"sha": "5ae24e6fb248242b4cd6f12081bc803d634cbb77", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -316,14 +316,14 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n                              path_list_idents.move_map(|path_list_ident| {\n                                 Spanned {\n                                     node: match path_list_ident.node {\n-                                        PathListIdent { id, name, rename } =>\n-                                            PathListIdent {\n+                                        PathListItemKind::Ident { id, name, rename } =>\n+                                            PathListItemKind::Ident {\n                                                 id: fld.new_id(id),\n                                                 rename: rename,\n                                                 name: name\n                                             },\n-                                        PathListMod { id, rename } =>\n-                                            PathListMod {\n+                                        PathListItemKind::Mod { id, rename } =>\n+                                            PathListItemKind::Mod {\n                                                 id: fld.new_id(id),\n                                                 rename: rename\n                                             }"}, {"sha": "e985bfd37b0751b6797959cb47275f63276df76a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -574,11 +574,11 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n         let node = if self.eat_keyword(keywords::SelfValue) {\n             let rename = try!(self.parse_rename());\n-            ast::PathListMod { id: ast::DUMMY_NODE_ID, rename: rename }\n+            ast::PathListItemKind::Mod { id: ast::DUMMY_NODE_ID, rename: rename }\n         } else {\n             let ident = try!(self.parse_ident());\n             let rename = try!(self.parse_rename());\n-            ast::PathListIdent { name: ident, rename: rename, id: ast::DUMMY_NODE_ID }\n+            ast::PathListItemKind::Ident { name: ident, rename: rename, id: ast::DUMMY_NODE_ID }\n         };\n         let hi = self.last_span.hi;\n         Ok(spanned(lo, hi, node))"}, {"sha": "ab218971a51ee406302f6741fa210c22d55775bd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b816b0d6a9bc8210ca314a020a247f8632b4f38/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2b816b0d6a9bc8210ca314a020a247f8632b4f38", "patch": "@@ -2918,7 +2918,7 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.commasep(Inconsistent, &idents[..], |s, w| {\n                     match w.node {\n-                        ast::PathListIdent { name, rename, .. } => {\n+                        ast::PathListItemKind::Ident { name, rename, .. } => {\n                             try!(s.print_ident(name));\n                             if let Some(ident) = rename {\n                                 try!(space(&mut s.s));\n@@ -2927,7 +2927,7 @@ impl<'a> State<'a> {\n                             }\n                             Ok(())\n                         },\n-                        ast::PathListMod { rename, .. } => {\n+                        ast::PathListItemKind::Mod { rename, .. } => {\n                             try!(word(&mut s.s, \"self\"));\n                             if let Some(ident) = rename {\n                                 try!(space(&mut s.s));"}]}