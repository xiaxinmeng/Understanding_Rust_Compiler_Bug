{"sha": "0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMjRhMmIzMDljZDY2Y2I3YmQ0YTE1NmJkMGI4NGNiMTM2ZTI1NGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-10T05:21:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-10T05:21:43Z"}, "message": "Auto merge of #62555 - Centril:rollup-ti46adx, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #61853 (Emit warning when trying to use PGO in conjunction with unwinding on \u2026)\n - #62278 (Add Iterator::partition_in_place() and is_partitioned())\n - #62283 (Target::arch can take more than listed options)\n - #62393 (Fix pretty-printing of `$crate` (take 4))\n - #62474 (Prepare for LLVM 9 update)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f85538e316a67aca8f749f5ebd1bb93754e6f206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f85538e316a67aca8f749f5ebd1bb93754e6f206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "html_url": "https://github.com/rust-lang/rust/commit/0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f435f622e0c05a199eb89b71a11181133fdb74c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f435f622e0c05a199eb89b71a11181133fdb74c", "html_url": "https://github.com/rust-lang/rust/commit/3f435f622e0c05a199eb89b71a11181133fdb74c"}, {"sha": "6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "html_url": "https://github.com/rust-lang/rust/commit/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc"}], "stats": {"total": 731, "additions": 551, "deletions": 180}, "files": [{"sha": "6eddac672c1585c49e658359f1aee617b85290fa", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -1472,6 +1472,11 @@ pub trait Iterator {\n     /// `partition()` returns a pair, all of the elements for which it returned\n     /// `true`, and all of the elements for which it returned `false`.\n     ///\n+    /// See also [`is_partitioned()`] and [`partition_in_place()`].\n+    ///\n+    /// [`is_partitioned()`]: #method.is_partitioned\n+    /// [`partition_in_place()`]: #method.partition_in_place\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1506,6 +1511,101 @@ pub trait Iterator {\n         (left, right)\n     }\n \n+    /// Reorder the elements of this iterator *in-place* according to the given predicate,\n+    /// such that all those that return `true` precede all those that return `false`.\n+    /// Returns the number of `true` elements found.\n+    ///\n+    /// The relative order of partitioned items is not maintained.\n+    ///\n+    /// See also [`is_partitioned()`] and [`partition()`].\n+    ///\n+    /// [`is_partitioned()`]: #method.is_partitioned\n+    /// [`partition()`]: #method.partition\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_partition_in_place)]\n+    ///\n+    /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n+    ///\n+    /// // Partition in-place between evens and odds\n+    /// let i = a.iter_mut().partition_in_place(|&n| n % 2 == 0);\n+    ///\n+    /// assert_eq!(i, 3);\n+    /// assert!(a[..i].iter().all(|&n| n % 2 == 0)); // evens\n+    /// assert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n+    /// ```\n+    #[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue = \"62543\")]\n+    fn partition_in_place<'a, T: 'a, P>(mut self, ref mut predicate: P) -> usize\n+    where\n+        Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n+        P: FnMut(&T) -> bool,\n+    {\n+        // FIXME: should we worry about the count overflowing? The only way to have more than\n+        // `usize::MAX` mutable references is with ZSTs, which aren't useful to partition...\n+\n+        // These closure \"factory\" functions exist to avoid genericity in `Self`.\n+\n+        #[inline]\n+        fn is_false<'a, T>(\n+            predicate: &'a mut impl FnMut(&T) -> bool,\n+            true_count: &'a mut usize,\n+        ) -> impl FnMut(&&mut T) -> bool + 'a {\n+            move |x| {\n+                let p = predicate(&**x);\n+                *true_count += p as usize;\n+                !p\n+            }\n+        }\n+\n+        #[inline]\n+        fn is_true<T>(\n+            predicate: &mut impl FnMut(&T) -> bool\n+        ) -> impl FnMut(&&mut T) -> bool + '_ {\n+            move |x| predicate(&**x)\n+        }\n+\n+        // Repeatedly find the first `false` and swap it with the last `true`.\n+        let mut true_count = 0;\n+        while let Some(head) = self.find(is_false(predicate, &mut true_count)) {\n+            if let Some(tail) = self.rfind(is_true(predicate)) {\n+                crate::mem::swap(head, tail);\n+                true_count += 1;\n+            } else {\n+                break;\n+            }\n+        }\n+        true_count\n+    }\n+\n+    /// Checks if the elements of this iterator are partitioned according to the given predicate,\n+    /// such that all those that return `true` precede all those that return `false`.\n+    ///\n+    /// See also [`partition()`] and [`partition_in_place()`].\n+    ///\n+    /// [`partition()`]: #method.partition\n+    /// [`partition_in_place()`]: #method.partition_in_place\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_is_partitioned)]\n+    ///\n+    /// assert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\n+    /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n+    /// ```\n+    #[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue = \"62544\")]\n+    fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n+    where\n+        Self: Sized,\n+        P: FnMut(Self::Item) -> bool,\n+    {\n+        // Either all items test `true`, or the first clause stops at `false`\n+        // and we check that there are no more `true` items after that.\n+        self.all(&mut predicate) || !self.any(predicate)\n+    }\n+\n     /// An iterator method that applies a function as long as it returns\n     /// successfully, producing a single, final value.\n     ///"}, {"sha": "b7b0849e2129b65af0c1ab3c4e409f0fbb2c1f15", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -2460,3 +2460,39 @@ fn test_is_sorted() {\n     assert!(![\"c\", \"bb\", \"aaa\"].iter().is_sorted());\n     assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n }\n+\n+#[test]\n+fn test_partition() {\n+    fn check(xs: &mut [i32], ref p: impl Fn(&i32) -> bool, expected: usize) {\n+        let i = xs.iter_mut().partition_in_place(p);\n+        assert_eq!(expected, i);\n+        assert!(xs[..i].iter().all(p));\n+        assert!(!xs[i..].iter().any(p));\n+        assert!(xs.iter().is_partitioned(p));\n+        if i == 0 || i == xs.len() {\n+            assert!(xs.iter().rev().is_partitioned(p));\n+        } else {\n+            assert!(!xs.iter().rev().is_partitioned(p));\n+        }\n+    }\n+\n+    check(&mut [], |_| true, 0);\n+    check(&mut [], |_| false, 0);\n+\n+    check(&mut [0], |_| true, 1);\n+    check(&mut [0], |_| false, 0);\n+\n+    check(&mut [-1, 1], |&x| x > 0, 1);\n+    check(&mut [-1, 1], |&x| x < 0, 1);\n+\n+    let ref mut xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    check(xs, |_| true, 10);\n+    check(xs, |_| false, 0);\n+    check(xs, |&x| x % 2 == 0, 5); // evens\n+    check(xs, |&x| x % 2 == 1, 5); // odds\n+    check(xs, |&x| x % 3 == 0, 4); // multiple of 3\n+    check(xs, |&x| x % 4 == 0, 3); // multiple of 4\n+    check(xs, |&x| x % 5 == 0, 2); // multiple of 5\n+    check(xs, |&x| x < 3, 3); // small\n+    check(xs, |&x| x > 6, 3); // large\n+}"}, {"sha": "cbb6423d710106fb4ac7bdba6f8e7d1fe2bdcd80", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -31,6 +31,8 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]\n #![feature(const_fn)]\n+#![feature(iter_partition_in_place)]\n+#![feature(iter_is_partitioned)]\n #![warn(rust_2018_idioms)]\n \n extern crate test;"}, {"sha": "b17ba8de73049d1e52c8f24d17366aa36436d650", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -1303,15 +1303,15 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     }\n \n     // PGO does not work reliably with panic=unwind on Windows. Let's make it\n-    // an error to combine the two for now. It always runs into an assertions\n+    // a warning to combine the two for now. It always runs into an assertions\n     // if LLVM is built with assertions, but without assertions it sometimes\n     // does not crash and will probably generate a corrupted binary.\n     if sess.opts.cg.profile_generate.enabled() &&\n        sess.target.target.options.is_like_msvc &&\n        sess.panic_strategy() == PanicStrategy::Unwind {\n-        sess.err(\"Profile-guided optimization does not yet work in conjunction \\\n-                  with `-Cpanic=unwind` on Windows when targeting MSVC. \\\n-                  See https://github.com/rust-lang/rust/issues/61002 for details.\");\n+        sess.warn(\"Profile-guided optimization does not yet work in conjunction \\\n+                   with `-Cpanic=unwind` on Windows when targeting MSVC. \\\n+                   See https://github.com/rust-lang/rust/issues/61002 for details.\");\n     }\n }\n "}, {"sha": "ff87afe0c444b7556739c73517056a6c7e919f20", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -34,17 +34,17 @@ trait ArgAttributeExt {\n impl ArgAttributeExt for ArgAttribute {\n     fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) {\n         for_each_kind!(self, f,\n-                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n+                       NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n     }\n }\n \n pub trait ArgAttributesExt {\n-    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value);\n-    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value);\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value, ty: Option<&Type>);\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value, ty: Option<&Type>);\n }\n \n impl ArgAttributesExt for ArgAttributes {\n-    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value) {\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value, ty: Option<&Type>) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -65,11 +65,14 @@ impl ArgAttributesExt for ArgAttributes {\n                                                idx.as_uint(),\n                                                align.bytes() as u32);\n             }\n+            if regular.contains(ArgAttribute::ByVal) {\n+                llvm::LLVMRustAddByValAttr(llfn, idx.as_uint(), ty.unwrap());\n+            }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n         }\n     }\n \n-    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value) {\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value, ty: Option<&Type>) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -90,6 +93,9 @@ impl ArgAttributesExt for ArgAttributes {\n                                                        idx.as_uint(),\n                                                        align.bytes() as u32);\n             }\n+            if regular.contains(ArgAttribute::ByVal) {\n+                llvm::LLVMRustAddByValCallSiteAttr(callsite, idx.as_uint(), ty.unwrap());\n+            }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n         }\n     }\n@@ -298,7 +304,7 @@ pub trait FnTypeLlvmExt<'tcx> {\n     fn llvm_type(&self, cx: &CodegenCx<'ll, 'tcx>) -> &'ll Type;\n     fn ptr_to_llvm_type(&self, cx: &CodegenCx<'ll, 'tcx>) -> &'ll Type;\n     fn llvm_cconv(&self) -> llvm::CallConv;\n-    fn apply_attrs_llfn(&self, llfn: &'ll Value);\n+    fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value);\n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value);\n }\n \n@@ -384,51 +390,51 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         }\n     }\n \n-    fn apply_attrs_llfn(&self, llfn: &'ll Value) {\n+    fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value) {\n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn);\n+        let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n+            attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn, ty);\n             i += 1;\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n+                attrs.apply_llfn(llvm::AttributePlace::ReturnValue, llfn, None);\n             }\n-            PassMode::Indirect(ref attrs, _) => apply(attrs),\n+            PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(cx))),\n             _ => {}\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n                 PassMode::Ignore(_) => {}\n                 PassMode::Direct(ref attrs) |\n-                PassMode::Indirect(ref attrs, None) => apply(attrs),\n+                PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(cx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(attrs, None);\n+                    apply(extra_attrs, None);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(a, None);\n+                    apply(b, None);\n                 }\n-                PassMode::Cast(_) => apply(&ArgAttributes::new()),\n+                PassMode::Cast(_) => apply(&ArgAttributes::new(), None),\n             }\n         }\n     }\n \n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value) {\n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite);\n+        let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n+            attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite, ty);\n             i += 1;\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_callsite(llvm::AttributePlace::ReturnValue, callsite);\n+                attrs.apply_callsite(llvm::AttributePlace::ReturnValue, callsite, None);\n             }\n-            PassMode::Indirect(ref attrs, _) => apply(attrs),\n+            PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(bx))),\n             _ => {}\n         }\n         if let layout::Abi::Scalar(ref scalar) = self.ret.layout.abi {\n@@ -446,21 +452,21 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n                 PassMode::Ignore(_) => {}\n                 PassMode::Direct(ref attrs) |\n-                PassMode::Indirect(ref attrs, None) => apply(attrs),\n+                PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(bx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(attrs, None);\n+                    apply(extra_attrs, None);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(a, None);\n+                    apply(b, None);\n                 }\n-                PassMode::Cast(_) => apply(&ArgAttributes::new()),\n+                PassMode::Cast(_) => apply(&ArgAttributes::new(), None),\n             }\n         }\n "}, {"sha": "33b50401b22f149ac9f11d8464f949433848e2e2", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -119,6 +119,29 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         const_cstr!(\"probe-stack\"), const_cstr!(\"__rust_probestack\"));\n }\n \n+fn translate_obsolete_target_features(feature: &str) -> &str {\n+    const LLVM9_FEATURE_CHANGES: &[(&str, &str)] = &[\n+        (\"+fp-only-sp\", \"-fp64\"),\n+        (\"-fp-only-sp\", \"+fp64\"),\n+        (\"+d16\", \"-d32\"),\n+        (\"-d16\", \"+d32\"),\n+    ];\n+    if llvm_util::get_major_version() >= 9 {\n+        for &(old, new) in LLVM9_FEATURE_CHANGES {\n+            if feature == old {\n+                return new;\n+            }\n+        }\n+    } else {\n+        for &(old, new) in LLVM9_FEATURE_CHANGES {\n+            if feature == new {\n+                return old;\n+            }\n+        }\n+    }\n+    feature\n+}\n+\n pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n     const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\n         \"crt-static\",\n@@ -129,6 +152,7 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n     sess.target.target.options.features.split(',')\n         .chain(cmdline)\n         .filter(|l| !l.is_empty())\n+        .map(translate_obsolete_target_features)\n }\n \n pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {"}, {"sha": "e9f25e6344b064ac990af518a59a16fa9e9b420c", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -249,6 +249,10 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_uint(self.type_i8(), i as u64)\n     }\n \n+    fn const_real(&self, t: &'ll Type, val: f64) -> &'ll Value {\n+        unsafe { llvm::LLVMConstReal(t, val) }\n+    }\n+\n     fn const_struct(\n         &self,\n         elts: &[&'ll Value],"}, {"sha": "2b68eb53a4ab96a27195a938dda8d5aede0c720f", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -1,5 +1,6 @@\n use crate::attributes;\n use crate::llvm;\n+use crate::llvm_util;\n use crate::debuginfo;\n use crate::value::Value;\n use rustc::dep_graph::DepGraphSafe;\n@@ -140,6 +141,11 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n     !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocMode::PIC\n }\n \n+fn strip_function_ptr_alignment(data_layout: String) -> String {\n+    // FIXME: Make this more general.\n+    data_layout.replace(\"-Fi8-\", \"-\")\n+}\n+\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -149,14 +155,19 @@ pub unsafe fn create_module(\n     let mod_name = SmallCStr::new(mod_name);\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n+    let mut target_data_layout = sess.target.target.data_layout.clone();\n+    if llvm_util::get_major_version() < 9 {\n+        target_data_layout = strip_function_ptr_alignment(target_data_layout);\n+    }\n+\n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n         let tm = crate::back::write::create_informational_target_machine(&tcx.sess, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n-        let data_layout = llvm::LLVMGetDataLayout(llmod);\n-        let data_layout = str::from_utf8(CStr::from_ptr(data_layout).to_bytes())\n+        let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n+        let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n             .ok().expect(\"got a non-UTF8 data-layout from LLVM\");\n \n         // Unfortunately LLVM target specs change over time, and right now we\n@@ -177,16 +188,16 @@ pub unsafe fn create_module(\n         let cfg_llvm_root = option_env!(\"CFG_LLVM_ROOT\").unwrap_or(\"\");\n         let custom_llvm_used = cfg_llvm_root.trim() != \"\";\n \n-        if !custom_llvm_used && sess.target.target.data_layout != data_layout {\n+        if !custom_llvm_used && target_data_layout != llvm_data_layout {\n             bug!(\"data-layout for builtin `{}` target, `{}`, \\\n                   differs from LLVM default, `{}`\",\n                  sess.target.target.llvm_target,\n-                 sess.target.target.data_layout,\n-                 data_layout);\n+                 target_data_layout,\n+                 llvm_data_layout);\n         }\n     }\n \n-    let data_layout = SmallCStr::new(&sess.target.target.data_layout);\n+    let data_layout = SmallCStr::new(&target_data_layout);\n     llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n \n     let llvm_target = SmallCStr::new(&sess.target.target.llvm_target);"}, {"sha": "62eab0f3d4e69b8f047d2f749fe65b13b672c8fb", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -107,7 +107,7 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n         }\n \n-        fty.apply_attrs_llfn(llfn);\n+        fty.apply_attrs_llfn(self, llfn);\n \n         llfn\n     }"}, {"sha": "dd6cfd7e29e4ea9f39efffb9f834d86a240fee11", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -1663,9 +1663,10 @@ fn generic_simd_intrinsic(\n                             acc\n                         } else {\n                             // unordered arithmetic reductions do not:\n+                            let identity_acc = if $name.contains(\"mul\") { 1.0 } else { 0.0 };\n                             match f.bit_width() {\n-                                32 => bx.const_undef(bx.type_f32()),\n-                                64 => bx.const_undef(bx.type_f64()),\n+                                32 => bx.const_real(bx.type_f32(), identity_acc),\n+                                64 => bx.const_real(bx.type_f64(), identity_acc),\n                                 v => {\n                                     return_error!(r#\"\n unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,"}, {"sha": "2b22925f4496927b0ac47b89e5bdc27072353f8f", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -715,6 +715,7 @@ extern \"C\" {\n     // Operations on scalar constants\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n+    pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n     pub fn LLVMConstIntGetZExtValue(ConstantVal: &Value) -> c_ulonglong;\n     pub fn LLVMRustConstInt128Get(ConstantVal: &Value, SExt: bool,\n                                   high: &mut u64, low: &mut u64) -> bool;\n@@ -794,6 +795,7 @@ extern \"C\" {\n     pub fn LLVMRustAddAlignmentAttr(Fn: &Value, index: c_uint, bytes: u32);\n     pub fn LLVMRustAddDereferenceableAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullAttr(Fn: &Value, index: c_uint, bytes: u64);\n+    pub fn LLVMRustAddByValAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddFunctionAttribute(Fn: &Value, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(Fn: &Value,\n                                               index: c_uint,\n@@ -824,6 +826,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableOrNullCallSiteAttr(Instr: &Value,\n                                                         index: c_uint,\n                                                         bytes: u64);\n+    pub fn LLVMRustAddByValCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n \n     // Operations on load/store instructions (only)\n     pub fn LLVMSetVolatile(MemoryAccessInst: &Value, volatile: Bool);"}, {"sha": "248fadfaf0f2734eef2e350d8674750d06c4e748", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -17,6 +17,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u64(&self, i: u64) -> Self::Value;\n     fn const_usize(&self, i: u64) -> Self::Value;\n     fn const_u8(&self, i: u8) -> Self::Value;\n+    fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n "}, {"sha": "49116f3f171e2620bba3f7a85de35bea886f49dd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -758,7 +758,10 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn macro_def_scope(&mut self, expansion: Mark) -> Module<'a> {\n-        let def_id = self.macro_defs[&expansion];\n+        let def_id = match self.macro_defs.get(&expansion) {\n+            Some(def_id) => *def_id,\n+            None => return self.graph_root,\n+        };\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n         } else if def_id.krate == CrateNum::BuiltinMacros {"}, {"sha": "8f23c9813f7d9e43560fa6f9ecc0b4443eed3933", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -17,12 +17,11 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n-use syntax::ext::hygiene::Mark;\n+use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{feature_err, emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::{AttributeGate, GateIssue, Stability, BUILTIN_ATTRIBUTES};\n use syntax::symbol::{Symbol, kw, sym};\n-use syntax::visit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::Applicability;\n@@ -146,24 +145,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n-    fn resolve_dollar_crates(&mut self, fragment: &AstFragment) {\n-        struct ResolveDollarCrates<'a, 'b> {\n-            resolver: &'a mut Resolver<'b>\n-        }\n-        impl<'a> Visitor<'a> for ResolveDollarCrates<'a, '_> {\n-            fn visit_ident(&mut self, ident: Ident) {\n-                if ident.name == kw::DollarCrate {\n-                    let name = match self.resolver.resolve_crate_root(ident).kind {\n-                        ModuleKind::Def(.., name) if name != kw::Invalid => name,\n-                        _ => kw::Crate,\n-                    };\n-                    ident.span.ctxt().set_dollar_crate_name(name);\n-                }\n+    fn resolve_dollar_crates(&mut self) {\n+        hygiene::update_dollar_crate_names(|ctxt| {\n+            let ident = Ident::new(kw::DollarCrate, DUMMY_SP.with_ctxt(ctxt));\n+            match self.resolve_crate_root(ident).kind {\n+                ModuleKind::Def(.., name) if name != kw::Invalid => name,\n+                _ => kw::Crate,\n             }\n-            fn visit_mac(&mut self, _: &ast::Mac) {}\n-        }\n-\n-        fragment.visit_with(&mut ResolveDollarCrates { resolver: self });\n+        });\n     }\n \n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,"}, {"sha": "c02edabd886fa8eecbb681c717af0dfe2c9165e8", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: String::new(),"}, {"sha": "1d5751c1f713b83c84ab24ae4e79da8bd2045afa", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "8eb19a6518a3f7ebfbaf939fc11c4ef05d1ca269", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "5c40b6fb89fd33c02206f010926d4a93135ca049", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "496a0c4a43a7e51978970a8ff033f488e91b7f29", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "0b41b920e584478bb6ae7c25f43e04d0a1f06d26", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),"}, {"sha": "5f1bfdce355c13f46b8097cf3bcac63ac0d4a590", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: \"static\".to_string(),\n             panic_strategy: PanicStrategy::Abort,\n-            features: \"+vfp3,+d16,+fp-only-sp\".to_string(),\n+            features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             emit_debug_gdb_scripts: false,"}, {"sha": "264bf8d871d7a7ac23bb11ad8bff5bc5f50b8759", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "d0f1222d87a5b40fda628982fa037b8e249ce5a0", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "9c08a7741a65e105ca7311bf2c21ca087624c547", "filename": "src/librustc_target/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "efbbee959ed955cfd13799085dcbfa1dca3e71c0", "filename": "src/librustc_target/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         target_env: \"gnueabihf\".to_string(),"}, {"sha": "b76c39ac75b8b59299a8d77282a99298802cdea1", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: \"eabihf\".to_string(),"}, {"sha": "c1e1caf8e2e7697af514083830a2ec50f078f097", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "e22a853814a040b85ffa0b49127c520dd1691f38", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -10,7 +10,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n-    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+d16,-neon\".to_string();\n+    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args\n         .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n@@ -20,7 +20,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: String::new(),"}, {"sha": "7065d30a5bebafb29b4fcd2e14c6f34ab11ff87b", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n         target_env: String::new(),"}, {"sha": "219b06362f3f7f8dbaf7ab60edafa3a22967a6b0", "filename": "src/librustc_target/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -7,15 +7,15 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         target_env: \"gnueabihf\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "1dd53b1b4229ff201997f80eee8fbf2f29ecbb2d", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n@@ -19,7 +19,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "ee8e48e3e751c7ead12abfd954d76bb71955f6b6", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n         // target.\n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "1d63b0261c1a4ca466f826bda4c6dfa90b4a373e", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -7,15 +7,15 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: \"eabihf\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "814ca1d77ac7ed649c10240fdf8645c191d89cca", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),"}, {"sha": "decf1a01e0b1496374035f342323b8d36775b004", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),\n@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: \"static\".to_string(),\n             panic_strategy: PanicStrategy::Abort,\n-            features: \"+vfp3,+d16,+fp-only-sp\".to_string(),\n+            features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             emit_debug_gdb_scripts: false,"}, {"sha": "55e2a876865e3f002cc7bac1e8f08fab9b9e915f", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "3054ffabb4f1f21745d703f6606545ec56ca55b8", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -497,8 +497,8 @@ pub struct Target {\n     pub target_env: String,\n     /// Vendor name to use for conditional compilation.\n     pub target_vendor: String,\n-    /// Architecture to use for ABI considerations. Valid options: \"x86\",\n-    /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", and \"powerpc64\".\n+    /// Architecture to use for ABI considerations. Valid options include: \"x86\",\n+    /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\", and others.\n     pub arch: String,\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,"}, {"sha": "28353552fc71af9f459c0403e9ab8d498966add1", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "886e3188272622f6ea945659ca853a48725e20b8", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),"}, {"sha": "4e2f9b91b0d559add467d5c6f404b19f5f3cfbbe", "filename": "src/librustc_target/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "c510be519c0a8a4c931774875e046f18cb44688e", "filename": "src/librustc_target/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -6,7 +6,7 @@\n // Additionally, this target uses the \"hard\" floating convention (ABI) where floating point values\n // are passed to/from subroutines via FPU registers (S0, S1, D0, D1, etc.).\n //\n-// To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n+// To opt into double precision hardware support, use the `-C target-feature=+fp64` flag.\n \n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n@@ -26,14 +26,14 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the\n             // Cortex-M7 (vfp5)\n-            // `+d16` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n+            // `-d32` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n             // available\n-            // `+fp-only-sp` The Cortex-M4 only supports single precision floating point operations\n+            // `-fp64` The Cortex-M4 only supports single precision floating point operations\n             // whereas in the Cortex-M7 double precision is optional\n             //\n             // Reference:\n             // ARMv7-M Architecture Reference Manual - A2.5 The optional floating-point extension\n-            features: \"+vfp4,+d16,+fp-only-sp\".to_string(),\n+            features: \"+vfp4,-d32,-fp64\".to_string(),\n             max_atomic_width: Some(32),\n             .. super::thumb_base::opts()\n         }"}, {"sha": "9c9868ef37c31a89bfaf7ed8a346847df5ded0cc", "filename": "src/librustc_target/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "f3142ef600239953655d4715fafb75fb6d9d38a6", "filename": "src/librustc_target/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),"}, {"sha": "5524bc9ab662e9f6e86a6f7bc8ceebfeb34a23d1", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "0b4750093cc2cd391a05e0d18abe36ce9e19b6b5", "filename": "src/librustc_target/spec/thumbv8m_base_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv8m_base_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv8m_base_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_base_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "acce424136db88076b5b71c8601a83f594b0fb46", "filename": "src/librustc_target/spec/thumbv8m_main_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "455d56b095bfe7f96c5b208c41d9dc7d8038fe2b", "filename": "src/librustc_target/spec/thumbv8m_main_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             // the FPU uses the FPv5 architecture, single-precision instructions\n             // and 16 D registers.\n             // These parameters map to the following LLVM features.\n-            features: \"+fp-armv8,+fp-only-sp,+d16\".to_string(),\n+            features: \"+fp-armv8,-fp64,-d32\".to_string(),\n             max_atomic_width: Some(32),\n             .. super::thumb_base::opts()\n         },"}, {"sha": "c0ba41b8af40562a83b94d6ee8478930657694bf", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -701,7 +701,7 @@ pub trait Resolver {\n \n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n \n-    fn resolve_dollar_crates(&mut self, fragment: &AstFragment);\n+    fn resolve_dollar_crates(&mut self);\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);"}, {"sha": "053686b8b1f275c1e02e0670f16493a182b8e18d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     fn collect_invocations(&mut self, mut fragment: AstFragment, derives: &[Mark])\n                            -> (AstFragment, Vec<Invocation>) {\n         // Resolve `$crate`s in the fragment for pretty-printing.\n-        self.cx.resolver.resolve_dollar_crates(&fragment);\n+        self.cx.resolver.resolve_dollar_crates();\n \n         let invocations = {\n             let mut collector = InvocationCollector {"}, {"sha": "7e099bc4d509510eb56a65e1c4a4d89e9bd67d73", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 62, "deletions": 47, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -18,7 +18,7 @@ use crate::tokenstream::{self, TokenStream, TokenTree};\n \n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{self, BytePos};\n-use syntax_pos::{DUMMY_SP, FileName};\n+use syntax_pos::{DUMMY_SP, FileName, Span};\n \n use std::borrow::Cow;\n use std::io::Read;\n@@ -181,7 +181,46 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     out\n }\n \n+fn ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n+    ident_to_string_ext(ident.name, is_raw, Some(ident.span))\n+}\n+\n+// AST pretty-printer is used as a fallback for turning AST structures into token streams for\n+// proc macros. Additionally, proc macros may stringify their input and expect it survive the\n+// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).\n+// So we need to somehow pretty-print `$crate` in a way preserving at least some of its\n+// hygiene data, most importantly name of the crate it refers to.\n+// As a result we print `$crate` as `crate` if it refers to the local crate\n+// and as `::other_crate_name` if it refers to some other crate.\n+// Note, that this is only done if the ident token is printed from inside of AST pretty-pringing,\n+// but not otherwise. Pretty-printing is the only way for proc macros to discover token contents,\n+// so we should not perform this lossy conversion if the top level call to the pretty-printer was\n+// done for a token stream or a single token.\n+fn ident_to_string_ext(\n+    name: ast::Name, is_raw: bool, convert_dollar_crate: Option<Span>\n+) -> String {\n+    if is_raw {\n+        format!(\"r#{}\", name)\n+    } else {\n+        if name == kw::DollarCrate {\n+            if let Some(span) = convert_dollar_crate {\n+                let converted = span.ctxt().dollar_crate_name();\n+                return if converted.is_path_segment_keyword() {\n+                    converted.to_string()\n+                } else {\n+                    format!(\"::{}\", converted)\n+                }\n+            }\n+        }\n+        name.to_string()\n+    }\n+}\n+\n pub fn token_kind_to_string(tok: &TokenKind) -> String {\n+    token_kind_to_string_ext(tok, None)\n+}\n+\n+fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>) -> String {\n     match *tok {\n         token::Eq                   => \"=\".to_string(),\n         token::Lt                   => \"<\".to_string(),\n@@ -227,8 +266,7 @@ pub fn token_kind_to_string(tok: &TokenKind) -> String {\n         token::Literal(lit) => literal_to_string(lit),\n \n         /* Name components */\n-        token::Ident(s, false)      => s.to_string(),\n-        token::Ident(s, true)       => format!(\"r#{}\", s),\n+        token::Ident(s, is_raw)     => ident_to_string_ext(s, is_raw, convert_dollar_crate),\n         token::Lifetime(s)          => s.to_string(),\n \n         /* Other */\n@@ -243,7 +281,12 @@ pub fn token_kind_to_string(tok: &TokenKind) -> String {\n }\n \n pub fn token_to_string(token: &Token) -> String {\n-    token_kind_to_string(&token.kind)\n+    token_to_string_ext(token, false)\n+}\n+\n+fn token_to_string_ext(token: &Token, convert_dollar_crate: bool) -> String {\n+    let convert_dollar_crate = if convert_dollar_crate { Some(token.span) } else { None };\n+    token_kind_to_string_ext(&token.kind, convert_dollar_crate)\n }\n \n crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n@@ -256,9 +299,8 @@ crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtBlock(ref e)       => block_to_string(e),\n         token::NtStmt(ref e)        => stmt_to_string(e),\n         token::NtPat(ref e)         => pat_to_string(e),\n-        token::NtIdent(e, false)    => ident_to_string(e),\n-        token::NtIdent(e, true)     => format!(\"r#{}\", ident_to_string(e)),\n-        token::NtLifetime(e)        => ident_to_string(e),\n+        token::NtIdent(e, is_raw)   => ident_to_string(e, is_raw),\n+        token::NtLifetime(e)        => e.to_string(),\n         token::NtLiteral(ref e)     => expr_to_string(e),\n         token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n         token::NtImplItem(ref e)    => impl_item_to_string(e),\n@@ -293,15 +335,15 @@ pub fn lifetime_to_string(lt: &ast::Lifetime) -> String {\n }\n \n pub fn tt_to_string(tt: tokenstream::TokenTree) -> String {\n-    to_string(|s| s.print_tt(tt))\n+    to_string(|s| s.print_tt(tt, false))\n }\n \n pub fn tts_to_string(tts: &[tokenstream::TokenTree]) -> String {\n-    to_string(|s| s.print_tts(tts.iter().cloned().collect()))\n+    tokens_to_string(tts.iter().cloned().collect())\n }\n \n pub fn tokens_to_string(tokens: TokenStream) -> String {\n-    to_string(|s| s.print_tts(tokens))\n+    to_string(|s| s.print_tts_ext(tokens, false))\n }\n \n pub fn stmt_to_string(stmt: &ast::Stmt) -> String {\n@@ -344,10 +386,6 @@ pub fn path_segment_to_string(p: &ast::PathSegment) -> String {\n     to_string(|s| s.print_path_segment(p, false))\n }\n \n-pub fn ident_to_string(id: ast::Ident) -> String {\n-    to_string(|s| s.print_ident(id))\n-}\n-\n pub fn vis_to_string(v: &ast::Visibility) -> String {\n     to_string(|s| s.print_visibility(v))\n }\n@@ -629,11 +667,7 @@ pub trait PrintState<'a> {\n                 self.writer().word(\"::\");\n             }\n             if segment.ident.name != kw::PathRoot {\n-                if segment.ident.name == kw::DollarCrate {\n-                    self.print_dollar_crate(segment.ident);\n-                } else {\n-                    self.writer().word(segment.ident.as_str().to_string());\n-                }\n+                self.writer().word(ident_to_string(segment.ident, segment.ident.is_raw_guess()));\n             }\n         }\n     }\n@@ -707,10 +741,10 @@ pub trait PrintState<'a> {\n     /// appropriate macro, transcribe back into the grammar we just parsed from,\n     /// and then pretty-print the resulting AST nodes (so, e.g., we print\n     /// expression arguments as expressions). It can be done! I think.\n-    fn print_tt(&mut self, tt: tokenstream::TokenTree) {\n+    fn print_tt(&mut self, tt: tokenstream::TokenTree, convert_dollar_crate: bool) {\n         match tt {\n             TokenTree::Token(ref token) => {\n-                self.writer().word(token_to_string(&token));\n+                self.writer().word(token_to_string_ext(&token, convert_dollar_crate));\n                 match token.kind {\n                     token::DocComment(..) => {\n                         self.writer().hardbreak()\n@@ -729,12 +763,16 @@ pub trait PrintState<'a> {\n     }\n \n     fn print_tts(&mut self, tts: tokenstream::TokenStream) {\n+        self.print_tts_ext(tts, true)\n+    }\n+\n+    fn print_tts_ext(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n         self.ibox(0);\n         for (i, tt) in tts.into_trees().enumerate() {\n             if i != 0 {\n                 self.writer().space();\n             }\n-            self.print_tt(tt);\n+            self.print_tt(tt, convert_dollar_crate);\n         }\n         self.end();\n     }\n@@ -744,21 +782,6 @@ pub trait PrintState<'a> {\n     }\n \n     fn nbsp(&mut self) { self.writer().word(\" \") }\n-\n-    // AST pretty-printer is used as a fallback for turning AST structures into token streams for\n-    // proc macros. Additionally, proc macros may stringify their input and expect it survive the\n-    // stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).\n-    // So we need to somehow pretty-print `$crate` in paths in a way preserving at least some of\n-    // its hygiene data, most importantly name of the crate it refers to.\n-    // As a result we print `$crate` as `crate` if it refers to the local crate\n-    // and as `::other_crate_name` if it refers to some other crate.\n-    fn print_dollar_crate(&mut self, ident: ast::Ident) {\n-        let name = ident.span.ctxt().dollar_crate_name();\n-        if !ast::Ident::with_empty_ctxt(name).is_path_segment_keyword() {\n-            self.writer().word(\"::\");\n-        }\n-        self.writer().word(name.as_str().to_string())\n-    }\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n@@ -2287,11 +2310,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ident(&mut self, ident: ast::Ident) {\n-        if ident.is_raw_guess() {\n-            self.s.word(format!(\"r#{}\", ident));\n-        } else {\n-            self.s.word(ident.as_str().to_string());\n-        }\n+        self.s.word(ident_to_string(ident, ident.is_raw_guess()));\n         self.ann.post(self, AnnNode::Ident(&ident))\n     }\n \n@@ -2322,11 +2341,7 @@ impl<'a> State<'a> {\n                           segment: &ast::PathSegment,\n                           colons_before_params: bool) {\n         if segment.ident.name != kw::PathRoot {\n-            if segment.ident.name == kw::DollarCrate {\n-                self.print_dollar_crate(segment.ident);\n-            } else {\n-                self.print_ident(segment.ident);\n-            }\n+            self.print_ident(segment.ident);\n             if let Some(ref args) = segment.args {\n                 self.print_generic_args(args, colons_before_params);\n             }"}, {"sha": "f52952ca40274017ecfbca8fd1bbd5bb54f827fd", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -33,7 +33,7 @@ use crate::symbol::{kw, Symbol};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use std::{fmt, mem};\n+use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n #[derive(Clone, Copy, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]\n@@ -387,6 +387,23 @@ pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {\n     HygieneData::with(|data| data.walk_chain(span, to))\n }\n \n+pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {\n+    // The new contexts that need updating are at the end of the list and have `$crate` as a name.\n+    let (len, to_update) = HygieneData::with(|data| (\n+        data.syntax_contexts.len(),\n+        data.syntax_contexts.iter().rev()\n+            .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate).count()\n+    ));\n+    // The callback must be called from outside of the `HygieneData` lock,\n+    // since it will try to acquire it too.\n+    let range_to_update = len - to_update .. len;\n+    let names: Vec<_> =\n+        range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();\n+    HygieneData::with(|data| range_to_update.zip(names.into_iter()).for_each(|(idx, name)| {\n+        data.syntax_contexts[idx].dollar_crate_name = name;\n+    }))\n+}\n+\n impl SyntaxContext {\n     #[inline]\n     pub const fn empty() -> Self {\n@@ -614,17 +631,6 @@ impl SyntaxContext {\n     pub fn dollar_crate_name(self) -> Symbol {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].dollar_crate_name)\n     }\n-\n-    pub fn set_dollar_crate_name(self, dollar_crate_name: Symbol) {\n-        HygieneData::with(|data| {\n-            let prev_dollar_crate_name = mem::replace(\n-                &mut data.syntax_contexts[self.0 as usize].dollar_crate_name, dollar_crate_name\n-            );\n-            assert!(dollar_crate_name == prev_dollar_crate_name ||\n-                    prev_dollar_crate_name == kw::DollarCrate,\n-                    \"$crate name is reset for a syntax context\");\n-        })\n-    }\n }\n \n impl fmt::Debug for SyntaxContext {"}, {"sha": "cea88f14dcc65045e44b4c57cffd6f50cb3a7bb8", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -913,7 +913,10 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                               GlobalValue::LinkageTypes NewLinkage) {\n     ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n   };\n-#if LLVM_VERSION_GE(8, 0)\n+#if LLVM_VERSION_GE(9, 0)\n+  thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage,\n+                                  Ret->GUIDPreservedSymbols);\n+#elif LLVM_VERSION_GE(8, 0)\n   thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n #else\n   thinLTOResolveWeakForLinkerInIndex(Ret->Index, isPrevailing, recordNewLinkage);"}, {"sha": "16d08ee534edc413f6b1a9f88ba11e151b35f1de", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -237,6 +237,17 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n       Call->getContext(), Index, B));\n }\n \n+extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n+                                             LLVMTypeRef Ty) {\n+  CallSite Call = CallSite(unwrap<Instruction>(Instr));\n+#if LLVM_VERSION_GE(9, 0)\n+  Attribute Attr = Attribute::getWithByValType(Call->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(Call->getContext(), Attribute::ByVal);\n+#endif\n+  Call.addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n@@ -271,6 +282,17 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n   A->addAttributes(Index, B);\n }\n \n+extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n+                                     LLVMTypeRef Ty) {\n+  Function *F = unwrap<Function>(Fn);\n+#if LLVM_VERSION_GE(9, 0)\n+  Attribute Attr = Attribute::getWithByValType(F->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(F->getContext(), Attribute::ByVal);\n+#endif\n+  F->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,"}, {"sha": "790db33437b08d3694f6a034d83f4ae3c9326b38", "filename": "src/test/codegen/mainsubprogram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -7,7 +7,7 @@\n // compile-flags: -g -C no-prepopulate-passes\n \n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DISubprogram{{.*}}name: \"main\",{{.*}}DIFlagMainSubprogram{{.*}}\n+// CHECK: {{.*}}DISubprogram{{.*}}name: \"main\",{{.*}}DI{{(SP)?}}FlagMainSubprogram{{.*}}\n \n pub fn main() {\n }"}, {"sha": "d4de9f59ac27aad2cb848b68e559f65da4833c8e", "filename": "src/test/codegen/mainsubprogramstart.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -6,7 +6,7 @@\n #![feature(start)]\n \n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DISubprogram{{.*}}name: \"start\",{{.*}}DIFlagMainSubprogram{{.*}}\n+// CHECK: {{.*}}DISubprogram{{.*}}name: \"start\",{{.*}}DI{{(SP)?}}FlagMainSubprogram{{.*}}\n \n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {"}, {"sha": "bdcdb7922ca57a674f21ad4008422ac6189da4b3", "filename": "src/test/ui/proc-macro/auxiliary/dollar-crate-external.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -14,3 +14,9 @@ macro_rules! external {\n         struct D($crate::S);\n     };\n }\n+\n+#[macro_export]\n+macro_rules! issue_62325 { () => {\n+    #[print_attr]\n+    struct B(identity!($crate::S));\n+}}"}, {"sha": "84821259d7b9b9bd05fa967dc5777b8d1dc93185", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ( crate :: S ) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( crate :: S ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "b7b152e669213beea31d60755375f2ec85034bde", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+// edition:2018\n+// aux-build:test-macros.rs\n+// aux-build:dollar-crate-external.rs\n+\n+// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n+// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n+// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n+\n+#![feature(proc_macro_hygiene)]\n+\n+#[macro_use]\n+extern crate test_macros;\n+extern crate dollar_crate_external;\n+\n+type S = u8;\n+\n+macro_rules! m { () => {\n+    #[print_attr]\n+    struct A(identity!($crate::S));\n+}}\n+\n+m!();\n+\n+dollar_crate_external::issue_62325!();\n+\n+fn main() {}"}, {"sha": "17ad1a7af7046888f7a3629121ec7f4a7ed38ae1", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -0,0 +1,112 @@\n+PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( identity ! ( crate :: S ) ) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #2 bytes(LO..HI),\n+    },\n+    Ident {\n+        ident: \"A\",\n+        span: #2 bytes(LO..HI),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"identity\",\n+                span: #2 bytes(LO..HI),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: #2 bytes(LO..HI),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"$crate\",\n+                        span: #2 bytes(LO..HI),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Joint,\n+                        span: #2 bytes(LO..HI),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Alone,\n+                        span: #2 bytes(LO..HI),\n+                    },\n+                    Ident {\n+                        ident: \"S\",\n+                        span: #2 bytes(LO..HI),\n+                    },\n+                ],\n+                span: #2 bytes(LO..HI),\n+            },\n+        ],\n+        span: #2 bytes(LO..HI),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #2 bytes(LO..HI),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): struct B(identity!(::dollar_crate_external :: S));\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct B ( identity ! ( ::dollar_crate_external :: S ) ) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #7 bytes(LO..HI),\n+    },\n+    Ident {\n+        ident: \"B\",\n+        span: #7 bytes(LO..HI),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"identity\",\n+                span: #7 bytes(LO..HI),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: #7 bytes(LO..HI),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"$crate\",\n+                        span: #7 bytes(LO..HI),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Joint,\n+                        span: #7 bytes(LO..HI),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Alone,\n+                        span: #7 bytes(LO..HI),\n+                    },\n+                    Ident {\n+                        ident: \"S\",\n+                        span: #7 bytes(LO..HI),\n+                    },\n+                ],\n+                span: #7 bytes(LO..HI),\n+            },\n+        ],\n+        span: #7 bytes(LO..HI),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #7 bytes(LO..HI),\n+    },\n+]"}, {"sha": "9d9677d49e31898e48450f5c10e04865542a0685", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ( crate :: S ) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( crate :: S ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -80,7 +80,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( crate :: S ) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -120,7 +120,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ( ::dollar_crate_external :: S ) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -161,7 +161,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( ::dollar_crate_external :: S ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -202,7 +202,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( ::dollar_crate_external :: S ) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}]}