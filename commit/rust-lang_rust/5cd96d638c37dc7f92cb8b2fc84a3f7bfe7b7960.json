{"sha": "5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZDk2ZDYzOGMzN2RjN2Y5MmNiOGIyZmM4NGEzZjdiZmU3Yjc5NjA=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-09-23T21:44:54Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-10-28T17:54:06Z"}, "message": "rustdoc: Provide a way to set the default settings from Rust code\n\nrustdoc has various user-configurable preferences.  These are recorded\nin web Local Storage (where available).  But we want to provide a way\nto configure the default default, including for when web storage is\nnot available.\n\ngetSettingValue is the function responsible for looking up these\nsettings.  Here we make it fall back some in-DOM data, which\nultimately comes from RenderOptions.default_settings.\n\nUsing HTML data atrtributes is fairly convenient here, dsspite the\nneed to transform between snake and kebab case to avoid the DOM\nconverting kebab case to camel case (!)\n\nWe cache the element and dataset lookup in a global variable, to\nensure that getSettingValue remains fast.\n\nThe DOM representation has to be in an element which precedes the\ninclusion of storage.js.  That means it has to be in the <head> and we\nshould not use an empty <div> as the container (although most browsers\nwill accept that).  An empty <script> element provides a convenient\nand harmless container object.  <meta> would be another possibility\nbut runs a greater risk of having unwanted behaviours on weird\nbrowsers.\n\nWe trust the RenderOptions not to contain unhelpful setting names,\nwhich don't fit nicely into an HTML attribute.  It's awkward to quote\ndataset keys.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "63e1a506626c7754d0a9f15b7bcb128f86c05d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e1a506626c7754d0a9f15b7bcb128f86c05d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "html_url": "https://github.com/rust-lang/rust/commit/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e10475fdd764365255596e4cb0c21b521456823", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e10475fdd764365255596e4cb0c21b521456823", "html_url": "https://github.com/rust-lang/rust/commit/2e10475fdd764365255596e4cb0c21b521456823"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "baa0a9341267a86e72a826ecf0eb565ab811b00a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::BTreeMap;\n+use std::collections::{BTreeMap, HashMap};\n use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n@@ -216,6 +216,9 @@ pub struct RenderOptions {\n     pub extension_css: Option<PathBuf>,\n     /// A map of crate names to the URL to use instead of querying the crate's `html_root_url`.\n     pub extern_html_root_urls: BTreeMap<String, String>,\n+    /// A map of the default settings (values are as for DOM storage API).  Keys should lack the\n+    /// `rustdoc-` prefix.\n+    pub default_settings: HashMap<String, String>,\n     /// If present, suffix added to CSS/JavaScript files when referencing them in generated pages.\n     pub resource_suffix: String,\n     /// Whether to run the static CSS/JavaScript through a minifier when outputting them. `true` by\n@@ -596,6 +599,7 @@ impl Options {\n                 themes,\n                 extension_css,\n                 extern_html_root_urls,\n+                default_settings: Default::default(),\n                 resource_suffix,\n                 enable_minification,\n                 enable_index_page,"}, {"sha": "5489113366258c59c06f0d7ac3534b94a0b165f0", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "patch": "@@ -1,3 +1,4 @@\n+use std::collections::HashMap;\n use std::path::PathBuf;\n \n use crate::externalfiles::ExternalHtml;\n@@ -10,6 +11,7 @@ pub struct Layout {\n     pub logo: String,\n     pub favicon: String,\n     pub external_html: ExternalHtml,\n+    pub default_settings: HashMap<String, String>,\n     pub krate: String,\n     /// The given user css file which allow to customize the generated\n     /// documentation theme.\n@@ -53,6 +55,7 @@ pub fn render<T: Print, S: Print>(\n     <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}rustdoc{suffix}.css\\\" \\\n           id=\\\"mainThemeStyle\\\">\\\n     {style_files}\\\n+    <script id=\\\"default-settings\\\"{default_settings}></script>\\\n     <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n     <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n@@ -172,6 +175,11 @@ pub fn render<T: Print, S: Print>(\n         after_content = layout.external_html.after_content,\n         sidebar = Buffer::html().to_display(sidebar),\n         krate = layout.krate,\n+        default_settings = layout\n+            .default_settings\n+            .iter()\n+            .map(|(k, v)| format!(r#\" data-{}=\"{}\"\"#, k.replace('-',\"_\"), Escape(v),))\n+            .collect::<String>(),\n         style_files = style_files\n             .iter()\n             .filter_map(|t| {"}, {"sha": "ca8b811681cc9c9c60a4da433477b3450e056100", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "patch": "@@ -1228,6 +1228,7 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"render-detail\".to_owned(), 1);\n     map.insert(\"toggle-all-docs\".to_owned(), 1);\n     map.insert(\"all-types\".to_owned(), 1);\n+    map.insert(\"default-settings\".to_owned(), 1);\n     // This is the list of IDs used by rustdoc sections.\n     map.insert(\"fields\".to_owned(), 1);\n     map.insert(\"variants\".to_owned(), 1);"}, {"sha": "0621eafd913474a5ff1181cc848621caf3aa5345", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "patch": "@@ -392,6 +392,7 @@ impl FormatRenderer for Context {\n             playground_url,\n             sort_modules_alphabetically,\n             themes: style_files,\n+            default_settings,\n             extension_css,\n             resource_suffix,\n             static_root_path,\n@@ -415,6 +416,7 @@ impl FormatRenderer for Context {\n             logo: String::new(),\n             favicon: String::new(),\n             external_html,\n+            default_settings,\n             krate: krate.name.clone(),\n             css_file_extension: extension_css,\n             generate_search_filter,"}, {"sha": "d081781f14be15b8fba7e86ca367c87c2365b405", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=5cd96d638c37dc7f92cb8b2fc84a3f7bfe7b7960", "patch": "@@ -5,8 +5,30 @@ var darkThemes = [\"dark\", \"ayu\"];\n var currentTheme = document.getElementById(\"themeStyle\");\n var mainTheme = document.getElementById(\"mainThemeStyle\");\n \n+var settingsDataset = (function () {\n+    var settingsElement = document.getElementById(\"default-settings\");\n+    if (settingsElement === null) {\n+        return null;\n+    }\n+    var dataset = settingsElement.dataset;\n+    if (dataset === undefined) {\n+        return null;\n+    }\n+    return dataset;\n+})();\n+\n function getSettingValue(settingName) {\n-    return getCurrentValue('rustdoc-' + settingName);\n+    var current = getCurrentValue('rustdoc-' + settingName);\n+    if (current !== null) {\n+        return current;\n+    }\n+    if (settingsDataset !== null) {\n+        var def = settingsDataset[settingName.replace(/-/g,'_')];\n+        if (def !== undefined) {\n+            return def;\n+        }\n+    }\n+    return null;\n }\n \n var localStoredTheme = getSettingValue(\"theme\");"}]}