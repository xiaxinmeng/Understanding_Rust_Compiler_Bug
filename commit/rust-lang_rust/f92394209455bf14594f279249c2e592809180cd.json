{"sha": "f92394209455bf14594f279249c2e592809180cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MjM5NDIwOTQ1NWJmMTQ1OTRmMjc5MjQ5YzJlNTkyODA5MTgwY2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-03T20:59:03Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:08Z"}, "message": "resolve: Divide macro path resolution into speculative and error reporting parts\n\nAlso move macro stability checking closer to other checks performed on obtained resolutions.\nTighten the stability spans as well, it is an error to *refer* to and unstable entity in any way, not only \"call\" it.", "tree": {"sha": "e726e1edca5ed4408424fc31bbd66791b3fc497e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e726e1edca5ed4408424fc31bbd66791b3fc497e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92394209455bf14594f279249c2e592809180cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92394209455bf14594f279249c2e592809180cd", "html_url": "https://github.com/rust-lang/rust/commit/f92394209455bf14594f279249c2e592809180cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92394209455bf14594f279249c2e592809180cd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc187d1047b3680efe2cda53dcc83f45012578b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc187d1047b3680efe2cda53dcc83f45012578b", "html_url": "https://github.com/rust-lang/rust/commit/8bc187d1047b3680efe2cda53dcc83f45012578b"}], "stats": {"total": 159, "additions": 77, "deletions": 82}, "files": [{"sha": "16fd8cccc8920dc12822f03f464280a84c63dc9b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -755,11 +755,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub fn get_macro(&mut self, res: Res) -> Lrc<SyntaxExtension> {\n-        self.opt_get_macro(res).expect(\"expected `DefKind::Macro` or `Res::NonMacroAttr`\")\n-    }\n-\n-    crate fn opt_get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n+    pub fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n         let def_id = match res {\n             Res::Def(DefKind::Macro(..), def_id) => def_id,\n             Res::NonMacroAttr(attr_kind) =>"}, {"sha": "077c126bdee66ae89b39399826e6f5f6162f4924", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -229,13 +229,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n \n         let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        let (res, ext) = self.resolve_macro_to_res(path, kind, &parent_scope, true, force)?;\n+        let (ext, res) = self.smart_resolve_macro_path(path, kind, &parent_scope, true, force)?;\n \n         let span = invoc.span();\n-        let descr = fast_print_path(path);\n-        invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, descr));\n-\n-        self.check_stability_and_deprecation(&ext, descr, span);\n+        invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, fast_print_path(path)));\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n@@ -275,47 +272,42 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn resolve_macro_to_res(\n+    /// Resolve macro path with error reporting and recovery.\n+    fn smart_resolve_macro_path(\n         &mut self,\n         path: &ast::Path,\n         kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n         trace: bool,\n         force: bool,\n-    ) -> Result<(Res, Lrc<SyntaxExtension>), Indeterminate> {\n-        let res = self.resolve_macro_to_res_inner(path, kind, parent_scope, trace, force);\n+    ) -> Result<(Lrc<SyntaxExtension>, Res), Indeterminate> {\n+        let (ext, res) = match self.resolve_macro_path(path, kind, parent_scope, trace, force) {\n+            Ok((Some(ext), res)) => (ext, res),\n+            // Use dummy syntax extensions for unresolved macros for better recovery.\n+            Ok((None, res)) => (self.dummy_ext(kind), res),\n+            Err(Determinacy::Determined) => (self.dummy_ext(kind), Res::Err),\n+            Err(Determinacy::Undetermined) => return Err(Indeterminate),\n+        };\n \n         // Report errors and enforce feature gates for the resolved macro.\n         let features = self.session.features_untracked();\n-        if res != Err(Determinacy::Undetermined) {\n-            // Do not report duplicated errors on every undetermined resolution.\n-            for segment in &path.segments {\n-                if let Some(args) = &segment.args {\n-                    self.session.span_err(args.span(), \"generic arguments in macro path\");\n-                }\n-                if kind == MacroKind::Attr && !features.rustc_attrs &&\n-                   segment.ident.as_str().starts_with(\"rustc\") {\n-                    let msg = \"attributes starting with `rustc` are \\\n-                               reserved for use by the `rustc` compiler\";\n-                    emit_feature_err(\n-                        &self.session.parse_sess,\n-                        sym::rustc_attrs,\n-                        segment.ident.span,\n-                        GateIssue::Language,\n-                        msg,\n-                    );\n-                }\n+        for segment in &path.segments {\n+            if let Some(args) = &segment.args {\n+                self.session.span_err(args.span(), \"generic arguments in macro path\");\n             }\n-        }\n-\n-        let res = match res {\n-            Err(Determinacy::Undetermined) => return Err(Indeterminate),\n-            Ok(Res::Err) | Err(Determinacy::Determined) => {\n-                // Return dummy syntax extensions for unresolved macros for better recovery.\n-                return Ok((Res::Err, self.dummy_ext(kind)));\n+            if kind == MacroKind::Attr && !features.rustc_attrs &&\n+               segment.ident.as_str().starts_with(\"rustc\") {\n+                let msg =\n+                    \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\";\n+                emit_feature_err(\n+                    &self.session.parse_sess,\n+                    sym::rustc_attrs,\n+                    segment.ident.span,\n+                    GateIssue::Language,\n+                    msg,\n+                );\n             }\n-            Ok(res) => res,\n-        };\n+        }\n \n         match res {\n             Res::Def(DefKind::Macro(_), def_id) => {\n@@ -345,20 +337,22 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n             }\n+            Res::Err => {}\n             _ => panic!(\"expected `DefKind::Macro` or `Res::NonMacroAttr`\"),\n         };\n \n-        let ext = self.get_macro(res);\n+        self.check_stability_and_deprecation(&ext, path);\n+\n         Ok(if ext.macro_kind() != kind {\n             let expected = if kind == MacroKind::Attr { \"attribute\" } else  { kind.descr() };\n             let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path);\n             self.session.struct_span_err(path.span, &msg)\n                         .span_label(path.span, format!(\"not {} {}\", kind.article(), expected))\n                         .emit();\n-            // Return dummy syntax extensions for unexpected macro kinds for better recovery.\n-            (Res::Err, self.dummy_ext(kind))\n+            // Use dummy syntax extensions for unexpected macro kinds for better recovery.\n+            (self.dummy_ext(kind), Res::Err)\n         } else {\n-            (res, ext)\n+            (ext, res)\n         })\n     }\n \n@@ -416,14 +410,14 @@ impl<'a> Resolver<'a> {\n         err.emit();\n     }\n \n-    pub fn resolve_macro_to_res_inner(\n+    pub fn resolve_macro_path(\n         &mut self,\n         path: &ast::Path,\n         kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n         trace: bool,\n         force: bool,\n-    ) -> Result<Res, Determinacy> {\n+    ) -> Result<(Option<Lrc<SyntaxExtension>>, Res), Determinacy> {\n         let path_span = path.span;\n         let mut path = Segment::from_path(path);\n \n@@ -435,7 +429,7 @@ impl<'a> Resolver<'a> {\n             path.insert(0, Segment::from_ident(root));\n         }\n \n-        if path.len() > 1 {\n+        let res = if path.len() > 1 {\n             let res = match self.resolve_path(&path, Some(MacroNS), parent_scope,\n                                               false, path_span, CrateLint::No) {\n                 PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 => {\n@@ -471,7 +465,9 @@ impl<'a> Resolver<'a> {\n             let res = binding.map(|binding| binding.res());\n             self.prohibit_imported_non_macro_attrs(binding.ok(), res.ok(), path_span);\n             res\n-        }\n+        };\n+\n+        res.map(|res| (self.get_macro(res), res))\n     }\n \n     // Resolve an identifier in lexical scope.\n@@ -600,16 +596,18 @@ impl<'a> Resolver<'a> {\n                     let mut result = Err(Determinacy::Determined);\n                     for derive in &parent_scope.derives {\n                         let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n-                        match self.resolve_macro_to_res(derive, MacroKind::Derive,\n-                                                        &parent_scope, true, force) {\n-                            Ok((_, ext)) => if ext.helper_attrs.contains(&ident.name) {\n+                        match self.resolve_macro_path(derive, MacroKind::Derive,\n+                                                      &parent_scope, true, force) {\n+                            Ok((Some(ext), _)) => if ext.helper_attrs.contains(&ident.name) {\n                                 let binding = (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n                                                ty::Visibility::Public, derive.span, Mark::root())\n                                                .to_name_binding(self.arenas);\n                                 result = Ok((binding, Flags::empty()));\n                                 break;\n                             }\n-                            Err(Indeterminate) => result = Err(Determinacy::Undetermined),\n+                            Ok(_) | Err(Determinacy::Determined) => {}\n+                            Err(Determinacy::Undetermined) =>\n+                                result = Err(Determinacy::Undetermined),\n                         }\n                     }\n                     result\n@@ -1004,7 +1002,8 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, descr: Symbol, span: Span) {\n+    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &ast::Path) {\n+        let span = path.span;\n         if let Some(stability) = &ext.stability {\n             if let StabilityLevel::Unstable { reason, issue } = stability.level {\n                 let feature = stability.feature;\n@@ -1013,14 +1012,14 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             if let Some(depr) = &stability.rustc_depr {\n-                let (message, lint) = stability::rustc_deprecation_message(depr, &descr.as_str());\n+                let (message, lint) = stability::rustc_deprecation_message(depr, &path.to_string());\n                 stability::early_report_deprecation(\n                     self.session, &message, depr.suggestion, lint, span\n                 );\n             }\n         }\n         if let Some(depr) = &ext.deprecation {\n-            let (message, lint) = stability::deprecation_message(depr, &descr.as_str());\n+            let (message, lint) = stability::deprecation_message(depr, &path.to_string());\n             stability::early_report_deprecation(self.session, &message, None, lint, span);\n         }\n     }\n@@ -1101,7 +1100,7 @@ impl<'a> Resolver<'a> {\n         // Reserve some names that are not quite covered by the general check\n         // performed on `Resolver::builtin_attrs`.\n         if ident.name == sym::cfg || ident.name == sym::cfg_attr || ident.name == sym::derive {\n-            let macro_kind = self.opt_get_macro(res).map(|ext| ext.macro_kind());\n+            let macro_kind = self.get_macro(res).map(|ext| ext.macro_kind());\n             if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {\n                 self.session.span_err(\n                     ident.span, &format!(\"name `{}` is reserved in attribute namespace\", ident)"}, {"sha": "c527ed02bc05be9eca32140022b03c8f3ce11078", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -429,10 +429,10 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n     let segment = ast::PathSegment::from_ident(Ident::from_str(path_str));\n     let path = ast::Path { segments: vec![segment], span: DUMMY_SP };\n     cx.enter_resolver(|resolver| {\n-        if let Ok(res @ Res::Def(DefKind::Macro(_), _)) = resolver.resolve_macro_to_res_inner(\n+        if let Ok((Some(ext), res)) = resolver.resolve_macro_path(\n             &path, MacroKind::Bang, &resolver.dummy_parent_scope(), false, false\n         ) {\n-            if let SyntaxExtensionKind::LegacyBang { .. } = resolver.get_macro(res).kind {\n+            if let SyntaxExtensionKind::LegacyBang { .. } = ext.kind {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));\n             }\n         }"}, {"sha": "ab5cda43bfc8249636b0758be8faa826a9780822", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n   --> $DIR/feature-gate-asm.rs:3:9\n    |\n LL |         asm!(\"\");\n-   |         ^^^^^^^^^\n+   |         ^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29722\n    = help: add `#![feature(asm)]` to the crate attributes to enable"}, {"sha": "7519cad9a96ad770b2a2e0bb515618396edadff4", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n   --> $DIR/feature-gate-asm2.rs:5:26\n    |\n LL |         println!(\"{:?}\", asm!(\"\"));\n-   |                          ^^^^^^^^\n+   |                          ^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29722\n    = help: add `#![feature(asm)]` to the crate attributes to enable"}, {"sha": "8639f622cd732e58f0c8ae30c662aa1cef6131f0", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n   --> $DIR/feature-gate-concat_idents.rs:5:13\n    |\n LL |     let a = concat_idents!(X, Y_1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n@@ -11,7 +11,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n   --> $DIR/feature-gate-concat_idents.rs:6:13\n    |\n LL |     let b = concat_idents!(X, Y_2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable"}, {"sha": "4ae5e3e73087bd4f9fe2310241856a809882da93", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n   --> $DIR/feature-gate-concat_idents2.rs:4:5\n    |\n LL |     concat_idents!(a, b);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable"}, {"sha": "367638693d70a56cfc4a80d088153390257317e4", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n   --> $DIR/feature-gate-concat_idents3.rs:7:20\n    |\n LL |     assert_eq!(10, concat_idents!(X, Y_1));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n@@ -11,7 +11,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n   --> $DIR/feature-gate-concat_idents3.rs:8:20\n    |\n LL |     assert_eq!(20, concat_idents!(X, Y_2));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable"}, {"sha": "b211e2f8ed8a222da71a867aeae819a40aba16ae", "filename": "src/test/ui/feature-gates/feature-gate-format_args_nl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'format_args_nl': `format_args_nl`\n   --> $DIR/feature-gate-format_args_nl.rs:2:5\n    |\n LL |     format_args_nl!(\"\");\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(format_args_nl)]` to the crate attributes to enable\n "}, {"sha": "733b8d08f77dd2dce464e4fc4bab1f53df168839", "filename": "src/test/ui/feature-gates/feature-gate-global_asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'global_asm': `global_asm!` is not\n   --> $DIR/feature-gate-global_asm.rs:1:1\n    |\n LL | global_asm!(\"\");\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35119\n    = help: add `#![feature(global_asm)]` to the crate attributes to enable"}, {"sha": "fa57c20ecd5d51539797ac5625e49ee5b4fc3eb4", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not\n   --> $DIR/feature-gate-log_syntax.rs:2:5\n    |\n LL |     log_syntax!()\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(log_syntax)]` to the crate attributes to enable"}, {"sha": "0443b988b41dc172e8aa5786ea05a30e3379f775", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not\n   --> $DIR/feature-gate-log_syntax2.rs:4:22\n    |\n LL |     println!(\"{:?}\", log_syntax!());\n-   |                      ^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(log_syntax)]` to the crate attributes to enable"}, {"sha": "cca081875271893697e685be35405b1da67ccb6c", "filename": "src/test/ui/feature-gates/feature-gate-trace_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n   --> $DIR/feature-gate-trace_macros.rs:2:5\n    |\n LL |     trace_macros!(true);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable"}, {"sha": "4c2ad7d2fe9e7c5b65efc4d9beb19acdd1d165db", "filename": "src/test/ui/macros/macro-deprecation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,13 +2,13 @@ warning: use of deprecated item 'local_deprecated': local deprecation note\n   --> $DIR/macro-deprecation.rs:11:5\n    |\n LL |     local_deprecated!();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: use of deprecated item 'deprecated_macro': deprecation note\n   --> $DIR/macro-deprecation.rs:12:5\n    |\n LL |     deprecated_macro!();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n "}, {"sha": "21c48bfe5e78cfd5641f049917ec53450c7e1b94", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,39 +2,39 @@ error[E0658]: use of unstable library feature 'local_unstable'\n   --> $DIR/macro-stability.rs:19:5\n    |\n LL |     local_unstable!();\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(local_unstable)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'local_unstable'\n   --> $DIR/macro-stability.rs:20:5\n    |\n LL |     local_unstable_modern!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(local_unstable)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_macros'\n   --> $DIR/macro-stability.rs:21:5\n    |\n LL |     unstable_macro!();\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(unstable_macros)]` to the crate attributes to enable\n \n warning: use of deprecated item 'deprecated_macro': deprecation reason\n   --> $DIR/macro-stability.rs:24:5\n    |\n LL |     deprecated_macro!();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: use of deprecated item 'local_deprecated': local deprecation reason\n   --> $DIR/macro-stability.rs:26:5\n    |\n LL |     local_deprecated!();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c581a16dbb038ad7bdc6615e3b4f8ff022063718", "filename": "src/test/ui/rust-unstable-column-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature '__rust_unstable_column': internal\n   --> $DIR/rust-unstable-column-gated.rs:2:20\n    |\n LL |     println!(\"{}\", __rust_unstable_column!());\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(__rust_unstable_column)]` to the crate attributes to enable\n "}, {"sha": "7b9542730713cf4a58157418201c3d89bd810e35", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92394209455bf14594f279249c2e592809180cd/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=f92394209455bf14594f279249c2e592809180cd", "patch": "@@ -2,7 +2,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n   --> $DIR/trace_macros-gate.rs:4:5\n    |\n LL |     trace_macros!();\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n@@ -17,7 +17,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n   --> $DIR/trace_macros-gate.rs:6:5\n    |\n LL |     trace_macros!(true);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n@@ -26,7 +26,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n   --> $DIR/trace_macros-gate.rs:7:5\n    |\n LL |     trace_macros!(false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n@@ -35,7 +35,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n   --> $DIR/trace_macros-gate.rs:10:26\n    |\n LL |         ($x: ident) => { trace_macros!($x) }\n-   |                          ^^^^^^^^^^^^^^^^^\n+   |                          ^^^^^^^^^^^^\n ...\n LL |     expando!(true);\n    |     --------------- in this macro invocation"}]}