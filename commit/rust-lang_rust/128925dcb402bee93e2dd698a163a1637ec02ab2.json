{"sha": "128925dcb402bee93e2dd698a163a1637ec02ab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyODkyNWRjYjQwMmJlZTkzZTJkZDY5OGExNjNhMTYzN2VjMDJhYjI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T07:09:20Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T13:53:16Z"}, "message": "Use visual indent style in where-clause.rs", "tree": {"sha": "a8f2f5f7d6efdac7f5dc749c0aefa682b267c919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f2f5f7d6efdac7f5dc749c0aefa682b267c919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128925dcb402bee93e2dd698a163a1637ec02ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128925dcb402bee93e2dd698a163a1637ec02ab2", "html_url": "https://github.com/rust-lang/rust/commit/128925dcb402bee93e2dd698a163a1637ec02ab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128925dcb402bee93e2dd698a163a1637ec02ab2/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758c54e9d5bfa40932889056b85798608f03d3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/758c54e9d5bfa40932889056b85798608f03d3ac", "html_url": "https://github.com/rust-lang/rust/commit/758c54e9d5bfa40932889056b85798608f03d3ac"}], "stats": {"total": 146, "additions": 133, "deletions": 13}, "files": [{"sha": "2a9160825487a1acce8fb777e955573ae4dfb7b8", "filename": "rustfmt-core/tests/source/where-clause.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/128925dcb402bee93e2dd698a163a1637ec02ab2/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128925dcb402bee93e2dd698a163a1637ec02ab2/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fwhere-clause.rs?ref=128925dcb402bee93e2dd698a163a1637ec02ab2", "patch": "@@ -1,5 +1,32 @@\n+// rustfmt-indent_style: Visual\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape) where T: FOo, U: Bar {\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape) where T: FOo {\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape, shape: &Shape) where T: FOo, U: Bar {\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape, shape: &Shape) where T: FOo {\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape) -> Option<String> where T: FOo, U: Bar {\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape) -> Option<String> where T: FOo {\n+    let mut effects = HashMap::new();\n+}\n+\n pub trait Test {\n     fn very_long_method_name<F>(self, f: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool;\n+\n     fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType where F: FnMut(Self::Item) -> bool;\n }\n \n@@ -14,3 +41,18 @@ struct Exactly100CharsToSemicolon<A, B, C, D, E>\n struct AlwaysOnNextLine<LongLongTypename, LongTypename, A, B, C, D, E, F> where A: LongTrait {\n     x: i32\n }\n+\n+pub trait SomeTrait<T>\n+    where\n+    T: Something + Sync + Send + Display     + Debug     + Copy + Hash + Debug + Display + Write + Read + FromStr\n+{\n+}\n+\n+// #2020\n+impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n+    fn elaborate_bounds<F>(&mut self, bounds: &[ty::PolyTraitRef<'tcx>], mut mk_cand: F)\n+    where F: for<'b> FnMut(&mut ProbeContext<'b, 'gcx, 'tcx>, ty::PolyTraitRef<'tcx>, ty::AssociatedItem),\n+    {\n+        // ...\n+    }\n+}"}, {"sha": "def18a0c11a8d02b37ec1362510e81cedb2e53be", "filename": "rustfmt-core/tests/target/where-clause.rs", "status": "modified", "additions": 91, "deletions": 13, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/128925dcb402bee93e2dd698a163a1637ec02ab2/rustfmt-core%2Ftests%2Ftarget%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128925dcb402bee93e2dd698a163a1637ec02ab2/rustfmt-core%2Ftests%2Ftarget%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fwhere-clause.rs?ref=128925dcb402bee93e2dd698a163a1637ec02ab2", "patch": "@@ -1,29 +1,107 @@\n+// rustfmt-indent_style: Visual\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)\n+    where T: FOo,\n+          U: Bar\n+{\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)\n+    where T: FOo\n+{\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode,\n+                              rule: &Rule,\n+                              args: &[Arg],\n+                              shape: &Shape,\n+                              shape: &Shape)\n+    where T: FOo,\n+          U: Bar\n+{\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode,\n+                              rule: &Rule,\n+                              args: &[Arg],\n+                              shape: &Shape,\n+                              shape: &Shape)\n+    where T: FOo\n+{\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode,\n+                              rule: &Rule,\n+                              args: &[Arg],\n+                              shape: &Shape)\n+                              -> Option<String>\n+    where T: FOo,\n+          U: Bar\n+{\n+    let mut effects = HashMap::new();\n+}\n+\n+fn reflow_list_node_with_rule(node: &CompoundNode,\n+                              rule: &Rule,\n+                              args: &[Arg],\n+                              shape: &Shape)\n+                              -> Option<String>\n+    where T: FOo\n+{\n+    let mut effects = HashMap::new();\n+}\n+\n pub trait Test {\n     fn very_long_method_name<F>(self, f: F) -> MyVeryLongReturnType\n-    where\n-        F: FnMut(Self::Item) -> bool;\n+        where F: FnMut(Self::Item) -> bool;\n+\n     fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType\n-    where\n-        F: FnMut(Self::Item) -> bool;\n+        where F: FnMut(Self::Item) -> bool;\n }\n \n fn very_long_function_name<F>(very_long_argument: F) -> MyVeryLongReturnType\n-where\n-    F: FnMut(Self::Item) -> bool,\n+    where F: FnMut(Self::Item) -> bool\n {\n }\n \n struct VeryLongTupleStructName<A, B, C, D, E>(LongLongTypename, LongLongTypename, i32, i32)\n-where\n-    A: LongTrait;\n+    where A: LongTrait;\n \n-struct Exactly100CharsToSemicolon<A, B, C, D, E>(LongLongTypename, i32, i32)\n-where\n-    A: LongTrait1234;\n+struct Exactly100CharsToSemicolon<A, B, C, D, E>(LongLongTypename, i32, i32) where A: LongTrait1234;\n \n struct AlwaysOnNextLine<LongLongTypename, LongTypename, A, B, C, D, E, F>\n-where\n-    A: LongTrait,\n+    where A: LongTrait\n {\n     x: i32,\n }\n+\n+pub trait SomeTrait<T>\n+    where T: Something\n+                 + Sync\n+                 + Send\n+                 + Display\n+                 + Debug\n+                 + Copy\n+                 + Hash\n+                 + Debug\n+                 + Display\n+                 + Write\n+                 + Read\n+                 + FromStr\n+{\n+}\n+\n+// #2020\n+impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n+    fn elaborate_bounds<F>(&mut self, bounds: &[ty::PolyTraitRef<'tcx>], mut mk_cand: F)\n+        where F: for<'b> FnMut(&mut ProbeContext<'b, 'gcx, 'tcx>,\n+                               ty::PolyTraitRef<'tcx>,\n+                               ty::AssociatedItem)\n+    {\n+        // ...\n+    }\n+}"}]}