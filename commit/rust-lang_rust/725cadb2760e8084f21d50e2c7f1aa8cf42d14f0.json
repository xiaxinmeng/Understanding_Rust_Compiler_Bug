{"sha": "725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "node_id": "C_kwDOAAsO6NoAKDcyNWNhZGIyNzYwZTgwODRmMjFkNTBlMmM3ZjFhYThjZjQyZDE0ZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-25T06:01:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-25T06:01:08Z"}, "message": "Rollup merge of #111624 - cjgillot:private-uninhabited-pattern, r=petrochenkov\n\nEmit diagnostic for privately uninhabited uncovered witnesses.\n\nFixes https://github.com/rust-lang/rust/issues/104034\n\ncc `@Nadrieril`", "tree": {"sha": "426b0a14505bcc88864eadd3644ab1917b530246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/426b0a14505bcc88864eadd3644ab1917b530246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbvmkCRBK7hj4Ov3rIwAALEIIAC20DyozxFRNLgKigz40JYN/\nyzY/szr2AOfD493DAgsBpjUWnhmMhDqQCfygSRwktxQJ4Qoj6syIXwMtEyyaIhdC\n9oI5vHQw0+nJJyrQJJgPzLl/blHae92VuRAsvG2a1taSa0h+A1OLPQlTlkVTRD8Q\nkeSdtk4UR45iDPyfxBpEVuNCY1rsYqC+Om2DZjLPAGsmGekAuCP69W4GLFNZawf7\nuPAYzOVYqrIHjR+n5Ku2XvQOLyCYSnGaRiSJU3LlfpFLXrIFcf5NX/keEVwLqySD\nvOShPxzJD56g0wQcGv3/sh/BSMUigTAac8sRN3GlEdMhl2/AxXAmyryb3PvMTbk=\n=iCZg\n-----END PGP SIGNATURE-----\n", "payload": "tree 426b0a14505bcc88864eadd3644ab1917b530246\nparent 87bb7d8ac78e5c110f8f9bcf6fe96f634445eafd\nparent 9a7ed3625f57ad21d646f835975ab42929214b60\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684994468 +0200\ncommitter GitHub <noreply@github.com> 1684994468 +0200\n\nRollup merge of #111624 - cjgillot:private-uninhabited-pattern, r=petrochenkov\n\nEmit diagnostic for privately uninhabited uncovered witnesses.\n\nFixes https://github.com/rust-lang/rust/issues/104034\n\ncc `@Nadrieril`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "html_url": "https://github.com/rust-lang/rust/commit/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87bb7d8ac78e5c110f8f9bcf6fe96f634445eafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bb7d8ac78e5c110f8f9bcf6fe96f634445eafd", "html_url": "https://github.com/rust-lang/rust/commit/87bb7d8ac78e5c110f8f9bcf6fe96f634445eafd"}, {"sha": "9a7ed3625f57ad21d646f835975ab42929214b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7ed3625f57ad21d646f835975ab42929214b60", "html_url": "https://github.com/rust-lang/rust/commit/9a7ed3625f57ad21d646f835975ab42929214b60"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "0282492a261c85dfbaa25f8c41037f333165bb3b", "filename": "compiler/rustc_mir_build/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/compiler%2Frustc_mir_build%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/compiler%2Frustc_mir_build%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fmessages.ftl?ref=725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "patch": "@@ -340,6 +340,8 @@ mir_build_uncovered = {$count ->\n         *[other] patterns `{$witness_1}`, `{$witness_2}`, `{$witness_3}` and {$remainder} more\n     } not covered\n \n+mir_build_privately_uninhabited = pattern `{$witness_1}` is currently uninhabited, but this variant contains private fields which may become inhabited in the future\n+\n mir_build_pattern_not_covered = refutable pattern in {$origin}\n     .pattern_ty = the matched value is of type `{$pattern_ty}`\n "}, {"sha": "7c0df201bc25e96f6f1f43f09c0ba69d6e863c0d", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "patch": "@@ -781,6 +781,8 @@ pub(crate) struct PatternNotCovered<'s, 'tcx> {\n     pub interpreted_as_const: Option<InterpretedAsConst>,\n     #[subdiagnostic]\n     pub adt_defined_here: Option<AdtDefinedHere<'tcx>>,\n+    #[note(mir_build_privately_uninhabited)]\n+    pub witness_1_is_privately_uninhabited: Option<()>,\n     #[note(mir_build_pattern_ty)]\n     pub _p: (),\n     pub pattern_ty: Ty<'tcx>,"}, {"sha": "5559e8b3940aeb5634685c7fdea98885d0e3e23b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "patch": "@@ -479,12 +479,30 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             AdtDefinedHere { adt_def_span, ty, variants }\n         };\n \n+        // Emit an extra note if the first uncovered witness is\n+        // visibly uninhabited anywhere in the current crate.\n+        let witness_1_is_privately_uninhabited =\n+            if cx.tcx.features().exhaustive_patterns\n+                && let Some(witness_1) = witnesses.get(0)\n+                && let ty::Adt(adt, substs) = witness_1.ty().kind()\n+                && adt.is_enum()\n+                && let Constructor::Variant(variant_index) = witness_1.ctor()\n+            {\n+                let variant = adt.variant(*variant_index);\n+                let inhabited = variant.inhabited_predicate(cx.tcx, *adt).subst(cx.tcx, substs);\n+                assert!(inhabited.apply(cx.tcx, cx.param_env, cx.module));\n+                !inhabited.apply_ignore_module(cx.tcx, cx.param_env)\n+            } else {\n+                false\n+            };\n+\n         self.error = Err(self.tcx.sess.emit_err(PatternNotCovered {\n             span: pat.span,\n             origin,\n             uncovered: Uncovered::new(pat.span, &cx, witnesses),\n             inform,\n             interpreted_as_const,\n+            witness_1_is_privately_uninhabited: witness_1_is_privately_uninhabited.then_some(()),\n             _p: (),\n             pattern_ty,\n             let_suggestion,"}, {"sha": "f7bf8581582316884971f4439c0007fd5b04dbf8", "filename": "tests/ui/never_type/exhaustive_patterns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/tests%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/tests%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr?ref=725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "patch": "@@ -14,6 +14,7 @@ LL | enum Either<A, B> {\n LL |     A(A),\n LL |     B(inner::Wrapper<B>),\n    |     - not covered\n+   = note: pattern `Either::B(_)` is currently uninhabited, but this variant contains private fields which may become inhabited in the future\n    = note: the matched value is of type `Either<(), !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "cfd60a8d903fa0c1945668caf61e3be4893eba3f", "filename": "tests/ui/uninhabited/uninhabited-irrefutable.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/tests%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/tests%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs?ref=725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "patch": "@@ -16,7 +16,9 @@ struct NotSoSecretlyEmpty {\n }\n \n enum Foo {\n+    //~^ NOTE `Foo` defined here\n     A(foo::SecretlyEmpty),\n+    //~^ NOTE not covered\n     B(foo::NotSoSecretlyEmpty),\n     C(NotSoSecretlyEmpty),\n     D(u32, u32),\n@@ -27,4 +29,9 @@ fn main() {\n     let Foo::D(_y, _z) = x;\n     //~^ ERROR refutable pattern in local binding\n     //~| `Foo::A(_)` not covered\n+    //~| NOTE `let` bindings require an \"irrefutable pattern\"\n+    //~| NOTE for more information\n+    //~| NOTE pattern `Foo::A(_)` is currently uninhabited\n+    //~| NOTE the matched value is of type `Foo`\n+    //~| HELP you might want to use `let else`\n }"}, {"sha": "daf75f51b5a110a5d8f416ea7a583cec9d388cf7", "filename": "tests/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/tests%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725cadb2760e8084f21d50e2c7f1aa8cf42d14f0/tests%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=725cadb2760e8084f21d50e2c7f1aa8cf42d14f0", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding\n-  --> $DIR/uninhabited-irrefutable.rs:27:9\n+  --> $DIR/uninhabited-irrefutable.rs:29:9\n    |\n LL |     let Foo::D(_y, _z) = x;\n    |         ^^^^^^^^^^^^^^ pattern `Foo::A(_)` not covered\n@@ -11,8 +11,10 @@ note: `Foo` defined here\n    |\n LL | enum Foo {\n    |      ^^^\n+LL |\n LL |     A(foo::SecretlyEmpty),\n    |     - not covered\n+   = note: pattern `Foo::A(_)` is currently uninhabited, but this variant contains private fields which may become inhabited in the future\n    = note: the matched value is of type `Foo`\n help: you might want to use `let else` to handle the variant that isn't matched\n    |"}]}