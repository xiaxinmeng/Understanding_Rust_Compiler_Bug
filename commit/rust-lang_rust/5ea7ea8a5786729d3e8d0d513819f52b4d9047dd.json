{"sha": "5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "node_id": "C_kwDOAAsO6NoAKDVlYTdlYThhNTc4NjcyOWQzZThkMGQ1MTM4MTlmNTJiNGQ5MDQ3ZGQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-11T13:04:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-30T21:55:07Z"}, "message": "Lint elided lifetimes in path during lifetime resolution.", "tree": {"sha": "f7c72c730650d096e7fdce85d7322eba1dd7a6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c72c730650d096e7fdce85d7322eba1dd7a6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "html_url": "https://github.com/rust-lang/rust/commit/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac03470c3ba4959d74ca1b61a57e0bcfb6d2d2f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac03470c3ba4959d74ca1b61a57e0bcfb6d2d2f3", "html_url": "https://github.com/rust-lang/rust/commit/ac03470c3ba4959d74ca1b61a57e0bcfb6d2d2f3"}], "stats": {"total": 259, "additions": 181, "deletions": 78}, "files": [{"sha": "a561475c76a0bb77907497933db67d81a3b726fc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -1928,6 +1928,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let param_name = match lt.name {\n                     hir::LifetimeName::Param(param_name) => param_name,\n                     hir::LifetimeName::Implicit\n+                    | hir::LifetimeName::ImplicitMissing\n                     | hir::LifetimeName::Underscore\n                     | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n                     hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n@@ -2322,11 +2323,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &'s mut self,\n         span: Span,\n         count: usize,\n+        param_mode: ParamMode,\n     ) -> impl Iterator<Item = hir::Lifetime> + Captures<'a> + Captures<'s> + Captures<'hir> {\n-        (0..count).map(move |_| self.elided_path_lifetime(span))\n+        (0..count).map(move |_| self.elided_path_lifetime(span, param_mode))\n     }\n \n-    fn elided_path_lifetime(&mut self, span: Span) -> hir::Lifetime {\n+    fn elided_path_lifetime(&mut self, span: Span, param_mode: ParamMode) -> hir::Lifetime {\n         match self.anonymous_lifetime_mode {\n             AnonymousLifetimeMode::CreateParameter => {\n                 // We should have emitted E0726 when processing this path above\n@@ -2342,7 +2344,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // lifetime. Instead, we simply create an implicit lifetime, which will be checked\n             // later, at which point a suitable error will be emitted.\n             AnonymousLifetimeMode::PassThrough | AnonymousLifetimeMode::ReportError => {\n-                self.new_implicit_lifetime(span)\n+                if param_mode == ParamMode::Explicit {\n+                    let id = self.resolver.next_node_id();\n+                    self.new_named_lifetime(id, span, hir::LifetimeName::ImplicitMissing)\n+                } else {\n+                    self.new_implicit_lifetime(span)\n+                }\n             }\n         }\n     }\n@@ -2536,7 +2543,9 @@ fn lifetimes_from_impl_trait_bounds(\n \n         fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n             let name = match lifetime.name {\n-                hir::LifetimeName::Implicit | hir::LifetimeName::Underscore => {\n+                hir::LifetimeName::Implicit\n+                | hir::LifetimeName::ImplicitMissing\n+                | hir::LifetimeName::Underscore => {\n                     if self.collect_elided_lifetimes {\n                         // Use `'_` for both implicit and underscore lifetimes in\n                         // `type Foo<'_> = impl SomeTrait<'_>;`."}, {"sha": "ab87867bb03881e0a5df40d8798d9922351ba617", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -7,8 +7,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n-use rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n-use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::symbol::Ident;\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n@@ -275,7 +273,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // See rustc_resolve::late::lifetimes::LifetimeContext::add_missing_lifetime_specifiers_label\n             let elided_lifetime_span = if generic_args.span.is_empty() {\n                 // If there are no brackets, use the identifier span.\n-                segment.ident.span\n+                path_span\n             } else if generic_args.is_empty() {\n                 // If there are brackets, but not generic arguments, then use the opening bracket\n                 generic_args.span.with_hi(generic_args.span.lo() + BytePos(1))\n@@ -284,7 +282,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 generic_args.span.with_lo(generic_args.span.lo() + BytePos(1)).shrink_to_lo()\n             };\n             generic_args.args = self\n-                .elided_path_lifetimes(elided_lifetime_span, expected_lifetimes)\n+                .elided_path_lifetimes(elided_lifetime_span, expected_lifetimes, param_mode)\n                 .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();\n@@ -329,21 +327,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         err.note(\"assuming a `'static` lifetime...\");\n                         err.emit();\n                     }\n-                    AnonymousLifetimeMode::PassThrough | AnonymousLifetimeMode::ReportError => {\n-                        self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                            ELIDED_LIFETIMES_IN_PATHS,\n-                            CRATE_NODE_ID,\n-                            path_span,\n-                            \"hidden lifetime parameters in types are deprecated\",\n-                            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n-                                expected_lifetimes,\n-                                path_span,\n-                                incl_angl_brckt,\n-                                insertion_sp,\n-                                suggestion,\n-                            ),\n-                        );\n-                    }\n+                    AnonymousLifetimeMode::PassThrough | AnonymousLifetimeMode::ReportError => {}\n                 }\n             }\n         }"}, {"sha": "64df452c73978704aab1f83cc17e149efceee88d", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -584,7 +584,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime_span))\n             }\n \n-            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Implicit => {\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault\n+            | hir::LifetimeName::Implicit\n+            | hir::LifetimeName::ImplicitMissing => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "e56761ea39a759ce2b0b86f3e7de4f8c1aa7e916", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -94,6 +94,9 @@ pub enum LifetimeName {\n     /// User wrote nothing (e.g., the lifetime in `&u32`).\n     Implicit,\n \n+    /// User wrote nothing, but should have provided something.\n+    ImplicitMissing,\n+\n     /// Implicit lifetime in a context like `dyn Foo`. This is\n     /// distinguished from implicit lifetimes elsewhere because the\n     /// lifetime that they default to must appear elsewhere within the\n@@ -123,6 +126,7 @@ impl LifetimeName {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n             | LifetimeName::Implicit\n+            | LifetimeName::ImplicitMissing\n             | LifetimeName::Error => Ident::empty(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n@@ -134,6 +138,7 @@ impl LifetimeName {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n             | LifetimeName::Implicit\n+            | LifetimeName::ImplicitMissing\n             | LifetimeName::Underscore => true,\n \n             // It might seem surprising that `Fresh(_)` counts as"}, {"sha": "5f8e4ba2d13980deaeec22bd1330b99f83979af1", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -546,6 +546,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         | LifetimeName::Static\n         | LifetimeName::Error\n         | LifetimeName::Implicit\n+        | LifetimeName::ImplicitMissing\n         | LifetimeName::ImplicitObjectLifetimeDefault\n         | LifetimeName::Underscore => {}\n     }"}, {"sha": "2186a9a73c58902888b768b1d37ef82349017db3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -1950,6 +1950,41 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         }\n     }\n \n+    crate fn report_elided_lifetime_in_ty(&self, lifetime_refs: &[&hir::Lifetime]) {\n+        let missing_lifetimes = lifetime_refs\n+            .iter()\n+            .filter(|a| matches!(a, hir::Lifetime { name: hir::LifetimeName::ImplicitMissing, .. }))\n+            .count();\n+\n+        if missing_lifetimes > 0 {\n+            let mut spans: Vec<_> = lifetime_refs.iter().map(|lt| lt.span).collect();\n+            spans.sort();\n+            let mut spans_dedup = spans.clone();\n+            spans_dedup.dedup();\n+            let spans_with_counts: Vec<_> = spans_dedup\n+                .into_iter()\n+                .map(|sp| (sp, spans.iter().filter(|nsp| *nsp == &sp).count()))\n+                .collect();\n+\n+            self.tcx.struct_span_lint_hir(\n+                rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS,\n+                hir::CRATE_HIR_ID,\n+                spans,\n+                |lint| {\n+                    let mut db = lint.build(\"hidden lifetime parameters in types are deprecated\");\n+                    self.add_missing_lifetime_specifiers_label(\n+                        &mut db,\n+                        spans_with_counts,\n+                        &FxHashSet::from_iter([kw::UnderscoreLifetime]),\n+                        Vec::new(),\n+                        &[],\n+                    );\n+                    db.emit()\n+                },\n+            );\n+        }\n+    }\n+\n     // FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n     // generics. We are disallowing this until we can decide on how we want to handle non-'static\n     // lifetimes in const generics. See issue #74052 for discussion.\n@@ -2376,7 +2411,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         );\n         let is_allowed_lifetime = matches!(\n             lifetime_ref.name,\n-            hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n+            hir::LifetimeName::Implicit\n+                | hir::LifetimeName::ImplicitMissing\n+                | hir::LifetimeName::Static\n+                | hir::LifetimeName::Underscore\n         );\n \n         if !self.tcx.lazy_normalization() && is_anon_const && !is_allowed_lifetime {"}, {"sha": "0427317aa90b94310d7d92f6fff4ddf840a99e84", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -923,7 +923,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 });\n                 match lifetime.name {\n-                    LifetimeName::Implicit => {\n+                    LifetimeName::Implicit | hir::LifetimeName::ImplicitMissing => {\n                         // For types like `dyn Foo`, we should\n                         // generate a special form of elided.\n                         span_bug!(ty.span, \"object-lifetime-default expected, not implicit\",);\n@@ -3057,9 +3057,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let error = loop {\n             match *scope {\n                 // Do not assign any resolution, it will be inferred.\n-                Scope::Body { .. } => return,\n+                Scope::Body { .. } => break Ok(()),\n \n-                Scope::Root => break None,\n+                Scope::Root => break Err(None),\n \n                 Scope::Binder { s, ref lifetimes, scope_type, .. } => {\n                     // collect named lifetimes for suggestions\n@@ -3086,15 +3086,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                         self.insert_lifetime(lifetime_ref, lifetime);\n                     }\n-                    return;\n+                    break Ok(());\n                 }\n \n                 Scope::Elision { elide: Elide::Exact(l), .. } => {\n                     let lifetime = l.shifted(late_depth);\n                     for lifetime_ref in lifetime_refs {\n                         self.insert_lifetime(lifetime_ref, lifetime);\n                     }\n-                    return;\n+                    break Ok(());\n                 }\n \n                 Scope::Elision { elide: Elide::Error(ref e), ref s, .. } => {\n@@ -3119,10 +3119,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             _ => break,\n                         }\n                     }\n-                    break Some(&e[..]);\n+                    break Err(Some(&e[..]));\n                 }\n \n-                Scope::Elision { elide: Elide::Forbid, .. } => break None,\n+                Scope::Elision { elide: Elide::Forbid, .. } => break Err(None),\n \n                 Scope::ObjectLifetimeDefault { s, .. }\n                 | Scope::Supertrait { s, .. }\n@@ -3132,6 +3132,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n+        let error = match error {\n+            Ok(()) => {\n+                self.report_elided_lifetime_in_ty(lifetime_refs);\n+                return;\n+            }\n+            Err(error) => error,\n+        };\n+\n         // If we specifically need the `scope_for_path` map, then we're in the\n         // diagnostic pass and we don't want to emit more errors.\n         if self.map.scope_for_path.is_some() {\n@@ -3274,7 +3282,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 ))\n                                 .emit();\n                         }\n-                        hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit => {\n+                        hir::LifetimeName::Param(_)\n+                        | hir::LifetimeName::Implicit\n+                        | hir::LifetimeName::ImplicitMissing => {\n                             self.resolve_lifetime_ref(lt);\n                         }\n                         hir::LifetimeName::ImplicitObjectLifetimeDefault => {"}, {"sha": "ca70242ef3d67a6d56225b0b19e97a3771226aff", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.fixed", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -5,23 +5,24 @@\n #![deny(elided_lifetimes_in_paths)]\n //~^ NOTE the lint level is defined here\n \n-use std::cell::{RefCell, Ref};\n+use std::cell::{Ref, RefCell};\n \n-\n-struct Foo<'a> { x: &'a u32 }\n+struct Foo<'a> {\n+    x: &'a u32,\n+}\n \n fn foo(x: &Foo<'_>) {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n }\n \n fn bar(x: &Foo<'_>) {}\n \n-\n struct Wrapped<'a>(&'a str);\n \n struct WrappedWithBow<'a> {\n-    gift: &'a str\n+    gift: &'a str,\n }\n \n struct MatchedSet<'a, 'b> {\n@@ -31,19 +32,22 @@ struct MatchedSet<'a, 'b> {\n \n fn wrap_gift(gift: &str) -> Wrapped<'_> {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n     Wrapped(gift)\n }\n \n fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow<'_> {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n     WrappedWithBow { gift }\n }\n \n fn inspect_matched_set(set: MatchedSet<'_, '_>) {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected 2 lifetime parameters\n+    //~| HELP consider using the `'_` lifetime\n     println!(\"{} {}\", set.one, set.another);\n }\n \n@@ -55,7 +59,8 @@ macro_rules! autowrapper {\n \n         fn $fn_name(gift: &str) -> $type_name<'_> {\n             //~^ ERROR hidden lifetime parameters in types are deprecated\n-            //~| HELP indicate the anonymous lifetime\n+            //~| NOTE expected named lifetime parameter\n+            //~| HELP consider using the `'_` lifetime\n             $type_name { gift }\n         }\n     }\n@@ -69,15 +74,17 @@ macro_rules! anytuple_ref_ty {\n     ($($types:ty),*) => {\n         Ref<'_, ($($types),*)>\n         //~^ ERROR hidden lifetime parameters in types are deprecated\n-        //~| HELP indicate the anonymous lifetime\n+        //~| NOTE expected named lifetime parameter\n+        //~| HELP consider using the `'_` lifetime\n     }\n }\n \n fn main() {\n     let honesty = RefCell::new((4, 'e'));\n     let loyalty: Ref<'_, (u32, char)> = honesty.borrow();\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n     let generosity = Ref::map(loyalty, |t| &t.0);\n \n     let laughter = RefCell::new((true, \"magic\"));"}, {"sha": "d55eb854ed2bdddaf33590852a2517cd449cfbbb", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -5,23 +5,24 @@\n #![deny(elided_lifetimes_in_paths)]\n //~^ NOTE the lint level is defined here\n \n-use std::cell::{RefCell, Ref};\n+use std::cell::{Ref, RefCell};\n \n-\n-struct Foo<'a> { x: &'a u32 }\n+struct Foo<'a> {\n+    x: &'a u32,\n+}\n \n fn foo(x: &Foo) {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n }\n \n fn bar(x: &Foo<'_>) {}\n \n-\n struct Wrapped<'a>(&'a str);\n \n struct WrappedWithBow<'a> {\n-    gift: &'a str\n+    gift: &'a str,\n }\n \n struct MatchedSet<'a, 'b> {\n@@ -31,19 +32,22 @@ struct MatchedSet<'a, 'b> {\n \n fn wrap_gift(gift: &str) -> Wrapped {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n     Wrapped(gift)\n }\n \n fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n     WrappedWithBow { gift }\n }\n \n fn inspect_matched_set(set: MatchedSet) {\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected 2 lifetime parameters\n+    //~| HELP consider using the `'_` lifetime\n     println!(\"{} {}\", set.one, set.another);\n }\n \n@@ -55,7 +59,8 @@ macro_rules! autowrapper {\n \n         fn $fn_name(gift: &str) -> $type_name {\n             //~^ ERROR hidden lifetime parameters in types are deprecated\n-            //~| HELP indicate the anonymous lifetime\n+            //~| NOTE expected named lifetime parameter\n+            //~| HELP consider using the `'_` lifetime\n             $type_name { gift }\n         }\n     }\n@@ -69,15 +74,17 @@ macro_rules! anytuple_ref_ty {\n     ($($types:ty),*) => {\n         Ref<($($types),*)>\n         //~^ ERROR hidden lifetime parameters in types are deprecated\n-        //~| HELP indicate the anonymous lifetime\n+        //~| NOTE expected named lifetime parameter\n+        //~| HELP consider using the `'_` lifetime\n     }\n }\n \n fn main() {\n     let honesty = RefCell::new((4, 'e'));\n     let loyalty: Ref<(u32, char)> = honesty.borrow();\n     //~^ ERROR hidden lifetime parameters in types are deprecated\n-    //~| HELP indicate the anonymous lifetime\n+    //~| NOTE expected named lifetime parameter\n+    //~| HELP consider using the `'_` lifetime\n     let generosity = Ref::map(loyalty, |t| &t.0);\n \n     let laughter = RefCell::new((true, \"magic\"));"}, {"sha": "c7cfaa9a0189e050dc9ea372e1675e23244c7362", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.stderr", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -1,60 +1,92 @@\n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:13:12\n+  --> $DIR/elided-lifetimes.rs:14:12\n    |\n LL | fn foo(x: &Foo) {\n-   |            ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |            ^^^ expected named lifetime parameter\n    |\n note: the lint level is defined here\n   --> $DIR/elided-lifetimes.rs:5:9\n    |\n LL | #![deny(elided_lifetimes_in_paths)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider using the `'_` lifetime\n+   |\n+LL | fn foo(x: &Foo<'_>) {\n+   |            ~~~~~~~\n \n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:32:29\n+  --> $DIR/elided-lifetimes.rs:33:29\n    |\n LL | fn wrap_gift(gift: &str) -> Wrapped {\n-   |                             ^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                             ^^^^^^^ expected named lifetime parameter\n+   |\n+help: consider using the `'_` lifetime\n+   |\n+LL | fn wrap_gift(gift: &str) -> Wrapped<'_> {\n+   |                             ~~~~~~~~~~~\n \n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:38:38\n+  --> $DIR/elided-lifetimes.rs:40:38\n    |\n LL | fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow {\n-   |                                      ^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                                      ^^^^^^^^^^^^^^ expected named lifetime parameter\n+   |\n+help: consider using the `'_` lifetime\n+   |\n+LL | fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow<'_> {\n+   |                                      ~~~~~~~~~~~~~~~~~~\n \n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:44:29\n+  --> $DIR/elided-lifetimes.rs:47:29\n    |\n LL | fn inspect_matched_set(set: MatchedSet) {\n-   |                             ^^^^^^^^^^- help: indicate the anonymous lifetimes: `<'_, '_>`\n+   |                             ^^^^^^^^^^ expected 2 lifetime parameters\n+   |\n+help: consider using the `'_` lifetime\n+   |\n+LL | fn inspect_matched_set(set: MatchedSet<'_, '_>) {\n+   |                             ~~~~~~~~~~~~~~~~~~\n \n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:56:36\n+  --> $DIR/elided-lifetimes.rs:60:36\n    |\n LL |         fn $fn_name(gift: &str) -> $type_name {\n-   |                                    ^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                                    ^^^^^^^^^^ expected named lifetime parameter\n ...\n LL | autowrapper!(Autowrapped, autowrap_gift, 'a);\n    | -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `autowrapper` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider using the `'_` lifetime\n+   |\n+LL |         fn $fn_name(gift: &str) -> $type_name<'_> {\n+   |                                    ~~~~~~~~~~~~~~\n \n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:78:18\n+  --> $DIR/elided-lifetimes.rs:84:22\n    |\n LL |     let loyalty: Ref<(u32, char)> = honesty.borrow();\n-   |                  ^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Ref<'_, (u32, char)>`\n+   |                      ^ expected named lifetime parameter\n+   |\n+help: consider using the `'_` lifetime\n+   |\n+LL |     let loyalty: Ref<'_, (u32, char)> = honesty.borrow();\n+   |                      +++\n \n error: hidden lifetime parameters in types are deprecated\n-  --> $DIR/elided-lifetimes.rs:70:9\n+  --> $DIR/elided-lifetimes.rs:75:13\n    |\n LL |         Ref<($($types),*)>\n-   |         ^^^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Ref<'_, ($($types),*)>`\n+   |             ^ expected named lifetime parameter\n ...\n LL |     let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n    |                 ---------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `anytuple_ref_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider using the `'_` lifetime\n+   |\n+LL |         Ref<'_, ($($types),*)>\n+   |             +++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f5e8b41b1634e5e2b7046af4aab722a0f5c6fefd", "filename": "src/test/ui/lint/force-warn/allowed-by-default-lint.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-by-default-lint.stderr?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -2,9 +2,13 @@ warning: hidden lifetime parameters in types are deprecated\n   --> $DIR/allowed-by-default-lint.rs:9:12\n    |\n LL | fn foo(x: &Foo) {}\n-   |            ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |            ^^^ expected named lifetime parameter\n    |\n    = note: requested on the command line with `--force-warn elided-lifetimes-in-paths`\n+help: consider using the `'_` lifetime\n+   |\n+LL | fn foo(x: &Foo<'_>) {}\n+   |            ~~~~~~~\n \n warning: 1 warning emitted\n "}, {"sha": "b1792e2e9cbf862a1b645cc78d83ebe9d377211a", "filename": "src/test/ui/lint/reasons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Flint%2Freasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Flint%2Freasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.rs?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(lint_reasons)]\n-\n #![warn(elided_lifetimes_in_paths,\n         //~^ NOTE the lint level is defined here\n         reason = \"explicit anonymous lifetimes aid reasoning about ownership\")]\n@@ -20,8 +19,9 @@ pub struct CheaterDetectionMechanism {}\n impl fmt::Debug for CheaterDetectionMechanism {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         //~^ WARN hidden lifetime parameters in types are deprecated\n+        //~| NOTE expected named lifetime parameter\n         //~| NOTE explicit anonymous lifetimes aid\n-        //~| HELP indicate the anonymous lifetime\n+        //~| HELP consider using the `'_` lifetime\n         fmt.debug_struct(\"CheaterDetectionMechanism\").finish()\n     }\n }"}, {"sha": "f797c89a0326994344b87cf92d752861fc593108", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ea7ea8a5786729d3e8d0d513819f52b4d9047dd/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=5ea7ea8a5786729d3e8d0d513819f52b4d9047dd", "patch": "@@ -1,15 +1,19 @@\n warning: hidden lifetime parameters in types are deprecated\n-  --> $DIR/reasons.rs:21:29\n+  --> $DIR/reasons.rs:20:29\n    |\n LL |     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-   |                             ^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                             ^^^^^^^^^^^^^^ expected named lifetime parameter\n    |\n    = note: explicit anonymous lifetimes aid reasoning about ownership\n note: the lint level is defined here\n-  --> $DIR/reasons.rs:5:9\n+  --> $DIR/reasons.rs:4:9\n    |\n LL | #![warn(elided_lifetimes_in_paths,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider using the `'_` lifetime\n+   |\n+LL |     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+   |                             ~~~~~~~~~~~~~~~~~~\n \n warning: variable `Social_exchange_psychology` should have a snake case name\n   --> $DIR/reasons.rs:30:9\n@@ -20,7 +24,7 @@ LL |     let Social_exchange_psychology = CheaterDetectionMechanism {};\n    = note: people shouldn't have to change their usual style habits\n            to contribute to our project\n note: the lint level is defined here\n-  --> $DIR/reasons.rs:9:5\n+  --> $DIR/reasons.rs:8:5\n    |\n LL |     nonstandard_style,\n    |     ^^^^^^^^^^^^^^^^^"}]}