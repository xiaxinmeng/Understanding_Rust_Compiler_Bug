{"sha": "80bf204848eb2c97effa717e8e4f876f6545d55f", "node_id": "C_kwDOAAsO6NoAKDgwYmYyMDQ4NDhlYjJjOTdlZmZhNzE3ZThlNGY4NzZmNjU0NWQ1NWY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-30T10:28:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-30T10:30:58Z"}, "message": "don't configure the same regex twice", "tree": {"sha": "4707430b8687aeb923af0e141e02d3ab5c96d927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4707430b8687aeb923af0e141e02d3ab5c96d927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80bf204848eb2c97effa717e8e4f876f6545d55f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80bf204848eb2c97effa717e8e4f876f6545d55f", "html_url": "https://github.com/rust-lang/rust/commit/80bf204848eb2c97effa717e8e4f876f6545d55f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80bf204848eb2c97effa717e8e4f876f6545d55f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9d79a25baa9e2fefa5ee56a93517a7f96904c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d79a25baa9e2fefa5ee56a93517a7f96904c9c", "html_url": "https://github.com/rust-lang/rust/commit/b9d79a25baa9e2fefa5ee56a93517a7f96904c9c"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "937ae0d9d7de225750af544cc93639dde6aa4efa", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80bf204848eb2c97effa717e8e4f876f6545d55f/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80bf204848eb2c97effa717e8e4f876f6545d55f/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=80bf204848eb2c97effa717e8e4f876f6545d55f", "patch": "@@ -106,8 +106,6 @@ regexes! {\n     r\"\\\\\"                           => \"/\",\n     // erase platform file paths\n     \"sys/[a-z]+/\"                    => \"sys/PLATFORM/\",\n-    // erase error annotations in tests\n-    r\"\\s*//~.*\"                      => \"\",\n }\n \n fn ui(mode: Mode, path: &str) {"}, {"sha": "648efb1f47146568994fdd03071f810aeb5d2f5a", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80bf204848eb2c97effa717e8e4f876f6545d55f/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80bf204848eb2c97effa717e8e4f876f6545d55f/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=80bf204848eb2c97effa717e8e4f876f6545d55f", "patch": "@@ -231,6 +231,11 @@ fn run_test(\n     }\n     let output = miri.output().expect(\"could not execute miri\");\n     let mut errors = config.mode.ok(output.status);\n+    // Always remove annotation comments from stderr.\n+    let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n+    let stderr = std::str::from_utf8(&output.stderr).unwrap();\n+    let stderr = annotations.replace_all(stderr, \"\");\n+    let stdout = std::str::from_utf8(&output.stdout).unwrap();\n     // Check output files (if any)\n     let revised = |extension: &str| {\n         if revision.is_empty() {\n@@ -241,7 +246,7 @@ fn run_test(\n     };\n     // Check output files against actual output\n     check_output(\n-        &output.stderr,\n+        &stderr,\n         path,\n         &mut errors,\n         revised(\"stderr\"),\n@@ -251,7 +256,7 @@ fn run_test(\n         comments,\n     );\n     check_output(\n-        &output.stdout,\n+        &stdout,\n         path,\n         &mut errors,\n         revised(\"stdout\"),\n@@ -261,21 +266,17 @@ fn run_test(\n         comments,\n     );\n     // Check error annotations in the source against output\n-    check_annotations(&output.stderr, &mut errors, config, revision, comments);\n+    check_annotations(&stderr, &mut errors, config, revision, comments);\n     (miri, errors)\n }\n \n fn check_annotations(\n-    unnormalized_stderr: &[u8],\n+    unnormalized_stderr: &str,\n     errors: &mut Errors,\n     config: &Config,\n     revision: &str,\n     comments: &Comments,\n ) {\n-    let unnormalized_stderr = std::str::from_utf8(unnormalized_stderr).unwrap();\n-    // erase annotations from the stderr so they don't match themselves\n-    let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n-    let unnormalized_stderr = annotations.replace(unnormalized_stderr, \"\");\n     let mut found_annotation = false;\n     if let Some((ref error_pattern, definition_line)) = comments.error_pattern {\n         if !unnormalized_stderr.contains(error_pattern) {\n@@ -313,7 +314,7 @@ fn check_annotations(\n }\n \n fn check_output(\n-    output: &[u8],\n+    output: &str,\n     path: &Path,\n     errors: &mut Errors,\n     kind: String,\n@@ -322,7 +323,6 @@ fn check_output(\n     config: &Config,\n     comments: &Comments,\n ) {\n-    let output = std::str::from_utf8(&output).unwrap();\n     let output = normalize(path, output, filters, comments);\n     let path = output_path(path, comments, kind, target);\n     match config.output_conflict_handling {"}, {"sha": "7b25eaeeafe991820b99cf6d7db97eab480f3934", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80bf204848eb2c97effa717e8e4f876f6545d55f/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80bf204848eb2c97effa717e8e4f876f6545d55f/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=80bf204848eb2c97effa717e8e4f876f6545d55f", "patch": "@@ -42,9 +42,9 @@ LL |     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountere\n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n error: aborting due to previous error\n     \";\n-    check_annotations(unnormalized_stderr.as_bytes(), &mut errors, &config, \"\", &comments);\n+    check_annotations(unnormalized_stderr, &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n         [Error::PatternNotFound { .. }] => {}\n-        _ => panic!(\"{:#?}\", errors),\n+        _ => panic!(\"not the expected error: {:#?}\", errors),\n     }\n }"}]}