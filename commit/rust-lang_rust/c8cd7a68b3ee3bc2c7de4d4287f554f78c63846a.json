{"sha": "c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a", "node_id": "C_kwDOAAsO6NoAKGM4Y2Q3YTY4YjNlZTNiYzJjN2RlNGQ0Mjg3ZjU1NGY3OGM2Mzg0NmE", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T19:12:23Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T19:12:23Z"}, "message": "use Name instead of String", "tree": {"sha": "d6b8770ad276ee44f10ec8a1bacb0748512ffe47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b8770ad276ee44f10ec8a1bacb0748512ffe47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmIL+xcACgkQeO9fUvOM\nSb2p3wv9HhAojcxFJpKgp9yEQhHlb4x76ltIecAzqPuvywHejRo2Qw7Dmof69fka\nbD1KWF+tqhHyexW3uxJchADAkM02DSufqdebcgm7E6hHiQY9gu9+KhrTlX6cxGVP\nurmveWZNfPFMUAMrra7pHdp7sdKyky3c9nclDDkEz/AvDir5cI77mWX94af5LZMl\n8kIhtXb/xT7ojbyJhynVKnCLFZiP6/T75OmvoMN5widlWUpSZEOgzmYIrS6oi8jP\nP3/+Lap0Zcp4F+zQc8fBI8Yp2vdzzIx+MZWiTr08LlGzyCp1Cy6xswUuLvw1boGN\nKLl4/cAlavm8fmnU4kjuAnfZy6ObXwZXbgRF59tlurLdLjBganZJWud2b5cQ12Rc\nLVbSaiYdq8pETTlIedkAvaF8WPoaW0ACb31oJRQPtagJaMZu1SwoLcb7aiXGoXph\nBCNMscLu81GMa1VQvqYGnGvaMMQuET8+wUyaE+hHNzszWM0GsnYCT/a+XqmO9fUf\n6yJJnYfS\n=5zz/\n-----END PGP SIGNATURE-----", "payload": "tree d6b8770ad276ee44f10ec8a1bacb0748512ffe47\nparent e1df78820ee5f4c3981035e13c6d6ec305974822\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1644952343 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1644952343 +0000\n\nuse Name instead of String\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a", "html_url": "https://github.com/rust-lang/rust/commit/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1df78820ee5f4c3981035e13c6d6ec305974822", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1df78820ee5f4c3981035e13c6d6ec305974822", "html_url": "https://github.com/rust-lang/rust/commit/e1df78820ee5f4c3981035e13c6d6ec305974822"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "05d139219c7d0ee950ea9d3ada8837ef9b74cd8e", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a", "patch": "@@ -1,9 +1,12 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n-use hir_expand::{name::Name, AstId, InFile};\n+use hir_expand::{\n+    name::{AsName, Name},\n+    AstId, InFile,\n+};\n use std::convert::TryInto;\n-use syntax::{ast, AstNode};\n+use syntax::ast::{self, HasName};\n \n use crate::{body::LowerCtx, intern::Interned, path::Path};\n \n@@ -89,7 +92,7 @@ pub enum TypeRef {\n     Array(Box<TypeRef>, ConstScalar),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n-    Fn(Vec<(Option<String>, TypeRef)>, bool /*varargs*/),\n+    Fn(Vec<(Option<Name>, TypeRef)>, bool /*varargs*/),\n     // For\n     ImplTrait(Vec<Interned<TypeBound>>),\n     DynTrait(Vec<Interned<TypeBound>>),\n@@ -192,10 +195,11 @@ impl TypeRef {\n                         .map(|p| (p.pat(), p.ty()))\n                         .map(|it| {\n                             let type_ref = TypeRef::from_ast_opt(ctx, it.1);\n-                            let name = if it.0.is_some() {\n-                                Some(it.0.unwrap().syntax().text().to_string())\n-                            } else {\n-                                None\n+                            let name = match it.0 {\n+                                Some(ast::Pat::IdentPat(it)) => Some(\n+                                    it.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing),\n+                                ),\n+                                _ => None,\n                             };\n                             (name, type_ref)\n                         })"}]}