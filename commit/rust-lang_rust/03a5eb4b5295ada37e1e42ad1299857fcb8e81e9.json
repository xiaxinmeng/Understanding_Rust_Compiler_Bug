{"sha": "03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTVlYjRiNTI5NWFkYTM3ZTFlNDJhZDEyOTk4NTdmY2I4ZTgxZTk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-26T01:24:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T23:58:17Z"}, "message": "add an align parameter to exchange_malloc\n\nCloses #13094", "tree": {"sha": "2875f04ed21bf44867487e6ce4280a6d9431d663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2875f04ed21bf44867487e6ce4280a6d9431d663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "html_url": "https://github.com/rust-lang/rust/commit/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1ca6d5465ef4de12b1adf25cd4598f261c660d", "html_url": "https://github.com/rust-lang/rust/commit/1b1ca6d5465ef4de12b1adf25cd4598f261c660d"}], "stats": {"total": 116, "additions": 101, "deletions": 15}, "files": [{"sha": "ec9d4eaed9e01249ca3f019fe21a41f42ed52f83", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "patch": "@@ -33,6 +33,7 @@ use std::cmp;\n use std::intrinsics::{TyDesc, get_tydesc};\n use std::intrinsics;\n use std::mem;\n+use std::mem::min_align_of;\n use std::num;\n use std::ptr::read;\n use std::rc::Rc;\n@@ -204,7 +205,7 @@ impl Arena {\n     #[inline]\n     fn alloc_copy<'a, T>(&'a mut self, op: || -> T) -> &'a T {\n         unsafe {\n-            let ptr = self.alloc_copy_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n+            let ptr = self.alloc_copy_inner(mem::size_of::<T>(), min_align_of::<T>());\n             let ptr: *mut T = transmute(ptr);\n             mem::move_val_init(&mut (*ptr), op());\n             return transmute(ptr);\n@@ -261,7 +262,7 @@ impl Arena {\n         unsafe {\n             let tydesc = get_tydesc::<T>();\n             let (ty_ptr, ptr) =\n-                self.alloc_noncopy_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n+                self.alloc_noncopy_inner(mem::size_of::<T>(), min_align_of::<T>());\n             let ty_ptr: *mut uint = transmute(ty_ptr);\n             let ptr: *mut T = transmute(ptr);\n             // Write in our tydesc along with a bit indicating that it\n@@ -353,11 +354,12 @@ struct TypedArenaChunk<T> {\n }\n \n impl<T> TypedArenaChunk<T> {\n+    #[cfg(stage0)]\n     #[inline]\n     fn new(next: Option<Box<TypedArenaChunk<T>>>, capacity: uint)\n            -> Box<TypedArenaChunk<T>> {\n         let mut size = mem::size_of::<TypedArenaChunk<T>>();\n-        size = round_up(size, mem::min_align_of::<T>());\n+        size = round_up(size, min_align_of::<T>());\n         let elem_size = mem::size_of::<T>();\n         let elems_size = elem_size.checked_mul(&capacity).unwrap();\n         size = size.checked_add(&elems_size).unwrap();\n@@ -373,6 +375,27 @@ impl<T> TypedArenaChunk<T> {\n         chunk\n     }\n \n+    #[inline]\n+    #[cfg(not(stage0))]\n+    fn new(next: Option<Box<TypedArenaChunk<T>>>, capacity: uint)\n+           -> Box<TypedArenaChunk<T>> {\n+        let mut size = mem::size_of::<TypedArenaChunk<T>>();\n+        size = round_up(size, mem::min_align_of::<T>());\n+        let elem_size = mem::size_of::<T>();\n+        let elems_size = elem_size.checked_mul(&capacity).unwrap();\n+        size = size.checked_add(&elems_size).unwrap();\n+\n+        let mut chunk = unsafe {\n+            let chunk = global_heap::exchange_malloc(size, min_align_of::<TypedArenaChunk<T>>());\n+            let mut chunk: Box<TypedArenaChunk<T>> = cast::transmute(chunk);\n+            mem::move_val_init(&mut chunk.next, next);\n+            chunk\n+        };\n+\n+        chunk.capacity = capacity;\n+        chunk\n+    }\n+\n     /// Destroys this arena chunk. If the type descriptor is supplied, the\n     /// drop glue is called; otherwise, drop glue is not called.\n     #[inline]\n@@ -402,7 +425,7 @@ impl<T> TypedArenaChunk<T> {\n     fn start(&self) -> *u8 {\n         let this: *TypedArenaChunk<T> = self;\n         unsafe {\n-            cast::transmute(round_up(this.offset(1) as uint, mem::min_align_of::<T>()))\n+            cast::transmute(round_up(this.offset(1) as uint, min_align_of::<T>()))\n         }\n     }\n "}, {"sha": "74bebc921e3e13a33d955269eaca6d6183b97446", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "patch": "@@ -29,13 +29,29 @@ use str::StrSlice;\n \n #[allow(ctypes)]\n extern {\n-    fn malloc(size: uint) -> *u8;\n-    fn free(ptr: *u8);\n+    #[cfg(stage0)]\n+    fn rust_malloc(size: uint) -> *u8;\n+    #[cfg(not(stage0))]\n+    fn rust_malloc(size: uint, align: uint) -> *u8;\n+    fn rust_free(ptr: *u8);\n }\n \n+#[cfg(stage0)]\n unsafe fn alloc(cap: uint) -> *mut Vec<()> {\n     let cap = cap.checked_add(&mem::size_of::<Vec<()>>()).unwrap();\n-    let ret = malloc(cap) as *mut Vec<()>;\n+    let ret = rust_malloc(cap) as *mut Vec<()>;\n+    if ret.is_null() {\n+        intrinsics::abort();\n+    }\n+    (*ret).fill = 0;\n+    (*ret).alloc = cap;\n+    ret\n+}\n+\n+#[cfg(not(stage0))]\n+unsafe fn alloc(cap: uint) -> *mut Vec<()> {\n+    let cap = cap.checked_add(&mem::size_of::<Vec<()>>()).unwrap();\n+    let ret = rust_malloc(cap, 8) as *mut Vec<()>;\n     if ret.is_null() {\n         intrinsics::abort();\n     }\n@@ -102,7 +118,7 @@ impl FromIterator<char> for ~str {\n                     ptr::copy_nonoverlapping_memory(&mut (*ptr2).data,\n                                                     &(*ptr).data,\n                                                     len);\n-                    free(ptr as *u8);\n+                    rust_free(ptr as *u8);\n                     cast::forget(ret);\n                     ret = cast::transmute(ptr2);\n                     ptr = ptr2;\n@@ -172,7 +188,7 @@ impl<A: Clone> Clone for ~[A] {\n                     for j in range(0, *i as int) {\n                         ptr::read(&*p.offset(j));\n                     }\n-                    free(ret as *u8);\n+                    rust_free(ret as *u8);\n                 });\n             cast::transmute(ret)\n         }"}, {"sha": "8f878f099fc41d4e1b5dd6aba4ee5321c9a36b17", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "patch": "@@ -345,15 +345,16 @@ fn require_alloc_fn(bcx: &Block, info_ty: ty::t, it: LangItem) -> ast::DefId {\n \n pub fn malloc_raw_dyn<'a>(bcx: &'a Block<'a>,\n                           ptr_ty: ty::t,\n-                          size: ValueRef)\n+                          size: ValueRef,\n+                          align: ValueRef)\n                           -> Result<'a> {\n     let _icx = push_ctxt(\"malloc_raw_exchange\");\n     let ccx = bcx.ccx();\n \n     // Allocate space:\n     let r = callee::trans_lang_call(bcx,\n         require_alloc_fn(bcx, ptr_ty, ExchangeMallocFnLangItem),\n-        [size],\n+        [size, align],\n         None);\n \n     let llty_ptr = type_of::type_of(ccx, ptr_ty);"}, {"sha": "463aa67ac90f58a136d8d442875c610caa4e252f", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "patch": "@@ -67,7 +67,7 @@ use middle::typeck::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n use util::nodemap::NodeMap;\n-use middle::trans::machine::{llsize_of, llsize_of_alloc};\n+use middle::trans::machine::{llalign_of_min, llsize_of, llsize_of_alloc};\n use middle::trans::type_::Type;\n \n use syntax::ast;\n@@ -1170,10 +1170,11 @@ fn trans_uniq_expr<'a>(bcx: &'a Block<'a>,\n     let fcx = bcx.fcx;\n     let llty = type_of::type_of(bcx.ccx(), contents_ty);\n     let size = llsize_of(bcx.ccx(), llty);\n+    let align = C_uint(bcx.ccx(), llalign_of_min(bcx.ccx(), llty) as uint);\n     // We need to a make a pointer type because box_ty is ty_bot\n     // if content_ty is, e.g. box fail!().\n     let real_box_ty = ty::mk_uniq(bcx.tcx(), contents_ty);\n-    let Result { bcx, val } = malloc_raw_dyn(bcx, real_box_ty, size);\n+    let Result { bcx, val } = malloc_raw_dyn(bcx, real_box_ty, size, align);\n     // Unique boxes do not allocate for zero-size types. The standard library\n     // may assume that `free` is never called on the pointer returned for\n     // `Box<ZeroSizeType>`."}, {"sha": "48179abc052ec4ff50548bbdb575a24498e13b21", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "patch": "@@ -278,7 +278,9 @@ pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,\n \n     let vecsize = Add(bcx, alloc, llsize_of(ccx, ccx.opaque_vec_type));\n \n-    let Result { bcx: bcx, val: val } = malloc_raw_dyn(bcx, vec_ty, vecsize);\n+    // ~[T] is not going to be changed to support alignment, since it's obsolete.\n+    let align = C_uint(ccx, 8);\n+    let Result { bcx: bcx, val: val } = malloc_raw_dyn(bcx, vec_ty, vecsize, align);\n     Store(bcx, fill, GEPi(bcx, val, [0u, abi::vec_elt_fill]));\n     Store(bcx, alloc, GEPi(bcx, val, [0u, abi::vec_elt_alloc]));\n "}, {"sha": "c8808b6e821f9e18f6a8ade63da53c43beced666", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a5eb4b5295ada37e1e42ad1299857fcb8e81e9/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=03a5eb4b5295ada37e1e42ad1299857fcb8e81e9", "patch": "@@ -68,7 +68,7 @@ pub unsafe fn realloc_raw(ptr: *mut u8, size: uint) -> *mut u8 {\n }\n \n /// The allocator for unique pointers without contained managed pointers.\n-#[cfg(not(test))]\n+#[cfg(not(test), stage0)]\n #[lang=\"exchange_malloc\"]\n #[inline]\n pub unsafe fn exchange_malloc(size: uint) -> *mut u8 {\n@@ -85,6 +85,23 @@ pub unsafe fn exchange_malloc(size: uint) -> *mut u8 {\n     }\n }\n \n+/// The allocator for unique pointers without contained managed pointers.\n+#[cfg(not(test), not(stage0))]\n+#[lang=\"exchange_malloc\"]\n+#[inline]\n+pub unsafe fn exchange_malloc(size: uint, _align: uint) -> *mut u8 {\n+    // The compiler never calls `exchange_free` on ~ZeroSizeType, so zero-size\n+    // allocations can point to this `static`. It would be incorrect to use a null\n+    // pointer, due to enums assuming types like unique pointers are never null.\n+    static EMPTY: () = ();\n+\n+    if size == 0 {\n+        &EMPTY as *() as *mut u8\n+    } else {\n+        malloc_raw(size)\n+    }\n+}\n+\n // FIXME: #7496\n #[cfg(not(test))]\n #[lang=\"closure_exchange_malloc\"]\n@@ -118,6 +135,32 @@ pub unsafe fn exchange_free(ptr: *u8) {\n     free(ptr as *mut c_void);\n }\n \n+// hack for libcore\n+#[no_mangle]\n+#[doc(hidden)]\n+#[deprecated]\n+#[cfg(stage0)]\n+pub extern \"C\" fn rust_malloc(size: uint) -> *mut u8 {\n+    unsafe { exchange_malloc(size) }\n+}\n+\n+// hack for libcore\n+#[no_mangle]\n+#[doc(hidden)]\n+#[deprecated]\n+#[cfg(not(stage0))]\n+pub extern \"C\" fn rust_malloc(size: uint, align: uint) -> *mut u8 {\n+    unsafe { exchange_malloc(size, align) }\n+}\n+\n+// hack for libcore\n+#[no_mangle]\n+#[doc(hidden)]\n+#[deprecated]\n+pub extern \"C\" fn rust_free(ptr: *u8) {\n+    unsafe { exchange_free(ptr) }\n+}\n+\n #[cfg(test)]\n mod bench {\n     extern crate test;"}]}