{"sha": "c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmUwYjk3ZGU2N2UwNDQ5YWEyMGNkOGVmNjgzZmI1OTRiYjNmZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-15T02:06:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-15T02:06:47Z"}, "message": "auto merge of #5369 : thestinger/rust/iter, r=z0w0\n\nThis can eventually be implemented on other sequence containers like `deque` (it's missing `each` too at the moment).", "tree": {"sha": "c76d23c3c03eb2e45345c8e5125da2111532a551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76d23c3c03eb2e45345c8e5125da2111532a551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "html_url": "https://github.com/rust-lang/rust/commit/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bf5ad63f023320864dad323262364a476354d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf5ad63f023320864dad323262364a476354d15", "html_url": "https://github.com/rust-lang/rust/commit/4bf5ad63f023320864dad323262364a476354d15"}, {"sha": "c64a5d2d37a91e2151da41324a7f5dfc2b9c05d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64a5d2d37a91e2151da41324a7f5dfc2b9c05d3", "html_url": "https://github.com/rust-lang/rust/commit/c64a5d2d37a91e2151da41324a7f5dfc2b9c05d3"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "e461cb2c65f18c95134021bc74c854ec42a84538", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "patch": "@@ -31,6 +31,10 @@ pub trait ReverseIter<A>: BaseIter<A> {\n     pure fn each_reverse(&self, blk: &fn(&A) -> bool);\n }\n \n+pub trait MutableIter<A>: BaseIter<A> {\n+    fn each_mut(&mut self, blk: &fn(&mut A) -> bool);\n+}\n+\n pub trait ExtendedIter<A> {\n     pure fn eachi(&self, blk: &fn(uint, v: &A) -> bool);\n     pure fn all(&self, blk: &fn(&A) -> bool) -> bool;"}, {"sha": "1710373b1e725a86d98b76c05f3e6a9fbaa446ab", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "patch": "@@ -27,8 +27,9 @@ pub use clone::Clone;\n pub use cmp::{Eq, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n-pub use iter::{BaseIter, ReverseIter, ExtendedIter, EqIter, CopyableIter};\n-pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n+pub use iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};\n+pub use iter::{CopyableIter, CopyableOrderedIter, CopyableNonstrictIter};\n+pub use iter::Times;\n pub use num::NumCast;\n pub use path::GenericPath;\n pub use path::Path;"}, {"sha": "360940236ca1f1e6d04b2cb7552b72842fc379d1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=c3fe0b97de67e0449aa20cd8ef683fb594bb3ffd", "patch": "@@ -1357,7 +1357,7 @@ pub pure fn each<T>(v: &r/[T], f: &fn(&r/T) -> bool) {\n /// a vector with mutable contents and you would like\n /// to mutate the contents as you iterate.\n #[inline(always)]\n-pub fn each_mut<T>(v: &mut [T], f: &fn(elem: &mut T) -> bool) {\n+pub fn each_mut<T>(v: &'r mut [T], f: &fn(elem: &'r mut T) -> bool) {\n     let mut i = 0;\n     let n = v.len();\n     while i < n {\n@@ -2280,11 +2280,9 @@ pub mod bytes {\n // ___________________________________________________________________________\n // ITERATION TRAIT METHODS\n \n-impl<A> iter::BaseIter<A> for &self/[A] {\n+impl<A> iter::BaseIter<A> for &'self [A] {\n     #[inline(always)]\n-    pub pure fn each(&self, blk: &fn(v: &'self A) -> bool) {\n-        each(*self, blk)\n-    }\n+    pure fn each(&self, blk: &fn(v: &'self A) -> bool) { each(*self, blk) }\n     #[inline(always)]\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n@@ -2305,6 +2303,29 @@ impl<A> iter::BaseIter<A> for @[A] {\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n+impl<A> iter::MutableIter<A> for &'self mut [A] {\n+    #[inline(always)]\n+    fn each_mut(&mut self, blk: &fn(v: &'self mut A) -> bool) {\n+        each_mut(*self, blk)\n+    }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A> iter::MutableIter<A> for ~[A] {\n+    #[inline(always)]\n+    fn each_mut(&mut self, blk: &fn(v: &'self mut A) -> bool) {\n+        each_mut(*self, blk)\n+    }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A> iter::MutableIter<A> for @mut [A] {\n+    #[inline(always)]\n+    fn each_mut(&mut self, blk: &fn(v: &mut A) -> bool) {\n+        each_mut(*self, blk)\n+    }\n+}\n+\n impl<A> iter::ExtendedIter<A> for &self/[A] {\n     pub pure fn eachi(&self, blk: &fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)"}]}