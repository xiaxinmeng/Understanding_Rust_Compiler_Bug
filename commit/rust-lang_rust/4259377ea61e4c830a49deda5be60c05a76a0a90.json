{"sha": "4259377ea61e4c830a49deda5be60c05a76a0a90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNTkzNzdlYTYxZTRjODMwYTQ5ZGVkYTViZTYwYzA1YTc2YTBhOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-04T05:52:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-04T05:52:44Z"}, "message": "Auto merge of #3725 - mikerite:fix-2728, r=phansch\n\nFix `cast_sign_loss` false positive\n\nThis checks if the value is a non-negative constant before linting about\nlosing the sign.\n\nBecause the `constant` function doesn't handle const functions, we check if\nthe value is from a call to a `max_value` function directly. A utility method\ncalled `get_def_path` was added to make checking for the function paths\neasier.\n\nFixes #2728", "tree": {"sha": "c1660674f2c26666179180cfbdadebe02e401b8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1660674f2c26666179180cfbdadebe02e401b8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4259377ea61e4c830a49deda5be60c05a76a0a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4259377ea61e4c830a49deda5be60c05a76a0a90", "html_url": "https://github.com/rust-lang/rust/commit/4259377ea61e4c830a49deda5be60c05a76a0a90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4259377ea61e4c830a49deda5be60c05a76a0a90/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bea43614cbd0d989a17fcf321f7bc0d8b641c0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bea43614cbd0d989a17fcf321f7bc0d8b641c0d", "html_url": "https://github.com/rust-lang/rust/commit/7bea43614cbd0d989a17fcf321f7bc0d8b641c0d"}, {"sha": "f3ee53d2259299e42bff3456a99def6ae3be8f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ee53d2259299e42bff3456a99def6ae3be8f84", "html_url": "https://github.com/rust-lang/rust/commit/f3ee53d2259299e42bff3456a99def6ae3be8f84"}], "stats": {"total": 133, "additions": 87, "deletions": 46}, "files": [{"sha": "f56dc3aed6946cbcc9cbac3dd26dc815a1581213", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4259377ea61e4c830a49deda5be60c05a76a0a90/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4259377ea61e4c830a49deda5be60c05a76a0a90/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=4259377ea61e4c830a49deda5be60c05a76a0a90", "patch": "@@ -1,6 +1,7 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::utils::{clip, sext, unsext};\n+use crate::utils::{clip, get_def_path, sext, unsext};\n+use if_chain::if_chain;\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n@@ -234,6 +235,31 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 UnDeref => Some(o),\n             }),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),\n+            ExprKind::Call(ref callee, ref args) => {\n+                // We only handle a few const functions for now\n+                if_chain! {\n+                    if args.is_empty();\n+                    if let ExprKind::Path(qpath) = &callee.node;\n+                    let def = self.tables.qpath_def(qpath, callee.hir_id);\n+                    if let Some(def_id) = def.opt_def_id();\n+                    let def_path = get_def_path(self.tcx, def_id);\n+                    if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path[..];\n+                    then {\n+                       let value = match impl_ty {\n+                           \"<impl i8>\" => i8::max_value() as u128,\n+                           \"<impl i16>\" => i16::max_value() as u128,\n+                           \"<impl i32>\" => i32::max_value() as u128,\n+                           \"<impl i64>\" => i64::max_value() as u128,\n+                           \"<impl i128>\" => i128::max_value() as u128,\n+                           _ => return None,\n+                       };\n+                       Some(Constant::Int(value))\n+                    }\n+                    else {\n+                        None\n+                    }\n+                }\n+            },\n             // TODO: add other expressions\n             _ => None,\n         }"}, {"sha": "461bd20b80c2cec88ea4e13811f71eef4e02393c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4259377ea61e4c830a49deda5be60c05a76a0a90/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4259377ea61e4c830a49deda5be60c05a76a0a90/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4259377ea61e4c830a49deda5be60c05a76a0a90", "patch": "@@ -1000,6 +1000,31 @@ enum ArchSuffix {\n     None,\n }\n \n+fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr, op: &Expr, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    if !cast_from.is_signed() || cast_to.is_signed() {\n+        return;\n+    }\n+\n+    // don't lint for positive constants\n+    let const_val = constant(cx, &cx.tables, op);\n+    if_chain! {\n+        if let Some((const_val, _)) = const_val;\n+        if let Constant::Int(n) = const_val;\n+        if let ty::Int(ity) = cast_from.sty;\n+        if sext(cx.tcx, n, ity) >= 0;\n+        then {\n+            return\n+        }\n+    }\n+\n+    span_lint(\n+        cx,\n+        CAST_SIGN_LOSS,\n+        expr.span,\n+        &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+    );\n+}\n+\n fn check_truncation_and_wrapping(cx: &LateContext<'_, '_>, expr: &Expr, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let arch_64_suffix = \" on targets with 64-bit wide pointers\";\n     let arch_32_suffix = \" on targets with 32-bit wide pointers\";\n@@ -1175,14 +1200,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                         }\n                     },\n                     (true, true) => {\n-                        if cast_from.is_signed() && !cast_to.is_signed() {\n-                            span_lint(\n-                                cx,\n-                                CAST_SIGN_LOSS,\n-                                expr.span,\n-                                &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n-                            );\n-                        }\n+                        check_loss_of_sign(cx, expr, ex, cast_from, cast_to);\n                         check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n                         check_lossless(cx, expr, ex, cast_from, cast_to);\n                     },"}, {"sha": "f4b1a2450bfe194fdc420fe1fda422c8420d2335", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4259377ea61e4c830a49deda5be60c05a76a0a90/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4259377ea61e4c830a49deda5be60c05a76a0a90/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4259377ea61e4c830a49deda5be60c05a76a0a90", "patch": "@@ -130,6 +130,21 @@ pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) ->\n     apb.names.len() == path.len() && apb.names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n }\n \n+/// Get the absolute path of `def_id` as a vector of `&str`.\n+///\n+/// # Examples\n+/// ```rust,ignore\n+/// let def_path = get_def_path(tcx, def_id);\n+/// if let &[\"core\", \"option\", \"Option\"] = &def_path[..] {\n+///     // The given `def_id` is that of an `Option` type\n+/// };\n+/// ```\n+pub fn get_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Vec<&'static str> {\n+    let mut apb = AbsolutePathBuffer { names: vec![] };\n+    tcx.push_item_path(&mut apb, def_id, false);\n+    apb.names.iter().map(|n| n.get()).collect()\n+}\n+\n /// Check if type is struct, enum or union type with given def path.\n pub fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.sty {"}, {"sha": "c248b5bf5984440024388d0334afe6fc110681ec", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4259377ea61e4c830a49deda5be60c05a76a0a90/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4259377ea61e4c830a49deda5be60c05a76a0a90/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=4259377ea61e4c830a49deda5be60c05a76a0a90", "patch": "@@ -34,7 +34,15 @@ fn main() {\n     (1u8 + 1u8) as u16;\n     // Test clippy::cast_sign_loss\n     1i32 as u32;\n+    -1i32 as u32;\n     1isize as usize;\n+    -1isize as usize;\n+    0i8 as u8;\n+    i8::max_value() as u8;\n+    i16::max_value() as u16;\n+    i32::max_value() as u32;\n+    i64::max_value() as u64;\n+    i128::max_value() as u128;\n     // Extra checks for *size\n     // Test cast_unnecessary\n     1i32 as i32;"}, {"sha": "c01393793f1f581f1d598c85b931eda8440a1e53", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4259377ea61e4c830a49deda5be60c05a76a0a90/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4259377ea61e4c830a49deda5be60c05a76a0a90/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=4259377ea61e4c830a49deda5be60c05a76a0a90", "patch": "@@ -70,12 +70,6 @@ error: casting i32 to i8 may truncate the value\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n-error: casting i32 to u8 may lose the sign of the value\n-  --> $DIR/cast.rs:22:5\n-   |\n-LL |     1i32 as u8;\n-   |     ^^^^^^^^^^\n-\n error: casting i32 to u8 may truncate the value\n   --> $DIR/cast.rs:22:5\n    |\n@@ -147,36 +141,36 @@ LL |     (1u8 + 1u8) as u16;\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:37:5\n    |\n-LL |     1i32 as u32;\n-   |     ^^^^^^^^^^^\n+LL |     -1i32 as u32;\n+   |     ^^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:39:5\n    |\n-LL |     1isize as usize;\n-   |     ^^^^^^^^^^^^^^^\n+LL |     -1isize as usize;\n+   |     ^^^^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:40:5\n+  --> $DIR/cast.rs:48:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:49:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:42:5\n+  --> $DIR/cast.rs:50:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "a77aafaf11d9dc3d52e38b20cb36e204f70ecfa3", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4259377ea61e4c830a49deda5be60c05a76a0a90/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4259377ea61e4c830a49deda5be60c05a76a0a90/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=4259377ea61e4c830a49deda5be60c05a76a0a90", "patch": "@@ -38,14 +38,6 @@ error: casting isize to i32 may truncate the value on targets with 64-bit wide p\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast_size.rs:17:5\n-   |\n-LL |     1isize as u32;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n-\n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:17:5\n    |\n@@ -78,12 +70,6 @@ error: casting i64 to isize may truncate the value on targets with 32-bit wide p\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast_size.rs:22:5\n-   |\n-LL |     1i64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n@@ -114,11 +100,5 @@ error: casting u32 to isize may wrap around the value on targets with 32-bit wid\n LL |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast_size.rs:28:5\n-   |\n-LL |     1i32 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: aborting due to 19 previous errors\n+error: aborting due to 16 previous errors\n "}]}