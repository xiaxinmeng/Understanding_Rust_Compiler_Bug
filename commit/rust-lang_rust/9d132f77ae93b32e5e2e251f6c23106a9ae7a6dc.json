{"sha": "9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "node_id": "C_kwDOAAsO6NoAKDlkMTMyZjc3YWU5M2IzMmU1ZTJlMjUxZjZjMjMxMDZhOWFlN2E2ZGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-01T18:10:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T18:10:21Z"}, "message": "Rollup merge of #108568 - spastorino:new-rpitit-flag, r=compiler-errors\n\nMake associated_item_def_ids for traits use an unstable option to also return associated types for RPITITs\n\nr? `@compiler-errors`", "tree": {"sha": "cc62a5f43c93c6a9ac323443dc3096cdf5fd0edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc62a5f43c93c6a9ac323443dc3096cdf5fd0edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/5UNCRBK7hj4Ov3rIwAAOdcIABLz0hrkmfRHiUjNhg2SHYUx\nal30SvPtGWN/j/C/NAkRBWXRMIXASrM6ITP5sQmi8A0u8q32c35EmYncXBCu7Gxg\nX0bjEgnhRPvbcdgFdfSXfZMPPc6y7BqV2P6g4jtuo+yf8pM8nR26pw7NxtunZMnW\nKSLlNqNJ9WtTANwdYAcMjZkSsJzE5nnNYZ+sOCoQckvaIA0XVZeMhtR9dgtnFVct\n+lI5/u9Vd7/Um02R7BDJIFNex6j26mJG+/7orG4zZjBJDBlR2ZxZHLe1ppV1lNOs\nyFy1crn6BNI5RpBNCb8xtUROxiIFi9NgEtmTZKngSKUz9KOUjMD3L0L88YZOpxQ=\n=AARC\n-----END PGP SIGNATURE-----\n", "payload": "tree cc62a5f43c93c6a9ac323443dc3096cdf5fd0edd\nparent 093a53f1348cc9a5f9cd81b3aac19341ef6793df\nparent 73e2fe0494cd91565f2f836af59b2fa37ab3ebdd\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677694221 +0530\ncommitter GitHub <noreply@github.com> 1677694221 +0530\n\nRollup merge of #108568 - spastorino:new-rpitit-flag, r=compiler-errors\n\nMake associated_item_def_ids for traits use an unstable option to also return associated types for RPITITs\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "html_url": "https://github.com/rust-lang/rust/commit/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "093a53f1348cc9a5f9cd81b3aac19341ef6793df", "url": "https://api.github.com/repos/rust-lang/rust/commits/093a53f1348cc9a5f9cd81b3aac19341ef6793df", "html_url": "https://github.com/rust-lang/rust/commit/093a53f1348cc9a5f9cd81b3aac19341ef6793df"}, {"sha": "73e2fe0494cd91565f2f836af59b2fa37ab3ebdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e2fe0494cd91565f2f836af59b2fa37ab3ebdd", "html_url": "https://github.com/rust-lang/rust/commit/73e2fe0494cd91565f2f836af59b2fa37ab3ebdd"}], "stats": {"total": 141, "additions": 132, "deletions": 9}, "files": [{"sha": "ccb07804b9661d9415965592f86525b77bc3197b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -1101,9 +1101,18 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n-// Return `false` to avoid encoding impl trait in trait, while we don't use the query.\n-fn should_encode_fn_impl_trait_in_trait<'tcx>(_tcx: TyCtxt<'tcx>, _def_id: DefId) -> bool {\n-    false\n+// We only encode impl trait in trait when using `lower-impl-trait-in-trait-to-assoc-ty` unstable\n+// option.\n+fn should_encode_fn_impl_trait_in_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty\n+        && let Some(assoc_item) = tcx.opt_associated_item(def_id)\n+        && assoc_item.container == ty::AssocItemContainer::TraitContainer\n+        && assoc_item.kind == ty::AssocKind::Fn\n+    {\n+        true\n+    } else {\n+        false\n+    }\n }\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {"}, {"sha": "c9da711e556f5b9d0f7670f4b94f6a1bda4e1790", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -177,6 +177,7 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n+    providers.opt_rpitit_info = |_, _| None;\n     providers.all_local_trait_impls = |tcx, ()| &tcx.resolutions(()).trait_impls;\n     providers.expn_that_defined = |tcx, id| {\n         let id = id.expect_local();"}, {"sha": "51feae3cf8a6184ba9f23e5d381ae75d4fc3b1ce", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -90,6 +90,7 @@ rustc_queries! {\n     /// Definitions that were generated with no HIR, would be feeded to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        feedable\n     }\n \n     /// Gives access to the HIR node's parent for the HIR owner `key`.\n@@ -166,6 +167,7 @@ rustc_queries! {\n         }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query collect_return_position_impl_trait_in_trait_tys(key: DefId)\n@@ -222,6 +224,7 @@ rustc_queries! {\n         arena_cache\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n@@ -264,6 +267,7 @@ rustc_queries! {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Elaborated version of the predicates from `explicit_item_bounds`.\n@@ -588,6 +592,7 @@ rustc_queries! {\n         desc { |tcx| \"computing explicit predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Returns the inferred outlives predicates (e.g., for `struct\n@@ -596,6 +601,7 @@ rustc_queries! {\n         desc { |tcx| \"computing inferred outlives predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Maps from the `DefId` of a trait to the list of\n@@ -728,6 +734,7 @@ rustc_queries! {\n         desc { |tcx| \"computing associated item data for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Collects the associated items defined on a trait or impl.\n@@ -1142,6 +1149,15 @@ rustc_queries! {\n         desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n+    }\n+\n+    /// The `opt_rpitit_info` query returns the pair of the def id of the function where the RPIT\n+    /// is defined and the opaque def id if any.\n+    query opt_rpitit_info(def_id: DefId) -> Option<ty::ImplTraitInTraitData> {\n+        desc { |tcx| \"opt_rpitit_info `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n+        feedable\n     }\n \n     /// Gets the span for the definition.\n@@ -1157,6 +1173,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query lookup_stability(def_id: DefId) -> Option<attr::Stability> {\n@@ -1498,6 +1515,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query check_well_formed(key: hir::OwnerId) -> () {\n@@ -1695,6 +1713,7 @@ rustc_queries! {\n     query visibility(def_id: DefId) -> ty::Visibility<DefId> {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n+        feedable\n     }\n \n     query inhabited_predicate_adt(key: DefId) -> ty::inhabitedness::InhabitedPredicate<'tcx> {"}, {"sha": "5df01b8abc3b20a7e05a4af923e2a96f703de815", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -2071,6 +2071,12 @@ pub enum ImplOverlapKind {\n     Issue33140,\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+pub enum ImplTraitInTraitData {\n+    Trait { fn_def_id: DefId, opaque_def_id: DefId },\n+    Impl { fn_def_id: DefId },\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {\n         self.typeck(self.hir().body_owner_def_id(body))"}, {"sha": "b466a3fcdee915891e444fa6f81021e7b3a44b7c", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -1503,6 +1503,9 @@ options! {\n         \"what location details should be tracked when using caller_location, either \\\n         `none`, or a comma separated list of location details, for which \\\n         valid options are `file`, `line`, and `column` (default: `file,line,column`)\"),\n+    lower_impl_trait_in_trait_to_assoc_ty: bool = (false, parse_bool, [TRACKED],\n+        \"modify the lowering strategy for `impl Trait` in traits so that they are lowered to \\\n+        generic associated types\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "efbbfe6c24b560c5f64251a6edd250255587e4a2", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 90, "deletions": 6, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -4,7 +4,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, ImplTraitInTraitData, InternalSubsts, TyCtxt};\n+use rustc_span::symbol::kw;\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n@@ -21,9 +22,37 @@ pub fn provide(providers: &mut ty::query::Providers) {\n fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n-        hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n-            trait_item_refs.iter().map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id()),\n-        ),\n+        hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+                // We collect RPITITs for each trait method's return type and create a\n+                // corresponding associated item using associated_items_for_impl_trait_in_trait\n+                // query.\n+                tcx.arena.alloc_from_iter(\n+                    trait_item_refs\n+                        .iter()\n+                        .map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id())\n+                        .chain(\n+                            trait_item_refs\n+                                .iter()\n+                                .filter(|trait_item_ref| {\n+                                    matches!(trait_item_ref.kind, hir::AssocItemKind::Fn { .. })\n+                                })\n+                                .flat_map(|trait_item_ref| {\n+                                    let trait_fn_def_id =\n+                                        trait_item_ref.id.owner_id.def_id.to_def_id();\n+                                    tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id)\n+                                })\n+                                .map(|def_id| *def_id),\n+                        ),\n+                )\n+            } else {\n+                tcx.arena.alloc_from_iter(\n+                    trait_item_refs\n+                        .iter()\n+                        .map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id()),\n+                )\n+            }\n+        }\n         hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n             impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n         ),\n@@ -193,10 +222,65 @@ fn associated_item_for_impl_trait_in_trait(\n     let span = tcx.def_span(opaque_ty_def_id);\n     let trait_assoc_ty =\n         tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n-    trait_assoc_ty.def_id()\n+\n+    let local_def_id = trait_assoc_ty.def_id();\n+    let def_id = local_def_id.to_def_id();\n+\n+    trait_assoc_ty.opt_def_kind(Some(DefKind::AssocTy));\n+\n+    // There's no HIR associated with this new synthesized `def_id`, so feed\n+    // `opt_local_def_id_to_hir_id` with `None`.\n+    trait_assoc_ty.opt_local_def_id_to_hir_id(None);\n+\n+    // Copy span of the opaque.\n+    trait_assoc_ty.def_ident_span(Some(span));\n+\n+    // Add the def_id of the function and opaque that generated this synthesized associated type.\n+    trait_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Trait {\n+        fn_def_id,\n+        opaque_def_id: opaque_ty_def_id.to_def_id(),\n+    }));\n+\n+    trait_assoc_ty.associated_item(ty::AssocItem {\n+        name: kw::Empty,\n+        kind: ty::AssocKind::Type,\n+        def_id,\n+        trait_item_def_id: None,\n+        container: ty::TraitContainer,\n+        fn_has_self_parameter: false,\n+    });\n+\n+    // Copy visility of the containing function.\n+    trait_assoc_ty.visibility(tcx.visibility(fn_def_id));\n+\n+    // Copy impl_defaultness of the containing function.\n+    trait_assoc_ty.impl_defaultness(tcx.impl_defaultness(fn_def_id));\n+\n+    // Copy type_of of the opaque.\n+    trait_assoc_ty.type_of(ty::EarlyBinder(tcx.mk_opaque(\n+        opaque_ty_def_id.to_def_id(),\n+        InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n+    )));\n+\n+    // Copy generics_of of the opaque.\n+    trait_assoc_ty.generics_of(tcx.generics_of(opaque_ty_def_id).clone());\n+\n+    // There are no predicates for the synthesized associated type.\n+    trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {\n+        parent: Some(trait_def_id),\n+        predicates: &[],\n+    });\n+\n+    // There are no inferred outlives for the synthesized associated type.\n+    trait_assoc_ty.inferred_outlives_of(&[]);\n+\n+    // FIXME implement this.\n+    trait_assoc_ty.explicit_item_bounds(&[]);\n+\n+    local_def_id\n }\n \n-/// Given an `trait_assoc_def_id` that corresponds to a previously synthethized impl trait in trait\n+/// Given an `trait_assoc_def_id` that corresponds to a previously synthesized impl trait in trait\n /// into an associated type and an `impl_def_id` corresponding to an impl block, create and return\n /// the corresponding associated item inside the impl block.\n fn impl_associated_item_for_impl_trait_in_trait("}, {"sha": "79e6b94f1aca54663d771fa3dd3c7bca59db90ac", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=9d132f77ae93b32e5e2e251f6c23106a9ae7a6dc", "patch": "@@ -87,6 +87,7 @@\n     -Z                          llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n     -Z                       llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n     -Z                       location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n+    -Z lower-impl-trait-in-trait-to-assoc-ty=val -- modify the lowering strategy for `impl Trait` in traits so that they are lowered to generic associated types\n     -Z                                    ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                       macro-backtrace=val -- show macro backtraces (default: no)\n     -Z           maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)"}]}