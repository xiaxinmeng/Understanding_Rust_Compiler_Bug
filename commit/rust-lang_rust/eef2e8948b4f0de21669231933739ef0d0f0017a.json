{"sha": "eef2e8948b4f0de21669231933739ef0d0f0017a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZjJlODk0OGI0ZjBkZTIxNjY5MjMxOTMzNzM5ZWYwZDBmMDAxN2E=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-10-09T04:40:21Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-10-09T04:40:21Z"}, "message": "Fix cast_possible_truncation warnings", "tree": {"sha": "0079bc8b4069b3078174685a0df193f4ad2fd2b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0079bc8b4069b3078174685a0df193f4ad2fd2b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eef2e8948b4f0de21669231933739ef0d0f0017a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eef2e8948b4f0de21669231933739ef0d0f0017a", "html_url": "https://github.com/rust-lang/rust/commit/eef2e8948b4f0de21669231933739ef0d0f0017a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eef2e8948b4f0de21669231933739ef0d0f0017a/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "995a974182dd4377f7b570423d3fa5aacfed21cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/995a974182dd4377f7b570423d3fa5aacfed21cc", "html_url": "https://github.com/rust-lang/rust/commit/995a974182dd4377f7b570423d3fa5aacfed21cc"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "b84430e6819f61a3b3b6fa34ef6b2e5956cec2b6", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=eef2e8948b4f0de21669231933739ef0d0f0017a", "patch": "@@ -18,6 +18,7 @@ use crate::rustc::ty::{self, Ty, TyCtxt, Instance};\n use crate::rustc::ty::subst::{Subst, Substs};\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n+use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::rc::Rc;\n@@ -341,8 +342,12 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                             BinOpKind::Mul => l.checked_mul(r).map(zext),\n                             BinOpKind::Div if r != 0 => l.checked_div(r).map(zext),\n                             BinOpKind::Rem if r != 0 => l.checked_rem(r).map(zext),\n-                            BinOpKind::Shr => l.checked_shr(r as u128 as u32).map(zext),\n-                            BinOpKind::Shl => l.checked_shl(r as u128 as u32).map(zext),\n+                            BinOpKind::Shr => l.checked_shr(\n+                                    (r as u128).try_into().expect(\"shift too large\")\n+                                ).map(zext),\n+                            BinOpKind::Shl => l.checked_shl(\n+                                    (r as u128).try_into().expect(\"shift too large\")\n+                                ).map(zext),\n                             BinOpKind::BitXor => Some(zext(l ^ r)),\n                             BinOpKind::BitOr => Some(zext(l | r)),\n                             BinOpKind::BitAnd => Some(zext(l & r)),\n@@ -362,8 +367,12 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                             BinOpKind::Mul => l.checked_mul(r).map(Constant::Int),\n                             BinOpKind::Div => l.checked_div(r).map(Constant::Int),\n                             BinOpKind::Rem => l.checked_rem(r).map(Constant::Int),\n-                            BinOpKind::Shr => l.checked_shr(r as u32).map(Constant::Int),\n-                            BinOpKind::Shl => l.checked_shl(r as u32).map(Constant::Int),\n+                            BinOpKind::Shr => l.checked_shr(\n+                                    r.try_into().expect(\"shift too large\")\n+                                ).map(Constant::Int),\n+                            BinOpKind::Shl => l.checked_shl(\n+                                    r.try_into().expect(\"shift too large\")\n+                                ).map(Constant::Int),\n                             BinOpKind::BitXor => Some(Constant::Int(l ^ r)),\n                             BinOpKind::BitOr => Some(Constant::Int(l | r)),\n                             BinOpKind::BitAnd => Some(Constant::Int(l & r)),\n@@ -426,8 +435,12 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n         ConstValue::Scalar(Scalar::Bits{ bits: b, ..}) => match result.ty.sty {\n             ty::Bool => Some(Constant::Bool(b == 1)),\n             ty::Uint(_) | ty::Int(_) => Some(Constant::Int(b)),\n-            ty::Float(FloatTy::F32) => Some(Constant::F32(f32::from_bits(b as u32))),\n-            ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(b as u64))),\n+            ty::Float(FloatTy::F32) => Some(Constant::F32(f32::from_bits(\n+                b.try_into().expect(\"invalid f32 bit representation\")\n+            ))),\n+            ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(\n+                b.try_into().expect(\"invalid f64 bit representation\")\n+            ))),\n             // FIXME: implement other conversion\n             _ => None,\n         },\n@@ -439,7 +452,7 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n                         .alloc_map\n                         .lock()\n                         .unwrap_memory(ptr.alloc_id);\n-                    let offset = ptr.offset.bytes() as usize;\n+                    let offset = ptr.offset.bytes().try_into().expect(\"too-large pointer offset\");\n                     let n = n as usize;\n                     String::from_utf8(alloc.bytes[offset..(offset + n)].to_owned()).ok().map(Constant::Str)\n                 },"}, {"sha": "af69a6284f337941d737425d51df89370c12cff1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=eef2e8948b4f0de21669231933739ef0d0f0017a", "patch": "@@ -21,6 +21,7 @@\n #![feature(tool_lints)]\n #![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]\n #![feature(crate_visibility_modifier)]\n+#![feature(try_from)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (currently there is no way to opt into sysroot crates w/o `extern crate`)"}, {"sha": "deb32e49a0dc0483557a51d2c551c13cd16445b6", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=eef2e8948b4f0de21669231933739ef0d0f0017a", "patch": "@@ -18,6 +18,7 @@ use crate::syntax::ast::{LitKind, NodeId, StrStyle};\n use crate::syntax::source_map::{BytePos, Span};\n use crate::utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n use crate::consts::{constant, Constant};\n+use std::convert::TryInto;\n \n /// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n /// (with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct\n@@ -143,8 +144,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u16) -> Span {\n     let offset = u32::from(offset);\n-    let end = base.lo() + BytePos(c.end.offset as u32 + offset);\n-    let start = base.lo() + BytePos(c.start.offset as u32 + offset);\n+    let end = base.lo() + BytePos(\n+        c.end\n+            .offset\n+            .try_into()\n+            .ok()\n+            .and_then(|o: u32| o.checked_add(offset))\n+            .expect(\"offset too large\"),\n+    );\n+    let start = base.lo() + BytePos(\n+        c.start\n+            .offset\n+            .try_into()\n+            .ok()\n+            .and_then(|o: u32| o.checked_add(offset))\n+            .expect(\"offset too large\"),\n+    );\n     assert!(start <= end);\n     Span::new(start, end, base.ctxt())\n }"}, {"sha": "eb67838f1d188e58ba6f89d6e66942f0856e5a47", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef2e8948b4f0de21669231933739ef0d0f0017a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=eef2e8948b4f0de21669231933739ef0d0f0017a", "patch": "@@ -16,6 +16,7 @@ use crate::rustc::hir;\n use crate::rustc::lint::{EarlyContext, LateContext, LintContext};\n use crate::rustc_errors;\n use std::borrow::Cow;\n+use std::convert::TryInto;\n use std::fmt::Display;\n use std;\n use crate::syntax::source_map::{CharPos, Span};\n@@ -551,7 +552,7 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             let non_whitespace_offset = src[fmpos.pos.to_usize()..].find(|c| c != ' ' && c != '\\t' && c != '\\n');\n \n             if let Some(non_whitespace_offset) = non_whitespace_offset {\n-                remove_span = remove_span.with_hi(remove_span.hi() + BytePos(non_whitespace_offset as u32))\n+                remove_span = remove_span.with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")))\n             }\n         }\n "}, {"sha": "0619b3ae0d9c3b1a018168c9f063bffde8efcf50", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eef2e8948b4f0de21669231933739ef0d0f0017a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef2e8948b4f0de21669231933739ef0d0f0017a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=eef2e8948b4f0de21669231933739ef0d0f0017a", "patch": "@@ -12,6 +12,7 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n #![feature(tool_lints)]\n+#![feature(try_from)]\n #![allow(unknown_lints, clippy::missing_docs_in_private_items)]\n \n // FIXME: switch to something more ergonomic here, once available.\n@@ -22,6 +23,7 @@ extern crate rustc_driver;\n extern crate rustc_plugin;\n use self::rustc_driver::{driver::CompileController, Compilation};\n \n+use std::convert::TryInto;\n use std::path::Path;\n use std::process::{exit, Command};\n \n@@ -153,5 +155,5 @@ pub fn main() {\n \n         let args = args;\n         rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n-    }) as i32)\n+    }).try_into().expect(\"exit code too large\"))\n }"}]}