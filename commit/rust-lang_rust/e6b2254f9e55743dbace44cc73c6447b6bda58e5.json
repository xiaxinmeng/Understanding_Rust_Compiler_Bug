{"sha": "e6b2254f9e55743dbace44cc73c6447b6bda58e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YjIyNTRmOWU1NTc0M2RiYWNlNDRjYzczYzY0NDdiNmJkYTU4ZTU=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-06-20T22:12:09Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-09T13:10:00Z"}, "message": "should_implement_trait - pr remarks", "tree": {"sha": "a4f24e4b7d24f82ed7ca9b19183b3eb4d385d30e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f24e4b7d24f82ed7ca9b19183b3eb4d385d30e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b2254f9e55743dbace44cc73c6447b6bda58e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b2254f9e55743dbace44cc73c6447b6bda58e5", "html_url": "https://github.com/rust-lang/rust/commit/e6b2254f9e55743dbace44cc73c6447b6bda58e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b2254f9e55743dbace44cc73c6447b6bda58e5/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc0ecd44b4d09476eade641e02451d949a1c8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc0ecd44b4d09476eade641e02451d949a1c8e2", "html_url": "https://github.com/rust-lang/rust/commit/2bc0ecd44b4d09476eade641e02451d949a1c8e2"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a75989e3f130b8bd3758c3f4307c2313cf2e4f93", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6b2254f9e55743dbace44cc73c6447b6bda58e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b2254f9e55743dbace44cc73c6447b6bda58e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e6b2254f9e55743dbace44cc73c6447b6bda58e5", "patch": "@@ -1498,10 +1498,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 // check missing trait implementations\n                     for &(method_name, n_args, fn_header, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         let no_lifetime_params = || {\n-                            impl_item.generics.params.iter().filter(|p| match p.kind {\n-                               hir::GenericParamKind::Lifetime { .. } => true,\n-                               _ => false,\n-                            }).count() == 0\n+                            !impl_item.generics.params.iter()\n+                                .any(|p| matches!(\n+                                    p.kind,\n+                                    hir::GenericParamKind::Lifetime { .. }))\n                         };\n                         if name == method_name &&\n                             sig.decl.inputs.len() == n_args &&\n@@ -1510,7 +1510,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                             fn_header_equals(*fn_header, sig.header) &&\n                             // ignore methods with lifetime params, risk of false positive\n                             no_lifetime_params()\n-                             {\n+                        {\n                             span_lint(cx, SHOULD_IMPLEMENT_TRAIT, impl_item.span, &format!(\n                                 \"defining a method called `{}` on this type; consider implementing \\\n                                 the `{}` trait or choosing a less ambiguous name\", name, trait_name));"}]}