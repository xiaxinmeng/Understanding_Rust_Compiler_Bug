{"sha": "77ce30f03828c764e8638452acd7b64d1c5cd6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Y2UzMGYwMzgyOGM3NjRlODYzODQ1MmFjZDdiNjRkMWM1Y2Q2Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-03T22:42:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-03T22:42:33Z"}, "message": "Auto merge of #24990 - steveklabnik:doc_associated_constants, r=alexcrichton", "tree": {"sha": "befba4309f3b2f9d2848f05a8adef31fc488051e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/befba4309f3b2f9d2848f05a8adef31fc488051e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ce30f03828c764e8638452acd7b64d1c5cd6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ce30f03828c764e8638452acd7b64d1c5cd6f9", "html_url": "https://github.com/rust-lang/rust/commit/77ce30f03828c764e8638452acd7b64d1c5cd6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ce30f03828c764e8638452acd7b64d1c5cd6f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796be61e9099a440c90f35636ec6a41f89f3639f", "url": "https://api.github.com/repos/rust-lang/rust/commits/796be61e9099a440c90f35636ec6a41f89f3639f", "html_url": "https://github.com/rust-lang/rust/commit/796be61e9099a440c90f35636ec6a41f89f3639f"}, {"sha": "6b465f5c873e767d82bbfcfae99e1fea0140b05a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b465f5c873e767d82bbfcfae99e1fea0140b05a", "html_url": "https://github.com/rust-lang/rust/commit/6b465f5c873e767d82bbfcfae99e1fea0140b05a"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "4dc77aaec5b50aa333350e5fb6b3b1d35a8e1a3f", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77ce30f03828c764e8638452acd7b64d1c5cd6f9/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/77ce30f03828c764e8638452acd7b64d1c5cd6f9/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=77ce30f03828c764e8638452acd7b64d1c5cd6f9", "patch": "@@ -64,5 +64,6 @@\n     * [Benchmark Tests](benchmark-tests.md)\n     * [Box Syntax and Patterns](box-syntax-and-patterns.md)\n     * [Slice Patterns](slice-patterns.md)\n+    * [Associated Constants](associated-constants.md)\n * [Glossary](glossary.md)\n * [Academic Research](academic-research.md)"}, {"sha": "1c097be6d68a682ea7da94a06ad2f2e28274de37", "filename": "src/doc/trpl/associated-constants.md", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/77ce30f03828c764e8638452acd7b64d1c5cd6f9/src%2Fdoc%2Ftrpl%2Fassociated-constants.md", "raw_url": "https://github.com/rust-lang/rust/raw/77ce30f03828c764e8638452acd7b64d1c5cd6f9/src%2Fdoc%2Ftrpl%2Fassociated-constants.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fassociated-constants.md?ref=77ce30f03828c764e8638452acd7b64d1c5cd6f9", "patch": "@@ -0,0 +1,79 @@\n+% Associated Constants\n+\n+With the `associated_consts` feature, you can define constants like this:\n+\n+```rust\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const ID: i32;\n+}\n+\n+impl Foo for i32 {\n+    const ID: i32 = 1;\n+}\n+\n+fn main() {\n+    assert_eq!(1, i32::ID);\n+}\n+```\n+\n+Any implementor of `Foo` will have to define `ID`. Without the definition:\n+\n+```rust,ignore\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const ID: i32;\n+}\n+\n+impl Foo for i32 {\n+}\n+```\n+\n+gives\n+\n+```text\n+error: not all trait items implemented, missing: `ID` [E0046]\n+     impl Foo for i32 {\n+     }\n+```\n+\n+A default value can be implemented as well:\n+\n+```rust\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const ID: i32 = 1;\n+}\n+\n+impl Foo for i32 {\n+}\n+\n+impl Foo for i64 {\n+    const ID: i32 = 5;\n+}\n+\n+fn main() {\n+    assert_eq!(1, i32::ID);\n+    assert_eq!(5, i64::ID);\n+}\n+```\n+\n+As you can see, when implementing `Foo`, you can leave it unimplemented, as\n+with `i32`. It will then use the default value. But, as in `i64`, we can also\n+add our own definition.\n+\n+Associated constants don\u2019t have to be associated with a trait. An `impl` block\n+for a `struct` works fine too:\n+\n+```rust\n+#![feature(associated_consts)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    pub const FOO: u32 = 3;\n+}\n+```"}]}