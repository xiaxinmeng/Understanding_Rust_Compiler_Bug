{"sha": "f1f62051454eb5eef047cf7c02b17d018548513c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZjYyMDUxNDU0ZWI1ZWVmMDQ3Y2Y3YzAyYjE3ZDAxODU0ODUxM2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T16:06:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T16:06:51Z"}, "message": "we can get the Session from the TyCtxt", "tree": {"sha": "1be389378845cff371638971c2994ddc906462a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be389378845cff371638971c2994ddc906462a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1f62051454eb5eef047cf7c02b17d018548513c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6pkbAAoJEFbW7qD8Z6xGMfoP/1lcH0tHOPgQWRADlQAeddQR\nYYX8GHfHG2DYwvt0QXqgK7tN6UAYSE7+6lBPIaQP2pzYVjqm+VZ3fD0f3BSVnQ23\nrQ86um+rt2dSQifHIHpQKIZ+SSlLxgI0IzzO7kyf0IxgMfwT+UOSOd9ZpuI5Y5iG\n9bR01a78OKKgWI7tqSzNT2tFQy07EZ5tHIcSpyVm9VzxC+0KFrNFOx+Kq9c4/VAi\nS+tdJzxNe7yz+ttw8uS8qINW6Fjmn64nKfAIY6JfgdVGIyjV7/V7fLgmaFLfbgdh\nUc4/flv0B31aeosV8Gw77V2uESl8FYAjHVJHdeMVuX1fx8+Xve0zw6xVKU9IvffH\nbZUyFezIAUEVNaob78/64z5eSYdlicwY/Q6amRjwzhAXLN8R5TAKmpQ2okXR63Tn\nCjiuZzDvVJc9ODHh3WTRiBX0VKIrXjZDDN6WBWSC0hF0vOoNraSPTdDtbkT3fme9\nWv7M/zNCMHQSGa4TUrhmAg744hWOweU1AhWtxSQC1W3Qcjl2iNObKSJg/7L6V6C2\nocAl9Gj4lsEMi0rDXY2YKfw27dS+FQcOlyyxy0/GcUeyCzDFElfWPGP8QwKTCsdX\n2rH47RvFirvGX9pArLsFtiuWt5/KQVLsGJ9hKw3bIA6huHlSXQCrt1R4vIwx2iMf\n6F7/hixqhFFtvs7niTi3\n=9CwH\n-----END PGP SIGNATURE-----", "payload": "tree 1be389378845cff371638971c2994ddc906462a0\nparent 5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474992411 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474992411 +0200\n\nwe can get the Session from the TyCtxt"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f62051454eb5eef047cf7c02b17d018548513c", "html_url": "https://github.com/rust-lang/rust/commit/f1f62051454eb5eef047cf7c02b17d018548513c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1f62051454eb5eef047cf7c02b17d018548513c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "html_url": "https://github.com/rust-lang/rust/commit/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "cdd1412204f99019ba4435a10f6323bfc6473faa", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f62051454eb5eef047cf7c02b17d018548513c/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f62051454eb5eef047cf7c02b17d018548513c/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=f1f62051454eb5eef047cf7c02b17d018548513c", "patch": "@@ -58,7 +58,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n \n             let mut mir_map = MirMap { map: mir_map.map.clone() };\n             run_mir_passes(tcx, &mut mir_map);\n-            bencher.borrow_mut().iter(|| { eval_main(tcx, &mir_map, node_id, state.session); });\n+            bencher.borrow_mut().iter(|| { eval_main(tcx, &mir_map, node_id); });\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "cc0132e4090d9ec75bf3c20825bd181095be252b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f62051454eb5eef047cf7c02b17d018548513c/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f62051454eb5eef047cf7c02b17d018548513c/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=f1f62051454eb5eef047cf7c02b17d018548513c", "patch": "@@ -75,7 +75,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                 mir_map_copy.map.insert(def_id, mir_map.map.get(&def_id).unwrap().clone());\n             }\n             run_mir_passes(tcx, &mut mir_map_copy);\n-            eval_main(tcx, &mir_map_copy, entry_def_id, memory_size, step_limit, stack_limit, state.session);\n+            eval_main(tcx, &mir_map_copy, entry_def_id, memory_size, step_limit, stack_limit);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "e6c4c4eb022f7a50af0a000812c9172245f4e503", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1f62051454eb5eef047cf7c02b17d018548513c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f62051454eb5eef047cf7c02b17d018548513c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=f1f62051454eb5eef047cf7c02b17d018548513c", "patch": "@@ -6,7 +6,6 @@ use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::session::Session;\n use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::indexed_vec::Idx;\n use std::cell::RefCell;\n@@ -32,10 +31,6 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n-    /// The Session, from rustc.\n-    /// Used to extract info from other crates\n-    session: &'a Session,\n-\n     /// A mapping from NodeIds to Mir, from rustc. Only contains MIR for crate-local items.\n     mir_map: &'a MirMap<'tcx>,\n \n@@ -159,7 +154,7 @@ pub enum StackPopCleanup {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: usize, stack_limit: usize, session: &'a Session) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: usize, stack_limit: usize) -> Self {\n         EvalContext {\n             tcx: tcx,\n             mir_map: mir_map,\n@@ -168,7 +163,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             statics: HashMap::new(),\n             stack: Vec::new(),\n             stack_limit: stack_limit,\n-            session: session,\n         }\n     }\n \n@@ -1197,10 +1191,9 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     memory_size: usize,\n     step_limit: u64,\n     stack_limit: usize,\n-    session: &'a Session,\n ) {\n     let mir = mir_map.map.get(&def_id).expect(\"no mir for main function\");\n-    let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit, session);\n+    let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit);\n     let substs = subst::Substs::empty(tcx);\n     let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs)\n         .expect(\"should at least be able to allocate space for the main function's return value\");"}, {"sha": "fe386ea5fb606de9af129ef8de5579f6e46c546e", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f62051454eb5eef047cf7c02b17d018548513c/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f62051454eb5eef047cf7c02b17d018548513c/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=f1f62051454eb5eef047cf7c02b17d018548513c", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                     bug!(\"static def id doesn't point to item\");\n                 }\n             } else {\n-                let def = self.ecx.session.cstore.describe_def(def_id).expect(\"static not found\");\n+                let def = self.ecx.tcx.sess.cstore.describe_def(def_id).expect(\"static not found\");\n                 if let hir::def::Def::Static(_, mutable) = def {\n                     self.global_item(def_id, substs, span, !mutable);\n                 } else {"}]}