{"sha": "1e5e541ac57e6757fe8c6c3b316a750730ba7f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNWU1NDFhYzU3ZTY3NTdmZThjNmMzYjMxNmE3NTA3MzBiYTdmOGM=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-08T21:12:32Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T09:13:32Z"}, "message": "Refactor check_for_single_element_loop to its own module", "tree": {"sha": "9fd55103ffcad145383aaea6439ee583d7921487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fd55103ffcad145383aaea6439ee583d7921487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c", "html_url": "https://github.com/rust-lang/rust/commit/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71026cad541615875fc2570bd3eb51c30ce2151d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71026cad541615875fc2570bd3eb51c30ce2151d", "html_url": "https://github.com/rust-lang/rust/commit/71026cad541615875fc2570bd3eb51c30ce2151d"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "8ba19a2233a537827f0df8bbd390db880d794494", "filename": "clippy_lints/src/loops/for_single_element_loop.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c/clippy_lints%2Fsrc%2Floops%2Ffor_single_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c/clippy_lints%2Fsrc%2Floops%2Ffor_single_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_single_element_loop.rs?ref=1e5e541ac57e6757fe8c6c3b316a750730ba7f8c", "patch": "@@ -0,0 +1,42 @@\n+use super::get_span_of_entire_for_loop;\n+use crate::utils::{indent_of, single_segment_path, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Pat, PatKind};\n+use rustc_lint::LateContext;\n+\n+pub(super) fn check_for_single_element_loop<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pat: &'tcx Pat<'_>,\n+    arg: &'tcx Expr<'_>,\n+    body: &'tcx Expr<'_>,\n+    expr: &'tcx Expr<'_>,\n+) {\n+    if_chain! {\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg_expr) = arg.kind;\n+        if let PatKind::Binding(.., target, _) = pat.kind;\n+        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n+        if let ExprKind::Path(ref list_item) = arg_expression.kind;\n+        if let Some(list_item_name) = single_segment_path(list_item).map(|ps| ps.ident.name);\n+        if let ExprKind::Block(ref block, _) = body.kind;\n+        if !block.stmts.is_empty();\n+\n+        then {\n+            let for_span = get_span_of_entire_for_loop(expr);\n+            let mut block_str = snippet(cx, block.span, \"..\").into_owned();\n+            block_str.remove(0);\n+            block_str.pop();\n+\n+\n+            span_lint_and_sugg(\n+                cx,\n+                super::SINGLE_ELEMENT_LOOP,\n+                for_span,\n+                \"for loop over a single element\",\n+                \"try\",\n+                format!(\"{{\\n{}let {} = &{};{}}}\", \" \".repeat(indent_of(cx, block.stmts[0].span).unwrap_or(0)), target.name, list_item_name, block_str),\n+                Applicability::MachineApplicable\n+            )\n+        }\n+    }\n+}"}, {"sha": "d434762bc228b59a6a4c5e406b42f8b268d7c301", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5e541ac57e6757fe8c6c3b316a750730ba7f8c/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=1e5e541ac57e6757fe8c6c3b316a750730ba7f8c", "patch": "@@ -3,16 +3,17 @@ mod for_loop_explicit_counter;\n mod for_loop_over_map_kv;\n mod for_loop_range;\n mod for_mut_range_bound;\n+mod for_single_element_loop;\n mod manual_flatten;\n mod utils;\n \n use crate::consts::constant;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_enclosing_block, get_parent_expr, get_trait_def_id, higher, implements_trait, indent_of, is_in_panic_handler,\n+    get_enclosing_block, get_parent_expr, get_trait_def_id, higher, implements_trait, is_in_panic_handler,\n     is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment, match_trait_method,\n-    match_type, path_to_local, path_to_local_id, paths, single_segment_path, snippet, snippet_with_applicability,\n+    match_type, path_to_local, path_to_local_id, paths, snippet, snippet_with_applicability,\n     snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n };\n use if_chain::if_chain;\n@@ -863,7 +864,7 @@ fn check_for_loop<'tcx>(\n     for_loop_arg::check_for_loop_arg(cx, pat, arg, expr);\n     for_loop_over_map_kv::check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n     for_mut_range_bound::check_for_mut_range_bound(cx, arg, body);\n-    check_for_single_element_loop(cx, pat, arg, body, expr);\n+    for_single_element_loop::check_for_single_element_loop(cx, pat, arg, body, expr);\n     detect_same_item_push(cx, pat, arg, body, expr);\n     manual_flatten::check_manual_flatten(cx, pat, arg, body, span);\n }\n@@ -1464,42 +1465,6 @@ fn detect_same_item_push<'tcx>(\n     }\n }\n \n-fn check_for_single_element_loop<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    pat: &'tcx Pat<'_>,\n-    arg: &'tcx Expr<'_>,\n-    body: &'tcx Expr<'_>,\n-    expr: &'tcx Expr<'_>,\n-) {\n-    if_chain! {\n-        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg_expr) = arg.kind;\n-        if let PatKind::Binding(.., target, _) = pat.kind;\n-        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n-        if let ExprKind::Path(ref list_item) = arg_expression.kind;\n-        if let Some(list_item_name) = single_segment_path(list_item).map(|ps| ps.ident.name);\n-        if let ExprKind::Block(ref block, _) = body.kind;\n-        if !block.stmts.is_empty();\n-\n-        then {\n-            let for_span = get_span_of_entire_for_loop(expr);\n-            let mut block_str = snippet(cx, block.span, \"..\").into_owned();\n-            block_str.remove(0);\n-            block_str.pop();\n-\n-\n-            span_lint_and_sugg(\n-                cx,\n-                SINGLE_ELEMENT_LOOP,\n-                for_span,\n-                \"for loop over a single element\",\n-                \"try\",\n-                format!(\"{{\\n{}let {} = &{};{}}}\", \" \".repeat(indent_of(cx, block.stmts[0].span).unwrap_or(0)), target.name, list_item_name, block_str),\n-                Applicability::MachineApplicable\n-            )\n-        }\n-    }\n-}\n-\n fn is_used_inside<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, container: &'tcx Expr<'_>) -> bool {\n     let def_id = match path_to_local(expr) {\n         Some(id) => id,"}]}