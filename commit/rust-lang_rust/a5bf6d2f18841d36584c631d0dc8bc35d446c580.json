{"sha": "a5bf6d2f18841d36584c631d0dc8bc35d446c580", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YmY2ZDJmMTg4NDFkMzY1ODRjNjMxZDBkYzhiYzM1ZDQ0NmM1ODA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T16:27:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T16:27:53Z"}, "message": "Rustup to rustc 1.52.0-nightly (83b30a639 2021-02-20)", "tree": {"sha": "3ecd5384abaa6431e2638d1d1c8194e2252fb1cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecd5384abaa6431e2638d1d1c8194e2252fb1cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5bf6d2f18841d36584c631d0dc8bc35d446c580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bf6d2f18841d36584c631d0dc8bc35d446c580", "html_url": "https://github.com/rust-lang/rust/commit/a5bf6d2f18841d36584c631d0dc8bc35d446c580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5bf6d2f18841d36584c631d0dc8bc35d446c580/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "013b3c5a7ca7f9e180d557e9243ef2e523082002", "url": "https://api.github.com/repos/rust-lang/rust/commits/013b3c5a7ca7f9e180d557e9243ef2e523082002", "html_url": "https://github.com/rust-lang/rust/commit/013b3c5a7ca7f9e180d557e9243ef2e523082002"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "a7650ab995b0fa4466619d9d28d27345b940f9f8", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5bf6d2f18841d36584c631d0dc8bc35d446c580/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a5bf6d2f18841d36584c631d0dc8bc35d446c580/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=a5bf6d2f18841d36584c631d0dc8bc35d446c580", "patch": "@@ -1,5 +1,7 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n+version = 3\n+\n [[package]]\n name = \"addr2line\"\n version = \"0.14.1\"\n@@ -38,9 +40,9 @@ checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.66\"\n+version = \"1.0.67\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c0496836a84f8d0495758516b8621a622beb77c0fed418570e50764093ced48\"\n+checksum = \"e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd\"\n \n [[package]]\n name = \"cfg-if\""}, {"sha": "ddeb752f93ed71257d6dd2e39d33b372416eca1a", "filename": "example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a5bf6d2f18841d36584c631d0dc8bc35d446c580/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5bf6d2f18841d36584c631d0dc8bc35d446c580/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=a5bf6d2f18841d36584c631d0dc8bc35d446c580", "patch": "@@ -1,22 +1,12 @@\n // Adapted from rustc run-pass test suite\n \n-#![feature(no_core, arbitrary_self_types, box_syntax)]\n+#![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]\n #![feature(rustc_attrs)]\n \n-#![feature(start, lang_items)]\n-#![no_core]\n-\n-extern crate mini_core;\n-\n-use mini_core::*;\n-\n-macro_rules! assert_eq {\n-    ($l:expr, $r: expr) => {\n-        if $l != $r {\n-            panic(stringify!($l != $r));\n-        }\n-    }\n-}\n+use std::{\n+    ops::{Deref, CoerceUnsized, DispatchFromDyn},\n+    marker::Unsize,\n+};\n \n struct Ptr<T: ?Sized>(Box<T>);\n \n@@ -67,16 +57,13 @@ impl Trait for i32 {\n     }\n }\n \n-#[start]\n-fn main(_: isize, _: *const *const u8) -> isize {\n-    let pw = Ptr(box Wrapper(5)) as Ptr<Wrapper<dyn Trait>>;\n+fn main() {\n+    let pw = Ptr(Box::new(Wrapper(5))) as Ptr<Wrapper<dyn Trait>>;\n     assert_eq!(pw.ptr_wrapper(), 5);\n \n-    let wp = Wrapper(Ptr(box 6)) as Wrapper<Ptr<dyn Trait>>;\n+    let wp = Wrapper(Ptr(Box::new(6))) as Wrapper<Ptr<dyn Trait>>;\n     assert_eq!(wp.wrapper_ptr(), 6);\n \n-    let wpw = Wrapper(Ptr(box Wrapper(7))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n+    let wpw = Wrapper(Ptr(Box::new(Wrapper(7)))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n     assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n-\n-    0\n }"}, {"sha": "8c8c58d90d91472582f547440af8f0001f7ec30e", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5bf6d2f18841d36584c631d0dc8bc35d446c580/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a5bf6d2f18841d36584c631d0dc8bc35d446c580/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a5bf6d2f18841d36584c631d0dc8bc35d446c580", "patch": "@@ -1 +1 @@\n-nightly-2021-02-09\n+nightly-2021-02-21"}, {"sha": "f9a9fb091fb4ac0117eec2e9315882e54082d6d6", "filename": "scripts/tests.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5bf6d2f18841d36584c631d0dc8bc35d446c580/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a5bf6d2f18841d36584c631d0dc8bc35d446c580/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=a5bf6d2f18841d36584c631d0dc8bc35d446c580", "patch": "@@ -27,13 +27,13 @@ function no_sysroot_tests() {\n     $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n     # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n+}\n \n+function base_sysroot_tests() {\n     echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n     $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n-}\n \n-function base_sysroot_tests() {\n     echo \"[AOT] alloc_system\"\n     $MY_RUSTC example/alloc_system.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n "}]}