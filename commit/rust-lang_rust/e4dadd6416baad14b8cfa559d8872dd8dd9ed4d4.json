{"sha": "e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4", "node_id": "C_kwDOAAsO6NoAKGU0ZGFkZDY0MTZiYWFkMTRiOGNmYTU1OWQ4ODcyZGQ4ZGQ5ZWQ0ZDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-20T13:32:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-20T13:32:56Z"}, "message": "Rollup merge of #108265 - lcnr:cg-error-msg, r=BoxyUwU\n\n\"`const` generic\" -> \"const parameter\"", "tree": {"sha": "f56db511504050bfd2fb5d887a3b01c2538da882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56db511504050bfd2fb5d887a3b01c2538da882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj83aICRBK7hj4Ov3rIwAAlw4IAIlofvBYvhXvVI/X0BlgbXDQ\nnS1Dt9CMCrWF3mS1FxXIBw7DdOvA2Fvo+65dCBp7NKuhR77DW4jfBMB9j0rvP3u0\n2hGCCv0ybbnipTgQulkjQ4wMocim5Vk1KaFTADNR2GyMbL5bSDwwlWc31UMwQF3Y\nIN2ZhPNvbZB7/ZFN0uGgW2aH6TE3/SbGuZzCLoQQMrpda3yRP55ljbt3ck8pk9o4\nGqGQEge224rs/HHh5kWOaDdg38MLcWF634qBA1yQWdOYZvl5gtxX72vAwmyUBN3a\ndw4SfcPzBF6FRVcYCjSiUVer2Wt/LJArohS1gwjCrv8eTpSVA18f+q4Dep9MXa4=\n=+pD6\n-----END PGP SIGNATURE-----\n", "payload": "tree f56db511504050bfd2fb5d887a3b01c2538da882\nparent 133afeb6e37f42283922e0d755b27db9aff629f0\nparent 2cbe5835932a6706e2497bd8a86a214a7b535134\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676899976 +0100\ncommitter GitHub <noreply@github.com> 1676899976 +0100\n\nRollup merge of #108265 - lcnr:cg-error-msg, r=BoxyUwU\n\n\"`const` generic\" -> \"const parameter\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4", "html_url": "https://github.com/rust-lang/rust/commit/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133afeb6e37f42283922e0d755b27db9aff629f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/133afeb6e37f42283922e0d755b27db9aff629f0", "html_url": "https://github.com/rust-lang/rust/commit/133afeb6e37f42283922e0d755b27db9aff629f0"}, {"sha": "2cbe5835932a6706e2497bd8a86a214a7b535134", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbe5835932a6706e2497bd8a86a214a7b535134", "html_url": "https://github.com/rust-lang/rust/commit/2cbe5835932a6706e2497bd8a86a214a7b535134"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "630becc09d26e482b976c15f90427cec30294a72", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -26,7 +26,7 @@ fn generic_arg_mismatch_err(\n     param: &GenericParamDef,\n     possible_ordering_error: bool,\n     help: Option<&str>,\n-) {\n+) -> ErrorGuaranteed {\n     let sess = tcx.sess;\n     let mut err = struct_span_err!(\n         sess,\n@@ -70,9 +70,9 @@ fn generic_arg_mismatch_err(\n         ) => match path.res {\n             Res::Err => {\n                 add_braces_suggestion(arg, &mut err);\n-                err.set_primary_message(\"unresolved item provided when a constant was expected\")\n+                return err\n+                    .set_primary_message(\"unresolved item provided when a constant was expected\")\n                     .emit();\n-                return;\n             }\n             Res::Def(DefKind::TyParam, src_def_id) => {\n                 if let Some(param_local_id) = param.def_id.as_local() {\n@@ -81,7 +81,7 @@ fn generic_arg_mismatch_err(\n                     if param_type.is_suggestable(tcx, false) {\n                         err.span_suggestion(\n                             tcx.def_span(src_def_id),\n-                            \"consider changing this type parameter to be a `const` generic\",\n+                            \"consider changing this type parameter to a const parameter\",\n                             format!(\"const {}: {}\", param_name, param_type),\n                             Applicability::MaybeIncorrect,\n                         );\n@@ -137,7 +137,7 @@ fn generic_arg_mismatch_err(\n         }\n     }\n \n-    err.emit();\n+    err.emit()\n }\n \n /// Creates the relevant generic argument substitutions"}, {"sha": "cee34e3b7159372c46c44e06a75c29b9c0dfe8d5", "filename": "tests/ui/const-generics/early/invalid-const-arguments.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4/tests%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4/tests%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.stderr?ref=e4dadd6416baad14b8cfa559d8872dd8dd9ed4d4", "patch": "@@ -49,12 +49,9 @@ error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-const-arguments.rs:10:19\n    |\n LL | impl<N> Foo for B<N> {}\n-   |                   ^\n-   |\n-help: consider changing this type parameter to be a `const` generic\n-   |\n-LL | impl<const N: u8> Foo for B<N> {}\n-   |      ~~~~~~~~~~~\n+   |      -            ^\n+   |      |\n+   |      help: consider changing this type parameter to a const parameter: `const N: u8`\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-const-arguments.rs:14:32"}]}