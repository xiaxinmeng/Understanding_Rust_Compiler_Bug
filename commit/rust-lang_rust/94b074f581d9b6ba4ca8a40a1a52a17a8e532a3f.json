{"sha": "94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjA3NGY1ODFkOWI2YmE0Y2E4YTQwYTFhNTJhMTdhOGU1MzJhM2Y=", "commit": {"author": {"name": "Dan Callahan", "email": "dan.callahan@gmail.com", "date": "2017-05-25T02:43:46Z"}, "committer": {"name": "Dan Callahan", "email": "dan.callahan@gmail.com", "date": "2017-05-25T02:43:46Z"}, "message": "Remove superfluous `;;` sequences", "tree": {"sha": "6afd90b393e06fdc9fbc32a711bc261dde4ab73a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6afd90b393e06fdc9fbc32a711bc261dde4ab73a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEeqXa0clWQLjeiNSvjW3XE+nrp/0FAlkmRQoACgkQjW3XE+nr\np/03BRAAoK0akBmYSrc/sjLWYMyArBTrKRm/WdO1AHp5Y7C0cZnuw7o8ShbpQmyq\nkKUD8AGuzNWFqWxymkQqaBiBovfo0TbX3gWBOrNiFGQ1gPbYO1XAN3w9aFba+NtZ\nTo0W7J/QbZiJvSfqkYCeMA+qgu/lP0ji41uQhzzpCb3eTBF5xirYWL6WoWr6VzbO\nGLqZ3zlok7VAH+04u+5BlF2Ndq35x2d6Zp5Ie8WMKgbB/mArbHxIkgfKTK/W58rU\nZtRk6AvYcsMCgAnvERdoeOqOd5XXCs4JPLYN8irH7BUgnUr6kOletPuFOADnppKy\noPyLX35Qrw7xA1P26dJFYf2b4c524WNyUuRPUXcFQ9schxy2j9g1J7HTLwtnXI68\nAU7H5nbMSF1YyMos5GZovXx434VH+aVJuNiLGefZ7ncOoJ6vKuK9oAjNzOIx9DJs\n08rmhnhbBkDhNEqZKnScENV8AfUtNwRtsSLprsceaXWujkLZRhBl1AhA4li85ABp\nPy4xmR9Tsq8iy7vIYYQZpY0vAM8GSkiKhLXbXEZE6zCOX0/QeQdaw+toQ+NlCah0\nJMqO7nxtndd/rCOHFrSAfB0Z4yFulOfJmn4tCJHAa7d/vO4k1nK1CMZvUtceXGkE\nBGPloVbiLFnLT813ggjX2OkY17rG6lj8HcMg4avFqoVLwWVYUbM=\n=NPPz\n-----END PGP SIGNATURE-----", "payload": "tree 6afd90b393e06fdc9fbc32a711bc261dde4ab73a\nparent 5b13bff5203c1bdc6ac6dc87f69b5359a9503078\nauthor Dan Callahan <dan.callahan@gmail.com> 1495680226 -0500\ncommitter Dan Callahan <dan.callahan@gmail.com> 1495680226 -0500\n\nRemove superfluous `;;` sequences\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "html_url": "https://github.com/rust-lang/rust/commit/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/comments", "author": {"login": "callahad", "id": 24193, "node_id": "MDQ6VXNlcjI0MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/24193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/callahad", "html_url": "https://github.com/callahad", "followers_url": "https://api.github.com/users/callahad/followers", "following_url": "https://api.github.com/users/callahad/following{/other_user}", "gists_url": "https://api.github.com/users/callahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/callahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/callahad/subscriptions", "organizations_url": "https://api.github.com/users/callahad/orgs", "repos_url": "https://api.github.com/users/callahad/repos", "events_url": "https://api.github.com/users/callahad/events{/privacy}", "received_events_url": "https://api.github.com/users/callahad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "callahad", "id": 24193, "node_id": "MDQ6VXNlcjI0MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/24193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/callahad", "html_url": "https://github.com/callahad", "followers_url": "https://api.github.com/users/callahad/followers", "following_url": "https://api.github.com/users/callahad/following{/other_user}", "gists_url": "https://api.github.com/users/callahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/callahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/callahad/subscriptions", "organizations_url": "https://api.github.com/users/callahad/orgs", "repos_url": "https://api.github.com/users/callahad/repos", "events_url": "https://api.github.com/users/callahad/events{/privacy}", "received_events_url": "https://api.github.com/users/callahad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "html_url": "https://github.com/rust-lang/rust/commit/5b13bff5203c1bdc6ac6dc87f69b5359a9503078"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3ea2050619bbc0f91ede1d9f8f74720deabcc1cf", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "patch": "@@ -1018,7 +1018,7 @@ impl str {\n     ///\n     /// ```\n     /// let x = \"(///)\".to_string();\n-    /// let d: Vec<_> = x.split('/').collect();;\n+    /// let d: Vec<_> = x.split('/').collect();\n     ///\n     /// assert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n     /// ```"}, {"sha": "698850f0e9e7fa6e20908930f6b3d3b5a23040d0", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         let outer_penv = self.tcx.infer_ctxt(body_id, Reveal::UserFacing).enter(|infcx| {\n             let param_env = infcx.param_env.clone();\n             let outer_penv = mem::replace(&mut self.param_env, param_env);\n-            let region_maps = &self.tcx.region_maps(item_def_id);;\n+            let region_maps = &self.tcx.region_maps(item_def_id);\n             euv::ExprUseVisitor::new(self, region_maps, &infcx).consume_body(body);\n             outer_penv\n         });"}, {"sha": "a3fa1279ffb4575866cb091e27afe236bbfb85ca", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "patch": "@@ -901,7 +901,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         let llty = type_of::type_of(bcx.ccx, val.ty);\n         let cast_ptr = bcx.pointercast(dst.llval, llty.ptr_to());\n         let in_type = val.ty;\n-        let out_type = dst.ty.to_ty(bcx.tcx());;\n+        let out_type = dst.ty.to_ty(bcx.tcx());\n         let llalign = cmp::min(bcx.ccx.align_of(in_type), bcx.ccx.align_of(out_type));\n         self.store_operand(bcx, cast_ptr, Some(llalign), val);\n     }"}, {"sha": "49dc970ba3f0dfbe1e6c7ead8b0b144c1ef0ad8c", "filename": "src/test/run-pass/issue-16671.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16671.rs?ref=94b074f581d9b6ba4ca8a40a1a52a17a8e532a3f", "patch": "@@ -13,7 +13,7 @@\n fn foo<F: FnOnce()>(_f: F) { }\n \n fn main() {\n-    let mut var = Vec::new();;\n+    let mut var = Vec::new();\n     foo(move|| {\n         var.push(1);\n     });"}]}