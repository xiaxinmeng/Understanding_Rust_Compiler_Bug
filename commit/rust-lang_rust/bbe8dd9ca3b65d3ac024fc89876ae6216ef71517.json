{"sha": "bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZThkZDljYTNiNjVkM2FjMDI0ZmM4OTg3NmFlNjIxNmVmNzE1MTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-26T17:21:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-26T17:21:47Z"}, "message": "Rollup merge of #57908 - petrochenkov:errepice, r=estebank\n\nresolve: Fix span arithmetics in the import conflict error\n\nhttps://github.com/rust-lang/rust/pull/56937 rebased and fixed\n\nFixes https://github.com/rust-lang/rust/issues/56411\nFixes https://github.com/rust-lang/rust/issues/57071\nFixes https://github.com/rust-lang/rust/issues/57787\n\nr? @estebank", "tree": {"sha": "52fda633ebe785e1f4673ffb997cbe772034ac42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52fda633ebe785e1f4673ffb997cbe772034ac42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcTJcsCRBK7hj4Ov3rIwAAdHIIAKcntQADEUo0YflEqQjT1SER\nV8LvHx8zpiFJCkbZ2aSkZiHrPJ5BPdVuKsvf62ErKx0gaB3GjE6ErQGyWTI7p/rC\nD+rTYeh4IglsZzKUooF64HoJRj62F+kIxtYFGa29zbaPINk49tZEiVFytt9i3gKi\npDo7l3FIdKARsR0QmAeSeM1+Upvs36+/KyfWD8DU8mQ7PzHTN3tX/T/NfSwgDT3d\nlzIoHGfRUq3rCQQ71UjqcMmVQ6XC6OAdCqiQofGymBA8csQcFr/96cQEq695S8UW\nV6BN5Kfc6zls13Q/5RzBsTj5jktOu4qeb/khAoMQY0GSzOI12KnUIooKXLBouw4=\n=l9x2\n-----END PGP SIGNATURE-----\n", "payload": "tree 52fda633ebe785e1f4673ffb997cbe772034ac42\nparent 1206264fb222a4d868e21ecb5802602d4236a83a\nparent 1b659d69bc0ba7fe534cc26bda8544a558a7d2b2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548523307 +0100\ncommitter GitHub <noreply@github.com> 1548523307 +0100\n\nRollup merge of #57908 - petrochenkov:errepice, r=estebank\n\nresolve: Fix span arithmetics in the import conflict error\n\nhttps://github.com/rust-lang/rust/pull/56937 rebased and fixed\n\nFixes https://github.com/rust-lang/rust/issues/56411\nFixes https://github.com/rust-lang/rust/issues/57071\nFixes https://github.com/rust-lang/rust/issues/57787\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "html_url": "https://github.com/rust-lang/rust/commit/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1206264fb222a4d868e21ecb5802602d4236a83a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1206264fb222a4d868e21ecb5802602d4236a83a", "html_url": "https://github.com/rust-lang/rust/commit/1206264fb222a4d868e21ecb5802602d4236a83a"}, {"sha": "1b659d69bc0ba7fe534cc26bda8544a558a7d2b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b659d69bc0ba7fe534cc26bda8544a558a7d2b2", "html_url": "https://github.com/rust-lang/rust/commit/1b659d69bc0ba7fe534cc26bda8544a558a7d2b2"}], "stats": {"total": 144, "additions": 98, "deletions": 46}, "files": [{"sha": "873ace90172602f93b294b5ad075a4e4c4a500b8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 45, "deletions": 46, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "patch": "@@ -5134,60 +5134,59 @@ impl<'a> Resolver<'a> {\n         );\n \n         // See https://github.com/rust-lang/rust/issues/32354\n-        if old_binding.is_import() || new_binding.is_import() {\n-            let binding = if new_binding.is_import() && !new_binding.span.is_dummy() {\n-                new_binding\n+        let directive = match (&new_binding.kind, &old_binding.kind) {\n+            (NameBindingKind::Import { directive, .. }, _) if !new_binding.span.is_dummy() =>\n+                Some((directive, new_binding.span)),\n+            (_, NameBindingKind::Import { directive, .. }) if !old_binding.span.is_dummy() =>\n+                Some((directive, old_binding.span)),\n+            _ => None,\n+        };\n+        if let Some((directive, binding_span)) = directive {\n+            let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n+                format!(\"Other{}\", name)\n             } else {\n-                old_binding\n+                format!(\"other_{}\", name)\n             };\n \n-            let cm = self.session.source_map();\n-            let rename_msg = \"you can use `as` to change the binding name of the import\";\n-\n-            if let (\n-                Ok(snippet),\n-                NameBindingKind::Import { directive, ..},\n-                _dummy @ false,\n-            ) = (\n-                cm.span_to_snippet(binding.span),\n-                binding.kind.clone(),\n-                binding.span.is_dummy(),\n-            ) {\n-                let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n-                    format!(\"Other{}\", name)\n-                } else {\n-                    format!(\"other_{}\", name)\n-                };\n+            let mut suggestion = None;\n+            match directive.subclass {\n+                ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n+                    suggestion = Some(format!(\"self as {}\", suggested_name)),\n+                ImportDirectiveSubclass::SingleImport { source, .. } => {\n+                    if let Some(pos) = source.span.hi().0.checked_sub(binding_span.lo().0)\n+                                                         .map(|pos| pos as usize) {\n+                        if let Ok(snippet) = self.session.source_map()\n+                                                         .span_to_snippet(binding_span) {\n+                            if pos <= snippet.len() {\n+                                suggestion = Some(format!(\n+                                    \"{} as {}{}\",\n+                                    &snippet[..pos],\n+                                    suggested_name,\n+                                    if snippet.ends_with(\";\") { \";\" } else { \"\" }\n+                                ))\n+                            }\n+                        }\n+                    }\n+                }\n+                ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n+                    suggestion = Some(format!(\n+                        \"extern crate {} as {};\",\n+                        source.unwrap_or(target.name),\n+                        suggested_name,\n+                    )),\n+                _ => unreachable!(),\n+            }\n \n+            let rename_msg = \"you can use `as` to change the binding name of the import\";\n+            if let Some(suggestion) = suggestion {\n                 err.span_suggestion_with_applicability(\n-                    binding.span,\n-                    &rename_msg,\n-                    match directive.subclass {\n-                        ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n-                            format!(\"self as {}\", suggested_name),\n-                        ImportDirectiveSubclass::SingleImport { source, .. } =>\n-                            format!(\n-                                \"{} as {}{}\",\n-                                &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n-                                suggested_name,\n-                                if snippet.ends_with(\";\") {\n-                                    \";\"\n-                                } else {\n-                                    \"\"\n-                                }\n-                            ),\n-                        ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n-                            format!(\n-                                \"extern crate {} as {};\",\n-                                source.unwrap_or(target.name),\n-                                suggested_name,\n-                            ),\n-                        _ => unreachable!(),\n-                    },\n+                    binding_span,\n+                    rename_msg,\n+                    suggestion,\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.span_label(binding.span, rename_msg);\n+                err.span_label(binding_span, rename_msg);\n             }\n         }\n "}, {"sha": "3561c21cc7ee34d4ebc8759d80d88d68691d9a2f", "filename": "src/test/ui/issues/issue-56411.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Ftest%2Fui%2Fissues%2Fissue-56411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Ftest%2Fui%2Fissues%2Fissue-56411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56411.rs?ref=bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! import {\n+    ( $($name:ident),* ) => {\n+        $(\n+            mod $name;\n+            pub use self::$name;\n+            //~^ ERROR the name `issue_56411_aux` is defined multiple times\n+            //~| ERROR `issue_56411_aux` is private, and cannot be re-exported\n+\n+        )*\n+    }\n+}\n+\n+import!(issue_56411_aux);\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "dd05852c091599c3521e9648677bd9fdab44336b", "filename": "src/test/ui/issues/issue-56411.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr?ref=bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "patch": "@@ -0,0 +1,31 @@\n+error[E0255]: the name `issue_56411_aux` is defined multiple times\n+  --> $DIR/issue-56411.rs:5:21\n+   |\n+LL |             mod $name;\n+   |             ---------- previous definition of the module `issue_56411_aux` here\n+LL |             pub use self::$name;\n+   |                     ^^^^^^^^^^^\n+   |                     |\n+   |                     `issue_56411_aux` reimported here\n+   |                     you can use `as` to change the binding name of the import\n+...\n+LL | import!(issue_56411_aux);\n+   | ------------------------- in this macro invocation\n+   |\n+   = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n+\n+error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n+  --> $DIR/issue-56411.rs:5:21\n+   |\n+LL |             pub use self::$name;\n+   |                     ^^^^^^^^^^^ re-export of private `issue_56411_aux`\n+...\n+LL | import!(issue_56411_aux);\n+   | ------------------------- in this macro invocation\n+   |\n+   = note: consider declaring type or module `issue_56411_aux` with `pub`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0255, E0365.\n+For more information about an error, try `rustc --explain E0255`."}, {"sha": "bd689e913aba6e1367357ebb6478abe16bf54302", "filename": "src/test/ui/issues/issue_56411_aux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Ftest%2Fui%2Fissues%2Fissue_56411_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe8dd9ca3b65d3ac024fc89876ae6216ef71517/src%2Ftest%2Fui%2Fissues%2Fissue_56411_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue_56411_aux.rs?ref=bbe8dd9ca3b65d3ac024fc89876ae6216ef71517", "patch": "@@ -0,0 +1,5 @@\n+// compile-pass\n+\n+struct T {}\n+\n+fn main() {}"}]}