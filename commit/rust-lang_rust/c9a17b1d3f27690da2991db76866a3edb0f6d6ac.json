{"sha": "c9a17b1d3f27690da2991db76866a3edb0f6d6ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTE3YjFkM2YyNzY5MGRhMjk5MWRiNzY4NjZhM2VkYjBmNmQ2YWM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-15T13:07:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T20:13:25Z"}, "message": "Fix broken handling of `MacroDef` in `Map::attrs`\n\nThis also uses an exhaustive match to avoid future similar bugs.", "tree": {"sha": "263c2eaa651786bbabefc0916329371552b4a3fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263c2eaa651786bbabefc0916329371552b4a3fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a17b1d3f27690da2991db76866a3edb0f6d6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a17b1d3f27690da2991db76866a3edb0f6d6ac", "html_url": "https://github.com/rust-lang/rust/commit/c9a17b1d3f27690da2991db76866a3edb0f6d6ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a17b1d3f27690da2991db76866a3edb0f6d6ac/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c28ffbef344598092141c93c25a950502999018", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c28ffbef344598092141c93c25a950502999018", "html_url": "https://github.com/rust-lang/rust/commit/6c28ffbef344598092141c93c25a950502999018"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "37ec3d3d1cab923b4d57aff61ffb318562131e61", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c9a17b1d3f27690da2991db76866a3edb0f6d6ac/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a17b1d3f27690da2991db76866a3edb0f6d6ac/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c9a17b1d3f27690da2991db76866a3edb0f6d6ac", "patch": "@@ -806,25 +806,34 @@ impl<'hir> Map<'hir> {\n     /// Given a node ID, gets a list of attributes associated with the AST\n     /// corresponding to the node-ID.\n     pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n-        let attrs = match self.find_entry(id).map(|entry| entry.node) {\n-            Some(Node::Param(a)) => Some(&a.attrs[..]),\n-            Some(Node::Local(l)) => Some(&l.attrs[..]),\n-            Some(Node::Item(i)) => Some(&i.attrs[..]),\n-            Some(Node::ForeignItem(fi)) => Some(&fi.attrs[..]),\n-            Some(Node::TraitItem(ref ti)) => Some(&ti.attrs[..]),\n-            Some(Node::ImplItem(ref ii)) => Some(&ii.attrs[..]),\n-            Some(Node::Variant(ref v)) => Some(&v.attrs[..]),\n-            Some(Node::Field(ref f)) => Some(&f.attrs[..]),\n-            Some(Node::Expr(ref e)) => Some(&*e.attrs),\n-            Some(Node::Stmt(ref s)) => Some(s.kind.attrs(|id| self.item(id.id))),\n-            Some(Node::Arm(ref a)) => Some(&*a.attrs),\n-            Some(Node::GenericParam(param)) => Some(&param.attrs[..]),\n+        let attrs = self.find_entry(id).map(|entry| match entry.node {\n+            Node::Param(a) => &a.attrs[..],\n+            Node::Local(l) => &l.attrs[..],\n+            Node::Item(i) => &i.attrs[..],\n+            Node::ForeignItem(fi) => &fi.attrs[..],\n+            Node::TraitItem(ref ti) => &ti.attrs[..],\n+            Node::ImplItem(ref ii) => &ii.attrs[..],\n+            Node::Variant(ref v) => &v.attrs[..],\n+            Node::Field(ref f) => &f.attrs[..],\n+            Node::Expr(ref e) => &*e.attrs,\n+            Node::Stmt(ref s) => s.kind.attrs(|id| self.item(id.id)),\n+            Node::Arm(ref a) => &*a.attrs,\n+            Node::GenericParam(param) => &param.attrs[..],\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n-            Some(Node::Ctor(..)) => return self.attrs(self.get_parent_item(id)),\n-            Some(Node::Crate(item)) => Some(&item.attrs[..]),\n-            _ => None,\n-        };\n+            Node::Ctor(..) => self.attrs(self.get_parent_item(id)),\n+            Node::Crate(item) => &item.attrs[..],\n+            Node::MacroDef(def) => def.attrs,\n+            Node::AnonConst(..)\n+            | Node::PathSegment(..)\n+            | Node::Ty(..)\n+            | Node::Pat(..)\n+            | Node::Binding(..)\n+            | Node::TraitRef(..)\n+            | Node::Block(..)\n+            | Node::Lifetime(..)\n+            | Node::Visibility(..) => &[],\n+        });\n         attrs.unwrap_or(&[])\n     }\n "}]}