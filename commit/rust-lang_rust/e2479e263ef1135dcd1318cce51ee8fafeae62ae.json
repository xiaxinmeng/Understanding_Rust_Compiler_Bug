{"sha": "e2479e263ef1135dcd1318cce51ee8fafeae62ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDc5ZTI2M2VmMTEzNWRjZDEzMThjY2U1MWVlOGZhZmVhZTYyYWU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-06-22T20:27:16Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-06-27T18:40:35Z"}, "message": "Use more efficient iteration order for backward dataflow\n\nThis applies the same basic principle as #62062 to the reverse dataflow\nanalysis used to compute liveness information. It is functionally\nequivalent, except that post-order is used instead of reverse post-order.\n\nSome `mir::Body`s contain basic blocks which are not reachable from the\n`START_BLOCK`. We need to add them to the work queue as well to preserve\nthe original semantics.", "tree": {"sha": "19828079e1b9e1d8977aa2d79a9a45bd8ffa6c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19828079e1b9e1d8977aa2d79a9a45bd8ffa6c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2479e263ef1135dcd1318cce51ee8fafeae62ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2479e263ef1135dcd1318cce51ee8fafeae62ae", "html_url": "https://github.com/rust-lang/rust/commit/e2479e263ef1135dcd1318cce51ee8fafeae62ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2479e263ef1135dcd1318cce51ee8fafeae62ae/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e954e82d209d9cfe1291be6fc32983c9fc9fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e954e82d209d9cfe1291be6fc32983c9fc9fab", "html_url": "https://github.com/rust-lang/rust/commit/a1e954e82d209d9cfe1291be6fc32983c9fc9fab"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "8ead571d9664decb5df16745a30252b2d96ab464", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e2479e263ef1135dcd1318cce51ee8fafeae62ae/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2479e263ef1135dcd1318cce51ee8fafeae62ae/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=e2479e263ef1135dcd1318cce51ee8fafeae62ae", "patch": "@@ -75,9 +75,24 @@ pub fn liveness_of_locals<'tcx>(\n \n     let mut bits = LiveVarSet::new_empty(num_live_vars);\n \n-    // queue of things that need to be re-processed, and a set containing\n-    // the things currently in the queue\n-    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_all(body.basic_blocks().len());\n+    // The dirty queue contains the set of basic blocks whose entry sets have changed since they\n+    // were last processed. At the start of the analysis, we initialize the queue in post-order to\n+    // make it more likely that the entry set for a given basic block will have the effects of all\n+    // its successors in the CFG applied before it is processed.\n+    //\n+    // FIXME(ecstaticmorse): Reverse post-order on the reverse CFG may generate a better iteration\n+    // order when cycles are present, but the overhead of computing the reverse CFG may outweigh\n+    // any benefits. Benchmark this and find out.\n+    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks().len());\n+    for (bb, _) in traversal::postorder(body) {\n+        dirty_queue.insert(bb);\n+    }\n+\n+    // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n+    // be processed after the ones added above.\n+    for bb in body.basic_blocks().indices() {\n+        dirty_queue.insert(bb);\n+    }\n \n     let predecessors = body.predecessors();\n "}]}