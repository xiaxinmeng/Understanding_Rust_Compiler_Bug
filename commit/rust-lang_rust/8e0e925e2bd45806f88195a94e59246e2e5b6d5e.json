{"sha": "8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMGU5MjVlMmJkNDU4MDZmODgxOTVhOTRlNTkyNDZlMmU1YjZkNWU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-03T00:45:24Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-03T02:39:46Z"}, "message": "Disallow linking to items with a mismatched disambiguator", "tree": {"sha": "15103767a47f03a132243d720f0f9e1b8064c320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15103767a47f03a132243d720f0f9e1b8064c320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "html_url": "https://github.com/rust-lang/rust/commit/8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f042d749b0fc212bff6bdc44b84e134b878bff64", "url": "https://api.github.com/repos/rust-lang/rust/commits/f042d749b0fc212bff6bdc44b84e134b878bff64", "html_url": "https://github.com/rust-lang/rust/commit/f042d749b0fc212bff6bdc44b84e134b878bff64"}], "stats": {"total": 225, "additions": 223, "deletions": 2}, "files": [{"sha": "3d8daf4e9a57618a10c012afd2abb2a9bcaa5bf0", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "patch": "@@ -574,9 +574,9 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             };\n             let resolved_self;\n             let mut path_str;\n+            let mut disambiguator = None;\n             let (res, fragment) = {\n                 let mut kind = None;\n-                let mut disambiguator = None;\n                 path_str = if let Some(prefix) =\n                     [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\", \"module@\", \"mod@\"]\n                         .iter()\n@@ -595,6 +595,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     link.trim_start_matches(prefix)\n                 } else if link.ends_with(\"!()\") {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"bang\");\n                     link.trim_end_matches(\"!()\")\n                 } else if link.ends_with(\"()\") {\n                     kind = Some(ValueNS);\n@@ -610,7 +611,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     link.trim_start_matches(\"derive@\")\n                 } else if link.ends_with('!') {\n                     kind = Some(MacroNS);\n-                    disambiguator = Some(\"macro\");\n+                    disambiguator = Some(\"bang\");\n                     link.trim_end_matches('!')\n                 } else {\n                     &link[..]\n@@ -789,6 +790,46 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             } else {\n                 debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n \n+                // Disallow e.g. linking to enums with `struct@`\n+                if let Res::Def(kind, id) = res {\n+                    debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n+                    // NOTE: this relies on the fact that `''` is never parsed as a disambiguator\n+                    // NOTE: this needs to be kept in sync with the disambiguator parsing\n+                    match (kind, disambiguator.unwrap_or_default().trim_end_matches(\"@\")) {\n+                        | (DefKind::Struct, \"struct\")\n+                        | (DefKind::Enum, \"enum\")\n+                        | (DefKind::Trait, \"trait\")\n+                        | (DefKind::Union, \"union\")\n+                        | (DefKind::Mod, \"mod\" | \"module\")\n+                        | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, \"const\")\n+                        | (DefKind::Static, \"static\")\n+                        // NOTE: this allows 'method' to mean both normal functions and associated functions\n+                        // This can't cause ambiguity because both are in the same namespace.\n+                        | (DefKind::Fn | DefKind::AssocFn, \"fn\" | \"function\" | \"method\")\n+                        | (DefKind::Macro(MacroKind::Bang), \"bang\")\n+                        | (DefKind::Macro(MacroKind::Derive), \"derive\")\n+                        // These are namespaces; allow anything in the namespace to match\n+                        | (_, \"type\" | \"macro\" | \"value\")\n+                        // If no disambiguator given, allow anything\n+                        | (_, \"\")\n+                        // All of these are valid, so do nothing\n+                        => {}\n+                        (_, disambiguator) => {\n+                            // The resolved item did not match the disambiguator; give a better error than 'not found'\n+                            let msg = format!(\"unresolved link to `{}`\", path_str);\n+                            report_diagnostic(cx, &msg, &item, &dox, link_range, |diag, sp| {\n+                                let msg = format!(\"this item resolved to {} {}, which did not match the disambiguator '{}'\", kind.article(), kind.descr(id), disambiguator);\n+                                if let Some(sp) = sp {\n+                                    diag.span_note(sp, &msg);\n+                                } else {\n+                                    diag.note(&msg);\n+                                }\n+                            });\n+                            continue;\n+                        }\n+                    }\n+                }\n+\n                 // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n                 if let Some((src_id, dst_id)) = res\n                     .opt_def_id()"}, {"sha": "6ab815eab540e06097878c33b75a9c912d1524fe", "filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs?ref=8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "patch": "@@ -0,0 +1,53 @@\n+#![deny(broken_intra_doc_links)]\n+//~^ NOTE lint level is defined\n+pub enum S {}\n+\n+macro_rules! m {\n+    () => {};\n+}\n+\n+static s: usize = 0;\n+const c: usize = 0;\n+\n+trait T {}\n+\n+/// Link to [struct@S]\n+//~^ ERROR unresolved link to `S`\n+//~| NOTE did not match\n+\n+/// Link to [mod@S]\n+//~^ ERROR unresolved link to `S`\n+//~| NOTE did not match\n+\n+/// Link to [union@S]\n+//~^ ERROR unresolved link to `S`\n+//~| NOTE did not match\n+\n+/// Link to [trait@S]\n+//~^ ERROR unresolved link to `S`\n+//~| NOTE did not match\n+\n+/// Link to [struct@T]\n+//~^ ERROR unresolved link to `T`\n+//~| NOTE did not match\n+\n+/// Link to [derive@m]\n+//~^ ERROR unresolved link to `m`\n+//~| NOTE did not match\n+\n+/// Link to [const@s]\n+//~^ ERROR unresolved link to `s`\n+//~| NOTE did not match\n+\n+/// Link to [static@c]\n+//~^ ERROR unresolved link to `c`\n+//~| NOTE did not match\n+\n+/// Link to [fn@c]\n+//~^ ERROR unresolved link to `c`\n+//~| NOTE did not match\n+\n+/// Link to [c()]\n+//~^ ERROR unresolved link to `c`\n+//~| NOTE did not match\n+pub fn f() {}"}, {"sha": "21276ecb20ae9def924af526570720abdcc6928b", "filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e0e925e2bd45806f88195a94e59246e2e5b6d5e/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr?ref=8e0e925e2bd45806f88195a94e59246e2e5b6d5e", "patch": "@@ -0,0 +1,127 @@\n+error: unresolved link to `S`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:16:14\n+   |\n+LL | /// Link to [struct@S]\n+   |              ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:1:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+note: this item resolved to an enum, which did not match the disambiguator 'struct'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:16:14\n+   |\n+LL | /// Link to [struct@S]\n+   |              ^^^^^^^^\n+\n+error: unresolved link to `S`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:20:14\n+   |\n+LL | /// Link to [mod@S]\n+   |              ^^^^^\n+   |\n+note: this item resolved to an enum, which did not match the disambiguator 'mod'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:20:14\n+   |\n+LL | /// Link to [mod@S]\n+   |              ^^^^^\n+\n+error: unresolved link to `S`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:24:14\n+   |\n+LL | /// Link to [union@S]\n+   |              ^^^^^^^\n+   |\n+note: this item resolved to an enum, which did not match the disambiguator 'union'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:24:14\n+   |\n+LL | /// Link to [union@S]\n+   |              ^^^^^^^\n+\n+error: unresolved link to `S`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:28:14\n+   |\n+LL | /// Link to [trait@S]\n+   |              ^^^^^^^\n+   |\n+note: this item resolved to an enum, which did not match the disambiguator 'trait'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:28:14\n+   |\n+LL | /// Link to [trait@S]\n+   |              ^^^^^^^\n+\n+error: unresolved link to `T`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:32:14\n+   |\n+LL | /// Link to [struct@T]\n+   |              ^^^^^^^^\n+   |\n+note: this item resolved to a trait, which did not match the disambiguator 'struct'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:32:14\n+   |\n+LL | /// Link to [struct@T]\n+   |              ^^^^^^^^\n+\n+error: unresolved link to `m`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:36:14\n+   |\n+LL | /// Link to [derive@m]\n+   |              ^^^^^^^^\n+   |\n+note: this item resolved to a macro, which did not match the disambiguator 'derive'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:36:14\n+   |\n+LL | /// Link to [derive@m]\n+   |              ^^^^^^^^\n+\n+error: unresolved link to `s`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:40:14\n+   |\n+LL | /// Link to [const@s]\n+   |              ^^^^^^^\n+   |\n+note: this item resolved to a static, which did not match the disambiguator 'const'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:40:14\n+   |\n+LL | /// Link to [const@s]\n+   |              ^^^^^^^\n+\n+error: unresolved link to `c`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:44:14\n+   |\n+LL | /// Link to [static@c]\n+   |              ^^^^^^^^\n+   |\n+note: this item resolved to a constant, which did not match the disambiguator 'static'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:44:14\n+   |\n+LL | /// Link to [static@c]\n+   |              ^^^^^^^^\n+\n+error: unresolved link to `c`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:48:14\n+   |\n+LL | /// Link to [fn@c]\n+   |              ^^^^\n+   |\n+note: this item resolved to a constant, which did not match the disambiguator 'fn'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:48:14\n+   |\n+LL | /// Link to [fn@c]\n+   |              ^^^^\n+\n+error: unresolved link to `c`\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:52:14\n+   |\n+LL | /// Link to [c()]\n+   |              ^^^\n+   |\n+note: this item resolved to a constant, which did not match the disambiguator 'fn'\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:52:14\n+   |\n+LL | /// Link to [c()]\n+   |              ^^^\n+\n+error: aborting due to 10 previous errors\n+"}]}