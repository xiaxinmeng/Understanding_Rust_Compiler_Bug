{"sha": "1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMDQwYjM2Y2I1Yzc0OGIxZTVmMGVhMGE5N2Y3ZWM1YTUxZWU0OGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-31T03:50:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-04T19:41:16Z"}, "message": "rustbuild: Quickly `dist` cross-host compilers\n\nThis commit optimizes the compile time for creating tarballs of cross-host\ncompilers and as a proof of concept adds two to the standard Travis matrix. Much\nof this commit is further refactoring and refining of the `step.rs` definitions\nalong with the interpretation of `--target` and `--host` flags. This has gotten\nconfusing enough that I've also added a small test suite to\n`src/bootstrap/step.rs` to ensure what we're doing works and doesn't regress.\n\nAfter this commit when you execute:\n\n    ./x.py dist --host $MY_HOST --target $MY_HOST\n\nthe build system will compile two compilers. The first is for the build platform\nand the second is for the host platform. This second compiler is then packaged\nup and placed into `build/dist` and is ready to go. With a fully cached LLVM and\ndocker image I was able to create a cross-host compiler in around 20 minutes\nlocally.\n\nEventually we plan to add a whole litany of cross-host entries to the Travis\nmatrix, but for now we're just adding a few before we eat up all the extra\ncapacity.\n\ncc #38531", "tree": {"sha": "3dae9d8837f45ef473008579539ee135e032670c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dae9d8837f45ef473008579539ee135e032670c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "html_url": "https://github.com/rust-lang/rust/commit/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f62c2920077eb5cb81323142fc5dbe6ae8813c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f62c2920077eb5cb81323142fc5dbe6ae8813c0", "html_url": "https://github.com/rust-lang/rust/commit/8f62c2920077eb5cb81323142fc5dbe6ae8813c0"}], "stats": {"total": 520, "additions": 486, "deletions": 34}, "files": [{"sha": "15b610833b0efd53bfa46a377fc5dda6651bdde1", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -15,9 +15,10 @@ matrix:\n     # Linux builders, all docker images\n     - env: IMAGE=arm-android\n     - env: IMAGE=cross\n+    - env: IMAGE=dist-arm-unknown-linux-gnueabi\n+    - env: IMAGE=dist-x86_64-unknown-freebsd\n     - env: IMAGE=i686-gnu\n     - env: IMAGE=i686-gnu-nopt\n-    - env: IMAGE=x86_64-freebsd\n     - env: IMAGE=x86_64-gnu\n     - env: IMAGE=x86_64-gnu-full-bootstrap\n     - env: IMAGE=x86_64-gnu-aux"}, {"sha": "1eda1608c4709c4de84b57b8473ca62cbbaad820", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -6,18 +6,22 @@ version = \"0.0.0\"\n [lib]\n name = \"bootstrap\"\n path = \"lib.rs\"\n+doctest = false\n \n [[bin]]\n name = \"bootstrap\"\n path = \"bin/main.rs\"\n+test = false\n \n [[bin]]\n name = \"rustc\"\n path = \"bin/rustc.rs\"\n+test = false\n \n [[bin]]\n name = \"rustdoc\"\n path = \"bin/rustdoc.rs\"\n+test = false\n \n [dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "f2fddf6e2ef3aee31350322dc826f8ee83f4847e", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -568,3 +568,14 @@ pub fn distcheck(build: &Build) {\n                      .arg(\"check\")\n                      .current_dir(&dir));\n }\n+\n+/// Test the build system itself\n+pub fn bootstrap(build: &Build) {\n+    let mut cmd = Command::new(&build.cargo);\n+    cmd.arg(\"test\")\n+       .current_dir(build.src.join(\"src/bootstrap\"))\n+       .env(\"CARGO_TARGET_DIR\", build.out.join(\"bootstrap\"))\n+       .env(\"RUSTC\", &build.rustc);\n+    cmd.arg(\"--\").args(&build.flags.cmd.test_args());\n+    build.run(&mut cmd);\n+}"}, {"sha": "ad851e448ea7c9e3ceb68cd5be3309e5f84587b6", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -354,14 +354,9 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n }\n \n /// Creates the `rust-src` installer component and the plain source tarball\n-pub fn rust_src(build: &Build, host: &str) {\n+pub fn rust_src(build: &Build) {\n     println!(\"Dist src\");\n \n-    if host != build.config.build {\n-        println!(\"\\tskipping, not a build host\");\n-        return\n-    }\n-\n     let plain_name = format!(\"rustc-{}-src\", package_vers(build));\n     let name = format!(\"rust-src-{}\", package_vers(build));\n     let image = tmpdir(build).join(format!(\"{}-image\", name));"}, {"sha": "42eae6d24f13a0926a4055efc22a4b139f2bbd71", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -57,12 +57,12 @@ pub fn rustbook(build: &Build, target: &str, name: &str) {\n /// `STAMP` alongw ith providing the various header/footer HTML we've cutomized.\n ///\n /// In the end, this is just a glorified wrapper around rustdoc!\n-pub fn standalone(build: &Build, stage: u32, target: &str) {\n-    println!(\"Documenting stage{} standalone ({})\", stage, target);\n+pub fn standalone(build: &Build, target: &str) {\n+    println!(\"Documenting standalone ({})\", target);\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n \n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(0, &build.config.build);\n \n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");"}, {"sha": "bf815a817ed87c4f2483ef2f74fde47f30561a10", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 427, "deletions": 20, "changes": 447, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -365,6 +365,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n \n         suite(\"check-rpass-full\", \"src/test/run-pass-fulldeps\",\n               \"run-pass\", \"run-pass-fulldeps\");\n+        suite(\"check-rfail-full\", \"src/test/run-fail-fulldeps\",\n+              \"run-fail\", \"run-fail-fulldeps\");\n         suite(\"check-cfail-full\", \"src/test/compile-fail-fulldeps\",\n               \"compile-fail\", \"compile-fail-fulldeps\");\n         suite(\"check-rmake\", \"src/test/run-make\", \"run-make\", \"run-make\");\n@@ -459,6 +461,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"tool-tidy\").stage(0))\n          .default(true)\n          .host(true)\n+         .only_build(true)\n          .run(move |s| check::tidy(build, s.target));\n     rules.test(\"check-error-index\", \"src/tools/error_index_generator\")\n          .dep(|s| s.name(\"libstd\"))\n@@ -482,6 +485,12 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"libtest\"))\n          .run(move |s| check::android_copy_libs(build, &s.compiler(), s.target));\n \n+    rules.test(\"check-bootstrap\", \"src/bootstrap\")\n+         .default(true)\n+         .host(true)\n+         .only_build(true)\n+         .run(move |_| check::bootstrap(build));\n+\n     // ========================================================================\n     // Build tools\n     //\n@@ -516,9 +525,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .default(build.config.docs)\n          .run(move |s| doc::rustbook(build, s.target, \"nomicon\"));\n     rules.doc(\"doc-standalone\", \"src/doc\")\n-         .dep(move |s| s.name(\"rustc\").host(&build.config.build).target(&build.config.build))\n+         .dep(move |s| {\n+             s.name(\"rustc\")\n+              .host(&build.config.build)\n+              .target(&build.config.build)\n+              .stage(0)\n+         })\n          .default(build.config.docs)\n-         .run(move |s| doc::standalone(build, s.stage, s.target));\n+         .run(move |s| doc::standalone(build, s.target));\n     rules.doc(\"doc-error-index\", \"src/tools/error_index_generator\")\n          .dep(move |s| s.name(\"tool-error-index\").target(&build.config.build).stage(0))\n          .dep(move |s| s.name(\"librustc-link\").stage(0))\n@@ -550,6 +564,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.dist(\"dist-rustc\", \"src/librustc\")\n          .dep(move |s| s.name(\"rustc\").host(&build.config.build))\n          .host(true)\n+         .only_host_build(true)\n          .default(true)\n          .run(move |s| dist::rustc(build, s.stage, s.target));\n     rules.dist(\"dist-std\", \"src/libstd\")\n@@ -564,9 +579,11 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              }\n          })\n          .default(true)\n+         .only_host_build(true)\n          .run(move |s| dist::std(build, &s.compiler(), s.target));\n     rules.dist(\"dist-mingw\", \"path/to/nowhere\")\n          .default(true)\n+         .only_host_build(true)\n          .run(move |s| {\n              if s.target.contains(\"pc-windows-gnu\") {\n                  dist::mingw(build, s.target)\n@@ -575,14 +592,18 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.dist(\"dist-src\", \"src\")\n          .default(true)\n          .host(true)\n-         .run(move |s| dist::rust_src(build, s.target));\n+         .only_build(true)\n+         .only_host_build(true)\n+         .run(move |_| dist::rust_src(build));\n     rules.dist(\"dist-docs\", \"src/doc\")\n          .default(true)\n+         .only_host_build(true)\n          .dep(|s| s.name(\"default:doc\"))\n          .run(move |s| dist::docs(build, s.stage, s.target));\n     rules.dist(\"dist-analysis\", \"analysis\")\n          .dep(|s| s.name(\"dist-std\"))\n          .default(true)\n+         .only_host_build(true)\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n     rules.dist(\"install\", \"src\")\n          .dep(|s| s.name(\"default:dist\"))\n@@ -671,6 +692,14 @@ struct Rule<'a> {\n     /// only intended for compiler hosts and not for targets that are being\n     /// generated.\n     host: bool,\n+\n+    /// Whether this rule is only for steps where the host is the build triple,\n+    /// not anything in hosts or targets.\n+    only_host_build: bool,\n+\n+    /// Whether this rule is only for the build triple, not anything in hosts or\n+    /// targets.\n+    only_build: bool,\n }\n \n #[derive(PartialEq)]\n@@ -692,6 +721,8 @@ impl<'a> Rule<'a> {\n             kind: kind,\n             default: false,\n             host: false,\n+            only_host_build: false,\n+            only_build: false,\n         }\n     }\n }\n@@ -727,6 +758,16 @@ impl<'a, 'b> RuleBuilder<'a, 'b> {\n         self.rule.host = host;\n         self\n     }\n+\n+    fn only_build(&mut self, only_build: bool) -> &mut Self {\n+        self.rule.only_build = only_build;\n+        self\n+    }\n+\n+    fn only_host_build(&mut self, only_host_build: bool) -> &mut Self {\n+        self.rule.only_host_build = only_host_build;\n+        self\n+    }\n }\n \n impl<'a, 'b> Drop for RuleBuilder<'a, 'b> {\n@@ -896,19 +937,12 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n                 path.ends_with(rule.path)\n             })\n         }).flat_map(|rule| {\n-            let hosts = if self.build.flags.host.len() > 0 {\n+            let hosts = if rule.only_host_build || rule.only_build {\n+                &self.build.config.host[..1]\n+            } else if self.build.flags.host.len() > 0 {\n                 &self.build.flags.host\n             } else {\n-                if kind == Kind::Dist {\n-                    // For 'dist' steps we only distribute artifacts built from\n-                    // the build platform, so only consider that in the hosts\n-                    // array.\n-                    // NOTE: This relies on the fact that the build triple is\n-                    // always placed first, as done in `config.rs`.\n-                    &self.build.config.host[..1]\n-                } else {\n-                    &self.build.config.host\n-                }\n+                &self.build.config.host\n             };\n             let targets = if self.build.flags.target.len() > 0 {\n                 &self.build.flags.target\n@@ -928,6 +962,8 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n                     &self.build.flags.host[..]\n                 } else if self.build.flags.target.len() > 0 {\n                     &[]\n+                } else if rule.only_build {\n+                    &self.build.config.host[..1]\n                 } else {\n                     &self.build.config.host[..]\n                 }\n@@ -955,12 +991,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n \n         // Using `steps` as the top-level targets, make a topological ordering\n         // of what we need to do.\n-        let mut order = Vec::new();\n-        let mut added = HashSet::new();\n-        added.insert(Step::noop());\n-        for step in steps.iter().cloned() {\n-            self.fill(step, &mut order, &mut added);\n-        }\n+        let order = self.expand(steps);\n \n         // Print out what we're doing for debugging\n         self.build.verbose(\"bootstrap build plan:\");\n@@ -979,6 +1010,18 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         }\n     }\n \n+    /// From the top level targets `steps` generate a topological ordering of\n+    /// all steps needed to run those steps.\n+    fn expand(&self, steps: &[Step<'a>]) -> Vec<Step<'a>> {\n+        let mut order = Vec::new();\n+        let mut added = HashSet::new();\n+        added.insert(Step::noop());\n+        for step in steps.iter().cloned() {\n+            self.fill(step, &mut order, &mut added);\n+        }\n+        return order\n+    }\n+\n     /// Performs topological sort of dependencies rooted at the `step`\n     /// specified, pushing all results onto the `order` vector provided.\n     ///\n@@ -1015,3 +1058,367 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         order.push(step);\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use std::env;\n+\n+    use Build;\n+    use config::Config;\n+    use flags::Flags;\n+\n+    macro_rules! a {\n+        ($($a:expr),*) => (vec![$($a.to_string()),*])\n+    }\n+\n+    fn build(args: &[&str],\n+             extra_host: &[&str],\n+             extra_target: &[&str]) -> Build {\n+        let mut args = args.iter().map(|s| s.to_string()).collect::<Vec<_>>();\n+        args.push(\"--build\".to_string());\n+        args.push(\"A\".to_string());\n+        let flags = Flags::parse(&args);\n+\n+        let mut config = Config::default();\n+        config.docs = true;\n+        config.build = \"A\".to_string();\n+        config.host = vec![config.build.clone()];\n+        config.host.extend(extra_host.iter().map(|s| s.to_string()));\n+        config.target = config.host.clone();\n+        config.target.extend(extra_target.iter().map(|s| s.to_string()));\n+\n+        let mut build = Build::new(flags, config);\n+        let cwd = env::current_dir().unwrap();\n+        build.crates.insert(\"std_shim\".to_string(), ::Crate {\n+            name: \"std_shim\".to_string(),\n+            deps: Vec::new(),\n+            path: cwd.join(\"src/std_shim\"),\n+            doc_step: \"doc-std_shim\".to_string(),\n+            build_step: \"build-crate-std_shim\".to_string(),\n+            test_step: \"test-std_shim\".to_string(),\n+            bench_step: \"bench-std_shim\".to_string(),\n+        });\n+        build.crates.insert(\"test_shim\".to_string(), ::Crate {\n+            name: \"test_shim\".to_string(),\n+            deps: Vec::new(),\n+            path: cwd.join(\"src/test_shim\"),\n+            doc_step: \"doc-test_shim\".to_string(),\n+            build_step: \"build-crate-test_shim\".to_string(),\n+            test_step: \"test-test_shim\".to_string(),\n+            bench_step: \"bench-test_shim\".to_string(),\n+        });\n+        build.crates.insert(\"rustc-main\".to_string(), ::Crate {\n+            name: \"rustc-main\".to_string(),\n+            deps: Vec::new(),\n+            path: cwd.join(\"src/rustc-main\"),\n+            doc_step: \"doc-rustc-main\".to_string(),\n+            build_step: \"build-crate-rustc-main\".to_string(),\n+            test_step: \"test-rustc-main\".to_string(),\n+            bench_step: \"bench-rustc-main\".to_string(),\n+        });\n+        return build\n+    }\n+\n+    #[test]\n+    fn dist_baseline() {\n+        let build = build(&[\"dist\"], &[], &[]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+        assert!(plan.iter().all(|s| s.host == \"A\" ));\n+        assert!(plan.iter().all(|s| s.target == \"A\" ));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        assert!(plan.contains(&step.name(\"dist-docs\")));\n+        assert!(plan.contains(&step.name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.name(\"dist-std\")));\n+        assert!(plan.contains(&step.name(\"dist-src\")));\n+    }\n+\n+    #[test]\n+    fn dist_with_targets() {\n+        let build = build(&[\"dist\"], &[], &[\"B\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+        assert!(plan.iter().all(|s| s.host == \"A\" ));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        assert!(plan.contains(&step.name(\"dist-docs\")));\n+        assert!(plan.contains(&step.name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.name(\"dist-std\")));\n+        assert!(plan.contains(&step.name(\"dist-src\")));\n+\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-docs\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-mingw\")));\n+        assert!(!plan.contains(&step.target(\"B\").name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-std\")));\n+        assert!(!plan.contains(&step.target(\"B\").name(\"dist-src\")));\n+    }\n+\n+    #[test]\n+    fn dist_with_hosts() {\n+        let build = build(&[\"dist\"], &[\"B\"], &[]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        assert!(!plan.iter().any(|s| s.host == \"B\"));\n+\n+        assert!(plan.contains(&step.name(\"dist-docs\")));\n+        assert!(plan.contains(&step.name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.name(\"dist-std\")));\n+        assert!(plan.contains(&step.name(\"dist-src\")));\n+\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-docs\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-std\")));\n+        assert!(!plan.contains(&step.target(\"B\").name(\"dist-src\")));\n+    }\n+\n+    #[test]\n+    fn dist_with_targets_and_hosts() {\n+        let build = build(&[\"dist\"], &[\"B\"], &[\"C\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        assert!(!plan.iter().any(|s| s.host == \"B\"));\n+        assert!(!plan.iter().any(|s| s.host == \"C\"));\n+\n+        assert!(plan.contains(&step.name(\"dist-docs\")));\n+        assert!(plan.contains(&step.name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.name(\"dist-std\")));\n+        assert!(plan.contains(&step.name(\"dist-src\")));\n+\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-docs\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-std\")));\n+        assert!(!plan.contains(&step.target(\"B\").name(\"dist-src\")));\n+\n+        assert!(plan.contains(&step.target(\"C\").name(\"dist-docs\")));\n+        assert!(plan.contains(&step.target(\"C\").name(\"dist-mingw\")));\n+        assert!(!plan.contains(&step.target(\"C\").name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.target(\"C\").name(\"dist-std\")));\n+        assert!(!plan.contains(&step.target(\"C\").name(\"dist-src\")));\n+    }\n+\n+    #[test]\n+    fn dist_target_with_target_flag() {\n+        let build = build(&[\"dist\", \"--target=C\"], &[\"B\"], &[\"C\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        assert!(!plan.iter().any(|s| s.target == \"A\"));\n+        assert!(!plan.iter().any(|s| s.target == \"B\"));\n+        assert!(!plan.iter().any(|s| s.host == \"B\"));\n+        assert!(!plan.iter().any(|s| s.host == \"C\"));\n+\n+        assert!(plan.contains(&step.target(\"C\").name(\"dist-docs\")));\n+        assert!(plan.contains(&step.target(\"C\").name(\"dist-mingw\")));\n+        assert!(!plan.contains(&step.target(\"C\").name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.target(\"C\").name(\"dist-std\")));\n+        assert!(!plan.contains(&step.target(\"C\").name(\"dist-src\")));\n+    }\n+\n+    #[test]\n+    fn dist_host_with_target_flag() {\n+        let build = build(&[\"dist\", \"--host=B\", \"--target=B\"], &[\"B\"], &[\"C\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        assert!(!plan.iter().any(|s| s.target == \"A\"));\n+        assert!(!plan.iter().any(|s| s.target == \"C\"));\n+        assert!(!plan.iter().any(|s| s.host == \"B\"));\n+        assert!(!plan.iter().any(|s| s.host == \"C\"));\n+\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-docs\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-mingw\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-rustc\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-std\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"dist-src\")));\n+\n+        let all = rules.expand(&plan);\n+        println!(\"all rules: {:#?}\", all);\n+        assert!(!all.contains(&step.name(\"rustc\")));\n+        assert!(!all.contains(&step.name(\"build-crate-std_shim\").stage(1)));\n+    }\n+\n+    #[test]\n+    fn build_default() {\n+        let build = build(&[\"build\"], &[\"B\"], &[\"C\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+\n+        let step = super::Step {\n+            name: \"\",\n+            stage: 2,\n+            host: &build.config.build,\n+            target: &build.config.build,\n+        };\n+\n+        // rustc built for all for of (A, B) x (A, B)\n+        assert!(plan.contains(&step.name(\"librustc\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"librustc\")));\n+        assert!(plan.contains(&step.host(\"B\").target(\"A\").name(\"librustc\")));\n+        assert!(plan.contains(&step.host(\"B\").target(\"B\").name(\"librustc\")));\n+\n+        // rustc never built for C\n+        assert!(!plan.iter().any(|s| {\n+            s.name.contains(\"rustc\") && (s.host == \"C\" || s.target == \"C\")\n+        }));\n+\n+        // test built for everything\n+        assert!(plan.contains(&step.name(\"libtest\")));\n+        assert!(plan.contains(&step.target(\"B\").name(\"libtest\")));\n+        assert!(plan.contains(&step.host(\"B\").target(\"A\").name(\"libtest\")));\n+        assert!(plan.contains(&step.host(\"B\").target(\"B\").name(\"libtest\")));\n+        assert!(plan.contains(&step.host(\"A\").target(\"C\").name(\"libtest\")));\n+        assert!(plan.contains(&step.host(\"B\").target(\"C\").name(\"libtest\")));\n+\n+        let all = rules.expand(&plan);\n+        println!(\"all rules: {:#?}\", all);\n+        assert!(all.contains(&step.name(\"rustc\")));\n+        assert!(all.contains(&step.name(\"libstd\")));\n+    }\n+\n+    #[test]\n+    fn build_filtered() {\n+        let build = build(&[\"build\", \"--target=C\"], &[\"B\"], &[\"C\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+\n+        assert!(!plan.iter().any(|s| s.name.contains(\"rustc\")));\n+        assert!(plan.iter().all(|s| {\n+            !s.name.contains(\"test_shim\") || s.target == \"C\"\n+        }));\n+    }\n+\n+    #[test]\n+    fn test_default() {\n+        let build = build(&[\"test\"], &[], &[]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+        assert!(plan.iter().all(|s| s.host == \"A\"));\n+        assert!(plan.iter().all(|s| s.target == \"A\"));\n+\n+        assert!(plan.iter().any(|s| s.name.contains(\"-ui\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"cfail-full\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"codegen-units\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"debuginfo\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"docs\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"error-index\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"incremental\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"linkchecker\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"mir-opt\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"pfail\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rfail\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rfail-full\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rmake\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rpass\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rpass-full\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rustc-all\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rustdoc\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"std-all\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"test-all\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"tidy\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"valgrind\")));\n+    }\n+\n+    #[test]\n+    fn test_with_a_target() {\n+        let build = build(&[\"test\", \"--target=C\"], &[], &[\"C\"]);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(plan.iter().all(|s| s.stage == 2));\n+        assert!(plan.iter().all(|s| s.host == \"A\"));\n+        assert!(plan.iter().all(|s| s.target == \"C\"));\n+\n+        assert!(plan.iter().any(|s| s.name.contains(\"-ui\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"cfail-full\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"codegen-units\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"debuginfo\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"docs\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"error-index\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"incremental\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"linkchecker\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"mir-opt\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"pfail\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rfail\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"rfail-full\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"rmake\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"rpass\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"rpass-full\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"rustc-all\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"rustdoc\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"std-all\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"test-all\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"tidy\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"valgrind\")));\n+    }\n+}"}, {"sha": "9b0f1b7a0a763f172e854c546931b7bc36ba8959", "filename": "src/ci/docker/dist-arm-unknown-linux-gnueabi/Dockerfile", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fci%2Fdocker%2Fdist-arm-unknown-linux-gnueabi%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fci%2Fdocker%2Fdist-arm-unknown-linux-gnueabi%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-unknown-linux-gnueabi%2FDockerfile?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -0,0 +1,30 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-arm-linux-gnueabi\n+\n+ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n+RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n+      tar xJf - -C /usr/local/bin --strip-components=1\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV RUST_CONFIGURE_ARGS --host=arm-unknown-linux-gnueabi\n+ENV XPY_RUN \\\n+      dist \\\n+      --host arm-unknown-linux-gnueabi \\\n+      --target arm-unknown-linux-gnueabi"}, {"sha": "f1a6ccf9ebcf4ad4902fcfafa7864969f8b733ed", "filename": "src/ci/docker/dist-x86_64-unknown-freebsd/Dockerfile", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2FDockerfile?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -28,7 +28,11 @@ RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST |\n \n ENV \\\n     AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-ar \\\n-    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc\n+    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc \\\n+    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++\n \n-ENV RUST_CONFIGURE_ARGS --target=x86_64-unknown-freebsd\n-ENV RUST_CHECK_TARGET \"\"\n+ENV RUST_CONFIGURE_ARGS --host=x86_64-unknown-freebsd\n+ENV XPY_RUN \\\n+      dist \\\n+      --host x86_64-unknown-freebsd \\\n+      --target x86_64-unknown-freebsd", "previous_filename": "src/ci/docker/x86_64-freebsd/Dockerfile"}, {"sha": "0fd6beaf4c1c0c2291235b305442b536deabe660", "filename": "src/ci/docker/dist-x86_64-unknown-freebsd/build-toolchain.sh", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2Fbuild-toolchain.sh?ref=1a040b36cb5c748b1e5f0ea0a97f7ec5a51ee48d", "patch": "@@ -77,7 +77,7 @@ cd gcc-$GCC\n mkdir ../gcc-build\n cd ../gcc-build\n ../gcc-$GCC/configure                            \\\n-  --enable-languages=c                           \\\n+  --enable-languages=c,c++                       \\\n   --target=$ARCH-unknown-freebsd10               \\\n   --disable-multilib                             \\\n   --disable-nls                                  \\", "previous_filename": "src/ci/docker/x86_64-freebsd/build-toolchain.sh"}]}