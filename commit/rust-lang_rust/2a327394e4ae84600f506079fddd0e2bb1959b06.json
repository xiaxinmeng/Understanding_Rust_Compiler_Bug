{"sha": "2a327394e4ae84600f506079fddd0e2bb1959b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzI3Mzk0ZTRhZTg0NjAwZjUwNjA3OWZkZGQwZTJiYjE5NTliMDY=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-15T00:18:30Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:05Z"}, "message": "mark SourceIter as unsafe, document invariants", "tree": {"sha": "92821544e340bfb7ca2bef9b3873c73cb3665df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92821544e340bfb7ca2bef9b3873c73cb3665df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a327394e4ae84600f506079fddd0e2bb1959b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a327394e4ae84600f506079fddd0e2bb1959b06", "html_url": "https://github.com/rust-lang/rust/commit/2a327394e4ae84600f506079fddd0e2bb1959b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a327394e4ae84600f506079fddd0e2bb1959b06/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2d533bb9b5c247f48f7932f7e533475b59e402", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2d533bb9b5c247f48f7932f7e533475b59e402", "html_url": "https://github.com/rust-lang/rust/commit/bb2d533bb9b5c247f48f7932f7e533475b59e402"}], "stats": {"total": 70, "additions": 52, "deletions": 18}, "files": [{"sha": "6154d03226fd9eb5fc298ff091868c1a39da0db4", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a327394e4ae84600f506079fddd0e2bb1959b06/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a327394e4ae84600f506079fddd0e2bb1959b06/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=2a327394e4ae84600f506079fddd0e2bb1959b06", "patch": "@@ -1174,7 +1174,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-impl<T> SourceIter for IntoIter<T> {\n+unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = crate::vec::IntoIter<T>;\n \n     #[inline]"}, {"sha": "e7d61dcde45a2379757546b32f9d64059c8ff080", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a327394e4ae84600f506079fddd0e2bb1959b06/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a327394e4ae84600f506079fddd0e2bb1959b06/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=2a327394e4ae84600f506079fddd0e2bb1959b06", "patch": "@@ -2826,7 +2826,7 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n unsafe impl<T> InPlaceIterable for IntoIter<T> {}\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-impl<T> SourceIter for IntoIter<T> {\n+unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = IntoIter<T>;\n \n     #[inline]"}, {"sha": "7a48026a847fe6d459dae2fa598c4700977f9596", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2a327394e4ae84600f506079fddd0e2bb1959b06/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a327394e4ae84600f506079fddd0e2bb1959b06/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=2a327394e4ae84600f506079fddd0e2bb1959b06", "patch": "@@ -21,37 +21,71 @@ use self::zip::try_get_unchecked;\n pub(crate) use self::zip::TrustedRandomAccess;\n pub use self::zip::Zip;\n \n-/// This trait provides access to to the backing source of an interator-adapter pipeline\n+/// This trait provides transitive access to source-stages in an interator-adapter pipeline\n /// under the conditions that\n /// * the iterator source `S` itself implements `SourceIter<Source = S>`\n-/// * there is a delegating implementation of this trait for each adapter in the pipeline\n+/// * there is a delegating implementation of this trait for each adapter in the pipeline between\n+///   the source and the pipeline consumer.\n ///\n-/// This is useful for specializing [`FromIterator`] implementations or to retrieve\n-/// the remaining values from a source of a partially consumed iterator.\n+/// When the source is an owning iterator struct (commonly called `IntoIter`) then\n+/// this can be useful for specializing [`FromIterator`] implementations or recovering the\n+/// remaining elements after an iterator has been partially exhausted.\n+///\n+/// Note that implementations do not necessarily have to provide access to the inner-most\n+/// source of a pipeline. A stateful intermediate adapter might eagerly evaluate a part\n+/// of the pipeline and expose its internal storage as source.\n+///\n+/// The trait is unsafe because implementers must uphold additional safety properties.\n+/// See [`as_inner`] for details.\n ///\n /// # Examples\n ///\n-/// Retrieving a partially consumed source and wrapping it into a different pipeline:\n+/// Retrieving a partially consumed source:\n ///\n /// ```\n /// # #![feature(inplace_iteration)]\n /// # use std::iter::SourceIter;\n ///\n /// let mut iter = vec![9, 9, 9].into_iter().map(|i| i * i);\n-/// let first = iter.next().unwrap();\n+/// let _ = iter.next();\n /// let mut remainder = std::mem::replace(iter.as_inner(), Vec::new().into_iter());\n-/// let second = remainder.map(|i| i + 1).next().unwrap();\n-/// assert_eq!(first, 81);\n-/// assert_eq!(second, 10);\n+/// println!(\"n = {} elements remaining\", remainder.len());\n /// ```\n ///\n /// [`FromIterator`]: trait.FromIterator.html\n+/// [`as_inner`]: #method.as_inner\n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-pub trait SourceIter {\n-    /// The source iterator of the adapter.\n+pub unsafe trait SourceIter {\n+    /// A source stage in an iterator pipeline.\n     type Source: Iterator;\n \n-    /// Recursively extract the source of an iterator pipeline.\n+    /// Extract the source of an iterator pipeline.\n+    ///\n+    /// Callers may assume that calls to [`next()`] or any method taking `&self`\n+    /// does no replace the referenced value.\n+    /// But callers may replace the referenced values as long they in turn do not\n+    /// expose it through a delegating implementation of this trait.\n+    /// Which means that while adapters may not modify the reference they cannot\n+    /// rely on it not being modified.\n+    ///\n+    /// Adapters must not rely on exclusive ownership or immutability of the source.\n+    /// For example a peeking adapter could either exploit [`TrustedRandomAccess`] to look ahead\n+    /// or implement this trait, but it cannot do both because a caller could call `next()` or any\n+    /// other mutating method on the source between iteration steps and thus invalidate the peeked\n+    /// values.\n+    /// The lack of exclusive ownership also requires that adapters must uphold the source's\n+    /// public API even when they have crate- or module-internal access.\n+    ///\n+    /// Callers in turn must expect the source to be in any state that is consistent with\n+    /// its public API since adapters sitting between it and the source have the same\n+    /// access. In particular an adapter may have consumed more elements than strictly necessary.\n+    ///\n+    /// The overall goal of these requirements is to grant the consumer of a pipeline\n+    /// access to the underlying storage of an iterator while restricting any statefulness\n+    /// and side-effects of the pipeline stages from affecting or relying on that storage.\n+    ///\n+    /// [`TrustedRandomAccess`]: trait.TrustedRandomAccess.html\n+    /// [`next`]: trait.Iterator.html#method.next\n     fn as_inner(&mut self) -> &mut Self::Source;\n }\n \n@@ -976,7 +1010,7 @@ where\n }\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n+unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n where\n     F: FnMut(I::Item) -> B,\n     I: SourceIter<Source = S>,\n@@ -1468,7 +1502,7 @@ impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n unsafe impl<I> TrustedLen for Enumerate<I> where I: TrustedLen {}\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n+unsafe impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n where\n     I: SourceIter<Source = S>,\n {\n@@ -1765,7 +1799,7 @@ impl<I: Iterator> Peekable<I> {\n unsafe impl<I> TrustedLen for Peekable<I> where I: TrustedLen {}\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n+unsafe impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n where\n     I: SourceIter<Source = S>,\n {\n@@ -2256,7 +2290,7 @@ where\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n #[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n+unsafe impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n where\n     I: SourceIter<Source = S>,\n {"}]}