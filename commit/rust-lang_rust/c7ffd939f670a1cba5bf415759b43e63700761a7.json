{"sha": "c7ffd939f670a1cba5bf415759b43e63700761a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZmZkOTM5ZjY3MGExY2JhNWJmNDE1NzU5YjQzZTYzNzAwNzYxYTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-24T07:21:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-25T07:52:50Z"}, "message": "more enterprisey diagnostics setup", "tree": {"sha": "01407564dcac6ad08bd84ab350272aca5acb7355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01407564dcac6ad08bd84ab350272aca5acb7355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ffd939f670a1cba5bf415759b43e63700761a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ffd939f670a1cba5bf415759b43e63700761a7", "html_url": "https://github.com/rust-lang/rust/commit/c7ffd939f670a1cba5bf415759b43e63700761a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ffd939f670a1cba5bf415759b43e63700761a7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee2887d1ec129afed80845c2361ce35f1a0c013", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee2887d1ec129afed80845c2361ce35f1a0c013", "html_url": "https://github.com/rust-lang/rust/commit/7ee2887d1ec129afed80845c2361ce35f1a0c013"}], "stats": {"total": 134, "additions": 75, "deletions": 59}, "files": [{"sha": "5437133b87eb25d6889de60609e777a8381cbfa9", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7ffd939f670a1cba5bf415759b43e63700761a7/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ffd939f670a1cba5bf415759b43e63700761a7/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=c7ffd939f670a1cba5bf415759b43e63700761a7", "patch": "@@ -168,6 +168,22 @@ impl Module {\n \n     pub fn diagnostics(&self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n         db.crate_def_map(self.krate).add_diagnostics(db, self.module_id, sink);\n+        for decl in self.declarations(db) {\n+            match decl {\n+                crate::ModuleDef::Function(f) => f.diagnostics(db, sink),\n+                crate::ModuleDef::Module(f) => f.diagnostics(db, sink),\n+                _ => (),\n+            }\n+        }\n+\n+        for impl_block in self.impl_blocks(db) {\n+            for item in impl_block.items(db) {\n+                match item {\n+                    crate::ImplItem::Method(f) => f.diagnostics(db, sink),\n+                    _ => (),\n+                }\n+            }\n+        }\n     }\n \n     pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {"}, {"sha": "a6ca68d863f9d19a4af5093682f44293799ccd25", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c7ffd939f670a1cba5bf415759b43e63700761a7/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ffd939f670a1cba5bf415759b43e63700761a7/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=c7ffd939f670a1cba5bf415759b43e63700761a7", "patch": "@@ -1,9 +1,9 @@\n use std::{fmt, any::Any};\n \n use ra_syntax::{SyntaxNodePtr, AstPtr, ast};\n+use relative_path::RelativePathBuf;\n \n use crate::HirFileId;\n-use relative_path::RelativePathBuf;\n \n /// Diagnostic defines hir API for errors and warnings.\n ///\n@@ -21,7 +21,7 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n     fn file(&self) -> HirFileId;\n     fn syntax_node(&self) -> SyntaxNodePtr;\n-    fn as_any(&self) -> &(Any + Send + 'static);\n+    fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n \n impl dyn Diagnostic {\n@@ -30,18 +30,37 @@ impl dyn Diagnostic {\n     }\n }\n \n-#[derive(Debug, Default)]\n-pub struct DiagnosticSink {\n-    data: Vec<Box<dyn Diagnostic>>,\n+pub struct DiagnosticSink<'a> {\n+    callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n+    default_callback: Box<dyn FnMut(&dyn Diagnostic) + 'a>,\n }\n \n-impl DiagnosticSink {\n-    pub fn push(&mut self, d: impl Diagnostic) {\n-        self.data.push(Box::new(d))\n+impl<'a> DiagnosticSink<'a> {\n+    pub fn new(cb: impl FnMut(&dyn Diagnostic) + 'a) -> DiagnosticSink<'a> {\n+        DiagnosticSink { callbacks: Vec::new(), default_callback: Box::new(cb) }\n+    }\n+\n+    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> DiagnosticSink<'a> {\n+        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n+            Some(d) => {\n+                cb(d);\n+                Ok(())\n+            }\n+            None => Err(()),\n+        };\n+        self.callbacks.push(Box::new(cb));\n+        self\n     }\n \n-    pub fn into_diagnostics(self) -> Vec<Box<dyn Diagnostic>> {\n-        self.data\n+    pub(crate) fn push(&mut self, d: impl Diagnostic) {\n+        let d: &dyn Diagnostic = &d;\n+        for cb in self.callbacks.iter_mut() {\n+            match cb(d) {\n+                Ok(()) => return,\n+                Err(()) => (),\n+            }\n+        }\n+        (self.default_callback)(d)\n     }\n }\n "}, {"sha": "bf77c9ab1235e83521fa5dd17fc6128b99a6791a", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 49, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c7ffd939f670a1cba5bf415759b43e63700761a7/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ffd939f670a1cba5bf415759b43e63700761a7/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=c7ffd939f670a1cba5bf415759b43e63700761a7", "patch": "@@ -1,3 +1,5 @@\n+use std::cell::RefCell;\n+\n use itertools::Itertools;\n use hir::{source_binder, diagnostics::{Diagnostic as _, DiagnosticSink}};\n use ra_db::SourceDatabase;\n@@ -25,11 +27,36 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, node);\n         check_struct_shorthand_initialization(&mut res, file_id, node);\n     }\n-\n+    let res = RefCell::new(res);\n+    let mut sink = DiagnosticSink::new(|d| {\n+        res.borrow_mut().push(Diagnostic {\n+            message: d.message(),\n+            range: d.syntax_node().range(),\n+            severity: Severity::Error,\n+            fix: None,\n+        })\n+    })\n+    .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n+        let source_root = db.file_source_root(d.file().original_file(db));\n+        let create_file = FileSystemEdit::CreateFile { source_root, path: d.candidate.clone() };\n+        let fix = SourceChange {\n+            label: \"create module\".to_string(),\n+            source_file_edits: Vec::new(),\n+            file_system_edits: vec![create_file],\n+            cursor_position: None,\n+        };\n+        res.borrow_mut().push(Diagnostic {\n+            range: d.syntax_node().range(),\n+            message: d.message(),\n+            severity: Severity::Error,\n+            fix: Some(fix),\n+        })\n+    });\n     if let Some(m) = source_binder::module_from_file_id(db, file_id) {\n-        check_module(&mut res, db, m);\n+        m.diagnostics(db, &mut sink);\n     };\n-    res\n+    drop(sink);\n+    res.into_inner()\n }\n \n fn syntax_errors(acc: &mut Vec<Diagnostic>, source_file: &SourceFile) {\n@@ -127,52 +154,6 @@ fn check_struct_shorthand_initialization(\n     Some(())\n }\n \n-fn check_module(acc: &mut Vec<Diagnostic>, db: &RootDatabase, module: hir::Module) {\n-    let mut diagnostics = DiagnosticSink::default();\n-    module.diagnostics(db, &mut diagnostics);\n-    for decl in module.declarations(db) {\n-        match decl {\n-            hir::ModuleDef::Function(f) => f.diagnostics(db, &mut diagnostics),\n-            _ => (),\n-        }\n-    }\n-\n-    for impl_block in module.impl_blocks(db) {\n-        for item in impl_block.items(db) {\n-            match item {\n-                hir::ImplItem::Method(f) => f.diagnostics(db, &mut diagnostics),\n-                _ => (),\n-            }\n-        }\n-    }\n-\n-    for d in diagnostics.into_diagnostics().iter() {\n-        if let Some(d) = d.downcast_ref::<hir::diagnostics::UnresolvedModule>() {\n-            let source_root = db.file_source_root(d.file().original_file(db));\n-            let create_file = FileSystemEdit::CreateFile { source_root, path: d.candidate.clone() };\n-            let fix = SourceChange {\n-                label: \"create module\".to_string(),\n-                source_file_edits: Vec::new(),\n-                file_system_edits: vec![create_file],\n-                cursor_position: None,\n-            };\n-            acc.push(Diagnostic {\n-                range: d.syntax_node().range(),\n-                message: d.message(),\n-                severity: Severity::Error,\n-                fix: Some(fix),\n-            })\n-        } else {\n-            acc.push(Diagnostic {\n-                message: d.message(),\n-                range: d.syntax_node().range(),\n-                severity: Severity::Error,\n-                fix: None,\n-            })\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use test_utils::assert_eq_text;"}]}