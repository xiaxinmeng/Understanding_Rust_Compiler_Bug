{"sha": "f71de45b230954c25f2337272852be1146d26136", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MWRlNDViMjMwOTU0YzI1ZjIzMzcyNzI4NTJiZTExNDZkMjYxMzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-15T14:49:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-21T09:40:59Z"}, "message": "use subtyping when we create a closure instead of for upvar types\n\nWe used to make the upvar types in the closure `==` but that was\nstronger than we needed. Subtyping suffices, since we are copying the\nupvar value into the closure field. This in turn allows us to infer\nsmaller lifetimes in captured values in some cases (like the example\nhere), avoiding errors.", "tree": {"sha": "08496dc03f97244429d695a74197dbe5084cefa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08496dc03f97244429d695a74197dbe5084cefa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71de45b230954c25f2337272852be1146d26136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71de45b230954c25f2337272852be1146d26136", "html_url": "https://github.com/rust-lang/rust/commit/f71de45b230954c25f2337272852be1146d26136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71de45b230954c25f2337272852be1146d26136/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3c90cf8af1a2c0e9e6167daed956905b5951a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3c90cf8af1a2c0e9e6167daed956905b5951a2", "html_url": "https://github.com/rust-lang/rust/commit/fc3c90cf8af1a2c0e9e6167daed956905b5951a2"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "4fc3344dab2a919dd796d84de0e27e70fe9cdf8c", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f71de45b230954c25f2337272852be1146d26136/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71de45b230954c25f2337272852be1146d26136/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=f71de45b230954c25f2337272852be1146d26136", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             .upvar_tys(closure_def_id, self.tcx)\n             .zip(final_upvar_tys)\n         {\n-            self.demand_eqtype(span, final_upvar_ty, upvar_ty);\n+            self.demand_suptype(span, upvar_ty, final_upvar_ty);\n         }\n \n         // If we are also inferred the closure kind here,"}, {"sha": "dd78baf9275098266074f7a73cae1043dfa1ad87", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f71de45b230954c25f2337272852be1146d26136/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f71de45b230954c25f2337272852be1146d26136/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=f71de45b230954c25f2337272852be1146d26136", "patch": "@@ -1,15 +1,15 @@\n-error[E0277]: the trait bound `No: Foo` is not satisfied in `[generator@$DIR/auto-trait-regions.rs:35:15: 39:6 x:&&'static OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`\n+error[E0277]: the trait bound `No: Foo` is not satisfied in `[generator@$DIR/auto-trait-regions.rs:35:15: 39:6 x:&&OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`\n   --> $DIR/auto-trait-regions.rs:40:5\n    |\n LL |     assert_foo(gen); //~ ERROR the trait bound `No: Foo` is not satisfied\n-   |     ^^^^^^^^^^ within `[generator@$DIR/auto-trait-regions.rs:35:15: 39:6 x:&&'static OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`, the trait `Foo` is not implemented for `No`\n+   |     ^^^^^^^^^^ within `[generator@$DIR/auto-trait-regions.rs:35:15: 39:6 x:&&OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`, the trait `Foo` is not implemented for `No`\n    |\n    = help: the following implementations were found:\n              <No as Foo>\n    = note: required because it appears within the type `OnlyFooIfStaticRef`\n    = note: required because it appears within the type `&OnlyFooIfStaticRef`\n    = note: required because it appears within the type `for<'r> {&'r OnlyFooIfStaticRef, ()}`\n-   = note: required because it appears within the type `[generator@$DIR/auto-trait-regions.rs:35:15: 39:6 x:&&'static OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`\n+   = note: required because it appears within the type `[generator@$DIR/auto-trait-regions.rs:35:15: 39:6 x:&&OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`\n note: required by `assert_foo`\n   --> $DIR/auto-trait-regions.rs:30:1\n    |"}, {"sha": "f554efe903613390f9103d57d114435a80fe2301", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant-closure.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f71de45b230954c25f2337272852be1146d26136/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71de45b230954c25f2337272852be1146d26136/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs?ref=f71de45b230954c25f2337272852be1146d26136", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In contrast to `region-escape-via-bound-invariant`, in this case we\n+// *can* return a value of type `&'x u32`, even though `'x` does not\n+// appear in the bounds. This is because `&` is contravariant, and so\n+// we are *actually* returning a `&'y u32`.\n+//\n+// See https://github.com/rust-lang/rust/issues/46541 for more details.\n+\n+// run-pass\n+\n+#![allow(dead_code)]\n+#![feature(conservative_impl_trait)]\n+#![feature(in_band_lifetimes)]\n+#![feature(nll)]\n+\n+fn foo(x: &'x u32) -> impl Fn() -> &'y u32\n+where 'x: 'y\n+{\n+    move || x\n+}\n+\n+fn main() { }"}]}