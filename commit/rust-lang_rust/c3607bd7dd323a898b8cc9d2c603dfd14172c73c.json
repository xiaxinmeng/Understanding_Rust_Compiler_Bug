{"sha": "c3607bd7dd323a898b8cc9d2c603dfd14172c73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjA3YmQ3ZGQzMjNhODk4YjhjYzlkMmM2MDNkZmQxNDE3MmM3M2M=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-02T21:35:02Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-16T21:17:51Z"}, "message": "Use helper function for searching `allow_internal_unstable`", "tree": {"sha": "07b660546c6b3fefef992396e75ec7dcc4122bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b660546c6b3fefef992396e75ec7dcc4122bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3607bd7dd323a898b8cc9d2c603dfd14172c73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3607bd7dd323a898b8cc9d2c603dfd14172c73c", "html_url": "https://github.com/rust-lang/rust/commit/c3607bd7dd323a898b8cc9d2c603dfd14172c73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3607bd7dd323a898b8cc9d2c603dfd14172c73c/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d", "html_url": "https://github.com/rust-lang/rust/commit/ed6c7efd87f17a7d9282f4bc7341cb5cbda8db4d"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "c1b4cb5f1a8d54f7ab4ec4be441e3c5c8414a577", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3607bd7dd323a898b8cc9d2c603dfd14172c73c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3607bd7dd323a898b8cc9d2c603dfd14172c73c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=c3607bd7dd323a898b8cc9d2c603dfd14172c73c", "patch": "@@ -4,10 +4,12 @@\n //! has interior mutability or needs to be dropped, as well as the visitor that emits errors when\n //! it finds operations that are invalid in a certain context.\n \n+use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_span::Symbol;\n \n pub use self::qualifs::Qualif;\n \n@@ -55,3 +57,9 @@ impl ConstCx<'mir, 'tcx> {\n pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     Some(def_id) == tcx.lang_items().panic_fn() || Some(def_id) == tcx.lang_items().begin_panic_fn()\n }\n+\n+pub fn allow_internal_unstable(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+    let attrs = tcx.get_attrs(def_id);\n+    attr::allow_internal_unstable(&tcx.sess, attrs)\n+        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+}"}, {"sha": "f15a7f7c2c889c545b2808fe9e1793953377e32e", "filename": "compiler/rustc_mir/src/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3607bd7dd323a898b8cc9d2c603dfd14172c73c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3607bd7dd323a898b8cc9d2c603dfd14172c73c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fqualify_min_const_fn.rs?ref=c3607bd7dd323a898b8cc9d2c603dfd14172c73c", "patch": "@@ -1,4 +1,3 @@\n-use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::*;\n@@ -344,8 +343,7 @@ fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bo\n \n     // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n     // opt-in via `allow_internal_unstable`.\n-    attr::allow_internal_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n-        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+    super::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n }\n \n /// Returns `true` if the given library feature gate is allowed within the function with the given `DefId`.\n@@ -364,8 +362,7 @@ pub fn lib_feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbo\n \n     // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n     // opt-in via `allow_internal_unstable`.\n-    attr::allow_internal_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n-        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+    super::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n }\n \n fn check_terminator("}]}