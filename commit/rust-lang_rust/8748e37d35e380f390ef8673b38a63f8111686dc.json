{"sha": "8748e37d35e380f390ef8673b38a63f8111686dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDhlMzdkMzVlMzgwZjM5MGVmODY3M2IzOGE2M2Y4MTExNjg2ZGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-07T10:18:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-05T08:49:07Z"}, "message": "Remove LibSource\n\nThe information is stored in used_crate_source too anyway", "tree": {"sha": "60a06871a7c60205aca5c326eff8049f4cf959c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a06871a7c60205aca5c326eff8049f4cf959c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8748e37d35e380f390ef8673b38a63f8111686dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8748e37d35e380f390ef8673b38a63f8111686dc", "html_url": "https://github.com/rust-lang/rust/commit/8748e37d35e380f390ef8673b38a63f8111686dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8748e37d35e380f390ef8673b38a63f8111686dc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09d9b608d647fdc19a933c661f943a010c8d84a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d9b608d647fdc19a933c661f943a010c8d84a5", "html_url": "https://github.com/rust-lang/rust/commit/09d9b608d647fdc19a933c661f943a010c8d84a5"}], "stats": {"total": 140, "additions": 59, "deletions": 81}, "files": [{"sha": "3f96e741d350f5d412023e55c0c8f95beb67b7e7", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -185,7 +185,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)\n         .unwrap()\n         .1;\n-    for &(cnum, _) in &crate_info.used_crates_dynamic {\n+    for &cnum in &crate_info.used_crates {\n         let src = &crate_info.used_crate_source[&cnum];\n         match data[cnum.as_usize() - 1] {\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}"}, {"sha": "3c448b685c14bacff4f6a5b704d97da4d51568a9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::Handler;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::{DllImport, LibSource};\n+use rustc_middle::middle::cstore::DllImport;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n@@ -238,7 +238,7 @@ pub fn each_linked_rlib(\n     info: &CrateInfo,\n     f: &mut dyn FnMut(CrateNum, &Path),\n ) -> Result<(), String> {\n-    let crates = info.used_crates_static.iter();\n+    let crates = info.used_crates.iter();\n     let mut fmts = None;\n     for (ty, list) in info.dependency_formats.iter() {\n         match ty {\n@@ -256,22 +256,22 @@ pub fn each_linked_rlib(\n         Some(f) => f,\n         None => return Err(\"could not find formats for rlibs\".to_string()),\n     };\n-    for &(cnum, ref path) in crates {\n+    for &cnum in crates {\n         match fmts.get(cnum.as_usize() - 1) {\n             Some(&Linkage::NotLinked | &Linkage::IncludedFromDylib) => continue,\n             Some(_) => {}\n             None => return Err(\"could not find formats for rlibs\".to_string()),\n         }\n         let name = &info.crate_name[&cnum];\n-        let path = match *path {\n-            LibSource::Some(ref p) => p,\n-            LibSource::MetadataOnly => {\n-                return Err(format!(\n-                    \"could not find rlib for: `{}`, found rmeta (metadata) file\",\n-                    name\n-                ));\n-            }\n-            LibSource::None => return Err(format!(\"could not find rlib for: `{}`\", name)),\n+        let path = if let Some((path, _)) = &info.used_crate_source[&cnum].rlib {\n+            path\n+        } else if info.used_crate_source[&cnum].rmeta.is_some() {\n+            return Err(format!(\n+                \"could not find rlib for: `{}`, found rmeta (metadata) file\",\n+                name\n+            ));\n+        } else {\n+            return Err(format!(\"could not find rlib for: `{}`\", name));\n         };\n         f(cnum, &path);\n     }\n@@ -1759,8 +1759,19 @@ fn add_rpath_args(\n     // where extern libraries might live, based on the\n     // add_lib_search_paths\n     if sess.opts.cg.rpath {\n+        let libs = codegen_results\n+            .crate_info\n+            .used_crates\n+            .iter()\n+            .filter_map(|cnum| {\n+                codegen_results.crate_info.used_crate_source[cnum]\n+                    .dylib\n+                    .as_ref()\n+                    .map(|(path, _)| &**path)\n+            })\n+            .collect::<Vec<_>>();\n         let mut rpath_config = RPathConfig {\n-            used_crates: &codegen_results.crate_info.used_crates_dynamic,\n+            libs: &*libs,\n             out_filename: out_filename.to_path_buf(),\n             has_rpath: sess.target.has_rpath,\n             is_like_osx: sess.target.is_like_osx,\n@@ -2121,7 +2132,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n \n     // Invoke get_used_crates to ensure that we get a topological sorting of\n     // crates.\n-    let deps = &codegen_results.crate_info.used_crates_dynamic;\n+    let deps = &codegen_results.crate_info.used_crates;\n \n     // There's a few internal crates in the standard library (aka libcore and\n     // libstd) which actually have a circular dependence upon one another. This\n@@ -2149,7 +2160,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     let mut required = FxHashSet::default();\n \n     let info = &codegen_results.crate_info;\n-    for &(cnum, _) in deps.iter().rev() {\n+    for &cnum in deps.iter().rev() {\n         if let Some(missing) = info.missing_lang_items.get(&cnum) {\n             let missing_crates = missing.iter().map(|i| info.lang_item_to_crate.get(i).copied());\n             required.extend(missing_crates);\n@@ -2176,7 +2187,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n \n     let mut compiler_builtins = None;\n \n-    for &(cnum, _) in deps.iter() {\n+    for &cnum in deps.iter() {\n         if group_start == Some(cnum) {\n             cmd.group_start();\n         }\n@@ -2388,9 +2399,9 @@ fn add_upstream_native_libraries(\n         .find(|(ty, _)| *ty == crate_type)\n         .expect(\"failed to find crate type in dependency format list\");\n \n-    let crates = &codegen_results.crate_info.used_crates_static;\n+    let crates = &codegen_results.crate_info.used_crates;\n     let mut last = (NativeLibKind::Unspecified, None);\n-    for &(cnum, _) in crates {\n+    for &cnum in crates {\n         for lib in codegen_results.crate_info.native_libraries[&cnum].iter() {\n             let name = match lib.name {\n                 Some(l) => l,"}, {"sha": "61c3ef62fb1930c977f78753b2f974f225570bdb", "filename": "compiler/rustc_codegen_ssa/src/back/rpath.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -4,11 +4,8 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::LibSource;\n-\n pub struct RPathConfig<'a> {\n-    pub used_crates: &'a [(CrateNum, LibSource)],\n+    pub libs: &'a [&'a Path],\n     pub out_filename: PathBuf,\n     pub is_like_osx: bool,\n     pub has_rpath: bool,\n@@ -23,9 +20,7 @@ pub fn get_rpath_flags(config: &mut RPathConfig<'_>) -> Vec<String> {\n \n     debug!(\"preparing the RPATH!\");\n \n-    let libs = config.used_crates;\n-    let libs = libs.iter().filter_map(|&(_, ref l)| l.option()).collect::<Vec<_>>();\n-    let rpaths = get_rpaths(config, &libs);\n+    let rpaths = get_rpaths(config);\n     let mut flags = rpaths_to_flags(&rpaths);\n \n     // Use DT_RUNPATH instead of DT_RPATH if available\n@@ -52,17 +47,17 @@ fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> {\n     ret\n }\n \n-fn get_rpaths(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {\n+fn get_rpaths(config: &mut RPathConfig<'_>) -> Vec<String> {\n     debug!(\"output: {:?}\", config.out_filename.display());\n     debug!(\"libs:\");\n-    for libpath in libs {\n+    for libpath in config.libs {\n         debug!(\"    {:?}\", libpath.display());\n     }\n \n     // Use relative paths to the libraries. Binaries can be moved\n     // as long as they maintain the relative relationship to the\n     // crates they depend on.\n-    let rpaths = get_rpaths_relative_to_output(config, libs);\n+    let rpaths = get_rpaths_relative_to_output(config);\n \n     debug!(\"rpaths:\");\n     for rpath in &rpaths {\n@@ -73,8 +68,8 @@ fn get_rpaths(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {\n     minimize_rpaths(&rpaths)\n }\n \n-fn get_rpaths_relative_to_output(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {\n-    libs.iter().map(|a| get_rpath_relative_to_output(config, a)).collect()\n+fn get_rpaths_relative_to_output(config: &mut RPathConfig<'_>) -> Vec<String> {\n+    config.libs.iter().map(|a| get_rpath_relative_to_output(config, a)).collect()\n }\n \n fn get_rpath_relative_to_output(config: &mut RPathConfig<'_>, lib: &Path) -> String {"}, {"sha": "604f19144a6a446a0310655e94384158e88acbda", "filename": "compiler/rustc_codegen_ssa/src/back/rpath/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Frpath%2Ftests.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -35,7 +35,7 @@ fn test_minimize2() {\n fn test_rpath_relative() {\n     if cfg!(target_os = \"macos\") {\n         let config = &mut RPathConfig {\n-            used_crates: &[],\n+            libs: &[],\n             has_rpath: true,\n             is_like_osx: true,\n             linker_is_gnu: false,\n@@ -45,7 +45,7 @@ fn test_rpath_relative() {\n         assert_eq!(res, \"@loader_path/../lib\");\n     } else {\n         let config = &mut RPathConfig {\n-            used_crates: &[],\n+            libs: &[],\n             out_filename: PathBuf::from(\"bin/rustc\"),\n             has_rpath: true,\n             is_like_osx: false,"}, {"sha": "0036935be67e4caea86650c7876dce8614f3857b", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -19,8 +19,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use rustc_middle::middle::cstore::EncodedMetadata;\n-use rustc_middle::middle::cstore::{self, LinkagePreference};\n+use rustc_middle::middle::cstore::{self, EncodedMetadata};\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n@@ -779,8 +778,7 @@ impl CrateInfo {\n             native_libraries: Default::default(),\n             used_libraries: tcx.native_libraries(LOCAL_CRATE).iter().map(Into::into).collect(),\n             crate_name: Default::default(),\n-            used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n-            used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),\n+            used_crates: cstore::used_crates(tcx),\n             used_crate_source: Default::default(),\n             lang_item_to_crate: Default::default(),\n             missing_lang_items: Default::default(),"}, {"sha": "6413e03bea469375c48c6a8422d9869cfcf61ad9", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n-use rustc_middle::middle::cstore::{self, CrateSource, LibSource};\n+use rustc_middle::middle::cstore::{self, CrateSource};\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::Providers;\n use rustc_session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n@@ -144,8 +144,7 @@ pub struct CrateInfo {\n     pub crate_name: FxHashMap<CrateNum, String>,\n     pub used_libraries: Vec<NativeLib>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n-    pub used_crates_static: Vec<(CrateNum, LibSource)>,\n-    pub used_crates_dynamic: Vec<(CrateNum, LibSource)>,\n+    pub used_crates: Vec<CrateNum>,\n     pub lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n     pub missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n     pub dependency_formats: Lrc<Dependencies>,"}, {"sha": "2d4deb1d8d5da43d9a2e19bdf5d8b32aad0c2383", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -55,8 +55,8 @@ use crate::creader::CStore;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::CrateNum;\n+use rustc_middle::middle::cstore::CrateDepKind;\n use rustc_middle::middle::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n-use rustc_middle::middle::cstore::{self, CrateDepKind};\n use rustc_middle::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n@@ -274,8 +274,18 @@ fn add_library(\n }\n \n fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n-    let crates = cstore::used_crates(tcx, RequireStatic);\n-    if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n+    let all_crates_available_as_rlib = tcx\n+        .crates(())\n+        .iter()\n+        .cloned()\n+        .filter_map(|cnum| {\n+            if tcx.dep_kind(cnum).macros_only() {\n+                return None;\n+            }\n+            Some(tcx.used_crate_source(cnum).rlib.is_some())\n+        })\n+        .all(|is_rlib| is_rlib);\n+    if !all_crates_available_as_rlib {\n         return None;\n     }\n "}, {"sha": "d9d475899d66325bc12803453db25d0bec0fc643", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748e37d35e380f390ef8673b38a63f8111686dc/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=8748e37d35e380f390ef8673b38a63f8111686dc", "patch": "@@ -60,26 +60,6 @@ impl CrateDepKind {\n     }\n }\n \n-#[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n-pub enum LibSource {\n-    Some(PathBuf),\n-    MetadataOnly,\n-    None,\n-}\n-\n-impl LibSource {\n-    pub fn is_some(&self) -> bool {\n-        matches!(self, LibSource::Some(_))\n-    }\n-\n-    pub fn option(&self) -> Option<PathBuf> {\n-        match *self {\n-            LibSource::Some(ref p) => Some(p.clone()),\n-            LibSource::MetadataOnly | LibSource::None => None,\n-        }\n-    }\n-}\n-\n #[derive(Copy, Debug, PartialEq, Clone, Encodable, Decodable, HashStable)]\n pub enum LinkagePreference {\n     RequireDynamic,\n@@ -227,7 +207,7 @@ pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n // In order to get this left-to-right dependency ordering, we perform a\n // topological sort of all crates putting the leaves at the right-most\n // positions.\n-pub fn used_crates(tcx: TyCtxt<'_>, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)> {\n+pub fn used_crates(tcx: TyCtxt<'_>) -> Vec<CrateNum> {\n     let mut libs = tcx\n         .crates(())\n         .iter()\n@@ -236,26 +216,11 @@ pub fn used_crates(tcx: TyCtxt<'_>, prefer: LinkagePreference) -> Vec<(CrateNum,\n             if tcx.dep_kind(cnum).macros_only() {\n                 return None;\n             }\n-            let source = tcx.used_crate_source(cnum);\n-            let path = match prefer {\n-                LinkagePreference::RequireDynamic => source.dylib.clone().map(|p| p.0),\n-                LinkagePreference::RequireStatic => source.rlib.clone().map(|p| p.0),\n-            };\n-            let path = match path {\n-                Some(p) => LibSource::Some(p),\n-                None => {\n-                    if source.rmeta.is_some() {\n-                        LibSource::MetadataOnly\n-                    } else {\n-                        LibSource::None\n-                    }\n-                }\n-            };\n-            Some((cnum, path))\n+            Some(cnum)\n         })\n         .collect::<Vec<_>>();\n     let mut ordering = tcx.postorder_cnums(()).to_owned();\n     ordering.reverse();\n-    libs.sort_by_cached_key(|&(a, _)| ordering.iter().position(|x| *x == a));\n+    libs.sort_by_cached_key(|&a| ordering.iter().position(|x| *x == a));\n     libs\n }"}]}