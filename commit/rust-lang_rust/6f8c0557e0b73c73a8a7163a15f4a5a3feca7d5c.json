{"sha": "6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "node_id": "C_kwDOAAsO6NoAKDZmOGMwNTU3ZTBiNzNjNzNhOGE3MTYzYTE1ZjRhNWEzZmVjYTdkNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T05:54:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T05:54:09Z"}, "message": "Auto merge of #110806 - WaffleLapkin:unmkI, r=lcnr\n\nReplace `tcx.mk_trait_ref` with `TraitRef::new`\n\nFirst step in implementing https://github.com/rust-lang/compiler-team/issues/616\nr? `@lcnr`", "tree": {"sha": "fbb65379db25781d8f39e9086d8b03c37a06b504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb65379db25781d8f39e9086d8b03c37a06b504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "html_url": "https://github.com/rust-lang/rust/commit/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "url": "https://api.github.com/repos/rust-lang/rust/commits/129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "html_url": "https://github.com/rust-lang/rust/commit/129195f57c02c8a8e4cfc4b766d4ff7a3a837882"}, {"sha": "689721d3c57253c2e438727350caeaebf46d2336", "url": "https://api.github.com/repos/rust-lang/rust/commits/689721d3c57253c2e438727350caeaebf46d2336", "html_url": "https://github.com/rust-lang/rust/commit/689721d3c57253c2e438727350caeaebf46d2336"}], "stats": {"total": 425, "additions": 245, "deletions": 180}, "files": [{"sha": "7fc8eb161d28b7c1368ee5b4e9682545e747cff6", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1120,7 +1120,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 });\n                         }\n                         if let Some(clone_trait) = tcx.lang_items().clone_trait()\n-                            && let trait_ref = tcx.mk_trait_ref(clone_trait, [ty])\n+                            && let trait_ref = ty::TraitRef::new(tcx, clone_trait, [ty])\n                             && let o = Obligation::new(\n                                 tcx,\n                                 ObligationCause::dummy(),"}, {"sha": "601589480d1d59ef3fe114541d62783d9945ef46", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -538,7 +538,8 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, [place_ty.ty]);\n+            let trait_ref =\n+                ty::TraitRef::from_lang_item(tcx, LangItem::Copy, self.last_span, [place_ty.ty]);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1237,8 +1238,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n-                    let trait_ref =\n-                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, [place_ty]);\n+                    let trait_ref = ty::TraitRef::from_lang_item(\n+                        tcx,\n+                        LangItem::Sized,\n+                        self.last_span,\n+                        [place_ty],\n+                    );\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1810,7 +1815,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, [ty]);\n+                            let trait_ref =\n+                                ty::TraitRef::from_lang_item(tcx, LangItem::Copy, span, [ty]);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1823,7 +1829,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, span, [ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1835,7 +1841,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [*ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, span, [*ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1932,9 +1938,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = tcx\n-                            .at(span)\n-                            .mk_trait_ref(LangItem::CoerceUnsized, [op.ty(body, tcx), ty]);\n+                        let trait_ref = ty::TraitRef::from_lang_item(\n+                            tcx,\n+                            LangItem::CoerceUnsized,\n+                            span,\n+                            [op.ty(body, tcx), ty],\n+                        );\n \n                         self.prove_trait_ref(\n                             trait_ref,"}, {"sha": "1da20579021a1d44db1be444b592eff19c9be801", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -157,7 +157,7 @@ impl Qualif for NeedsNonConstDrop {\n             cx.tcx,\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n-            ty::Binder::dummy(cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]))\n+            ty::TraitRef::from_lang_item(cx.tcx, LangItem::Destruct, cx.body.span, [ty])\n                 .with_constness(ty::BoundConstness::ConstIfConst),\n         );\n "}, {"sha": "c199b9da6feea99baf2f7072dbb9fa27c2677199", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -694,7 +694,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let assoc_bindings = self.create_assoc_bindings_for_generic_args(args);\n \n         let poly_trait_ref =\n-            ty::Binder::bind_with_vars(tcx.mk_trait_ref(trait_def_id, substs), bound_vars);\n+            ty::Binder::bind_with_vars(ty::TraitRef::new(tcx, trait_def_id, substs), bound_vars);\n \n         debug!(?poly_trait_ref, ?assoc_bindings);\n         bounds.push_trait_bound(tcx, poly_trait_ref, span, constness, polarity);\n@@ -846,7 +846,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(b) = trait_segment.args().bindings.first() {\n             prohibit_assoc_ty_binding(self.tcx(), b.span, Some((trait_segment, span)));\n         }\n-        self.tcx().mk_trait_ref(trait_def_id, substs)\n+        ty::TraitRef::new(self.tcx(), trait_def_id, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, span))]"}, {"sha": "1cf93c86f4f8ab47ea79361cedf6f47b65e69d6f", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "686066abbf0793b1ce11dfd288624d4174d58656", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> Bounds<'tcx> {\n \n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n-        let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [ty]));\n+        let trait_ref = ty::TraitRef::new(tcx, sized_def_id, [ty]);\n         // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n         self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n     }"}, {"sha": "c4d4e0d6d78bcb2063969ae41fa85bfce2e6c953", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -536,7 +536,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                             tcx,\n                             assoc_item,\n                             assoc_item,\n-                            tcx.mk_trait_ref(id.owner_id.to_def_id(), trait_substs),\n+                            ty::TraitRef::new(tcx, id.owner_id.to_def_id(), trait_substs),\n                         );\n                     }\n                     _ => {}"}, {"sha": "862f0a9b0e2c62f5e26e4aff34e2676896215fb1", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1779,7 +1779,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, [receiver_ty]));\n+    let trait_ref = ty::TraitRef::new(tcx, receiver_trait_def_id, [receiver_ty]);\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref);\n "}, {"sha": "d05d8508408f116d936f9ebbf68379b83875da63", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -265,10 +265,11 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                         tcx,\n                         cause.clone(),\n                         param_env,\n-                        ty::Binder::dummy(tcx.mk_trait_ref(\n+                        ty::TraitRef::new(\n+                            tcx,\n                             dispatch_from_dyn_trait,\n                             [field.ty(tcx, substs_a), field.ty(tcx, substs_b)],\n-                        )),\n+                        ),\n                     ));\n                 }\n                 let errors = ocx.select_all_or_error();\n@@ -504,8 +505,12 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n     // Register an obligation for `A: Trait<B>`.\n     let ocx = ObligationCtxt::new(&infcx);\n     let cause = traits::ObligationCause::misc(span, impl_did);\n-    let obligation =\n-        Obligation::new(tcx, cause, param_env, tcx.mk_trait_ref(trait_def_id, [source, target]));\n+    let obligation = Obligation::new(\n+        tcx,\n+        cause,\n+        param_env,\n+        ty::TraitRef::new(tcx, trait_def_id, [source, target]),\n+    );\n     ocx.register_obligation(obligation);\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {"}, {"sha": "cfe8d59f737bd18cceb790374d0233684924ff5e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -601,7 +601,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             cause,\n             self.fcx.param_env,\n-            self.tcx.mk_trait_ref(coerce_unsized_did, [coerce_source, coerce_target])\n+            ty::TraitRef::new(self.tcx, coerce_unsized_did, [coerce_source, coerce_target])\n         )];\n \n         let mut has_unsized_tuple_coercion = false;\n@@ -764,8 +764,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             self.cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(\n-                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerLike, [a]),\n+            ty::TraitRef::from_lang_item(\n+                self.tcx,\n+                hir::LangItem::PointerLike,\n+                self.cause.span,\n+                [a],\n             ),\n         ));\n "}, {"sha": "70ce45e21ea55598334ca6cf61038104b334b53f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -481,7 +481,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n         let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_or_alias_def_id) {\n-            self.tcx.mk_trait_ref(\n+            ty::TraitRef::new(\n+                self.tcx,\n                 obligation.impl_or_alias_def_id,\n                 ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_or_alias_def_id),\n             )"}, {"sha": "78bd489a44b6ee88c44cbe28a893ed1e4b230989", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1895,7 +1895,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => {\n                     // Look for a user-provided impl of a `Fn` trait, and point to it.\n                     let new_def_id = self.probe(|_| {\n-                        let trait_ref = self.tcx.mk_trait_ref(\n+                        let trait_ref = ty::TraitRef::new(self.tcx,\n                             call_kind.to_def_id(self.tcx),\n                             [\n                                 callee_ty,"}, {"sha": "8978139119c4ab1d03c69ec886dc5ff02514dc57", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1096,10 +1096,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n-                ty::Binder::dummy(self.tcx.mk_trait_ref(\n+                ty::TraitRef::new(self.tcx,\n                     into_def_id,\n                     [expr_ty, expected_ty]\n-                )),\n+                ),\n             ))\n         {\n             let sugg = if expr.precedence().order() >= PREC_POSTFIX {\n@@ -1438,7 +1438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n-            && let trait_ref = ty::Binder::dummy(self.tcx.mk_trait_ref(clone_trait_did, [expected_ty]))\n+            && let trait_ref = ty::TraitRef::new(self.tcx, clone_trait_did, [expected_ty])\n             // And the expected type doesn't implement `Clone`\n             && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n                 self.tcx,"}, {"sha": "5963a1632c5bed673d6d69fdde49447e1e9909a0", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.var_for_def(cause.span, param)\n         });\n \n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, substs);\n \n         // Construct an obligation\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);"}, {"sha": "483e17460b31d605583291738f00e749d921d5da", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -954,7 +954,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n         let trait_substs = self.fresh_item_substs(trait_def_id);\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, trait_substs);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, recursively assume all explicitly named traits are relevant"}, {"sha": "30f0978d190c6bf826b75a117a29e340fe6918e4", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -72,7 +72,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n-                        let trait_ref = tcx.mk_trait_ref(\n+                        let trait_ref = ty::TraitRef::new(\n+                            tcx,\n                             fn_once,\n                             [\n                                 ty,"}, {"sha": "c9c1f0aeaac83b652f576bd409b402c89f3be8bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -261,11 +261,16 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 (false, None, None, Some(span), String::new())\n             };\n \n-        let expected_trait_ref = self\n-            .cx\n-            .resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, expected_substs));\n-        let actual_trait_ref =\n-            self.cx.resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, actual_substs));\n+        let expected_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef::new(\n+            self.cx.tcx,\n+            trait_def_id,\n+            expected_substs,\n+        ));\n+        let actual_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef::new(\n+            self.cx.tcx,\n+            trait_def_id,\n+            actual_substs,\n+        ));\n \n         // Search the expected and actual trait references to see (a)\n         // whether the sub/sup placeholders appear in them (sometimes"}, {"sha": "11f43469400ba685b95955c6f901baa98b401f86", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -18,7 +18,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = infcx.tcx.mk_trait_ref(def_id, [ty]);\n+        let trait_ref = ty::TraitRef::new(infcx.tcx, def_id, [ty]);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "c62254cd79cb19df8d6282378d24b6b7b548c511", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1838,7 +1838,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn check_and_mk_substs(\n+    pub(crate) fn check_and_mk_substs(\n         self,\n         _def_id: DefId,\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n@@ -2238,15 +2238,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_substs_from_iter(iter::once(self_ty.into()).chain(rest))\n     }\n \n-    pub fn mk_trait_ref(\n-        self,\n-        trait_def_id: DefId,\n-        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let substs = self.check_and_mk_substs(trait_def_id, substs);\n-        ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n-    }\n-\n     pub fn mk_alias_ty(\n         self,\n         def_id: DefId,\n@@ -2441,15 +2432,6 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {\n         self.tcx.ty_error_with_message(self.span, msg)\n     }\n-\n-    pub fn mk_trait_ref(\n-        self,\n-        trait_lang_item: LangItem,\n-        substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n-        self.tcx.mk_trait_ref(trait_def_id, substs)\n-    }\n }\n \n /// Parameter attributes that can only be determined by examining the body of a function instead"}, {"sha": "23d6242899f2ee8132f92cee1b2c6be2b5ac356f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1210,6 +1210,18 @@ impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for Binder<'tcx, TraitRef\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for TraitRef<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        ty::Binder::dummy(self).to_predicate(tcx)\n+    }\n+}\n+\n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for TraitPredicate<'tcx> {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        ty::Binder::dummy(self)\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::Trait(p))).to_predicate(tcx)\n@@ -1234,6 +1246,12 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx> for TraitPredicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::Clause(Clause::Trait(self)).to_predicate(tcx)\n+    }\n+}\n+\n impl<'tcx> Predicate<'tcx> {\n     pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {\n         let predicate = self.kind();"}, {"sha": "64e7480e626d7cf7bca1a1986935349f4507d31e", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -169,8 +169,11 @@ pub trait Printer<'tcx>: Sized {\n                 self.path_append(\n                     |cx: Self| {\n                         if trait_qualify_parent {\n-                            let trait_ref =\n-                                cx.tcx().mk_trait_ref(parent_def_id, parent_substs.iter().copied());\n+                            let trait_ref = ty::TraitRef::new(\n+                                cx.tcx(),\n+                                parent_def_id,\n+                                parent_substs.iter().copied(),\n+                            );\n                             cx.path_qualified(trait_ref.self_ty(), Some(trait_ref))\n                         } else {\n                             cx.print_def_path(parent_def_id, parent_substs)"}, {"sha": "7f28ed6c2633767707b046114fbd15b4ea8eb84e", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -315,7 +315,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relate_substs(relation, a.substs, b.substs)?;\n-            Ok(relation.tcx().mk_trait_ref(a.def_id, substs))\n+            Ok(ty::TraitRef::new(relation.tcx(), a.def_id, substs))\n         }\n     }\n }"}, {"sha": "646384eebc888b5e6c1ed0d20fd35721904a5995", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -727,13 +727,13 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n             ExistentialPredicate::AutoTrait(did) => {\n                 let generics = tcx.generics_of(did);\n                 let trait_ref = if generics.params.len() == 1 {\n-                    tcx.mk_trait_ref(did, [self_ty])\n+                    ty::TraitRef::new(tcx, did, [self_ty])\n                 } else {\n                     // If this is an ill-formed auto trait, then synthesize\n                     // new error substs for the missing generics.\n                     let err_substs =\n                         ty::InternalSubsts::extend_with_error(tcx, did, &[self_ty.into()]);\n-                    tcx.mk_trait_ref(did, err_substs)\n+                    ty::TraitRef::new(tcx, did, err_substs)\n                 };\n                 self.rebind(trait_ref).without_const().to_predicate(tcx)\n             }\n@@ -820,36 +820,68 @@ pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     /// This field exists to prevent the creation of `TraitRef` without\n-    /// calling [TyCtxt::mk_trait_ref].\n-    pub(super) _use_mk_trait_ref_instead: (),\n+    /// calling [`TraitRef::new`].\n+    pub(super) _use_trait_ref_new_instead: (),\n }\n \n impl<'tcx> TraitRef<'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        trait_def_id: DefId,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n+    ) -> Self {\n+        let substs = tcx.check_and_mk_substs(trait_def_id, substs);\n+        Self { def_id: trait_def_id, substs, _use_trait_ref_new_instead: () }\n+    }\n+\n+    pub fn from_lang_item(\n+        tcx: TyCtxt<'tcx>,\n+        trait_lang_item: LangItem,\n+        span: Span,\n+        substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n+    ) -> Self {\n+        let trait_def_id = tcx.require_lang_item(trait_lang_item, Some(span));\n+        Self::new(tcx, trait_def_id, substs)\n+    }\n+\n+    pub fn from_method(\n+        tcx: TyCtxt<'tcx>,\n+        trait_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> ty::TraitRef<'tcx> {\n+        let defs = tcx.generics_of(trait_id);\n+        ty::TraitRef::new(tcx, trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n+    }\n+\n+    /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n+    /// are the parameters defined on trait.\n+    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n+        ty::TraitRef::new(tcx, def_id, InternalSubsts::identity_for_item(tcx, def_id))\n+    }\n+\n     pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n-        tcx.mk_trait_ref(\n+        ty::TraitRef::new(\n+            tcx,\n             self.def_id,\n             [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n         )\n     }\n \n-    /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n-    /// are the parameters defined on trait.\n-    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n-        ty::Binder::dummy(tcx.mk_trait_ref(def_id, InternalSubsts::identity_for_item(tcx, def_id)))\n+    /// Converts this trait ref to a trait predicate with a given `constness` and a positive polarity.\n+    #[inline]\n+    pub fn with_constness(self, constness: ty::BoundConstness) -> ty::TraitPredicate<'tcx> {\n+        ty::TraitPredicate { trait_ref: self, constness, polarity: ty::ImplPolarity::Positive }\n     }\n \n+    /// Converts this trait ref to a trait predicate without `const` and a positive polarity.\n     #[inline]\n-    pub fn self_ty(&self) -> Ty<'tcx> {\n-        self.substs.type_at(0)\n+    pub fn without_const(self) -> ty::TraitPredicate<'tcx> {\n+        self.with_constness(ty::BoundConstness::NotConst)\n     }\n \n-    pub fn from_method(\n-        tcx: TyCtxt<'tcx>,\n-        trait_id: DefId,\n-        substs: SubstsRef<'tcx>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let defs = tcx.generics_of(trait_id);\n-        tcx.mk_trait_ref(trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n+    #[inline]\n+    pub fn self_ty(&self) -> Ty<'tcx> {\n+        self.substs.type_at(0)\n     }\n }\n \n@@ -907,7 +939,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        tcx.mk_trait_ref(self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n+        ty::TraitRef::new(tcx, self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n     }\n }\n \n@@ -1226,7 +1258,7 @@ impl<'tcx> AliasTy<'tcx> {\n         let trait_def_id = self.trait_def_id(tcx);\n         let trait_generics = tcx.generics_of(trait_def_id);\n         (\n-            tcx.mk_trait_ref(trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n+            ty::TraitRef::new(tcx, trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n             &self.substs[trait_generics.count()..],\n         )\n     }\n@@ -1240,7 +1272,7 @@ impl<'tcx> AliasTy<'tcx> {\n     /// as well.\n     pub fn trait_ref(self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n         let def_id = self.trait_def_id(tcx);\n-        tcx.mk_trait_ref(def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n+        ty::TraitRef::new(tcx, def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n     }\n \n     pub fn self_ty(self) -> Ty<'tcx> {"}, {"sha": "c73f8284ca551e6118292dd3318bc5abce535a3d", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> ConstToPat<'tcx> {\n             self.tcx(),\n             ObligationCause::dummy(),\n             self.param_env,\n-            self.tcx().mk_trait_ref(partial_eq_trait_id, [ty, ty]),\n+            ty::TraitRef::new(self.tcx(), partial_eq_trait_id, [ty, ty]),\n         );\n \n         // FIXME: should this call a `predicate_must_hold` variant instead?"}, {"sha": "7253acf61e64dc9fd4ba68599d8079d146bbcbe1", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -30,8 +30,12 @@ fn custom_coerce_unsize_info<'tcx>(\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let trait_ref =\n-        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, [source_ty, target_ty]));\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+        tcx.tcx,\n+        LangItem::CoerceUnsized,\n+        tcx.span,\n+        [source_ty, target_ty],\n+    ));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "04ac585076f9c12c9134c287fb94152bca567383", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -127,18 +127,19 @@ where\n \n     fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n-        let (trait_ref, assoc_substs) =\n-            if tcx.def_kind(projection.def_id) != DefKind::ImplTraitPlaceholder {\n-                projection.trait_ref_and_own_substs(tcx)\n-            } else {\n-                // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n-                let trait_generics = tcx.generics_of(def_id);\n-                (\n-                    tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),\n-                    &projection.substs[trait_generics.count()..],\n-                )\n-            };\n+        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.def_id)\n+            != DefKind::ImplTraitPlaceholder\n+        {\n+            projection.trait_ref_and_own_substs(tcx)\n+        } else {\n+            // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n+            let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n+            let trait_generics = tcx.generics_of(def_id);\n+            (\n+                ty::TraitRef::new(tcx, def_id, projection.substs.truncate_to(tcx, trait_generics)),\n+                &projection.substs[trait_generics.count()..],\n+            )\n+        };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n             ControlFlow::Continue(())"}, {"sha": "142c20014a015d0794f79094750d9c331fd9ab99", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, params);\n \n         let obligation = traits::Obligation {\n             cause: traits::ObligationCause::dummy(),"}, {"sha": "e5d51064c8d8f1256bab275bbb28f6e4542d40f6", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -274,8 +274,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         .evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n                 }\n             };\n-        let output_is_sized_pred = tupled_inputs_and_output\n-            .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+        let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n+            ty::TraitRef::from_lang_item(tcx, LangItem::Sized, DUMMY_SP, [output])\n+        });\n \n         let pred = tupled_inputs_and_output\n             .map_bound(|(inputs, output)| ty::ProjectionPredicate {\n@@ -333,10 +334,12 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n \n                 ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n-                    let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n+                    let sized_predicate = ty::TraitRef::from_lang_item(\n+                        tcx,\n                         LangItem::Sized,\n+                        DUMMY_SP,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n-                    ));\n+                    );\n                     ecx.add_goal(goal.with(tcx, sized_predicate));\n                     tcx.types.unit\n                 }"}, {"sha": "6c98fadd1482a92621e99344874f82a0a700e17d", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -272,12 +272,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         .evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n                 }\n             };\n-        let output_is_sized_pred = tupled_inputs_and_output\n-            .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+        let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n+            ty::TraitRef::from_lang_item(tcx, LangItem::Sized, DUMMY_SP, [output])\n+        });\n \n         let pred = tupled_inputs_and_output\n             .map_bound(|(inputs, _)| {\n-                tcx.mk_trait_ref(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n+                ty::TraitRef::new(tcx, goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n             })\n             .to_predicate(tcx);\n         // A built-in `Fn` impl only holds if the output is sized.\n@@ -358,10 +359,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         Self::consider_implied_clause(\n             ecx,\n             goal,\n-            ty::Binder::dummy(\n-                tcx.mk_trait_ref(goal.predicate.def_id(), [self_ty, generator.resume_ty()]),\n-            )\n-            .to_predicate(tcx),\n+            ty::TraitRef::new(tcx, goal.predicate.def_id(), [self_ty, generator.resume_ty()])\n+                .to_predicate(tcx),\n             // Technically, we need to check that the generator types are Sized,\n             // but that's already proven by the generator being WF.\n             [],\n@@ -410,9 +409,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         data.iter().map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty))),\n                     );\n                     // The type must be Sized to be unsized.\n-                    ecx.add_goal(\n-                        goal.with(tcx, ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [a_ty]))),\n-                    );\n+                    ecx.add_goal(goal.with(tcx, ty::TraitRef::new(tcx, sized_def_id, [a_ty])));\n                     // The type must outlive the lifetime of the `dyn` we're unsizing into.\n                     ecx.add_goal(\n                         goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region))),\n@@ -461,9 +458,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     ecx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(\n-                            tcx.mk_trait_ref(goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n-                        ),\n+                        ty::TraitRef::new(tcx, goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n@@ -482,9 +477,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     // Similar to ADTs, require that the rest of the fields are equal.\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(\n-                            tcx.mk_trait_ref(goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n-                        ),\n+                        ty::TraitRef::new(tcx, goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }"}, {"sha": "6b080a132f382af24641c4be07313cc01fa66dd7", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = tcx.mk_trait_ref(trait_did, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, trait_did, [ty]);\n \n         let infcx = tcx.infer_ctxt().build();\n         let mut selcx = SelectionContext::new(&infcx);\n@@ -263,7 +263,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: infcx.tcx.mk_trait_ref(trait_did, [ty]),\n+            trait_ref: ty::TraitRef::new(infcx.tcx, trait_did, [ty]),\n \n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive"}, {"sha": "000427bbe83ec336ebf94ad506b86dbbc649aa5b", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(def_id, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, def_id, [ty]);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "7ab652761a410b12eea86db6372ca2893f268b7e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -87,7 +87,7 @@ pub fn recompute_applicable_impls<'tcx>(\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = kind.skip_binder()\n             && param_env_candidate_may_apply(kind.rebind(trait_pred))\n         {\n-            if kind.rebind(trait_pred.trait_ref) == ty::TraitRef::identity(tcx, trait_pred.def_id()) {\n+            if kind.rebind(trait_pred.trait_ref) == ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_pred.def_id())) {\n                 ambiguities.push(Ambiguity::ParamEnv(tcx.def_span(trait_pred.def_id())))\n             } else {\n                 ambiguities.push(Ambiguity::ParamEnv(span))"}, {"sha": "8f2a5d649f0919a3e1f3e6bcf21b85840c5eb01d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -358,7 +358,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, [ty.skip_binder(), var]);\n+                let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, [ty.skip_binder(), var]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),"}, {"sha": "d34eb193453bd400d83d90d946212363e7a5b409", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -3502,7 +3502,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         _ => None,\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n-                        trait_ref: self.tcx.mk_trait_ref(\n+                        trait_ref: ty::TraitRef::new(self.tcx,\n                             trait_pred.def_id(),\n                             [field_ty].into_iter().chain(trait_substs),\n                         ),"}, {"sha": "8b8c50f6b836c4ec93262be3379bde96b8030e92", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -127,7 +127,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     ty: Ty<'tcx>,\n     def_id: DefId,\n ) -> bool {\n-    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, [ty]));\n+    let trait_ref = ty::TraitRef::new(infcx.tcx, def_id, [ty]);\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const())\n }\n "}, {"sha": "06d9c10386e7c4682037b3b64b259feb68abd943", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -279,7 +279,7 @@ fn predicates_reference_self(\n     trait_def_id: DefId,\n     supertraits_only: bool,\n ) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n     } else {\n@@ -661,9 +661,9 @@ fn object_ty_for_trait<'tcx>(\n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n     debug!(?trait_ref);\n \n-    let trait_predicate = trait_ref.map_bound(|trait_ref| {\n-        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n-    });\n+    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n+    ));\n     debug!(?trait_predicate);\n \n     let pred: ty::Predicate<'tcx> = trait_ref.to_predicate(tcx);\n@@ -769,11 +769,10 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(\n-            tcx.mk_trait_ref(unsize_did, [tcx.types.self_param, unsized_self_ty]),\n-        )\n-        .without_const()\n-        .to_predicate(tcx);\n+        let unsize_predicate =\n+            ty::TraitRef::new(tcx, unsize_did, [tcx.types.self_param, unsized_self_ty])\n+                .without_const()\n+                .to_predicate(tcx);\n \n         // U: Trait<Arg1, ..., ArgN>\n         let trait_predicate = {\n@@ -782,7 +781,7 @@ fn receiver_is_dispatchable<'tcx>(\n                 if param.index == 0 { unsized_self_ty.into() } else { tcx.mk_param_from_def(param) }\n             });\n \n-            ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, substs)).to_predicate(tcx)\n+            ty::TraitRef::new(tcx, trait_def_id, substs).to_predicate(tcx)\n         };\n \n         let caller_bounds =\n@@ -797,9 +796,8 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(\n-            tcx.mk_trait_ref(dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]),\n-        );\n+        let predicate =\n+            ty::TraitRef::new(tcx, dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]);\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };\n@@ -882,7 +880,8 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n \n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n-                        let trait_ref = ty::TraitRef::identity(self.tcx, self.trait_def_id);\n+                        let trait_ref =\n+                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n                         self.supertraits = Some(\n                             traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n                         );"}, {"sha": "8c74860cdf341023bf27efc82e731003c78307bf", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -1319,7 +1319,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n         // FIXME(named-returns): Binders\n-        let trait_predicate = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, trait_substs));\n+        let trait_predicate = ty::TraitRef::new(tcx, trait_def_id, trait_substs);\n \n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n@@ -1682,10 +1682,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                             if selcx.infcx.predicate_must_hold_modulo_regions(\n                                 &obligation.with(\n                                     selcx.tcx(),\n-                                    ty::Binder::dummy(\n-                                        selcx.tcx().at(obligation.cause.span()).mk_trait_ref(LangItem::Sized, [self_ty]),\n-                                    )\n-                                    .without_const(),\n+                                    ty::TraitRef::from_lang_item(selcx.tcx(), LangItem::Sized, obligation.cause.span(),[self_ty])\n+                                        .without_const(),\n                                 ),\n                             ) =>\n                         {\n@@ -1948,8 +1946,11 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n             )\n         });\n         if check_is_sized {\n-            let sized_predicate = ty::Binder::dummy(\n-                tcx.at(obligation.cause.span()).mk_trait_ref(LangItem::Sized, [self_ty]),\n+            let sized_predicate = ty::TraitRef::from_lang_item(\n+                tcx,\n+                LangItem::Sized,\n+                obligation.cause.span(),\n+                [self_ty],\n             )\n             .without_const();\n             obligations.push(obligation.with(tcx, sized_predicate));"}, {"sha": "33f502f8182854f8a8b3a133e287f8a20b1f3755", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -459,7 +459,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 obligation.param_env,\n                 self.tcx().mk_predicate(obligation.predicate.map_bound(|mut pred| {\n                     pred.trait_ref =\n-                        self.tcx().mk_trait_ref(fn_ptr_trait, [pred.trait_ref.self_ty()]);\n+                        ty::TraitRef::new(self.tcx(), fn_ptr_trait, [pred.trait_ref.self_ty()]);\n                     ty::PredicateKind::Clause(ty::Clause::Trait(pred))\n                 })),\n             );\n@@ -634,7 +634,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n \n         let obligation =\n             traits::Obligation::new(tcx, cause.clone(), param_env, ty::Binder::dummy(trait_ref));"}, {"sha": "422285d947400a7153499990fb7e8eb03a61ca1e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -646,8 +646,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr =\n-            ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(LangItem::Sized, [output_ty]));\n+        let tr = ty::TraitRef::from_lang_item(self.tcx(), LangItem::Sized, cause.span, [output_ty]);\n         nested.push(Obligation::new(self.infcx.tcx, cause, obligation.param_env, tr));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n@@ -1050,8 +1049,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr =\n-                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [source]));\n+                let tr = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, cause.span, [source]);\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n@@ -1121,7 +1119,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Construct the nested `TailField<T>: Unsize<TailField<U>>` predicate.\n                 let tail_unsize_obligation = obligation.with(\n                     tcx,\n-                    tcx.mk_trait_ref(obligation.predicate.def_id(), [source_tail, target_tail]),\n+                    ty::TraitRef::new(\n+                        tcx,\n+                        obligation.predicate.def_id(),\n+                        [source_tail, target_tail],\n+                    ),\n                 );\n                 nested.push(tail_unsize_obligation);\n             }\n@@ -1146,8 +1148,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nested.extend(obligations);\n \n                 // Add a nested `T: Unsize<U>` predicate.\n-                let last_unsize_obligation = obligation\n-                    .with(tcx, tcx.mk_trait_ref(obligation.predicate.def_id(), [a_last, b_last]));\n+                let last_unsize_obligation = obligation.with(\n+                    tcx,\n+                    ty::TraitRef::new(tcx, obligation.predicate.def_id(), [a_last, b_last]),\n+                );\n                 nested.push(last_unsize_obligation);\n             }\n \n@@ -1271,10 +1275,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: self\n-                                .tcx()\n-                                .at(cause.span)\n-                                .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n+                            trait_ref: ty::TraitRef::from_lang_item(\n+                                self.tcx(),\n+                                LangItem::Destruct,\n+                                cause.span,\n+                                [nested_ty],\n+                            ),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n@@ -1295,10 +1301,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: self\n-                            .tcx()\n-                            .at(cause.span)\n-                            .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n+                        trait_ref: ty::TraitRef::from_lang_item(\n+                            self.tcx(),\n+                            LangItem::Destruct,\n+                            cause.span,\n+                            [nested_ty],\n+                        ),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,\n                     });"}, {"sha": "246d3ea2ef2989984c39b7679476d5b60833aa7b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -2413,7 +2413,7 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n                     self.tcx(),\n                     cause.clone(),\n                     param_env,\n-                    self.tcx().mk_trait_ref(trait_def_id, [normalized_ty]),\n+                    ty::TraitRef::new(self.tcx(), trait_def_id, [normalized_ty]),\n                 );\n                 obligations.push(obligation);\n                 obligations"}, {"sha": "7b7e297c64b16937bc02d7d2d1a73797499eb13e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -262,7 +262,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.mk_tup(sig.skip_binder().inputs()),\n     };\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -273,7 +273,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n \n@@ -284,7 +284,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n     assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.return_ty))\n }\n "}, {"sha": "f7a3126b4aa71a74c94aab2c15b414416c10f65a", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -359,7 +359,7 @@ pub(crate) fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, [source, target]);\n+    let trait_ref = ty::TraitRef::new(tcx, unsize_trait_did, [source, target]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "22710c7c059a98128defa4225b02c68c03686d23", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -463,7 +463,8 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [subty]);\n+            let trait_ref =\n+                ty::TraitRef::from_lang_item(self.tcx, LangItem::Sized, cause.span, [subty]);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "78efcce572d4bf9333c2083b598aafb73d511cb2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -62,9 +62,8 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, [ty]))\n-                .without_const()\n-                .to_predicate(tcx);\n+            let sized_predicate =\n+                ty::TraitRef::new(tcx, sized_trait, [ty]).without_const().to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;\n             if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }\n         }"}, {"sha": "fb32b6ef1d3f50d4f70cb55e49ecdb2e9b9b5876", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, [ty]));\n+        let trait_ref = ty::Binder::dummy(ty::TraitRef::new(tcx, trait_def_id, [ty]));\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}, {"sha": "23449a25c3a5ecc7bb04abe0b28db2365a4e749f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -131,7 +131,7 @@ fn clean_generic_bound<'tcx>(\n         hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n             let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n-            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id);\n+            let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(cx.tcx, def_id));\n \n             let generic_args = clean_generic_args(generic_args, cx);\n             let GenericArgs::AngleBracketed { bindings, .. } = generic_args"}, {"sha": "8f5d319cd4fc1860ec0226720f4d6a50fd54c839", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -517,7 +517,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n         tcx.mk_predicates_from_iter(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n-                    trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),\n+                    trait_ref: ty::TraitRef::new(tcx, eq_trait_id, [tcx.mk_param_from_def(param)]),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,\n                 }))))"}, {"sha": "6615f9c99537507c680e0393174f65148bb4cc6f", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -94,8 +94,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n                                 TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id())\n-                                    .self_ty()\n-                                    .skip_binder(),\n+                                    .self_ty(),\n                             );\n                         }\n                     }"}, {"sha": "06b88e34d2462ba34aec7bec73864776dda1601b", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "patch": "@@ -3476,8 +3476,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n                 let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n-                    .self_ty()\n-                    .skip_binder();\n+                    .self_ty();\n                 wrong_self_convention::check(\n                     cx,\n                     item.ident.name.as_str(),\n@@ -3495,8 +3494,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.owner_id);\n             let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n-                .self_ty()\n-                .skip_binder();\n+                .self_ty();\n             if !ret_ty.contains(self_ty);\n \n             then {"}]}