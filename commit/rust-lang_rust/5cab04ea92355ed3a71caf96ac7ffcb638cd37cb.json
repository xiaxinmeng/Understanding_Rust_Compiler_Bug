{"sha": "5cab04ea92355ed3a71caf96ac7ffcb638cd37cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYWIwNGVhOTIzNTVlZDNhNzFjYWY5NmFjN2ZmY2I2MzhjZDM3Y2I=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-08T19:52:57Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-08T19:52:57Z"}, "message": "Remove deprecated linked_list_extras methods.", "tree": {"sha": "dc3615d6cb1e5272801757cd69ce23e09fdf6a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc3615d6cb1e5272801757cd69ce23e09fdf6a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cab04ea92355ed3a71caf96ac7ffcb638cd37cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cab04ea92355ed3a71caf96ac7ffcb638cd37cb", "html_url": "https://github.com/rust-lang/rust/commit/5cab04ea92355ed3a71caf96ac7ffcb638cd37cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cab04ea92355ed3a71caf96ac7ffcb638cd37cb/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e6e1e33a11d140a4d70f946730137f241224eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6e1e33a11d140a4d70f946730137f241224eb3", "html_url": "https://github.com/rust-lang/rust/commit/5e6e1e33a11d140a4d70f946730137f241224eb3"}], "stats": {"total": 62, "additions": 0, "deletions": 62}, "files": [{"sha": "4707f12940171105ec41b55547dc0737b5dc09b8", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5cab04ea92355ed3a71caf96ac7ffcb638cd37cb/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cab04ea92355ed3a71caf96ac7ffcb638cd37cb/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=5cab04ea92355ed3a71caf96ac7ffcb638cd37cb", "patch": "@@ -1099,68 +1099,6 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n \n-impl<T> IterMut<'_, T> {\n-    /// Inserts the given element just after the element most recently returned by `.next()`.\n-    /// The inserted element does not appear in the iteration.\n-    ///\n-    /// This method will be removed soon.\n-    #[inline]\n-    #[unstable(\n-        feature = \"linked_list_extras\",\n-        reason = \"this is probably better handled by a cursor type -- we'll see\",\n-        issue = \"27794\"\n-    )]\n-    #[rustc_deprecated(\n-        reason = \"Deprecated in favor of CursorMut methods. This method will be removed soon.\",\n-        since = \"1.47.0\"\n-    )]\n-    pub fn insert_next(&mut self, element: T) {\n-        match self.head {\n-            // `push_back` is okay with aliasing `element` references\n-            None => self.list.push_back(element),\n-            Some(head) => unsafe {\n-                let prev = match head.as_ref().prev {\n-                    // `push_front` is okay with aliasing nodes\n-                    None => return self.list.push_front(element),\n-                    Some(prev) => prev,\n-                };\n-\n-                let node = Some(\n-                    Box::leak(box Node { next: Some(head), prev: Some(prev), element }).into(),\n-                );\n-\n-                // Not creating references to entire nodes to not invalidate the\n-                // reference to `element` we handed to the user.\n-                (*prev.as_ptr()).next = node;\n-                (*head.as_ptr()).prev = node;\n-\n-                self.list.len += 1;\n-            },\n-        }\n-    }\n-\n-    /// Provides a reference to the next element, without changing the iterator.\n-    ///\n-    /// This method will be removed soon.\n-    #[inline]\n-    #[unstable(\n-        feature = \"linked_list_extras\",\n-        reason = \"this is probably better handled by a cursor type -- we'll see\",\n-        issue = \"27794\"\n-    )]\n-    #[rustc_deprecated(\n-        reason = \"Deprecated in favor of CursorMut methods. This method will be removed soon.\",\n-        since = \"1.47.0\"\n-    )]\n-    pub fn peek_next(&mut self) -> Option<&mut T> {\n-        if self.len == 0 {\n-            None\n-        } else {\n-            unsafe { self.head.as_mut().map(|node| &mut node.as_mut().element) }\n-        }\n-    }\n-}\n-\n /// A cursor over a `LinkedList`.\n ///\n /// A `Cursor` is like an iterator, except that it can freely seek back-and-forth."}]}