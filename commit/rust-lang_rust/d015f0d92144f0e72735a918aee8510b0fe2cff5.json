{"sha": "d015f0d92144f0e72735a918aee8510b0fe2cff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTVmMGQ5MjE0NGYwZTcyNzM1YTkxOGFlZTg1MTBiMGZlMmNmZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-03T09:44:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-03T09:44:07Z"}, "message": "Auto merge of #79594 - vn-ki:const-eval-intrinsic, r=oli-obk\n\nadd const_allocate intrinsic\n\nr? `@oli-obk`\n\nfixes #75390", "tree": {"sha": "d13ec1aa7531149316b2dbe94379f2af9e890504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13ec1aa7531149316b2dbe94379f2af9e890504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d015f0d92144f0e72735a918aee8510b0fe2cff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d015f0d92144f0e72735a918aee8510b0fe2cff5", "html_url": "https://github.com/rust-lang/rust/commit/d015f0d92144f0e72735a918aee8510b0fe2cff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d015f0d92144f0e72735a918aee8510b0fe2cff5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7cff213e937c1bb301be807ce04fcf6092b9163", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cff213e937c1bb301be807ce04fcf6092b9163", "html_url": "https://github.com/rust-lang/rust/commit/c7cff213e937c1bb301be807ce04fcf6092b9163"}, {"sha": "bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "html_url": "https://github.com/rust-lang/rust/commit/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24"}], "stats": {"total": 565, "additions": 424, "deletions": 141}, "files": [{"sha": "275496647d9481acd3f8ce7debf5d4d17717361a", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1,5 +1,6 @@\n use rustc_middle::mir;\n use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_middle::ty::InstanceDef;\n use rustc_middle::ty::{self, Ty};\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n@@ -12,6 +13,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::mir::AssertMessage;\n use rustc_session::Limit;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::abi::{Align, Size};\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, Frame, GlobalId, ImmTy, InterpCx,\n@@ -37,6 +39,14 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         if instance.def.requires_caller_location(self.tcx()) {\n             return Ok(false);\n         }\n+        // Only memoize instrinsics. This was added in #79594 while adding the `const_allocate` intrinsic.\n+        // We only memoize intrinsics because it would be unsound to memoize functions\n+        // which might interact with the heap.\n+        // Additionally, const_allocate intrinsic is impure and thus should not be memoized;\n+        // it will not be memoized because it has non-ZST args\n+        if !matches!(instance.def, InstanceDef::Intrinsic(_)) {\n+            return Ok(false);\n+        }\n         // For the moment we only do this for functions which take no arguments\n         // (or all arguments are ZSTs) so that we don't memoize too much.\n         if args.iter().any(|a| !a.layout.is_zst()) {\n@@ -295,6 +305,22 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 };\n                 ecx.write_scalar(Scalar::from_bool(cmp), dest)?;\n             }\n+            sym::const_allocate => {\n+                let size = ecx.read_scalar(args[0])?.to_machine_usize(ecx)?;\n+                let align = ecx.read_scalar(args[1])?.to_machine_usize(ecx)?;\n+\n+                let align = match Align::from_bytes(align) {\n+                    Ok(a) => a,\n+                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n+                };\n+\n+                let ptr = ecx.memory.allocate(\n+                    Size::from_bytes(size as u64),\n+                    align,\n+                    interpret::MemoryKind::ConstHeap,\n+                );\n+                ecx.write_scalar(Scalar::Ptr(ptr), dest)?;\n+            }\n             _ => {\n                 return Err(ConstEvalErrKind::NeedsRfc(format!(\n                     \"calling intrinsic `{}`\","}, {"sha": "db996f72128a7664f0d7c6df9c408f1032c9cb26", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -104,7 +104,10 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     // This match is just a canary for future changes to `MemoryKind`, which most likely need\n     // changes in this function.\n     match kind {\n-        MemoryKind::Stack | MemoryKind::Vtable | MemoryKind::CallerLocation => {}\n+        MemoryKind::Stack\n+        | MemoryKind::ConstHeap\n+        | MemoryKind::Vtable\n+        | MemoryKind::CallerLocation => {}\n     }\n     // Set allocation mutability as appropriate. This is used by LLVM to put things into\n     // read-only memory, and also by Miri when evaluating other globals that"}, {"sha": "3294daabe612501e8e381ea8997b6c000bb676b1", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -27,6 +27,9 @@ use crate::util::pretty;\n pub enum MemoryKind<T> {\n     /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n+    /// Heap memory.\n+    /// FIXME: this variant should be in const_eval\n+    ConstHeap,\n     /// Memory backing vtables. Error if ever deallocated.\n     Vtable,\n     /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.\n@@ -40,6 +43,7 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     fn may_leak(self) -> bool {\n         match self {\n             MemoryKind::Stack => false,\n+            MemoryKind::ConstHeap => false,\n             MemoryKind::Vtable => true,\n             MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak(),\n@@ -51,6 +55,7 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             MemoryKind::Stack => write!(f, \"stack variable\"),\n+            MemoryKind::ConstHeap => write!(f, \"heap allocation\"),\n             MemoryKind::Vtable => write!(f, \"vtable\"),\n             MemoryKind::CallerLocation => write!(f, \"caller location\"),\n             MemoryKind::Machine(m) => write!(f, \"{}\", m),"}, {"sha": "91b87fdc482de3f733a13b1896dd9e980850aa42", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -356,6 +356,7 @@ symbols! {\n         concat_idents,\n         conservative_impl_trait,\n         console,\n+        const_allocate,\n         const_compare_raw_pointers,\n         const_constructor,\n         const_eval_limit,"}, {"sha": "e2712a3033995edb92838a8c17fd6a53f5cc00c2", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -286,6 +286,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.bool)\n             }\n \n+            sym::const_allocate => {\n+                (0, vec![tcx.types.usize, tcx.types.usize], tcx.mk_mut_ptr(tcx.types.u8))\n+            }\n+\n             sym::ptr_offset_from => {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.isize)\n             }"}, {"sha": "73df8e53f82a4d2c5ae84d9995328d2fa4bf5e00", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1732,6 +1732,11 @@ extern \"rust-intrinsic\" {\n     /// See documentation of `<*const T>::guaranteed_ne` for details.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n+\n+    /// Allocate at compile time. Should not be called at runtime.\n+    #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "bb76683e0fef4e6dcad32efd17ed8c767f8a231c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -68,6 +68,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n #![feature(cfg_target_has_atomic)]\n+#![cfg_attr(not(bootstrap), feature(const_heap))]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]"}, {"sha": "4d627f05adc061dd61e6ff8d12b7548b149a8d70", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -11,12 +11,6 @@ LL |     if std::mem::size_of::<T>() == 0 {\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-argument-if-length.rs:19:15\n-   |\n-LL |     pad: [u8; is_zst::<T>()],\n-   |               ^^^^^^^^^^^^^ referenced constant has errors\n-\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:17:12\n    |\n@@ -36,7 +30,6 @@ help: the `Box` type always has a statically known size and allocates its conten\n LL |     value: Box<T>,\n    |            ^^^^ ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0080, E0277.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8090738312418d57a73db7d6ab7692478029660e", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -18,7 +18,6 @@ pub struct AtLeastByte<T: ?Sized> {\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n     //[min]~^ ERROR generic parameters may not be used in const operations\n-    //[full]~^^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "16bf1adf7db3e39d5f1afb9518d0182e39a0478b", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -9,11 +9,11 @@ impl<T> PrintName<T> {\n \n const fn no_codegen<T>() {\n     if false {\n-        let _ = PrintName::<T>::VOID; //~ERROR evaluation of constant value failed\n+        let _ = PrintName::<T>::VOID; //~ERROR could not evaluate static initializer\n     }\n }\n \n-pub static FOO: () = no_codegen::<i32>(); //~ERROR could not evaluate static initializer\n+pub static FOO: () = no_codegen::<i32>();\n \n fn main() {\n     FOO"}, {"sha": "040cc3fcf798d64b337489ee04beeeddbccd50ba", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -24,18 +24,18 @@ note: the lint level is defined here\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/erroneous-const.rs:12:17\n    |\n LL |         let _ = PrintName::<T>::VOID;\n-   |                 ^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/erroneous-const.rs:16:22\n-   |\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 referenced constant has errors\n+   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:12:17\n+...\n LL | pub static FOO: () = no_codegen::<i32>();\n-   |                      ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:16:22\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "0d809ca9a622b7fa7c04e196b89d9bafdf3dcbac", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,17 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: i32 = foo();\n+const fn foo() -> i32 {\n+    unsafe {\n+        let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+        //~^ error: any use of this value will cause an error [const_err]\n+    }\n+    1\n+\n+}\n+\n+fn main() {}"}, {"sha": "41c1b977269a321d740f1c93557381ec494a3d4b", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,17 @@\n+error: any use of this value will cause an error\n+  --> $DIR/alloc_intrinsic_errors.rs:10:17\n+   |\n+LL | const FOO: i32 = foo();\n+   | -----------------------\n+...\n+LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 align has to be a power of 2, `3` is not a power of 2\n+   |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:10:17\n+   |                 inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "de7fb65f6858f513bcf3c0945c625ca98eefa4c4", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: &i32 = foo();\n+\n+const fn foo() -> &'static i32 {\n+    let t = unsafe {\n+        let i = intrinsics::const_allocate(4, 4) as * mut i32;\n+        *i = 20;\n+        i\n+    };\n+    unsafe { &*t }\n+}\n+fn main() {\n+    assert_eq!(*FOO, 20)\n+}"}, {"sha": "e6ef9974aa8eb82122f3b392c5e18fe91e66ca98", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,19 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: *const i32 = foo();\n+//~^ ERROR untyped pointers are not allowed in constant\n+\n+const fn foo() -> &'static i32 {\n+    let t = unsafe {\n+        let i = intrinsics::const_allocate(4, 4) as * mut i32;\n+        *i = 20;\n+        i\n+    };\n+    unsafe { &*t }\n+}\n+fn main() {\n+}"}, {"sha": "08679350d6d548705ea6bab08c9f02d6495e7d76", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,8 @@\n+error: untyped pointers are not allowed in constant\n+  --> $DIR/alloc_intrinsic_nontransient_fail.rs:7:1\n+   |\n+LL | const FOO: *const i32 = foo();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c55cd32d26425b22b41b99a6b2b865eebe124989", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_transient.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: i32 = foo();\n+\n+const fn foo() -> i32 {\n+    let t = unsafe {\n+        let i = intrinsics::const_allocate(4, 4) as * mut i32;\n+        *i = 20;\n+        i\n+    };\n+    unsafe { *t }\n+}\n+fn main() {\n+    assert_eq!(FOO, 20);\n+}"}, {"sha": "998b6cef84a729ec2efde54c53909738dc8c4b86", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,10 @@\n+// compile-test\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n+//~^ error: it is undefined behavior to use this value\n+fn main() {}"}, {"sha": "866f877f54d43e5cc7c32823adaf077ba6e789db", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/alloc_intrinsic_uninit.rs:8:1\n+   |\n+LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .<deref>, but expected initialized plain (non-pointer) bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "625f7670bcd63b5b85bae1dfdf1e7b8a2719b03a", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,10 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const BAR: *mut i32 = unsafe { intrinsics::const_allocate(4, 4) as *mut i32};\n+//~^ error: untyped pointers are not allowed in constant\n+\n+fn main() {}"}, {"sha": "ee84f8e54f3441d14e9671003e65ddee218ba935", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -0,0 +1,8 @@\n+error: untyped pointers are not allowed in constant\n+  --> $DIR/alloc_intrinsic_untyped.rs:7:1\n+   |\n+LL | const BAR: *mut i32 = unsafe { intrinsics::const_allocate(4, 4) as *mut i32};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2dc8e14bed545aec882c3a83bbabf7423cea1519", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -2,10 +2,10 @@\n \n #[unwind(aborts)]\n const fn foo() {\n-    panic!() //~ evaluation of constant value failed\n+    panic!() //~ ERROR any use of this value will cause an error [const_err]\n }\n \n-const _: () = foo(); //~ any use of this value will cause an error\n+const _: () = foo();\n // Ensure that the CTFE engine handles calls to `#[unwind(aborts)]` gracefully\n \n fn main() {"}, {"sha": "eee1a35a0dc88610f15c91886477489847330ade", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1,21 +1,18 @@\n-error[E0080]: evaluation of constant value failed\n+error: any use of this value will cause an error\n   --> $DIR/unwind-abort.rs:5:5\n    |\n LL |     panic!()\n-   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: any use of this value will cause an error\n-  --> $DIR/unwind-abort.rs:8:15\n-   |\n+   |     ^^^^^^^^\n+   |     |\n+   |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n+   |     inside `foo` at $SRC_DIR/std/src/macros.rs:LL:COL\n+   |     inside `_` at $DIR/unwind-abort.rs:8:15\n+...\n LL | const _: () = foo();\n-   | --------------^^^^^-\n-   |               |\n-   |               referenced constant has errors\n+   | --------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "129457ebdf92913bd58756b2c687a2bfd344661c", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -14,11 +14,6 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`..\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `std::mem::size_of`...\n-  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `[u8; _]`...\n    = note: ...which again requires simplifying constant for the type system `Foo::bytes::{constant#0}`, completing the cycle"}, {"sha": "2f4b7578d1c324005ef7a5718cbb30ec1e82d9f3", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1,15 +1,15 @@\n // build-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n-    hint_unreachable()\n+    hint_unreachable() //~ ERROR any use of this value will cause an error [const_err]\n }\n \n pub const unsafe fn hint_unreachable() -> ! {\n-    fake_type() //~ ERROR evaluation of constant value failed\n+    fake_type()\n }\n \n trait Const {\n-    const CONSTANT: i32 = unsafe { fake_type() }; //~ ERROR any use of this value will cause an err\n+    const CONSTANT: i32 = unsafe { fake_type() };\n }\n \n impl<T> Const for T {}"}, {"sha": "1fb5ac11df0f0a153e775bc160513adbecb06555", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 70, "deletions": 79, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1,150 +1,141 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+error: any use of this value will cause an error\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n LL |     hint_unreachable()\n-   |     ------------------\n+   |     ^^^^^^^^^^^^^^^^^^\n    |     |\n+   |     reached the configured maximum number of stack frames\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n ...\n-LL |     fake_type()\n-   |     ^^^^^^^^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-\n-error: any use of this value will cause an error\n-  --> $DIR/uninhabited-const-issue-61744.rs:12:36\n-   |\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |     -------------------------------^^^^^^^^^^^---\n-   |                                    |\n-   |                                    referenced constant has errors\n+   |     ---------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n \n@@ -154,6 +145,6 @@ error[E0080]: erroneous constant used\n LL |     dbg!(i32::CONSTANT);\n    |          ^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "4209153116d94a5ae0c1fb22f3b4d7d334c2962a", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1,8 +1,7 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n const fn a() -> usize {\n-    //~^ ERROR cycle detected when const-evaluating + checking `a` [E0391]\n-    b()\n+    b() //~ ERROR evaluation of constant value failed [E0080]\n }\n const fn b() -> usize {\n     a()"}, {"sha": "620c9e110ff6822b9d71151805beca0c365aae53", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 140, "deletions": 16, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d015f0d92144f0e72735a918aee8510b0fe2cff5/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=d015f0d92144f0e72735a918aee8510b0fe2cff5", "patch": "@@ -1,21 +1,145 @@\n-error[E0391]: cycle detected when const-evaluating + checking `a`\n-  --> $DIR/infinite-recursion-const-fn.rs:3:1\n-   |\n-LL | const fn a() -> usize {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...which requires const-evaluating + checking `b`...\n-  --> $DIR/infinite-recursion-const-fn.rs:7:1\n-   |\n-LL | const fn b() -> usize {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `a`, completing the cycle\n-note: cycle used when const-evaluating + checking `ARR::{constant#0}`\n-  --> $DIR/infinite-recursion-const-fn.rs:10:18\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n    |\n+LL |     b()\n+   |     ^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+...\n+LL |     a()\n+   |     ---\n+   |     |\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+LL | }\n LL | const ARR: [i32; a()] = [5; 6];\n-   |                  ^^^\n+   |                  --- inside `ARR::{constant#0}` at $DIR/infinite-recursion-const-fn.rs:9:18\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0391`.\n+For more information about this error, try `rustc --explain E0080`."}]}