{"sha": "c5f3706c0d90541ea76b1dfa28ec473af97aacb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZjM3MDZjMGQ5MDU0MWVhNzZiMWRmYTI4ZWM0NzNhZjk3YWFjYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-15T03:36:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-15T03:36:31Z"}, "message": "Auto merge of #34263 - ollie27:docs_ip, r=alexcrichton\n\nImprove IP reserved address docs\n\n- Add links to all RFCs to make it clear these are not Rust RFCs.\n- Correct RFC numbers to match the numbers in [RFC 6890](https://tools.ietf.org/html/rfc6890)\n- Clean up formatting to show addresses and ranges in parentheses like (255.255.255.255)\n\nr? @steveklabnik", "tree": {"sha": "9496ef21f2ae71aea231ca1b9568a03bdd2fc0aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9496ef21f2ae71aea231ca1b9568a03bdd2fc0aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f3706c0d90541ea76b1dfa28ec473af97aacb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f3706c0d90541ea76b1dfa28ec473af97aacb0", "html_url": "https://github.com/rust-lang/rust/commit/c5f3706c0d90541ea76b1dfa28ec473af97aacb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f3706c0d90541ea76b1dfa28ec473af97aacb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a942f60f085be7450f340b33eae16570633eb27", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a942f60f085be7450f340b33eae16570633eb27", "html_url": "https://github.com/rust-lang/rust/commit/1a942f60f085be7450f340b33eae16570633eb27"}, {"sha": "61043fd3c1c54f8ed7d9b4f9ecabe62d4f19e933", "url": "https://api.github.com/repos/rust-lang/rust/commits/61043fd3c1c54f8ed7d9b4f9ecabe62d4f19e933", "html_url": "https://github.com/rust-lang/rust/commit/61043fd3c1c54f8ed7d9b4f9ecabe62d4f19e933"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "57d75441bff3dd50991b0192d8eb2ce8c36d76b9", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c5f3706c0d90541ea76b1dfa28ec473af97aacb0/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f3706c0d90541ea76b1dfa28ec473af97aacb0/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=c5f3706c0d90541ea76b1dfa28ec473af97aacb0", "patch": "@@ -82,22 +82,24 @@ impl Ipv4Addr {\n         [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n     }\n \n-    /// Returns true for the special 'unspecified' address 0.0.0.0.\n+    /// Returns true for the special 'unspecified' address (0.0.0.0).\n     pub fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n \n     /// Returns true if this is a loopback address (127.0.0.0/8).\n     ///\n-    /// This property is defined by RFC 6890.\n+    /// This property is defined by [RFC 1122].\n+    /// [RFC 1122]: https://tools.ietf.org/html/rfc1122\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n     }\n \n     /// Returns true if this is a private address.\n     ///\n-    /// The private address ranges are defined in RFC 1918 and include:\n+    /// The private address ranges are defined in [RFC 1918] and include:\n+    /// [RFC 1918]: https://tools.ietf.org/html/rfc1918\n     ///\n     ///  - 10.0.0.0/8\n     ///  - 172.16.0.0/12\n@@ -114,7 +116,8 @@ impl Ipv4Addr {\n \n     /// Returns true if the address is link-local (169.254.0.0/16).\n     ///\n-    /// This property is defined by RFC 6890.\n+    /// This property is defined by [RFC 3927].\n+    /// [RFC 3927]: https://tools.ietf.org/html/rfc3927\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_link_local(&self) -> bool {\n         self.octets()[0] == 169 && self.octets()[1] == 254\n@@ -137,18 +140,20 @@ impl Ipv4Addr {\n         !self.is_broadcast() && !self.is_documentation() && !self.is_unspecified()\n     }\n \n-    /// Returns true if this is a multicast address.\n+    /// Returns true if this is a multicast address (224.0.0.0/4).\n     ///\n     /// Multicast addresses have a most significant octet between 224 and 239,\n-    /// and is defined by RFC 5771.\n+    /// and is defined by [RFC 5771].\n+    /// [RFC 5771]: https://tools.ietf.org/html/rfc5771\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n \n-    /// Returns true if this is a broadcast address.\n+    /// Returns true if this is a broadcast address (255.255.255.255).\n     ///\n-    /// A broadcast address has all octets set to 255 as defined in RFC 919.\n+    /// A broadcast address has all octets set to 255 as defined in [RFC 919].\n+    /// [RFC 919]: https://tools.ietf.org/html/rfc919\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_broadcast(&self) -> bool {\n         self.octets()[0] == 255 && self.octets()[1] == 255 &&\n@@ -157,7 +162,8 @@ impl Ipv4Addr {\n \n     /// Returns true if this address is in a range designated for documentation.\n     ///\n-    /// This is defined in RFC 5737:\n+    /// This is defined in [RFC 5737]:\n+    /// [RFC 5737]: https://tools.ietf.org/html/rfc5737\n     ///\n     /// - 192.0.2.0/24 (TEST-NET-1)\n     /// - 198.51.100.0/24 (TEST-NET-2)\n@@ -321,17 +327,19 @@ impl Ipv6Addr {\n         ]\n     }\n \n-    /// Returns true for the special 'unspecified' address ::.\n+    /// Returns true for the special 'unspecified' address (::).\n     ///\n-    /// This property is defined in RFC 6890.\n+    /// This property is defined in [RFC 4291].\n+    /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_unspecified(&self) -> bool {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 0]\n     }\n \n     /// Returns true if this is a loopback address (::1).\n     ///\n-    /// This property is defined in RFC 6890.\n+    /// This property is defined in [RFC 4291].\n+    /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_loopback(&self) -> bool {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 1]\n@@ -352,26 +360,33 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns true if this is a unique local address (IPv6).\n+    /// Returns true if this is a unique local address (fc00::/7).\n     ///\n-    /// Unique local addresses are defined in RFC 4193 and have the form fc00::/7.\n+    /// This property is defined in [RFC 4193].\n+    /// [RFC 4193]: https://tools.ietf.org/html/rfc4193\n     pub fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n     /// Returns true if the address is unicast and link-local (fe80::/10).\n+    ///\n+    /// This property is defined in [RFC 4291].\n+    /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n-    /// Returns true if this is a deprecated unicast site-local address (IPv6\n-    /// fec0::/10).\n+    /// Returns true if this is a deprecated unicast site-local address\n+    /// (fec0::/10).\n     pub fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n \n     /// Returns true if this is an address reserved for documentation\n-    /// This is defined to be 2001:db8::/32 in RFC 3849.\n+    /// (2001:db8::/32).\n+    ///\n+    /// This property is defined in [RFC 3849].\n+    /// [RFC 3849]: https://tools.ietf.org/html/rfc3849\n     pub fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n@@ -411,10 +426,10 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns true if this is a multicast address.\n+    /// Returns true if this is a multicast address (ff00::/8).\n     ///\n-    /// Multicast addresses have the form ff00::/8, and this property is defined\n-    /// by RFC 3956.\n+    /// This property is defined by [RFC 4291].\n+    /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00"}]}