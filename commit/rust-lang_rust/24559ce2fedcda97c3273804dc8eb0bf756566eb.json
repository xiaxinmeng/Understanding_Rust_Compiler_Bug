{"sha": "24559ce2fedcda97c3273804dc8eb0bf756566eb", "node_id": "C_kwDOAAsO6NoAKDI0NTU5Y2UyZmVkY2RhOTdjMzI3MzgwNGRjOGViMGJmNzU2NTY2ZWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-17T01:28:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "Prefer non-Self non-method types over Self, first", "tree": {"sha": "1f45ea78d973a1a24033c420289977a128bf9ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f45ea78d973a1a24033c420289977a128bf9ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24559ce2fedcda97c3273804dc8eb0bf756566eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24559ce2fedcda97c3273804dc8eb0bf756566eb", "html_url": "https://github.com/rust-lang/rust/commit/24559ce2fedcda97c3273804dc8eb0bf756566eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24559ce2fedcda97c3273804dc8eb0bf756566eb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "html_url": "https://github.com/rust-lang/rust/commit/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1"}], "stats": {"total": 112, "additions": 72, "deletions": 40}, "files": [{"sha": "182e69d2aae43e25b7ab4c6c9f7b2af53f3155d5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1669,6 +1669,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let ty::GenericArgKind::Type(ty) = arg.unpack()\n                     && let ty::Param(param_ty) = ty.kind()\n                     && self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) != def_id\n+                    && param_ty.name != rustc_span::symbol::kw::SelfUpper\n+                {\n+                    Some(arg)\n+                } else {\n+                    None\n+                }\n+            })\n+        });\n+        let mut self_param_to_point_at = predicate_substs.types().find_map(|ty| {\n+            ty.walk().find_map(|arg| {\n+                if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                    && let ty::Param(param_ty) = ty.kind()\n+                    && param_ty.name == rustc_span::symbol::kw::SelfUpper\n                 {\n                     Some(arg)\n                 } else {\n@@ -1681,6 +1694,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // to print a relevant error.\n         if let traits::FulfillmentErrorCode::CodeAmbiguity = error.code {\n             fallback_param_to_point_at = None;\n+            self_param_to_point_at = None;\n             param_to_point_at =\n                 self.find_ambiguous_parameter_in(def_id, error.root_obligation.predicate);\n         }\n@@ -1704,6 +1718,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         return;\n                     }\n \n+                    if let Some(self_param_to_point_at) = self_param_to_point_at\n+                        && self.point_at_args_if_possible(error, def_id, self_param_to_point_at, *call_hir_id, callee.span, args)\n+                    {\n+                        return;\n+                    }\n+\n                     if let hir::QPath::Resolved(_, path) = qpath\n                         && let Some(param_to_point_at) = param_to_point_at\n                         && let Some(segment) = path.segments.last()\n@@ -1733,6 +1753,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n+                if let Some(self_param_to_point_at) = self_param_to_point_at\n+                    && self.point_at_args_if_possible(error, def_id, self_param_to_point_at, hir_id, segment.ident.span, args)\n+                {\n+                    return;\n+                }\n+\n                 if let Some(param_to_point_at) = param_to_point_at\n                     && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n                 {"}, {"sha": "b69fcd5d32a60da122e535111cd6acc07404211b", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n-  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:24:5\n+  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:24:12\n    |\n LL |     f1.foo(1usize);\n-   |     ^^ --- required by a bound introduced by this call\n-   |     |\n-   |     the trait `Foo<usize>` is not implemented for `Bar`\n+   |        --- ^^^^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |        |\n+   |        required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i32>>"}, {"sha": "5e0e4a0115a0e29e5bbdd8ab36df224997611e9a", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n-  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:28:5\n+  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:28:12\n    |\n LL |     f1.foo(1usize);\n-   |     ^^ --- required by a bound introduced by this call\n-   |     |\n-   |     the trait `Foo<usize>` is not implemented for `Bar`\n+   |        --- ^^^^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |        |\n+   |        required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i16>>"}, {"sha": "06e902bca70fe4cd694c0fbaa404d73fe2cd4626", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `E: From<()>` is not satisfied\n-  --> $DIR/never-value-fallback-issue-66757.rs:28:5\n+  --> $DIR/never-value-fallback-issue-66757.rs:28:26\n    |\n LL |     <E as From<_>>::from(never);\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `E`\n+   |     -------------------- ^^^^^ the trait `From<()>` is not implemented for `E`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `From<!>` is implemented for `E`\n "}, {"sha": "8b94c8545fff4756da7c547c93105e9f077fe5cd", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:18\n+  --> $DIR/multiple-impls.rs:33:33\n    |\n LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ------------ ^^^^^^^^^^^^^ trait message\n+   |     ------------                ^^^^ trait message\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -23,10 +23,10 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:35:18\n+  --> $DIR/multiple-impls.rs:35:33\n    |\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ------------ ^^^^^^^^^^^^^ on impl for Foo\n+   |     ------------                ^^^^^^^^^ on impl for Foo\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -47,10 +47,10 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:37:18\n+  --> $DIR/multiple-impls.rs:37:33\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ------------ ^^^^^^^^^^^^^ on impl for Bar\n+   |     ------------                ^^^^^^^^^ on impl for Bar\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "46902ad30a516fc8ff92a2f6140610a518bbbafc", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/on-impl.rs:22:25\n+  --> $DIR/on-impl.rs:22:47\n    |\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ------------------- ^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |     -------------------                       ^^^^ a usize is required to index into a slice\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "656e0d0bf26627cb14d48f75e3017731730bb728", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,33 +1,33 @@\n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:26:5\n+  --> $DIR/repeated-supertrait-ambig.rs:26:15\n    |\n LL |     c.same_as(22)\n-   |     ^ ------- required by a bound introduced by this call\n-   |     |\n-   |     the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |       ------- ^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |       |\n+   |       required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:30:5\n+  --> $DIR/repeated-supertrait-ambig.rs:30:15\n    |\n LL |     c.same_as(22)\n-   |     ^ ------- required by a bound introduced by this call\n-   |     |\n-   |     the trait `CompareTo<i32>` is not implemented for `C`\n+   |       ------- ^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |       |\n+   |       required by a bound introduced by this call\n    |\n help: consider further restricting this bound\n    |\n LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ++++++++++++++++\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:34:34\n+  --> $DIR/repeated-supertrait-ambig.rs:34:37\n    |\n LL |     <dyn CompareToInts>::same_as(c, 22)\n-   |     ---------------------------- ^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |     ----------------------------    ^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -36,10 +36,10 @@ LL |     <dyn CompareToInts>::same_as(c, 22)\n              <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:38:24\n+  --> $DIR/repeated-supertrait-ambig.rs:38:27\n    |\n LL |     CompareTo::same_as(c, 22)\n-   |     ------------------ ^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |     ------------------    ^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -49,12 +49,12 @@ LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ++++++++++++++++\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:42:16\n+  --> $DIR/repeated-supertrait-ambig.rs:42:31\n    |\n LL |     assert_eq!(22_i64.same_as(22), true);\n-   |                ^^^^^^ ------- required by a bound introduced by this call\n-   |                |\n-   |                the trait `CompareTo<i32>` is not implemented for `i64`\n+   |                       ------- ^^ the trait `CompareTo<i32>` is not implemented for `i64`\n+   |                       |\n+   |                       required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>"}, {"sha": "220b3929c88574e338bd7266cafdb08ffa84abca", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,19 +1,23 @@\n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n-  --> $DIR/type-params-in-different-spaces-2.rs:10:9\n+  --> $DIR/type-params-in-different-spaces-2.rs:10:16\n    |\n LL |         Tr::op(u)\n-   |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n+   |         ------ ^ the trait `Tr<U>` is not implemented for `Self`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n    |                              +++++++++++++++++\n \n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n-  --> $DIR/type-params-in-different-spaces-2.rs:16:9\n+  --> $DIR/type-params-in-different-spaces-2.rs:16:16\n    |\n LL |         Tr::op(u)\n-   |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n+   |         ------ ^ the trait `Tr<U>` is not implemented for `Self`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n help: consider further restricting `Self`\n    |"}, {"sha": "f08c81bc1e937f7bada03d02c80886a7d277c649", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24559ce2fedcda97c3273804dc8eb0bf756566eb/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=24559ce2fedcda97c3273804dc8eb0bf756566eb", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: cannot add `u32` to `i32`\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:4:28\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:4:31\n    |\n LL |     <i32 as Add<u32>>::add(1, 2);\n-   |     ---------------------- ^ no implementation for `i32 + u32`\n+   |     ----------------------    ^ no implementation for `i32 + u32`\n    |     |\n    |     required by a bound introduced by this call\n    |"}]}