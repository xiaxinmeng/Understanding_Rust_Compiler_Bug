{"sha": "233542bf424af3153f031cdc54c010959e1bb403", "node_id": "C_kwDOAAsO6NoAKDIzMzU0MmJmNDI0YWYzMTUzZjAzMWNkYzU0YzAxMDk1OWUxYmI0MDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T12:48:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T12:48:54Z"}, "message": "Auto merge of #2610 - RalfJung:issue-1909, r=RalfJung\n\nadd test for #1909\n\nFixes https://github.com/rust-lang/miri/issues/1909", "tree": {"sha": "46b861bb8cab3171ea6d7325aa684c6022d0d3dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b861bb8cab3171ea6d7325aa684c6022d0d3dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/233542bf424af3153f031cdc54c010959e1bb403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/233542bf424af3153f031cdc54c010959e1bb403", "html_url": "https://github.com/rust-lang/rust/commit/233542bf424af3153f031cdc54c010959e1bb403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/233542bf424af3153f031cdc54c010959e1bb403/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9670a3092fa3402cea95c38931f93c6235158d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/9670a3092fa3402cea95c38931f93c6235158d21", "html_url": "https://github.com/rust-lang/rust/commit/9670a3092fa3402cea95c38931f93c6235158d21"}, {"sha": "f554ebbc77b850a83ecd479a0409080e27507dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f554ebbc77b850a83ecd479a0409080e27507dd0", "html_url": "https://github.com/rust-lang/rust/commit/f554ebbc77b850a83ecd479a0409080e27507dd0"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "ce2114e760a32743f3e9c058a139d8ffadd1eff3", "filename": "src/tools/miri/tests/pass/issues/issue-miri-1909.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/233542bf424af3153f031cdc54c010959e1bb403/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-1909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233542bf424af3153f031cdc54c010959e1bb403/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-1909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-1909.rs?ref=233542bf424af3153f031cdc54c010959e1bb403", "patch": "@@ -0,0 +1,57 @@\n+//@compile-flags: -Zmiri-permissive-provenance\n+#![deny(unsafe_op_in_unsafe_fn)]\n+//! This does some tricky ptr-int-casting.\n+\n+use core::alloc::{GlobalAlloc, Layout};\n+use std::alloc::System;\n+\n+/// # Safety\n+/// `ptr` must be valid for writes of `len` bytes\n+unsafe fn volatile_write_zeroize_mem(ptr: *mut u8, len: usize) {\n+    for i in 0..len {\n+        // ptr as usize + i can't overlow because `ptr` is valid for writes of `len`\n+        let ptr_new: *mut u8 = ((ptr as usize) + i) as *mut u8;\n+        // SAFETY: `ptr` is valid for writes of `len` bytes, so `ptr_new` is valid for a\n+        // byte write\n+        unsafe {\n+            core::ptr::write_volatile(ptr_new, 0u8);\n+        }\n+    }\n+}\n+\n+pub struct ZeroizeAlloc;\n+\n+unsafe impl GlobalAlloc for ZeroizeAlloc {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        // SAFETY: uphold by caller\n+        unsafe { System.alloc(layout) }\n+    }\n+\n+    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+        // securely wipe the deallocated memory\n+        // SAFETY: `ptr` is valid for writes of `layout.size()` bytes since it was\n+        // previously successfully allocated (by the safety assumption on this function)\n+        // and not yet deallocated\n+        unsafe {\n+            volatile_write_zeroize_mem(ptr, layout.size());\n+        }\n+        // SAFETY: uphold by caller\n+        unsafe { System.dealloc(ptr, layout) }\n+    }\n+\n+    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+        // SAFETY: uphold by caller\n+        unsafe { System.alloc_zeroed(layout) }\n+    }\n+}\n+\n+#[global_allocator]\n+static GLOBAL: ZeroizeAlloc = ZeroizeAlloc;\n+\n+fn main() {\n+    let layout = Layout::new::<[u8; 16]>();\n+    let ptr = unsafe { std::alloc::alloc_zeroed(layout) };\n+    unsafe {\n+        std::alloc::dealloc(ptr, layout);\n+    }\n+}"}]}