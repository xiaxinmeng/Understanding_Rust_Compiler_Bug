{"sha": "1745957d637d86f111f4aa96e47f68a7433f0e08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDU5NTdkNjM3ZDg2ZjExMWY0YWE5NmU0N2Y2OGE3NDMzZjBlMDg=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-02-23T17:12:38Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-06T03:47:04Z"}, "message": "Make misc checking 2 more parallel", "tree": {"sha": "67e8aeffb3d02497cb6c6a68ba92deb664cdac52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e8aeffb3d02497cb6c6a68ba92deb664cdac52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1745957d637d86f111f4aa96e47f68a7433f0e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1745957d637d86f111f4aa96e47f68a7433f0e08", "html_url": "https://github.com/rust-lang/rust/commit/1745957d637d86f111f4aa96e47f68a7433f0e08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1745957d637d86f111f4aa96e47f68a7433f0e08/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2923e5a77b318300c9d35d63d594125b8b9a43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2923e5a77b318300c9d35d63d594125b8b9a43f", "html_url": "https://github.com/rust-lang/rust/commit/d2923e5a77b318300c9d35d63d594125b8b9a43f"}], "stats": {"total": 61, "additions": 17, "deletions": 44}, "files": [{"sha": "c4071e9f354b18e632c03e0aee8a0c039c4283a0", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -10,12 +10,6 @@ use syntax_pos::Span;\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,"}, {"sha": "031d6dec090af23c1a96f190e5850b0ed1138ab1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -185,12 +185,6 @@ fn check_mod_liveness<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx).as_deep_visitor());\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         check_mod_liveness,"}, {"sha": "cf4a3ecf555b893239566ef410b64047f3708a46", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -218,24 +218,25 @@ fn analysis<'tcx>(\n     // passes are timed inside typeck\n     typeck::check_crate(tcx)?;\n \n-    time(sess, \"misc checking\", || {\n+    time(sess, \"misc checking 2\", || {\n         parallel!({\n-            time(sess, \"rvalue promotion\", || {\n-                rvalue_promotion::check_crate(tcx)\n-            });\n-        }, {\n-            time(sess, \"intrinsic checking\", || {\n-                middle::intrinsicck::check_crate(tcx)\n+            time(sess, \"rvalue promotion + match checking\", || {\n+                tcx.par_body_owners(|def_id| {\n+                    tcx.ensure().const_is_rvalue_promotable_to_static(def_id);\n+                    tcx.ensure().check_match(def_id);\n+                });\n             });\n         }, {\n-            time(sess, \"match checking\", || mir::matchck_crate(tcx));\n-        }, {\n-            // this must run before MIR dump, because\n-            // \"not all control paths return a value\" is reported here.\n-            //\n-            // maybe move the check to a MIR pass?\n-            time(sess, \"liveness checking\", || {\n-                middle::liveness::check_crate(tcx)\n+            time(sess, \"liveness checking + intrinsic checking\", || {\n+                par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                    // this must run before MIR dump, because\n+                    // \"not all control paths return a value\" is reported here.\n+                    //\n+                    // maybe move the check to a MIR pass?\n+                    tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n+\n+                    tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n+                });\n             });\n         });\n     });\n@@ -276,7 +277,7 @@ fn analysis<'tcx>(\n         return Err(ErrorReported);\n     }\n \n-    time(sess, \"misc checking\", || {\n+    time(sess, \"misc checking 3\", || {\n         parallel!({\n             time(sess, \"privacy access levels\", || {\n                 tcx.ensure().privacy_access_levels(LOCAL_CRATE);"}, {"sha": "787dba15f4da13cb3a8907210f427878dc02a770", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -27,13 +27,6 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for def_id in tcx.body_owners() {\n-        tcx.ensure().check_match(def_id);\n-    }\n-    tcx.sess.abort_if_errors();\n-}\n-\n pub(crate) fn check_match<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,"}, {"sha": "4788454b86ab8eb2f29ff9cdfbbe2116ed45796d", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -3,7 +3,6 @@\n mod _match;\n mod check_match;\n \n-pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n use crate::const_eval::{const_field, const_variant_index};"}, {"sha": "0b735b4b39cf5057302fd4e104372643b353b6fe", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -54,7 +54,6 @@ pub mod interpret;\n pub mod monomorphize;\n pub mod const_eval;\n \n-pub use hair::pattern::check_crate as matchck_crate;\n use rustc::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "a059ab40697bff7155b36d2fcd72bb64c6d1fedd", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1745957d637d86f111f4aa96e47f68a7433f0e08/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=1745957d637d86f111f4aa96e47f68a7433f0e08", "patch": "@@ -39,13 +39,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &body_id in &tcx.hir().krate().body_ids {\n-        let def_id = tcx.hir().body_owner_def_id(body_id);\n-        tcx.const_is_rvalue_promotable_to_static(def_id);\n-    }\n-}\n-\n fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                   def_id: DefId)\n                                                   -> bool"}]}