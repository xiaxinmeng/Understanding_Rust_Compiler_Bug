{"sha": "808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGFjOGY0Yjk0OWQ2YWQ0ZjRlZmM2ZTU5MWU5NGYxMzIxYzAzYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-04T08:55:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-04T08:58:10Z"}, "message": "use write_os_str_to_c_string for unix arg passing", "tree": {"sha": "f71665d817aceb571a1a99202f5682b2c83e6f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71665d817aceb571a1a99202f5682b2c83e6f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "html_url": "https://github.com/rust-lang/rust/commit/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e49f4a93a9afb5f4bdc2e16aae79ee97ed9c62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e49f4a93a9afb5f4bdc2e16aae79ee97ed9c62a", "html_url": "https://github.com/rust-lang/rust/commit/6e49f4a93a9afb5f4bdc2e16aae79ee97ed9c62a"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "6f7f0ba329cec5092466be8c53e41d6e06ed9ea4", "filename": "src/eval.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "patch": "@@ -1,5 +1,7 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n+use std::ffi::OsStr;\n+\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n@@ -75,26 +77,15 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let argc = Scalar::from_uint(config.args.len() as u128, ecx.pointer_size());\n     // Third argument (`argv`): created from `config.args`.\n     let argv = {\n-        // For Windows, construct a command string with all the aguments (before we take apart `config.args`).\n-        let mut cmd = String::new();\n+        // Put each argument in memory, collect pointers.\n+        let mut argvs = Vec::<Scalar<Tag>>::new();\n         for arg in config.args.iter() {\n-            if !cmd.is_empty() {\n-                cmd.push(' ');\n-            }\n-            cmd.push_str(&*shell_escape::windows::escape(arg.as_str().into()));\n-        }\n-        // Don't forget `0` terminator.\n-        cmd.push(std::char::from_u32(0).unwrap());\n-        // Collect the pointers to the individual strings.\n-        let mut argvs = Vec::<Pointer<Tag>>::new();\n-        for arg in config.args {\n-            // Add `0` terminator.\n-            let mut arg = arg.into_bytes();\n-            arg.push(0);\n-            argvs.push(\n-                ecx.memory\n-                    .allocate_static_bytes(arg.as_slice(), MiriMemoryKind::Env.into()),\n-            );\n+            // Make space for `0` terminator.\n+            let size = arg.len() as u64 + 1;\n+            let arg_type = tcx.mk_array(tcx.types.u8, size);\n+            let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Env.into());\n+            ecx.write_os_str_to_c_string(OsStr::new(arg), arg_place.ptr, size)?;\n+            argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory.\n         let argvs_layout = ecx.layout_of(\n@@ -107,7 +98,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         }\n         ecx.memory\n             .mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n-        // A pointer to that place is the argument.\n+        // A pointer to that place is the 3rd argument for main.\n         let argv = argvs_place.ptr;\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n@@ -127,6 +118,17 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         }\n         // Store command line as UTF-16 for Windows `GetCommandLineW`.\n         {\n+            // Construct a command string with all the aguments.\n+            let mut cmd = String::new();\n+            for arg in config.args.iter() {\n+                if !cmd.is_empty() {\n+                    cmd.push(' ');\n+                }\n+                cmd.push_str(&*shell_escape::windows::escape(arg.as_str().into()));\n+            }\n+            // Don't forget `0` terminator.\n+            cmd.push(std::char::from_u32(0).unwrap());\n+\n             let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n             let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n             let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Env.into());"}]}