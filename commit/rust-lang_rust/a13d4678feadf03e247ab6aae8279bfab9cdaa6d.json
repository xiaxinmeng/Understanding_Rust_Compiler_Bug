{"sha": "a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExM2Q0Njc4ZmVhZGYwM2UyNDdhYjZhYWU4Mjc5YmZhYjljZGFhNmQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-25T03:07:55Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-24T23:08:11Z"}, "message": "Implement associated lang items\n\nFixes #70718\n\nThis commit allows making associated items (e.g. associated functions\nand types) into lang items via the `#[lang]` attribute. This allows such\nitems to be accessed directly, rather than by iterating over the parent\nitem's associated items.\n\nI've added `FnOnce::Output` as a lang item, and updated one old usage to\nuse the new lang item. The remaining uses can be updated separately.", "tree": {"sha": "638f56f743b932f4748845257841d630b2c044d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/638f56f743b932f4748845257841d630b2c044d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7z3NwACgkQtAh+UQ6Y\nsWQawQ/+K0H5wXVMvmi5xLiUApYuVh0FpYnv2Ba7OquWHLiCOeUP7ektnfa+PUlD\nOyzJGH6xX2BuNETP+BhRtfcoO6Mmhp4wW7B+2KL7YHXV8JcH/BIQjdMGh5muP+OC\n1dRr7ZaPIQ5KBJL1iTS9UbYxHlZeI5RK6C5ioEqz8OY8JcK1wQw5tJoI0X88Gw2+\nHqk4AzfrIR6uKukbGrk4gfPhSEEqWeXwEFABJsn5SwIwgxL5zLS7E/KXBMC8o8Mm\n5tabieqpkUqkVHIuAQ7J0YJ9OB9NRk4St/8ZoiEnNHeenenJEAmZo9yA8txKkSoh\nIUpFMvymeuDhZQaSTVYZ0o+CmkmxCCJu7BfICYqTE2ICTz1WC21Hn8udX4yWn4Fs\nn8/iwGHy2S5yk3+m475j9hHXU5ZJYdmdJT0l2JbVDxkzbNSN+7cL/HFTGgSlHCjs\npOr6qljEiXkxsciWL8a9MBkTfBy6lbJbO1HhW/39f85HtKjEvWlLC0xn0rCI8vQv\nmf7zpmxo1WSHrwfBOFnubR1lLlis97Qu4UG0TqVMZtF7XhNr9KdHy78F28qnKSdw\nTurXGmQBYQfg02+C1H4UEtt5viRTUVNki3cvFugnDegACBBDq8GZyz6Gp5lrraaO\nknoryzMnfy7ln2nqRyYIXlyRozNnf4jy74mOuw/qOUMYP4ioE5A=\n=KJWK\n-----END PGP SIGNATURE-----", "payload": "tree 638f56f743b932f4748845257841d630b2c044d8\nparent d8ed1b03c202d77248eb0d335062f46026fc29c4\nauthor Aaron Hill <aa1ronham@gmail.com> 1590376075 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1593040091 -0400\n\nImplement associated lang items\n\nFixes #70718\n\nThis commit allows making associated items (e.g. associated functions\nand types) into lang items via the `#[lang]` attribute. This allows such\nitems to be accessed directly, rather than by iterating over the parent\nitem's associated items.\n\nI've added `FnOnce::Output` as a lang item, and updated one old usage to\nuse the new lang item. The remaining uses can be updated separately.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "html_url": "https://github.com/rust-lang/rust/commit/a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ed1b03c202d77248eb0d335062f46026fc29c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4", "html_url": "https://github.com/rust-lang/rust/commit/d8ed1b03c202d77248eb0d335062f46026fc29c4"}], "stats": {"total": 122, "additions": 94, "deletions": 28}, "files": [{"sha": "2cdfee87a3546ab97637817a25f5c35744bc6959", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -224,6 +224,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n #[must_use = \"closures are lazy and do nothing unless called\"]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n+    #[cfg_attr(not(bootstrap), lang = \"fn_once_output\")]\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n     type Output;\n "}, {"sha": "cd6f034f7a5dabce70fd976ca2257838637050a7", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -25,7 +25,7 @@ use lazy_static::lazy_static;\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $variant:ident, $name:expr, $method:ident, $target:path; )*\n+        $( $variant:ident, $name:expr, $method:ident, $target:expr; )*\n     ) => {\n \n         enum_from_u32! {\n@@ -207,6 +207,8 @@ language_item_table! {\n     FnMutTraitLangItem,          \"fn_mut\",             fn_mut_trait,            Target::Trait;\n     FnOnceTraitLangItem,         \"fn_once\",            fn_once_trait,           Target::Trait;\n \n+    FnOnceOutputLangItem,        \"fn_once_output\",     fn_once_output,          Target::AssocTy;\n+\n     FutureTraitLangItem,         \"future_trait\",       future_trait,            Target::Trait;\n     GeneratorStateLangItem,      \"generator_state\",    gen_state,               Target::Enum;\n     GeneratorTraitLangItem,      \"generator\",          gen_trait,               Target::Trait;"}, {"sha": "408f2e8c19a5de1642bf102668cfbb1a069b21c3", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -21,7 +21,10 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n-fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n+pub(crate) fn target_from_impl_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_item: &hir::ImplItem<'_>,\n+) -> Target {\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n         hir::ImplItemKind::Fn(..) => {"}, {"sha": "f4167c8644e6edc36b17ff2ec2d50d591ee564df", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -7,17 +7,19 @@\n //! * Traits that represent operators; e.g., `Add`, `Sub`, `Index`.\n //! * Functions called by the compiler itself.\n \n+use crate::check_attr::target_from_impl_item;\n use crate::weak_lang_items;\n \n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::ty::TyCtxt;\n \n+use rustc_ast::ast::Attribute;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, ITEM_REFS};\n-use rustc_hir::{LangItem, LanguageItems, Target};\n+use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n \n use rustc_middle::ty::query::Providers;\n \n@@ -28,12 +30,37 @@ struct LanguageItemCollector<'tcx> {\n \n impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        if let Some((value, span)) = extract(&item.attrs) {\n-            let actual_target = Target::from_item(item);\n+        self.check_for_lang(Target::from_item(item), item.hir_id, item.attrs)\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n+        self.check_for_lang(\n+            Target::from_trait_item(trait_item),\n+            trait_item.hir_id,\n+            trait_item.attrs,\n+        )\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n+        self.check_for_lang(\n+            target_from_impl_item(self.tcx, impl_item),\n+            impl_item.hir_id,\n+            impl_item.attrs,\n+        )\n+    }\n+}\n+\n+impl LanguageItemCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> LanguageItemCollector<'tcx> {\n+        LanguageItemCollector { tcx, items: LanguageItems::new() }\n+    }\n+\n+    fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId, attrs: &[Attribute]) {\n+        if let Some((value, span)) = extract(&attrs) {\n             match ITEM_REFS.get(&*value.as_str()).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    let def_id = self.tcx.hir().local_def_id(item.hir_id);\n+                    let def_id = self.tcx.hir().local_def_id(hir_id);\n                     self.collect_item(item_index, def_id.to_def_id());\n                 }\n                 // Known lang item with attribute on incorrect target.\n@@ -71,20 +98,6 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n-        // At present, lang items are always items, not trait items.\n-    }\n-\n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n-        // At present, lang items are always items, not impl items.\n-    }\n-}\n-\n-impl LanguageItemCollector<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>) -> LanguageItemCollector<'tcx> {\n-        LanguageItemCollector { tcx, items: LanguageItems::new() }\n-    }\n-\n     fn collect_item(&mut self, item_index: usize, item_def_id: DefId) {\n         // Check for duplicates.\n         if let Some(original_def_id) = self.items.items[item_index] {"}, {"sha": "f71b3fcf129da4e9225f4d67f80e613866ea37d6", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -23,13 +23,13 @@ use crate::traits::error_reporting::InferCtxtExt;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n+use rustc_hir::lang_items::{FnOnceOutputLangItem, FnOnceTraitLangItem, GeneratorTraitLangItem};\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n \n pub use rustc_middle::traits::Reveal;\n@@ -1399,8 +1399,8 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n \n     debug!(\"confirm_callable_candidate({:?},{:?})\", obligation, fn_sig);\n \n-    // the `Output` associated type is declared on `FnOnce`\n     let fn_once_def_id = tcx.require_lang_item(FnOnceTraitLangItem, None);\n+    let fn_once_output_def_id = tcx.require_lang_item(FnOnceOutputLangItem, None);\n \n     let predicate = super::util::closure_trait_ref_and_return_type(\n         tcx,\n@@ -1410,11 +1410,10 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n         flag,\n     )\n     .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {\n-        projection_ty: ty::ProjectionTy::from_ref_and_name(\n-            tcx,\n-            trait_ref,\n-            Ident::with_dummy_span(rustc_hir::FN_OUTPUT_NAME),\n-        ),\n+        projection_ty: ty::ProjectionTy {\n+            substs: trait_ref.substs,\n+            item_def_id: fn_once_output_def_id,\n+        },\n         ty: ret_type,\n     });\n "}, {"sha": "23453d201a72f95ae608580ca49650fb27b09ecb", "filename": "src/test/ui/assoc-lang-items.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Ftest%2Fui%2Fassoc-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Ftest%2Fui%2Fassoc-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-lang-items.rs?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -0,0 +1,21 @@\n+#![feature(lang_items)]\n+\n+trait Foo {\n+    #[lang = \"dummy_lang_item_1\"] //~ ERROR definition\n+    fn foo() {}\n+\n+    #[lang = \"dummy_lang_item_2\"] //~ ERROR definition\n+    fn bar();\n+\n+    #[lang = \"dummy_lang_item_3\"] //~ ERROR definition\n+    type MyType;\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    #[lang = \"dummy_lang_item_4\"] //~ ERROR definition\n+    fn test() {}\n+}\n+\n+fn main() {}"}, {"sha": "040792fb1cd5ff0b54bd0cc93fa416f3ac5a9fbf", "filename": "src/test/ui/assoc-lang-items.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Ftest%2Fui%2Fassoc-lang-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a13d4678feadf03e247ab6aae8279bfab9cdaa6d/src%2Ftest%2Fui%2Fassoc-lang-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-lang-items.stderr?ref=a13d4678feadf03e247ab6aae8279bfab9cdaa6d", "patch": "@@ -0,0 +1,27 @@\n+error[E0522]: definition of an unknown language item: `dummy_lang_item_1`\n+  --> $DIR/assoc-lang-items.rs:4:5\n+   |\n+LL |     #[lang = \"dummy_lang_item_1\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition of unknown language item `dummy_lang_item_1`\n+\n+error[E0522]: definition of an unknown language item: `dummy_lang_item_2`\n+  --> $DIR/assoc-lang-items.rs:7:5\n+   |\n+LL |     #[lang = \"dummy_lang_item_2\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition of unknown language item `dummy_lang_item_2`\n+\n+error[E0522]: definition of an unknown language item: `dummy_lang_item_3`\n+  --> $DIR/assoc-lang-items.rs:10:5\n+   |\n+LL |     #[lang = \"dummy_lang_item_3\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition of unknown language item `dummy_lang_item_3`\n+\n+error[E0522]: definition of an unknown language item: `dummy_lang_item_4`\n+  --> $DIR/assoc-lang-items.rs:17:5\n+   |\n+LL |     #[lang = \"dummy_lang_item_4\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition of unknown language item `dummy_lang_item_4`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0522`."}]}