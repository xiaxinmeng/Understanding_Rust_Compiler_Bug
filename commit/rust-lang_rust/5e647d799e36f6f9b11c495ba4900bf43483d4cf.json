{"sha": "5e647d799e36f6f9b11c495ba4900bf43483d4cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNjQ3ZDc5OWUzNmY2ZjliMTFjNDk1YmE0OTAwYmY0MzQ4M2Q0Y2Y=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T11:15:02Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T07:59:29Z"}, "message": "Fix assumption that monomorphized method's impls are crate-local", "tree": {"sha": "55b1ea22c9d0abea6464e33313054bf46136778b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55b1ea22c9d0abea6464e33313054bf46136778b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e647d799e36f6f9b11c495ba4900bf43483d4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e647d799e36f6f9b11c495ba4900bf43483d4cf", "html_url": "https://github.com/rust-lang/rust/commit/5e647d799e36f6f9b11c495ba4900bf43483d4cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e647d799e36f6f9b11c495ba4900bf43483d4cf/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e6fb4feb4e17dd15394450c96e76b5f801f90d", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e6fb4feb4e17dd15394450c96e76b5f801f90d", "html_url": "https://github.com/rust-lang/rust/commit/75e6fb4feb4e17dd15394450c96e76b5f801f90d"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "45b3355f00909dabddede7aaad2b0541269e998d", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=5e647d799e36f6f9b11c495ba4900bf43483d4cf", "patch": "@@ -671,7 +671,6 @@ fn encode_side_tables_for_ii(ecx: @e::encode_ctxt,\n fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n                              ebml_w: ebml::writer,\n                              id: ast::node_id) {\n-\n     let ccx = ecx.ccx;\n     let tcx = ccx.tcx;\n "}, {"sha": "6a336da1e52f9ff453497626bbdf06e8f86527bc", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=5e647d799e36f6f9b11c495ba4900bf43483d4cf", "patch": "@@ -17,6 +17,7 @@ export get_impls_for_mod;\n export get_iface_methods;\n export get_type;\n export get_impl_iface;\n+export get_impl_method;\n export get_item_path;\n export maybe_get_item_ast;\n \n@@ -121,6 +122,12 @@ fn get_impl_iface(tcx: ty::ctxt, def: ast::def_id)\n     decoder::get_impl_iface(cdata, def.node, tcx)\n }\n \n+fn get_impl_method(cstore: cstore::cstore, def: ast::def_id, mname: str)\n+    -> ast::def_id {\n+    let cdata = cstore::get_crate_data(cstore, def.crate);\n+    decoder::get_impl_method(cdata, def.node, mname)\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "f7120f0efc238fe51e567601fdaf08f58475df86", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=5e647d799e36f6f9b11c495ba4900bf43483d4cf", "patch": "@@ -19,6 +19,7 @@ export get_enum_variants;\n export get_type;\n export get_type_param_count;\n export get_impl_iface;\n+export get_impl_method;\n export lookup_def;\n export lookup_item_name;\n export get_impl_iface;\n@@ -256,6 +257,18 @@ fn get_impl_iface(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     item_impl_iface(lookup_item(id, cdata.data), tcx, cdata)\n }\n \n+fn get_impl_method(cdata: cmd, id: ast::node_id, name: str) -> ast::def_id {\n+    let items = ebml::get_doc(ebml::new_doc(cdata.data), tag_items);\n+    let found = none;\n+    ebml::tagged_docs(find_item(id, items), tag_item_method) {|mid|\n+        let m_did = parse_def_id(ebml::doc_data(mid));\n+        if item_name(find_item(m_did.node, items)) == name {\n+            found = some(translate_def_id(cdata, m_did));\n+        }\n+    }\n+    option::get(found)\n+}\n+\n fn get_symbol(data: @[u8], id: ast::node_id) -> str {\n     ret item_symbol(lookup_item(id, data));\n }"}, {"sha": "38509ec702469eb1899ac37fc4c288da4a58732e", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=5e647d799e36f6f9b11c495ba4900bf43483d4cf", "patch": "@@ -468,7 +468,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n             encode_name(ebml_w, m.ident);\n             encode_symbol(ecx, ebml_w, m.id);\n             encode_path(ebml_w, impl_path, ast_map::path_name(m.ident));\n-            if should_inline(m.attrs) {\n+            if tps.len() > 0u || m.tps.len() > 0u || should_inline(m.attrs) {\n                 astencode::encode_inlined_item(\n                     ecx, ebml_w, impl_path,\n                     ii_method(local_def(item.id), m));"}, {"sha": "2382e731fabce81bbf306c9d8a6a7f1cbea33c6d", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e647d799e36f6f9b11c495ba4900bf43483d4cf/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=5e647d799e36f6f9b11c495ba4900bf43483d4cf", "patch": "@@ -4,7 +4,8 @@ import common::*;\n import type_of::*;\n import build::*;\n import driver::session::session;\n-import syntax::{ast, ast_util};\n+import syntax::ast;\n+import syntax::ast_util::local_def;\n import metadata::csearch;\n import back::{link, abi};\n import lib::llvm::llvm;\n@@ -144,25 +145,29 @@ fn trans_vtable_callee(bcx: block, env: callee_env, dict: ValueRef,\n      generic: generic}\n }\n \n+fn method_with_name(ccx: crate_ctxt, impl_id: ast::def_id,\n+                    name: ast::ident) -> ast::def_id {\n+    if impl_id.crate == ast::local_crate {\n+        alt check ccx.tcx.items.get(impl_id.node) {\n+          ast_map::node_item(@{node: ast::item_impl(_, _, _, ms), _}, _) {\n+            local_def(option::get(vec::find(ms, {|m| m.ident == name})).id)\n+          }\n+        }\n+    } else {\n+        csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n+    }\n+}\n+\n fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n                               base: @ast::expr, iface_id: ast::def_id,\n                               n_method: uint, n_param: uint, n_bound: uint,\n                               substs: param_substs) -> lval_maybe_callee {\n     alt find_dict_in_fn_ctxt(substs, n_param, n_bound) {\n       typeck::dict_static(impl_did, tys, sub_origins) {\n         let tcx = bcx.tcx();\n-        if impl_did.crate != ast::local_crate {\n-            ret trans_param_callee(bcx, callee_id, base, iface_id,\n-                                   n_method, n_param, n_bound);\n-        }\n         let mname = ty::iface_methods(tcx, iface_id)[n_method].ident;\n-        let mth = alt check tcx.items.get(impl_did.node) {\n-          ast_map::node_item(@{node: ast::item_impl(_, _, _, ms), _}, _) {\n-            option::get(vec::find(ms, {|m| m.ident == mname}))\n-          }\n-        };\n-        ret trans_static_callee(bcx, callee_id, base,\n-                                ast_util::local_def(mth.id),\n+        let mth_id = method_with_name(bcx.ccx(), impl_did, mname);\n+        ret trans_static_callee(bcx, callee_id, base, mth_id,\n                                 some((tys, sub_origins)));\n       }\n       typeck::dict_iface(iid) {\n@@ -378,7 +383,7 @@ fn trans_iface_wrapper(ccx: @crate_ctxt, pt: path, m: ty::method,\n \n fn trans_iface_vtable(ccx: @crate_ctxt, pt: path, it: @ast::item) {\n     let new_pt = pt + [path_name(it.ident), path_name(int::str(it.id))];\n-    let i_did = ast_util::local_def(it.id), i = 0u;\n+    let i_did = local_def(it.id), i = 0u;\n     let ptrs = vec::map(*ty::iface_methods(ccx.tcx, i_did), {|m|\n         let w = trans_iface_wrapper(ccx, new_pt + [path_name(m.ident)], m, i);\n         i += 1u;"}]}