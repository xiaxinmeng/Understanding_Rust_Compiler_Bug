{"sha": "9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliM2M2M2JkZDVlZjlkNzcyZTNjNzQwNjE3NjFlNWMwYjMyNmY5YzA=", "commit": {"author": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2014-03-07T23:13:54Z"}, "committer": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2014-03-08T08:10:12Z"}, "message": "doc: uniform std::char doc-strings\n\nUniform and beautify doc-string for current rustdoc output.\n\nSigned-off-by: Luca Bruno <lucab@debian.org>", "tree": {"sha": "81065582ce797276f34f904f9c5fbb654f01da69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81065582ce797276f34f904f9c5fbb654f01da69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0", "html_url": "https://github.com/rust-lang/rust/commit/9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0/comments", "author": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7c313047b40f8d1a5cedc8df6a64339f6de01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7c313047b40f8d1a5cedc8df6a64339f6de01e", "html_url": "https://github.com/rust-lang/rust/commit/af7c313047b40f8d1a5cedc8df6a64339f6de01e"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "ce9336d4909ac44e803aaa611c0f8d9f387d0eae", "filename": "src/libstd/char.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=9b3c63bdd5ef9d772e3c74061761e5c0b326f9c0", "patch": "@@ -80,7 +80,7 @@ static TAG_FOUR_B: uint = 240u;\n /// The highest valid code point\n pub static MAX: char = '\\U0010ffff';\n \n-/// Convert from `u32` to a `char`.\n+/// Converts from `u32` to a `char`\n #[inline]\n pub fn from_u32(i: u32) -> Option<char> {\n     // catch out-of-bounds and surrogates\n@@ -91,31 +91,34 @@ pub fn from_u32(i: u32) -> Option<char> {\n     }\n }\n \n-/// Returns whether the specified `char` is considered a unicode alphabetic\n-/// scalar value\n+/// Returns whether the specified `char` is considered a Unicode alphabetic\n+/// code point\n pub fn is_alphabetic(c: char) -> bool   { derived_property::Alphabetic(c) }\n #[allow(missing_doc)]\n pub fn is_XID_start(c: char) -> bool    { derived_property::XID_Start(c) }\n #[allow(missing_doc)]\n pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n \n ///\n-/// Indicates whether a `char` is in lower case, defined\n-/// in terms of the Unicode Derived Core Property 'Lowercase'.\n+/// Indicates whether a `char` is in lower case\n+///\n+/// This is defined according to the terms of the Unicode Derived Core Property 'Lowercase'.\n ///\n #[inline]\n pub fn is_lowercase(c: char) -> bool { derived_property::Lowercase(c) }\n \n ///\n-/// Indicates whether a `char` is in upper case, defined\n-/// in terms of the Unicode Derived Core Property 'Uppercase'.\n+/// Indicates whether a `char` is in upper case\n+///\n+/// This is defined according to the terms of the Unicode Derived Core Property 'Uppercase'.\n ///\n #[inline]\n pub fn is_uppercase(c: char) -> bool { derived_property::Uppercase(c) }\n \n ///\n-/// Indicates whether a `char` is whitespace. Whitespace is defined in\n-/// terms of the Unicode Property 'White_Space'.\n+/// Indicates whether a `char` is whitespace\n+///\n+/// Whitespace is defined in terms of the Unicode Property 'White_Space'.\n ///\n #[inline]\n pub fn is_whitespace(c: char) -> bool {\n@@ -126,9 +129,10 @@ pub fn is_whitespace(c: char) -> bool {\n }\n \n ///\n-/// Indicates whether a `char` is alphanumeric. Alphanumericness is\n-/// defined in terms of the Unicode General Categories 'Nd', 'Nl', 'No'\n-/// and the Derived Core Property 'Alphabetic'.\n+/// Indicates whether a `char` is alphanumeric\n+///\n+/// Alphanumericness is defined in terms of the Unicode General Categories\n+/// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n ///\n #[inline]\n pub fn is_alphanumeric(c: char) -> bool {\n@@ -139,8 +143,9 @@ pub fn is_alphanumeric(c: char) -> bool {\n }\n \n ///\n-/// Indicates whether a `char` is a control code point. Control\n-/// code points are defined in terms of the Unicode General Category\n+/// Indicates whether a `char` is a control code point\n+///\n+/// Control code points are defined in terms of the Unicode General Category\n /// 'Cc'.\n ///\n #[inline]\n@@ -155,7 +160,8 @@ pub fn is_digit(c: char) -> bool {\n }\n \n ///\n-/// Checks if a `char` parses as a numeric digit in the given radix.\n+/// Checks if a `char` parses as a numeric digit in the given radix\n+///\n /// Compared to `is_digit()`, this function only recognizes the\n /// characters `0-9`, `a-z` and `A-Z`.\n ///\n@@ -181,7 +187,7 @@ pub fn is_digit_radix(c: char, radix: uint) -> bool {\n }\n \n ///\n-/// Convert a `char` to the corresponding digit.\n+/// Converts a `char` to the corresponding digit\n ///\n /// # Return value\n ///\n@@ -210,7 +216,7 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n }\n \n ///\n-/// Converts a number to the character representing it.\n+/// Converts a number to the character representing it\n ///\n /// # Return value\n ///\n@@ -268,7 +274,7 @@ fn decompose_hangul(s: char, f: |char|) {\n     }\n }\n \n-/// Returns the canonical decomposition of a character.\n+/// Returns the canonical decomposition of a character\n pub fn decompose_canonical(c: char, f: |char|) {\n     if (c as uint) < S_BASE || (c as uint) >= (S_BASE + S_COUNT) {\n         decompose::canonical(c, f);\n@@ -277,7 +283,7 @@ pub fn decompose_canonical(c: char, f: |char|) {\n     }\n }\n \n-/// Returns the compatibility decomposition of a character.\n+/// Returns the compatibility decomposition of a character\n pub fn decompose_compatible(c: char, f: |char|) {\n     if (c as uint) < S_BASE || (c as uint) >= (S_BASE + S_COUNT) {\n         decompose::compatibility(c, f);\n@@ -287,7 +293,7 @@ pub fn decompose_compatible(c: char, f: |char|) {\n }\n \n ///\n-/// Return the hexadecimal unicode escape of a `char`.\n+/// Returns the hexadecimal Unicode escape of a `char`\n ///\n /// The rules are as follows:\n ///\n@@ -315,7 +321,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n }\n \n ///\n-/// Return a 'default' ASCII and C++11-like literal escape of a `char`.\n+/// Returns a 'default' ASCII and C++11-like literal escape of a `char`\n ///\n /// The default is chosen with a bias toward producing literals that are\n /// legal in a variety of languages, including C++11 and similar C-family\n@@ -374,8 +380,9 @@ pub trait Char {\n     fn escape_default(&self, f: |char|);\n     fn len_utf8_bytes(&self) -> uint;\n \n-    /// Encodes this `char` as utf-8 into the provided byte-buffer. The\n-    /// buffer must be at least 4 bytes long or a runtime failure will occur.\n+    /// Encodes this `char` as utf-8 into the provided byte-buffer\n+    ///\n+    /// The buffer must be at least 4 bytes long or a runtime failure will occur.\n     ///\n     /// This will then return the number of characters written to the slice.\n     fn encode_utf8(&self, dst: &mut [u8]) -> uint;"}]}