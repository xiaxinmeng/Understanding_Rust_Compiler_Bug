{"sha": "5883d3de9c5536a3bdd69959fbf6e74ebccda729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODNkM2RlOWM1NTM2YTNiZGQ2OTk1OWZiZjZlNzRlYmNjZGE3Mjk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-09T23:11:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-09T23:11:15Z"}, "message": "Move `@has` checks closer to corresponding doc comments", "tree": {"sha": "28cdec9ab5de3e5032d69bf5eaf8a2b1abe3fcaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28cdec9ab5de3e5032d69bf5eaf8a2b1abe3fcaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5883d3de9c5536a3bdd69959fbf6e74ebccda729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5883d3de9c5536a3bdd69959fbf6e74ebccda729", "html_url": "https://github.com/rust-lang/rust/commit/5883d3de9c5536a3bdd69959fbf6e74ebccda729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5883d3de9c5536a3bdd69959fbf6e74ebccda729/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "html_url": "https://github.com/rust-lang/rust/commit/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "7d7289437ff8afe411d27cc9405abc12258fed2d", "filename": "src/test/rustdoc/intra-doc-link-generic-params.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5883d3de9c5536a3bdd69959fbf6e74ebccda729/src%2Ftest%2Frustdoc%2Fintra-doc-link-generic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5883d3de9c5536a3bdd69959fbf6e74ebccda729/src%2Ftest%2Frustdoc%2Fintra-doc-link-generic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-generic-params.rs?ref=5883d3de9c5536a3bdd69959fbf6e74ebccda729", "patch": "@@ -5,20 +5,38 @@\n //! Here's a link to [`Vec<T>`] and one to [`Box<Vec<Option<T>>>`].\n //! Here's a link to [`Iterator<Box<T>>::Item`].\n //!\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\"]' 'Vec<T>'\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\"]' 'Box<Vec<Option<T>>>'\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\"]' 'Iterator<Box<T>>::Item'\n+\n //! And what about a link to [just `Option`](Option) and, [with the generic, `Option<T>`](Option<T>)?\n //!\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\"]' 'just Option'\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\"]' 'with the generic, Option<T>'\n+\n //! We should also try linking to [`Result<T, E>`]; it has *two* generics!\n //!\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\"]' 'Result<T, E>'\n+\n //! Now let's test a trickier case: [`Vec::<T>::new`], or you could write it\n //! [with parentheses as `Vec::<T>::new()`][Vec::<T>::new()].\n //! And what about something even harder? That would be [`Vec::<Box<T>>::new()`].\n //!\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<T>::new'\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'with parentheses as Vec::<T>::new()'\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<Box<T>>::new()'\n+\n //! This is also pretty tricky: [`TypeId::of::<String>()`].\n //! And this too: [`Vec::<std::error::Error>::len`].\n //!\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html#method.of\"]' 'TypeId::of::<String>()'\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\"]' 'Vec::<std::error::Error>::len'\n+\n //! We unofficially and implicitly support things that aren't valid in the actual Rust syntax, like\n //! [`Box::<T>new()`]. We may not support them in the future!\n //!\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.new\"]' 'Box::<T>new()'\n+\n //! These will be resolved as regular links:\n //! - [`this is <invalid syntax> first`](https://www.rust-lang.org)\n //! - [`this is <invalid syntax> twice`]\n@@ -30,21 +48,7 @@\n //! [`this is <invalid syntax> twice`]: https://www.rust-lang.org\n //! [rlo]: https://www.rust-lang.org\n //! [c > d]: https://www.rust-lang.org\n-\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\"]' 'Vec<T>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\"]' 'Box<Vec<Option<T>>>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\"]' 'Iterator<Box<T>>::Item'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\"]' 'just Option'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\"]' 'with the generic, Option<T>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\"]' 'Result<T, E>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<T>::new'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'with parentheses as Vec::<T>::new()'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<Box<T>>::new()'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html#method.of\"]' 'TypeId::of::<String>()'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\"]' 'Vec::<std::error::Error>::len'\n-\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.new\"]' 'Box::<T>new()'\n-\n+//!\n // @has foo/index.html '//a[@href=\"https://www.rust-lang.org\"]' 'this is <invalid syntax> first'\n // @has foo/index.html '//a[@href=\"https://www.rust-lang.org\"]' 'this is <invalid syntax> twice'\n // @has foo/index.html '//a[@href=\"https://www.rust-lang.org\"]' '<invalid syntax> thrice'"}]}