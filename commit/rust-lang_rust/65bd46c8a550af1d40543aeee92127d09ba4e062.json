{"sha": "65bd46c8a550af1d40543aeee92127d09ba4e062", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmQ0NmM4YTU1MGFmMWQ0MDU0M2FlZWU5MjEyN2QwOWJhNGUwNjI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-26T19:12:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-27T21:10:54Z"}, "message": "rustc: more pattern cleanup", "tree": {"sha": "d9cbe5cdf55e7b3c4989fb336a4b99a981a42f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9cbe5cdf55e7b3c4989fb336a4b99a981a42f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bd46c8a550af1d40543aeee92127d09ba4e062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bd46c8a550af1d40543aeee92127d09ba4e062", "html_url": "https://github.com/rust-lang/rust/commit/65bd46c8a550af1d40543aeee92127d09ba4e062", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bd46c8a550af1d40543aeee92127d09ba4e062/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce5ee86bc1264fe17f96606d648409b9508e4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5ee86bc1264fe17f96606d648409b9508e4a3", "html_url": "https://github.com/rust-lang/rust/commit/5ce5ee86bc1264fe17f96606d648409b9508e4a3"}], "stats": {"total": 153, "additions": 74, "deletions": 79}, "files": [{"sha": "47ea2a02b60312cab31a276c12557252198d6bb0", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -223,7 +223,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n         map_struct_def(struct_def, node_item(i, item_path), i.ident, i.id, cx,\n                        v);\n       }\n-      item_trait(tps, traits, methods) => {\n+      item_trait(_, traits, methods) => {\n         // Map trait refs to their parent classes. This is\n         // so we can find the self_ty\n         for traits.each |p| {\n@@ -318,16 +318,16 @@ fn node_id_to_str(map: map, id: node_id, itr: ident_interner) -> ~str {\n         fmt!(\"foreign item %s with abi %? (id=%?)\",\n              path_ident_to_str(*path, item.ident, itr), abi, id)\n       }\n-      Some(node_method(m, impl_did, path)) => {\n+      Some(node_method(m, _, path)) => {\n         fmt!(\"method %s in %s (id=%?)\",\n              *itr.get(m.ident), path_to_str(*path, itr), id)\n       }\n-      Some(node_trait_method(tm, impl_did, path)) => {\n+      Some(node_trait_method(tm, _, path)) => {\n         let m = ast_util::trait_method_to_ty_method(*tm);\n         fmt!(\"method %s in %s (id=%?)\",\n              *itr.get(m.ident), path_to_str(*path, itr), id)\n       }\n-      Some(node_variant(variant, def_id, path)) => {\n+      Some(node_variant(variant, _, path)) => {\n         fmt!(\"variant %s in %s (id=%?)\",\n              *itr.get(variant.node.name), path_to_str(*path, itr), id)\n       }"}, {"sha": "7c1be7b42a7edb148b83dff3dc4c9ec5a0d4a83d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -197,7 +197,7 @@ fn expand_item_mac(exts: hashmap<~str, syntax_extension>,\n                    cx: ext_ctxt, &&it: @ast::item,\n                    fld: ast_fold) -> Option<@ast::item> {\n     match it.node {\n-      item_mac({node: mac_invoc_tt(pth, tts), span}) => {\n+      item_mac({node: mac_invoc_tt(pth, tts), _}) => {\n         let extname = cx.parse_sess().interner.get(pth.idents[0]);\n         match exts.find(*extname) {\n           None => {"}, {"sha": "f7cc1a88620de06483408b5ad065cc26eef6d08e", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -504,7 +504,7 @@ fn p_t_s_r_path(cx: ext_ctxt, p: @path, s: selector, b: binders) {\n       Some(p_id) => {\n         fn select(cx: ext_ctxt, m: matchable) -> match_result {\n             return match m {\n-                  match_expr(e) => Some(leaf(specialize_match(m))),\n+                  match_expr(*) => Some(leaf(specialize_match(m))),\n                   _ => cx.bug(~\"broken traversal in p_t_s_r\")\n                 }\n         }\n@@ -646,7 +646,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n             match elts[0u].node {\n               expr_mac(mac) => {\n                 match mac.node {\n-                  mac_invoc(pth, invoc_arg, body) => {\n+                  mac_invoc(pth, invoc_arg, _) => {\n                     match path_to_ident(pth) {\n                       Some(id) => {\n                         let id_str = cx.str_of(id);"}, {"sha": "be770281faa8e9e33ee0c8a4c1362c279053d97f", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -378,7 +378,7 @@ impl printer {\n         if !self.scan_stack_empty {\n             let x = self.scan_top();\n             match copy self.token[x] {\n-              BEGIN(b) => {\n+              BEGIN(_) => {\n                 if k > 0 {\n                     self.size[self.scan_pop()] = self.size[x] +\n                         self.right_total;"}, {"sha": "bc4dd8dccf35426a9daffd9546f838fde14d2e4b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -250,7 +250,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n \n fn visit_foreign_item<E>(ni: @foreign_item, e: E, v: vt<E>) {\n     match ni.node {\n-      foreign_item_fn(fd, purity, tps) => {\n+      foreign_item_fn(fd, _, tps) => {\n         v.visit_ty_params(tps, e, v);\n         visit_fn_decl(fd, e, v);\n       }"}, {"sha": "c9e693e47bceab3d3bdf9e0d8bee746a4d83e67e", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -410,7 +410,7 @@ impl gather_loan_ctxt {\n                   arm_id: ast::node_id, alt_id: ast::node_id) {\n         do self.bccx.cat_pattern(discr_cmt, root_pat) |cmt, pat| {\n             match pat.node {\n-              ast::pat_ident(bm, id, o_pat) if !self.pat_is_variant(pat) => {\n+              ast::pat_ident(bm, _, _) if !self.pat_is_variant(pat) => {\n                 match bm {\n                   ast::bind_by_value | ast::bind_by_move => {\n                     // copying does not borrow anything, so no check"}, {"sha": "15e307b6a93c83d671268315c6867a91d3627305", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -113,9 +113,9 @@ impl loan_ctxt {\n             // then the memory is freed.\n             self.loan_unstable_deref(cmt, cmt_base, req_mutbl)\n           }\n-          cat_deref(cmt1, _, unsafe_ptr) |\n-          cat_deref(cmt1, _, gc_ptr) |\n-          cat_deref(cmt1, _, region_ptr(_)) => {\n+          cat_deref(_, _, unsafe_ptr) |\n+          cat_deref(_, _, gc_ptr) |\n+          cat_deref(_, _, region_ptr(_)) => {\n             // Aliased data is simply not lendable.\n             self.bccx.tcx.sess.span_bug(\n                 cmt.span,"}, {"sha": "7ce87a31b394ca1846b39f39729fee28072d6881", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -16,7 +16,7 @@ impl preserve_condition {\n     fn combine(pc: preserve_condition) -> preserve_condition {\n         match self {\n           pc_ok => {pc}\n-          pc_if_pure(e) => {self}\n+          pc_if_pure(_) => {self}\n         }\n     }\n }"}, {"sha": "e6c990f2ab67649e89f2c08668bf59895b9c998d", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -351,7 +351,7 @@ fn specialize(tcx: ty::ctxt, r: ~[@pat], ctor_id: ctor, arity: uint,\n         // Grab the class data that we care about.\n         let class_fields, class_id;\n         match ty::get(left_ty).struct {\n-            ty::ty_class(cid, substs) => {\n+            ty::ty_class(cid, _) => {\n                 class_id = cid;\n                 class_fields = ty::lookup_class_fields(tcx, class_id);\n             }\n@@ -414,7 +414,7 @@ fn check_local(tcx: ty::ctxt, loc: @local, &&s: (), v: visit::vt<()>) {\n \n fn is_refutable(tcx: ty::ctxt, pat: @pat) -> bool {\n     match tcx.def_map.find(pat.id) {\n-      Some(def_variant(enum_id, var_id)) => {\n+      Some(def_variant(enum_id, _)) => {\n         if vec::len(*ty::enum_variants(tcx, enum_id)) != 1u {\n             return true;\n         }"}, {"sha": "881716f7fb848002e69010e40e2a3ba4b51c2dfe", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -179,7 +179,7 @@ fn check_item_recursion(sess: session, ast_map: ast_map::map,\n \n     fn visit_expr(e: @expr, &&env: env, v: visit::vt<env>) {\n         match e.node {\n-          expr_path(path) => {\n+          expr_path(*) => {\n             match env.def_map.find(e.id) {\n               Some(def_const(def_id)) => {\n                 match env.ast_map.get(def_id.node) {"}, {"sha": "f5565de7d942f8f603854c7fe20132badd6b39c8", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -417,7 +417,7 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n       either::Right(ast::foreign_abi_rust_intrinsic) => {\n         for nmod.items.each |ni| {\n             match ni.node {\n-              ast::foreign_item_fn(decl, _, tps) => {\n+              ast::foreign_item_fn(decl, _, _) => {\n                 check_foreign_fn(cx, it.id, decl);\n               }\n               ast::foreign_item_const(*) => {}  // XXX: Not implemented.\n@@ -434,7 +434,7 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n             match s.node {\n               ast::stmt_semi(@{id: id,\n                                callee_id: _,\n-                               node: ast::expr_path(@path),\n+                               node: ast::expr_path(_),\n                                span: _}, _) => {\n                 cx.sess.span_lint(\n                     path_statement, id, it.id,"}, {"sha": "bffae2944f7f234f589019a135b5d3900e3f570c", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -338,18 +338,13 @@ impl IrMaps {\n         let vk = self.var_kinds[*var];\n         debug!(\"Node %d is a last use of variable %?\", expr_id, vk);\n         match vk {\n-          Arg(id, name, by_move) |\n-          Arg(id, name, by_copy) |\n-          Local(LocalInfo {id:id, ident:name,\n-                           kind: FromLetNoInitializer, _}) |\n-          Local(LocalInfo {id:id, ident:name,\n-                           kind: FromLetWithInitializer, _}) |\n-          Local(LocalInfo {id:id, ident:name,\n-                           kind: FromMatch(bind_by_value), _}) |\n-          Local(LocalInfo {id:id, ident:name,\n-                           kind: FromMatch(bind_by_ref(_)), _}) |\n-          Local(LocalInfo {id:id, ident:name,\n-                           kind: FromMatch(bind_by_move), _}) => {\n+          Arg(id, _, by_move) |\n+          Arg(id, _, by_copy) |\n+          Local(LocalInfo {id: id, kind: FromLetNoInitializer, _}) |\n+          Local(LocalInfo {id: id, kind: FromLetWithInitializer, _}) |\n+          Local(LocalInfo {id: id, kind: FromMatch(bind_by_value), _}) |\n+          Local(LocalInfo {id: id, kind: FromMatch(bind_by_ref(_)), _}) |\n+          Local(LocalInfo {id: id, kind: FromMatch(bind_by_move), _}) => {\n             let v = match self.last_use_map.find(expr_id) {\n               Some(v) => v,\n               None => {\n@@ -1493,7 +1488,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n-      expr_fn(_, _, _, cap_clause) | expr_fn_block(_, _, cap_clause) => {\n+      expr_fn(*) | expr_fn_block(*) => {\n         let caps = (*self.ir).captures(expr);\n         for (*caps).each |cap| {\n             let var = self.variable_from_rdef(cap.rv, expr.span);"}, {"sha": "d53544c2573c348390a981fdc4c0f8f84cd6ada5", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -378,7 +378,7 @@ impl &mem_categorization_ctxt {\n               mutbl:m_imm, ty:expr_ty}\n           }\n \n-          ast::def_upvar(upvid, inner, fn_node_id, _) => {\n+          ast::def_upvar(_, inner, fn_node_id, _) => {\n             let ty = ty::node_id_to_type(self.tcx, fn_node_id);\n             let proto = ty::ty_fn_proto(ty);\n             match proto {\n@@ -856,7 +856,7 @@ fn field_mutbl(tcx: ty::ctxt,\n             }\n         }\n       }\n-      ty::ty_class(did, substs) => {\n+      ty::ty_class(did, _) => {\n         for ty::lookup_class_fields(tcx, did).each |fld| {\n             if fld.ident == f_name {\n                 let m = match fld.mutability {"}, {"sha": "d83fc7a244c7fa67c7fe2388c38a1b387df18789", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -529,7 +529,7 @@ struct NameBindings {\n \n     fn span_for_namespace(namespace: Namespace) -> Option<span> {\n         match self.def_for_namespace(namespace) {\n-          Some(d) => {\n+          Some(_) => {\n             match namespace {\n               TypeNS   => self.type_span,\n               ValueNS  => self.value_span,\n@@ -866,7 +866,7 @@ struct Resolver {\n \n                 visit_mod(module_, sp, item.id, new_parent, visitor);\n             }\n-            item_foreign_mod(foreign_module) => {\n+            item_foreign_mod(*) => {\n               let (name_bindings, new_parent) = self.add_child(atom, parent,\n                                                            ~[ModuleNS], sp);\n \n@@ -891,7 +891,7 @@ struct Resolver {\n                      def_const(local_def(item.id)),\n                      sp);\n             }\n-            item_fn(decl, purity, _, _) => {\n+            item_fn(_, purity, _, _) => {\n               let (name_bindings, new_parent) = self.add_child(atom, parent,\n                                                         ~[ValueNS], sp);\n \n@@ -1217,7 +1217,7 @@ struct Resolver {\n             self.add_child(name, parent, ~[ValueNS], foreign_item.span);\n \n         match foreign_item.node {\n-            foreign_item_fn(fn_decl, purity, type_parameters) => {\n+            foreign_item_fn(_, purity, type_parameters) => {\n                 let def = def_fn(local_def(foreign_item.id), purity);\n                 (*name_bindings).define_value(Public, def, foreign_item.span);\n \n@@ -1227,7 +1227,7 @@ struct Resolver {\n                     visit_foreign_item(foreign_item, new_parent, visitor);\n                 }\n             }\n-            foreign_item_const(item_type) => {\n+            foreign_item_const(*) => {\n                 let def = def_const(local_def(foreign_item.id));\n                 (*name_bindings).define_value(Public, def, foreign_item.span);\n \n@@ -1319,8 +1319,8 @@ struct Resolver {\n               }\n             }\n           }\n-          def_fn(def_id, _) | def_static_method(def_id, _) |\n-          def_const(def_id) | def_variant(_, def_id) => {\n+          def_fn(*) | def_static_method(*) | def_const(*) |\n+          def_variant(*) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building value %s\", final_ident);\n             (*child_name_bindings).define_value(Public, def, dummy_sp());\n@@ -2710,7 +2710,7 @@ struct Resolver {\n                                         body_id);\n                     }\n                 }\n-                MethodRibKind(item_id, method_id) => {\n+                MethodRibKind(item_id, _) => {\n                   // If the def is a ty param, and came from the parent\n                   // item, it's ok\n                   match def {\n@@ -2954,7 +2954,7 @@ struct Resolver {\n                                                        visitor);\n                                 }\n                             }\n-                            foreign_item_const(item_type) => {\n+                            foreign_item_const(_) => {\n                                 visit_foreign_item(foreign_item, (),\n                                                    visitor);\n                             }\n@@ -3033,7 +3033,7 @@ struct Resolver {\n         f();\n \n         match type_parameters {\n-            HasTypeParameters(type_parameters, _, _, _) => {\n+            HasTypeParameters(*) => {\n                 (*self.type_ribs).pop();\n             }\n \n@@ -4228,7 +4228,7 @@ struct Resolver {\n                                               fmt!(\"use of undeclared label \\\n                                                    `%s`\", self.session.str_of(\n                                                   label))),\n-                    Some(dl_def(def @ def_label(id))) =>\n+                    Some(dl_def(def @ def_label(_))) =>\n                         self.record_def(expr.id, def),\n                     Some(_) =>\n                         self.session.span_bug(expr.span,\n@@ -4514,7 +4514,7 @@ struct Resolver {\n                     atoms.push(name);\n                     current_module = module_;\n                 }\n-                BlockParentLink(module_, node_id) => {\n+                BlockParentLink(module_, _) => {\n                     atoms.push(syntax::parse::token::special_idents::opaque);\n                     current_module = module_;\n                 }\n@@ -4555,7 +4555,7 @@ struct Resolver {\n             let mut module_repr;\n             match (*import_resolution).target_for_namespace(ModuleNS) {\n                 None => { module_repr = ~\"\"; }\n-                Some(target) => {\n+                Some(_) => {\n                     module_repr = ~\" module:?\";\n                     // XXX\n                 }\n@@ -4564,7 +4564,7 @@ struct Resolver {\n             let mut value_repr;\n             match (*import_resolution).target_for_namespace(ValueNS) {\n                 None => { value_repr = ~\"\"; }\n-                Some(target) => {\n+                Some(_) => {\n                     value_repr = ~\" value:?\";\n                     // XXX\n                 }\n@@ -4573,7 +4573,7 @@ struct Resolver {\n             let mut type_repr;\n             match (*import_resolution).target_for_namespace(TypeNS) {\n                 None => { type_repr = ~\"\"; }\n-                Some(target) => {\n+                Some(_) => {\n                     type_repr = ~\" type:?\";\n                     // XXX\n                 }"}, {"sha": "a3d388d10faabe8fa889fa32115fe706841cde4a", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -2621,15 +2621,15 @@ fn unify_mode(cx: ctxt, modes: expected_found<ast::mode>)\n       (m1, m2) if (m1 == m2) => {\n         result::ok(m1)\n       }\n-      (ast::infer(id1), ast::infer(id2)) => {\n+      (ast::infer(_), ast::infer(id2)) => {\n         cx.inferred_modes.insert(id2, m1);\n         result::ok(m1)\n       }\n       (ast::infer(id), m) | (m, ast::infer(id)) => {\n         cx.inferred_modes.insert(id, m);\n         result::ok(m1)\n       }\n-      (m1, m2) => {\n+      (_, _) => {\n         result::err(terr_mode_mismatch(modes))\n       }\n     }\n@@ -3325,7 +3325,7 @@ fn normalize_ty(cx: ctxt, t: t) -> t {\n             // This type has a vstore. Get rid of it\n             mk_estr(cx, normalize_vstore(vstore)),\n \n-        ty_rptr(region, mt) =>\n+        ty_rptr(_, mt) =>\n             // This type has a region. Get rid of it\n             mk_rptr(cx, re_static, normalize_mt(cx, mt)),\n "}, {"sha": "de6f578666f112f1906ef22982614739d664de29", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -254,8 +254,8 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n     let tcx = ccx.tcx;\n     let main_t = ty::node_id_to_type(tcx, main_id);\n     match ty::get(main_t).struct {\n-      ty::ty_fn({purity: ast::impure_fn, proto: ty::proto_bare, bounds,\n-                 inputs, output, ret_style: ast::return_val}) => {\n+      ty::ty_fn({purity: ast::impure_fn, proto: ty::proto_bare,\n+                 inputs, output, ret_style: ast::return_val, _}) => {\n         match tcx.items.find(main_id) {\n          Some(ast_map::node_item(it,_)) => {\n              match it.node {"}, {"sha": "012e384edb13dc9dc476f7019c55e82a599e1775", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -478,10 +478,10 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n       ast::item_enum(enum_definition, _) => {\n         check_enum_variants(ccx, it.span, enum_definition.variants, it.id);\n       }\n-      ast::item_fn(decl, _, tps, body) => {\n+      ast::item_fn(decl, _, _, body) => {\n         check_bare_fn(ccx, decl, body, it.id, None);\n       }\n-      ast::item_impl(tps, _, ty, ms) => {\n+      ast::item_impl(_, _, ty, ms) => {\n         let rp = ccx.tcx.region_paramd_items.find(it.id);\n         debug!(\"item_impl %s with id %d rp %?\",\n                ccx.tcx.sess.str_of(it.ident), it.id, rp);\n@@ -493,7 +493,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n       ast::item_trait(_, _, trait_methods) => {\n         for trait_methods.each |trait_method| {\n             match trait_method {\n-              required(ty_m) => {\n+              required(*) => {\n                 // Nothing to do, since required methods don't have\n                 // bodies to check.\n               }\n@@ -734,7 +734,7 @@ fn do_autoderef(fcx: @fn_ctxt, sp: span, t: ty::t) -> ty::t {\n               _ => ()\n             }\n           }\n-          ty::ty_enum(did, substs) => {\n+          ty::ty_enum(did, _) => {\n             // Watch out for a type like `enum t = @t`.  Such a type would\n             // otherwise infinitely auto-deref.  This is the only autoderef\n             // loop that needs to be concerned with this, as an error will be\n@@ -761,7 +761,7 @@ fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n \n     match lit.node {\n-      ast::lit_str(s) => ty::mk_estr(tcx, ty::vstore_slice(ty::re_static)),\n+      ast::lit_str(*) => ty::mk_estr(tcx, ty::vstore_slice(ty::re_static)),\n       ast::lit_int(_, t) => ty::mk_mach_int(tcx, t),\n       ast::lit_uint(_, t) => ty::mk_mach_uint(tcx, t),\n       ast::lit_int_unsuffixed(_) => {\n@@ -898,7 +898,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                     |_br| fcx.infcx.next_region_var(sp,\n                                                     call_expr_id)).fn_ty\n               }\n-              sty => {\n+              _ => {\n                 // I would like to make this span_err, but it's\n                 // really hard due to the way that expr_bind() is\n                 // written.\n@@ -1146,7 +1146,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // supply the do keyword.  Let's be more helpful in that situation.\n         if op == ast::or {\n           match ty::get(lhs_resolved_t).struct {\n-            ty::ty_fn(f) => {\n+            ty::ty_fn(_) => {\n               tcx.sess.span_note(\n                   ex.span, ~\"did you forget the 'do' keyword for the call?\");\n             }\n@@ -1627,7 +1627,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             match fcx.mk_subty(false, expr.span,\n                                fty.output, ty::mk_bool(tcx)) {\n               result::ok(_) => (),\n-              result::err(err) => {\n+              result::err(_) => {\n                 tcx.sess.span_fatal(\n                     expr.span, fmt!(\"a `loop` function's last argument \\\n                                      should return `bool`, not `%s`\",\n@@ -2221,7 +2221,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n                 ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) => {\n                     arg_tys = Some(~[]);\n                 }\n-                ast::enum_variant_kind(subvariants) => {\n+                ast::enum_variant_kind(_) => {\n                     arg_tys = None;\n                     do_check(ccx, sp, vs, id, disr_vals, disr_val, variants);\n                 }\n@@ -2306,7 +2306,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         return no_params(typ);\n       }\n-      ast::def_fn(id, ast::extern_fn) => {\n+      ast::def_fn(_, ast::extern_fn) => {\n         // extern functions are just u8 pointers\n         return {\n             bounds: @~[],\n@@ -2458,7 +2458,7 @@ fn ast_expr_vstore_to_vstore(fcx: @fn_ctxt, e: @ast::expr, n: uint,\n       }\n       ast::vstore_uniq => ty::vstore_uniq,\n       ast::vstore_box => ty::vstore_box,\n-      ast::vstore_slice(a_r) => {\n+      ast::vstore_slice(_) => {\n         let r = fcx.infcx.next_region_var(e.span, e.id);\n         ty::vstore_slice(r)\n       }"}, {"sha": "764c9d3d297b24f095c90f61d3c3ac9118dde3d8", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -228,7 +228,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n           _ => ()\n         }\n       }\n-      ast::pat_ident(_, path, c) => {\n+      ast::pat_ident(_, path, _) => {\n         check_pat_variant(pcx, pat, path, Some(~[]), expected);\n       }\n       ast::pat_enum(path, subpats) => {"}, {"sha": "1b720e3386f16f227e463c877dbc465406f77481", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -38,7 +38,7 @@ fn encl_region_of_def(fcx: @fn_ctxt, def: ast::def) -> ty::region {\n         def_local(node_id, _) | def_arg(node_id, _) | def_self(node_id) |\n         def_binding(node_id, _) =>\n             return encl_region(tcx, node_id),\n-        def_upvar(local_id, subdef, closure_id, body_id) => {\n+        def_upvar(_, subdef, closure_id, body_id) => {\n             match ty_fn_proto(fcx.node_ty(closure_id)) {\n                 proto_bare =>\n                     tcx.sess.bug(~\"proto_bare in encl_region_of_def?!\"),\n@@ -205,7 +205,7 @@ fn visit_expr(e: @ast::expr, &&rcx: @rcx, v: rvt) {\n         };\n       }\n \n-      ast::expr_addr_of(_, operand) => {\n+      ast::expr_addr_of(*) => {\n         // FIXME(#3148) -- in some cases, we need to capture a dependency\n         // between the regions found in operand the resulting region type.\n         // See #3148 for more details."}, {"sha": "f14931cb87441925bd021158d6ffdee6ef687d83", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -117,7 +117,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n               }\n               ty::bound_trait(ity) => {\n                 match ty::get(ity).struct {\n-                  ty::ty_trait(idid, substs, _) => {\n+                  ty::ty_trait(idid, _, _) => {\n                     if trait_id == idid {\n                         debug!(\"(checking vtable) @0 relating ty to trait ty\n                                 with did %?\", idid);\n@@ -268,7 +268,7 @@ fn fixup_ty(fcx: @fn_ctxt,\n                   for this bounded type parameter: %s\",\n                  fixup_err_to_str(e)))\n       }\n-      result::err(e) => {\n+      result::err(_) => {\n         None\n       }\n     }"}, {"sha": "63587cf4e3b30739de15dc7dd9d93b3a76f70965", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -597,7 +597,7 @@ struct CoherenceChecker {\n         }\n \n         match item.node {\n-            item_impl(ty_params, trait_refs, _, ast_methods) => {\n+            item_impl(_, trait_refs, _, ast_methods) => {\n                 let mut methods = ~[];\n \n                 for ast_methods.each |ast_method| {"}, {"sha": "72faac19aba051a0fdcd887d4deb882dc95725c9", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -331,7 +331,7 @@ fn check_methods_against_trait(ccx: @crate_ctxt,\n     }\n     for vec::each(*ty::trait_methods(tcx, did)) |trait_m| {\n         match vec::find(impl_ms, |impl_m| trait_m.ident == impl_m.mty.ident) {\n-          Some({mty: impl_m, id, span}) => {\n+          Some({mty: impl_m, span, _}) => {\n             compare_impl_method(\n                 ccx.tcx, span, impl_m, vec::len(tps),\n                 trait_m, tpt.substs, selfty);\n@@ -350,7 +350,7 @@ fn check_methods_against_trait(ccx: @crate_ctxt,\n \n                   match vec::find(provided_methods, |provided_method|\n                                 provided_method.ident == trait_m.ident) {\n-                    Some(m) => {\n+                    Some(_) => {\n                       // If there's a provided method with the name we\n                       // want, then we're fine; nothing else to do.\n                     }\n@@ -660,7 +660,7 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         return tpt;\n       }\n-      ast::item_trait(tps, _, ms) => {\n+      ast::item_trait(tps, _, _) => {\n         let {bounds, substs} = mk_substs(ccx, tps, rp);\n         let t = ty::mk_trait(tcx, local_def(it.id), substs, ty::vstore_box);\n         let tpt = {bounds: bounds,"}, {"sha": "b27cac57262c3adc767c6bc23a705d7c19610f78", "filename": "src/rustc/middle/typeck/infer/assignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -125,12 +125,12 @@ impl infer_ctxt {\n         match (a_bnd, b_bnd) {\n           (Some(a_bnd), Some(b_bnd)) => {\n             match (ty::get(a_bnd).struct, ty::get(b_bnd).struct) {\n-              (ty::ty_box(mt_a), ty::ty_rptr(r_b, mt_b)) => {\n+              (ty::ty_box(*), ty::ty_rptr(r_b, mt_b)) => {\n                 let nr_b = ty::mk_box(self.tcx, {ty: mt_b.ty,\n                                                  mutbl: m_const});\n                 self.crosspollinate(anmnt, a, nr_b, mt_b.mutbl, r_b)\n               }\n-              (ty::ty_uniq(mt_a), ty::ty_rptr(r_b, mt_b)) => {\n+              (ty::ty_uniq(*), ty::ty_rptr(r_b, mt_b)) => {\n                 let nr_b = ty::mk_uniq(self.tcx, {ty: mt_b.ty,\n                                                   mutbl: m_const});\n                 self.crosspollinate(anmnt, a, nr_b, mt_b.mutbl, r_b)\n@@ -142,7 +142,7 @@ impl infer_ctxt {\n                 self.crosspollinate(anmnt, a, nr_b, m_imm, r_b)\n               }\n \n-              (ty::ty_evec(mt_a, vs_a),\n+              (ty::ty_evec(_, vs_a),\n                ty::ty_evec(mt_b, ty::vstore_slice(r_b)))\n               if is_borrowable(vs_a) => {\n                 let nr_b = ty::mk_evec(self.tcx, {ty: mt_b.ty,"}, {"sha": "cae41b23882abb14700873a75a61238086401dd3", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd46c8a550af1d40543aeee92127d09ba4e062/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=65bd46c8a550af1d40543aeee92127d09ba4e062", "patch": "@@ -508,7 +508,7 @@ impl RegionVarBindings {\n             ok(ty::re_static) // nothing lives longer than static\n           }\n \n-          (ty::re_var(v_id), _) | (_, ty::re_var(v_id)) => {\n+          (ty::re_var(*), _) | (_, ty::re_var(*)) => {\n             self.combine_vars(\n                 self.lubs, a, b, span,\n                 |old_r, new_r| self.make_subregion(span, old_r, new_r))\n@@ -531,7 +531,7 @@ impl RegionVarBindings {\n             ok(r)\n           }\n \n-          (ty::re_var(v_id), _) | (_, ty::re_var(v_id)) => {\n+          (ty::re_var(*), _) | (_, ty::re_var(*)) => {\n             self.combine_vars(\n                 self.glbs, a, b, span,\n                 |old_r, new_r| self.make_subregion(span, new_r, old_r))"}]}