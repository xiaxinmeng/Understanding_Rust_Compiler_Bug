{"sha": "37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjYyYWUxYzBlZTQ0Y2I2Y2E1NjNjMThkYTE5YjhkNWJlNThjMGU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T23:07:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:12Z"}, "message": "std: remove remaining boxed closures", "tree": {"sha": "f91042faed1b74c6d671cf20eaba43867bd79396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91042faed1b74c6d671cf20eaba43867bd79396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "html_url": "https://github.com/rust-lang/rust/commit/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e/comments", "author": null, "committer": null, "parents": [{"sha": "a291a80fbe1222fd708b1e5612b8056cf9311cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a291a80fbe1222fd708b1e5612b8056cf9311cae", "html_url": "https://github.com/rust-lang/rust/commit/a291a80fbe1222fd708b1e5612b8056cf9311cae"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "4691c06c1de16abfa62f6da9b9e815cd43c9aafc", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "patch": "@@ -518,14 +518,16 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// use std::io;\n ///\n /// // one possible implementation of fs::walk_dir only visiting files\n-/// fn visit_dirs(dir: &Path, cb: |&Path|) -> io::IoResult<()> {\n+/// fn visit_dirs<F>(dir: &Path, cb: &mut F) -> io::IoResult<()> where\n+///     F: FnMut(&Path),\n+/// {\n ///     if dir.is_dir() {\n ///         let contents = try!(fs::readdir(dir));\n ///         for entry in contents.iter() {\n ///             if entry.is_dir() {\n-///                 try!(visit_dirs(entry, |p| cb(p)));\n+///                 try!(visit_dirs(entry, cb));\n ///             } else {\n-///                 cb(entry);\n+///                 (*cb)(entry);\n ///             }\n ///         }\n ///         Ok(())"}, {"sha": "d398b61fe64cf8596d7926626ffd1eca5c03ac22", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "patch": "@@ -17,11 +17,12 @@\n \n pub use self::IpAddr::*;\n \n+use boxed::Box;\n use fmt;\n use io::{self, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n-use ops::FnOnce;\n+use ops::{FnOnce, FnMut};\n use option::Option;\n use option::Option::{None, Some};\n use result::Result::{Ok, Err};\n@@ -120,10 +121,10 @@ impl<'a> Parser<'a> {\n     }\n \n     // Return result of first successful parser\n-    fn read_or<T>(&mut self, parsers: &mut [|&mut Parser| -> Option<T>])\n+    fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T>>])\n                -> Option<T> {\n         for pf in parsers.iter_mut() {\n-            match self.read_atomically(|p: &mut Parser| (*pf)(p)) {\n+            match self.read_atomically(|p: &mut Parser| pf.call_mut((p,))) {\n                 Some(r) => return Some(r),\n                 None => {}\n             }\n@@ -320,22 +321,22 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n-        let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr();\n-        let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr();\n-        self.read_or(&mut [ipv4_addr, ipv6_addr])\n+        let ipv4_addr = |&mut: p: &mut Parser| p.read_ipv4_addr();\n+        let ipv6_addr = |&mut: p: &mut Parser| p.read_ipv6_addr();\n+        self.read_or(&mut [box ipv4_addr, box ipv6_addr])\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n         let ip_addr = |&: p: &mut Parser| {\n-            let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n-            let ipv6_p = |p: &mut Parser| {\n+            let ipv4_p = |&mut: p: &mut Parser| p.read_ip_addr();\n+            let ipv6_p = |&mut: p: &mut Parser| {\n                 let open_br = |&: p: &mut Parser| p.read_given_char('[');\n                 let ip_addr = |&: p: &mut Parser| p.read_ipv6_addr();\n                 let clos_br = |&: p: &mut Parser| p.read_given_char(']');\n                 p.read_seq_3::<char, IpAddr, char, _, _, _>(open_br, ip_addr, clos_br)\n                         .map(|t| match t { (_, ip, _) => ip })\n             };\n-            p.read_or(&mut [ipv4_p, ipv6_p])\n+            p.read_or(&mut [box ipv4_p, box ipv6_p])\n         };\n         let colon = |&: p: &mut Parser| p.read_given_char(':');\n         let port  = |&: p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);"}]}