{"sha": "9703ef666123c465f784e294b5b24d6d35a37745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDNlZjY2NjEyM2M0NjVmNzg0ZTI5NGI1YjI0ZDZkMzVhMzc3NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-10T17:19:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-10T17:19:55Z"}, "message": "Auto merge of #62955 - Mark-Simulacrum:rustdoc-clean-1, r=eddyb\n\nrustdoc: general cleanups\n\nThis is purely a refactoring, mostly just simplifying some of the code. Commits are best reviewed individually.", "tree": {"sha": "ab5206e8e97c089ecf9eeb60f92c635407b0cdde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab5206e8e97c089ecf9eeb60f92c635407b0cdde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9703ef666123c465f784e294b5b24d6d35a37745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9703ef666123c465f784e294b5b24d6d35a37745", "html_url": "https://github.com/rust-lang/rust/commit/9703ef666123c465f784e294b5b24d6d35a37745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9703ef666123c465f784e294b5b24d6d35a37745/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9", "html_url": "https://github.com/rust-lang/rust/commit/be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9"}, {"sha": "32f144a5277d80baafcc192a4fd10336b999b6a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f144a5277d80baafcc192a4fd10336b999b6a8", "html_url": "https://github.com/rust-lang/rust/commit/32f144a5277d80baafcc192a4fd10336b999b6a8"}], "stats": {"total": 283, "additions": 97, "deletions": 186}, "files": [{"sha": "8b0b5a5b7a2bd11e2b87c815aeb98f0dedf98283", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -58,7 +58,6 @@ use std::path::PathBuf;\n use std::sync::mpsc;\n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::mem;\n \n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     sess.diagnostic()\n@@ -204,15 +203,16 @@ impl ExpansionResult {\n \n impl BoxedResolver {\n     pub fn to_expansion_result(\n-        mut resolver: Rc<Option<RefCell<BoxedResolver>>>,\n+        resolver: Rc<RefCell<BoxedResolver>>,\n     ) -> ExpansionResult {\n-        if let Some(resolver) = Rc::get_mut(&mut resolver) {\n-            mem::replace(resolver, None).unwrap().into_inner().complete()\n-        } else {\n-            let resolver = &*resolver;\n-            resolver.as_ref().unwrap().borrow_mut().access(|resolver| {\n-                ExpansionResult::from_resolver_ref(resolver)\n-            })\n+        match Rc::try_unwrap(resolver) {\n+            Ok(resolver) => resolver.into_inner().complete(),\n+            Err(resolver) => {\n+                let resolver = &*resolver;\n+                resolver.borrow_mut().access(|resolver| {\n+                    ExpansionResult::from_resolver_ref(resolver)\n+                })\n+            }\n         }\n     }\n }"}, {"sha": "ed50dadb600993ec66a5bb79bef701bd2bcbe074", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -76,7 +76,7 @@ pub(crate) struct Queries {\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n     register_plugins: Query<(ast::Crate, PluginInfo)>,\n-    expansion: Query<(ast::Crate, Rc<Option<RefCell<BoxedResolver>>>)>,\n+    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>,\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n     prepare_outputs: Query<OutputFilenames>,\n@@ -142,7 +142,7 @@ impl Compiler {\n \n     pub fn expansion(\n         &self\n-    ) -> Result<&Query<(ast::Crate, Rc<Option<RefCell<BoxedResolver>>>)>> {\n+    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>> {\n         self.queries.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, plugin_info) = self.register_plugins()?.take();\n@@ -152,7 +152,7 @@ impl Compiler {\n                 krate,\n                 &crate_name,\n                 plugin_info,\n-            ).map(|(krate, resolver)| (krate, Rc::new(Some(RefCell::new(resolver)))))\n+            ).map(|(krate, resolver)| (krate, Steal::new(Rc::new(RefCell::new(resolver)))))\n         })\n     }\n \n@@ -176,9 +176,10 @@ impl Compiler {\n     pub fn lower_to_hir(&self) -> Result<&Query<(Steal<hir::map::Forest>, ExpansionResult)>> {\n         self.queries.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n-            let (krate, resolver) = expansion_result.take();\n-            let resolver_ref = &*resolver;\n-            let hir = Steal::new(resolver_ref.as_ref().unwrap().borrow_mut().access(|resolver| {\n+            let peeked = expansion_result.peek();\n+            let krate = &peeked.0;\n+            let resolver = peeked.1.steal();\n+            let hir = Steal::new(resolver.borrow_mut().access(|resolver| {\n                 passes::lower_to_hir(\n                     self.session(),\n                     self.cstore(),\n@@ -187,7 +188,6 @@ impl Compiler {\n                     &krate\n                 )\n             })?);\n-            expansion_result.give((krate, Rc::new(None)));\n             Ok((hir, BoxedResolver::to_expansion_result(resolver)))\n         })\n     }"}, {"sha": "64cffaec2eaf3a6fc5ba61aecfab96bf8ffe0e12", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -5,8 +5,6 @@ use rustc::ty::subst::Subst;\n use rustc::infer::InferOk;\n use syntax_pos::DUMMY_SP;\n \n-use crate::core::DocAccessLevels;\n-\n use super::*;\n \n pub struct BlanketImplFinder<'a, 'tcx> {\n@@ -30,7 +28,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         for &trait_def_id in self.cx.all_traits.iter() {\n-            if !self.cx.renderinfo.borrow().access_levels.is_doc_reachable(trait_def_id) ||\n+            if !self.cx.renderinfo.borrow().access_levels.is_public(trait_def_id) ||\n                self.cx.generated_synthetics\n                       .borrow_mut()\n                       .get(&(ty, trait_def_id))"}, {"sha": "d2a6dcf19bcca2b51cdab0dd5adf4748dd46508b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -14,7 +14,7 @@ use rustc_metadata::cstore::LoadedMacro;\n use rustc::ty;\n use rustc::util::nodemap::FxHashSet;\n \n-use crate::core::{DocContext, DocAccessLevels};\n+use crate::core::DocContext;\n use crate::doctree;\n use crate::clean::{\n     self,\n@@ -326,7 +326,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>,\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n-            if !cx.renderinfo.borrow().access_levels.is_doc_reachable(traitref.def_id) {\n+            if !cx.renderinfo.borrow().access_levels.is_public(traitref.def_id) {\n                 return\n             }\n         }\n@@ -347,7 +347,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>,\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(did) = for_.def_id() {\n-            if !cx.renderinfo.borrow().access_levels.is_doc_reachable(did) {\n+            if !cx.renderinfo.borrow().access_levels.is_public(did) {\n                 return\n             }\n         }"}, {"sha": "6f33bdd7f4d2f4cc59a7d3727224e3dba1b27244", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -49,7 +49,6 @@ use parking_lot::ReentrantMutex;\n \n use crate::core::{self, DocContext};\n use crate::doctree;\n-use crate::visit_ast;\n use crate::html::render::{cache, ExternalLocation};\n use crate::html::item_type::ItemType;\n \n@@ -138,10 +137,15 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n+impl Clean<Crate> for hir::Crate {\n+    // note that self here is ignored in favor of `cx.tcx.hir().krate()` since\n+    // that gets around tying self's lifetime to the '_ in cx.\n     fn clean(&self, cx: &DocContext<'_>) -> Crate {\n         use crate::visit_lib::LibEmbargoVisitor;\n \n+        let v = crate::visit_ast::RustdocVisitor::new(&cx);\n+        let module = v.visit(cx.tcx.hir().krate());\n+\n         {\n             let mut r = cx.renderinfo.borrow_mut();\n             r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n@@ -159,7 +163,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n \n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n-        let mut module = self.module.as_ref().unwrap().clean(cx);\n+        let mut module = module.clean(cx);\n         let mut masked_crates = FxHashSet::default();\n \n         match module.inner {\n@@ -169,7 +173,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     // `#[doc(masked)]` to the injected `extern crate` because it's unstable.\n                     if it.is_extern_crate()\n                         && (it.attrs.has_doc_flag(sym::masked)\n-                            || self.cx.tcx.is_compiler_builtins(it.def_id.krate))\n+                            || cx.tcx.is_compiler_builtins(it.def_id.krate))\n                     {\n                         masked_crates.insert(it.def_id.krate);\n                     }\n@@ -652,9 +656,9 @@ impl Clean<Item> for doctree::Module<'_> {\n             attrs,\n             source: whence.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_node_id(self.id),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n                items,\n@@ -1938,8 +1942,8 @@ impl Clean<Item> for doctree::Function<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: did,\n             inner: FunctionItem(Function {\n                 decl,\n@@ -2138,8 +2142,8 @@ impl Clean<Item> for doctree::Trait<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n                 unsafety: self.unsafety,\n@@ -2168,8 +2172,8 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitAliasItem(TraitAlias {\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n@@ -3242,8 +3246,8 @@ impl Clean<Item> for doctree::Struct<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3262,8 +3266,8 @@ impl Clean<Item> for doctree::Union<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3309,8 +3313,8 @@ impl Clean<Item> for doctree::Enum<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: EnumItem(Enum {\n                 variants: self.variants.iter().map(|v| v.clean(cx)).collect(),\n                 generics: self.generics.clean(cx),\n@@ -3332,8 +3336,8 @@ impl Clean<Item> for doctree::Variant<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: None,\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: VariantItem(Variant {\n                 kind: self.def.clean(cx),\n@@ -3637,8 +3641,8 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n@@ -3661,8 +3665,8 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: OpaqueTyItem(OpaqueTy {\n                 bounds: self.opaque_ty.bounds.clean(cx),\n                 generics: self.opaque_ty.generics.clean(cx),\n@@ -3712,8 +3716,8 @@ impl Clean<Item> for doctree::Static<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n                 mutability: self.mutability.clean(cx),\n@@ -3737,8 +3741,8 @@ impl Clean<Item> for doctree::Constant<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n                 expr: print_const_expr(cx, self.expr),\n@@ -3824,8 +3828,8 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n@@ -4063,8 +4067,8 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             inner,\n         }\n     }\n@@ -4246,8 +4250,8 @@ impl Clean<Item> for doctree::Macro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: Some(Public),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.hid).clean(cx),\n+            deprecation: cx.deprecation(self.hid).clean(cx),\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n                 source: format!(\"macro_rules! {} {{\\n{}}}\",\n@@ -4274,8 +4278,8 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: Some(Public),\n-            stability: self.stab.clean(cx),\n-            deprecation: self.depr.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n+            deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: ProcMacroItem(ProcMacro {\n                 kind: self.kind,"}, {"sha": "5138e4a23a47ea4520b5fe499a60f487ef4125f7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -16,6 +16,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_target::spec::TargetTriple;\n \n use syntax::source_map;\n+use syntax::attr;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n use syntax::symbol::sym;\n@@ -29,7 +30,6 @@ use rustc_data_structures::sync::{self, Lrc};\n use std::sync::Arc;\n use std::rc::Rc;\n \n-use crate::visit_ast::RustdocVisitor;\n use crate::config::{Options as RustdocOptions, RenderOptions};\n use crate::clean;\n use crate::clean::{Clean, MAX_DEF_ID, AttributesExt};\n@@ -45,7 +45,7 @@ pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n pub struct DocContext<'tcx> {\n \n     pub tcx: TyCtxt<'tcx>,\n-    pub resolver: Rc<Option<RefCell<interface::BoxedResolver>>>,\n+    pub resolver: Rc<RefCell<interface::BoxedResolver>>,\n     /// The stack of module NodeIds up till this point\n     pub crate_name: Option<String>,\n     pub cstore: Lrc<CStore>,\n@@ -83,9 +83,7 @@ impl<'tcx> DocContext<'tcx> {\n \n     pub fn enter_resolver<F, R>(&self, f: F) -> R\n     where F: FnOnce(&mut resolve::Resolver<'_>) -> R {\n-        let resolver = &*self.resolver;\n-        let resolver = resolver.as_ref().unwrap();\n-        resolver.borrow_mut().access(f)\n+        self.resolver.borrow_mut().access(f)\n     }\n \n     /// Call the closure with the given parameters set as\n@@ -167,15 +165,15 @@ impl<'tcx> DocContext<'tcx> {\n             self.tcx.hir().as_local_hir_id(def_id)\n         }\n     }\n-}\n \n-pub trait DocAccessLevels {\n-    fn is_doc_reachable(&self, did: DefId) -> bool;\n-}\n+    pub fn stability(&self, id: HirId) -> Option<attr::Stability> {\n+        self.tcx.hir().opt_local_def_id(id)\n+            .and_then(|def_id| self.tcx.lookup_stability(def_id)).cloned()\n+    }\n \n-impl DocAccessLevels for AccessLevels<DefId> {\n-    fn is_doc_reachable(&self, did: DefId) -> bool {\n-        self.is_public(did)\n+    pub fn deprecation(&self, id: HirId) -> Option<attr::Deprecation> {\n+        self.tcx.hir().opt_local_def_id(id)\n+            .and_then(|def_id| self.tcx.lookup_deprecation(def_id))\n     }\n }\n \n@@ -344,7 +342,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // We need to hold on to the complete resolver, so we cause everything to be\n         // cloned for the analysis passes to use. Suboptimal, but necessary in the\n         // current architecture.\n-        let resolver = abort_on_err(compiler.expansion(), sess).peek().1.clone();\n+        let resolver = abort_on_err(compiler.expansion(), sess).peek().1.borrow().clone();\n \n         if sess.has_errors() {\n             sess.fatal(\"Compilation failed, aborting rustdoc\");\n@@ -393,11 +391,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             };\n             debug!(\"crate: {:?}\", tcx.hir().krate());\n \n-            let mut krate = {\n-                let mut v = RustdocVisitor::new(&ctxt);\n-                v.visit(tcx.hir().krate());\n-                v.clean(&ctxt)\n-            };\n+            let mut krate = tcx.hir().krate().clean(&ctxt);\n \n             fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n                 let mut msg = diag.struct_warn(&format!(\"the `#![doc({})]` attribute is \\"}, {"sha": "90dcf1be76c0d9c379315d41f06bb1dab9544b82", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -3,8 +3,7 @@\n pub use self::StructType::*;\n \n use syntax::ast;\n-use syntax::ast::{Name, NodeId};\n-use syntax::attr;\n+use syntax::ast::Name;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span};\n \n@@ -24,15 +23,13 @@ pub struct Module<'hir> {\n     pub enums: Vec<Enum<'hir>>,\n     pub fns: Vec<Function<'hir>>,\n     pub mods: Vec<Module<'hir>>,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub typedefs: Vec<Typedef<'hir>>,\n     pub opaque_tys: Vec<OpaqueTy<'hir>>,\n     pub statics: Vec<Static<'hir>>,\n     pub constants: Vec<Constant<'hir>>,\n     pub traits: Vec<Trait<'hir>>,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub impls: Vec<Impl<'hir>>,\n     pub foreigns: Vec<ForeignItem<'hir>>,\n     pub macros: Vec<Macro<'hir>>,\n@@ -49,10 +46,8 @@ impl Module<'hir> {\n     ) -> Module<'hir> {\n         Module {\n             name       : name,\n-            id: ast::CRATE_NODE_ID,\n+            id: hir::CRATE_HIR_ID,\n             vis,\n-            stab: None,\n-            depr: None,\n             where_outer: syntax_pos::DUMMY_SP,\n             where_inner: syntax_pos::DUMMY_SP,\n             attrs,\n@@ -90,8 +85,6 @@ pub enum StructType {\n \n pub struct Struct<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -103,8 +96,6 @@ pub struct Struct<'hir> {\n \n pub struct Union<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -116,8 +107,6 @@ pub struct Union<'hir> {\n \n pub struct Enum<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub variants: Vec<Variant<'hir>>,\n     pub generics: &'hir hir::Generics,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n@@ -131,8 +120,6 @@ pub struct Variant<'hir> {\n     pub id: hir::HirId,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub def: &'hir hir::VariantData,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub whence: Span,\n }\n \n@@ -142,8 +129,6 @@ pub struct Function<'hir> {\n     pub id: hir::HirId,\n     pub name: Name,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub header: hir::FnHeader,\n     pub whence: Span,\n     pub generics: &'hir hir::Generics,\n@@ -158,8 +143,6 @@ pub struct Typedef<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n pub struct OpaqueTy<'hir> {\n@@ -169,8 +152,6 @@ pub struct OpaqueTy<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n #[derive(Debug)]\n@@ -181,8 +162,6 @@ pub struct Static<'hir> {\n     pub name: Name,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub whence: Span,\n }\n@@ -193,8 +172,6 @@ pub struct Constant<'hir> {\n     pub name: Name,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub whence: Span,\n }\n@@ -210,8 +187,6 @@ pub struct Trait<'hir> {\n     pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n pub struct TraitAlias<'hir> {\n@@ -222,8 +197,6 @@ pub struct TraitAlias<'hir> {\n     pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n #[derive(Debug)]\n@@ -238,15 +211,11 @@ pub struct Impl<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n }\n \n pub struct ForeignItem<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub name: Name,\n     pub kind: &'hir hir::ForeignItemKind,\n@@ -258,12 +227,11 @@ pub struct ForeignItem<'hir> {\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n pub struct Macro<'hir> {\n     pub name: Name,\n+    pub hid: hir::HirId,\n     pub def_id: hir::def_id::DefId,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub matchers: hir::HirVec<Span>,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n     pub imported_from: Option<Name>,\n }\n \n@@ -293,8 +261,6 @@ pub struct ProcMacro<'hir> {\n     pub helpers: Vec<Name>,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n-    pub stab: Option<attr::Stability>,\n-    pub depr: Option<attr::Deprecation>,\n }\n \n pub fn struct_type_from_def(vdata: &hir::VariantData) -> StructType {"}, {"sha": "9c22837bdae8799c2c98f79d85ce082e55f75533", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -14,7 +14,6 @@ use rustc_target::spec::abi::Abi;\n use rustc::hir;\n \n use crate::clean::{self, PrimitiveType};\n-use crate::core::DocAccessLevels;\n use crate::html::item_type::ItemType;\n use crate::html::render::{self, cache, CURRENT_LOCATION_KEY};\n \n@@ -404,7 +403,7 @@ impl fmt::Display for clean::Path {\n \n pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let cache = cache();\n-    if !did.is_local() && !cache.access_levels.is_doc_reachable(did) {\n+    if !did.is_local() && !cache.access_levels.is_public(did) {\n         return None\n     }\n "}, {"sha": "4e10b46bc8a6f05587ed3415061060b0ba0846e6", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::{DUMMY_SP, InnerSpan, Span};\n use std::ops::Range;\n \n use crate::clean::{self, GetDefId, Item};\n-use crate::core::{DocContext, DocAccessLevels};\n+use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n use crate::html::markdown::{find_testable_code, ErrorCodes, LangString};\n \n@@ -347,7 +347,7 @@ pub fn look_for_tests<'tcx>(\n         diag.emit();\n     } else if check_missing_code == false &&\n               tests.found_tests > 0 &&\n-              !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n+              !cx.renderinfo.borrow().access_levels.is_public(item.def_id) {\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,"}, {"sha": "f01b9eeb30f238c908e5239d64683f4891af68b0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 17, "deletions": 67, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9703ef666123c465f784e294b5b24d6d35a37745/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9703ef666123c465f784e294b5b24d6d35a37745", "patch": "@@ -7,7 +7,6 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use syntax::ast;\n-use syntax::attr;\n use syntax::ext::base::MacroKind;\n use syntax::source_map::Spanned;\n use syntax::symbol::sym;\n@@ -20,22 +19,16 @@ use crate::clean::{self, AttributesExt, NestedAttributesExt, def_id_to_path};\n use crate::doctree::*;\n \n \n-// Looks to me like the first two of these are actually\n-// output parameters, maybe only mutated once; perhaps\n-// better simply to have the visit method return a tuple\n-// containing them?\n-\n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?.\n \n pub struct RustdocVisitor<'a, 'tcx> {\n-    pub module: Option<Module<'tcx>>,\n-    pub cx: &'a core::DocContext<'tcx>,\n+    cx: &'a core::DocContext<'tcx>,\n     view_item_stack: FxHashSet<hir::HirId>,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n     inside_public_path: bool,\n-    exact_paths: Option<FxHashMap<DefId, Vec<String>>>,\n+    exact_paths: FxHashMap<DefId, Vec<String>>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -46,36 +39,24 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let mut stack = FxHashSet::default();\n         stack.insert(hir::CRATE_HIR_ID);\n         RustdocVisitor {\n-            module: None,\n             cx,\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n-            exact_paths: Some(FxHashMap::default()),\n+            exact_paths: FxHashMap::default(),\n         }\n     }\n \n     fn store_path(&mut self, did: DefId) {\n         // We can't use the entry API, as that keeps the mutable borrow of `self` active\n         // when we try to use `cx`.\n-        let exact_paths = self.exact_paths.as_mut().unwrap();\n-        if exact_paths.get(&did).is_none() {\n+        if self.exact_paths.get(&did).is_none() {\n             let path = def_id_to_path(self.cx, did, self.cx.crate_name.clone());\n-            exact_paths.insert(did, path);\n+            self.exact_paths.insert(did, path);\n         }\n     }\n \n-    fn stability(&self, id: hir::HirId) -> Option<attr::Stability> {\n-        self.cx.tcx.hir().opt_local_def_id(id)\n-            .and_then(|def_id| self.cx.tcx.lookup_stability(def_id)).cloned()\n-    }\n-\n-    fn deprecation(&self, id: hir::HirId) -> Option<attr::Deprecation> {\n-        self.cx.tcx.hir().opt_local_def_id(id)\n-            .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n-    }\n-\n-    pub fn visit(&mut self, krate: &'tcx hir::Crate) {\n+    pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(krate.span,\n                                               &krate.attrs,\n                                               &Spanned { span: syntax_pos::DUMMY_SP,\n@@ -88,12 +69,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             krate.exported_macros.iter().map(|def| self.visit_local_macro(def, None)),\n         );\n         module.is_crate = true;\n-        self.module = Some(module);\n \n-        self.cx.renderinfo.borrow_mut().exact_paths = self.exact_paths.take().unwrap();\n+        self.cx.renderinfo.borrow_mut().exact_paths = self.exact_paths;\n+\n+        module\n     }\n \n-    pub fn visit_variant_data(&mut self, item: &'tcx hir::Item,\n+    fn visit_variant_data(&mut self, item: &'tcx hir::Item,\n                               name: ast::Name, sd: &'tcx hir::VariantData,\n                               generics: &'tcx hir::Generics) -> Struct<'tcx> {\n         debug!(\"visiting struct\");\n@@ -103,16 +85,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             struct_type,\n             name,\n             vis: &item.vis,\n-            stab: self.stability(item.hir_id),\n-            depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n             whence: item.span\n         }\n     }\n \n-    pub fn visit_union_data(&mut self, item: &'tcx hir::Item,\n+    fn visit_union_data(&mut self, item: &'tcx hir::Item,\n                             name: ast::Name, sd: &'tcx hir::VariantData,\n                             generics: &'tcx hir::Generics) -> Union<'tcx> {\n         debug!(\"visiting union\");\n@@ -122,16 +102,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             struct_type,\n             name,\n             vis: &item.vis,\n-            stab: self.stability(item.hir_id),\n-            depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n             whence: item.span\n         }\n     }\n \n-    pub fn visit_enum_def(&mut self, it: &'tcx hir::Item,\n+    fn visit_enum_def(&mut self, it: &'tcx hir::Item,\n                           name: ast::Name, def: &'tcx hir::EnumDef,\n                           generics: &'tcx hir::Generics) -> Enum<'tcx> {\n         debug!(\"visiting enum\");\n@@ -141,22 +119,18 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 name: v.node.ident.name,\n                 id: v.node.id,\n                 attrs: &v.node.attrs,\n-                stab: self.stability(v.node.id),\n-                depr: self.deprecation(v.node.id),\n                 def: &v.node.data,\n                 whence: v.span,\n             }).collect(),\n             vis: &it.vis,\n-            stab: self.stability(it.hir_id),\n-            depr: self.deprecation(it.hir_id),\n             generics,\n             attrs: &it.attrs,\n             id: it.hir_id,\n             whence: it.span,\n         }\n     }\n \n-    pub fn visit_fn(&mut self, om: &mut Module<'tcx>, item: &'tcx hir::Item,\n+    fn visit_fn(&mut self, om: &mut Module<'tcx>, item: &'tcx hir::Item,\n                     name: ast::Name, decl: &'tcx hir::FnDecl,\n                     header: hir::FnHeader,\n                     generics: &'tcx hir::Generics,\n@@ -207,16 +181,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     helpers,\n                     attrs: &item.attrs,\n                     whence: item.span,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 });\n             }\n             None => {\n                 om.fns.push(Function {\n                     id: item.hir_id,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                     attrs: &item.attrs,\n                     decl,\n                     name,\n@@ -229,16 +199,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx hir::HirVec<ast::Attribute>,\n+    fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx hir::HirVec<ast::Attribute>,\n                               vis: &'tcx hir::Visibility, id: hir::HirId,\n                               m: &'tcx hir::Mod,\n                               name: Option<ast::Name>) -> Module<'tcx> {\n         let mut om = Module::new(name, attrs, vis);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n-        om.stab = self.stability(id);\n-        om.depr = self.deprecation(id);\n-        om.id = self.cx.tcx.hir().hir_to_node_id(id);\n+        om.id = id;\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n@@ -369,7 +337,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n-    pub fn visit_item(&mut self, item: &'tcx hir::Item,\n+    fn visit_item(&mut self, item: &'tcx hir::Item,\n                       renamed: Option<ast::Ident>, om: &mut Module<'tcx>) {\n         debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);\n@@ -467,8 +435,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.typedefs.push(t);\n             },\n@@ -480,8 +446,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.opaque_tys.push(t);\n             },\n@@ -495,8 +459,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.statics.push(s);\n             },\n@@ -509,8 +471,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.constants.push(s);\n             },\n@@ -529,8 +489,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.traits.push(t);\n             },\n@@ -543,8 +501,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n-                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.trait_aliases.push(t);\n             },\n@@ -574,8 +530,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         id: item.hir_id,\n                         whence: item.span,\n                         vis: &item.vis,\n-                        stab: self.stability(item.hir_id),\n-                        depr: self.deprecation(item.hir_id),\n                     };\n                     om.impls.push(i);\n                 }\n@@ -595,8 +549,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: renamed.unwrap_or(item.ident).name,\n             kind: &item.node,\n             vis: &item.vis,\n-            stab: self.stability(item.hir_id),\n-            depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             whence: item.span\n         });\n@@ -614,14 +566,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n \n         Macro {\n-\n+            hid: def.hir_id,\n             def_id: self.cx.tcx.hir().local_def_id(def.hir_id),\n             attrs: &def.attrs,\n             name: renamed.unwrap_or(def.name),\n             whence: def.span,\n             matchers,\n-            stab: self.stability(def.hir_id),\n-            depr: self.deprecation(def.hir_id),\n             imported_from: None,\n         }\n     }"}]}