{"sha": "c552717e9da86f70d49390bba1e4b305054d9ed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTI3MTdlOWRhODZmNzBkNDkzOTBiYmExZTRiMzA1MDU0ZDllZDQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-08T09:37:27Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-13T20:53:51Z"}, "message": "review, improve note span", "tree": {"sha": "51af6c9ae45cc780dcb056a71d4ca9818e54ced9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51af6c9ae45cc780dcb056a71d4ca9818e54ced9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c552717e9da86f70d49390bba1e4b305054d9ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c552717e9da86f70d49390bba1e4b305054d9ed4", "html_url": "https://github.com/rust-lang/rust/commit/c552717e9da86f70d49390bba1e4b305054d9ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c552717e9da86f70d49390bba1e4b305054d9ed4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "html_url": "https://github.com/rust-lang/rust/commit/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "96fde48d96cc12c1b00b3a5f0f8aa6d08e4b6d9f", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c552717e9da86f70d49390bba1e4b305054d9ed4/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c552717e9da86f70d49390bba1e4b305054d9ed4/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=c552717e9da86f70d49390bba1e4b305054d9ed4", "patch": "@@ -201,11 +201,13 @@ pub enum Res<Id = hir::HirId> {\n     PrimTy(hir::PrimTy),\n     /// `Self`, with both an optional trait and impl `DefId`.\n     ///\n-    /// HACK: impl self types also have an optional requirement to not mention\n-    /// any generic parameters to allow the following with `min_const_generics`.\n-    /// `impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()]`.\n+    /// HACK(min_const_generics): impl self types also have an optional requirement to not mention\n+    /// any generic parameters to allow the following with `min_const_generics`:\n+    /// ```rust\n+    /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] {} }\n+    /// ```\n     ///\n-    /// Once `lazy_normalization_consts` is stable, this bodge can be removed again.\n+    /// FIXME(lazy_normalization_consts): Remove this bodge once this feature is stable.\n     SelfTy(Option<DefId> /* trait */, Option<(DefId, bool)> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n "}, {"sha": "00a37d908cd07ee600d3eaf92e8e8e84531f9588", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c552717e9da86f70d49390bba1e4b305054d9ed4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c552717e9da86f70d49390bba1e4b305054d9ed4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c552717e9da86f70d49390bba1e4b305054d9ed4", "patch": "@@ -2627,25 +2627,23 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                         ConstantItemRibKind(trivial) => {\n-                            if self.session.features_untracked().min_const_generics {\n-                                // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                                if !trivial {\n-                                    // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n-                                    // we can't easily tell if it's generic at this stage, so we instead remember\n-                                    // this and then enforce the self type to be concrete later on.\n-                                    if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {\n-                                        res = Res::SelfTy(trait_def, Some((impl_def, true)));\n-                                    } else {\n-                                        if record_used {\n-                                            self.report_error(\n-                                                span,\n-                                                ResolutionError::ParamInNonTrivialAnonConst(\n-                                                    rib_ident.name,\n-                                                ),\n-                                            );\n-                                        }\n-                                        return Res::Err;\n+                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n+                            if !trivial && self.session.features_untracked().min_const_generics {\n+                                // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n+                                // we can't easily tell if it's generic at this stage, so we instead remember\n+                                // this and then enforce the self type to be concrete later on.\n+                                if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {\n+                                    res = Res::SelfTy(trait_def, Some((impl_def, true)));\n+                                } else {\n+                                    if record_used {\n+                                        self.report_error(\n+                                            span,\n+                                            ResolutionError::ParamInNonTrivialAnonConst(\n+                                                rib_ident.name,\n+                                            ),\n+                                        );\n                                     }\n+                                    return Res::Err;\n                                 }\n                             }\n "}, {"sha": "a743dc1cd2086fda39b467b26293979e6ec74415", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c552717e9da86f70d49390bba1e4b305054d9ed4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c552717e9da86f70d49390bba1e4b305054d9ed4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c552717e9da86f70d49390bba1e4b305054d9ed4", "patch": "@@ -1924,13 +1924,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // Try to evaluate any array length constants.\n                 let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n                 if forbid_generic && normalized_ty.needs_subst() {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            path.span,\n-                            \"generic `Self` types are currently not permitted in anonymous constants\"\n-                        )\n-                        .span_note(tcx.def_span(def_id), \"not a concrete type\")\n-                        .emit();\n+                    let mut err = tcx.sess.struct_span_err(\n+                        path.span,\n+                        \"generic `Self` types are currently not permitted in anonymous constants\",\n+                    );\n+                    if let Some(hir::Node::Item(&hir::Item {\n+                        kind: hir::ItemKind::Impl { self_ty, .. },\n+                        ..\n+                    })) = tcx.hir().get_if_local(def_id)\n+                    {\n+                        err.span_note(self_ty.span, \"not a concrete type\");\n+                    }\n+                    err.emit();\n                     tcx.ty_error()\n                 } else {\n                     normalized_ty"}, {"sha": "89ce58564e465d04d6b5d7380acafb784b999dd6", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c552717e9da86f70d49390bba1e4b305054d9ed4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c552717e9da86f70d49390bba1e4b305054d9ed4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=c552717e9da86f70d49390bba1e4b305054d9ed4", "patch": "@@ -13,12 +13,10 @@ LL |     fn t3() -> [u8; std::mem::size_of::<Self>()] {}\n    |                                         ^^^^\n    |\n note: not a concrete type\n-  --> $DIR/self-ty-in-const-1.rs:13:1\n+  --> $DIR/self-ty-in-const-1.rs:13:9\n    |\n-LL | / impl<T> Bar<T> {\n-LL | |     fn t3() -> [u8; std::mem::size_of::<Self>()] {}\n-LL | | }\n-   | |_^\n+LL | impl<T> Bar<T> {\n+   |         ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ac6410a290a525978058ed3dfb49adc5269db15", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-2.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c552717e9da86f70d49390bba1e4b305054d9ed4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c552717e9da86f70d49390bba1e4b305054d9ed4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr?ref=c552717e9da86f70d49390bba1e4b305054d9ed4", "patch": "@@ -5,14 +5,10 @@ LL |         let _: [u8; std::mem::size_of::<Self>()];\n    |                                         ^^^^\n    |\n note: not a concrete type\n-  --> $DIR/self-ty-in-const-2.rs:15:1\n+  --> $DIR/self-ty-in-const-2.rs:15:17\n    |\n-LL | / impl<T> Baz for Bar<T> {\n-LL | |     fn hey() {\n-LL | |         let _: [u8; std::mem::size_of::<Self>()];\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl<T> Baz for Bar<T> {\n+   |                 ^^^^^^\n \n error: aborting due to previous error\n "}]}