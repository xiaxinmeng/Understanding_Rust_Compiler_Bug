{"sha": "3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNGYzMTM0ZDk1NWM2YmU4YTFiYjBiMWY4NzU5OTBhZTY0MmY1YzE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-23T12:52:48Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-23T12:52:48Z"}, "message": "Add missing backticks in diagnostics note", "tree": {"sha": "e1695ff429d3387d83d8876e7f114d4c05990267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1695ff429d3387d83d8876e7f114d4c05990267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl8ZiCgACgkQsJhshcDi\n2qGXCg//ZoXByXoZD6GGMNRXWUb8OuOs24B/SI5KDyQv7t9ZBsO/w2U2Qs1Hpi8b\nfWjr7ZFKYSQCNyzow0NR+xLZS7awexH7MXdo/dp4tolTwL7ULSbiBeaOz0OgxNAz\n0a/tNo9qXX547pksfA0gi7JKsAGOWTTZZL0aV9SrWAiSnwVUVT88En0zQabIML3k\nm/rWjhhoD7Z2pf0diH6/akqtwk9RgDWMi4RsgEB5ZgiDD3xUo/44090sTEMKEhi+\nhWb9EIE3kv1xhInoaNzg6yAGOXJVrdmGtRAkIgH5iwMz6H8bvbcomMdRAZPJnjE6\nuQbEFe4HAwK3QbYKWKN6q0yg5CxpbyYrYxvEdiswl4DJS+HFki4uOPmZJA9Fz4Ap\nGwcdtYx785x6vZCAobsx5yPDfJYt+q1J//4ToIlEbkgWT///D4mHtsfoyOSCy51C\nT2TYfVrAR6wedlX9nliJyrXOMBAoccNbbs3AfDFqv2JWlMnjjas4dtWuQ6aPvtZv\npSh94bOiPKDwNbZbQhKrhyG/M/Xoa30lHFnYqaq9f8ym0bMI/oFK5V33PFgcWDp6\nDASVwMRwQoE9+T4QJ6LGQDHoMWg3pIE29F/xCFv/1NBKWYdPo30nTC7L2ClQKS8F\nXfeP5INLHdYdOf5hUpJoOrUFvE6O4eo0m3N5AwPbtgYpqzC9S2Y=\n=AZ40\n-----END PGP SIGNATURE-----", "payload": "tree e1695ff429d3387d83d8876e7f114d4c05990267\nparent 2bbfa02b1b15974d5772b520aa027bf79f8c248e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1595508768 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1595508768 +0900\n\nAdd missing backticks in diagnostics note\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "html_url": "https://github.com/rust-lang/rust/commit/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbfa02b1b15974d5772b520aa027bf79f8c248e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbfa02b1b15974d5772b520aa027bf79f8c248e", "html_url": "https://github.com/rust-lang/rust/commit/2bbfa02b1b15974d5772b520aa027bf79f8c248e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "4f08aa451875f78f5dcc72d566e7593ea7fceeed", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -59,7 +59,7 @@\n #[rustc_on_unimplemented(\n     on(\n         Args = \"()\",\n-        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"\n+        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n     message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n@@ -141,7 +141,7 @@ pub trait Fn<Args>: FnMut<Args> {\n #[rustc_on_unimplemented(\n     on(\n         Args = \"()\",\n-        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"\n+        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n     message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n@@ -215,7 +215,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n #[rustc_on_unimplemented(\n     on(\n         Args = \"()\",\n-        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"\n+        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n     message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\""}, {"sha": "687dd97ca6cefc438a6fc33af03dec17016cf954", "filename": "src/test/ui/closure-expected.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -5,7 +5,7 @@ LL |     let y = x.or_else(4);\n    |                       ^ expected an `FnOnce<()>` closure, found `{integer}`\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `{integer}`\n-   = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n \n error: aborting due to previous error\n "}, {"sha": "2cb15f84f6973922f4cb0087658df1268d93c75d", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -8,7 +8,7 @@ LL |     is_fn(f);\n    |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n-   = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }`\n \n error: aborting due to previous error\n "}, {"sha": "2fe266b8018ebe81496836921d1c805ff29111fd", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -16,7 +16,7 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "e335523778b4703157e040e24be84d36b5ac1a1e", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -16,7 +16,7 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "d7a5bb0ebe5439130f9f5d22eaa43fb6cfb94db6", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -16,7 +16,7 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "0670625aa2f1b0abc59e65808aa6760cad20d1a5", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -16,7 +16,7 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "132880aab11e360feff89af057f3bd162f284eb4", "filename": "src/test/ui/issues/issue-22034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -5,7 +5,7 @@ LL |         &mut *(ptr as *mut dyn Fn())\n    |                ^^^ expected an `Fn<()>` closure, found `()`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `()`\n-   = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n    = note: required for the cast to the object type `dyn std::ops::Fn()`\n \n error: aborting due to previous error"}, {"sha": "f9b4eed0497c4d83af83f6a2b6743ee8cd22a481", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f3134d955c6be8a1bb0b1f875990ae642f5c1/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=3f4f3134d955c6be8a1bb0b1f875990ae642f5c1", "patch": "@@ -8,7 +8,7 @@ LL |     call(foo);\n    |          ^^^ expected an `Fn<()>` closure, found `fn() {foo}`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `fn() {foo}`\n-   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnMut<()>` closure, found `fn() {foo}`\n@@ -21,7 +21,7 @@ LL |     call_mut(foo);\n    |              ^^^ expected an `FnMut<()>` closure, found `fn() {foo}`\n    |\n    = help: the trait `std::ops::FnMut<()>` is not implemented for `fn() {foo}`\n-   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `fn() {foo}`\n@@ -34,7 +34,7 @@ LL |     call_once(foo);\n    |               ^^^ expected an `FnOnce<()>` closure, found `fn() {foo}`\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `fn() {foo}`\n-   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n@@ -47,7 +47,7 @@ LL |     call(foo_unsafe);\n    |          ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n-   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n@@ -60,7 +60,7 @@ LL |     call_mut(foo_unsafe);\n    |              ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n    |\n    = help: the trait `std::ops::FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n-   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n@@ -73,7 +73,7 @@ LL |     call_once(foo_unsafe);\n    |               ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n-   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error: aborting due to 6 previous errors"}]}