{"sha": "ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlM2E1MTUzMzc3ZjIyNzFiYTdkZmU2ODZhOWI1YmNhMTYzMmMzMmI=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2021-01-18T16:56:06Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2021-01-18T16:56:06Z"}, "message": "Avoid hash_slice in VecDeque's Hash implementation\n\nFixes #80303.", "tree": {"sha": "bfeb06c3979a4d0e464b5923fa9f5de2ba1ac461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfeb06c3979a4d0e464b5923fa9f5de2ba1ac461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "html_url": "https://github.com/rust-lang/rust/commit/ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae3a5153377f2271ba7dfe686a9b5bca1632c32b/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66eb9821666e0672a69a998d2331733c7a8996a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/66eb9821666e0672a69a998d2331733c7a8996a5", "html_url": "https://github.com/rust-lang/rust/commit/66eb9821666e0672a69a998d2331733c7a8996a5"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "6f9133e2811bf18c8c261941b190fdf652b530a0", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae3a5153377f2271ba7dfe686a9b5bca1632c32b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3a5153377f2271ba7dfe686a9b5bca1632c32b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "patch": "@@ -2646,9 +2646,13 @@ impl<A: Ord> Ord for VecDeque<A> {\n impl<A: Hash> Hash for VecDeque<A> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.len().hash(state);\n-        let (a, b) = self.as_slices();\n-        Hash::hash_slice(a, state);\n-        Hash::hash_slice(b, state);\n+        // It's not possible to use Hash::hash_slice on slices\n+        // returned by as_slices method as their length can vary\n+        // in otherwise identical deques.\n+        //\n+        // Hasher only guarantees equivalence for the exact same\n+        // set of calls to its methods.\n+        self.iter().for_each(|elem| elem.hash(state));\n     }\n }\n "}, {"sha": "87e06fa394d38baef06c904aae9cbd968b5bcabe", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ae3a5153377f2271ba7dfe686a9b5bca1632c32b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3a5153377f2271ba7dfe686a9b5bca1632c32b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=ae3a5153377f2271ba7dfe686a9b5bca1632c32b", "patch": "@@ -599,3 +599,43 @@ fn issue_53529() {\n         assert_eq!(*a, 2);\n     }\n }\n+\n+#[test]\n+fn issue_80303() {\n+    use core::iter;\n+    use core::num::Wrapping;\n+\n+    // This is a valid, albeit rather bad hash function implementation.\n+    struct SimpleHasher(Wrapping<u64>);\n+\n+    impl Hasher for SimpleHasher {\n+        fn finish(&self) -> u64 {\n+            self.0.0\n+        }\n+\n+        fn write(&mut self, bytes: &[u8]) {\n+            // This particular implementation hashes value 24 in addition to bytes.\n+            // Such an implementation is valid as Hasher only guarantees equivalence\n+            // for the exact same set of calls to its methods.\n+            for &v in iter::once(&24).chain(bytes) {\n+                self.0 = Wrapping(31) * self.0 + Wrapping(u64::from(v));\n+            }\n+        }\n+    }\n+\n+    fn hash_code(value: impl Hash) -> u64 {\n+        let mut hasher = SimpleHasher(Wrapping(1));\n+        value.hash(&mut hasher);\n+        hasher.finish()\n+    }\n+\n+    // This creates two deques for which values returned by as_slices\n+    // method differ.\n+    let vda: VecDeque<u8> = (0..10).collect();\n+    let mut vdb = VecDeque::with_capacity(10);\n+    vdb.extend(5..10);\n+    (0..5).rev().for_each(|elem| vdb.push_front(elem));\n+    assert_ne!(vda.as_slices(), vdb.as_slices());\n+    assert_eq!(vda, vdb);\n+    assert_eq!(hash_code(vda), hash_code(vdb));\n+}"}]}