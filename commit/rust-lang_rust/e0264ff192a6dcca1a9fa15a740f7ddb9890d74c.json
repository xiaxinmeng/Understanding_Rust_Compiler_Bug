{"sha": "e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMjY0ZmYxOTJhNmRjY2ExYTlmYTE1YTc0MGY3ZGRiOTg5MGQ3NGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-04T16:51:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-04T16:51:47Z"}, "message": "Don't dup the stdio file descriptors.\n\nThis is just an implementation detail of using libuv, so move the libuv-specific\nlogic into librustuv.", "tree": {"sha": "7703cb633d7f466c9fcbd2db66a33a976764bcd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7703cb633d7f466c9fcbd2db66a33a976764bcd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "html_url": "https://github.com/rust-lang/rust/commit/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91695797c2ff36017edc47af270ca665f2f4d1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/91695797c2ff36017edc47af270ca665f2f4d1ef", "html_url": "https://github.com/rust-lang/rust/commit/91695797c2ff36017edc47af270ca665f2f4d1ef"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "fcad6296579960b5b3bd1bc6bf72ceb88b4f39c4", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "patch": "@@ -44,6 +44,14 @@ impl TtyWatcher {\n             return Err(UvError(uvll::EBADF));\n         }\n \n+        // libuv was recently changed to not close the stdio file descriptors,\n+        // but it did not change the behavior for windows. Until this issue is\n+        // fixed, we need to dup the stdio file descriptors because otherwise\n+        // uv_close will close them\n+        let fd = if cfg!(windows) && fd <= libc::STDERR_FILENO {\n+            unsafe { libc::dup(fd) }\n+        } else { fd };\n+\n         // If this file descriptor is indeed guessed to be a tty, then go ahead\n         // with attempting to open it as a tty.\n         let handle = UvHandle::alloc(None::<TtyWatcher>, uvll::UV_TTY);"}, {"sha": "c92f480728e3bfd1a757fa01ee5d7c1f0cdc5eed", "filename": "src/libstd/io/native/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/src%2Flibstd%2Fio%2Fnative%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/src%2Flibstd%2Fio%2Fnative%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fmod.rs?ref=e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "patch": "@@ -206,7 +206,9 @@ impl rtio::IoFactory for IoFactory {\n     }\n     fn tty_open(&mut self, fd: c_int, _readable: bool) -> IoResult<~RtioTTY> {\n         if unsafe { libc::isatty(fd) } != 0 {\n-            Ok(~file::FileDesc::new(fd, true) as ~RtioTTY)\n+            // Don't ever close the stdio file descriptors, nothing good really\n+            // comes of that.\n+            Ok(~file::FileDesc::new(fd, fd > libc::STDERR_FILENO) as ~RtioTTY)\n         } else {\n             Err(IoError {\n                 kind: io::MismatchedFileTypeForOperation,"}, {"sha": "466a65a227efe70cb31727fe7ac2fe52457ea5b5", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0264ff192a6dcca1a9fa15a740f7ddb9890d74c/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=e0264ff192a6dcca1a9fa15a740f7ddb9890d74c", "patch": "@@ -31,8 +31,7 @@ use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n use io::buffered::LineBufferedWriter;\n-use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, with_local_io,\n-               CloseAsynchronously};\n+use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, with_local_io, DontClose};\n use super::{Reader, Writer, io_error, IoError, OtherIoError,\n             standard_error, EndOfFile};\n \n@@ -71,18 +70,9 @@ enum StdSource {\n \n fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n     with_local_io(|io| {\n-        let fd = unsafe { libc::dup(fd) };\n         match io.tty_open(fd, readable) {\n             Ok(tty) => Some(f(TTY(tty))),\n-            Err(_) => {\n-                // It's not really that desirable if these handles are closed\n-                // synchronously, and because they're squirreled away in a task\n-                // structure the destructors will be run when the task is\n-                // attempted to get destroyed. This means that if we run a\n-                // synchronous destructor we'll attempt to do some scheduling\n-                // operations which will just result in sadness.\n-                Some(f(File(io.fs_from_raw_fd(fd, CloseAsynchronously))))\n-            }\n+            Err(_) => Some(f(File(io.fs_from_raw_fd(fd, DontClose)))),\n         }\n     }).unwrap()\n }"}]}