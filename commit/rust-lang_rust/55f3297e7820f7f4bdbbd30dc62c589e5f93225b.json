{"sha": "55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "node_id": "C_kwDOAAsO6NoAKDU1ZjMyOTdlNzgyMGY3ZjRiZGJiZDMwZGM2MmM1ODllNWY5MzIyNWI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-01T19:44:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T19:44:16Z"}, "message": "Merge #11156\n\n11156: internal: Record unresolved derive invocations in hir r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "5c185d98e50dbf923807dd64229ed9050f6f1245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c185d98e50dbf923807dd64229ed9050f6f1245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0K8QCRBK7hj4Ov3rIwAAoCQIADeF1sfpVKo9pnrK7rl/g0r2\nlKEpv98xPCl6Ft7Kv5nLyR6up0vRIRuVS3X2l5DoQgwaZLwz8OK1X6hlXyHrfoNy\nCRZ0McC5C2KhTpGscmILkQ0fsKmGfbYdqeWvI8UFq6CqTC8P0+EwwSCkrjnNJ6Ox\ny4Of/IOKAa0KHmjJ8HbvO5DK+y+U282U0t5GOfEome9KPe63aMn3vangnWncDGCO\nVAtLbPKBTdknUPoRSd8VM5xykb+pu54TyxwPJy/oaKAnMsdURCJ5Z3Za8FsI5PMH\n4UJPAMTy9y2cn+HLi7bnZXOAD36QstraXiq0tRAKXKUmjOdwC3z4OfKHVR5LV3c=\n=kKF+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c185d98e50dbf923807dd64229ed9050f6f1245\nparent 0e5d8883ccbe4a125e8da07a4be6c791838e9134\nparent 44d61766b57d67e137cfede6a2fbff415d808b58\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641066256 +0000\ncommitter GitHub <noreply@github.com> 1641066256 +0000\n\nMerge #11156\n\n11156: internal: Record unresolved derive invocations in hir r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "html_url": "https://github.com/rust-lang/rust/commit/55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5d8883ccbe4a125e8da07a4be6c791838e9134", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5d8883ccbe4a125e8da07a4be6c791838e9134", "html_url": "https://github.com/rust-lang/rust/commit/0e5d8883ccbe4a125e8da07a4be6c791838e9134"}, {"sha": "44d61766b57d67e137cfede6a2fbff415d808b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d61766b57d67e137cfede6a2fbff415d808b58", "html_url": "https://github.com/rust-lang/rust/commit/44d61766b57d67e137cfede6a2fbff415d808b58"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "645b10f8534e11fb0c173152aef7bd50c2ada83f", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{name::AsName, ExpansionInfo, MacroCallId, MacroCallLoc};\n+use hir_expand::{name::AsName, ExpansionInfo, MacroCallId};\n use hir_ty::{associated_type_shorthand_candidates, Interner};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -160,7 +160,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.expand_attr_macro(item)\n     }\n \n-    pub fn resolve_derive_macro(&self, derive: &ast::Attr) -> Option<Vec<MacroDef>> {\n+    pub fn resolve_derive_macro(&self, derive: &ast::Attr) -> Option<Vec<Option<MacroDef>>> {\n         self.imp.resolve_derive_macro(derive)\n     }\n \n@@ -447,24 +447,21 @@ impl<'db> SemanticsImpl<'db> {\n         Some(node)\n     }\n \n-    fn resolve_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<MacroDef>> {\n+    fn resolve_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<Option<MacroDef>>> {\n         let res = self\n             .derive_macro_calls(attr)?\n-            .iter()\n-            .map(|&call| {\n-                let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call);\n-                MacroDef { id: loc.def }\n-            })\n+            .into_iter()\n+            .map(|call| Some(MacroDef { id: self.db.lookup_intern_macro_call(call?).def }))\n             .collect();\n         Some(res)\n     }\n \n     fn expand_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<SyntaxNode>> {\n         let res: Vec<_> = self\n             .derive_macro_calls(attr)?\n-            .iter()\n-            .map(|call| call.as_file())\n-            .flat_map(|file_id| {\n+            .into_iter()\n+            .flat_map(|call| {\n+                let file_id = call?.as_file();\n                 let node = self.db.parse_or_expand(file_id)?;\n                 self.cache(node.clone(), file_id);\n                 Some(node)\n@@ -473,7 +470,7 @@ impl<'db> SemanticsImpl<'db> {\n         Some(res)\n     }\n \n-    fn derive_macro_calls(&self, attr: &ast::Attr) -> Option<Vec<MacroCallId>> {\n+    fn derive_macro_calls(&self, attr: &ast::Attr) -> Option<Vec<Option<MacroCallId>>> {\n         let item = attr.syntax().parent().and_then(ast::Item::cast)?;\n         let file_id = self.find_file(item.syntax()).file_id;\n         let item = InFile::new(file_id, &item);"}, {"sha": "495c84e65f43e0a73a9a5d48f6beff778084523a", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -248,7 +248,7 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         item: InFile<&ast::Item>,\n         src: InFile<ast::Attr>,\n-    ) -> Option<&[MacroCallId]> {\n+    ) -> Option<&[Option<MacroCallId>]> {\n         let map = self.dyn_map(item)?;\n         map[keys::DERIVE_MACRO].get(&src).map(AsRef::as_ref)\n     }"}, {"sha": "5ab236aa3d3b6098c949316c36cf76782b60c13e", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -6,7 +6,6 @@\n \n use either::Either;\n use hir_expand::HirFileId;\n-use itertools::Itertools;\n use syntax::ast::HasAttrs;\n \n use crate::{\n@@ -123,8 +122,7 @@ impl ChildBySource for ItemScope {\n         });\n         self.derive_macro_invocs().for_each(|(ast_id, calls)| {\n             let item = ast_id.to_node(db.upcast());\n-            let grouped = calls.iter().copied().into_group_map();\n-            for (attr_id, calls) in grouped {\n+            for (attr_id, calls) in calls {\n                 if let Some(attr) = item.attrs().nth(attr_id.ast_index as usize) {\n                     res[keys::DERIVE_MACRO].insert(ast_id.with_value(attr), calls.into());\n                 }"}, {"sha": "25369fdb268cbd3ed819db9f55a7d8a50d0b046e", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -8,7 +8,7 @@ use hir_expand::{name::Name, AstId, MacroCallId, MacroDefKind};\n use once_cell::sync::Lazy;\n use profile::Count;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use smallvec::SmallVec;\n+use smallvec::{smallvec, SmallVec};\n use stdx::format_to;\n use syntax::ast;\n \n@@ -64,7 +64,10 @@ pub struct ItemScope {\n     // be all resolved to the last one defined if shadowing happens.\n     legacy_macros: FxHashMap<Name, MacroDefId>,\n     attr_macros: FxHashMap<AstId<ast::Item>, MacroCallId>,\n-    derive_macros: FxHashMap<AstId<ast::Item>, SmallVec<[(AttrId, MacroCallId); 1]>>,\n+    /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n+    /// paired with the derive macro invocations for the specific attribute.\n+    derive_macros:\n+        FxHashMap<AstId<ast::Item>, SmallVec<[(AttrId, SmallVec<[Option<MacroCallId>; 1]>); 1]>>,\n }\n \n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n@@ -199,19 +202,40 @@ impl ItemScope {\n         self.attr_macros.iter().map(|(k, v)| (*k, *v))\n     }\n \n-    pub(crate) fn add_derive_macro_invoc(\n+    pub(crate) fn set_derive_macro_invoc(\n         &mut self,\n         item: AstId<ast::Item>,\n         call: MacroCallId,\n         attr_id: AttrId,\n+        idx: usize,\n     ) {\n-        self.derive_macros.entry(item).or_default().push((attr_id, call));\n+        if let Some(derives) = self.derive_macros.get_mut(&item) {\n+            if let Some((_, invocs)) = derives.iter_mut().find(|&&mut (id, _)| id == attr_id) {\n+                invocs[idx] = Some(call);\n+            }\n+        }\n+    }\n+\n+    /// We are required to set this up front as derive invocation recording happens out of order\n+    /// due to the fixed pointer iteration loop being able to record some derives later than others\n+    /// independent of their indices.\n+    pub(crate) fn init_derive_attribute(\n+        &mut self,\n+        item: AstId<ast::Item>,\n+        attr_id: AttrId,\n+        len: usize,\n+    ) {\n+        self.derive_macros.entry(item).or_default().push((attr_id, smallvec![None; len]));\n     }\n \n     pub(crate) fn derive_macro_invocs(\n         &self,\n-    ) -> impl Iterator<Item = (AstId<ast::Item>, &[(AttrId, MacroCallId)])> + '_ {\n-        self.derive_macros.iter().map(|(k, v)| (*k, v.as_ref()))\n+    ) -> impl Iterator<\n+        Item = (AstId<ast::Item>, impl Iterator<Item = (AttrId, &[Option<MacroCallId>])>),\n+    > + '_ {\n+        self.derive_macros\n+            .iter()\n+            .map(|(k, v)| (*k, v.iter().map(|(attr_id, invocs)| (*attr_id, &**invocs))))\n     }\n \n     pub(crate) fn unnamed_trait_vis(&self, tr: TraitId) -> Option<Visibility> {"}, {"sha": "6a7dc13ff17d976502a2d1f41b56886e647f8b0b", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -33,7 +33,7 @@ pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n pub const MACRO: Key<ast::Macro, MacroDefId> = Key::new();\n pub const ATTR_MACRO: Key<ast::Item, MacroCallId> = Key::new();\n-pub const DERIVE_MACRO: Key<ast::Attr, Box<[MacroCallId]>> = Key::new();\n+pub const DERIVE_MACRO: Key<ast::Attr, Box<[Option<MacroCallId>]>> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "ca8afe8cbfd762633b0bba56cb083fa8add5cd85", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -219,7 +219,7 @@ struct MacroDirective {\n #[derive(Clone, Debug, Eq, PartialEq)]\n enum MacroDirectiveKind {\n     FnLike { ast_id: AstIdWithPath<ast::MacroCall>, expand_to: ExpandTo },\n-    Derive { ast_id: AstIdWithPath<ast::Item>, derive_attr: AttrId },\n+    Derive { ast_id: AstIdWithPath<ast::Item>, derive_attr: AttrId, derive_pos: usize },\n     Attr { ast_id: AstIdWithPath<ast::Item>, attr: Attr, mod_item: ModItem, tree: TreeId },\n }\n \n@@ -1064,7 +1064,7 @@ impl DefCollector<'_> {\n                         return false;\n                     }\n                 }\n-                MacroDirectiveKind::Derive { ast_id, derive_attr } => {\n+                MacroDirectiveKind::Derive { ast_id, derive_attr, derive_pos } => {\n                     let call_id = derive_macro_as_call_id(\n                         ast_id,\n                         *derive_attr,\n@@ -1073,10 +1073,11 @@ impl DefCollector<'_> {\n                         &resolver,\n                     );\n                     if let Ok(call_id) = call_id {\n-                        self.def_map.modules[directive.module_id].scope.add_derive_macro_invoc(\n+                        self.def_map.modules[directive.module_id].scope.set_derive_macro_invoc(\n                             ast_id.ast_id,\n                             call_id,\n                             *derive_attr,\n+                            *derive_pos,\n                         );\n \n                         resolved.push((\n@@ -1146,18 +1147,25 @@ impl DefCollector<'_> {\n \n                         match attr.parse_derive() {\n                             Some(derive_macros) => {\n-                                for path in derive_macros {\n+                                let mut len = 0;\n+                                for (idx, path) in derive_macros.enumerate() {\n                                     let ast_id = AstIdWithPath::new(file_id, ast_id.value, path);\n                                     self.unresolved_macros.push(MacroDirective {\n                                         module_id: directive.module_id,\n                                         depth: directive.depth + 1,\n                                         kind: MacroDirectiveKind::Derive {\n                                             ast_id,\n                                             derive_attr: attr.id,\n+                                            derive_pos: idx,\n                                         },\n                                         container: directive.container,\n                                     });\n+                                    len = idx;\n                                 }\n+\n+                                self.def_map.modules[directive.module_id]\n+                                    .scope\n+                                    .init_derive_attribute(ast_id, attr.id, len + 1);\n                             }\n                             None => {\n                                 let diag = DefDiagnostic::malformed_derive("}, {"sha": "5b22408a2cb13831ee9687c66f85b1c38fb43ea3", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3297e7820f7f4bdbbd30dc62c589e5f93225b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=55f3297e7820f7f4bdbbd30dc62c589e5f93225b", "patch": "@@ -16,7 +16,7 @@ use crate::{\n pub(super) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, attr: &ast::Attr) {\n     let core = ctx.famous_defs().core();\n     let existing_derives: FxHashSet<_> =\n-        ctx.sema.resolve_derive_macro(attr).into_iter().flatten().collect();\n+        ctx.sema.resolve_derive_macro(attr).into_iter().flatten().flatten().collect();\n \n     for (name, mac) in get_derives_in_scope(ctx) {\n         if existing_derives.contains(&mac) {"}]}