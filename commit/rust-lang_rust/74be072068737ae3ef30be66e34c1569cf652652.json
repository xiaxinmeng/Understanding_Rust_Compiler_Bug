{"sha": "74be072068737ae3ef30be66e34c1569cf652652", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YmUwNzIwNjg3MzdhZTNlZjMwYmU2NmUzNGMxNTY5Y2Y2NTI2NTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-06T12:18:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-06T12:18:12Z"}, "message": "Auto merge of #45737 - oli-obk:json, r=petrochenkov\n\nPretty print json in ui tests\n\nI found the json output in one line to not be useful for reviewing\n\nr? @petrochenkov", "tree": {"sha": "defd4700386fe213eecc1ab1e7e4003365b84cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/defd4700386fe213eecc1ab1e7e4003365b84cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74be072068737ae3ef30be66e34c1569cf652652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74be072068737ae3ef30be66e34c1569cf652652", "html_url": "https://github.com/rust-lang/rust/commit/74be072068737ae3ef30be66e34c1569cf652652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74be072068737ae3ef30be66e34c1569cf652652/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19402f11e12042367f2b711155cdde61a608b660", "url": "https://api.github.com/repos/rust-lang/rust/commits/19402f11e12042367f2b711155cdde61a608b660", "html_url": "https://github.com/rust-lang/rust/commit/19402f11e12042367f2b711155cdde61a608b660"}, {"sha": "6d6fb2ef97b81cd5fd39c86b881879d16ecd31c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6fb2ef97b81cd5fd39c86b881879d16ecd31c0", "html_url": "https://github.com/rust-lang/rust/commit/6d6fb2ef97b81cd5fd39c86b881879d16ecd31c0"}], "stats": {"total": 551, "additions": 471, "deletions": 80}, "files": [{"sha": "c4fc30429e0aabe965516f3fcd8c68d186c57a5f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 61, "deletions": 55, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -155,7 +155,7 @@ impl OutputType {\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ErrorOutputType {\n     HumanReadable(ColorConfig),\n-    Json,\n+    Json(bool),\n     Short(ColorConfig),\n }\n \n@@ -1433,7 +1433,8 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n         match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n             Some(\"human\") => ErrorOutputType::HumanReadable(color),\n-            Some(\"json\")  => ErrorOutputType::Json,\n+            Some(\"json\")  => ErrorOutputType::Json(false),\n+            Some(\"pretty-json\") => ErrorOutputType::Json(true),\n             Some(\"short\") => ErrorOutputType::Short(color),\n \n             None => ErrorOutputType::HumanReadable(color),\n@@ -1474,6 +1475,11 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let debugging_opts = build_debugging_options(matches, error_format);\n \n+    if !debugging_opts.unstable_options && error_format == ErrorOutputType::Json(true) {\n+        early_error(ErrorOutputType::Json(false),\n+                    \"--error-format=pretty-json is unstable\");\n+    }\n+\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -2254,46 +2260,46 @@ mod tests {\n         let mut v5 = super::basic_options();\n \n         // Reference\n-        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Native changed\n-        v2.search_paths.add_path(\"native=XXX\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v2.search_paths.add_path(\"native=XXX\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Crate changed\n-        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"crate=XXX\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"crate=XXX\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Dependency changed\n-        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"dependency=XXX\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"dependency=XXX\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Framework changed\n-        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"framework=XXX\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"framework=XXX\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // All changed\n-        v5.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"all=XXX\", super::ErrorOutputType::Json);\n+        v5.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"all=XXX\", super::ErrorOutputType::Json(false));\n \n         assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n@@ -2316,29 +2322,29 @@ mod tests {\n         let mut v4 = super::basic_options();\n \n         // Reference\n-        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-\n-        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-\n-        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-\n-        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n+        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+\n+        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+\n+        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+\n+        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "39cf50787effedeb7353e5fbf462ac03551bf1b0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -372,7 +372,7 @@ impl Session {\n         match self.opts.error_format {\n             // when outputting JSON for tool consumption, the tool might want\n             // the duplicates\n-            config::ErrorOutputType::Json => {\n+            config::ErrorOutputType::Json(_) => {\n                 do_method()\n             },\n             _ => {\n@@ -736,11 +736,11 @@ pub fn build_session_with_codemap(sopts: config::Options,\n         (config::ErrorOutputType::HumanReadable(_), Some(dst)) => {\n             Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false))\n         }\n-        (config::ErrorOutputType::Json, None) => {\n-            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone()))\n+        (config::ErrorOutputType::Json(pretty), None) => {\n+            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(), pretty))\n         }\n-        (config::ErrorOutputType::Json, Some(dst)) => {\n-            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone()))\n+        (config::ErrorOutputType::Json(pretty), Some(dst)) => {\n+            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(), pretty))\n         }\n         (config::ErrorOutputType::Short(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true))\n@@ -918,7 +918,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false))\n         }\n-        config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n+        config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n         config::ErrorOutputType::Short(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, true))\n         }\n@@ -933,7 +933,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false))\n         }\n-        config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n+        config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n         config::ErrorOutputType::Short(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, true))\n         }"}, {"sha": "74a762f2f622cdf702840e9377fc3d46a39fb312", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -30,44 +30,54 @@ use std::rc::Rc;\n use std::io::{self, Write};\n use std::vec;\n \n-use rustc_serialize::json::as_json;\n+use rustc_serialize::json::{as_json, as_pretty_json};\n \n pub struct JsonEmitter {\n     dst: Box<Write + Send>,\n     registry: Option<Registry>,\n     cm: Rc<CodeMapper + 'static>,\n+    pretty: bool,\n }\n \n impl JsonEmitter {\n     pub fn stderr(registry: Option<Registry>,\n-                  code_map: Rc<CodeMap>) -> JsonEmitter {\n+                  code_map: Rc<CodeMap>,\n+                  pretty: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             cm: code_map,\n+            pretty,\n         }\n     }\n \n-    pub fn basic() -> JsonEmitter {\n+    pub fn basic(pretty: bool) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n-        JsonEmitter::stderr(None, Rc::new(CodeMap::new(file_path_mapping)))\n+        JsonEmitter::stderr(None, Rc::new(CodeMap::new(file_path_mapping)), pretty)\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<Registry>,\n-               code_map: Rc<CodeMap>) -> JsonEmitter {\n+               code_map: Rc<CodeMap>,\n+               pretty: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             cm: code_map,\n+            pretty,\n         }\n     }\n }\n \n impl Emitter for JsonEmitter {\n     fn emit(&mut self, db: &DiagnosticBuilder) {\n         let data = Diagnostic::from_diagnostic_builder(db, self);\n-        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+        let result = if self.pretty {\n+            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+        } else {\n+            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+        };\n+        if let Err(e) = result {\n             panic!(\"failed to print diagnostics: {:?}\", e);\n         }\n     }\n@@ -85,9 +95,7 @@ struct Diagnostic {\n     spans: Vec<DiagnosticSpan>,\n     /// Associated diagnostic messages.\n     children: Vec<Diagnostic>,\n-    /// The message as rustc would render it. Currently this is only\n-    /// `Some` for \"suggestions\", but eventually it will include all\n-    /// snippets.\n+    /// The message as rustc would render it. Currently this is always `None`\n     rendered: Option<String>,\n }\n \n@@ -110,9 +118,7 @@ struct DiagnosticSpan {\n     /// Label that should be placed at this location (if any)\n     label: Option<String>,\n     /// If we are suggesting a replacement, this will contain text\n-    /// that should be sliced in atop this span. You may prefer to\n-    /// load the fully rendered version from the parent `Diagnostic`,\n-    /// however.\n+    /// that should be sliced in atop this span.\n     suggested_replacement: Option<String>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,"}, {"sha": "ad501e668095ae86cade1f29b49da5929e08a7ca", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --error-format json\n+// compile-flags: --error-format pretty-json -Zunstable-options\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "e166f7011b58ac42a2b63205b136046e30dee436", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -1 +1,91 @@\n-{\"message\":\"unnecessary parentheses around assigned value\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":1001,\"byte_end\":1014,\"line_start\":24,\"line_end\":24,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"lint level defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":847,\"byte_end\":860,\"line_start\":19,\"line_end\":19,\"column_start\":9,\"column_end\":22,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_parens)]\",\"highlight_start\":9,\"highlight_end\":22}],\"label\":null,\"suggested_replacement\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":1001,\"byte_end\":1014,\"line_start\":24,\"line_end\":24,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":\"1 / (2 + 3)\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":null}\n+{\n+  \"message\": \"unnecessary parentheses around assigned value\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n+      \"byte_start\": 1027,\n+      \"byte_end\": 1040,\n+      \"line_start\": 24,\n+      \"line_end\": 24,\n+      \"column_start\": 14,\n+      \"column_end\": 27,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    let _a = (1 / (2 + 3));\",\n+          \"highlight_start\": 14,\n+          \"highlight_end\": 27\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"lint level defined here\",\n+      \"code\": null,\n+      \"level\": \"note\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n+          \"byte_start\": 873,\n+          \"byte_end\": 886,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 9,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"#![warn(unused_parens)]\",\n+              \"highlight_start\": 9,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": null,\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    },\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n+          \"byte_start\": 1027,\n+          \"byte_end\": 1040,\n+          \"line_start\": 24,\n+          \"line_end\": 24,\n+          \"column_start\": 14,\n+          \"column_end\": 27,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    let _a = (1 / (2 + 3));\",\n+              \"highlight_start\": 14,\n+              \"highlight_end\": 27\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"1 / (2 + 3)\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": null\n+}"}, {"sha": "27232c4fec4ad89590c882df463e1bef7faaae28", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --error-format json\n+// compile-flags: --error-format pretty-json -Zunstable-options\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "fd3b5fe1adadf0be0a26e802ecbf8400a02aac2a", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 290, "deletions": 2, "changes": 292, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -1,2 +1,290 @@\n-{\"message\":\"cannot find type `Iter` in this scope\",\"code\":{\"code\":\"E0412\",\"explanation\":\"/nThe type name used is not in scope./n/nErroneous code examples:/n/n```compile_fail,E0412/nimpl Something {} // error: type name `Something` is not in scope/n/n// or:/n/ntrait Foo {/n    fn bar(N); // error: type name `N` is not in scope/n}/n/n// or:/n/nfn foo(x: T) {} // type name `T` is not in scope/n```/n/nTo fix this error, please verify you didn't misspell the type name, you did/ndeclare it or imported it into the scope. Examples:/n/n```/nstruct Something;/n/nimpl Something {} // ok!/n/n// or:/n/ntrait Foo {/n    type N;/n/n    fn bar(_: Self::N); // ok!/n}/n/n// or:/n/nfn foo<T>(x: T) {} // ok!/n```/n/nAnother case that causes this error is when a type is imported into a parent/nmodule. To fix this, you can follow the suggestion and use File directly or/n`use super::File;` which will import the types from the parent namespace. An/nexample that causes this error is below:/n/n```compile_fail,E0412/nuse std::fs::File;/n/nmod foo {/n    fn some_function(f: File) {}/n}/n```/n/n```/nuse std::fs::File;/n/nmod foo {/n    // either/n    use super::File;/n    // or/n    // use std::fs::File;/n    fn foo(f: File) {}/n}/n# fn main() {} // don't insert it for us; that'll break imports/n```/n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":862,\"byte_end\":866,\"line_start\":20,\"line_end\":20,\"column_start\":12,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"    let x: Iter;\",\"highlight_start\":12,\"highlight_end\":16}],\"label\":\"not found in this scope\",\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"possible candidates are found in other modules, you can import them into scope\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::binary_heap::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::btree_map::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::btree_set::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::hash_map::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::hash_set::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::linked_list::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::vec_deque::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::option::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::path::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::result::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::slice::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::sync::mpsc::Iter;/n/n\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":null}\n-{\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":null}\n+{\n+  \"message\": \"cannot find type `Iter` in this scope\",\n+  \"code\": {\n+    \"code\": \"E0412\",\n+    \"explanation\": \"/nThe type name used is not in scope./n/nErroneous code examples:/n/n```compile_fail,E0412/nimpl Something {} // error: type name `Something` is not in scope/n/n// or:/n/ntrait Foo {/n    fn bar(N); // error: type name `N` is not in scope/n}/n/n// or:/n/nfn foo(x: T) {} // type name `T` is not in scope/n```/n/nTo fix this error, please verify you didn't misspell the type name, you did/ndeclare it or imported it into the scope. Examples:/n/n```/nstruct Something;/n/nimpl Something {} // ok!/n/n// or:/n/ntrait Foo {/n    type N;/n/n    fn bar(_: Self::N); // ok!/n}/n/n// or:/n/nfn foo<T>(x: T) {} // ok!/n```/n/nAnother case that causes this error is when a type is imported into a parent/nmodule. To fix this, you can follow the suggestion and use File directly or/n`use super::File;` which will import the types from the parent namespace. An/nexample that causes this error is below:/n/n```compile_fail,E0412/nuse std::fs::File;/n/nmod foo {/n    fn some_function(f: File) {}/n}/n```/n/n```/nuse std::fs::File;/n/nmod foo {/n    // either/n    use super::File;/n    // or/n    // use std::fs::File;/n    fn foo(f: File) {}/n}/n# fn main() {} // don't insert it for us; that'll break imports/n```/n\"\n+  },\n+  \"level\": \"error\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+      \"byte_start\": 888,\n+      \"byte_end\": 892,\n+      \"line_start\": 20,\n+      \"line_end\": 20,\n+      \"column_start\": 12,\n+      \"column_end\": 16,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    let x: Iter;\",\n+          \"highlight_start\": 12,\n+          \"highlight_end\": 16\n+        }\n+      ],\n+      \"label\": \"not found in this scope\",\n+      \"suggested_replacement\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"possible candidates are found in other modules, you can import them into scope\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::binary_heap::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::btree_map::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::btree_set::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::hash_map::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::hash_set::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::linked_list::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::collections::vec_deque::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::option::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::path::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::result::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::slice::Iter;/n/n\",\n+          \"expansion\": null\n+        },\n+        {\n+          \"file_name\": \"$DIR/use_suggestion_json.rs\",\n+          \"byte_start\": 865,\n+          \"byte_end\": 865,\n+          \"line_start\": 19,\n+          \"line_end\": 19,\n+          \"column_start\": 1,\n+          \"column_end\": 1,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"fn main() {\",\n+              \"highlight_start\": 1,\n+              \"highlight_end\": 1\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"use std::sync::mpsc::Iter;/n/n\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": null\n+}\n+{\n+  \"message\": \"aborting due to previous error\",\n+  \"code\": null,\n+  \"level\": \"error\",\n+  \"spans\": [],\n+  \"children\": [],\n+  \"rendered\": null\n+}"}, {"sha": "16c48ccfdd1cd440b36cc1ea639bf41fe10447e1", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74be072068737ae3ef30be66e34c1569cf652652/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=74be072068737ae3ef30be66e34c1569cf652652", "patch": "@@ -2391,7 +2391,8 @@ actual:\\n\\\n     fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let cflags = self.props.compile_flags.join(\" \");\n-        let parent_dir_str = if cflags.contains(\"--error-format json\") {\n+        let parent_dir_str = if cflags.contains(\"--error-format json\")\n+                             || cflags.contains(\"--error-format pretty-json\") {\n             parent_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n         } else {\n             parent_dir.display().to_string()"}]}