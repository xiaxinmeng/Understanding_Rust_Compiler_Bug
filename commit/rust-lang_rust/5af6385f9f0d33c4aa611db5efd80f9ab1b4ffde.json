{"sha": "5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde", "node_id": "C_kwDOAAsO6NoAKDVhZjYzODVmOWYwZDMzYzRhYTYxMWRiNWVmZDgwZjlhYjFiNGZmZGU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-11T03:18:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-11T03:18:50Z"}, "message": "Rollup merge of #109860 - zyedidia:riscv-relax, r=petrochenkov\n\nAdd support for RISC-V relax target feature\n\nThis adds `relax` as an allowed RISC-V target feature. The relax feature in LLVM enables [linker relaxation](https://www.sifive.com/blog/all-aboard-part-3-linker-relaxation-in-riscv-toolchain), an optimization specific to RISC-V that allows global variable accesses to be resolved by the linker by using the global pointer (`gp`) register (rather than constructing the addresses from scratch for each access). Enabling `relax` will cause LLVM to emit relocations in the object file that support this. The feature can be enabled in rustc with `-C target-feature=+relax`.\n\nCurrently this feature is disabled by default, but maybe it should be enabled by default since it is an easy performance improvement (but requires the `gp` register to be set up properly). GCC/Clang enable this feature by default (for both hosted/bare-metal targets), and include the `-mno-relax` flag to disable it (see [here](https://github.com/llvm/llvm-project/blob/466d554dcab39c3d42fe0c5b588b795e0e4b9d0d/clang/lib/Driver/ToolChains/Arch/RISCV.cpp#L145) for the code that enables it in Clang). I think it would make sense to enable by default, at least for all hosted targets since the `gp` register should be automatically set up by the runtime. For bare-metal targets, `gp` must be set up manually, so it is probably best to leave off by default to avoid breaking existing applications that do not set up `gp`. Leaving it disabled by default for all targets is also reasonable though.\n\nLet me know your thoughts. Thanks!\n\nFixes #109426.", "tree": {"sha": "c32d6a26fddf27c7b69d4c3e71062ebbb99fa3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32d6a26fddf27c7b69d4c3e71062ebbb99fa3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNNGaCRBK7hj4Ov3rIwAAEWsIABCxCj4jCt0yZ9AfyGFv1Myz\nBmA3wk0WvopZAYXmXmPaQi5kRKrXGZGKVCJ5MaC3MB3Yr0h9r4PoslVpxlIX0c/Y\nwWdYxxk9EyUJ4U/B10CAUvVM4SAmutqOtMIHbMJ/u6bVhNMGSj8gm1cyk6gegY5a\n3C8rXuWNylo4dxZauF0UtPIypLTa9X5TLInYTBI6/0y6aWSKHasedLLM1iJxEmHL\no8QjAEqlSRH1oEvnSXze4DMFbx633/Twndm4Deryn/sdj6VeluFgKThTL/La1LqM\nueHDhDgFaTWofLpeP2DjYOVyK+xQsCxUGf5oM1ewwtKweD68VRNzJq8h02mDkdw=\n=hZCB\n-----END PGP SIGNATURE-----\n", "payload": "tree c32d6a26fddf27c7b69d4c3e71062ebbb99fa3db\nparent a69cc45d8265e37646be24158137de5a428099ca\nparent 48be303272e8eb620665b73a7bd87cdb6508f6f1\nauthor Yuki Okushi <jtitor@2k36.org> 1681183130 +0900\ncommitter GitHub <noreply@github.com> 1681183130 +0900\n\nRollup merge of #109860 - zyedidia:riscv-relax, r=petrochenkov\n\nAdd support for RISC-V relax target feature\n\nThis adds `relax` as an allowed RISC-V target feature. The relax feature in LLVM enables [linker relaxation](https://www.sifive.com/blog/all-aboard-part-3-linker-relaxation-in-riscv-toolchain), an optimization specific to RISC-V that allows global variable accesses to be resolved by the linker by using the global pointer (`gp`) register (rather than constructing the addresses from scratch for each access). Enabling `relax` will cause LLVM to emit relocations in the object file that support this. The feature can be enabled in rustc with `-C target-feature=+relax`.\n\nCurrently this feature is disabled by default, but maybe it should be enabled by default since it is an easy performance improvement (but requires the `gp` register to be set up properly). GCC/Clang enable this feature by default (for both hosted/bare-metal targets), and include the `-mno-relax` flag to disable it (see [here](https://github.com/llvm/llvm-project/blob/466d554dcab39c3d42fe0c5b588b795e0e4b9d0d/clang/lib/Driver/ToolChains/Arch/RISCV.cpp#L145) for the code that enables it in Clang). I think it would make sense to enable by default, at least for all hosted targets since the `gp` register should be automatically set up by the runtime. For bare-metal targets, `gp` must be set up manually, so it is probably best to leave off by default to avoid breaking existing applications that do not set up `gp`. Leaving it disabled by default for all targets is also reasonable though.\n\nLet me know your thoughts. Thanks!\n\nFixes #109426.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde", "html_url": "https://github.com/rust-lang/rust/commit/5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69cc45d8265e37646be24158137de5a428099ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69cc45d8265e37646be24158137de5a428099ca", "html_url": "https://github.com/rust-lang/rust/commit/a69cc45d8265e37646be24158137de5a428099ca"}, {"sha": "48be303272e8eb620665b73a7bd87cdb6508f6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/48be303272e8eb620665b73a7bd87cdb6508f6f1", "html_url": "https://github.com/rust-lang/rust/commit/48be303272e8eb620665b73a7bd87cdb6508f6f1"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "611dd3d1cd18a6a535b790a123c6861592828e71", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=5af6385f9f0d33c4aa611db5efd80f9ab1b4ffde", "patch": "@@ -251,6 +251,7 @@ const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"e\", Some(sym::riscv_target_feature)),\n     (\"f\", Some(sym::riscv_target_feature)),\n     (\"m\", Some(sym::riscv_target_feature)),\n+    (\"relax\", Some(sym::riscv_target_feature)),\n     (\"v\", Some(sym::riscv_target_feature)),\n     (\"zba\", Some(sym::riscv_target_feature)),\n     (\"zbb\", Some(sym::riscv_target_feature)),"}]}