{"sha": "10a24cf649b4e136bb4f25cd295c2fb15125d71a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYTI0Y2Y2NDliNGUxMzZiYjRmMjVjZDI5NWMyZmIxNTEyNWQ3MWE=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-21T21:12:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:27Z"}, "message": "simplify and optimize `RootFilter`by determining if is contained first", "tree": {"sha": "3f953a565964882f114436e5be87451d3f452ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f953a565964882f114436e5be87451d3f452ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a24cf649b4e136bb4f25cd295c2fb15125d71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a24cf649b4e136bb4f25cd295c2fb15125d71a", "html_url": "https://github.com/rust-lang/rust/commit/10a24cf649b4e136bb4f25cd295c2fb15125d71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a24cf649b4e136bb4f25cd295c2fb15125d71a/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeed6cf53b9f6112329cc8a274dcf63bce887c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeed6cf53b9f6112329cc8a274dcf63bce887c50", "html_url": "https://github.com/rust-lang/rust/commit/eeed6cf53b9f6112329cc8a274dcf63bce887c50"}], "stats": {"total": 35, "additions": 11, "deletions": 24}, "files": [{"sha": "f4447be43df0587729394ac1b6dd2148e72f57ce", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/10a24cf649b4e136bb4f25cd295c2fb15125d71a/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a24cf649b4e136bb4f25cd295c2fb15125d71a/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=10a24cf649b4e136bb4f25cd295c2fb15125d71a", "patch": "@@ -17,16 +17,15 @@ mod io;\n \n use std::{\n     cmp::Reverse,\n-    ffi::OsStr,\n     fmt, fs, mem,\n-    path::{Component, Path, PathBuf},\n+    path::{Path, PathBuf},\n     sync::Arc,\n     thread,\n };\n \n use crossbeam_channel::Receiver;\n use ra_arena::{impl_arena_id, Arena, RawId};\n-use relative_path::RelativePathBuf;\n+use relative_path::{Component, RelativePath, RelativePathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n \n pub use crate::io::TaskResult as VfsTask;\n@@ -36,12 +35,7 @@ use io::{Task, TaskResult, WatcherChange, WatcherChangeData, Worker};\n /// several filters match a file (nested dirs), the most nested one wins.\n pub(crate) struct RootFilter {\n     root: PathBuf,\n-    filter: fn(RootEntry) -> bool,\n-}\n-\n-pub(crate) struct RootEntry<'a, 'b> {\n-    root: &'a Path,\n-    path: &'b Path,\n+    filter: fn(&Path, &RelativePath) -> bool,\n }\n \n impl RootFilter {\n@@ -54,27 +48,20 @@ impl RootFilter {\n     /// Check if this root can contain `path`. NB: even if this returns\n     /// true, the `path` might actually be conained in some nested root.\n     pub(crate) fn can_contain(&self, path: &Path) -> Option<RelativePathBuf> {\n-        if !(self.filter)(RootEntry {\n-            root: &self.root,\n-            path,\n-        }) {\n+        let rel_path = path.strip_prefix(&self.root).ok()?;\n+        let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n+        if !(self.filter)(path, rel_path.as_relative_path()) {\n             return None;\n         }\n-        let path = path.strip_prefix(&self.root).ok()?;\n-        RelativePathBuf::from_path(path).ok()\n+        Some(rel_path)\n     }\n }\n \n-pub(crate) fn default_filter(entry: RootEntry) -> bool {\n-    if entry.path.is_dir() {\n-        // first component relative to root is \"target\"\n-        entry\n-            .path\n-            .strip_prefix(entry.root)\n-            .map(|p| p.components().next() != Some(Component::Normal(OsStr::new(\"target\"))))\n-            .unwrap_or(false)\n+pub(crate) fn default_filter(path: &Path, rel_path: &RelativePath) -> bool {\n+    if path.is_dir() {\n+        rel_path.components().next() != Some(Component::Normal(\"target\"))\n     } else {\n-        entry.path.extension() == Some(OsStr::new(\"rs\"))\n+        rel_path.extension() == Some(\"rs\")\n     }\n }\n "}]}