{"sha": "fc9ecae4442ba39ed1474a129d10bd37c7fdab00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWVjYWU0NDQyYmEzOWVkMTQ3NGExMjlkMTBiZDM3YzdmZGFiMDA=", "commit": {"author": {"name": "Garming Sam", "email": "garming_sam@outlook.com", "date": "2015-08-10T06:39:24Z"}, "committer": {"name": "Garming Sam", "email": "garming_sam@outlook.com", "date": "2015-08-10T07:12:47Z"}, "message": "Modify the callback to be run from a macro", "tree": {"sha": "ffccb9b227d118e475a34283a6f602a28033f232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffccb9b227d118e475a34283a6f602a28033f232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9ecae4442ba39ed1474a129d10bd37c7fdab00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9ecae4442ba39ed1474a129d10bd37c7fdab00", "html_url": "https://github.com/rust-lang/rust/commit/fc9ecae4442ba39ed1474a129d10bd37c7fdab00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9ecae4442ba39ed1474a129d10bd37c7fdab00/comments", "author": {"login": "GSam", "id": 1924133, "node_id": "MDQ6VXNlcjE5MjQxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1924133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GSam", "html_url": "https://github.com/GSam", "followers_url": "https://api.github.com/users/GSam/followers", "following_url": "https://api.github.com/users/GSam/following{/other_user}", "gists_url": "https://api.github.com/users/GSam/gists{/gist_id}", "starred_url": "https://api.github.com/users/GSam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GSam/subscriptions", "organizations_url": "https://api.github.com/users/GSam/orgs", "repos_url": "https://api.github.com/users/GSam/repos", "events_url": "https://api.github.com/users/GSam/events{/privacy}", "received_events_url": "https://api.github.com/users/GSam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GSam", "id": 1924133, "node_id": "MDQ6VXNlcjE5MjQxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1924133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GSam", "html_url": "https://github.com/GSam", "followers_url": "https://api.github.com/users/GSam/followers", "following_url": "https://api.github.com/users/GSam/following{/other_user}", "gists_url": "https://api.github.com/users/GSam/gists{/gist_id}", "starred_url": "https://api.github.com/users/GSam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GSam/subscriptions", "organizations_url": "https://api.github.com/users/GSam/orgs", "repos_url": "https://api.github.com/users/GSam/repos", "events_url": "https://api.github.com/users/GSam/events{/privacy}", "received_events_url": "https://api.github.com/users/GSam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdba872944675a2c2aa146ab3caadbad14452e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdba872944675a2c2aa146ab3caadbad14452e97", "html_url": "https://github.com/rust-lang/rust/commit/fdba872944675a2c2aa146ab3caadbad14452e97"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "9a854d3c91d9f74e1c974ede1701292813eff578", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fc9ecae4442ba39ed1474a129d10bd37c7fdab00/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9ecae4442ba39ed1474a129d10bd37c7fdab00/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fc9ecae4442ba39ed1474a129d10bd37c7fdab00", "patch": "@@ -108,6 +108,17 @@ mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n+// Perform the callback, not walking deeper if the return is true\n+macro_rules! execute_callback {\n+    ($node: expr, $walker: expr) => (\n+        if let Some(ref callback) = $walker.callback {\n+            if callback($node, &mut $walker.resolved) {\n+                return;\n+            }\n+        }\n+    )\n+}\n+\n pub enum ResolutionError<'a> {\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n@@ -445,38 +456,22 @@ enum NameDefinition {\n \n impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n-        if let Some(ref callback) = self.callback {\n-            if callback(ast_map::Node::NodeItem(item), &mut self.resolved) {\n-                return;\n-            }\n-        }\n+        execute_callback!(ast_map::Node::NodeItem(item), self);\n         self.resolve_item(item);\n     }\n     fn visit_arm(&mut self, arm: &Arm) {\n         self.resolve_arm(arm);\n     }\n     fn visit_block(&mut self, block: &Block) {\n-        if let Some(ref callback) = self.callback {\n-            if callback(ast_map::Node::NodeBlock(block), &mut self.resolved) {\n-                return;\n-            }\n-        }\n+        execute_callback!(ast_map::Node::NodeBlock(block), self);\n         self.resolve_block(block);\n     }\n     fn visit_expr(&mut self, expr: &Expr) {\n-        if let Some(ref callback) = self.callback {\n-            if callback(ast_map::Node::NodeExpr(expr), &mut self.resolved) {\n-                return;\n-            }\n-        }\n+        execute_callback!(ast_map::Node::NodeExpr(expr), self);\n         self.resolve_expr(expr);\n     }\n     fn visit_local(&mut self, local: &Local) {\n-        if let Some(ref callback) = self.callback {\n-            if callback(ast_map::Node::NodeLocal(&*local.pat), &mut self.resolved) {\n-                return;\n-            }\n-        }\n+        execute_callback!(ast_map::Node::NodeLocal(&*local.pat), self);\n         self.resolve_local(local);\n     }\n     fn visit_ty(&mut self, ty: &Ty) {\n@@ -495,11 +490,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n     fn visit_variant(&mut self, variant: &ast::Variant, generics: &Generics) {\n-        if let Some(ref callback) = self.callback {\n-            if callback(ast_map::Node::NodeVariant(variant), &mut self.resolved) {\n-                return;\n-            }\n-        }\n+        execute_callback!(ast_map::Node::NodeVariant(variant), self);\n         if let Some(ref dis_expr) = variant.node.disr_expr {\n             // resolve the discriminator expr as a constant\n             self.with_constant_rib(|this| {\n@@ -523,11 +514,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &ast::ForeignItem) {\n-        if let Some(ref callback) = self.callback {\n-            if callback(ast_map::Node::NodeForeignItem(foreign_item), &mut self.resolved) {\n-                return;\n-            }\n-        }\n+        execute_callback!(ast_map::Node::NodeForeignItem(foreign_item), self);\n         let type_parameters = match foreign_item.node {\n             ForeignItemFn(_, ref generics) => {\n                 HasTypeParameters(generics, FnSpace, ItemRibKind)"}]}