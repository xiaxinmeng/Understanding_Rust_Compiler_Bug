{"sha": "ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNDVkZmVhMWUzN2JhNDBlYTNlMmM4YzZkZjA5OTFhM2Q0OTIxM2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T23:25:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T23:25:03Z"}, "message": "rename file_syntax -> source_file", "tree": {"sha": "d3538aa9f79e8145a246656a48c96ed63777171a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3538aa9f79e8145a246656a48c96ed63777171a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "html_url": "https://github.com/rust-lang/rust/commit/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c064b2a99fb9c0589672ae6c9848aaa9e0efcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c064b2a99fb9c0589672ae6c9848aaa9e0efcf", "html_url": "https://github.com/rust-lang/rust/commit/65c064b2a99fb9c0589672ae6c9848aaa9e0efcf"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "844dabb192810b84859083bfd543c9cf855c811d", "filename": "crates/ra_analysis/src/completion/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs?ref=ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn completions(\n     db: &db::RootDatabase,\n     position: FilePosition,\n ) -> Cancelable<Option<Vec<CompletionItem>>> {\n-    let original_file = db.file_syntax(position.file_id);\n+    let original_file = db.source_file(position.file_id);\n     // Insert a fake ident to get a valid parse tree\n     let file = {\n         let edit = AtomEdit::insert(position.offset, \"intellijRulezz\".to_string());"}, {"sha": "11154cc65284212b41bd57b28c375bcc742e724a", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "patch": "@@ -117,7 +117,7 @@ salsa::database_storage! {\n             fn crate_graph() for crate::input::CrateGraphQuery;\n         }\n         impl SyntaxDatabase {\n-            fn file_syntax() for FileSyntaxQuery;\n+            fn source_file() for SourceFileQuery;\n             fn file_lines() for FileLinesQuery;\n         }\n         impl symbol_index::SymbolsDatabase {\n@@ -139,16 +139,16 @@ salsa::database_storage! {\n \n salsa::query_group! {\n     pub(crate) trait SyntaxDatabase: crate::input::FilesDatabase + BaseDatabase {\n-        fn file_syntax(file_id: FileId) -> SourceFileNode {\n-            type FileSyntaxQuery;\n+        fn source_file(file_id: FileId) -> SourceFileNode {\n+            type SourceFileQuery;\n         }\n         fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n             type FileLinesQuery;\n         }\n     }\n }\n \n-fn file_syntax(db: &impl SyntaxDatabase, file_id: FileId) -> SourceFileNode {\n+fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> SourceFileNode {\n     let text = db.file_text(file_id);\n     SourceFileNode::parse(&*text)\n }"}, {"sha": "83f176b32ada5d15c40aa58b28ff8d32f73a0d22", "filename": "crates/ra_analysis/src/hir/module/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs?ref=ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "patch": "@@ -49,7 +49,7 @@ impl Module {\n         db: &impl HirDatabase,\n         position: FilePosition,\n     ) -> Cancelable<Option<Module>> {\n-        let file = db.file_syntax(position.file_id);\n+        let file = db.source_file(position.file_id);\n         let module_source = match find_node_at_offset::<ast::Module>(file.syntax(), position.offset)\n         {\n             Some(m) if !m.has_semi() => ModuleSource::new_inline(db, position.file_id, m),\n@@ -346,7 +346,7 @@ impl ModuleSource {\n     pub(crate) fn resolve(self, db: &impl HirDatabase) -> ModuleSourceNode {\n         match self {\n             ModuleSource::SourceFile(file_id) => {\n-                let syntax = db.file_syntax(file_id);\n+                let syntax = db.source_file(file_id);\n                 ModuleSourceNode::SourceFile(syntax.ast().owned())\n             }\n             ModuleSource::Module(item_id) => {"}, {"sha": "e7fba5d720dfb357e77952515e1682716fb7cec4", "filename": "crates/ra_analysis/src/hir/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs?ref=ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "patch": "@@ -38,7 +38,7 @@ pub(super) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n }\n \n pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {\n-    let source_file = db.file_syntax(file_id);\n+    let source_file = db.source_file(file_id);\n     let source_file = source_file.borrowed();\n     let mut res = SourceFileItems::default();\n     source_file"}, {"sha": "c86bc111a5f9d0c187287a948218d4363489f556", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "patch": "@@ -18,7 +18,7 @@ use salsa::{Database, ParallelDatabase};\n \n use crate::{\n     completion::{completions, CompletionItem},\n-    db::{self, FileSyntaxQuery, SyntaxDatabase},\n+    db::{self, SourceFileQuery, SyntaxDatabase},\n     hir::{\n         self,\n         FnSignatureInfo,\n@@ -189,7 +189,7 @@ impl fmt::Debug for AnalysisImpl {\n \n impl AnalysisImpl {\n     pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n-        self.db.file_syntax(file_id)\n+        self.db.source_file(file_id)\n     }\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n         self.db.file_lines(file_id)\n@@ -220,7 +220,7 @@ impl AnalysisImpl {\n                 .collect()\n         };\n         self.db\n-            .query(FileSyntaxQuery)\n+            .query(SourceFileQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n         Ok(query.search(&buf))\n     }\n@@ -270,7 +270,7 @@ impl AnalysisImpl {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n-        let file = self.db.file_syntax(position.file_id);\n+        let file = self.db.source_file(position.file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n             if let Some(fn_descr) =\n@@ -322,7 +322,7 @@ impl AnalysisImpl {\n     }\n \n     pub fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n-        let file = self.db.file_syntax(position.file_id);\n+        let file = self.db.source_file(position.file_id);\n         // Find the binding associated with the offset\n         let (binding, descr) = match find_binding(&self.db, &file, position) {\n             None => return Vec::new(),\n@@ -365,13 +365,13 @@ impl AnalysisImpl {\n         file_id: FileId,\n         symbol: FileSymbol,\n     ) -> Cancelable<Option<String>> {\n-        let file = self.db.file_syntax(file_id);\n+        let file = self.db.source_file(file_id);\n \n         Ok(symbol.docs(&file))\n     }\n \n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        let syntax = self.db.file_syntax(file_id);\n+        let syntax = self.db.source_file(file_id);\n \n         let mut res = ra_editor::diagnostics(&syntax)\n             .into_iter()\n@@ -459,7 +459,7 @@ impl AnalysisImpl {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n-        let file = self.db.file_syntax(position.file_id);\n+        let file = self.db.source_file(position.file_id);\n         let syntax = file.syntax();\n \n         // Find the calling expression and it's NameRef\n@@ -470,7 +470,7 @@ impl AnalysisImpl {\n         let file_symbols = self.index_resolve(name_ref)?;\n         for (fn_file_id, fs) in file_symbols {\n             if fs.kind == FN_DEF {\n-                let fn_file = self.db.file_syntax(fn_file_id);\n+                let fn_file = self.db.source_file(fn_file_id);\n                 if let Some(fn_def) = find_node_at_offset(fn_file.syntax(), fs.node_range.start()) {\n                     let descr = hir::Function::guess_from_source(&*self.db, fn_file_id, fn_def);\n                     if let Some(descriptor) = descr.signature_info(&*self.db) {"}, {"sha": "747b34e3873c3eb5a3ff4802beac7d8f6f0a94af", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "patch": "@@ -32,7 +32,7 @@ salsa::query_group! {\n \n fn file_symbols(db: &impl SyntaxDatabase, file_id: FileId) -> Cancelable<Arc<SymbolIndex>> {\n     db.check_canceled()?;\n-    let syntax = db.file_syntax(file_id);\n+    let syntax = db.source_file(file_id);\n     Ok(Arc::new(SymbolIndex::for_file(file_id, syntax)))\n }\n "}]}