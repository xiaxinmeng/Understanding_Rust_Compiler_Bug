{"sha": "552b77e3b9841f697d954f2ab341711dbff8d029", "node_id": "C_kwDOAAsO6NoAKDU1MmI3N2UzYjk4NDFmNjk3ZDk1NGYyYWIzNDE3MTFkYmZmOGQwMjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-26T18:29:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-26T18:33:13Z"}, "message": "fix types in env shim to avoid ptr-int transmutes", "tree": {"sha": "96fcac0645a8d1abba966e8effa64b48d8a99f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fcac0645a8d1abba966e8effa64b48d8a99f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552b77e3b9841f697d954f2ab341711dbff8d029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552b77e3b9841f697d954f2ab341711dbff8d029", "html_url": "https://github.com/rust-lang/rust/commit/552b77e3b9841f697d954f2ab341711dbff8d029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552b77e3b9841f697d954f2ab341711dbff8d029/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede470e1fcb8b6e488f39c48a84cde0f639adcc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede470e1fcb8b6e488f39c48a84cde0f639adcc9", "html_url": "https://github.com/rust-lang/rust/commit/ede470e1fcb8b6e488f39c48a84cde0f639adcc9"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "9c763149ffa21f0e527158b55dccc4663a667781", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/552b77e3b9841f697d954f2ab341711dbff8d029/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552b77e3b9841f697d954f2ab341711dbff8d029/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=552b77e3b9841f697d954f2ab341711dbff8d029", "patch": "@@ -10,13 +10,14 @@ use std::time::Instant;\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n+use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::{\n     mir,\n     ty::{\n         self,\n         layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout},\n-        Instance, TyCtxt,\n+        Instance, TyCtxt, TypeAndMut,\n     },\n };\n use rustc_span::def_id::{CrateNum, DefId};\n@@ -269,19 +270,23 @@ pub struct PrimitiveLayouts<'tcx> {\n     pub u32: TyAndLayout<'tcx>,\n     pub usize: TyAndLayout<'tcx>,\n     pub bool: TyAndLayout<'tcx>,\n+    pub mut_raw_ptr: TyAndLayout<'tcx>,\n }\n \n impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n     fn new(layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Result<Self, LayoutError<'tcx>> {\n+        let tcx = layout_cx.tcx;\n+        let mut_raw_ptr = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Mut });\n         Ok(Self {\n-            unit: layout_cx.layout_of(layout_cx.tcx.mk_unit())?,\n-            i8: layout_cx.layout_of(layout_cx.tcx.types.i8)?,\n-            i32: layout_cx.layout_of(layout_cx.tcx.types.i32)?,\n-            isize: layout_cx.layout_of(layout_cx.tcx.types.isize)?,\n-            u8: layout_cx.layout_of(layout_cx.tcx.types.u8)?,\n-            u32: layout_cx.layout_of(layout_cx.tcx.types.u32)?,\n-            usize: layout_cx.layout_of(layout_cx.tcx.types.usize)?,\n-            bool: layout_cx.layout_of(layout_cx.tcx.types.bool)?,\n+            unit: layout_cx.layout_of(tcx.mk_unit())?,\n+            i8: layout_cx.layout_of(tcx.types.i8)?,\n+            i32: layout_cx.layout_of(tcx.types.i32)?,\n+            isize: layout_cx.layout_of(tcx.types.isize)?,\n+            u8: layout_cx.layout_of(tcx.types.u8)?,\n+            u32: layout_cx.layout_of(tcx.types.u32)?,\n+            usize: layout_cx.layout_of(tcx.types.usize)?,\n+            bool: layout_cx.layout_of(tcx.types.bool)?,\n+            mut_raw_ptr: layout_cx.layout_of(mut_raw_ptr)?,\n         })\n     }\n }"}, {"sha": "6a8a9553e93639a875c773619398c5984d4b5ab0", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/552b77e3b9841f697d954f2ab341711dbff8d029/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552b77e3b9841f697d954f2ab341711dbff8d029/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=552b77e3b9841f697d954f2ab341711dbff8d029", "patch": "@@ -1,7 +1,7 @@\n use crate::*;\n use rustc_ast::ast::Mutability;\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{self, Instance, TypeAndMut};\n+use rustc_middle::ty::{self, Instance};\n use rustc_span::{BytePos, Loc, Symbol};\n use rustc_target::{abi::Size, spec::abi::Abi};\n use std::convert::TryInto as _;\n@@ -71,8 +71,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let len: u64 = ptrs.len().try_into().unwrap();\n \n-        let ptr_ty = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Mut });\n-\n+        let ptr_ty = this.machine.layouts.mut_raw_ptr.ty;\n         let array_layout = this.layout_of(tcx.mk_array(ptr_ty, len)).unwrap();\n \n         match flags {"}, {"sha": "c2050647abca2a3d9535399a483e30ae134d96b0", "filename": "src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/552b77e3b9841f697d954f2ab341711dbff8d029/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552b77e3b9841f697d954f2ab341711dbff8d029/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=552b77e3b9841f697d954f2ab341711dbff8d029", "patch": "@@ -440,7 +440,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             // No `environ` allocated yet, let's do that.\n             // This is memory backing an extern static, hence `ExternStatic`, not `Env`.\n-            let layout = this.machine.layouts.usize;\n+            let layout = this.machine.layouts.mut_raw_ptr;\n             let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n             this.machine.env_vars.environ = Some(place);\n         }\n@@ -452,8 +452,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         vars.push(Pointer::null());\n         // Make an array with all these pointers inside Miri.\n         let tcx = this.tcx;\n-        let vars_layout =\n-            this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n+        let vars_layout = this.layout_of(\n+            tcx.mk_array(this.machine.layouts.mut_raw_ptr.ty, u64::try_from(vars.len()).unwrap()),\n+        )?;\n         let vars_place = this.allocate(vars_layout, MiriMemoryKind::Runtime.into())?;\n         for (idx, var) in vars.into_iter().enumerate() {\n             let place = this.mplace_field(&vars_place, idx)?;"}]}