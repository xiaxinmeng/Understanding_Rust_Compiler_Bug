{"sha": "b816e5dfb49b7a135813b204b9123bbc5f41be7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTZlNWRmYjQ5YjdhMTM1ODEzYjIwNGI5MTIzYmJjNWY0MWJlN2E=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-30T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-30T00:00:00Z"}, "message": "validator: Extend aliasing check to a call terminator", "tree": {"sha": "ce3d5615c80714c376f6c9f06818b59f67e6b129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce3d5615c80714c376f6c9f06818b59f67e6b129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b816e5dfb49b7a135813b204b9123bbc5f41be7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b816e5dfb49b7a135813b204b9123bbc5f41be7a", "html_url": "https://github.com/rust-lang/rust/commit/b816e5dfb49b7a135813b204b9123bbc5f41be7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b816e5dfb49b7a135813b204b9123bbc5f41be7a/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388ef349043f20a1a8a3011eaf49dee220485e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/388ef349043f20a1a8a3011eaf49dee220485e0a", "html_url": "https://github.com/rust-lang/rust/commit/388ef349043f20a1a8a3011eaf49dee220485e0a"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "ecdd0c517ef4f6ed57fb7a947ca22220170f4bf5", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b816e5dfb49b7a135813b204b9123bbc5f41be7a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b816e5dfb49b7a135813b204b9123bbc5f41be7a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=b816e5dfb49b7a135813b204b9123bbc5f41be7a", "patch": "@@ -10,8 +10,8 @@ use rustc_middle::mir::{\n     visit::{PlaceContext, Visitor},\n };\n use rustc_middle::mir::{\n-    AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, Rvalue,\n-    SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n+    AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceRef,\n+    Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n };\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n@@ -46,8 +46,16 @@ impl<'tcx> MirPass<'tcx> for Validator {\n             .iterate_to_fixpoint()\n             .into_results_cursor(body);\n \n-        TypeChecker { when: &self.when, body, tcx, param_env, mir_phase, storage_liveness }\n-            .visit_body(body);\n+        TypeChecker {\n+            when: &self.when,\n+            body,\n+            tcx,\n+            param_env,\n+            mir_phase,\n+            storage_liveness,\n+            place_cache: Vec::new(),\n+        }\n+        .visit_body(body);\n     }\n }\n \n@@ -150,6 +158,7 @@ struct TypeChecker<'a, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     mir_phase: MirPhase,\n     storage_liveness: ResultsCursor<'a, 'tcx, MaybeStorageLive>,\n+    place_cache: Vec<PlaceRef<'tcx>>,\n }\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n@@ -391,7 +400,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::Call { func, destination, cleanup, .. } => {\n+            TerminatorKind::Call { func, args, destination, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n@@ -406,6 +415,32 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 if let Some(cleanup) = cleanup {\n                     self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n+\n+                // The call destination place and Operand::Move place used as an argument might be\n+                // passed by a reference to the callee. Consequently they must be non-overlapping.\n+                // Currently this simply checks for duplicate places.\n+                self.place_cache.clear();\n+                if let Some((destination, _)) = destination {\n+                    self.place_cache.push(destination.as_ref());\n+                }\n+                for arg in args {\n+                    if let Operand::Move(place) = arg {\n+                        self.place_cache.push(place.as_ref());\n+                    }\n+                }\n+                let all_len = self.place_cache.len();\n+                self.place_cache.sort_unstable();\n+                self.place_cache.dedup();\n+                let has_duplicates = all_len != self.place_cache.len();\n+                if has_duplicates {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"encountered overlapping memory in `Call` terminator: {:?}\",\n+                            terminator.kind,\n+                        ),\n+                    );\n+                }\n             }\n             TerminatorKind::Assert { cond, target, cleanup, .. } => {\n                 let cond_ty = cond.ty(&self.body.local_decls, self.tcx);"}]}