{"sha": "53c9b9a5dd7341dee2c600ae234ca741da8464de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYzliOWE1ZGQ3MzQxZGVlMmM2MDBhZTIzNGNhNzQxZGE4NDY0ZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-04T01:22:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-04T01:23:30Z"}, "message": "rt: Switch the libuv bindings over to not using explicit task pointers", "tree": {"sha": "31d5b3bd6c0cc790df3998d4cdf093eb442b628e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d5b3bd6c0cc790df3998d4cdf093eb442b628e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53c9b9a5dd7341dee2c600ae234ca741da8464de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53c9b9a5dd7341dee2c600ae234ca741da8464de", "html_url": "https://github.com/rust-lang/rust/commit/53c9b9a5dd7341dee2c600ae234ca741da8464de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53c9b9a5dd7341dee2c600ae234ca741da8464de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad4fa00ac0e3b78612eccce18fa6613f3125005", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad4fa00ac0e3b78612eccce18fa6613f3125005", "html_url": "https://github.com/rust-lang/rust/commit/3ad4fa00ac0e3b78612eccce18fa6613f3125005"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "349c331ea5f8e1d9340348440037c92e6f40bdbd", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/53c9b9a5dd7341dee2c600ae234ca741da8464de/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/53c9b9a5dd7341dee2c600ae234ca741da8464de/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=53c9b9a5dd7341dee2c600ae234ca741da8464de", "patch": "@@ -4,6 +4,7 @@\n #include \"uv.h\"\n \n #include \"rust_internal.h\"\n+#include \"rust_scheduler.h\"\n #include \"rust_upcall.h\"\n \n #ifdef __GNUC__\n@@ -49,7 +50,7 @@ struct socket_data : public task_owned<socket_data> {\n struct req_connect : public uv_connect_t, public task_owned<req_connect> {};\n struct req_write : public uv_write_t, public task_owned<req_write> {};\n \n-extern \"C\" CDECL void aio_close_socket(rust_task *task, socket_data *);\n+extern \"C\" CDECL void aio_close_socket(void *, socket_data *);\n \n static uv_idle_s idle_handler;\n \n@@ -58,27 +59,31 @@ static void idle_callback(uv_idle_t* handle, int status) {\n   task->yield();\n }\n \n-extern \"C\" CDECL void aio_init(rust_task *task) {\n+extern \"C\" CDECL void aio_init(void *) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   iotask = task;\n   uv_idle_init(uv_default_loop(), &idle_handler);\n   uv_idle_start(&idle_handler, idle_callback);\n }\n \n-extern \"C\" CDECL void aio_run(rust_task *task) {\n+extern \"C\" CDECL void aio_run(void *) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   idle_handler.data = task;\n   uv_run(uv_default_loop());\n }\n \n void nop_close(uv_handle_t* handle) {}\n \n-extern \"C\" CDECL void aio_stop(rust_task *task) {\n+extern \"C\" CDECL void aio_stop(void *) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   uv_close((uv_handle_t*)&idle_handler, nop_close);\n }\n \n-static socket_data *make_socket(rust_task *task, rust_chan *chan) {\n+static socket_data *make_socket(void *, rust_chan *chan) {\n+  rust_task *task = rust_scheduler::get_task();\n   socket_data *data = new (task, \"make_socket\") socket_data;\n   if (!data ||\n       uv_tcp_init(uv_default_loop(), &data->socket)) {\n@@ -155,8 +160,9 @@ static void new_connection(uv_stream_t *socket, int status) {\n   server->chan->send(&client);\n }\n \n-extern \"C\" CDECL socket_data *aio_serve(rust_task *task, const char *ip,\n-                                        int port, chan_handle *_chan) {\n+extern \"C\" CDECL socket_data *aio_serve(void *, const char *ip, int port,\n+                                        chan_handle *_chan) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   rust_chan *chan = task->get_chan_by_handle(_chan);\n   if(!chan) return NULL;\n@@ -201,13 +207,15 @@ static void free_socket(uv_handle_t *handle) {\n   delete data;\n }\n \n-extern \"C\" CDECL void aio_close_socket(rust_task *task, socket_data *client) {\n+extern \"C\" CDECL void aio_close_socket(void *, socket_data *client) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   uv_close((uv_handle_t*)&client->socket, free_socket);\n }\n \n-extern \"C\" CDECL void aio_close_server(rust_task *task, socket_data *server,\n+extern \"C\" CDECL void aio_close_server(void *, socket_data *server,\n                                        chan_handle *_chan) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   rust_chan *chan = task->get_chan_by_handle(_chan);\n   if(!chan) return;\n@@ -221,8 +229,8 @@ extern \"C\" CDECL void aio_close_server(rust_task *task, socket_data *server,\n   chan->deref();\n }\n \n-extern \"C\" CDECL bool aio_is_null_client(rust_task *task,\n-                                         socket_data *server) {\n+extern \"C\" CDECL bool aio_is_null_client(void *, socket_data *server) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   return server == NULL;\n }\n@@ -234,8 +242,9 @@ static void connection_complete(uv_connect_t *req, int status) {\n   free(req);\n }\n \n-extern \"C\" CDECL void aio_connect(rust_task *task, const char *host,\n-                                  int port, chan_handle *_chan) {\n+extern \"C\" CDECL void aio_connect(void *, const char *host, int port,\n+                                  chan_handle *_chan) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   rust_chan *chan = task->get_chan_by_handle(_chan);\n   uv_connect_t *req = NULL;\n@@ -272,9 +281,9 @@ static void write_complete(uv_write_t *req, int status) {\n   free(req);\n }\n \n-extern \"C\" CDECL void aio_writedata(rust_task *task, socket_data *data,\n-                                    char *buf, size_t size,\n-                                    chan_handle *_chan) {\n+extern \"C\" CDECL void aio_writedata(void *, socket_data *data, char *buf,\n+                                    size_t size, chan_handle *_chan) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   rust_chan *chan = task->get_chan_by_handle(_chan);\n   uv_write_t *req;\n@@ -305,8 +314,9 @@ extern \"C\" CDECL void aio_writedata(rust_task *task, socket_data *data,\n   task->fail();\n }\n \n-extern \"C\" CDECL void aio_read(rust_task *task, socket_data *data,\n+extern \"C\" CDECL void aio_read(void *, socket_data *data,\n                                chan_handle *_chan) {\n+  rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   rust_chan *reader = task->get_chan_by_handle(_chan);\n   if(!reader) return;"}]}