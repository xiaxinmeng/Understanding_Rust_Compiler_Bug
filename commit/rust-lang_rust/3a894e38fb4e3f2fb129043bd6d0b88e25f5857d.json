{"sha": "3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhODk0ZTM4ZmI0ZTNmMmZiMTI5MDQzYmQ2ZDBiODhlMjVmNTg1N2Q=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-15T14:47:31Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T10:05:21Z"}, "message": "Bring back tests removed in 'Revert PRs 81238 and 82967 (which made copy and copy_nonoverlapping' 5f6016f1259142de7ab1f186f412fa3ca26607a8", "tree": {"sha": "a386c470eadfdb4918b7f461ead1fffae8ecc4ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a386c470eadfdb4918b7f461ead1fffae8ecc4ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmDYTWEACgkQH1AezRu9\ncKdC1g/9E+qk4fbf+gYenD61fUPWkUqI1QVeknr5+9/dRgObJryFE5V1gub+flZm\nH9E9B15vU70T6eArwCVjFv/6h8FjnoXoiEGYDEgMsyoxlxaqdb6qSanwUPtMKcu0\nzgW8RBMVFOZnb/YYD29p1JiQQHWgSKDJDov7uzM/24KHi+Fh+rSJWCoRN/Rnl6M9\n2P3A9vKbrSP2ZpPu65cusarcJPKMg2PHQB8RzrUQsEKfNBSsZAere4Zp3byHB3g8\n3ZS9esLLeNl7KizJVhgpiFbdXGvmxIzXGNl8CluBGMY/0tH13cAyV5/+XhH1YJ7C\nhjo+BvzXGhxIIYvCWbSxrH4M0aqrK3IyAQBZegfI2iBCTlGHg3+ci5TlYCluA+dh\nQMmPgfLay5o9GJivv3erUb6Asr2KOf+rZxLsqDWgKixjlNLRniyCP/u66pdv4cpO\nIwSbNJB0F4rG1sQWrdIy7VwouD1kwqsHT9IkkODZliFUHhQ87RtA/GgwOpiN2OPB\ny0XVsiLcqAE0+69X+KHvnN92QNVANa7ghiLPwnSUIosUi6UrQYW2IQwC+Cu1bla1\nnAHD1ONR8FycModj5t72iwLH6onhCAvqjshx9zIOSq9TuhRwrw5DKRKqaQwjRG9o\nq5o+//Hs+1xpyeIqEAjhT40Cw7DIrroFIQGMAkTqbNZxdM/e0Po=\n=zHCV\n-----END PGP SIGNATURE-----", "payload": "tree a386c470eadfdb4918b7f461ead1fffae8ecc4ef\nparent 4b64baff67e93cbf47820781afc7e8ee8a304423\nauthor Albin Hedman <albin9604@gmail.com> 1623768451 +0200\ncommitter Albin Hedman <albin9604@gmail.com> 1624788321 +0200\n\nBring back tests removed in 'Revert PRs 81238 and 82967 (which made copy and copy_nonoverlapping' 5f6016f1259142de7ab1f186f412fa3ca26607a8\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "html_url": "https://github.com/rust-lang/rust/commit/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b64baff67e93cbf47820781afc7e8ee8a304423", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b64baff67e93cbf47820781afc7e8ee8a304423", "html_url": "https://github.com/rust-lang/rust/commit/4b64baff67e93cbf47820781afc7e8ee8a304423"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "9dc595f37faaeb1488026123baa62321909fec08", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "patch": "@@ -0,0 +1,45 @@\n+// ignore-tidy-linelength\n+#![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n+use std::{ptr, mem};\n+\n+const COPY_ZERO: () = unsafe {\n+    // Since we are not copying anything, this should be allowed.\n+    let src = ();\n+    let mut dst = ();\n+    ptr::copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+};\n+\n+const COPY_OOB_1: () = unsafe {\n+    let mut x = 0i32;\n+    let dangle = (&mut x as *mut i32).wrapping_add(10);\n+    // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n+    ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n+    //~| memory access failed: pointer must be in-bounds\n+    //~| previously accepted\n+};\n+const COPY_OOB_2: () = unsafe {\n+    let x = 0i32;\n+    let dangle = (&x as *const i32).wrapping_add(10);\n+    // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n+    ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n+    //~| memory access failed: pointer must be in-bounds\n+    //~| previously accepted\n+};\n+\n+const COPY_SIZE_OVERFLOW: () = unsafe {\n+    let x = 0;\n+    let mut y = 0;\n+    ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    //~| overflow computing total size of `copy`\n+    //~| previously accepted\n+};\n+const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n+    let x = 0;\n+    let mut y = 0;\n+    ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    //~| overflow computing total size of `copy_nonoverlapping`\n+    //~| previously accepted\n+};\n+\n+fn main() {\n+}"}, {"sha": "fb6e5aaaa08744443a6d0d22a5155417cdc7094f", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a894e38fb4e3f2fb129043bd6d0b88e25f5857d/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=3a894e38fb4e3f2fb129043bd6d0b88e25f5857d", "patch": "@@ -0,0 +1,99 @@\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |       unsafe { copy_nonoverlapping(src, dst, count) }\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n+   |                inside `copy_nonoverlapping::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |                inside `COPY_OOB_1` at $DIR/copy-intrinsic.rs:16:5\n+   | \n+  ::: $DIR/copy-intrinsic.rs:12:1\n+   |\n+LL | / const COPY_OOB_1: () = unsafe {\n+LL | |     let mut x = 0i32;\n+LL | |     let dangle = (&mut x as *mut i32).wrapping_add(10);\n+LL | |     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n+...  |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |       unsafe { copy_nonoverlapping(src, dst, count) }\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n+   |                inside `copy_nonoverlapping::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |                inside `COPY_OOB_2` at $DIR/copy-intrinsic.rs:24:5\n+   | \n+  ::: $DIR/copy-intrinsic.rs:20:1\n+   |\n+LL | / const COPY_OOB_2: () = unsafe {\n+LL | |     let x = 0i32;\n+LL | |     let dangle = (&x as *const i32).wrapping_add(10);\n+LL | |     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n+...  |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |       unsafe { copy(src, dst, count) }\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                overflow computing total size of `copy`\n+   |                inside `std::intrinsics::copy::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |                inside `COPY_SIZE_OVERFLOW` at $DIR/copy-intrinsic.rs:32:5\n+   | \n+  ::: $DIR/copy-intrinsic.rs:29:1\n+   |\n+LL | / const COPY_SIZE_OVERFLOW: () = unsafe {\n+LL | |     let x = 0;\n+LL | |     let mut y = 0;\n+LL | |     ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |       unsafe { copy_nonoverlapping(src, dst, count) }\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                overflow computing total size of `copy_nonoverlapping`\n+   |                inside `copy_nonoverlapping::<i32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |                inside `COPY_NONOVERLAPPING_SIZE_OVERFLOW` at $DIR/copy-intrinsic.rs:39:5\n+   | \n+  ::: $DIR/copy-intrinsic.rs:36:1\n+   |\n+LL | / const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n+LL | |     let x = 0;\n+LL | |     let mut y = 0;\n+LL | |     ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 4 previous errors\n+"}]}