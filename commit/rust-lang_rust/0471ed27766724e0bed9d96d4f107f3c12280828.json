{"sha": "0471ed27766724e0bed9d96d4f107f3c12280828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NzFlZDI3NzY2NzI0ZTBiZWQ5ZDk2ZDRmMTA3ZjNjMTIyODA4Mjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-18T15:19:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-18T16:31:38Z"}, "message": "Add support for object::write", "tree": {"sha": "91399394a4d46419d3fe507bd68b9f880772fb87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91399394a4d46419d3fe507bd68b9f880772fb87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0471ed27766724e0bed9d96d4f107f3c12280828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0471ed27766724e0bed9d96d4f107f3c12280828", "html_url": "https://github.com/rust-lang/rust/commit/0471ed27766724e0bed9d96d4f107f3c12280828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0471ed27766724e0bed9d96d4f107f3c12280828/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5873127ec2b1d748bb673c0193682a563fcb6fe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5873127ec2b1d748bb673c0193682a563fcb6fe0", "html_url": "https://github.com/rust-lang/rust/commit/5873127ec2b1d748bb673c0193682a563fcb6fe0"}], "stats": {"total": 142, "additions": 107, "deletions": 35}, "files": [{"sha": "0da280f24e29906d237fbd58990516e150e1283c", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0471ed27766724e0bed9d96d4f107f3c12280828/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0471ed27766724e0bed9d96d4f107f3c12280828/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0471ed27766724e0bed9d96d4f107f3c12280828", "patch": "@@ -9,6 +9,9 @@ edition = \"2018\"\n [lib]\n crate-type = [\"dylib\"]\n \n+[features]\n+backend_object = [\"object/write\"]\n+\n [dependencies]\n # These have to be in sync with each other\n cranelift = { git = \"https://github.com/CraneStation/cranelift.git\" }\n@@ -29,7 +32,7 @@ libloading = \"0.5.1\"\n [dependencies.object]\n version = \"0.14.0\"\n default-features = false\n-features = [\"compression\", \"read\", \"std\", \"write\"] # We don't need WASM support\n+features = [\"compression\", \"read\", \"std\"] # We don't need WASM support\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/CraneStation/cranelift.git\"]"}, {"sha": "449e2a5cc265e69bf33d668e9c1e1a21a45b2a0f", "filename": "src/backend.rs", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0471ed27766724e0bed9d96d4f107f3c12280828/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0471ed27766724e0bed9d96d4f107f3c12280828/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=0471ed27766724e0bed9d96d4f107f3c12280828", "patch": "@@ -1,10 +1,13 @@\n use std::collections::HashMap;\n \n-use cranelift_module::FuncId;\n+use rustc::session::Session;\n+\n+use cranelift_module::{FuncId, Module};\n \n use faerie::*;\n use object::{SectionKind, RelocationKind, RelocationEncoding};\n use object::write::*;\n+use cranelift_faerie::{FaerieBackend, FaerieBuilder, FaerieProduct, FaerieTrapCollection};\n use cranelift_object::*;\n \n use gimli::SectionId;\n@@ -73,11 +76,11 @@ pub trait WriteDebugInfo {\n     );\n }\n \n-impl WriteDebugInfo for Artifact {\n+impl WriteDebugInfo for FaerieProduct {\n     type SectionId = SectionId;\n \n     fn add_debug_section(&mut self, id: SectionId, data: Vec<u8>) -> SectionId {\n-        self.declare_with(id.name(), Decl::section(faerie::SectionKind::Debug), data).unwrap();\n+        self.artifact.declare_with(id.name(), Decl::section(faerie::SectionKind::Debug), data).unwrap();\n         id\n     }\n \n@@ -89,6 +92,7 @@ impl WriteDebugInfo for Artifact {\n         reloc: &DebugReloc,\n     ) {\n         self\n+            .artifact\n             .link_with(\n                 faerie::Link {\n                     from: from.name(),\n@@ -147,3 +151,69 @@ impl WriteDebugInfo for ObjectProduct {\n         }).unwrap();\n     }\n }\n+\n+pub trait Emit {\n+    fn emit(self) -> Vec<u8>;\n+}\n+\n+impl Emit for FaerieProduct {\n+    fn emit(self) -> Vec<u8> {\n+        self.artifact.emit().unwrap()\n+    }\n+}\n+\n+impl Emit for ObjectProduct {\n+    fn emit(self) -> Vec<u8> {\n+        self.object.write().unwrap()\n+    }\n+}\n+\n+#[cfg(not(feature = \"backend_object\"))]\n+pub fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Artifact)) -> Vec<u8> {\n+    let mut metadata_artifact = faerie::Artifact::new(\n+        crate::build_isa(sess, true).triple().clone(),\n+        name.to_string(),\n+    );\n+    f(&mut metadata_artifact);\n+    metadata_artifact.emit().unwrap()\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+pub fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n+    let triple = crate::build_isa(sess, true).triple().clone();\n+    let mut metadata_object =\n+        object::write::Object::new(triple.binary_format, triple.architecture);\n+    metadata_object.add_file_symbol(name.as_bytes().to_vec());\n+    f(&mut metadata_object);\n+    metadata_object.write().unwrap()\n+}\n+\n+pub type Backend = impl cranelift_module::Backend<Product: Emit + WriteDebugInfo>;\n+\n+#[cfg(not(feature = \"backend_object\"))]\n+pub fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+    let module: Module<FaerieBackend> = Module::new(\n+        FaerieBuilder::new(\n+            crate::build_isa(sess, true),\n+            name + \".o\",\n+            FaerieTrapCollection::Disabled,\n+            cranelift_module::default_libcall_names(),\n+        )\n+        .unwrap(),\n+    );\n+    module\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+pub fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+    let module: Module<ObjectBackend> = Module::new(\n+        ObjectBuilder::new(\n+            crate::build_isa(sess, true),\n+            name + \".o\",\n+            ObjectTrapCollection::Disabled,\n+            cranelift_module::default_libcall_names(),\n+        )\n+        .unwrap(),\n+    );\n+    module\n+}"}, {"sha": "b26da23da907eb2c4c83c3f2bcedd4168524c429", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0471ed27766724e0bed9d96d4f107f3c12280828/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0471ed27766724e0bed9d96d4f107f3c12280828/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0471ed27766724e0bed9d96d4f107f3c12280828", "patch": "@@ -8,10 +8,10 @@ use rustc::session::config::{DebugInfo, OutputType};\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::CrateInfo;\n \n-use cranelift_faerie::*;\n-\n use crate::prelude::*;\n \n+use crate::backend::{Emit, WriteDebugInfo};\n+\n pub fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n@@ -147,59 +147,57 @@ fn run_aot(\n     need_metadata_module: bool,\n ) -> Box<CodegenResults> {\n     let new_module = |name: String| {\n-        let module: Module<FaerieBackend> = Module::new(\n-            FaerieBuilder::new(\n-                crate::build_isa(tcx.sess, true),\n-                name + \".o\",\n-                FaerieTrapCollection::Disabled,\n-                cranelift_module::default_libcall_names(),\n-            )\n-            .unwrap(),\n-        );\n+        let module = crate::backend::make_module(tcx.sess, name);\n         assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n         module\n     };\n \n-    let emit_module = |kind: ModuleKind,\n-                       mut module: Module<FaerieBackend>,\n-                       debug: Option<DebugContext>| {\n+    fn emit_module<B: Backend>(\n+        tcx: TyCtxt<'_>,\n+        name: String,\n+        kind: ModuleKind,\n+        mut module: Module<B>,\n+        debug: Option<DebugContext>,\n+    ) -> CompiledModule\n+        where B::Product: Emit + WriteDebugInfo,\n+    {\n             module.finalize_definitions();\n-            let mut artifact = module.finish().artifact;\n+            let mut product = module.finish();\n \n             if let Some(mut debug) = debug {\n-                debug.emit(&mut artifact);\n+                debug.emit(&mut product);\n             }\n \n             let tmp_file = tcx\n                 .output_filenames(LOCAL_CRATE)\n-                .temp_path(OutputType::Object, Some(&artifact.name));\n-            let obj = artifact.emit().unwrap();\n+                .temp_path(OutputType::Object, Some(&name));\n+            let obj = product.emit();\n             std::fs::write(&tmp_file, obj).unwrap();\n             CompiledModule {\n-                name: artifact.name,\n+                name: name,\n                 kind,\n                 object: Some(tmp_file),\n                 bytecode: None,\n                 bytecode_compressed: None,\n             }\n         };\n \n-    let mut faerie_module = new_module(\"some_file\".to_string());\n+    let mut module = new_module(\"some_file\".to_string());\n \n     let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n         // macOS debuginfo doesn't work yet (see #303)\n         && !tcx.sess.target.target.options.is_like_osx\n     {\n         let debug = DebugContext::new(\n             tcx,\n-            faerie_module.target_config().pointer_type().bytes() as u8,\n+            module.target_config().pointer_type().bytes() as u8,\n         );\n         Some(debug)\n     } else {\n         None\n     };\n \n-    codegen_cgus(tcx, &mut faerie_module, &mut debug);\n+    codegen_cgus(tcx, &mut module, &mut debug);\n \n     tcx.sess.abort_if_errors();\n \n@@ -221,17 +219,14 @@ fn run_aot(\n                 .as_str()\n                 .to_string();\n \n-            let mut metadata_artifact = faerie::Artifact::new(\n-                crate::build_isa(tcx.sess, true).triple().clone(),\n-                metadata_cgu_name.clone(),\n-            );\n-            crate::metadata::write_metadata(tcx, &mut metadata_artifact);\n-\n             let tmp_file = tcx\n                 .output_filenames(LOCAL_CRATE)\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n-            let obj = metadata_artifact.emit().unwrap();\n+            let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n+                crate::metadata::write_metadata(tcx, object);\n+            });\n+\n             std::fs::write(&tmp_file, obj).unwrap();\n \n             (metadata_cgu_name, tmp_file)\n@@ -251,12 +246,16 @@ fn run_aot(\n     Box::new(CodegenResults {\n         crate_name: tcx.crate_name(LOCAL_CRATE),\n         modules: vec![emit_module(\n+            tcx,\n+            \"some_file\".to_string(),\n             ModuleKind::Regular,\n-            faerie_module,\n+            module,\n             debug,\n         )],\n         allocator_module: if created_alloc_shim {\n             Some(emit_module(\n+                tcx,\n+                \"allocator_shim\".to_string(),\n                 ModuleKind::Allocator,\n                 allocator_module,\n                 None,"}, {"sha": "169397f14a5753d3962ce8c51f94b01c52554af0", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0471ed27766724e0bed9d96d4f107f3c12280828/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0471ed27766724e0bed9d96d4f107f3c12280828/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0471ed27766724e0bed9d96d4f107f3c12280828", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, never_type, decl_macro)]\n+#![feature(rustc_private, never_type, decl_macro, type_alias_impl_trait, associated_type_bounds)]\n #![allow(intra_doc_link_resolution_failure)]\n \n extern crate flate2;"}]}