{"sha": "b05e9d2b4d8692a9f0932e9098727762bfad6efe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNWU5ZDJiNGQ4NjkyYTlmMDkzMmU5MDk4NzI3NzYyYmZhZDZlZmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-31T02:20:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:39:24Z"}, "message": "parser: solidify `fn` parsing with `parse_fn`.", "tree": {"sha": "9dc991055238bc2355836656efa96ebae872c6de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc991055238bc2355836656efa96ebae872c6de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05e9d2b4d8692a9f0932e9098727762bfad6efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05e9d2b4d8692a9f0932e9098727762bfad6efe", "html_url": "https://github.com/rust-lang/rust/commit/b05e9d2b4d8692a9f0932e9098727762bfad6efe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05e9d2b4d8692a9f0932e9098727762bfad6efe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a833be21626890de406e12f2561d2ffbda4aadb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a833be21626890de406e12f2561d2ffbda4aadb4", "html_url": "https://github.com/rust-lang/rust/commit/a833be21626890de406e12f2561d2ffbda4aadb4"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "d7ffda28bb767b2df623305130474ab3dce99e46", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b05e9d2b4d8692a9f0932e9098727762bfad6efe/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05e9d2b4d8692a9f0932e9098727762bfad6efe/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=b05e9d2b4d8692a9f0932e9098727762bfad6efe", "patch": "@@ -1596,6 +1596,11 @@ pub(super) struct ParamCfg {\n     pub is_name_required: fn(&token::Token) -> bool,\n }\n \n+impl ParamCfg {\n+    /// Configuration for a free function in the sense that it is not associated.\n+    const FREE: Self = ParamCfg { is_name_required: |_| true };\n+}\n+\n /// Parsing of functions and methods.\n impl<'a> Parser<'a> {\n     /// Parses an item-position function declaration.\n@@ -1605,11 +1610,9 @@ impl<'a> Parser<'a> {\n         vis: Visibility,\n         mut attrs: Vec<Attribute>,\n     ) -> PResult<'a, Option<P<Item>>> {\n-        let cfg = ParamCfg { is_name_required: |_| true };\n-        let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n-        let body = self.parse_fn_body(&mut false, &mut attrs)?;\n-        let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n+        let (ident, sig, generics, body) =\n+            self.parse_fn(&mut false, &mut attrs, &ParamCfg::FREE)?;\n+        let kind = ItemKind::Fn(sig, generics, body);\n         self.mk_item_with_info(attrs, lo, vis, (ident, kind, None))\n     }\n \n@@ -1620,11 +1623,9 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         mut attrs: Vec<Attribute>,\n     ) -> PResult<'a, P<ForeignItem>> {\n-        let cfg = ParamCfg { is_name_required: |_| true };\n-        let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n-        let body = self.parse_fn_body(&mut false, &mut attrs)?;\n-        let kind = ForeignItemKind::Fn(FnSig { header, decl }, generics, body);\n+        let (ident, sig, generics, body) =\n+            self.parse_fn(&mut false, &mut attrs, &ParamCfg::FREE)?;\n+        let kind = ForeignItemKind::Fn(sig, generics, body);\n         let span = lo.to(self.prev_span);\n         Ok(P(ast::ForeignItem { ident, attrs, kind, id: DUMMY_NODE_ID, span, vis, tokens: None }))\n     }\n@@ -1635,10 +1636,25 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         is_name_required: fn(&token::Token) -> bool,\n     ) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n-        let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) = self.parse_fn_sig(&&ParamCfg { is_name_required })?;\n-        let body = self.parse_fn_body(at_end, attrs)?;\n-        Ok((ident, AssocItemKind::Fn(FnSig { header, decl }, body), generics))\n+        let cfg = ParamCfg { is_name_required };\n+        let (ident, sig, generics, body) = self.parse_fn(at_end, attrs, &cfg)?;\n+        Ok((ident, AssocItemKind::Fn(sig, body), generics))\n+    }\n+\n+    /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n+    fn parse_fn(\n+        &mut self,\n+        at_end: &mut bool,\n+        attrs: &mut Vec<Attribute>,\n+        cfg: &ParamCfg,\n+    ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n+        let header = self.parse_fn_front_matter()?; // `const ... fn`\n+        let ident = self.parse_ident()?; // `foo`\n+        let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n+        let decl = self.parse_fn_decl(cfg, AllowPlus::Yes)?; // `(p: u8, ...)`\n+        generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n+        let body = self.parse_fn_body(at_end, attrs)?; // `;` or `{ ... }`.\n+        Ok((ident, FnSig { header, decl }, generics, body))\n     }\n \n     /// Parse the \"body\" of a function.\n@@ -1722,15 +1738,6 @@ impl<'a> Parser<'a> {\n         Ok(FnHeader { constness, unsafety, asyncness, ext })\n     }\n \n-    /// Parse the \"signature\", including the identifier, parameters, and generics of a function.\n-    fn parse_fn_sig(&mut self, cfg: &ParamCfg) -> PResult<'a, (Ident, P<FnDecl>, Generics)> {\n-        let ident = self.parse_ident()?;\n-        let mut generics = self.parse_generics()?;\n-        let decl = self.parse_fn_decl(cfg, AllowPlus::Yes)?;\n-        generics.where_clause = self.parse_where_clause()?;\n-        Ok((ident, decl, generics))\n-    }\n-\n     /// Parses the parameter list and result type of a function declaration.\n     pub(super) fn parse_fn_decl(\n         &mut self,"}]}