{"sha": "6e98ed9650dd392adbfe0b973e03964d0d069863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOThlZDk2NTBkZDM5MmFkYmZlMGI5NzNlMDM5NjRkMGQwNjk4NjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-16T16:13:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-16T16:13:26Z"}, "message": "Rollup merge of #53395 - varkor:__Nonexhaustive-to-non_exhaustive, r=shepmaster\n\nUse #[non_exhaustive] on internal enums\n\nThis replaces `__Nonexhaustive` variants (and variants thereof)  with `#[non_exhaustive]`. These were mostly unstable previously, with the exception of the `cloudabi` enums and `Level` in proc_macro: these were `#[doc(hidden)]`, so clearly intended not to be used directly. It should be safe to replace all of these.", "tree": {"sha": "e7892f4f45a649736f4e65fec9b53b46f341439a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7892f4f45a649736f4e65fec9b53b46f341439a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e98ed9650dd392adbfe0b973e03964d0d069863", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbdaKmCRBK7hj4Ov3rIwAAdHIIAK2UF8Ld14sBo2sKm453k9d2\nL0XEBogwh93C3wOrqkbCwOmW2gdoW/Ma73PFqn4IrSH24tnDG/NrPB293FEq8/sO\n42Mhm+3cZVJN9hNh2TpHkyyLz3I60gO6jBCLap1kr0A3wE4gv3tiXq0MAkCL2xEh\n3CLWO/d+UECY+2aXEZjEIhYm+RsvXS50jew7U+CSbnrcTh7hFL+gHuTUuZvJqsR6\n5alnC2C22K/cB+5OGxe2YuAWN0+3v6x6w2ZQNUEzwLWTcfCcFUt7hyDnT6ZEzAkD\nEtUBU/LZDn3NGHMRCsitOEzX2t0Ak+NuCpCgdngGPh0un0TYoEWckqpz5pcbTOM=\n=HzFq\n-----END PGP SIGNATURE-----\n", "payload": "tree e7892f4f45a649736f4e65fec9b53b46f341439a\nparent 0c9e0e33b4e54b84706e23032a99c9efcff0774c\nparent 27f2a8420f3208d7ecc007094a2b9189ccf00f7b\nauthor kennytm <kennytm@gmail.com> 1534436006 +0800\ncommitter GitHub <noreply@github.com> 1534436006 +0800\n\nRollup merge of #53395 - varkor:__Nonexhaustive-to-non_exhaustive, r=shepmaster\n\nUse #[non_exhaustive] on internal enums\n\nThis replaces `__Nonexhaustive` variants (and variants thereof)  with `#[non_exhaustive]`. These were mostly unstable previously, with the exception of the `cloudabi` enums and `Level` in proc_macro: these were `#[doc(hidden)]`, so clearly intended not to be used directly. It should be safe to replace all of these.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e98ed9650dd392adbfe0b973e03964d0d069863", "html_url": "https://github.com/rust-lang/rust/commit/6e98ed9650dd392adbfe0b973e03964d0d069863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e98ed9650dd392adbfe0b973e03964d0d069863/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9e0e33b4e54b84706e23032a99c9efcff0774c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9e0e33b4e54b84706e23032a99c9efcff0774c", "html_url": "https://github.com/rust-lang/rust/commit/0c9e0e33b4e54b84706e23032a99c9efcff0774c"}, {"sha": "27f2a8420f3208d7ecc007094a2b9189ccf00f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/27f2a8420f3208d7ecc007094a2b9189ccf00f7b", "html_url": "https://github.com/rust-lang/rust/commit/27f2a8420f3208d7ecc007094a2b9189ccf00f7b"}], "stats": {"total": 71, "additions": 15, "deletions": 56}, "files": [{"sha": "40c2ef2db0551ec64fbe1b671bb6c5cb62582e74", "filename": "src/doc/unstable-book/src/library-features/future-atomic-orderings.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c9e0e33b4e54b84706e23032a99c9efcff0774c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c9e0e33b4e54b84706e23032a99c9efcff0774c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md?ref=0c9e0e33b4e54b84706e23032a99c9efcff0774c", "patch": "@@ -1,5 +0,0 @@\n-# `future_atomic_orderings`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "5bee18d33d61bcf21538e1f4c21bf36bf76facce", "filename": "src/doc/unstable-book/src/library-features/io-error-internals.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c9e0e33b4e54b84706e23032a99c9efcff0774c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c9e0e33b4e54b84706e23032a99c9efcff0774c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md?ref=0c9e0e33b4e54b84706e23032a99c9efcff0774c", "patch": "@@ -1,5 +0,0 @@\n-# `io_error_internals`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "e85bf1dfcad23c99116b2cd20497752a2f9991e2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -120,6 +120,7 @@\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n+#![feature(non_exhaustive)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "617e067e0787ed128a1e1217bdc9b6ae395bc575", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -185,6 +185,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// [nomicon]: ../../../nomicon/atomics.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n+#[non_exhaustive]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n@@ -256,10 +257,6 @@ pub enum Ordering {\n     /// [`AcqRel`]: https://llvm.org/docs/Atomics.html#acquirerelease\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n-    // Prevent exhaustive matching to allow for future extension\n-    #[doc(hidden)]\n-    #[unstable(feature = \"future_atomic_orderings\", issue = \"0\")]\n-    __Nonexhaustive,\n }\n \n /// An [`AtomicBool`] initialized to `false`.\n@@ -1954,7 +1951,6 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n         SeqCst => SeqCst,\n         Acquire => Acquire,\n         AcqRel => Acquire,\n-        __Nonexhaustive => __Nonexhaustive,\n     }\n }\n \n@@ -1966,7 +1962,6 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n         SeqCst => intrinsics::atomic_store(dst, val),\n         Acquire => panic!(\"there is no such thing as an acquire store\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1978,7 +1973,6 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n         SeqCst => intrinsics::atomic_load(dst),\n         Release => panic!(\"there is no such thing as a release load\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1991,7 +1985,6 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xchg(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2004,7 +1997,6 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xadd(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2017,7 +2009,6 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xsub(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2039,8 +2030,6 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n-        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n-        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -2065,8 +2054,6 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n-        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n-        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -2082,7 +2069,6 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_and(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2094,7 +2080,6 @@ unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_nand_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_nand(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2106,7 +2091,6 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_or(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2118,7 +2102,6 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xor(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2131,7 +2114,6 @@ unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_max_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_max_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_max(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2144,7 +2126,6 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_min_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_min_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_min(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2157,7 +2138,6 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_umax_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_umax_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_umax(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2170,7 +2150,6 @@ unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_umin_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_umin_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_umin(dst, val),\n-        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -2260,7 +2239,6 @@ pub fn fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_fence_acqrel(),\n             SeqCst => intrinsics::atomic_fence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed fence\"),\n-            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }\n@@ -2350,7 +2328,6 @@ pub fn compiler_fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),\n             SeqCst => intrinsics::atomic_singlethreadfence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed compiler fence\"),\n-            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }"}, {"sha": "af7790164183c7dbfed11cc9b671173b1876f2ae", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -16,6 +16,7 @@ use syntax_pos::MultiSpan;\n /// An enum representing a diagnostic level.\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug)]\n+#[non_exhaustive]\n pub enum Level {\n     /// An error.\n     Error,\n@@ -25,8 +26,6 @@ pub enum Level {\n     Note,\n     /// A help message.\n     Help,\n-    #[doc(hidden)]\n-    __Nonexhaustive,\n }\n \n /// A structure representing a diagnostic message and associated children"}, {"sha": "97cf4c14c0cbb6ca139e861db0e02b77e07b7801", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -36,6 +36,7 @@\n #![feature(staged_api)]\n #![feature(lang_items)]\n #![feature(optin_builtin_traits)]\n+#![feature(non_exhaustive)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "21229d3299d7e5a7251e7e52252aec82900539eb", "filename": "src/libproc_macro/rustc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibproc_macro%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibproc_macro%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Frustc.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -278,7 +278,6 @@ impl Level {\n             Level::Warning => errors::Level::Warning,\n             Level::Note => errors::Level::Note,\n             Level::Help => errors::Level::Help,\n-            Level::__Nonexhaustive => unreachable!(\"Level::__Nonexhaustive\"),\n         }\n     }\n }"}, {"sha": "3e50988a68ba2e13fa34e29e17e3f902f6abfbaf", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -97,6 +97,7 @@ struct Custom {\n #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n+#[non_exhaustive]\n pub enum ErrorKind {\n     /// An entity was not found, often a file.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -180,15 +181,6 @@ pub enum ErrorKind {\n     /// read.\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     UnexpectedEof,\n-\n-    /// A marker variant that tells the compiler that users of this enum cannot\n-    /// match it exhaustively.\n-    #[unstable(feature = \"io_error_internals\",\n-               reason = \"better expressed through extensible enums that this \\\n-                         enum cannot be exhaustively matched against\",\n-               issue = \"0\")]\n-    #[doc(hidden)]\n-    __Nonexhaustive,\n }\n \n impl ErrorKind {\n@@ -212,7 +204,6 @@ impl ErrorKind {\n             ErrorKind::Interrupted => \"operation interrupted\",\n             ErrorKind::Other => \"other os error\",\n             ErrorKind::UnexpectedEof => \"unexpected end of file\",\n-            ErrorKind::__Nonexhaustive => unreachable!()\n         }\n     }\n }"}, {"sha": "60ad330bb9b72a280dd9f888de474e6888c916ba", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -311,6 +311,7 @@\n #![feature(doc_keyword)]\n #![feature(panic_info_message)]\n #![feature(panic_implementation)]\n+#![feature(non_exhaustive)]\n \n #![default_lib_allocator]\n "}, {"sha": "cd9a5ad448f58c31b099818351b39f600b4c9f21", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e98ed9650dd392adbfe0b973e03964d0d069863/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=6e98ed9650dd392adbfe0b973e03964d0d069863", "patch": "@@ -121,6 +121,7 @@ include!(\"bitflags.rs\");\n /// File or memory access pattern advisory information.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum advice {\n   /// The application expects that it will not access the\n   /// specified data in the near future.\n@@ -140,12 +141,12 @@ pub enum advice {\n   /// The application expects to access the specified data\n   /// in the near future.\n   WILLNEED   = 6,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Enumeration describing the kind of value stored in [`auxv`](struct.auxv.html).\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum auxtype {\n   /// Base address of the binary argument data provided to\n   /// [`proc_exec()`](fn.proc_exec.html).\n@@ -210,12 +211,12 @@ pub enum auxtype {\n   SYSINFO_EHDR = 262,\n   /// Thread ID of the initial thread of the process.\n   TID          = 261,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u32,\n }\n \n /// Identifiers for clocks.\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum clockid {\n   /// The system-wide monotonic clock, which is defined as a\n   /// clock measuring real time, whose value cannot be\n@@ -232,7 +233,6 @@ pub enum clockid {\n   REALTIME           = 3,\n   /// The CPU-time clock associated with the current thread.\n   THREAD_CPUTIME_ID  = 4,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u32,\n }\n \n /// A userspace condition variable.\n@@ -267,6 +267,7 @@ pub const DIRCOOKIE_START: dircookie = dircookie(0);\n /// exclusively or merely provided for alignment with POSIX.\n #[repr(u16)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum errno {\n   /// No error occurred. System call completed successfully.\n   SUCCESS        =  0,\n@@ -422,7 +423,6 @@ pub enum errno {\n   XDEV           = 75,\n   /// Extension: Capabilities insufficient.\n   NOTCAPABLE     = 76,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u16,\n }\n \n bitflags! {\n@@ -438,6 +438,7 @@ bitflags! {\n /// Type of a subscription to an event or its occurrence.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum eventtype {\n   /// The time value of clock [`subscription.union.clock.clock_id`](struct.subscription_clock.html#structfield.clock_id)\n   /// has reached timestamp [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout).\n@@ -463,7 +464,6 @@ pub enum eventtype {\n   /// The process associated with process descriptor\n   /// [`subscription.union.proc_terminate.fd`](struct.subscription_proc_terminate.html#structfield.fd) has terminated.\n   PROC_TERMINATE = 7,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Exit code generated by a process when exiting.\n@@ -530,6 +530,7 @@ pub type filesize = u64;\n /// The type of a file descriptor or file.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum filetype {\n   /// The type of the file descriptor or file is unknown or\n   /// is different from any of the other types specified.\n@@ -558,7 +559,6 @@ pub enum filetype {\n   SOCKET_STREAM    = 130,\n   /// The file refers to a symbolic link inode.\n   SYMBOLIC_LINK    = 144,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -847,12 +847,12 @@ bitflags! {\n /// memory.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum scope {\n   /// The object is stored in private memory.\n   PRIVATE = 4,\n   /// The object is stored in shared memory.\n   SHARED  = 8,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -878,6 +878,7 @@ bitflags! {\n /// Signal condition.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum signal {\n   /// Process abort signal.\n   ///\n@@ -983,7 +984,6 @@ pub enum signal {\n   ///\n   /// Action: Terminates the process.\n   XFSZ   = 26,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -1049,14 +1049,14 @@ pub type userdata = u64;\n /// should be set.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum whence {\n   /// Seek relative to current position.\n   CUR = 1,\n   /// Seek relative to end-of-file.\n   END = 2,\n   /// Seek relative to start-of-file.\n   SET = 3,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Auxiliary vector entry."}]}