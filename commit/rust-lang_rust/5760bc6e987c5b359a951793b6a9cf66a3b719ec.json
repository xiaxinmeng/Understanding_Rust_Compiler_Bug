{"sha": "5760bc6e987c5b359a951793b6a9cf66a3b719ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjBiYzZlOTg3YzViMzU5YTk1MTc5M2I2YTljZjY2YTNiNzE5ZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-10T14:08:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-10T14:08:21Z"}, "message": "Rollup merge of #62465 - matthewjasper:never-type-storage, r=pnkfelix\n\nSometimes generate storage statements for temporaries with type `!`\n\nCloses #62165\ncc #42371", "tree": {"sha": "0325ae829dd4b350ec92de69ed8197d911b8a3cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0325ae829dd4b350ec92de69ed8197d911b8a3cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5760bc6e987c5b359a951793b6a9cf66a3b719ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJfFVCRBK7hj4Ov3rIwAAdHIIAD0xv2CBgGAFTE4fSxccKj7g\nohoGVtuKydLQiI/NCmaV5/3dfrSB1PvRTLFmqfJE/FS+IQ1OFH5nEw2PBNcoBj0e\n/GhIrj6FYq8Lyu1obO3pJNyOKGmSnWvk86BvOMJ6rUXygDUdqpNznh/G88qkY3FV\nR4N84AYMomdFZm3mP3GhJQp9+e5k82AtwiTlisPBrlJrO/UeNeuuPX/IPKZcSgfq\nLvFu24sQu++CWoT2KEaEcAXC8O1Tv2fT9jMVXixX704mG1+bxOBJcgz9J/XM+WfW\nOCWa1rG3vSXV5ND0gBkVQu2w0ngjmt34SKWapl6sCd/5y0Tmo3P07JYRtsGmkBw=\n=zJIT\n-----END PGP SIGNATURE-----\n", "payload": "tree 0325ae829dd4b350ec92de69ed8197d911b8a3cb\nparent a2cbae8ad37bccae9b62c88b1805fc6348081b57\nparent 163c059354ed24d8b5e1c50177fd4dd2872d63e7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562767701 +0200\ncommitter GitHub <noreply@github.com> 1562767701 +0200\n\nRollup merge of #62465 - matthewjasper:never-type-storage, r=pnkfelix\n\nSometimes generate storage statements for temporaries with type `!`\n\nCloses #62165\ncc #42371\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5760bc6e987c5b359a951793b6a9cf66a3b719ec", "html_url": "https://github.com/rust-lang/rust/commit/5760bc6e987c5b359a951793b6a9cf66a3b719ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5760bc6e987c5b359a951793b6a9cf66a3b719ec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cbae8ad37bccae9b62c88b1805fc6348081b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cbae8ad37bccae9b62c88b1805fc6348081b57", "html_url": "https://github.com/rust-lang/rust/commit/a2cbae8ad37bccae9b62c88b1805fc6348081b57"}, {"sha": "163c059354ed24d8b5e1c50177fd4dd2872d63e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/163c059354ed24d8b5e1c50177fd4dd2872d63e7", "html_url": "https://github.com/rust-lang/rust/commit/163c059354ed24d8b5e1c50177fd4dd2872d63e7"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "82accb47437c6d1846021408d6633328de43088e", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=5760bc6e987c5b359a951793b6a9cf66a3b719ec", "patch": "@@ -73,13 +73,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let (usize_ty, bool_ty) = (this.hir.usize_ty(), this.hir.bool_ty());\n \n                 let slice = unpack!(block = this.as_place(block, lhs));\n-                // region_scope=None so place indexes live forever. They are scalars so they\n-                // do not need storage annotations, and they are often copied between\n-                // places.\n                 // Making this a *fresh* temporary also means we do not have to worry about\n                 // the index changing later: Nothing will ever change this temporary.\n                 // The \"retagging\" transformation (for Stacked Borrows) relies on this.\n-                let idx = unpack!(block = this.as_temp(block, None, index, Mutability::Mut));\n+                let idx = unpack!(block = this.as_temp(\n+                    block,\n+                    expr.temp_lifetime,\n+                    index,\n+                    Mutability::Not,\n+                ));\n \n                 // bounds check:\n                 let (len, lt) = ("}, {"sha": "dbcc330eca382cc2e1d444fcb8e6856f23d3f037", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=5760bc6e987c5b359a951793b6a9cf66a3b719ec", "patch": "@@ -3,6 +3,7 @@\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::scope::DropKind;\n use crate::hair::*;\n+use rustc::hir;\n use rustc::middle::region;\n use rustc::mir::*;\n \n@@ -66,32 +67,46 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n         let temp_place = &Place::from(temp);\n \n-        if !expr_ty.is_never() {\n-            this.cfg.push(\n-                block,\n-                Statement {\n-                    source_info,\n-                    kind: StatementKind::StorageLive(temp),\n-                },\n-            );\n-\n-            // In constants, `temp_lifetime` is `None` for temporaries that live for the\n-            // `'static` lifetime. Thus we do not drop these temporaries and simply leak them.\n-            // This is equivalent to what `let x = &foo();` does in functions. The temporary\n-            // is lifted to their surrounding scope. In a function that means the temporary lives\n-            // until just before the function returns. In constants that means it outlives the\n-            // constant's initialization value computation. Anything outliving a constant\n-            // must have the `'static` lifetime and live forever.\n-            // Anything with a shorter lifetime (e.g the `&foo()` in `bar(&foo())` or anything\n-            // within a block will keep the regular drops just like runtime code.\n-            if let Some(temp_lifetime) = temp_lifetime {\n-                this.schedule_drop(\n-                    expr_span,\n-                    temp_lifetime,\n-                    temp,\n-                    expr_ty,\n-                    DropKind::Storage,\n+        match expr.kind {\n+            // Don't bother with StorageLive and Dead for these temporaries,\n+            // they are never assigned.\n+            ExprKind::Break { .. } |\n+            ExprKind::Continue { .. } |\n+            ExprKind::Return { .. } => (),\n+            ExprKind::Block {\n+                body: hir::Block { expr: None, targeted_by_break: false, .. }\n+            } if expr_ty.is_never() => (),\n+            _ => {\n+                this.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::StorageLive(temp),\n+                    },\n                 );\n+\n+                // In constants, `temp_lifetime` is `None` for temporaries that\n+                // live for the `'static` lifetime. Thus we do not drop these\n+                // temporaries and simply leak them.\n+                // This is equivalent to what `let x = &foo();` does in\n+                // functions. The temporary is lifted to their surrounding\n+                // scope. In a function that means the temporary lives until\n+                // just before the function returns. In constants that means it\n+                // outlives the constant's initialization value computation.\n+                // Anything outliving a constant must have the `'static`\n+                // lifetime and live forever.\n+                // Anything with a shorter lifetime (e.g the `&foo()` in\n+                // `bar(&foo())` or anything within a block will keep the\n+                // regular drops just like runtime code.\n+                if let Some(temp_lifetime) = temp_lifetime {\n+                    this.schedule_drop(\n+                        expr_span,\n+                        temp_lifetime,\n+                        temp,\n+                        expr_ty,\n+                        DropKind::Storage,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "418febbdc01ebc8b5a59fb8c6997d51ad17fa0e6", "filename": "src/test/mir-opt/loop_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=5760bc6e987c5b359a951793b6a9cf66a3b719ec", "patch": "@@ -26,6 +26,7 @@ fn main() {\n //        _1 = ();\n //        StorageDead(_2);\n //        StorageDead(_1);\n+//        StorageLive(_4);\n //        goto -> bb5;\n //    }\n //    ..."}, {"sha": "4f30ea1467023a0e0f38d8de88228b4ff6486ab7", "filename": "src/test/ui/borrowck/assign-never-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5760bc6e987c5b359a951793b6a9cf66a3b719ec/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs?ref=5760bc6e987c5b359a951793b6a9cf66a3b719ec", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for issue 62165\n+\n+// check-pass\n+\n+#![feature(never_type)]\n+\n+pub fn main() {\n+    loop {\n+        match None {\n+            None => return,\n+            Some(val) => val,\n+        };\n+    };\n+}"}]}