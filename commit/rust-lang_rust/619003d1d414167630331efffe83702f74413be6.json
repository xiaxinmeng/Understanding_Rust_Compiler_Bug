{"sha": "619003d1d414167630331efffe83702f74413be6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOTAwM2QxZDQxNDE2NzYzMDMzMWVmZmZlODM3MDJmNzQ0MTNiZTY=", "commit": {"author": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-20T09:33:59Z"}, "committer": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-20T09:33:59Z"}, "message": "Implement some trivial size_hints for various iterators\n\nThis also implements ExactSizeIterator where applicable.\n\nAddresses most of the Iterator traits mentioned in #23708.", "tree": {"sha": "c986c64f37ab88feda2f7df926261e133d385aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c986c64f37ab88feda2f7df926261e133d385aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619003d1d414167630331efffe83702f74413be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619003d1d414167630331efffe83702f74413be6", "html_url": "https://github.com/rust-lang/rust/commit/619003d1d414167630331efffe83702f74413be6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619003d1d414167630331efffe83702f74413be6/comments", "author": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfa7d02d6713acd15ead20c199b808e85031f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfa7d02d6713acd15ead20c199b808e85031f9e", "html_url": "https://github.com/rust-lang/rust/commit/6bfa7d02d6713acd15ead20c199b808e85031f9e"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "2f56238a4638b1914f5d3e79433c7879b1c68ecb", "filename": "src/libcore/char.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -902,6 +902,11 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n             }\n         })\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.0.size_hint()\n+    }\n }\n \n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]"}, {"sha": "5e4622f804aff7fc442ec7c0ebf2eda05334901a", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -901,6 +901,10 @@ impl<I, T, E> Iterator for ResultShunt<I, E>\n             None => None,\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n }\n \n #[stable(feature = \"iter_arith_traits_result\", since=\"1.16.0\")]"}, {"sha": "1ca69f3f503d193402c591fe6657f215ff3c5eb6", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -1188,6 +1188,11 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n                     None => None,\n                 }\n             }\n+\n+            #[inline]\n+            fn size_hint(&self) -> (usize, Option<usize>) {\n+                self.iter.size_hint()\n+            }\n         }\n \n         let mut adapter = Adapter { iter: iter.into_iter(), found_none: false };"}, {"sha": "1f00a3ab1f5ded464dc5fb701b7725ad9afa0a9e", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -31,6 +31,10 @@ impl<I> Iterator for EnumerateAndAdjust<I> where I: Iterator {\n             (if i < self.gap_pos { i } else { i + self.gap_len }, elem)\n         })\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.enumerate.size_hint()\n+    }\n }\n \n pub trait EnumerateAndAdjustIterator {"}, {"sha": "666ca5eabe81b93485f5ba5cf3718ceaef1b43e1", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -77,8 +77,18 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n         None\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        // All the blocks, minus the number of blocks we've visited.\n+        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+\n+        // We will visit all remaining blocks exactly once.\n+        (remaining, Some(remaining))\n+    }\n }\n \n+impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n+\n /// Postorder traversal of a graph.\n ///\n /// Postorder traversal is when each node is visited after all of it's\n@@ -210,8 +220,18 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n \n         next.map(|(bb, _)| (bb, &self.mir[bb]))\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        // All the blocks, minus the number of blocks we've visited.\n+        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+\n+        // We will visit all remaining blocks exactly once.\n+        (remaining, Some(remaining))\n+    }\n }\n \n+impl<'a, 'tcx> ExactSizeIterator for Postorder<'a, 'tcx> {}\n+\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal.\n@@ -276,4 +296,10 @@ impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {\n \n         self.blocks.get(self.idx).map(|&bb| (bb, &self.mir[bb]))\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.idx, Some(self.idx))\n+    }\n }\n+\n+impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}"}, {"sha": "d2dca9f60845a42ee91d7c2d1e47b344633a786a", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -78,4 +78,11 @@ impl<'a> Iterator for Iter<'a> {\n             }\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        // This iterator will never return more elements than the base iterator;\n+        // but it can ignore all the remaining elements.\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper)\n+    }\n }"}, {"sha": "9e38911f53c9a0ec179cb93f5428725b1e771349", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -347,6 +347,11 @@ impl<'tcx,I:Iterator<Item=ty::Predicate<'tcx>>> Iterator for FilterToTraits<I> {\n             }\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let (_, upper) = self.base_iterator.size_hint();\n+        (0, upper)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "28e3180063c170d83a497e4d0307e5d1bbd8c72d", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -132,6 +132,11 @@ impl<'a> Iterator for BitVectorIter<'a> {\n         self.idx += offset + 1;\n         return Some(self.idx - 1);\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper)\n+    }\n }\n \n impl FromIterator<bool> for BitVector {"}, {"sha": "e2b393071ff5c4ec0333aaf2f343ed31db734902", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -334,6 +334,11 @@ impl<'g, N: Debug, E: Debug> Iterator for AdjacentEdges<'g, N, E> {\n         self.next = edge.next_edge[self.direction.repr];\n         Some((edge_index, edge))\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        // At most, all the edges in the graph.\n+        (0, Some(self.graph.len_edges()))\n+    }\n }\n \n pub struct DepthFirstTraversal<'g, N, E>\n@@ -383,8 +388,16 @@ impl<'g, N: Debug, E: Debug> Iterator for DepthFirstTraversal<'g, N, E> {\n         }\n         next\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        // We will visit every node in the graph exactly once.\n+        let remaining = self.graph.len_nodes() - self.visited.count();\n+        (remaining, Some(remaining))\n+    }\n }\n \n+impl<'g, N: Debug, E: Debug> ExactSizeIterator for DepthFirstTraversal<'g, N, E> {}\n+\n impl<E> Edge<E> {\n     pub fn source(&self) -> NodeIndex {\n         self.source"}, {"sha": "c5e7fdb30d36ade6dd716322037674395a9fe0d4", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -584,6 +584,13 @@ impl<'a, 'hir> Iterator for NodesMatchingUII<'a, 'hir> {\n             &mut NodesMatchingSuffix(ref mut iter) => iter.next(),\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        match self {\n+            &NodesMatchingDirect(ref iter) => iter.size_hint(),\n+            &NodesMatchingSuffix(ref iter) => iter.size_hint(),\n+        }\n+    }\n }\n \n impl UserIdentifiedItem {"}, {"sha": "a753698050332e3f6d0810410c7a0061b0a9fb95", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -718,8 +718,15 @@ impl<'a> Iterator for AllTraits<'a> {\n             TraitInfo::new(*info)\n         })\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let len = self.borrow.as_ref().unwrap().len() - self.idx;\n+        (len, Some(len))\n+    }\n }\n \n+impl<'a> ExactSizeIterator for AllTraits<'a> {}\n+\n \n struct UsePlacementFinder<'a, 'tcx: 'a, 'gcx: 'tcx> {\n     target_module: ast::NodeId,"}, {"sha": "a2a0e878fd88894f868320fc314db09fc606c41c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -602,6 +602,11 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n         None\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let lower = self.current_list.len();\n+        (lower, None)\n+    }\n }\n \n pub trait AttributesExt {"}, {"sha": "e95c6f2e1243fe7f5a2556d64d243eb3c30e12b4", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/619003d1d414167630331efffe83702f74413be6/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619003d1d414167630331efffe83702f74413be6/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=619003d1d414167630331efffe83702f74413be6", "patch": "@@ -272,6 +272,11 @@ pub mod printf {\n             self.s = tail;\n             Some(sub)\n         }\n+\n+        fn size_hint(&self) -> (usize, Option<usize>) {\n+            // Substitutions are at least 2 characters long.\n+            (0, Some(self.s.len() / 2))\n+        }\n     }\n \n     enum State {\n@@ -782,6 +787,10 @@ pub mod shell {\n                 None => None,\n             }\n         }\n+\n+        fn size_hint(&self) -> (usize, Option<usize>) {\n+            (0, Some(self.s.len()))\n+        }\n     }\n \n     /// Parse the next substitution from the input string."}]}