{"sha": "5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTA5NGU1NzlmOGZhNmMzMmRmMDY5MGZkM2U0N2EzM2MxY2I2ZWY=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-02-02T03:26:48Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-02-07T04:42:05Z"}, "message": "mir: Fix DefiningTy::Const\n\nFixes #47590 by fixing the way DefiningTy represents constants. Previously,\nconstants were represented using just the type of the variable. However, this\nwill fail to capture early-bound regions as NLL inference vars, resulting in an\nICE when we try to compute region VIDs a little bit later in the universal\nregion resolution process.", "tree": {"sha": "efd0d425708ee6439e6e270bf4aeabc1fa85e310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd0d425708ee6439e6e270bf4aeabc1fa85e310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "html_url": "https://github.com/rust-lang/rust/commit/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd98fe0c05601d8a318a709adc4263f3348ea8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd98fe0c05601d8a318a709adc4263f3348ea8d4", "html_url": "https://github.com/rust-lang/rust/commit/bd98fe0c05601d8a318a709adc4263f3348ea8d4"}], "stats": {"total": 178, "additions": 140, "deletions": 38}, "files": [{"sha": "d213f376d2bca2a8c84baf461278b96e2a63f33f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/annotation.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs?ref=5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "patch": "@@ -45,10 +45,11 @@ impl<'gcx, 'tcx> RegionInferenceContext<'tcx> {\n                     &substs[..]\n                 ));\n             }\n-            DefiningTy::Const(ty) => {\n+            DefiningTy::Const(def_id, substs) => {\n                 err.note(&format!(\n-                    \"defining type: {:?}\",\n-                    ty\n+                    \"defining constant type: {:?} with substs {:#?}\",\n+                    def_id,\n+                    &substs[..]\n                 ));\n             }\n         }"}, {"sha": "668172749fecb2511d478bf987b0c3d9ab5147bf", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "patch": "@@ -125,7 +125,7 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR represents some form of constant. The signature then\n     /// is that it has no inputs and a single return value, which is\n     /// the value of the constant.\n-    Const(Ty<'tcx>),\n+    Const(DefId, &'tcx Substs<'tcx>),\n }\n \n #[derive(Debug)]\n@@ -534,34 +534,42 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n     /// see `DefiningTy` for details.\n     fn defining_ty(&self) -> DefiningTy<'tcx> {\n         let tcx = self.infcx.tcx;\n-\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n \n-        let defining_ty = if self.mir_def_id == closure_base_def_id {\n-            tcx.type_of(closure_base_def_id)\n-        } else {\n-            let tables = tcx.typeck_tables_of(self.mir_def_id);\n-            tables.node_id_to_type(self.mir_hir_id)\n-        };\n-\n-        let defining_ty = self.infcx\n-            .replace_free_regions_with_nll_infer_vars(FR, &defining_ty);\n-\n         match tcx.hir.body_owner_kind(self.mir_node_id) {\n-            BodyOwnerKind::Fn => match defining_ty.sty {\n-                ty::TyClosure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n-                ty::TyGenerator(def_id, substs, interior) => {\n-                    DefiningTy::Generator(def_id, substs, interior)\n+            BodyOwnerKind::Fn => {\n+                let defining_ty = if self.mir_def_id == closure_base_def_id {\n+                    tcx.type_of(closure_base_def_id)\n+                } else {\n+                    let tables = tcx.typeck_tables_of(self.mir_def_id);\n+                    tables.node_id_to_type(self.mir_hir_id)\n+                };\n+\n+                let defining_ty = self.infcx\n+                    .replace_free_regions_with_nll_infer_vars(FR, &defining_ty);\n+\n+                match defining_ty.sty  {\n+                    ty::TyClosure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n+                    ty::TyGenerator(def_id, substs, interior) => {\n+                        DefiningTy::Generator(def_id, substs, interior)\n+                    }\n+                    ty::TyFnDef(def_id, substs) => DefiningTy::FnDef(def_id, substs),\n+                    _ => span_bug!(\n+                        tcx.def_span(self.mir_def_id),\n+                        \"expected defining type for `{:?}`: `{:?}`\",\n+                        self.mir_def_id,\n+                        defining_ty\n+                    ),\n                 }\n-                ty::TyFnDef(def_id, substs) => DefiningTy::FnDef(def_id, substs),\n-                _ => span_bug!(\n-                    tcx.def_span(self.mir_def_id),\n-                    \"expected defining type for `{:?}`: `{:?}`\",\n-                    self.mir_def_id,\n-                    defining_ty\n-                ),\n-            },\n-            BodyOwnerKind::Const | BodyOwnerKind::Static(..) => DefiningTy::Const(defining_ty),\n+            }\n+\n+            BodyOwnerKind::Const | BodyOwnerKind::Static(..) => {\n+                assert_eq!(closure_base_def_id, self.mir_def_id);\n+                let identity_substs = Substs::identity_for_item(tcx, closure_base_def_id);\n+                let substs = self.infcx\n+                    .replace_free_regions_with_nll_infer_vars(FR, &identity_substs);\n+                DefiningTy::Const(self.mir_def_id, substs)\n+            }\n         }\n     }\n \n@@ -592,13 +600,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 substs.substs\n             }\n \n-            DefiningTy::FnDef(_, substs) => substs,\n-\n-            // When we encounter a constant body, just return whatever\n-            // substitutions are in scope for that constant.\n-            DefiningTy::Const(_) => {\n-                identity_substs\n-            }\n+            DefiningTy::FnDef(_, substs) | DefiningTy::Const(_, substs) => substs,\n         };\n \n         let global_mapping = iter::once((gcx.types.re_static, fr_static));\n@@ -660,9 +662,14 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 sig.inputs_and_output()\n             }\n \n-            // For a constant body, there are no inputs, and one\n-            // \"output\" (the type of the constant).\n-            DefiningTy::Const(ty) => ty::Binder::dummy(tcx.mk_type_list(iter::once(ty))),\n+            DefiningTy::Const(def_id, _) => {\n+                // For a constant body, there are no inputs, and one\n+                // \"output\" (the type of the constant).\n+                assert_eq!(self.mir_def_id, def_id);\n+                let ty = tcx.type_of(def_id);\n+                let ty = indices.fold_to_region_vids(tcx, &ty);\n+                ty::Binder::dummy(tcx.mk_type_list(iter::once(ty)))\n+            }\n         }\n     }\n "}, {"sha": "b0f5fbf7160d1aacc4140c1dcfcaa10cbfb15f91", "filename": "src/test/ui/nll/trait-associated-constant.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs?ref=5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test cases where we put various lifetime constraints on trait\n+// associated constants.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::option::Option;\n+\n+trait Anything<'a: 'b, 'b> {\n+    const AC: Option<&'b str>;\n+}\n+\n+struct OKStruct { }\n+\n+impl<'a: 'b, 'b> Anything<'a, 'b> for OKStruct {\n+    const AC: Option<&'b str> = None;\n+}\n+\n+struct FailStruct1 { }\n+\n+impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct1 {\n+    const AC: Option<&'c str> = None;\n+    //~^ ERROR: mismatched types\n+}\n+\n+struct FailStruct2 { }\n+\n+impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n+    const AC: Option<&'a str> = None;\n+    //~^ ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "100e3362886b37caef3a3a721858ce593864e117", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5de094e579f8fa6c32df0690fd3e47a33c1cb6ef/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=5de094e579f8fa6c32df0690fd3e47a33c1cb6ef", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trait-associated-constant.rs:31:5\n+   |\n+31 |     const AC: Option<&'c str> = None;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `std::option::Option<&'b str>`\n+              found type `std::option::Option<&'c str>`\n+note: the lifetime 'c as defined on the impl at 30:1...\n+  --> $DIR/trait-associated-constant.rs:30:1\n+   |\n+30 | / impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct1 {\n+31 | |     const AC: Option<&'c str> = None;\n+32 | |     //~^ ERROR: mismatched types\n+33 | | }\n+   | |_^\n+note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 30:1\n+  --> $DIR/trait-associated-constant.rs:30:1\n+   |\n+30 | / impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct1 {\n+31 | |     const AC: Option<&'c str> = None;\n+32 | |     //~^ ERROR: mismatched types\n+33 | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-associated-constant.rs:38:5\n+   |\n+38 |     const AC: Option<&'a str> = None;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `std::option::Option<&'b str>`\n+              found type `std::option::Option<&'a str>`\n+note: the lifetime 'a as defined on the impl at 37:1...\n+  --> $DIR/trait-associated-constant.rs:37:1\n+   |\n+37 | / impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n+38 | |     const AC: Option<&'a str> = None;\n+39 | |     //~^ ERROR: mismatched types\n+40 | | }\n+   | |_^\n+note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 37:1\n+  --> $DIR/trait-associated-constant.rs:37:1\n+   |\n+37 | / impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n+38 | |     const AC: Option<&'a str> = None;\n+39 | |     //~^ ERROR: mismatched types\n+40 | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}]}