{"sha": "568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "node_id": "C_kwDOAAsO6NoAKDU2ODczNmI5OGZhNjkwOWFlOTE2OTZiNmJkOGUxZDY2Zjc1YmZlMmQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-08T21:43:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-08T21:43:56Z"}, "message": "Rollup merge of #94689 - compiler-errors:on-unimplemented-substs, r=petrochenkov\n\nUse impl substs in `#[rustc_on_unimplemented]`\n\nWe were using the trait-ref substs instead of impl substs in `rustc_on_unimplemented`, even when computing the `rustc_on_unimplemented` attached to an impl block. Let's not do that.\n\nThis PR also untangles impl and trait def-ids in the logic in `on_unimplemented` a bit.\n\nFixes #94675", "tree": {"sha": "d750e9f8f2226eedad8fe8f4443b1f6a770567da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d750e9f8f2226eedad8fe8f4443b1f6a770567da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJ84cCRBK7hj4Ov3rIwAAhu0IAFUNwGlShM5EFuJmyVNm3YtP\n17tD3X+wPsnTKwIq5ZIs8D48BnSMGxL/d9zbPtDKQOVKfBNZ/BpeCJlNM5/oJNGg\nwvAMeDJiNNV4mNXohTfgy+nmm/G1oUeG4lEkaS7rmLRMKmD/O6OwTDyWt5CYGpXO\nY14YtreNfSGAqtInUfev/f0IkrNm3yxWh0PZRpwDjzE2Vf9wUhLX9DTlPPnmL7tj\nC5k70pR/qoGOMCDfSS2dU6WhLKXG5stIZIr+wSvi5+Z8OSevIT+/PUc91t1ReBQA\nYA3dIlIT0HkL+uraGdvvIcLSnXwcWZXdx9rqOFJdmw2vriWhyVvjKWQxHVVbeRo=\n=9kVR\n-----END PGP SIGNATURE-----\n", "payload": "tree d750e9f8f2226eedad8fe8f4443b1f6a770567da\nparent 64187b837486be90b897c7014572aa3537dc9b27\nparent b726bfb56902eaa743f7164ce502afbdd232562c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646775836 +0100\ncommitter GitHub <noreply@github.com> 1646775836 +0100\n\nRollup merge of #94689 - compiler-errors:on-unimplemented-substs, r=petrochenkov\n\nUse impl substs in `#[rustc_on_unimplemented]`\n\nWe were using the trait-ref substs instead of impl substs in `rustc_on_unimplemented`, even when computing the `rustc_on_unimplemented` attached to an impl block. Let's not do that.\n\nThis PR also untangles impl and trait def-ids in the logic in `on_unimplemented` a bit.\n\nFixes #94675\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "html_url": "https://github.com/rust-lang/rust/commit/568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64187b837486be90b897c7014572aa3537dc9b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/64187b837486be90b897c7014572aa3537dc9b27", "html_url": "https://github.com/rust-lang/rust/commit/64187b837486be90b897c7014572aa3537dc9b27"}, {"sha": "b726bfb56902eaa743f7164ce502afbdd232562c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b726bfb56902eaa743f7164ce502afbdd232562c", "html_url": "https://github.com/rust-lang/rust/commit/b726bfb56902eaa743f7164ce502afbdd232562c"}], "stats": {"total": 171, "additions": 129, "deletions": 42}, "files": [{"sha": "8b0e7794f92ace6b3af4ba94c24d2f41e311cc40", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -977,7 +977,6 @@ impl<'tcx> TraitRef<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n-\n         ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }\n     }\n }"}, {"sha": "6dfbdace8e2a0f9a76262c2c17a67778578434a8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -4,7 +4,7 @@ use super::{\n use crate::infer::InferCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind};\n use rustc_span::symbol::sym;\n use std::iter;\n@@ -17,7 +17,7 @@ crate trait InferCtxtExt<'tcx> {\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n-    ) -> Option<DefId>;\n+    ) -> Option<(DefId, SubstsRef<'tcx>)>;\n \n     /*private*/\n     fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str>;\n@@ -34,7 +34,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n-    ) -> Option<DefId> {\n+    ) -> Option<(DefId, SubstsRef<'tcx>)> {\n         let tcx = self.tcx;\n         let param_env = obligation.param_env;\n         let trait_ref = tcx.erase_late_bound_regions(trait_ref);\n@@ -50,28 +50,29 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let impl_self_ty = impl_trait_ref.self_ty();\n \n             if let Ok(..) = self.can_eq(param_env, trait_self_ty, impl_self_ty) {\n-                self_match_impls.push(def_id);\n+                self_match_impls.push((def_id, impl_substs));\n \n                 if iter::zip(\n                     trait_ref.substs.types().skip(1),\n                     impl_trait_ref.substs.types().skip(1),\n                 )\n                 .all(|(u, v)| self.fuzzy_match_tys(u, v, false).is_some())\n                 {\n-                    fuzzy_match_impls.push(def_id);\n+                    fuzzy_match_impls.push((def_id, impl_substs));\n                 }\n             }\n         });\n \n-        let impl_def_id = if self_match_impls.len() == 1 {\n+        let impl_def_id_and_substs = if self_match_impls.len() == 1 {\n             self_match_impls[0]\n         } else if fuzzy_match_impls.len() == 1 {\n             fuzzy_match_impls[0]\n         } else {\n             return None;\n         };\n \n-        tcx.has_attr(impl_def_id, sym::rustc_on_unimplemented).then_some(impl_def_id)\n+        tcx.has_attr(impl_def_id_and_substs.0, sym::rustc_on_unimplemented)\n+            .then_some(impl_def_id_and_substs)\n     }\n \n     /// Used to set on_unimplemented's `ItemContext`\n@@ -120,8 +121,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n-        let def_id =\n-            self.impl_similar_to(trait_ref, obligation).unwrap_or_else(|| trait_ref.def_id());\n+        let (def_id, substs) = self\n+            .impl_similar_to(trait_ref, obligation)\n+            .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));\n         let trait_ref = trait_ref.skip_binder();\n \n         let mut flags = vec![(\n@@ -176,15 +178,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             for param in generics.params.iter() {\n                 let value = match param.kind {\n                     GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n-                        trait_ref.substs[param.index as usize].to_string()\n+                        substs[param.index as usize].to_string()\n                     }\n                     GenericParamDefKind::Lifetime => continue,\n                 };\n                 let name = param.name;\n                 flags.push((name, Some(value)));\n \n                 if let GenericParamDefKind::Type { .. } = param.kind {\n-                    let param_ty = trait_ref.substs[param.index as usize].expect_ty();\n+                    let param_ty = substs[param.index as usize].expect_ty();\n                     if let Some(def) = param_ty.ty_adt_def() {\n                         // We also want to be able to select the parameter's\n                         // original signature with no type arguments resolved\n@@ -229,9 +231,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         });\n \n-        if let Ok(Some(command)) =\n-            OnUnimplementedDirective::of_item(self.tcx, trait_ref.def_id, def_id)\n-        {\n+        if let Ok(Some(command)) = OnUnimplementedDirective::of_item(self.tcx, def_id) {\n             command.evaluate(self.tcx, trait_ref, &flags)\n         } else {\n             OnUnimplementedNote::default()"}, {"sha": "2f697c1fa27b79e3eb4f7d2a902a9a24f520fb5f", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -54,7 +54,7 @@ fn parse_error(\n impl<'tcx> OnUnimplementedDirective {\n     fn parse(\n         tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n+        item_def_id: DefId,\n         items: &[NestedMetaItem],\n         span: Span,\n         is_root: bool,\n@@ -63,7 +63,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut item_iter = items.iter();\n \n         let parse_value = |value_str| {\n-            OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n+            OnUnimplementedFormatString::try_parse(tcx, item_def_id, value_str, span).map(Some)\n         };\n \n         let condition = if is_root {\n@@ -135,7 +135,7 @@ impl<'tcx> OnUnimplementedDirective {\n             {\n                 if let Some(items) = item.meta_item_list() {\n                     if let Ok(subcommand) =\n-                        Self::parse(tcx, trait_def_id, &items, item.span(), false)\n+                        Self::parse(tcx, item_def_id, &items, item.span(), false)\n                     {\n                         subcommands.push(subcommand);\n                     } else {\n@@ -178,27 +178,23 @@ impl<'tcx> OnUnimplementedDirective {\n         }\n     }\n \n-    pub fn of_item(\n-        tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n-        impl_def_id: DefId,\n-    ) -> Result<Option<Self>, ErrorGuaranteed> {\n-        let attrs = tcx.get_attrs(impl_def_id);\n+    pub fn of_item(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> Result<Option<Self>, ErrorGuaranteed> {\n+        let attrs = tcx.get_attrs(item_def_id);\n \n         let Some(attr) = tcx.sess.find_by_name(&attrs, sym::rustc_on_unimplemented) else {\n             return Ok(None);\n         };\n \n         let result = if let Some(items) = attr.meta_item_list() {\n-            Self::parse(tcx, trait_def_id, &items, attr.span, true).map(Some)\n+            Self::parse(tcx, item_def_id, &items, attr.span, true).map(Some)\n         } else if let Some(value) = attr.value_str() {\n             Ok(Some(OnUnimplementedDirective {\n                 condition: None,\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n                     tcx,\n-                    trait_def_id,\n+                    item_def_id,\n                     value,\n                     attr.span,\n                 )?),\n@@ -209,7 +205,7 @@ impl<'tcx> OnUnimplementedDirective {\n         } else {\n             return Err(ErrorGuaranteed);\n         };\n-        debug!(\"of_item({:?}/{:?}) = {:?}\", trait_def_id, impl_def_id, result);\n+        debug!(\"of_item({:?}) = {:?}\", item_def_id, result);\n         result\n     }\n \n@@ -280,23 +276,29 @@ impl<'tcx> OnUnimplementedDirective {\n impl<'tcx> OnUnimplementedFormatString {\n     fn try_parse(\n         tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n+        item_def_id: DefId,\n         from: Symbol,\n         err_sp: Span,\n     ) -> Result<Self, ErrorGuaranteed> {\n         let result = OnUnimplementedFormatString(from);\n-        result.verify(tcx, trait_def_id, err_sp)?;\n+        result.verify(tcx, item_def_id, err_sp)?;\n         Ok(result)\n     }\n \n     fn verify(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n+        item_def_id: DefId,\n         span: Span,\n     ) -> Result<(), ErrorGuaranteed> {\n-        let name = tcx.item_name(trait_def_id);\n-        let generics = tcx.generics_of(trait_def_id);\n+        let trait_def_id = if tcx.is_trait(item_def_id) {\n+            item_def_id\n+        } else {\n+            tcx.trait_id_of_impl(item_def_id)\n+                .expect(\"expected `on_unimplemented` to correspond to a trait\")\n+        };\n+        let trait_name = tcx.item_name(trait_def_id);\n+        let generics = tcx.generics_of(item_def_id);\n         let s = self.0.as_str();\n         let parser = Parser::new(s, None, None, false, ParseMode::Format);\n         let mut result = Ok(());\n@@ -307,7 +309,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                     // `{Self}` is allowed\n                     Position::ArgumentNamed(s, _) if s == kw::SelfUpper => (),\n                     // `{ThisTraitsName}` is allowed\n-                    Position::ArgumentNamed(s, _) if s == name => (),\n+                    Position::ArgumentNamed(s, _) if s == trait_name => (),\n                     // `{from_method}` is allowed\n                     Position::ArgumentNamed(s, _) if s == sym::from_method => (),\n                     // `{from_desugaring}` is allowed\n@@ -329,9 +331,13 @@ impl<'tcx> OnUnimplementedFormatString {\n                                     tcx.sess,\n                                     span,\n                                     E0230,\n-                                    \"there is no parameter `{}` on trait `{}`\",\n+                                    \"there is no parameter `{}` on {}\",\n                                     s,\n-                                    name\n+                                    if trait_def_id == item_def_id {\n+                                        format!(\"trait `{}`\", trait_name)\n+                                    } else {\n+                                        \"impl\".to_string()\n+                                    }\n                                 )\n                                 .emit();\n                                 result = Err(ErrorGuaranteed);"}, {"sha": "7c3594175b85508ed4c10ac92fc306d6cbf79d52", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -742,12 +742,11 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                     impl_trait_ref,\n                     &impl_.items,\n                 );\n-                let trait_def_id = impl_trait_ref.def_id;\n-                check_on_unimplemented(tcx, trait_def_id, it);\n+                check_on_unimplemented(tcx, it);\n             }\n         }\n         hir::ItemKind::Trait(_, _, _, _, ref items) => {\n-            check_on_unimplemented(tcx, it.def_id.to_def_id(), it);\n+            check_on_unimplemented(tcx, it);\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n@@ -857,9 +856,9 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n     }\n }\n \n-pub(super) fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item<'_>) {\n+pub(super) fn check_on_unimplemented(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n     // an error would be reported if this fails.\n-    let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item.def_id.to_def_id());\n+    let _ = traits::OnUnimplementedDirective::of_item(tcx, item.def_id.to_def_id());\n }\n \n pub(super) fn check_specialization_validity<'tcx>("}, {"sha": "0604aab3bcd2cfcda041008fa606bcc9dcff6c71", "filename": "src/test/ui/consts/issue-94675.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_trait_impl, const_mut_refs)]\n+\n+struct Foo<'a> {\n+    bar: &'a mut Vec<usize>,\n+}\n+\n+impl<'a> Foo<'a> {\n+    const fn spam(&mut self, baz: &mut Vec<u32>) {\n+        self.bar[0] = baz.len();\n+        //~^ ERROR cannot call non-const fn `Vec::<u32>::len` in constant functions\n+        //~| ERROR the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n+        //~| ERROR cannot call non-const operator in constant functions\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6665e42835b7109d39b2eb30b1c8b449756f7faa", "filename": "src/test/ui/consts/issue-94675.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -0,0 +1,38 @@\n+error[E0015]: cannot call non-const fn `Vec::<u32>::len` in constant functions\n+  --> $DIR/issue-94675.rs:9:27\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |                           ^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error[E0277]: the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `~const IndexMut<usize>` is not implemented for `Vec<usize>`\n+note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that implementation is not `const`\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n+\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "26e9e2c8f91cf67409f196878302ee80dfcfa51a", "filename": "src/test/ui/issues/issue-87707.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -1,6 +1,7 @@\n // test for #87707\n // edition:2018\n // run-fail\n+// exec-env:RUST_BACKTRACE=0\n // check-run-results\n \n use std::sync::Once;"}, {"sha": "e6c9ea0eb53c39033cca72cfa11f927268799a73", "filename": "src/test/ui/issues/issue-87707.run.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -1,3 +1,3 @@\n-thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:12:24\n+thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:13:24\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:14:7\n+thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:15:7"}, {"sha": "fe9c50ec3d4a2cf34e92d3c09e8c50a0659d6e27", "filename": "src/test/ui/on-unimplemented/impl-substs.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.rs?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -0,0 +1,15 @@\n+#![feature(rustc_attrs)]\n+\n+trait Foo<A> {\n+    fn foo(self);\n+}\n+\n+#[rustc_on_unimplemented = \"an impl did not match: {A} {B} {C}\"]\n+impl<A, B, C> Foo<A> for (A, B, C) {\n+    fn foo(self) {}\n+}\n+\n+fn main() {\n+    Foo::<usize>::foo((1i32, 1i32, 1i32));\n+    //~^ ERROR the trait bound `(i32, i32, i32): Foo<usize>` is not satisfied\n+}"}, {"sha": "db66ab0bfaec1a61edd1a84bd7779eb5bfc8a133", "filename": "src/test/ui/on-unimplemented/impl-substs.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/568736b98fa6909ae91696b6bd8e1d66f75bfe2d/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr?ref=568736b98fa6909ae91696b6bd8e1d66f75bfe2d", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `(i32, i32, i32): Foo<usize>` is not satisfied\n+  --> $DIR/impl-substs.rs:13:23\n+   |\n+LL |     Foo::<usize>::foo((1i32, 1i32, 1i32));\n+   |     ----------------- ^^^^^^^^^^^^^^^^^^ an impl did not match: usize _ _\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Foo<usize>` is not implemented for `(i32, i32, i32)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}