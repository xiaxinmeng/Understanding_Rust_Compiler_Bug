{"sha": "53dda8e915e54bc65b41599738245d62dbe3e6df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZGRhOGU5MTVlNTRiYzY1YjQxNTk5NzM4MjQ1ZDYyZGJlM2U2ZGY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-23T11:09:30Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-27T09:18:11Z"}, "message": "Added fully elaborated type label for inferred arguments.", "tree": {"sha": "118d53767e543e5817e3558f0e9aee8351318666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118d53767e543e5817e3558f0e9aee8351318666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53dda8e915e54bc65b41599738245d62dbe3e6df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlta41MACgkQAXYLT59T\n8VRXEQ//VsqEfleptW8sAn/MWd0E5h/2tZFLyPitaWV/isVMOYXrxLePCg5533AQ\nEggGVnVZ5OWq7pyDXVJHly1KqohANk3c10g99DROXvz332oLzgkl/tsco4eMPblc\nCMXHS+hEJzcVknCu7iGS8016WU8uJa9FG8hl2X/FfiHKI5uLh7IYDOTqBKBIz8t7\nHjMSggQ955yqOTmn5Grvu05HxdORxdRDYQgKveg3UrQXfntHHcmaboTefPFXSrnT\n7pNeNFEeeTstxeGoBe3GcaCu1Ps5X51F25/S203lAHtAxqu2RIMrpXWC5AtDghOy\n1zeFRr7894Le1kKl0TsqtaRIylQzsKG6XlC7g0pGch3vBgfK3HWIoRothCC3DPI0\ndIDosGCTkxX/wbtC3OivPcHv4neqb+klWdbdUJjch4GtC51XvUz8xkmOfSWVnBCs\n6RyZ1iml5y9hbyB7uHJE6Ma1tBRtQC6ymHNT6jrtwbIuM5foEI2++0VjvcsLr1aU\nqfzUFcwp79lr478ERDjuVOrkEtMkJ2fW+0BNsyUkhmyq7XCMtVJoS7Kf1QvVLeIG\nsUV1EtWU6FXCakkdcZ7cMed2VrarI4qh6O4nc3y9HF6ic0Vj93PkpUvaOhVZHKHR\nTeA30j9UcTx3jETj0oYe1Nl8vicKHbtFoMEvuvCqNgq3w9MFYzs=\n=VYq4\n-----END PGP SIGNATURE-----", "payload": "tree 118d53767e543e5817e3558f0e9aee8351318666\nparent 41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6\nauthor David Wood <david@davidtw.co> 1532344170 +0200\ncommitter David Wood <david@davidtw.co> 1532683091 +0200\n\nAdded fully elaborated type label for inferred arguments.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53dda8e915e54bc65b41599738245d62dbe3e6df", "html_url": "https://github.com/rust-lang/rust/commit/53dda8e915e54bc65b41599738245d62dbe3e6df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53dda8e915e54bc65b41599738245d62dbe3e6df/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6", "html_url": "https://github.com/rust-lang/rust/commit/41ce2e9dd29eecdf4a4d7249cac3c0d631a0cdd6"}], "stats": {"total": 128, "additions": 112, "deletions": 16}, "files": [{"sha": "693219ec4b03f518e4d2c39429364f95bc8e2bff", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=53dda8e915e54bc65b41599738245d62dbe3e6df", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n \n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n+    pub fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n         if let ty::TyInfer(ty::TyVar(ty_vid)) = (*ty).sty {\n             let ty_vars = self.type_variables.borrow();\n             if let TypeVariableOrigin::TypeParameterDefinition(_, name) ="}, {"sha": "7ba1e50cef348b3a35ae57c31e3241d23610f3dc", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=53dda8e915e54bc65b41599738245d62dbe3e6df", "patch": "@@ -404,9 +404,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let counter = &mut 1;\n         let fr_name = self.give_region_a_name(\n-            infcx.tcx, mir, mir_def_id, fr, counter, &mut diag);\n+            infcx, mir, mir_def_id, fr, counter, &mut diag);\n         let outlived_fr_name = self.give_region_a_name(\n-            infcx.tcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n+            infcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n \n         match (category, outlived_fr_is_local, fr_is_local) {\n             (ConstraintCategory::Return, true, _) => {"}, {"sha": "05ac130f0004def2af429f6bca551de8d5046611", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 55, "deletions": 13, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=53dda8e915e54bc65b41599738245d62dbe3e6df", "patch": "@@ -12,6 +12,7 @@ use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::ToRegionVid;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::infer::InferCtxt;\n use rustc::mir::Mir;\n use rustc::ty::subst::{Substs, UnpackedKind};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n@@ -48,7 +49,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// and then return the name `'1` for us to use.\n     crate fn give_region_a_name(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n@@ -59,17 +60,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         assert!(self.universal_regions.is_universal_region(fr));\n \n-        self.give_name_from_error_region(tcx, mir_def_id, fr, counter, diag)\n+        self.give_name_from_error_region(infcx.tcx, mir_def_id, fr, counter, diag)\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_arguments(\n-                    tcx, mir, mir_def_id, fr, counter, diag)\n+                    infcx, mir, mir_def_id, fr, counter, diag)\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_upvars(\n-                    tcx, mir, fr, counter, diag)\n+                    infcx.tcx, mir, fr, counter, diag)\n             })\n             .or_else(|| {\n-                self.give_name_if_anonymous_region_appears_in_output(tcx, mir, fr, counter, diag)\n+                self.give_name_if_anonymous_region_appears_in_output(\n+                    infcx.tcx, mir, fr, counter, diag)\n             })\n             .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr))\n     }\n@@ -130,20 +132,20 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn give_name_if_anonymous_region_appears_in_arguments(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n         let implicit_inputs = self.universal_regions.defining_ty.implicit_inputs();\n-        let argument_index = self.get_argument_index_for_region(tcx, fr)?;\n+        let argument_index = self.get_argument_index_for_region(infcx.tcx, fr)?;\n \n         let arg_ty =\n             self.universal_regions.unnormalized_input_tys[implicit_inputs + argument_index];\n         if let Some(region_name) = self.give_name_if_we_can_match_hir_ty_from_argument(\n-            tcx,\n+            infcx,\n             mir_def_id,\n             fr,\n             arg_ty,\n@@ -169,25 +171,31 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     fn give_name_if_we_can_match_hir_ty_from_argument(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n         argument_index: usize,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n-        let mir_node_id = tcx.hir.as_local_node_id(mir_def_id)?;\n-        let fn_decl = tcx.hir.fn_decl(mir_node_id)?;\n+        let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id)?;\n+        let fn_decl = infcx.tcx.hir.fn_decl(mir_node_id)?;\n         let argument_hir_ty: &hir::Ty = &fn_decl.inputs[argument_index];\n         match argument_hir_ty.node {\n             // This indicates a variable with no type annotation, like\n             // `|x|`... in that case, we can't highlight the type but\n             // must highlight the variable.\n-            hir::TyKind::Infer => None,\n+            hir::TyKind::Infer => self.give_name_if_we_cannot_match_hir_ty(\n+                infcx,\n+                argument_ty,\n+                argument_hir_ty,\n+                counter,\n+                diag,\n+            ),\n \n             _ => self.give_name_if_we_can_match_hir_ty(\n-                tcx,\n+                infcx.tcx,\n                 needle_fr,\n                 argument_ty,\n                 argument_hir_ty,\n@@ -197,6 +205,40 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n+    /// Attempts to highlight the specific part of a type in an argument\n+    /// that has no type annotation.\n+    /// For example, we might produce an annotation like this:\n+    ///\n+    /// ```\n+    ///  |     foo(|a, b| b)\n+    ///  |          -  -\n+    ///  |          |  |\n+    ///  |          |  has type `&'1 u32`\n+    ///  |          has type `&'2 u32`\n+    /// ```\n+    fn give_name_if_we_cannot_match_hir_ty(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        argument_ty: Ty<'tcx>,\n+        argument_hir_ty: &hir::Ty,\n+        counter: &mut usize,\n+        diag: &mut DiagnosticBuilder<'_>,\n+    ) -> Option<InternedString> {\n+        let mut type_name = infcx.extract_type_name(&argument_ty);\n+\n+        type_name.find(\"&\").map(|index| {\n+            let region_name = self.synthesize_region_name(counter).as_str();\n+            type_name.insert_str(index + 1, &format!(\"{} \", region_name));\n+\n+            diag.span_label(\n+                argument_hir_ty.span,\n+                format!(\"has type `{}`\", type_name),\n+            );\n+\n+            region_name.as_interned_str()\n+        })\n+    }\n+\n     /// Attempts to highlight the specific part of a type annotation\n     /// that contains the anonymous reference we want to give a name\n     /// to. For example, we might produce an annotation like this:"}, {"sha": "7931bc320b10afd74300e164d6c41316012e9deb", "filename": "src/test/ui/issue-52533.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Ftest%2Fui%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Ftest%2Fui%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533.nll.stderr?ref=53dda8e915e54bc65b41599738245d62dbe3e6df", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/issue-52533.rs:15:16\n+   |\n+LL |     foo(|a, b| b)\n+   |                ^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-52533.rs:15:16\n+   |\n+LL |     foo(|a, b| b)\n+   |          -  -  ^ free region requires that `'1` must outlive `'2`\n+   |          |  |\n+   |          |  lifetime `'1` appears in this argument\n+   |          lifetime `'2` appears in this argument\n+\n+error: aborting due to previous error\n+"}, {"sha": "08f2805cefd6d72105643c92d3623af4dd56f5c0", "filename": "src/test/ui/issue-52533.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Ftest%2Fui%2Fissue-52533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Ftest%2Fui%2Fissue-52533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533.rs?ref=53dda8e915e54bc65b41599738245d62dbe3e6df", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_: impl for<'a> FnOnce(&'a u32, &u32) -> &'a u32) {\n+}\n+\n+fn main() {\n+    foo(|a, b| b)\n+    //~^ ERROR lifetime of reference outlives lifetime of borrowed content...\n+}"}, {"sha": "76a2470a2e03e3268d8ed8dd26ac4fb569101dba", "filename": "src/test/ui/issue-52533.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Ftest%2Fui%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53dda8e915e54bc65b41599738245d62dbe3e6df/src%2Ftest%2Fui%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533.stderr?ref=53dda8e915e54bc65b41599738245d62dbe3e6df", "patch": "@@ -0,0 +1,20 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/issue-52533.rs:15:16\n+   |\n+LL |     foo(|a, b| b)\n+   |                ^\n+   |\n+note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 15:9...\n+  --> $DIR/issue-52533.rs:15:9\n+   |\n+LL |     foo(|a, b| b)\n+   |         ^^^^^^^^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 15:9\n+  --> $DIR/issue-52533.rs:15:9\n+   |\n+LL |     foo(|a, b| b)\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0312`."}]}