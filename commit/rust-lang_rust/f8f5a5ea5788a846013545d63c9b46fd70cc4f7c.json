{"sha": "f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "node_id": "C_kwDOAAsO6NoAKGY4ZjVhNWVhNTc4OGE4NDYwMTM1NDVkNjNjOWI0NmZkNzBjYzRmN2M", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-02T09:39:42Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-02T13:40:55Z"}, "message": "refactor: use `cast()` instead of interning `GenericArgData`", "tree": {"sha": "19d86302a91bd8086a99e0de6ade8d1ede7176da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d86302a91bd8086a99e0de6ade8d1ede7176da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmM5lOcACgkQ4laYqTBY\nYXH+mRAArnFxvOijZBaAuNL4PiTwFYOS92ZnfZL6/Tw51BN9JVLJawGhQ6/XUwry\nGnkMfeyYui4dGgkMdxmJzDnNCXP91S7DyBoKORVsmsDEjlSjNwnCAL9Rwdi1G4O3\nWw+sSwQoGoOA7y+KuRO0XEdsdSbEJqRz2/0fxRt3mcohpqM/c4Y2VMdVtFuwHJ/y\nvyHYrv16yubltKddihg58McqzIWNUPX9L6mNFfEksejaie+9JF8jQc/cynkqLcYk\nqezrDT6A098+hPBVcbpbq+H45agGCxx0IQM8ofjiD7P91buPEVYmoCnR3AAvOg5h\nkMm4OCVlk+vA/9EOHMYXR9a7KEKoWtvY+rAAwmAtvy4XKXdPWO5V1rHlSLv24bls\n+9qGJr5+RLZ0V/MJm+RnGbQPOhP0UGjwLu2gm0ULS/X5+ItrwAPh3/oqUjHak0AJ\ndrKQolzt3CUPNAkEOfdyruZd/I12eCxK51tMx2GUIVKBdWAHzFYzmA/4DHIv6wHC\nGGeWUlB7Te/MDwgl98tNL5dTbu9sOCwIDEP+oxE+BGfKAoqGt5HahuXa/pb62EvO\n82GthXkuWg+YYAtxpxh2nRQMUqcxwD9kyaIVB5UJLTzbk/cPSUc2A185xf5K29dF\nqJKXt1aT9sXCYyoyBHVeVEK+XlhapQnLvqF5qp1tRRDlebj8pxM=\n=be7D\n-----END PGP SIGNATURE-----", "payload": "tree 19d86302a91bd8086a99e0de6ade8d1ede7176da\nparent 5c28ad193238635189f849c94ffc178f00008b12\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1664703582 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1664718055 +0900\n\nrefactor: use `cast()` instead of interning `GenericArgData`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "html_url": "https://github.com/rust-lang/rust/commit/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c28ad193238635189f849c94ffc178f00008b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c28ad193238635189f849c94ffc178f00008b12", "html_url": "https://github.com/rust-lang/rust/commit/5c28ad193238635189f849c94ffc178f00008b12"}], "stats": {"total": 95, "additions": 34, "deletions": 61}, "files": [{"sha": "dd4f1f25a69112ee4d0872df92e50010806f96c8", "filename": "crates/hir-ty/src/builder.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs?ref=f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "patch": "@@ -6,7 +6,7 @@ use chalk_ir::{\n     cast::{Cast, CastTo, Caster},\n     fold::TypeFoldable,\n     interner::HasInterner,\n-    AdtId, BoundVar, DebruijnIndex, Scalar,\n+    AdtId, DebruijnIndex, Scalar,\n };\n use hir_def::{\n     builtin_type::BuiltinType, generics::TypeOrConstParamData, ConstParamId, DefWithBodyId,\n@@ -16,9 +16,9 @@ use smallvec::SmallVec;\n \n use crate::{\n     consteval::unknown_const_as_generic, db::HirDatabase, infer::unify::InferenceTable, primitive,\n-    to_assoc_type_id, to_chalk_trait_id, utils::generics, Binders, CallableSig, ConstData,\n-    ConstValue, GenericArg, GenericArgData, Interner, ProjectionTy, Substitution, TraitRef, Ty,\n-    TyDefId, TyExt, TyKind, ValueTyDefId,\n+    to_assoc_type_id, to_chalk_trait_id, utils::generics, Binders, BoundVar, CallableSig,\n+    GenericArg, Interner, ProjectionTy, Substitution, TraitRef, Ty, TyDefId, TyExt, TyKind,\n+    ValueTyDefId,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -79,20 +79,12 @@ impl<D> TyBuilder<D> {\n     pub fn fill_with_bound_vars(self, debruijn: DebruijnIndex, starting_from: usize) -> Self {\n         // self.fill is inlined to make borrow checker happy\n         let mut this = self;\n-        let other = this.param_kinds.iter().skip(this.vec.len());\n+        let other = &this.param_kinds[this.vec.len()..];\n         let filler = (starting_from..).zip(other).map(|(idx, kind)| match kind {\n-            ParamKind::Type => {\n-                GenericArgData::Ty(TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(Interner))\n-                    .intern(Interner)\n+            ParamKind::Type => BoundVar::new(debruijn, idx).to_ty(Interner).cast(Interner),\n+            ParamKind::Const(ty) => {\n+                BoundVar::new(debruijn, idx).to_const(Interner, ty.clone()).cast(Interner)\n             }\n-            ParamKind::Const(ty) => GenericArgData::Const(\n-                ConstData {\n-                    value: ConstValue::BoundVar(BoundVar::new(debruijn, idx)),\n-                    ty: ty.clone(),\n-                }\n-                .intern(Interner),\n-            )\n-            .intern(Interner),\n         });\n         this.vec.extend(filler.take(this.remaining()).casted(Interner));\n         assert_eq!(this.remaining(), 0);\n@@ -102,8 +94,8 @@ impl<D> TyBuilder<D> {\n     pub fn fill_with_unknown(self) -> Self {\n         // self.fill is inlined to make borrow checker happy\n         let mut this = self;\n-        let filler = this.param_kinds.iter().skip(this.vec.len()).map(|x| match x {\n-            ParamKind::Type => GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner),\n+        let filler = this.param_kinds[this.vec.len()..].iter().map(|x| match x {\n+            ParamKind::Type => TyKind::Error.intern(Interner).cast(Interner),\n             ParamKind::Const(ty) => unknown_const_as_generic(ty.clone()),\n         });\n         this.vec.extend(filler.casted(Interner));\n@@ -113,15 +105,13 @@ impl<D> TyBuilder<D> {\n \n     pub(crate) fn fill_with_inference_vars(self, table: &mut InferenceTable<'_>) -> Self {\n         self.fill(|x| match x {\n-            ParamKind::Type => GenericArgData::Ty(table.new_type_var()).intern(Interner),\n-            ParamKind::Const(ty) => {\n-                GenericArgData::Const(table.new_const_var(ty.clone())).intern(Interner)\n-            }\n+            ParamKind::Type => table.new_type_var().cast(Interner),\n+            ParamKind::Const(ty) => table.new_const_var(ty.clone()).cast(Interner),\n         })\n     }\n \n     pub fn fill(mut self, filler: impl FnMut(&ParamKind) -> GenericArg) -> Self {\n-        self.vec.extend(self.param_kinds.iter().skip(self.vec.len()).map(filler));\n+        self.vec.extend(self.param_kinds[self.vec.len()..].iter().map(filler));\n         assert_eq!(self.remaining(), 0);\n         self\n     }\n@@ -255,7 +245,8 @@ impl TyBuilder<hir_def::AdtId> {\n     ) -> Self {\n         let defaults = db.generic_defaults(self.data.into());\n         for default_ty in defaults.iter().skip(self.vec.len()) {\n-            if let GenericArgData::Ty(x) = default_ty.skip_binders().data(Interner) {\n+            // NOTE(skip_binders): we only check if the arg type is error type.\n+            if let Some(x) = default_ty.skip_binders().ty(Interner) {\n                 if x.is_unknown() {\n                     self.vec.push(fallback().cast(Interner));\n                     continue;"}, {"sha": "4f0e9dbf1e4e9f1ab313bf3bec2d533c8ae4c2f6", "filename": "crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "patch": "@@ -152,7 +152,7 @@ impl TyExt for Ty {\n             TyKind::FnDef(def, parameters) => {\n                 let callable_def = db.lookup_intern_callable_def((*def).into());\n                 let sig = db.callable_item_signature(callable_def);\n-                Some(sig.substitute(Interner, &parameters))\n+                Some(sig.substitute(Interner, parameters))\n             }\n             TyKind::Closure(.., substs) => {\n                 let sig_param = substs.at(Interner, 0).assert_ty_ref(Interner);"}, {"sha": "7bb79b519e1caf3dbd9b757d5dba6d7540c9970e", "filename": "crates/hir-ty/src/infer/path.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs?ref=f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "patch": "@@ -12,8 +12,7 @@ use crate::{\n     builder::ParamKind,\n     consteval,\n     method_resolution::{self, VisibleFromModule},\n-    GenericArgData, Interner, Substitution, TraitRefExt, Ty, TyBuilder, TyExt, TyKind,\n-    ValueTyDefId,\n+    Interner, Substitution, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, ValueTyDefId,\n };\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n@@ -104,9 +103,7 @@ impl<'a> InferenceContext<'a> {\n             .use_parent_substs(&parent_substs)\n             .fill(|x| {\n                 it.next().unwrap_or_else(|| match x {\n-                    ParamKind::Type => {\n-                        GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner)\n-                    }\n+                    ParamKind::Type => TyKind::Error.intern(Interner).cast(Interner),\n                     ParamKind::Const(ty) => consteval::unknown_const_as_generic(ty.clone()),\n                 })\n             })"}, {"sha": "da19dab9f986f021da080bd33e0b8fe619933d70", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "patch": "@@ -678,7 +678,7 @@ impl<'a> TyLoweringContext<'a> {\n         let total_len =\n             parent_params + self_params + type_params + const_params + impl_trait_params;\n \n-        let ty_error = GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner);\n+        let ty_error = TyKind::Error.intern(Interner).cast(Interner);\n \n         let mut def_generic_iter = def_generics.iter_id();\n \n@@ -696,7 +696,7 @@ impl<'a> TyLoweringContext<'a> {\n         let fill_self_params = || {\n             for x in explicit_self_ty\n                 .into_iter()\n-                .map(|x| GenericArgData::Ty(x).intern(Interner))\n+                .map(|x| x.cast(Interner))\n                 .chain(iter::repeat(ty_error.clone()))\n                 .take(self_params)\n             {"}, {"sha": "32ccd5fa43db3f999845a8bfdbe0e8489c33aaa7", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f5a5ea5788a846013545d63c9b46fd70cc4f7c/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=f8f5a5ea5788a846013545d63c9b46fd70cc4f7c", "patch": "@@ -4,7 +4,7 @@\n use std::iter;\n \n use base_db::CrateId;\n-use chalk_ir::{fold::Shift, BoundVar, DebruijnIndex};\n+use chalk_ir::{cast::Cast, fold::Shift, BoundVar, DebruijnIndex};\n use hir_def::{\n     db::DefDatabase,\n     generics::{\n@@ -24,8 +24,7 @@ use smallvec::{smallvec, SmallVec};\n use syntax::SmolStr;\n \n use crate::{\n-    db::HirDatabase, ChalkTraitId, ConstData, ConstValue, GenericArgData, Interner, Substitution,\n-    TraitRef, TraitRefExt, TyKind, WhereClause,\n+    db::HirDatabase, ChalkTraitId, Interner, Substitution, TraitRef, TraitRefExt, WhereClause,\n };\n \n pub(crate) fn fn_traits(db: &dyn DefDatabase, krate: CrateId) -> impl Iterator<Item = TraitId> {\n@@ -282,8 +281,8 @@ impl Generics {\n         }\n     }\n \n-    fn parent_generics(&self) -> Option<&Generics> {\n-        self.parent_generics.as_ref().map(|it| &**it)\n+    pub(crate) fn parent_generics(&self) -> Option<&Generics> {\n+        self.parent_generics.as_deref()\n     }\n \n     /// Returns a Substitution that replaces each parameter by a bound variable.\n@@ -295,18 +294,10 @@ impl Generics {\n         Substitution::from_iter(\n             Interner,\n             self.iter_id().enumerate().map(|(idx, id)| match id {\n-                Either::Left(_) => GenericArgData::Ty(\n-                    TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(Interner),\n-                )\n-                .intern(Interner),\n-                Either::Right(id) => GenericArgData::Const(\n-                    ConstData {\n-                        value: ConstValue::BoundVar(BoundVar::new(debruijn, idx)),\n-                        ty: db.const_param_ty(id),\n-                    }\n-                    .intern(Interner),\n-                )\n-                .intern(Interner),\n+                Either::Left(_) => BoundVar::new(debruijn, idx).to_ty(Interner).cast(Interner),\n+                Either::Right(id) => BoundVar::new(debruijn, idx)\n+                    .to_const(Interner, db.const_param_ty(id))\n+                    .cast(Interner),\n             }),\n         )\n     }\n@@ -316,18 +307,12 @@ impl Generics {\n         Substitution::from_iter(\n             Interner,\n             self.iter_id().map(|id| match id {\n-                Either::Left(id) => GenericArgData::Ty(\n-                    TyKind::Placeholder(crate::to_placeholder_idx(db, id.into())).intern(Interner),\n-                )\n-                .intern(Interner),\n-                Either::Right(id) => GenericArgData::Const(\n-                    ConstData {\n-                        value: ConstValue::Placeholder(crate::to_placeholder_idx(db, id.into())),\n-                        ty: db.const_param_ty(id),\n-                    }\n-                    .intern(Interner),\n-                )\n-                .intern(Interner),\n+                Either::Left(id) => {\n+                    crate::to_placeholder_idx(db, id.into()).to_ty(Interner).cast(Interner)\n+                }\n+                Either::Right(id) => crate::to_placeholder_idx(db, id.into())\n+                    .to_const(Interner, db.const_param_ty(id))\n+                    .cast(Interner),\n             }),\n         )\n     }"}]}