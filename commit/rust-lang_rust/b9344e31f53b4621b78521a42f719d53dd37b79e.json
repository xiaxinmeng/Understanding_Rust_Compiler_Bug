{"sha": "b9344e31f53b4621b78521a42f719d53dd37b79e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MzQ0ZTMxZjUzYjQ2MjFiNzg1MjFhNDJmNzE5ZDUzZGQzN2I3OWU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-06-27T04:41:06Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-07-02T15:31:46Z"}, "message": "Derive which queries to save using the proc macro", "tree": {"sha": "e241c90d8cd21762da79ab9c8bc0e883e3669f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e241c90d8cd21762da79ab9c8bc0e883e3669f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9344e31f53b4621b78521a42f719d53dd37b79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9344e31f53b4621b78521a42f719d53dd37b79e", "html_url": "https://github.com/rust-lang/rust/commit/b9344e31f53b4621b78521a42f719d53dd37b79e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9344e31f53b4621b78521a42f719d53dd37b79e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef064d2f66bf5851e1da1a016627ff1395f6c9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef064d2f66bf5851e1da1a016627ff1395f6c9ad", "html_url": "https://github.com/rust-lang/rust/commit/ef064d2f66bf5851e1da1a016627ff1395f6c9ad"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "442a90ab3f845b8a666aefa1882f0e286076ad03", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9344e31f53b4621b78521a42f719d53dd37b79e/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9344e31f53b4621b78521a42f719d53dd37b79e/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=b9344e31f53b4621b78521a42f719d53dd37b79e", "patch": "@@ -422,11 +422,6 @@ rustc_queries! {\n                 \"const-evaluating `{}`\",\n                 tcx.def_path_str(key.value.instance.def.def_id())\n             }\n-            cache_on_disk_if(_, opt_result) {\n-                // Only store results without errors\n-                // FIXME: We never store these\n-                opt_result.map_or(true, |r| r.is_ok())\n-            }\n         }\n \n         /// Results of evaluating const items or constants embedded in"}, {"sha": "1c8c384eb5c646fe94d0634fb6c0fc780eb923e1", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b9344e31f53b4621b78521a42f719d53dd37b79e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9344e31f53b4621b78521a42f719d53dd37b79e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=b9344e31f53b4621b78521a42f719d53dd37b79e", "patch": "@@ -201,28 +201,22 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut query_result_index = EncodedQueryResultIndex::new();\n \n             time(tcx.sess, \"encode query results\", || {\n-                use crate::ty::query::queries::*;\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n-                encode_query_results::<type_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<generics_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<predicates_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<used_trait_imports<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<typeck_tables_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<codegen_fulfill_obligation<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<optimized_mir<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<unsafety_check_result<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<borrowck<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<mir_borrowck<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<mir_const_qualif<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<const_is_rvalue_promotable_to_static<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<symbol_name<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<check_match<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<codegen_fn_attrs<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<specialization_graph_of<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<const_eval<'_>, _>(tcx, enc, qri)?;\n-                // FIXME: Include const_eval_raw?\n+                macro_rules! encode_queries {\n+                    ($($query:ident,)*) => {\n+                        $(\n+                            encode_query_results::<ty::query::queries::$query<'_>, _>(\n+                                tcx,\n+                                enc,\n+                                qri\n+                            )?;\n+                        )*\n+                    }\n+                }\n+\n+                rustc_cached_queries!(encode_queries!);\n \n                 Ok(())\n             })?;"}, {"sha": "a8df7e197a8c9f069cc8526b9b27e4cc2291a4fc", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b9344e31f53b4621b78521a42f719d53dd37b79e/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9344e31f53b4621b78521a42f719d53dd37b79e/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=b9344e31f53b4621b78521a42f719d53dd37b79e", "patch": "@@ -414,6 +414,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut dep_node_force_stream = quote! {};\n     let mut try_load_from_on_disk_cache_stream = quote! {};\n     let mut no_force_queries = Vec::new();\n+    let mut cached_queries = quote! {};\n \n     for group in groups.0 {\n         let mut group_stream = quote! {};\n@@ -427,6 +428,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 _ => quote! { #result_full },\n             };\n \n+            if modifiers.cache.is_some() {\n+                cached_queries.extend(quote! {\n+                    #name,\n+                });\n+            }\n+\n             if modifiers.cache.is_some() && !modifiers.no_force {\n                 try_load_from_on_disk_cache_stream.extend(quote! {\n                     DepKind::#name => {\n@@ -549,6 +556,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 }\n             }\n         }\n+        macro_rules! rustc_cached_queries {\n+            ($($macro:tt)*) => {\n+                $($macro)*(#cached_queries);\n+            }\n+        }\n+\n         #query_description_stream\n \n         impl DepNode {"}]}