{"sha": "b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YWM4NWQyYTk0ZTk0ZGQ1YzgxZDU5ODhiMGFkZjYwYzE4NjhlMGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T14:52:43Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T14:52:43Z"}, "message": "rustc does overflow checking for us, don't duplicate it.", "tree": {"sha": "24df27a7649c3e77cbcb65f07ebd9d1853f391d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24df27a7649c3e77cbcb65f07ebd9d1853f391d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaAM7AAoJEFbW7qD8Z6xGfMcP/RwTOpUIpFAA8MT9gkBtgTRI\n4IR4LBTnQXw8HzLWnHdjX9P3hVRrTeTyJOrg4xVmN1SV4yhzWK8qbUciIodG8JT1\nkQsyORGuYrSz+niCGbrLAzV+4u2vKMsMwd7iaRjpq3xCZKaIK6muPNzRER88IrBx\nJh6qCpJIuVz6PZj+nN0d+iuMsdJz1Cn/oQyu5tiXJRn9GhdVIoTpabge5tl/VE/D\n7g2kk3nM1A8RUJ0mySE4WsVRNb95zfI9enV6Z0XSZ1Z16u3/47iHN8ou/O3MBAXz\nyw3fye3gv4qBAF67nhYwlRWHlJ5cNW7F4S8kjVSDBQ1TPFqfH7Pj0ny75BbBD19l\nQIaOSHNKQZhHssW2a49nI3u05CRby6TiRYg0MJAuSOeQhVkA59Gag3PEbc2orruK\nkmFzcmHI3kNN4iVOBWjoCnen+t/qsfF0vx22Ml1o6wwLbM9ZVw1oHRK0b6IogC3Y\njJVItD3qNiKakS9Zb7sUsbQkNgcRwm5CLTHPBm2Xx7s2w2m/7IkwjESXCb6UD+4k\n+Z6tfCeKmWSgsnCzk6m/eSBC4s+IP6/NKP30/PJi9b0ZeOkFKrJ6zOjYxCHH9Ajg\nsu0ei0gvaINbgtyQS5+yQQfLLxH+CZCWC0LwfgLYW6hvaHOTSOoXrn9oTXdfR/S+\ncCQdDmFfJcN2FjbQsCAp\n=pYJT\n-----END PGP SIGNATURE-----", "payload": "tree 24df27a7649c3e77cbcb65f07ebd9d1853f391d7\nparent ed4af21605ca5939a8d45f52975632be95cd210a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466434363 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466434363 +0200\n\nrustc does overflow checking for us, don't duplicate it."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "html_url": "https://github.com/rust-lang/rust/commit/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed4af21605ca5939a8d45f52975632be95cd210a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4af21605ca5939a8d45f52975632be95cd210a", "html_url": "https://github.com/rust-lang/rust/commit/ed4af21605ca5939a8d45f52975632be95cd210a"}], "stats": {"total": 41, "additions": 15, "deletions": 26}, "files": [{"sha": "3962c09dee2496f4d3f4c6b76ba8227a9619b459", "filename": "src/error.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "patch": "@@ -30,7 +30,6 @@ pub enum EvalError<'tcx> {\n     ArrayIndexOutOfBounds(Span, u64, u64),\n     Math(Span, ConstMathErr),\n     InvalidBitShiftRhs(PrimVal),\n-    Overflow(PrimVal, PrimVal, mir::BinOp, PrimVal),\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -71,8 +70,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"mathematical operation failed\",\n             EvalError::InvalidBitShiftRhs(..) =>\n                 \"bit shift rhs negative or not an int\",\n-            EvalError::Overflow(..) =>\n-                \"mathematical operation overflowed\",\n         }\n     }\n \n@@ -92,8 +89,6 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"array index {} out of bounds {} at {:?}\", index, len, span),\n             EvalError::Math(span, ref err) =>\n                 write!(f, \"mathematical operation at {:?} failed with {:?}\", span, err),\n-            EvalError::Overflow(l, r, op, val) =>\n-                write!(f, \"mathematical operation overflowed: {:?} {} {:?} => {:?}\", l, op.to_hir_binop().as_str(), r, val),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "4815421f246e39ddcc421ea022c74e2593ee118a", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "patch": "@@ -688,13 +688,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.memory.write_bool(dest.offset(offset), overflowed)\n     }\n \n-    /// extracts the lhs and rhs primval from the operands and applies the binary op\n+    /// Extracts the lhs and rhs primval from the operands and applies the binary op.\n+    /// Returns the result and whether the operation overflowed\n     fn eval_binop(\n         &mut self,\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n-    ) -> EvalResult<'tcx, PrimVal> {\n+    ) -> EvalResult<'tcx, (PrimVal, bool)> {\n         let left_ptr = self.eval_operand(left)?;\n         let left_ty = self.operand_ty(left);\n         let left_val = self.read_primval(left_ptr, left_ty)?;\n@@ -714,18 +715,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         right: &mir::Operand<'tcx>,\n         dest: Pointer,\n     ) -> EvalResult<'tcx, bool> {\n-        match self.eval_binop(op, left, right) {\n-            Ok(val) => {\n-                self.memory.write_primval(dest, val)?;\n-                Ok(false)\n-            },\n-            Err(EvalError::Overflow(l, r, op, val)) => {\n-                debug!(\"operation overflowed: {:?} {} {:?} => {:?}\", l, op.to_hir_binop().as_str(), r, val);\n-                self.memory.write_primval(dest, val)?;\n-                Ok(true)\n-            },\n-            Err(other) => Err(other),\n-        }\n+        let (val, overflow) = self.eval_binop(op, left, right)?;\n+        self.memory.write_primval(dest, val)?;\n+        Ok(overflow)\n     }\n \n     fn call_intrinsic(\n@@ -951,7 +943,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                let result = self.eval_binop(bin_op, left, right)?;\n+                // ignore overflow bit, rustc inserts check branches for us\n+                let result = self.eval_binop(bin_op, left, right)?.0;\n                 self.memory.write_primval(dest, result)?;\n             }\n "}, {"sha": "673aea4244424f9d048e3db7e8a97bf602c064d3", "filename": "src/primval.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=b9ac85d2a94e94dd5c81d5988b0adf60c1868e0c", "patch": "@@ -14,15 +14,16 @@ pub enum PrimVal {\n     IntegerPtr(u64),\n }\n \n-pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> EvalResult<'tcx, PrimVal> {\n+/// returns the result of the operation and whether the operation overflowed\n+pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> EvalResult<'tcx, (PrimVal, bool)> {\n     use rustc::mir::repr::BinOp::*;\n     use self::PrimVal::*;\n \n     macro_rules! overflow {\n         ($v:ident, $v2:ident, $l:ident, $op:ident, $r:ident) => ({\n             let (val, of) = $l.$op($r);\n             if of {\n-                return Err(EvalError::Overflow($v($l), $v2($r), bin_op, $v(val)));\n+                return Ok(($v(val), true));\n             } else {\n                 $v(val)\n             }\n@@ -99,7 +100,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 U64(l) => shift!(U64, l, r),\n                 _ => unreachable!(),\n             };\n-            return Ok(val);\n+            return Ok((val, false));\n         },\n         _ => {},\n     }\n@@ -137,7 +138,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         (AbstractPtr(_), FnPtr(_)) |\n         (FnPtr(_), IntegerPtr(_)) |\n         (IntegerPtr(_), FnPtr(_)) =>\n-            return unrelated_ptr_ops(bin_op),\n+            unrelated_ptr_ops(bin_op)?,\n \n         (FnPtr(l_ptr), FnPtr(r_ptr)) => match bin_op {\n             Eq => Bool(l_ptr == r_ptr),\n@@ -147,7 +148,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n \n         (AbstractPtr(l_ptr), AbstractPtr(r_ptr)) => {\n             if l_ptr.alloc_id != r_ptr.alloc_id {\n-                return unrelated_ptr_ops(bin_op);\n+                return Ok((unrelated_ptr_ops(bin_op)?, false));\n             }\n \n             let l = l_ptr.offset;\n@@ -167,7 +168,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         (l, r) => return Err(EvalError::Unimplemented(format!(\"unimplemented binary op: {:?}, {:?}, {:?}\", l, r, bin_op))),\n     };\n \n-    Ok(val)\n+    Ok((val, false))\n }\n \n pub fn unary_op<'tcx>(un_op: mir::UnOp, val: PrimVal) -> EvalResult<'tcx, PrimVal> {"}]}