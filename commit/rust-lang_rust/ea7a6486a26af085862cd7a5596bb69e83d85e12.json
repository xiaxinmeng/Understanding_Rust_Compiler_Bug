{"sha": "ea7a6486a26af085862cd7a5596bb69e83d85e12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhN2E2NDg2YTI2YWYwODU4NjJjZDdhNTU5NmJiNjllODNkODVlMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-04T21:13:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-04T21:13:07Z"}, "message": "Auto merge of #38426 - vadimcn:nobundle, r=alexcrichton\n\nImplement kind=\"static-nobundle\" (RFC 1717)\n\nThis implements the \"static-nobundle\" library kind (last item from #37403).\n\nRustc handles \"static-nobundle\" libs very similarly to dylibs, except that on Windows, uses of their symbols do not get marked with \"dllimport\".  Which is the whole point of this feature.", "tree": {"sha": "4d191736bf2197b11ba614b62612fa1636533066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d191736bf2197b11ba614b62612fa1636533066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7a6486a26af085862cd7a5596bb69e83d85e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7a6486a26af085862cd7a5596bb69e83d85e12", "html_url": "https://github.com/rust-lang/rust/commit/ea7a6486a26af085862cd7a5596bb69e83d85e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7a6486a26af085862cd7a5596bb69e83d85e12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5cb9545cfa4f1e90c92266b802edc4690f584a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5cb9545cfa4f1e90c92266b802edc4690f584a", "html_url": "https://github.com/rust-lang/rust/commit/eb5cb9545cfa4f1e90c92266b802edc4690f584a"}, {"sha": "7504897e6b4b1121191bc6612bcbcce1f70f5f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/7504897e6b4b1121191bc6612bcbcce1f70f5f06", "html_url": "https://github.com/rust-lang/rust/commit/7504897e6b4b1121191bc6612bcbcce1f70f5f06"}], "stats": {"total": 153, "additions": 148, "deletions": 5}, "files": [{"sha": "6537cc1adce001fa3c88522278c89c7524790da1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -47,7 +47,7 @@ use rustc_back::target::Target;\n use hir;\n use rustc_back::PanicStrategy;\n \n-pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n+pub use self::NativeLibraryKind::*;\n \n // lonely orphan structs and enums looking for a better home\n \n@@ -123,6 +123,7 @@ pub enum LinkagePreference {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum NativeLibraryKind {\n     NativeStatic,    // native static library (.a archive)\n+    NativeStaticNobundle, // native static library, which doesn't get bundled into .rlibs\n     NativeFramework, // OSX-specific\n     NativeUnknown,   // default way to specify a dynamic library\n }"}, {"sha": "d41c2ba93b93533a524e45f3be5b4028d5f29925", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -1476,12 +1476,17 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             (Some(name), \"dylib\") => (name, cstore::NativeUnknown),\n             (Some(name), \"framework\") => (name, cstore::NativeFramework),\n             (Some(name), \"static\") => (name, cstore::NativeStatic),\n+            (Some(name), \"static-nobundle\") => (name, cstore::NativeStaticNobundle),\n             (_, s) => {\n                 early_error(error_format, &format!(\"unknown library kind `{}`, expected \\\n                                                   one of dylib, framework, or static\",\n                                                  s));\n             }\n         };\n+        if kind == cstore::NativeStaticNobundle && !nightly_options::is_nightly_build() {\n+            early_error(error_format, &format!(\"the library kind 'static-nobundle' is only \\\n+                                                accepted on the nightly compiler\"));\n+        }\n         let mut name_parts = name.splitn(2, ':');\n         let name = name_parts.next().unwrap();\n         let new_name = name_parts.next();"}, {"sha": "f0d056b96f150ab88063111053d2796bb49352a1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -111,6 +111,13 @@ fn register_native_lib(sess: &Session,\n                                        GateIssue::Language,\n                                        \"is feature gated\");\n     }\n+    if lib.kind == cstore::NativeStaticNobundle && !sess.features.borrow().static_nobundle {\n+        feature_gate::emit_feature_err(&sess.parse_sess,\n+                                       \"static_nobundle\",\n+                                       span.unwrap(),\n+                                       GateIssue::Language,\n+                                       \"kind=\\\"static-nobundle\\\" is feature gated\");\n+    }\n     cstore.add_used_library(lib);\n }\n \n@@ -688,6 +695,9 @@ impl<'a> CrateLoader<'a> {\n         for id in self.get_foreign_items_of_kind(cstore::NativeStatic) {\n             self.cstore.add_statically_included_foreign_item(id);\n         }\n+        for id in self.get_foreign_items_of_kind(cstore::NativeStaticNobundle) {\n+            self.cstore.add_statically_included_foreign_item(id);\n+        }\n     }\n \n     fn register_dllimport_foreign_items(&mut self) {\n@@ -927,6 +937,7 @@ impl<'a> CrateLoader<'a> {\n             }).and_then(|a| a.value_str()).map(Symbol::as_str);\n             let kind = match kind.as_ref().map(|s| &s[..]) {\n                 Some(\"static\") => cstore::NativeStatic,\n+                Some(\"static-nobundle\") => cstore::NativeStaticNobundle,\n                 Some(\"dylib\") => cstore::NativeUnknown,\n                 Some(\"framework\") => cstore::NativeFramework,\n                 Some(k) => {"}, {"sha": "beba5faf3d03407c67f3c8558317a6b7188b1d97", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -32,7 +32,7 @@ use syntax::symbol::Symbol;\n use syntax_pos;\n \n pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePreference};\n-pub use rustc::middle::cstore::{NativeStatic, NativeFramework, NativeUnknown};\n+pub use rustc::middle::cstore::NativeLibraryKind::*;\n pub use rustc::middle::cstore::{CrateSource, LinkMeta, LibSource};\n \n // A map from external crate numbers (as decoded from some crate file) to"}, {"sha": "20842ea3fe54d4f1cda93a3a5de7995ea42a3a9b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -476,6 +476,7 @@ fn link_rlib<'a>(sess: &'a Session,\n     for lib in sess.cstore.used_libraries() {\n         match lib.kind {\n             NativeLibraryKind::NativeStatic => {}\n+            NativeLibraryKind::NativeStaticNobundle |\n             NativeLibraryKind::NativeFramework |\n             NativeLibraryKind::NativeUnknown => continue,\n         }\n@@ -674,6 +675,7 @@ fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,\n \n     for lib in all_native_libs.iter().filter(|l| relevant_lib(sess, l)) {\n         let name = match lib.kind {\n+            NativeLibraryKind::NativeStaticNobundle |\n             NativeLibraryKind::NativeUnknown => \"library\",\n             NativeLibraryKind::NativeFramework => \"framework\",\n             // These are included, no need to print them\n@@ -894,7 +896,7 @@ fn link_args(cmd: &mut Linker,\n     // on other dylibs (e.g. other native deps).\n     add_local_native_libraries(cmd, sess);\n     add_upstream_rust_crates(cmd, sess, crate_type, tmpdir);\n-    add_upstream_native_libraries(cmd, sess);\n+    add_upstream_native_libraries(cmd, sess, crate_type);\n \n     // # Telling the linker what we're doing\n \n@@ -985,6 +987,7 @@ fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) {\n         match lib.kind {\n             NativeLibraryKind::NativeUnknown => cmd.link_dylib(&lib.name.as_str()),\n             NativeLibraryKind::NativeFramework => cmd.link_framework(&lib.name.as_str()),\n+            NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(&lib.name.as_str()),\n             NativeLibraryKind::NativeStatic => bug!(),\n         }\n     }\n@@ -1210,7 +1213,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n // generic function calls a native function, then the generic function must\n // be instantiated in the target crate, meaning that the native symbol must\n // also be resolved in the target crate.\n-fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n+fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session, crate_type: config::CrateType) {\n     // Be sure to use a topological sorting of crates because there may be\n     // interdependencies between native libraries. When passing -nodefaultlibs,\n     // for example, almost all native libraries depend on libc, so we have to\n@@ -1220,6 +1223,9 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n     // This passes RequireStatic, but the actual requirement doesn't matter,\n     // we're just getting an ordering of crate numbers, we're not worried about\n     // the paths.\n+    let formats = sess.dependency_formats.borrow();\n+    let data = formats.get(&crate_type).unwrap();\n+\n     let crates = sess.cstore.used_crates(LinkagePreference::RequireStatic);\n     for (cnum, _) in crates {\n         for lib in sess.cstore.native_libraries(cnum) {\n@@ -1229,7 +1235,15 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n             match lib.kind {\n                 NativeLibraryKind::NativeUnknown => cmd.link_dylib(&lib.name.as_str()),\n                 NativeLibraryKind::NativeFramework => cmd.link_framework(&lib.name.as_str()),\n-\n+                NativeLibraryKind::NativeStaticNobundle => {\n+                    // Link \"static-nobundle\" native libs only if the crate they originate from\n+                    // is being linked statically to the current crate.  If it's linked dynamically\n+                    // or is an rlib already included via some other dylib crate, the symbols from\n+                    // native libs will have already been included in that dylib.\n+                    if data[cnum.as_usize() - 1] == Linkage::Static {\n+                        cmd.link_staticlib(&lib.name.as_str())\n+                    }\n+                },\n                 // ignore statically included native libraries here as we've\n                 // already included them when we included the rust library\n                 // previously"}, {"sha": "7f352f1da517d215215c740b0d82286a05f0724d", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -450,6 +450,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n             writeln!(f, \"LIBRARY\")?;\n             writeln!(f, \"EXPORTS\")?;\n             for symbol in self.info.exports[&crate_type].iter() {\n+                debug!(\"  _{}\", symbol);\n                 writeln!(f, \"  {}\", symbol)?;\n             }\n             Ok(())"}, {"sha": "970c37045dfc477028795dc0f6c177af6aa6fc35", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -323,6 +323,9 @@ declare_features! (\n     // Allows attributes on struct literal fields.\n     (active, struct_field_attributes, \"1.16.0\", Some(38814)),\n \n+    // Allows #[link(kind=\"static-nobundle\"...]\n+    (active, static_nobundle, \"1.16.0\", Some(37403)),\n+\n     // `extern \"msp430-interrupt\" fn()`\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n );"}, {"sha": "bc0025c7c958118ca2ebcb3c63506a52855cd2e9", "filename": "src/test/compile-fail/feature-gate-static-nobundle.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static-nobundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static-nobundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static-nobundle.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(name=\"foo\", kind=\"static-nobundle\")]\n+//~^ ERROR: kind=\"static-nobundle\" is feature gated\n+extern {}"}, {"sha": "3eac12f5cc9fd761bcc986a9687fc80e5f0c25db", "filename": "src/test/run-make/static-nobundle/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+# aaa is a native static library\n+# bbb is a rlib\n+# ccc is a dylib\n+# ddd is an executable\n+\n+all: $(call NATIVE_STATICLIB,aaa)\n+\t$(RUSTC) bbb.rs --crate-type=rlib\n+\n+\t# Check that bbb does NOT contain the definition of `native_func`\n+\tnm $(TMPDIR)/libbbb.rlib | (! grep \"T _*native_func\")\n+\tnm $(TMPDIR)/libbbb.rlib | grep \"U _*native_func\"\n+\n+\t# Check that aaa gets linked (either as `-l aaa` or `aaa.lib`) when building ccc.\n+\t$(RUSTC) ccc.rs -C prefer-dynamic --crate-type=dylib -Z print-link-args | grep -e \"-l[\\\" ]*aaa\" -e \"aaa.lib\"\n+\n+\t# Check that aaa does NOT get linked when building ddd.\n+\t$(RUSTC) ddd.rs -Z print-link-args | (! grep -e \"-l[\\\" ]*aaa\" -e \"aaa.lib\")\n+\n+\t$(call RUN,ddd)"}, {"sha": "806ef878c705233af4d5b8fe283b9a0b7c43eddd", "filename": "src/test/run-make/static-nobundle/aaa.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Faaa.c", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Faaa.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Faaa.c?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+void native_func() {}"}, {"sha": "2bd69c9932723b9ac2acf074426b244139ce7ae9", "filename": "src/test/run-make/static-nobundle/bbb.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fbbb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fbbb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fbbb.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(static_nobundle)]\n+\n+#[link(name = \"aaa\", kind = \"static-nobundle\")]\n+extern {\n+    pub fn native_func();\n+}\n+\n+pub fn wrapped_func() {\n+    unsafe {\n+        native_func();\n+    }\n+}"}, {"sha": "bd34753a00d128c06c7dcdd868d58477a202766a", "filename": "src/test/run-make/static-nobundle/ccc.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fccc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fccc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fccc.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"dylib\"]\n+\n+extern crate bbb;\n+\n+pub fn do_work() {\n+    unsafe { bbb::native_func(); }\n+    bbb::wrapped_func();\n+}\n+\n+pub fn do_work_generic<T>() {\n+    unsafe { bbb::native_func(); }\n+    bbb::wrapped_func();\n+}"}, {"sha": "f7d23a899f7581313c84385e12cd16a170410c9d", "filename": "src/test/run-make/static-nobundle/ddd.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fddd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7a6486a26af085862cd7a5596bb69e83d85e12/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fddd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2Fddd.rs?ref=ea7a6486a26af085862cd7a5596bb69e83d85e12", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate ccc;\n+\n+fn main() {\n+    ccc::do_work();\n+    ccc::do_work_generic::<i16>();\n+    ccc::do_work_generic::<i32>();\n+}"}]}