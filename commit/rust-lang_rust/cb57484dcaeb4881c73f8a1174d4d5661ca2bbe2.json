{"sha": "cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTc0ODRkY2FlYjQ4ODFjNzNmOGExMTc0ZDRkNTY2MWNhMmJiZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-04-03T19:18:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-04-04T14:19:14Z"}, "message": "std: Avoid usage of `Once` in `Instant`\n\nThis commit removes usage of `Once` from the internal implementation of\ntime utilities on OSX and Windows. It turns out that we accidentally hit\na deadlock today (#59020) via events that look like:\n\n* A thread invokes `park_timeout`\n* Internally, only on OSX, `park_timeout` calls `Instant::elapsed`\n* Inside of `Instant::elapsed` on OSX we enter a `Once` to initialize\n  global timer data\n* Inside of `Once`, it attempts to `park`\n\nThis means on the same stack frame, when there's contention, we're\ncalling `park` from inside `park_timeout`, causing a deadlock!\n\nThe solution implemented in this commit was to remove usage of `Once`\nand instead just do a small dance with atomics. There's no real need we\nneed to guarantee that the global information is only learned once, only\nthat it's only *stored* once. This implementation may have multiple\nthreads invoke `mach_timebase_info`, but only one will store the global\ninformation which will amortize the cost for all other threads.\n\nA similar fix has been applied to windows to be uniform across our\nimplementations, but looking at the code on Windows no deadlock was\npossible. This is purely just a consistency update for Windows and in\ntheory a slightly leaner implementation.\n\nCloses #59020", "tree": {"sha": "e4544a0b7059c5bfd2ec95a2bd8a51b917c76e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4544a0b7059c5bfd2ec95a2bd8a51b917c76e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "html_url": "https://github.com/rust-lang/rust/commit/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8673e0ad85e98997faa76fa7edc99c5825f46ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8673e0ad85e98997faa76fa7edc99c5825f46ee", "html_url": "https://github.com/rust-lang/rust/commit/f8673e0ad85e98997faa76fa7edc99c5825f46ee"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "e21c32cd91b1e6bd8bc734ef4d4f9c705ec3381d", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "patch": "@@ -114,7 +114,8 @@ impl Hash for Timespec {\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod inner {\n     use crate::fmt;\n-    use crate::sync::Once;\n+    use crate::mem;\n+    use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     use crate::sys::cvt;\n     use crate::sys_common::mul_div_u64;\n     use crate::time::Duration;\n@@ -229,18 +230,30 @@ mod inner {\n         Some(mul_div_u64(nanos, info.denom as u64, info.numer as u64))\n     }\n \n-    fn info() -> &'static libc::mach_timebase_info {\n+    fn info() -> libc::mach_timebase_info {\n         static mut INFO: libc::mach_timebase_info = libc::mach_timebase_info {\n             numer: 0,\n             denom: 0,\n         };\n-        static ONCE: Once = Once::new();\n+        static STATE: AtomicUsize = AtomicUsize::new(0);\n \n         unsafe {\n-            ONCE.call_once(|| {\n-                libc::mach_timebase_info(&mut INFO);\n-            });\n-            &INFO\n+            // If a previous thread has filled in this global state, use that.\n+            if STATE.load(SeqCst) == 2 {\n+                return INFO;\n+            }\n+\n+            // ... otherwise learn for ourselves ...\n+            let mut info = mem::zeroed();\n+            libc::mach_timebase_info(&mut info);\n+\n+            // ... and attempt to be the one thread that stores it globally for\n+            // all other threads\n+            if STATE.compare_exchange(0, 1, SeqCst, SeqCst).is_ok() {\n+                INFO = info;\n+                STATE.store(2, SeqCst);\n+            }\n+            return info;\n         }\n     }\n }"}, {"sha": "e0f0e3a1a45b957dbe7101526c81abfe530c4136", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "patch": "@@ -173,7 +173,7 @@ fn intervals2dur(intervals: u64) -> Duration {\n \n mod perf_counter {\n     use super::{NANOS_PER_SEC};\n-    use crate::sync::Once;\n+    use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     use crate::sys_common::mul_div_u64;\n     use crate::sys::c;\n     use crate::sys::cvt;\n@@ -210,13 +210,25 @@ mod perf_counter {\n \n     fn frequency() -> c::LARGE_INTEGER {\n         static mut FREQUENCY: c::LARGE_INTEGER = 0;\n-        static ONCE: Once = Once::new();\n+        static STATE: AtomicUsize = AtomicUsize::new(0);\n \n         unsafe {\n-            ONCE.call_once(|| {\n-                cvt(c::QueryPerformanceFrequency(&mut FREQUENCY)).unwrap();\n-            });\n-            FREQUENCY\n+            // If a previous thread has filled in this global state, use that.\n+            if STATE.load(SeqCst) == 2 {\n+                return FREQUENCY;\n+            }\n+\n+            // ... otherwise learn for ourselves ...\n+            let mut frequency = 0;\n+            cvt(c::QueryPerformanceFrequency(&mut frequency)).unwrap();\n+\n+            // ... and attempt to be the one thread that stores it globally for\n+            // all other threads\n+            if STATE.compare_exchange(0, 1, SeqCst, SeqCst).is_ok() {\n+                FREQUENCY = frequency;\n+                STATE.store(2, SeqCst);\n+            }\n+            return frequency;\n         }\n     }\n "}, {"sha": "a2b11764a2fc64cfd46297caa3ab313676789d93", "filename": "src/test/run-pass/issue-59020.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/src%2Ftest%2Frun-pass%2Fissue-59020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2/src%2Ftest%2Frun-pass%2Fissue-59020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-59020.rs?ref=cb57484dcaeb4881c73f8a1174d4d5661ca2bbe2", "patch": "@@ -0,0 +1,27 @@\n+// edition:2018\n+// run-pass\n+// ignore-emscripten no threads support\n+\n+use std::thread;\n+use std::time::Duration;\n+\n+fn main() {\n+    let t1 = thread::spawn(|| {\n+        let sleep = Duration::new(0,100_000);\n+        for _ in 0..100 {\n+            println!(\"Parking1\");\n+            thread::park_timeout(sleep);\n+        }\n+    });\n+\n+    let t2 = thread::spawn(|| {\n+        let sleep = Duration::new(0,100_000);\n+        for _ in 0..100 {\n+            println!(\"Parking2\");\n+            thread::park_timeout(sleep);\n+        }\n+    });\n+\n+    t1.join().expect(\"Couldn't join thread 1\");\n+    t2.join().expect(\"Couldn't join thread 2\");\n+}"}]}