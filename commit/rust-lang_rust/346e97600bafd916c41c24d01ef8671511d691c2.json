{"sha": "346e97600bafd916c41c24d01ef8671511d691c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NmU5NzYwMGJhZmQ5MTZjNDFjMjRkMDFlZjg2NzE1MTFkNjkxYzI=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2018-09-16T16:34:15Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2018-11-15T13:43:01Z"}, "message": "Fix powerpc64 ELFv2 big-endian struct-passing ABI\n\nThe requirements here are not \"ELFv1\" requirements, but big-endian\nrequirements, as the extension or non-extension of the argument is\nnecessary to put the argument in the correct half of the register.\nParameter passing in the ELFv2 ABI needs these same transformations.\nSince this code makes no difference on little-endian machines, simplify\nit to use the same code path everywhere.", "tree": {"sha": "4dc6e154a0ab39adf41c7edbfa31e273b3355be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc6e154a0ab39adf41c7edbfa31e273b3355be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346e97600bafd916c41c24d01ef8671511d691c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346e97600bafd916c41c24d01ef8671511d691c2", "html_url": "https://github.com/rust-lang/rust/commit/346e97600bafd916c41c24d01ef8671511d691c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346e97600bafd916c41c24d01ef8671511d691c2/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81303d7d90b483b8e2611cef09adc56c02ccfc50", "url": "https://api.github.com/repos/rust-lang/rust/commits/81303d7d90b483b8e2611cef09adc56c02ccfc50", "html_url": "https://github.com/rust-lang/rust/commit/81303d7d90b483b8e2611cef09adc56c02ccfc50"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "56d09c072924d962e23ef9815d0dc5238f622d3a", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/346e97600bafd916c41c24d01ef8671511d691c2/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346e97600bafd916c41c24d01ef8671511d691c2/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=346e97600bafd916c41c24d01ef8671511d691c2", "patch": "@@ -75,7 +75,9 @@ fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>, abi: ABI)\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n+        let unit = if cx.data_layout().endian == Endian::Big {\n+            Reg { kind: RegKind::Integer, size }\n+        } else if bits <= 8 {\n             Reg::i8()\n         } else if bits <= 16 {\n             Reg::i16()\n@@ -110,22 +112,15 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n     }\n \n     let size = arg.layout.size;\n-    let (unit, total) = match abi {\n-        ELFv1 => {\n-            // In ELFv1, aggregates smaller than a doubleword should appear in\n-            // the least-significant bits of the parameter doubleword.  The rest\n-            // should be padded at their tail to fill out multiple doublewords.\n-            if size.bits() <= 64 {\n-                (Reg { kind: RegKind::Integer, size }, size)\n-            } else {\n-                let align = Align::from_bits(64, 64).unwrap();\n-                (Reg::i64(), size.abi_align(align))\n-            }\n-        },\n-        ELFv2 => {\n-            // In ELFv2, we can just cast directly.\n-            (Reg::i64(), size)\n-        },\n+    let (unit, total) = if size.bits() <= 64 {\n+        // Aggregates smaller than a doubleword should appear in\n+        // the least-significant bits of the parameter doubleword.\n+        (Reg { kind: RegKind::Integer, size }, size)\n+    } else {\n+        // Aggregates larger than a doubleword should be padded\n+        // at the tail to fill out a whole number of doublewords.\n+        let align = Align::from_bits(64, 64).unwrap();\n+        (Reg::i64(), size.abi_align(align))\n     };\n \n     arg.cast_to(Uniform {"}, {"sha": "22afb0da05bc14843bd66b4dd34dda2549d80f20", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346e97600bafd916c41c24d01ef8671511d691c2/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346e97600bafd916c41c24d01ef8671511d691c2/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=346e97600bafd916c41c24d01ef8671511d691c2", "patch": "@@ -229,7 +229,7 @@ impl HasDataLayout for TargetDataLayout {\n }\n \n /// Endianness of the target, which must match cfg(target-endian).\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Endian {\n     Little,\n     Big"}]}