{"sha": "4f2617c059f693ec72e5d31ad31fd85eba019ab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMjYxN2MwNTlmNjkzZWM3MmU1ZDMxYWQzMWZkODVlYmEwMTlhYjE=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T07:26:00Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T07:26:00Z"}, "message": "Separate getting offsets and getting index expressions", "tree": {"sha": "4e14dbf4a6113dd840ebee32db94dad8300b35fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e14dbf4a6113dd840ebee32db94dad8300b35fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2617c059f693ec72e5d31ad31fd85eba019ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2617c059f693ec72e5d31ad31fd85eba019ab1", "html_url": "https://github.com/rust-lang/rust/commit/4f2617c059f693ec72e5d31ad31fd85eba019ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2617c059f693ec72e5d31ad31fd85eba019ab1/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d121d53af9a73ba11226715cd8132f6981ffee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d121d53af9a73ba11226715cd8132f6981ffee9", "html_url": "https://github.com/rust-lang/rust/commit/3d121d53af9a73ba11226715cd8132f6981ffee9"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "75955997af249e401991dc97898f48be513a5260", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4f2617c059f693ec72e5d31ad31fd85eba019ab1/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2617c059f693ec72e5d31ad31fd85eba019ab1/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4f2617c059f693ec72e5d31ad31fd85eba019ab1", "patch": "@@ -837,7 +837,7 @@ fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n     }\n }\n \n-fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>, var: HirId) -> Option<FixedOffsetVar> {\n+fn get_offset<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, idx: &Expr<'_>, var: HirId) -> Option<Offset> {\n     fn extract_offset<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, e: &Expr<'_>, var: HirId) -> Option<String> {\n         match &e.kind {\n             ExprKind::Lit(l) => match l.node {\n@@ -849,38 +849,24 @@ fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>, v\n         }\n     }\n \n-    if let ExprKind::Index(seqexpr, idx) = expr.kind {\n-        let ty = cx.tables.expr_ty(seqexpr);\n-        if !is_slice_like(cx, ty) {\n-            return None;\n-        }\n-\n-        let offset = match idx.kind {\n-            ExprKind::Binary(op, lhs, rhs) => match op.node {\n-                BinOpKind::Add => {\n-                    let offset_opt = if same_var(cx, lhs, var) {\n-                        extract_offset(cx, rhs, var)\n-                    } else if same_var(cx, rhs, var) {\n-                        extract_offset(cx, lhs, var)\n-                    } else {\n-                        None\n-                    };\n+    match idx.kind {\n+        ExprKind::Binary(op, lhs, rhs) => match op.node {\n+            BinOpKind::Add => {\n+                let offset_opt = if same_var(cx, lhs, var) {\n+                    extract_offset(cx, rhs, var)\n+                } else if same_var(cx, rhs, var) {\n+                    extract_offset(cx, lhs, var)\n+                } else {\n+                    None\n+                };\n \n-                    offset_opt.map(Offset::positive)\n-                },\n-                BinOpKind::Sub if same_var(cx, lhs, var) => extract_offset(cx, rhs, var).map(Offset::negative),\n-                _ => None,\n+                offset_opt.map(Offset::positive)\n             },\n-            ExprKind::Path(..) if same_var(cx, idx, var) => Some(Offset::positive(\"0\".into())),\n+            BinOpKind::Sub if same_var(cx, lhs, var) => extract_offset(cx, rhs, var).map(Offset::negative),\n             _ => None,\n-        };\n-\n-        offset.map(|o| FixedOffsetVar {\n-            var_name: snippet_opt(cx, seqexpr.span).unwrap_or_else(|| \"???\".into()),\n-            offset: o,\n-        })\n-    } else {\n-        None\n+        },\n+        ExprKind::Path(..) if same_var(cx, idx, var) => Some(Offset::positive(\"0\".into())),\n+        _ => None,\n     }\n }\n \n@@ -994,15 +980,22 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                     o.and_then(|(lhs, rhs)| {\n                         let rhs = fetch_cloned_expr(rhs);\n                         if_chain! {\n-                            if let Some(offset_left) = get_fixed_offset_var(cx, lhs, canonical_id);\n-                            if let Some(offset_right) = get_fixed_offset_var(cx, rhs, canonical_id);\n+                            if let ExprKind::Index(seqexpr_left, idx_left) = lhs.kind;\n+                            if let ExprKind::Index(seqexpr_right, idx_right) = rhs.kind;\n+                            if is_slice_like(cx, cx.tables.expr_ty(seqexpr_left))\n+                                && is_slice_like(cx, cx.tables.expr_ty(seqexpr_right));\n+                            if let Some(offset_left) = get_offset(cx, &idx_left, canonical_id);\n+                            if let Some(offset_right) = get_offset(cx, &idx_right, canonical_id);\n+                            let var_name_left = snippet_opt(cx, seqexpr_left.span).unwrap_or_else(|| \"???\".into());\n+                            let var_name_right = snippet_opt(cx, seqexpr_right.span).unwrap_or_else(|| \"???\".into());\n \n                             // Source and destination must be different\n-                            if offset_left.var_name != offset_right.var_name;\n+                            if var_name_left != var_name_right;\n                             then {\n-                                Some((offset_left, offset_right))\n+                                Some((FixedOffsetVar { var_name: var_name_left, offset: offset_left },\n+                                    FixedOffsetVar { var_name: var_name_right, offset: offset_right }))\n                             } else {\n-                                return None\n+                                None\n                             }\n                         }\n                     })"}]}