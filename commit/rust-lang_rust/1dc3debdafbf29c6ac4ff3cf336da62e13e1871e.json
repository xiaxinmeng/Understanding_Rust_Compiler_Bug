{"sha": "1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzNkZWJkYWZiZjI5YzZhYzRmZjNjZjMzNmRhNjJlMTNlMTg3MWU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-10T21:55:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-10T23:59:57Z"}, "message": "Add support for casting enum-like tags to scalar values.", "tree": {"sha": "76319cdf2c1b7b41ce098a1605f08f8a340e8776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76319cdf2c1b7b41ce098a1605f08f8a340e8776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "html_url": "https://github.com/rust-lang/rust/commit/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08abf8d37fa549ebc67f80d80530f4aa43d716e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08abf8d37fa549ebc67f80d80530f4aa43d716e4", "html_url": "https://github.com/rust-lang/rust/commit/08abf8d37fa549ebc67f80d80530f4aa43d716e4"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "2c5c45ed570d5491a09f7d74943e1396013d699c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "patch": "@@ -3017,7 +3017,7 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n     check (type_has_static_size(ccx, t_out));\n     let ll_t_out = type_of(ccx, e.span, t_out);\n \n-    tag kind { pointer; integral; float; other; }\n+    tag kind { pointer; integral; float; tag_; other; }\n     fn t_kind(tcx: ty::ctxt, t: ty::t) -> kind {\n         ret if ty::type_is_fp(tcx, t) {\n                 float\n@@ -3026,6 +3026,8 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n                 pointer\n             } else if ty::type_is_integral(tcx, t) {\n                 integral\n+            } else if ty::type_is_tag(tcx, t) {\n+                tag_\n             } else { other };\n     }\n     let k_in = t_kind(ccx.tcx, t_in);\n@@ -3059,6 +3061,18 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n           {in: pointer., out: pointer.} {\n             PointerCast(e_res.bcx, e_res.val, ll_t_out)\n           }\n+          {in: tag_., out: integral.} | {in: tag_., out: float.} {\n+            let cx = e_res.bcx;\n+            let lltagty = T_opaque_tag_ptr(ccx);\n+            let av_tag = PointerCast(cx, e_res.val, lltagty);\n+            let lldiscrim_a_ptr = GEPi(cx, av_tag, [0, 0]);\n+            let lldiscrim_a = Load(cx, lldiscrim_a_ptr);\n+            alt k_out {\n+              integral. {int_cast(e_res.bcx, ll_t_out,\n+                                  val_ty(lldiscrim_a), lldiscrim_a, true)}\n+              float. {SIToFP(e_res.bcx, lldiscrim_a, ll_t_out)}\n+            }\n+          }\n           _ { ccx.sess.bug(\"Translating unsupported cast.\") }\n         };\n     ret store_in_dest(e_res.bcx, newval, dest);"}, {"sha": "a79e4401569eb853aca8c043dd1fd1828bfc9aae", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "patch": "@@ -173,6 +173,8 @@ export type_is_copyable;\n export type_is_tup_like;\n export type_is_str;\n export type_is_unique;\n+export type_is_tag;\n+export type_is_enum_like;\n export type_structurally_contains_uniques;\n export type_autoderef;\n export type_param;\n@@ -1263,6 +1265,26 @@ fn type_is_pod(cx: ctxt, ty: t) -> bool {\n     ret result;\n }\n \n+fn type_is_tag(cx: ctxt, ty: t) -> bool {\n+    alt struct(cx, ty) {\n+      ty_tag(_, _) { ret true; }\n+      _ { ret false;}\n+    }\n+}\n+\n+// Whether a type is enum like, that is a tag type with only nullary\n+// constructors\n+fn type_is_enum_like(cx: ctxt, ty: t) -> bool {\n+    alt struct(cx, ty) {\n+      ty_tag(did, tps) {\n+        let variants = tag_variants(cx, did);\n+        let some_n_ary = vec::any(*variants, {|v| vec::len(v.args) > 0u});\n+        ret !some_n_ary;\n+      }\n+      _ { ret false;}\n+    }\n+}\n+\n fn type_param(cx: ctxt, ty: t) -> option::t<uint> {\n     alt struct(cx, ty) {\n       ty_param(id, _) { ret some(id); }"}, {"sha": "1d701f9b9ab6fd42bfd000f986ee03708088d5b9", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "patch": "@@ -211,6 +211,10 @@ fn type_is_scalar(fcx: @fn_ctxt, sp: span, typ: ty::t) -> bool {\n     ret ty::type_is_scalar(fcx.ccx.tcx, typ_s);\n }\n \n+fn type_is_enum_like(fcx: @fn_ctxt, sp: span, typ: ty::t) -> bool {\n+    let typ_s = structurally_resolved_type(fcx, sp, typ);\n+    ret ty::type_is_enum_like(fcx.ccx.tcx, typ_s);\n+}\n \n // Parses the programmer's textual representation of a type into our internal\n // notion of a type. `getter` is a function that returns the type\n@@ -2211,10 +2215,13 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           // This will be looked up later on\n           ty::ty_iface(_, _) {}\n           _ {\n-            // FIXME there are more forms of cast to support, eventually.\n-            if !(   type_is_scalar(fcx, expr.span, t_e)\n-                 && type_is_scalar(fcx, expr.span, t_1)) {\n-                tcx.sess.span_err(expr.span, \"non-scalar cast: \" +\n+            let t_1_is_scalar = type_is_scalar(fcx, expr.span, t_1);\n+            if type_is_enum_like(fcx,expr.span,t_e) && t_1_is_scalar {\n+                /* this case is allowed */\n+            } else if !(type_is_scalar(fcx,expr.span,t_e) && t_1_is_scalar) {\n+                // FIXME there are more forms of cast to support, eventually.\n+                tcx.sess.span_err(expr.span,\n+                                  \"non-scalar cast: \" +\n                                   ty_to_str(tcx, t_e) + \" as \" +\n                                   ty_to_str(tcx, t_1));\n             }"}, {"sha": "ecc518e75a1127ae396e0939bfd8b1b443989541", "filename": "src/test/compile-fail/tag-variant-cast-non-nullary.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs?ref=1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "patch": "@@ -0,0 +1,12 @@\n+//error-pattern: non-scalar cast\n+// black and white have the same discriminator value ...\n+\n+tag non_nullary {\n+    nullary;\n+    other(int);\n+}\n+\n+fn main() {\n+    let v = nullary;\n+    let val = v as int;\n+}"}, {"sha": "1efe40d547ddc6ce7008e9b450bafacefa53050a", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc3debdafbf29c6ac4ff3cf336da62e13e1871e/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=1dc3debdafbf29c6ac4ff3cf336da62e13e1871e", "patch": "@@ -17,7 +17,9 @@ fn main() {\n }\n \n fn test_color(color: color, val: int, name: str) unsafe {\n-    assert unsafe::reinterpret_cast(color) == val;\n+    //assert unsafe::reinterpret_cast(color) == val;\n+    assert color as int == val;\n+    assert color as float == val as float;\n     assert get_color_alt(color) == name;\n     assert get_color_if(color) == name;\n }"}]}