{"sha": "f5669a3548ac853418e4890e142964e27fb2dd2b", "node_id": "C_kwDOAAsO6NoAKGY1NjY5YTM1NDhhYzg1MzQxOGU0ODkwZTE0Mjk2NGUyN2ZiMmRkMmI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-03T19:59:05Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-03T20:02:15Z"}, "message": "Fix assert_mem_uninitialized_valid in release mode", "tree": {"sha": "6ffe62aa05f8f71f95b253702edc4617f22c5dc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ffe62aa05f8f71f95b253702edc4617f22c5dc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5669a3548ac853418e4890e142964e27fb2dd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5669a3548ac853418e4890e142964e27fb2dd2b", "html_url": "https://github.com/rust-lang/rust/commit/f5669a3548ac853418e4890e142964e27fb2dd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5669a3548ac853418e4890e142964e27fb2dd2b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c229a884f5df12997361dabeb7bd82e457cdbd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c229a884f5df12997361dabeb7bd82e457cdbd3", "html_url": "https://github.com/rust-lang/rust/commit/2c229a884f5df12997361dabeb7bd82e457cdbd3"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "892e7c30e2f7a425d6cebde69198ed26bb766800", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f5669a3548ac853418e4890e142964e27fb2dd2b/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5669a3548ac853418e4890e142964e27fb2dd2b/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=f5669a3548ac853418e4890e142964e27fb2dd2b", "patch": "@@ -218,34 +218,18 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     let intrinsic = fx.tcx.item_name(instance.def_id());\n     let substs = instance.substs;\n \n-    let target = if let Some(target) = target {\n-        target\n-    } else {\n-        // Insert non returning intrinsics here\n-        match intrinsic {\n-            sym::abort => {\n-                fx.bcx.ins().trap(TrapCode::User(0));\n-            }\n-            sym::transmute => {\n-                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n-            }\n-            _ => unimplemented!(\"unsupported intrinsic {}\", intrinsic),\n-        }\n-        return;\n-    };\n-\n     if intrinsic.as_str().starts_with(\"simd_\") {\n         self::simd::codegen_simd_intrinsic_call(\n             fx,\n             intrinsic,\n             substs,\n             args,\n             destination,\n-            target,\n+            target.expect(\"target for simd intrinsic\"),\n             source_info.span,\n         );\n     } else if codegen_float_intrinsic_call(fx, intrinsic, args, destination) {\n-        let ret_block = fx.get_block(target);\n+        let ret_block = fx.get_block(target.expect(\"target for float intrinsic\"));\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n         codegen_regular_intrinsic_call(\n@@ -255,7 +239,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             substs,\n             args,\n             destination,\n-            Some(target),\n+            target,\n             source_info,\n         );\n     }\n@@ -382,6 +366,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     match intrinsic {\n+        sym::abort => {\n+            fx.bcx.ins().trap(TrapCode::User(0));\n+            return;\n+        }\n         sym::likely | sym::unlikely => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n@@ -579,6 +567,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::transmute => {\n             intrinsic_args!(fx, args => (from); intrinsic);\n \n+            if ret.layout().abi.is_uninhabited() {\n+                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n+                return;\n+            }\n+\n             ret.write_cvalue_transmute(fx, from);\n         }\n         sym::write_bytes | sym::volatile_set_memory => {"}]}