{"sha": "17af6f7d0c92ee66df6b96d088e999db378ce125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YWY2ZjdkMGM5MmVlNjZkZjZiOTZkMDg4ZTk5OWRiMzc4Y2UxMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-27T09:52:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-27T09:52:10Z"}, "message": "auto merge of #10688 : bjz/rust/recv_iter, r=brson\n\nI've noticed I use this pattern quite a bit:\r\n\r\n~~~rust\r\ndo spawn {\r\n    loop {\r\n        match port.try_recv() {\r\n            Some(x) => ...,\r\n            None => ...,\r\n        }\r\n    }\r\n}\r\n~~~\r\n\r\nThe `RecvIterator`, returned from a default `recv_iter` method on the `GenericPort` trait, allows you to reduce this down to:\r\n\r\n~~~rust\r\ndo spawn {\r\n    for x in port.recv_iter() {\r\n        ...\r\n    }\r\n}\r\n~~~\r\n\r\nAs demonstrated in the tests, you can also access the port from within the `for` block for further `recv`ing and `peek`ing with no borrow errors, which is quite nice.", "tree": {"sha": "65f40f7d033969cd37a071f5242685f4305a684e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f40f7d033969cd37a071f5242685f4305a684e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17af6f7d0c92ee66df6b96d088e999db378ce125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17af6f7d0c92ee66df6b96d088e999db378ce125", "html_url": "https://github.com/rust-lang/rust/commit/17af6f7d0c92ee66df6b96d088e999db378ce125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17af6f7d0c92ee66df6b96d088e999db378ce125/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf4c939fb6c55f0b9d19b1292fa4601169b3c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf4c939fb6c55f0b9d19b1292fa4601169b3c17", "html_url": "https://github.com/rust-lang/rust/commit/faf4c939fb6c55f0b9d19b1292fa4601169b3c17"}, {"sha": "31da6b76986f337483a971884113a043c835102b", "url": "https://api.github.com/repos/rust-lang/rust/commits/31da6b76986f337483a971884113a043c835102b", "html_url": "https://github.com/rust-lang/rust/commit/31da6b76986f337483a971884113a043c835102b"}], "stats": {"total": 87, "additions": 84, "deletions": 3}, "files": [{"sha": "fcba4a6bbdbf8ae0d8b342744ccdb0531b6ed4ee", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 84, "deletions": 3, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/17af6f7d0c92ee66df6b96d088e999db378ce125/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17af6f7d0c92ee66df6b96d088e999db378ce125/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=17af6f7d0c92ee66df6b96d088e999db378ce125", "patch": "@@ -15,6 +15,7 @@ Message passing\n #[allow(missing_doc)];\n \n use clone::Clone;\n+use iter::Iterator;\n use kinds::Send;\n use option::Option;\n use rtcomm = rt::comm;\n@@ -43,10 +44,35 @@ pub trait GenericPort<T> {\n     /// Receives a message, or fails if the connection closes.\n     fn recv(&self) -> T;\n \n-    /** Receives a message, or returns `none` if\n-    the connection is closed or closes.\n-    */\n+    /// Receives a message, or returns `none` if\n+    /// the connection is closed or closes.\n     fn try_recv(&self) -> Option<T>;\n+\n+    /// Returns an iterator that breaks once the connection closes.\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~rust\n+    /// do spawn {\n+    ///     for x in port.recv_iter() {\n+    ///         if pred(x) { break; }\n+    ///         println!(\"{}\", x);\n+    ///     }\n+    /// }\n+    /// ~~~\n+    fn recv_iter<'a>(&'a self) -> RecvIterator<'a, Self> {\n+        RecvIterator { port: self }\n+    }\n+}\n+\n+pub struct RecvIterator<'a, P> {\n+    priv port: &'a P,\n+}\n+\n+impl<'a, T, P: GenericPort<T>> Iterator<T> for RecvIterator<'a, P> {\n+    fn next(&mut self) -> Option<T> {\n+        self.port.try_recv()\n+    }\n }\n \n /// Ports that can `peek`\n@@ -227,3 +253,58 @@ impl<T: Send> Clone for SharedPort<T> {\n         SharedPort { x: p.clone() }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use comm::*;\n+    use prelude::*;\n+\n+    #[test]\n+    fn test_nested_recv_iter() {\n+        let (port, chan) = stream::<int>();\n+        let (total_port, total_chan) = oneshot::<int>();\n+\n+        do spawn {\n+            let mut acc = 0;\n+            for x in port.recv_iter() {\n+                acc += x;\n+                for x in port.recv_iter() {\n+                    acc += x;\n+                    for x in port.try_recv().move_iter() {\n+                        acc += x;\n+                        total_chan.send(acc);\n+                    }\n+                }\n+            }\n+        }\n+\n+        chan.send(3);\n+        chan.send(1);\n+        chan.send(2);\n+        assert_eq!(total_port.recv(), 6);\n+    }\n+\n+    #[test]\n+    fn test_recv_iter_break() {\n+        let (port, chan) = stream::<int>();\n+        let (count_port, count_chan) = oneshot::<int>();\n+\n+        do spawn {\n+            let mut count = 0;\n+            for x in port.recv_iter() {\n+                if count >= 3 {\n+                    count_chan.send(count);\n+                    break;\n+                } else {\n+                    count += x;\n+                }\n+            }\n+        }\n+\n+        chan.send(2);\n+        chan.send(2);\n+        chan.send(2);\n+        chan.send(2);\n+        assert_eq!(count_port.recv(), 4);\n+    }\n+}"}]}