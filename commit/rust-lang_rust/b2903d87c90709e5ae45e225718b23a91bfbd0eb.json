{"sha": "b2903d87c90709e5ae45e225718b23a91bfbd0eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTAzZDg3YzkwNzA5ZTVhZTQ1ZTIyNTcxOGIyM2E5MWJmYmQwZWI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-06T05:06:33Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-06T05:08:16Z"}, "message": "Improve pretty-printing for ConstVals in MIR.", "tree": {"sha": "1a7f8544a446bfde417f58697aa16e5e5ba8b2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7f8544a446bfde417f58697aa16e5e5ba8b2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2903d87c90709e5ae45e225718b23a91bfbd0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2903d87c90709e5ae45e225718b23a91bfbd0eb", "html_url": "https://github.com/rust-lang/rust/commit/b2903d87c90709e5ae45e225718b23a91bfbd0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2903d87c90709e5ae45e225718b23a91bfbd0eb/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c785802c0a6e609b2b1ad9a259de7ff947009d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/c785802c0a6e609b2b1ad9a259de7ff947009d00", "html_url": "https://github.com/rust-lang/rust/commit/c785802c0a6e609b2b1ad9a259de7ff947009d00"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "4226b600f68d4ab2e346f227ba9fb5f38d9c0ffe", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b2903d87c90709e5ae45e225718b23a91bfbd0eb/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2903d87c90709e5ae45e225718b23a91bfbd0eb/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=b2903d87c90709e5ae45e225718b23a91bfbd0eb", "patch": "@@ -15,8 +15,9 @@ use middle::ty::{self, AdtDef, ClosureSubsts, FnOutput, Region, Ty};\n use rustc_back::slice;\n use rustc_data_structures::tuple_slice::TupleSlice;\n use rustc_front::hir::InlineAsm;\n-use syntax::ast::Name;\n+use syntax::ast::{self, Name};\n use syntax::codemap::Span;\n+use std::ascii;\n use std::borrow::{Cow, IntoCow};\n use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n@@ -844,26 +845,41 @@ impl<'tcx> Debug for Literal<'tcx> {\n         use self::Literal::*;\n         match *self {\n             Item { def_id, .. } =>\n-                write!(fmt, \"{}\", ty::tls::with(|tcx| tcx.item_path_str(def_id))),\n-            Value { ref value } => fmt_const_val(fmt, value),\n+                write!(fmt, \"{}\", item_path_str(def_id)),\n+            Value { ref value } => {\n+                try!(write!(fmt, \"const \"));\n+                fmt_const_val(fmt, value)\n+            }\n         }\n     }\n }\n \n /// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n-pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n+fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n     use middle::const_eval::ConstVal::*;\n     match *const_val {\n         Float(f) => write!(fmt, \"{:?}\", f),\n         Int(n) => write!(fmt, \"{:?}\", n),\n         Uint(n) => write!(fmt, \"{:?}\", n),\n-        Str(ref s) => write!(fmt, \"Str({:?})\", s),\n-        ByteStr(ref bytes) => write!(fmt, \"ByteStr{:?}\", bytes),\n+        Str(ref s) => write!(fmt, \"{:?}\", s),\n+        ByteStr(ref bytes) => {\n+            let escaped: String = bytes\n+                .iter()\n+                .flat_map(|&ch| ascii::escape_default(ch).map(|c| c as char))\n+                .collect();\n+            write!(fmt, \"b\\\"{}\\\"\", escaped)\n+        }\n         Bool(b) => write!(fmt, \"{:?}\", b),\n-        Struct(id) => write!(fmt, \"Struct({:?})\", id),\n-        Tuple(id) => write!(fmt, \"Tuple({:?})\", id),\n-        Function(def_id) => write!(fmt, \"Function({:?})\", def_id),\n-        Array(id, n) => write!(fmt, \"Array({:?}, {:?})\", id, n),\n-        Repeat(id, n) => write!(fmt, \"Repeat({:?}, {:?})\", id, n),\n+        Function(def_id) => write!(fmt, \"{}\", item_path_str(def_id)),\n+        Struct(node_id) | Tuple(node_id) | Array(node_id, _) | Repeat(node_id, _) =>\n+            write!(fmt, \"{}\", node_to_string(node_id)),\n     }\n }\n+\n+fn node_to_string(node_id: ast::NodeId) -> String {\n+    ty::tls::with(|tcx| tcx.map.node_to_user_string(node_id))\n+}\n+\n+fn item_path_str(def_id: DefId) -> String {\n+    ty::tls::with(|tcx| tcx.item_path_str(def_id))\n+}"}]}