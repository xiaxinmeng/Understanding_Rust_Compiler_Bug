{"sha": "5b0caef54a062b5e283cf15d1fad7027f631f29d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMGNhZWY1NGEwNjJiNWUyODNjZjE1ZDFmYWQ3MDI3ZjYzMWYyOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T17:17:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T17:17:55Z"}, "message": "Auto merge of #68377 - estebank:fn-obligations-spans, r=oli-obk\n\nTweak obligation error output\n\n- Point at arguments or output when fn obligations come from them, or ident when they don't\n- Point at `Sized` bound (fix #47990)\n- When object unsafe trait uses itself in associated item suggest using `Self` (fix #66424, fix #33375, partially address #38376, cc #61525)\n-  Point at reason in object unsafe trait with `Self` in supertraits or `where`-clause (cc #40533, cc #68377)\n- On implicit type parameter `Sized` obligations, suggest `?Sized` (fix #57744, fix #46683)", "tree": {"sha": "3b81b3e42e787d78a52a066b09ee3399b716e7b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b81b3e42e787d78a52a066b09ee3399b716e7b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0caef54a062b5e283cf15d1fad7027f631f29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0caef54a062b5e283cf15d1fad7027f631f29d", "html_url": "https://github.com/rust-lang/rust/commit/5b0caef54a062b5e283cf15d1fad7027f631f29d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0caef54a062b5e283cf15d1fad7027f631f29d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126ad2b813010447807b0593a80bc6c04962e7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/126ad2b813010447807b0593a80bc6c04962e7ea", "html_url": "https://github.com/rust-lang/rust/commit/126ad2b813010447807b0593a80bc6c04962e7ea"}, {"sha": "0e584114c6153a3d7ff94349729c46a4735cb838", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e584114c6153a3d7ff94349729c46a4735cb838", "html_url": "https://github.com/rust-lang/rust/commit/0e584114c6153a3d7ff94349729c46a4735cb838"}], "stats": {"total": 2263, "additions": 1428, "deletions": 835}, "files": [{"sha": "6d3719b32d07e05c87286bbd33a5d3ce6ce68b3a", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 76, "deletions": 75, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -27,7 +27,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_span::source_map::SourceMap;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use syntax::ast;\n@@ -1034,6 +1033,10 @@ pub fn report_object_safety_error(\n     violations: Vec<ObjectSafetyViolation>,\n ) -> DiagnosticBuilder<'tcx> {\n     let trait_str = tcx.def_path_str(trait_def_id);\n+    let trait_span = tcx.hir().get_if_local(trait_def_id).and_then(|node| match node {\n+        hir::Node::Item(item) => Some(item.ident.span),\n+        _ => None,\n+    });\n     let span = tcx.sess.source_map().def_span(span);\n     let mut err = struct_span_err!(\n         tcx.sess,\n@@ -1045,14 +1048,45 @@ pub fn report_object_safety_error(\n     err.span_label(span, format!(\"the trait `{}` cannot be made into an object\", trait_str));\n \n     let mut reported_violations = FxHashSet::default();\n+    let mut had_span_label = false;\n     for violation in violations {\n+        if let ObjectSafetyViolation::SizedSelf(sp) = &violation {\n+            if !sp.is_empty() {\n+                // Do not report `SizedSelf` without spans pointing at `SizedSelf` obligations\n+                // with a `Span`.\n+                reported_violations.insert(ObjectSafetyViolation::SizedSelf(vec![].into()));\n+            }\n+        }\n         if reported_violations.insert(violation.clone()) {\n-            match violation.span() {\n-                Some(span) => err.span_label(span, violation.error_msg()),\n-                None => err.note(&violation.error_msg()),\n+            let spans = violation.spans();\n+            let msg = if trait_span.is_none() || spans.is_empty() {\n+                format!(\"the trait cannot be made into an object because {}\", violation.error_msg())\n+            } else {\n+                had_span_label = true;\n+                format!(\"...because {}\", violation.error_msg())\n             };\n+            if spans.is_empty() {\n+                err.note(&msg);\n+            } else {\n+                for span in spans {\n+                    err.span_label(span, &msg);\n+                }\n+            }\n+            match (trait_span, violation.solution()) {\n+                (Some(_), Some((note, None))) => {\n+                    err.help(&note);\n+                }\n+                (Some(_), Some((note, Some((sugg, span))))) => {\n+                    err.span_suggestion(span, &note, sugg, Applicability::MachineApplicable);\n+                }\n+                // Only provide the help if its a local trait, otherwise it's not actionable.\n+                _ => {}\n+            }\n         }\n     }\n+    if let (Some(trait_span), true) = (trait_span, had_span_label) {\n+        err.span_label(trait_span, \"this trait cannot be made into an object...\");\n+    }\n \n     if tcx.sess.trait_methods_not_found.borrow().contains(&span) {\n         // Avoid emitting error caused by non-existing method (#58734)\n@@ -1305,6 +1339,44 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 &obligation.cause.code,\n                 &mut vec![],\n             );\n+            self.suggest_unsized_bound_if_applicable(err, obligation);\n+        }\n+    }\n+\n+    fn suggest_unsized_bound_if_applicable(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) {\n+        if let (\n+            ty::Predicate::Trait(pred, _),\n+            ObligationCauseCode::BindingObligation(item_def_id, span),\n+        ) = (&obligation.predicate, &obligation.cause.code)\n+        {\n+            if let (Some(generics), true) = (\n+                self.tcx.hir().get_if_local(*item_def_id).as_ref().and_then(|n| n.generics()),\n+                Some(pred.def_id()) == self.tcx.lang_items().sized_trait(),\n+            ) {\n+                for param in generics.params {\n+                    if param.span == *span\n+                        && !param.bounds.iter().any(|bound| {\n+                            bound.trait_def_id() == self.tcx.lang_items().sized_trait()\n+                        })\n+                    {\n+                        let (span, separator) = match param.bounds {\n+                            [] => (span.shrink_to_hi(), \":\"),\n+                            [.., bound] => (bound.span().shrink_to_hi(), \" + \"),\n+                        };\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider relaxing the implicit `Sized` restriction\",\n+                            format!(\"{} ?Sized\", separator),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        return;\n+                    }\n+                }\n+            }\n         }\n     }\n \n@@ -1354,74 +1426,3 @@ impl ArgKind {\n         }\n     }\n }\n-\n-/// Suggest restricting a type param with a new bound.\n-pub fn suggest_constraining_type_param(\n-    generics: &hir::Generics<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n-    param_name: &str,\n-    constraint: &str,\n-    source_map: &SourceMap,\n-    span: Span,\n-) -> bool {\n-    let restrict_msg = \"consider further restricting this bound\";\n-    if let Some(param) =\n-        generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next()\n-    {\n-        if param_name.starts_with(\"impl \") {\n-            // `impl Trait` in argument:\n-            // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n-            err.span_suggestion(\n-                param.span,\n-                restrict_msg,\n-                // `impl CurrentTrait + MissingTrait`\n-                format!(\"{} + {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else if generics.where_clause.predicates.is_empty() && param.bounds.is_empty() {\n-            // If there are no bounds whatsoever, suggest adding a constraint\n-            // to the type parameter:\n-            // `fn foo<T>(t: T) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n-            err.span_suggestion(\n-                param.span,\n-                \"consider restricting this bound\",\n-                format!(\"{}: {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else if !generics.where_clause.predicates.is_empty() {\n-            // There is a `where` clause, so suggest expanding it:\n-            // `fn foo<T>(t: T) where T: Debug {}` \u2192\n-            // `fn foo<T>(t: T) where T: Debug, T: Trait {}`\n-            err.span_suggestion(\n-                generics.where_clause.span().unwrap().shrink_to_hi(),\n-                &format!(\"consider further restricting type parameter `{}`\", param_name),\n-                format!(\", {}: {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else {\n-            // If there is no `where` clause lean towards constraining to the\n-            // type parameter:\n-            // `fn foo<X: Bar, T>(t: T, x: X) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n-            // `fn foo<T: Bar>(t: T) {}` \u2192 `fn foo<T: Bar + Trait>(t: T) {}`\n-            let sp = param.span.with_hi(span.hi());\n-            let span = source_map.span_through_char(sp, ':');\n-            if sp != param.span && sp != span {\n-                // Only suggest if we have high certainty that the span\n-                // covers the colon in `foo<T: Trait>`.\n-                err.span_suggestion(\n-                    span,\n-                    restrict_msg,\n-                    format!(\"{}: {} + \", param_name, constraint),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                err.span_label(\n-                    param.span,\n-                    &format!(\"consider adding a `where {}: {}` bound\", param_name, constraint),\n-                );\n-            }\n-        }\n-        return true;\n-    }\n-    false\n-}"}, {"sha": "c1facd34dfee53b19d50c714adee454aa15cdd4e", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -145,12 +145,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let param_name = self_ty.to_string();\n                     let constraint = trait_ref.print_only_trait_path().to_string();\n                     if suggest_constraining_type_param(\n+                        self.tcx,\n                         generics,\n                         &mut err,\n                         &param_name,\n                         &constraint,\n                         self.tcx.sess.source_map(),\n                         *span,\n+                        Some(trait_ref.def_id()),\n                     ) {\n                         return;\n                     }\n@@ -1652,18 +1654,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n /// Suggest restricting a type param with a new bound.\n pub fn suggest_constraining_type_param(\n+    tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n     err: &mut DiagnosticBuilder<'_>,\n     param_name: &str,\n     constraint: &str,\n     source_map: &SourceMap,\n     span: Span,\n+    def_id: Option<DefId>,\n ) -> bool {\n     let restrict_msg = \"consider further restricting this bound\";\n     if let Some(param) =\n         generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next()\n     {\n-        if param_name.starts_with(\"impl \") {\n+        if def_id == tcx.lang_items().sized_trait() {\n+            // Type parameters are already `Sized` by default.\n+            err.span_label(\n+                param.span,\n+                &format!(\"this type parameter needs to be `{}`\", constraint),\n+            );\n+        } else if param_name.starts_with(\"impl \") {\n             // `impl Trait` in argument:\n             // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n             err.span_suggestion("}, {"sha": "d0dbfe73c91d597430d31c40ecb4250eaa907937", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 213, "deletions": 48, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -13,24 +13,26 @@ use super::elaborate_predicates;\n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n+use smallvec::{smallvec, SmallVec};\n use syntax::ast;\n \n use std::borrow::Cow;\n use std::iter::{self};\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n     /// `Self: Sized` declared on the trait.\n-    SizedSelf,\n+    SizedSelf(SmallVec<[Span; 1]>),\n \n     /// Supertrait reference references `Self` an in illegal location\n     /// (e.g., `trait Foo : Bar<Self>`).\n-    SupertraitSelf,\n+    SupertraitSelf(SmallVec<[Span; 1]>),\n \n     /// Method has something illegal.\n     Method(ast::Name, MethodViolationCode, Span),\n@@ -42,50 +44,91 @@ pub enum ObjectSafetyViolation {\n impl ObjectSafetyViolation {\n     pub fn error_msg(&self) -> Cow<'static, str> {\n         match *self {\n-            ObjectSafetyViolation::SizedSelf => {\n-                \"the trait cannot require that `Self : Sized`\".into()\n-            }\n-            ObjectSafetyViolation::SupertraitSelf => {\n-                \"the trait cannot use `Self` as a type parameter \\\n-                 in the supertraits or where-clauses\"\n-                    .into()\n+            ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n+            ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n+                if spans.iter().any(|sp| *sp != DUMMY_SP) {\n+                    \"it uses `Self` as a type parameter in this\".into()\n+                } else {\n+                    \"it cannot use `Self` as a type parameter in a supertrait or `where`-clause\"\n+                        .into()\n+                }\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) => {\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n-                \"method `{}` references the `Self` type in its parameters or return type\",\n+            ObjectSafetyViolation::Method(\n                 name,\n-            )\n-            .into(),\n+                MethodViolationCode::ReferencesSelfInput(_),\n+                DUMMY_SP,\n+            ) => format!(\"method `{}` references the `Self` type in its parameters\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfInput(_), _) => {\n+                format!(\"method `{}` references the `Self` type in this parameter\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfOutput, _) => {\n+                format!(\"method `{}` references the `Self` type in its return type\", name).into()\n+            }\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n                 _,\n-            ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n+            ) => {\n+                format!(\"method `{}` references the `Self` type in its `where` clause\", name).into()\n+            }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) => {\n                 format!(\"method `{}` has generic type parameters\", name).into()\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n                 format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into()\n             }\n-            ObjectSafetyViolation::AssocConst(name, _) => {\n-                format!(\"the trait cannot contain associated consts like `{}`\", name).into()\n+            ObjectSafetyViolation::AssocConst(name, DUMMY_SP) => {\n+                format!(\"it contains associated `const` `{}`\", name).into()\n             }\n+            ObjectSafetyViolation::AssocConst(..) => \"it contains this associated `const`\".into(),\n         }\n     }\n \n-    pub fn span(&self) -> Option<Span> {\n+    pub fn solution(&self) -> Option<(String, Option<(String, Span)>)> {\n+        Some(match *self {\n+            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {\n+                return None;\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(sugg), _) => (\n+                format!(\n+                    \"consider turning `{}` into a method by giving it a `&self` argument or \\\n+                     constraining it so it does not apply to trait objects\",\n+                    name\n+                ),\n+                sugg.map(|(sugg, sp)| (sugg.to_string(), sp)),\n+            ),\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::UndispatchableReceiver,\n+                span,\n+            ) => (\n+                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n+                    .into(),\n+                Some((\"&Self\".to_string(), span)),\n+            ),\n+            ObjectSafetyViolation::AssocConst(name, _)\n+            | ObjectSafetyViolation::Method(name, ..) => {\n+                (format!(\"consider moving `{}` to another trait\", name), None)\n+            }\n+        })\n+    }\n+\n+    pub fn spans(&self) -> SmallVec<[Span; 1]> {\n         // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n         // diagnostics use a `note` instead of a `span_label`.\n-        match *self {\n+        match self {\n+            ObjectSafetyViolation::SupertraitSelf(spans)\n+            | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n             ObjectSafetyViolation::AssocConst(_, span)\n             | ObjectSafetyViolation::Method(_, _, span)\n-                if span != DUMMY_SP =>\n+                if *span != DUMMY_SP =>\n             {\n-                Some(span)\n+                smallvec![*span]\n             }\n-            _ => None,\n+            _ => smallvec![],\n         }\n     }\n }\n@@ -94,10 +137,13 @@ impl ObjectSafetyViolation {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n-    StaticMethod,\n+    StaticMethod(Option<(&'static str, Span)>),\n+\n+    /// e.g., `fn foo(&self, x: Self)`\n+    ReferencesSelfInput(usize),\n \n-    /// e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`\n-    ReferencesSelf,\n+    /// e.g., `fn foo(&self) -> Self`\n+    ReferencesSelfOutput,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,\n@@ -119,8 +165,9 @@ pub fn astconv_object_safety_violations(\n ) -> Vec<ObjectSafetyViolation> {\n     debug_assert!(tcx.generics_of(trait_def_id).has_self);\n     let violations = traits::supertrait_def_ids(tcx, trait_def_id)\n-        .filter(|&def_id| predicates_reference_self(tcx, def_id, true))\n-        .map(|_| ObjectSafetyViolation::SupertraitSelf)\n+        .map(|def_id| predicates_reference_self(tcx, def_id, true))\n+        .filter(|spans| !spans.is_empty())\n+        .map(|spans| ObjectSafetyViolation::SupertraitSelf(spans))\n         .collect();\n \n     debug!(\"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\", trait_def_id, violations);\n@@ -168,7 +215,7 @@ fn object_safety_violations_for_trait(\n         .filter(|item| item.kind == ty::AssocKind::Method)\n         .filter_map(|item| {\n             object_safety_violation_for_method(tcx, trait_def_id, &item)\n-                .map(|code| ObjectSafetyViolation::Method(item.ident.name, code, item.ident.span))\n+                .map(|(code, span)| ObjectSafetyViolation::Method(item.ident.name, code, span))\n         })\n         .filter(|violation| {\n             if let ObjectSafetyViolation::Method(\n@@ -179,17 +226,37 @@ fn object_safety_violations_for_trait(\n             {\n                 // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                 // It's also hard to get a use site span, so we use the method definition span.\n-                tcx.struct_span_lint_hir(\n+                let mut err = tcx.struct_span_lint_hir(\n                     WHERE_CLAUSES_OBJECT_SAFETY,\n                     hir::CRATE_HIR_ID,\n                     *span,\n                     &format!(\n                         \"the trait `{}` cannot be made into an object\",\n                         tcx.def_path_str(trait_def_id)\n                     ),\n-                )\n-                .note(&violation.error_msg())\n-                .emit();\n+                );\n+                let node = tcx.hir().get_if_local(trait_def_id);\n+                let msg = if let Some(hir::Node::Item(item)) = node {\n+                    err.span_label(item.ident.span, \"this trait cannot be made into an object...\");\n+                    format!(\"...because {}\", violation.error_msg())\n+                } else {\n+                    format!(\n+                        \"the trait cannot be made into an object because {}\",\n+                        violation.error_msg()\n+                    )\n+                };\n+                err.span_label(*span, &msg);\n+                match (node, violation.solution()) {\n+                    (Some(_), Some((note, None))) => {\n+                        err.help(&note);\n+                    }\n+                    (Some(_), Some((note, Some((sugg, span))))) => {\n+                        err.span_suggestion(span, &note, sugg, Applicability::MachineApplicable);\n+                    }\n+                    // Only provide the help if its a local trait, otherwise it's not actionable.\n+                    _ => {}\n+                }\n+                err.emit();\n                 false\n             } else {\n                 true\n@@ -199,10 +266,13 @@ fn object_safety_violations_for_trait(\n \n     // Check the trait itself.\n     if trait_has_sized_self(tcx, trait_def_id) {\n-        violations.push(ObjectSafetyViolation::SizedSelf);\n+        // We don't want to include the requirement from `Sized` itself to be `Sized` in the list.\n+        let spans = get_sized_bounds(tcx, trait_def_id);\n+        violations.push(ObjectSafetyViolation::SizedSelf(spans));\n     }\n-    if predicates_reference_self(tcx, trait_def_id, false) {\n-        violations.push(ObjectSafetyViolation::SupertraitSelf);\n+    let spans = predicates_reference_self(tcx, trait_def_id, false);\n+    if !spans.is_empty() {\n+        violations.push(ObjectSafetyViolation::SupertraitSelf(spans));\n     }\n \n     violations.extend(\n@@ -219,7 +289,64 @@ fn object_safety_violations_for_trait(\n     violations\n }\n \n-fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_only: bool) -> bool {\n+fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]> {\n+    tcx.hir()\n+        .get_if_local(trait_def_id)\n+        .and_then(|node| match node {\n+            hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Trait(.., generics, bounds, _),\n+                ..\n+            }) => Some(\n+                generics\n+                    .where_clause\n+                    .predicates\n+                    .iter()\n+                    .filter_map(|pred| {\n+                        match pred {\n+                            hir::WherePredicate::BoundPredicate(pred)\n+                                if pred.bounded_ty.hir_id.owner_def_id() == trait_def_id =>\n+                            {\n+                                // Fetch spans for trait bounds that are Sized:\n+                                // `trait T where Self: Pred`\n+                                Some(pred.bounds.iter().filter_map(|b| match b {\n+                                    hir::GenericBound::Trait(\n+                                        trait_ref,\n+                                        hir::TraitBoundModifier::None,\n+                                    ) if trait_has_sized_self(\n+                                        tcx,\n+                                        trait_ref.trait_ref.trait_def_id(),\n+                                    ) =>\n+                                    {\n+                                        Some(trait_ref.span)\n+                                    }\n+                                    _ => None,\n+                                }))\n+                            }\n+                            _ => None,\n+                        }\n+                    })\n+                    .flatten()\n+                    .chain(bounds.iter().filter_map(|b| match b {\n+                        hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n+                            if trait_has_sized_self(tcx, trait_ref.trait_ref.trait_def_id()) =>\n+                        {\n+                            // Fetch spans for supertraits that are `Sized`: `trait T: Super`\n+                            Some(trait_ref.span)\n+                        }\n+                        _ => None,\n+                    }))\n+                    .collect::<SmallVec<[Span; 1]>>(),\n+            ),\n+            _ => None,\n+        })\n+        .unwrap_or_else(SmallVec::new)\n+}\n+\n+fn predicates_reference_self(\n+    tcx: TyCtxt<'_>,\n+    trait_def_id: DefId,\n+    supertraits_only: bool,\n+) -> SmallVec<[Span; 1]> {\n     let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n@@ -231,12 +358,16 @@ fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_o\n     predicates\n         .predicates\n         .iter()\n-        .map(|(predicate, _)| predicate.subst_supertrait(tcx, &trait_ref))\n-        .any(|predicate| {\n+        .map(|(predicate, sp)| (predicate.subst_supertrait(tcx, &trait_ref), sp))\n+        .filter_map(|(predicate, &sp)| {\n             match predicate {\n                 ty::Predicate::Trait(ref data, _) => {\n                     // In the case of a trait predicate, we can skip the \"self\" type.\n-                    data.skip_binder().input_types().skip(1).any(has_self_ty)\n+                    if data.skip_binder().input_types().skip(1).any(has_self_ty) {\n+                        Some(sp)\n+                    } else {\n+                        None\n+                    }\n                 }\n                 ty::Predicate::Projection(ref data) => {\n                     // And similarly for projections. This should be redundant with\n@@ -251,22 +382,29 @@ fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_o\n                     //\n                     // This is ALT2 in issue #56288, see that for discussion of the\n                     // possible alternatives.\n-                    data.skip_binder()\n+                    if data\n+                        .skip_binder()\n                         .projection_ty\n                         .trait_ref(tcx)\n                         .input_types()\n                         .skip(1)\n                         .any(has_self_ty)\n+                    {\n+                        Some(sp)\n+                    } else {\n+                        None\n+                    }\n                 }\n                 ty::Predicate::WellFormed(..)\n                 | ty::Predicate::ObjectSafe(..)\n                 | ty::Predicate::TypeOutlives(..)\n                 | ty::Predicate::RegionOutlives(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::Subtype(..)\n-                | ty::Predicate::ConstEvaluatable(..) => false,\n+                | ty::Predicate::ConstEvaluatable(..) => None,\n             }\n         })\n+        .collect()\n }\n \n fn trait_has_sized_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n@@ -304,15 +442,34 @@ fn object_safety_violation_for_method(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n     method: &ty::AssocItem,\n-) -> Option<MethodViolationCode> {\n+) -> Option<(MethodViolationCode, Span)> {\n     debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n     // Any method that has a `Self : Sized` requisite is otherwise\n     // exempt from the regulations.\n     if generics_require_sized_self(tcx, method.def_id) {\n         return None;\n     }\n \n-    virtual_call_violation_for_method(tcx, trait_def_id, method)\n+    let violation = virtual_call_violation_for_method(tcx, trait_def_id, method);\n+    // Get an accurate span depending on the violation.\n+    violation.map(|v| {\n+        let node = tcx.hir().get_if_local(method.def_id);\n+        let span = match (v, node) {\n+            (MethodViolationCode::ReferencesSelfInput(arg), Some(node)) => node\n+                .fn_decl()\n+                .and_then(|decl| decl.inputs.get(arg + 1))\n+                .map_or(method.ident.span, |arg| arg.span),\n+            (MethodViolationCode::UndispatchableReceiver, Some(node)) => node\n+                .fn_decl()\n+                .and_then(|decl| decl.inputs.get(0))\n+                .map_or(method.ident.span, |arg| arg.span),\n+            (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n+                node.fn_decl().map_or(method.ident.span, |decl| decl.output.span())\n+            }\n+            _ => method.ident.span,\n+        };\n+        (v, span)\n+    })\n }\n \n /// Returns `Some(_)` if this method cannot be called on a trait\n@@ -326,18 +483,26 @@ fn virtual_call_violation_for_method<'tcx>(\n ) -> Option<MethodViolationCode> {\n     // The method's first parameter must be named `self`\n     if !method.method_has_self_argument {\n-        return Some(MethodViolationCode::StaticMethod);\n+        // We'll attempt to provide a structured suggestion for `Self: Sized`.\n+        let sugg =\n+            tcx.hir().get_if_local(method.def_id).as_ref().and_then(|node| node.generics()).map(\n+                |generics| match generics.where_clause.predicates {\n+                    [] => (\" where Self: Sized\", generics.where_clause.span),\n+                    [.., pred] => (\", Self: Sized\", pred.span().shrink_to_hi()),\n+                },\n+            );\n+        return Some(MethodViolationCode::StaticMethod(sugg));\n     }\n \n     let sig = tcx.fn_sig(method.def_id);\n \n-    for input_ty in &sig.skip_binder().inputs()[1..] {\n+    for (i, input_ty) in sig.skip_binder().inputs()[1..].iter().enumerate() {\n         if contains_illegal_self_type_reference(tcx, trait_def_id, input_ty) {\n-            return Some(MethodViolationCode::ReferencesSelf);\n+            return Some(MethodViolationCode::ReferencesSelfInput(i));\n         }\n     }\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output().skip_binder()) {\n-        return Some(MethodViolationCode::ReferencesSelf);\n+        return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n \n     // We can't monomorphize things like `fn foo<A>(...)`."}, {"sha": "0781feee845413a7f28c878c12e9b4ac1991bcdd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1015,6 +1015,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n     ) -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n             predicates: self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)).collect(),\n+            spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n         }\n     }\n \n@@ -1028,6 +1029,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n             tcx.predicates_of(def_id).instantiate_into(tcx, instantiated, substs);\n         }\n         instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)));\n+        instantiated.spans.extend(self.predicates.iter().map(|(_, sp)| *sp));\n     }\n \n     pub fn instantiate_identity(&self, tcx: TyCtxt<'tcx>) -> InstantiatedPredicates<'tcx> {\n@@ -1044,7 +1046,8 @@ impl<'tcx> GenericPredicates<'tcx> {\n         if let Some(def_id) = self.parent {\n             tcx.predicates_of(def_id).instantiate_identity_into(tcx, instantiated);\n         }\n-        instantiated.predicates.extend(self.predicates.iter().map(|&(p, _)| p))\n+        instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p));\n+        instantiated.spans.extend(self.predicates.iter().map(|(_, s)| s));\n     }\n \n     pub fn instantiate_supertrait(\n@@ -1059,6 +1062,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n                 .iter()\n                 .map(|(pred, _)| pred.subst_supertrait(tcx, poly_trait_ref))\n                 .collect(),\n+            spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n         }\n     }\n }\n@@ -1511,11 +1515,12 @@ impl<'tcx> Predicate<'tcx> {\n #[derive(Clone, Debug, TypeFoldable)]\n pub struct InstantiatedPredicates<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n+    pub spans: Vec<Span>,\n }\n \n impl<'tcx> InstantiatedPredicates<'tcx> {\n     pub fn empty() -> InstantiatedPredicates<'tcx> {\n-        InstantiatedPredicates { predicates: vec![] }\n+        InstantiatedPredicates { predicates: vec![], spans: vec![] }\n     }\n \n     pub fn is_empty(&self) -> bool {"}, {"sha": "3ed0ad16eebf2ee336e8bf5c309f8636270b377d", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2631,4 +2631,25 @@ impl Node<'_> {\n             _ => None,\n         }\n     }\n+\n+    pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n+        match self {\n+            Node::TraitItem(TraitItem { kind: TraitItemKind::Method(fn_sig, _), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Method(fn_sig, _), .. })\n+            | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n+            Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n+                Some(fn_decl)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn generics(&self) -> Option<&Generics<'_>> {\n+        match self {\n+            Node::TraitItem(TraitItem { generics, .. })\n+            | Node::ImplItem(ImplItem { generics, .. })\n+            | Node::Item(Item { kind: ItemKind::Fn(_, generics, _), .. }) => Some(generics),\n+            _ => None,\n+        }\n+    }\n }"}, {"sha": "b0b9790abb12a76893546a9cd3cc5998157e5c5a", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -3,7 +3,7 @@ use rustc::mir::{\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n };\n-use rustc::traits::error_reporting::suggest_constraining_type_param;\n+use rustc::traits::error_reporting::suggestions::suggest_constraining_type_param;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -217,12 +217,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         tcx.hir().get_generics(tcx.closure_base_def_id(self.mir_def_id))\n                     {\n                         suggest_constraining_type_param(\n+                            tcx,\n                             generics,\n                             &mut err,\n                             &param.name.as_str(),\n                             \"Copy\",\n                             tcx.sess.source_map(),\n                             span,\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "0984263bb283ebf56bd7f6c779ffd54d38900373", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -172,7 +172,7 @@ impl<'a> Parser<'a> {\n     /// ```\n     pub(super) fn parse_where_clause(&mut self) -> PResult<'a, WhereClause> {\n         let mut where_clause =\n-            WhereClause { predicates: Vec::new(), span: self.prev_span.to(self.prev_span) };\n+            WhereClause { predicates: Vec::new(), span: self.prev_span.shrink_to_hi() };\n \n         if !self.eat_keyword(kw::Where) {\n             return Ok(where_clause);"}, {"sha": "0e26e9461f4c3e00fbe8604fa664df905d82b41b", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -161,7 +161,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     }\n \n     // Compute the bounds on `Self` and the type parameters.\n-    let ty::InstantiatedPredicates { predicates } =\n+    let ty::InstantiatedPredicates { predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n     let clauses = predicates"}, {"sha": "9f867cf8ab464f382515490e20c1e486a08a5aa3", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -228,7 +228,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n     // Compute the bounds on Self and the type parameters.\n \n-    let ty::InstantiatedPredicates { predicates } =\n+    let ty::InstantiatedPredicates { predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n     // Finally, we have to normalize the bounds in the environment, in"}, {"sha": "eee9dc99d35b473cbbb65a35ca227d7f0b97f32d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> Deref for ConfirmContext<'a, 'tcx> {\n \n pub struct ConfirmResult<'tcx> {\n     pub callee: MethodCallee<'tcx>,\n-    pub illegal_sized_bound: bool,\n+    pub illegal_sized_bound: Option<Span>,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -112,7 +112,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n-        if !illegal_sized_bound {\n+        if illegal_sized_bound.is_none() {\n             let method_ty = self.tcx.mk_fn_ptr(ty::Binder::bind(method_sig));\n             self.add_obligations(method_ty, all_substs, &method_predicates);\n         }\n@@ -561,23 +561,31 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     fn predicates_require_illegal_sized_bound(\n         &self,\n         predicates: &ty::InstantiatedPredicates<'tcx>,\n-    ) -> bool {\n+    ) -> Option<Span> {\n         let sized_def_id = match self.tcx.lang_items().sized_trait() {\n             Some(def_id) => def_id,\n-            None => return false,\n+            None => return None,\n         };\n \n         traits::elaborate_predicates(self.tcx, predicates.predicates.clone())\n             .filter_map(|predicate| match predicate {\n                 ty::Predicate::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n-                    Some(trait_pred)\n+                    let span = predicates\n+                        .predicates\n+                        .iter()\n+                        .zip(predicates.spans.iter())\n+                        .filter_map(|(p, span)| if *p == predicate { Some(*span) } else { None })\n+                        .next()\n+                        .unwrap_or(rustc_span::DUMMY_SP);\n+                    Some((trait_pred, span))\n                 }\n                 _ => None,\n             })\n-            .any(|trait_pred| match trait_pred.skip_binder().self_ty().kind {\n-                ty::Dynamic(..) => true,\n-                _ => false,\n+            .filter_map(|(trait_pred, span)| match trait_pred.skip_binder().self_ty().kind {\n+                ty::Dynamic(..) => Some(span),\n+                _ => None,\n             })\n+            .next()\n     }\n \n     fn enforce_illegal_method_limitations(&self, pick: &probe::Pick<'_>) {"}, {"sha": "e90c2ef5e4361090a863380935ca6b39981bd504", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -58,7 +58,7 @@ pub enum MethodError<'tcx> {\n \n     // Found a `Self: Sized` bound where `Self` is a trait object, also the caller may have\n     // forgotten to import a trait.\n-    IllegalSizedBound(Vec<DefId>, bool),\n+    IllegalSizedBound(Vec<DefId>, bool, Span),\n \n     // Found a match, but the return type is wrong\n     BadReturnType,\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let result =\n             self.confirm_method(span, self_expr, call_expr, self_ty, pick.clone(), segment);\n \n-        if result.illegal_sized_bound {\n+        if let Some(span) = result.illegal_sized_bound {\n             let mut needs_mut = false;\n             if let ty::Ref(region, t_type, mutability) = self_ty.kind {\n                 let trait_type = self\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => Vec::new(),\n             };\n \n-            return Err(IllegalSizedBound(candidates, needs_mut));\n+            return Err(IllegalSizedBound(candidates, needs_mut, span));\n         }\n \n         Ok(result.callee)"}, {"sha": "789bac2705b07c2d61ce6c2facf22f5a59e0a184", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -640,9 +640,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.emit();\n             }\n \n-            MethodError::IllegalSizedBound(candidates, needs_mut) => {\n+            MethodError::IllegalSizedBound(candidates, needs_mut, bound_span) => {\n                 let msg = format!(\"the `{}` method cannot be invoked on a trait object\", item_name);\n                 let mut err = self.sess().struct_span_err(span, &msg);\n+                err.span_label(bound_span, \"this has a `Sized` requirement\");\n                 if !candidates.is_empty() {\n                     let help = format!(\n                         \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\"}, {"sha": "fc194e3af97f2cc8c069047647b6e3daf93aa37b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 100, "deletions": 15, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;\n@@ -176,9 +176,72 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n         _ => None,\n     };\n+    check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n+fn could_be_self(trait_def_id: DefId, ty: &hir::Ty<'_>) -> bool {\n+    match ty.kind {\n+        hir::TyKind::TraitObject([trait_ref], ..) => match trait_ref.trait_ref.path.segments {\n+            [s] => s.res.and_then(|r| r.opt_def_id()) == Some(trait_def_id),\n+            _ => false,\n+        },\n+        _ => false,\n+    }\n+}\n+\n+/// Detect when an object unsafe trait is referring to itself in one of its associated items.\n+/// When this is done, suggest using `Self` instead.\n+fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n+    let (trait_name, trait_def_id) = match tcx.hir().get(tcx.hir().get_parent_item(item.hir_id)) {\n+        hir::Node::Item(item) => match item.kind {\n+            hir::ItemKind::Trait(..) => (item.ident, tcx.hir().local_def_id(item.hir_id)),\n+            _ => return,\n+        },\n+        _ => return,\n+    };\n+    let mut trait_should_be_self = vec![];\n+    match &item.kind {\n+        hir::TraitItemKind::Const(ty, _) | hir::TraitItemKind::Type(_, Some(ty))\n+            if could_be_self(trait_def_id, ty) =>\n+        {\n+            trait_should_be_self.push(ty.span)\n+        }\n+        hir::TraitItemKind::Method(sig, _) => {\n+            for ty in sig.decl.inputs {\n+                if could_be_self(trait_def_id, ty) {\n+                    trait_should_be_self.push(ty.span);\n+                }\n+            }\n+            match sig.decl.output {\n+                hir::FunctionRetTy::Return(ty) if could_be_self(trait_def_id, ty) => {\n+                    trait_should_be_self.push(ty.span);\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+    if !trait_should_be_self.is_empty() {\n+        if rustc::traits::object_safety_violations(tcx, trait_def_id).is_empty() {\n+            return;\n+        }\n+        let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();\n+        tcx.sess\n+            .struct_span_err(\n+                trait_should_be_self,\n+                \"associated item referring to unboxed trait object for its own trait\",\n+            )\n+            .span_label(trait_name.span, \"in this trait\")\n+            .multipart_suggestion(\n+                \"you might have meant to use `Self` to refer to the implementing type\",\n+                sugg,\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+    }\n+}\n+\n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n@@ -219,9 +282,17 @@ fn check_associated_item(\n             ty::AssocKind::Method => {\n                 let sig = fcx.tcx.fn_sig(item.def_id);\n                 let sig = fcx.normalize_associated_types_in(span, &sig);\n-                check_fn_or_method(tcx, fcx, span, sig, item.def_id, &mut implied_bounds);\n-                let sig_if_method = sig_if_method.expect(\"bad signature for method\");\n-                check_method_receiver(fcx, sig_if_method, &item, self_ty);\n+                let hir_sig = sig_if_method.expect(\"bad signature for method\");\n+                check_fn_or_method(\n+                    tcx,\n+                    fcx,\n+                    item.ident.span,\n+                    sig,\n+                    hir_sig,\n+                    item.def_id,\n+                    &mut implied_bounds,\n+                );\n+                check_method_receiver(fcx, hir_sig, &item, self_ty);\n             }\n             ty::AssocKind::Type => {\n                 if item.defaultness.has_value() {\n@@ -364,7 +435,11 @@ fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n         let sig = fcx.tcx.fn_sig(def_id);\n         let sig = fcx.normalize_associated_types_in(item.span, &sig);\n         let mut implied_bounds = vec![];\n-        check_fn_or_method(tcx, fcx, item.span, sig, def_id, &mut implied_bounds);\n+        let hir_sig = match &item.kind {\n+            ItemKind::Fn(sig, ..) => sig,\n+            _ => bug!(\"expected `ItemKind::Fn`, found `{:?}`\", item.kind),\n+        };\n+        check_fn_or_method(tcx, fcx, item.ident.span, sig, hir_sig, def_id, &mut implied_bounds);\n         implied_bounds\n     })\n }\n@@ -452,7 +527,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n     def_id: DefId,\n-    return_ty: Option<Ty<'tcx>>,\n+    return_ty: Option<(Ty<'tcx>, Span)>,\n ) {\n     debug!(\"check_where_clauses(def_id={:?}, return_ty={:?})\", def_id, return_ty);\n \n@@ -586,17 +661,22 @@ fn check_where_clauses<'tcx, 'fcx>(\n \n     let mut predicates = predicates.instantiate_identity(fcx.tcx);\n \n-    if let Some(return_ty) = return_ty {\n-        predicates.predicates.extend(check_opaque_types(tcx, fcx, def_id, span, return_ty));\n+    if let Some((return_ty, span)) = return_ty {\n+        let opaque_types = check_opaque_types(tcx, fcx, def_id, span, return_ty);\n+        for _ in 0..opaque_types.len() {\n+            predicates.spans.push(span);\n+        }\n+        predicates.predicates.extend(opaque_types);\n     }\n \n     let predicates = fcx.normalize_associated_types_in(span, &predicates);\n \n     debug!(\"check_where_clauses: predicates={:?}\", predicates.predicates);\n-    let wf_obligations = predicates\n-        .predicates\n-        .iter()\n-        .flat_map(|p| traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, span));\n+    assert_eq!(predicates.predicates.len(), predicates.spans.len());\n+    let wf_obligations =\n+        predicates.predicates.iter().zip(predicates.spans.iter()).flat_map(|(p, sp)| {\n+            traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, *sp)\n+        });\n \n     for obligation in wf_obligations.chain(default_obligations) {\n         debug!(\"next obligation cause: {:?}\", obligation.cause);\n@@ -609,23 +689,28 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n     sig: ty::PolyFnSig<'tcx>,\n+    hir_sig: &hir::FnSig<'_>,\n     def_id: DefId,\n     implied_bounds: &mut Vec<Ty<'tcx>>,\n ) {\n     let sig = fcx.normalize_associated_types_in(span, &sig);\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n \n-    for input_ty in sig.inputs() {\n+    for (input_ty, span) in sig.inputs().iter().zip(hir_sig.decl.inputs.iter().map(|t| t.span)) {\n         fcx.register_wf_obligation(&input_ty, span, ObligationCauseCode::MiscObligation);\n     }\n     implied_bounds.extend(sig.inputs());\n \n-    fcx.register_wf_obligation(sig.output(), span, ObligationCauseCode::ReturnType);\n+    fcx.register_wf_obligation(\n+        sig.output(),\n+        hir_sig.decl.output.span(),\n+        ObligationCauseCode::ReturnType,\n+    );\n \n     // FIXME(#25759) return types should not be implied bounds\n     implied_bounds.push(sig.output());\n \n-    check_where_clauses(tcx, fcx, span, def_id, Some(sig.output()));\n+    check_where_clauses(tcx, fcx, span, def_id, Some((sig.output(), hir_sig.decl.output.span())));\n }\n \n /// Checks \"defining uses\" of opaque `impl Trait` types to ensure that they meet the restrictions"}, {"sha": "a8a8d01ed78fb656da803fe692b5f85a43a43427", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n LL |     const N: usize;\n-   |           - the trait cannot contain associated consts like `N`\n+   |           - ...because it contains this associated `const`\n ...\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = help: consider moving `N` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "62a380732a8bb8e127d62deed0b7517553961538", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n-   |           - the trait cannot contain associated consts like `X`\n+   |           - ...because it contains this associated `const`\n ...\n LL | impl dyn Bar {}\n    |      ^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `X` to another trait\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-48027.rs:3:32"}, {"sha": "efd5a92a4fced8cad745d2ea24b0d750674e765e", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 24, "deletions": 51, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -7,76 +7,49 @@ LL | impl Case1 for S1 {\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n-LL |   fn assume_case1<T: Case1>() {\n-   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n-   |  _|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+LL | fn assume_case1<T: Case1>() {\n+   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n+   |                    |\n+   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n-LL |   trait Case1 {\n-   |   ----------- required by `Case1`\n+LL | trait Case1 {\n+   | ----------- required by `Case1`\n ...\n-LL |   fn assume_case1<T: Case1>() {\n-   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n-   |  _|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+LL | fn assume_case1<T: Case1>() {\n+   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n+   |                    |\n+   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n-LL |   trait Case1 {\n-   |   ----------- required by `Case1`\n+LL | trait Case1 {\n+   | ----------- required by `Case1`\n ...\n-LL |   fn assume_case1<T: Case1>() {\n-   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n-   |  _|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+LL | fn assume_case1<T: Case1>() {\n+   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n+   |                    |\n+   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n-LL |   trait Case1 {\n-   |   ----------- required by `Case1`\n+LL | trait Case1 {\n+   | ----------- required by `Case1`\n ...\n-LL | / fn assume_case1<T: Case1>() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     assert_c::<_, _, _, T::C>();\n-LL | | }\n-   | |_^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+LL | fn assume_case1<T: Case1>() {\n+   |                    ^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n "}, {"sha": "9e10ed7b7295203acfb21c42e523afe179cefe6d", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,20 +1,20 @@\n error[E0284]: type annotations needed\n-  --> $DIR/associated-types-overridden-binding.rs:4:1\n+  --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n    | ------------------------------- required by `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n+   |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n    = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n \n error[E0284]: type annotations needed\n-  --> $DIR/associated-types-overridden-binding.rs:7:1\n+  --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n LL | trait I32Iterator = Iterator<Item = i32>;\n    | ----------------------------------------- required by `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n    = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n "}, {"sha": "0834014b31c3563d1e0072cc03b50476989e8cd0", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,17 +1,13 @@\n error[E0277]: `F` cannot be sent between threads safely\n-  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:1\n+  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:22\n    |\n-LL |   struct X<F> where F: FnOnce() + 'static + Send {\n-   |   ---------------------------------------------- required by `X`\n+LL | struct X<F> where F: FnOnce() + 'static + Send {\n+   | ---------------------------------------------- required by `X`\n ...\n-LL |   fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-   |   ^                                                    - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n-   |  _|\n-   | |\n-LL | |\n-LL | |     return X { field: blk };\n-LL | | }\n-   | |_^ `F` cannot be sent between threads safely\n+LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+   |                      ^^^^                            - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n+   |                      |\n+   |                      `F` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n "}, {"sha": "85ed360a1f74a2d3de1a3f471e2d38900e42200c", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,9 +2,13 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |                          -- method `eq` references the `Self` type in its parameters or return type\n+   |       -------------                       ---- ...because method `eq` references the `Self` type in this parameter\n+   |       |\n+   |       this trait cannot be made into an object...\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = help: consider moving `eq` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "fd68cb9c6cf85ae68e47905c3c0dc19a794b3944", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -18,7 +18,7 @@ LL | pub struct Foo<A, B>(A, B);\n    | --------------------------- required by `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n-   |      - help: consider restricting this bound: `A: std::marker::Sized`\n+   |      - this type parameter needs to be `std::marker::Sized`\n ...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -33,7 +33,7 @@ LL | pub struct Foo<A, B>(A, B);\n    | --------------------------- required by `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n-   |         - help: consider restricting this bound: `B: std::marker::Sized`\n+   |         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "333754891c16457cdfcdb1b41164f175b6b79e76", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -16,7 +16,7 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n LL |     let _: &Copy + 'static;\n    |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n+   = note: the trait cannot be made into an object because it requires `Self: Sized`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "80d188bf2f89bd6af372162e8324f1cf922f9644", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n LL | fn test1<T: ?Sized + Foo>(t: &T) {\n-   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |          - this type parameter needs to be `std::marker::Sized`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n LL | fn test2<T: ?Sized + Foo>(t: &T) {\n-   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |          - this type parameter needs to be `std::marker::Sized`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |"}, {"sha": "f323a9904557a7eb614d759db784acd4a49961f9", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -7,11 +7,18 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL | trait SomeTrait {\n+   |       --------- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:12:9"}, {"sha": "84481ff16c07e2dc71e5e796d25796aa38e5fbe3", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -7,11 +7,18 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL | trait SomeTrait {\n+   |       --------- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:10:9"}, {"sha": "638e924b0eb4391602fe343c358f2cb462c90fc5", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n-  --> $DIR/E0038.rs:5:1\n+  --> $DIR/E0038.rs:5:16\n    |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n LL |     fn foo(&self) -> Self;\n-   |        --- method `foo` references the `Self` type in its parameters or return type\n+   |                      ---- ...because method `foo` references the `Self` type in its return type\n ...\n LL | fn call_foo(x: Box<dyn Trait>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                ^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "1d087a465942ebb833ac7c303a9ad1bfba825b53", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/E0275.rs:5:1\n+  --> $DIR/E0275.rs:5:33\n    |\n LL | trait Foo {}\n    | --------- required by `Foo`\n ...\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                 ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "0c9165fd9585d4d84d497d8d589eaac8b02b313c", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ - required by this bound in `assert_sized`\n+   |    ------------ -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n+   |                 |\n+   |                 required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time"}, {"sha": "c66bbb0c5045f4ef99c4d31cd12e784a6353d5ca", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,45 +1,66 @@\n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:38\n    |\n+LL | trait NonObjectSafe1: Sized {}\n+   |       --------------  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n+   |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n \n error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n    |\n+LL | trait NonObjectSafe2 {\n+   |       -------------- this trait cannot be made into an object...\n LL |     fn static_fn() {}\n-   |        --------- associated function `static_fn` has no `self` parameter\n+   |        --------- ...because associated function `static_fn` has no `self` parameter\n ...\n LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+   |\n+help: consider turning `static_fn` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn static_fn() where Self: Sized {}\n+   |                    ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:35\n    |\n+LL | trait NonObjectSafe3 {\n+   |       -------------- this trait cannot be made into an object...\n LL |     fn foo<T>(&self);\n-   |        --- method `foo` has generic type parameters\n+   |        --- ...because method `foo` has generic type parameters\n ...\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:1\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n+LL | trait NonObjectSafe4 {\n+   |       -------------- this trait cannot be made into an object...\n LL |     fn foo(&self, &Self);\n-   |        --- method `foo` references the `Self` type in its parameters or return type\n+   |                   ----- ...because method `foo` references the `Self` type in this parameter\n ...\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:6\n    |\n+LL | trait NonObjectSafe1: Sized {}\n+   |       --------------  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL | impl Trait for dyn NonObjectSafe1 {}\n    |      ^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "1a79dbf2279a0250f9e8922996b82610d5b142d5", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -4,8 +4,8 @@\n // FIXME(generic-associated-types) Investigate why this doesn't compile.\n \n trait Iterator {\n-    //~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n     type Item<'a>: 'a;\n+    //~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n }\n \n fn main() {}"}, {"sha": "687423962361bf04c193a801b2a9e1fafe3e6e0b", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,15 +1,10 @@\n error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n-  --> $DIR/issue-62326-parameter-out-of-range.rs:6:1\n+  --> $DIR/issue-62326-parameter-out-of-range.rs:7:20\n    |\n-LL |   trait Iterator {\n-   |   ^-------------\n-   |   |\n-   |  _required by `Iterator`\n-   | |\n-LL | |\n-LL | |     type Item<'a>: 'a;\n-LL | | }\n-   | |_^\n+LL | trait Iterator {\n+   | -------------- required by `Iterator`\n+LL |     type Item<'a>: 'a;\n+   |                    ^^\n \n error: aborting due to previous error\n "}, {"sha": "ccb1c9bcc7f4e88d677c87287fcfcd3d1201abc3", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -25,33 +25,27 @@ LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:19:5\n+  --> $DIR/iterable.rs:19:30\n    |\n-LL |   trait Iterable {\n-   |   -------------- required by `Iterable`\n+LL | trait Iterable {\n+   | -------------- required by `Iterable`\n ...\n-LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-LL | |\n-LL | |         self.iter()\n-LL | |     }\n-   | |_____^ expected associated type, found reference\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n    |\n    = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n                     found reference `&T`\n    = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:31:5\n+  --> $DIR/iterable.rs:31:30\n    |\n-LL |   trait Iterable {\n-   |   -------------- required by `Iterable`\n+LL | trait Iterable {\n+   | -------------- required by `Iterable`\n ...\n-LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-LL | |\n-LL | |         self.iter()\n-LL | |     }\n-   | |_____^ expected associated type, found reference\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n    |\n    = note: expected associated type `<[T] as Iterable>::Item<'_>`\n                     found reference `&T`"}, {"sha": "9df5188bbdd0883cf8a1969f889b0ed71fbd8954", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,20 +1,34 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:21:1\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:21:13\n    |\n+LL | trait NotObjectSafe {\n+   |       ------------- this trait cannot be made into an object...\n LL |     fn foo() -> Self;\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL | fn car() -> dyn NotObjectSafe {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() -> Self where Self: Sized;\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:1\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n    |\n+LL | trait NotObjectSafe {\n+   |       ------------- this trait cannot be made into an object...\n LL |     fn foo() -> Self;\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL | fn cat() -> Box<dyn NotObjectSafe> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() -> Self where Self: Sized;\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c8b9045efe6a0343c3f2651181f3b86ca44e20d7", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the size for values of type `dyn for<'r> std::ops::Fn(&'r isize) -> isize` cannot be known at compilation time\n-  --> $DIR/issue-18919.rs:3:1\n+  --> $DIR/issue-18919.rs:3:15\n    |\n-LL | / fn ho_func(f: Option<FuncType>) {\n-LL | |\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n+LL | fn ho_func(f: Option<FuncType>) {\n+   |               ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "b3ba7aecad0dbd7b175cdcf0205d92d5cfbb5ad3", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/issue-18959.rs:11:1\n+  --> $DIR/issue-18959.rs:11:11\n    |\n LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n-   |                    --- method `foo` has generic type parameters\n+   |                    --- ...because method `foo` has generic type parameters\n+LL | pub trait Bar: Foo { }\n+   |           --- this trait cannot be made into an object...\n ...\n LL | fn foo(b: &dyn Bar) {\n-   | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |           ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "0a080171a795158e949f8f6e90dc8d18fe6380a5", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,18 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n+LL | trait Qiz {\n+   |       --- this trait cannot be made into an object...\n LL |   fn qiz();\n-   |      --- associated function `qiz` has no `self` parameter\n+   |      --- ...because associated function `qiz` has no `self` parameter\n ...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+   |\n+help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |   fn qiz() where Self: Sized;\n+   |            ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b6033e47b1a44d88edd1503e77631317083e60a9", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,20 +2,29 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n LL |     fn foo<T>(&self, val: T);\n-   |        --- method `foo` has generic type parameters\n+   |        --- ...because method `foo` has generic type parameters\n+...\n+LL | trait Bar: Foo { }\n+   |       --- this trait cannot be made into an object...\n ...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n LL |     fn foo<T>(&self, val: T);\n-   |        --- method `foo` has generic type parameters\n+   |        --- ...because method `foo` has generic type parameters\n+...\n+LL | trait Bar: Foo { }\n+   |       --- this trait cannot be made into an object...\n ...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `foo` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n    = note: required by cast to type `&mut dyn Bar`\n "}, {"sha": "36350bff100dd5928c2fe825d2ca97c1bafadb24", "filename": "src/test/ui/issues/issue-20005.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -5,9 +5,9 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR the size for values of type\n+    fn to<Dst>(\n         self\n-    ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+    ) -> <Dst as From<Self>>::Result where Dst: From<Self> { //~ ERROR the size for values of type\n         From::from(self)\n     }\n }"}, {"sha": "529571a6b74dd0feae782d5d7274ac99c0f14b21", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-20005.rs:8:5\n+  --> $DIR/issue-20005.rs:10:49\n    |\n-LL |   trait From<Src> {\n-   |   --------------- required by `From`\n+LL | trait From<Src> {\n+   | --------------- required by `From`\n ...\n-LL | /     fn to<Dst>(\n-LL | |         self\n-LL | |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n-   | |                                                           - help: consider further restricting `Self`: `, Self: std::marker::Sized`\n-LL | |         From::from(self)\n-LL | |     }\n-   | |_____^ doesn't have a size known at compile-time\n+LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+   |                                                 ^^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::marker::Sized`\n+   |                                                 |\n+   |                                                 doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "19ef52af65736369a6e38b0be7d1e03d8315a29e", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -6,9 +6,9 @@ struct NoData<T>;\n //~^ ERROR: parameter `T` is never used\n \n impl<T> Foo for T where NoData<T>: Foo {\n-//~^ ERROR: overflow evaluating the requirement\n-  fn answer(self) {\n   //~^ ERROR: overflow evaluating the requirement\n+  //~| ERROR: overflow evaluating the requirement\n+  fn answer(self) {\n     let val: NoData<T> = NoData;\n   }\n }"}, {"sha": "e765144ff0b48b268b6f5d2dc41e3532b1a3dc0f", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -7,19 +7,13 @@ LL | struct NoData<T>;\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:8:1\n+  --> $DIR/issue-20413.rs:8:36\n    |\n-LL |   trait Foo {\n-   |   --------- required by `Foo`\n+LL | trait Foo {\n+   | --------- required by `Foo`\n ...\n-LL | / impl<T> Foo for T where NoData<T>: Foo {\n-LL | |\n-LL | |   fn answer(self) {\n-LL | |\n-LL | |     let val: NoData<T> = NoData;\n-LL | |   }\n-LL | | }\n-   | |_^\n+LL | impl<T> Foo for T where NoData<T>: Foo {\n+   |                                    ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n@@ -151,16 +145,13 @@ LL | | }\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:10:3\n+  --> $DIR/issue-20413.rs:8:36\n    |\n-LL |   trait Foo {\n-   |   --------- required by `Foo`\n+LL | trait Foo {\n+   | --------- required by `Foo`\n ...\n-LL | /   fn answer(self) {\n-LL | |\n-LL | |     let val: NoData<T> = NoData;\n-LL | |   }\n-   | |___^\n+LL | impl<T> Foo for T where NoData<T>: Foo {\n+   |                                    ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "abd2290952baf498732d458b2a8e0f02e4bac5d0", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/issue-20433.rs:6:5\n+  --> $DIR/issue-20433.rs:6:18\n    |\n LL |     fn iceman(c: Vec<[i32]>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "1cb2d8c7302a08f2a1c609ca5496e8b6e54808fa", "filename": "src/test/ui/issues/issue-20692.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,4 +1,4 @@\n-trait Array: Sized {}\n+trait Array: Sized + Copy {}\n \n fn f<T: Array>(x: &T) {\n     let _ = x"}, {"sha": "ca2611e0f9eb5daa13b191c61591eaf247f261cc", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,18 +1,27 @@\n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n+LL | trait Array: Sized + Copy {}\n+   |       -----  -----   ---- ...because it requires `Self: Sized`\n+   |       |      |\n+   |       |      ...because it requires `Self: Sized`\n+   |       this trait cannot be made into an object...\n+...\n LL |     &dyn Array;\n    |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:4:13\n    |\n+LL | trait Array: Sized + Copy {}\n+   |       -----  -----   ---- ...because it requires `Self: Sized`\n+   |       |      |\n+   |       |      ...because it requires `Self: Sized`\n+   |       this trait cannot be made into an object...\n+...\n LL |     let _ = x\n    |             ^ the trait `Array` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Array>` for `&T`\n    = note: required by cast to type `&dyn Array`\n "}, {"sha": "a785a956ca9f5c9bac5b16ada1bf9aa609a26ae8", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -61,16 +61,10 @@ LL | |     }\n    | |_____^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n@@ -89,30 +83,18 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected  `Publisher<'_>`\n               found  `Publisher<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n@@ -131,16 +113,10 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+  --> $DIR/issue-20831-debruijn.rs:28:33\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected  `Publisher<'_>`\n               found  `Publisher<'_>`\n "}, {"sha": "f7c659be148db43618ee67afd1d5ba3348414ff7", "filename": "src/test/ui/issues/issue-21974.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -7,8 +7,8 @@ trait Foo {\n     fn foo(self);\n }\n \n-fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations needed\n-    where &'a T : Foo,\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+    where &'a T : Foo, //~ ERROR type annotations needed\n           &'b T : Foo\n {\n     x.foo();"}, {"sha": "19823499066eb44699358bde582506017ca550e4", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,17 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-21974.rs:10:1\n+  --> $DIR/issue-21974.rs:11:19\n    |\n-LL |   trait Foo {\n-   |   --------- required by `Foo`\n+LL | trait Foo {\n+   | --------- required by `Foo`\n ...\n-LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-LL | |     where &'a T : Foo,\n-LL | |           &'b T : Foo\n-LL | | {\n-LL | |     x.foo();\n-LL | |     y.foo();\n-LL | | }\n-   | |_^ cannot infer type for reference `&'a T`\n+LL |     where &'a T : Foo,\n+   |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "68a90c6d80f3ba05ce409b5e47ad5e00a7689c7a", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-23281.rs:4:5\n+  --> $DIR/issue-23281.rs:4:27\n    |\n LL |     pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                           ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "2a714861da1fdb9ab49566d3fac3c0d79d8366bf", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,11 @@\n error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::O == T`\n-  --> $DIR/issue-24204.rs:14:1\n+  --> $DIR/issue-24204.rs:14:12\n    |\n LL | trait Trait: Sized {\n    | ------------------ required by `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n+   |            ^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<<T as Trait>::A as MultiDispatch<i32>>::O`"}, {"sha": "538d44c3b2ef3b5efc34e7b8650802fad1cb0460", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-24424.rs:4:1\n+  --> $DIR/issue-24424.rs:4:57\n    |\n LL | trait Trait0<'l0>  {}\n    | ----------------- required by `Trait0`\n LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T0`\n+   |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n    = note: cannot resolve `T0: Trait0<'l0>`\n "}, {"sha": "be438ef9ac7bacb0f03f1a5e9666da7facb9da6e", "filename": "src/test/ui/issues/issue-26056.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Map` cannot be made into an object\n   --> $DIR/issue-26056.rs:20:13\n    |\n+LL | trait Map: MapLookup<<Self as Map>::Key> {\n+   |       ---  ----------------------------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |         as &dyn Map<Key=u32,MapValue=u32>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n-   |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error: aborting due to previous error\n "}, {"sha": "1ddea73e00ae0ee214bec8bea40b715e919eded0", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/issue-27060-2.rs:3:5\n    |\n LL | pub struct Bad<T: ?Sized> {\n-   |                -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |                - this type parameter needs to be `std::marker::Sized`\n LL |     data: T,\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "6ce0fa37a884044aa55501ec746858df7fced047", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-27942.rs:5:5\n+  --> $DIR/issue-27942.rs:5:25\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |                         ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n@@ -18,10 +18,10 @@ LL | pub trait Buffer<'a, R: Resources<'a>> {\n    |                  ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-27942.rs:5:5\n+  --> $DIR/issue-27942.rs:5:25\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |                         ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`"}, {"sha": "658199003c18d472a0cf20c5976207a355902069", "filename": "src/test/ui/issues/issue-28576.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-28576.rs:7:12\n    |\n+LL |   pub trait Bar: Foo<Assoc=()> {\n+   |             ---  -------------\n+   |             |    |   |\n+   |             |    |   ...because it uses `Self` as a type parameter in this\n+   |             |    ...because it uses `Self` as a type parameter in this\n+   |             this trait cannot be made into an object...\n+LL |       fn new(&self, b: &\n LL | /            dyn Bar\n LL | |               <Assoc=()>\n    | |________________________^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error: aborting due to previous error\n "}, {"sha": "f9b9b7dbd34bb7c46dadcd414bc00017930cd5bc", "filename": "src/test/ui/issues/issue-35976.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,6 +1,9 @@\n error: the `wait` method cannot be invoked on a trait object\n   --> $DIR/issue-35976.rs:14:9\n    |\n+LL |         fn wait(&self) where Self: Sized;\n+   |                                    ----- this has a `Sized` requirement\n+...\n LL |     arg.wait();\n    |         ^^^^\n    |"}, {"sha": "50c5195dc93b08613db2acfb63653706f5b878c2", "filename": "src/test/ui/issues/issue-38404.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,12 @@\n error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/issue-38404.rs:3:15\n    |\n+LL | trait A<T>: std::ops::Add<Self> + Sized {}\n+   |             ------------------- ...because it uses `Self` as a type parameter in this\n+LL | trait B<T>: A<T> {}\n+   |       - this trait cannot be made into an object...\n LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n-   |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error: aborting due to previous error\n "}, {"sha": "2bba50e1f41c8c90ca9e2c2252e263863ab17121", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,18 +1,25 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:14:13\n    |\n+LL | trait Foo where u32: Q<Self> {\n+   |       ---            ------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let _f: Box<dyn Foo> =\n    |             ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:15:9\n    |\n+LL | trait Foo where u32: Q<Self> {\n+   |       ---            ------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |         Box::new(());\n    |         ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<()>`\n    = note: required by cast to type `std::boxed::Box<dyn Foo>`\n "}, {"sha": "03e3a7f227a23713a8942e0963c0c2e0eaef53cb", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,8 +1,10 @@\n error: the trait `X` cannot be made into an object\n   --> $DIR/issue-50781.rs:6:8\n    |\n+LL | trait X {\n+   |       - this trait cannot be made into an object...\n LL |     fn foo(&self) where Self: Trait;\n-   |        ^^^\n+   |        ^^^ ...because method `foo` references the `Self` type in its `where` clause\n    |\n note: the lint level is defined here\n   --> $DIR/issue-50781.rs:1:9\n@@ -11,7 +13,7 @@ LL | #![deny(where_clauses_object_safety)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n-   = note: method `foo` references the `Self` type in where clauses\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "2a9fd13be5f01a4ffd49e5b08c71a380121531e6", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -12,18 +12,25 @@ LL |     take_param(&x);\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19\n    |\n+LL | trait Foo : Copy {\n+   |       ---   ---- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let z = &x as &dyn Foo;\n    |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n+LL | trait Foo : Copy {\n+   |       ---   ---- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Foo>` for `&std::boxed::Box<{integer}>`\n    = note: required by cast to type `&dyn Foo`\n "}, {"sha": "6227ada4dc9384cfa4303a0d910517d773dada98", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -12,10 +12,14 @@ LL |     take_param(&x);\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n+LL | trait Foo : Copy {\n+   |       ---   ---- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Foo>` for `&std::boxed::Box<i32>`\n    = note: required by cast to type `&dyn Foo`\n "}, {"sha": "4e50064efb4ec5572fd31c934bd6742d47b1faa4", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 30, "deletions": 46, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -13,87 +13,71 @@ LL |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL | trait X<K>: Sized {\n    |         - help: consider adding an explicit lifetime bound `K: 'a`...\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n    |\n LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n    |\n LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `L` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n-LL |       fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |       ^          - help: consider adding an explicit lifetime bound `L: 'a`...\n-   |  _____|\n-   | |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n+   |                -     ^^^^^^^^^^^^^^^^\n+   |                |\n+   |                help: consider adding an explicit lifetime bound `L: 'a`...\n    |\n note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n-LL | /     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n+   |                      ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n-LL |   impl<K> Nested<K> {\n-   |        - help: consider adding an explicit lifetime bound `K: 'a`...\n-LL | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL | impl<K> Nested<K> {\n+   |      - help: consider adding an explicit lifetime bound `K: 'a`...\n+LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+   |                                 ^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n-LL | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+   |                                 ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `M` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n-LL |       fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |       ^                                                -- help: consider adding an explicit lifetime bound `M: 'a`...\n-   |  _____|\n-   | |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound `M: 'a`...\n    |\n note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n-LL | /     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |                                    ^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "890acde35c4f8763386dac27f61e8ef7a8a345c1", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-associated-consts.rs:12:1\n+  --> $DIR/object-safety-associated-consts.rs:12:30\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n-   |           - the trait cannot contain associated consts like `X`\n+   |           - ...because it contains this associated `const`\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `X` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "e2a95d95a13ed3d243fbf168ec295f2a536a758d", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,12 +1,15 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:14:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n-   |           - the trait cannot contain associated consts like `X`\n+   |           - ...because it contains this associated `const`\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `X` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "9e70abbd32fc6551fcac230dd0a1603c1fd0de1e", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,20 +1,28 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:18:1\n+  --> $DIR/object-safety-generics.rs:18:30\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:24:1\n+  --> $DIR/object-safety-generics.rs:24:39\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                                       ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `bar` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7443d38470c030e9c680e14baa18dc4e0b216d3f", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,24 +1,30 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:20:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- method `bar` has generic type parameters\n+   |        --- ...because method `bar` has generic type parameters\n ...\n LL |     t as &dyn Bar\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "fe9ca5b6fa4b7d2076c6e73b4e082e62f3d72155", "filename": "src/test/ui/object-safety/object-safety-issue-22040.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Expr` cannot be made into an object\n   --> $DIR/object-safety-issue-22040.rs:12:23\n    |\n+LL | trait Expr: Debug + PartialEq {\n+   |       ----          --------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     elements: Vec<Box<dyn Expr + 'x>>,\n    |                       ^^^^^^^^^^^^^ the trait `Expr` cannot be made into an object\n-   |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error: aborting due to previous error\n "}, {"sha": "4dbb27b425b3266bba4f70b5704b9da0253869d0", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,20 +1,28 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:22:1\n+  --> $DIR/object-safety-mentions-Self.rs:22:30\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n-   |        --- method `bar` references the `Self` type in its parameters or return type\n+   |                      ----- ...because method `bar` references the `Self` type in this parameter\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Baz` cannot be made into an object\n-  --> $DIR/object-safety-mentions-Self.rs:28:1\n+  --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n+LL | trait Baz {\n+   |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n-   |        --- method `baz` references the `Self` type in its parameters or return type\n+   |                      ---- ...because method `baz` references the `Self` type in its return type\n ...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object\n+   |                              ^^^^^^^^ the trait `Baz` cannot be made into an object\n+   |\n+   = help: consider moving `baz` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "89b273fb8adde246796d0e062df44e772a3ddeef", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,24 +1,30 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:24:5\n    |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n-   |        --- method `bar` references the `Self` type in its parameters or return type\n+   |                      ----- ...because method `bar` references the `Self` type in this parameter\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n    |\n+LL | trait Baz {\n+   |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n-   |        --- method `baz` references the `Self` type in its parameters or return type\n+   |                      ---- ...because method `baz` references the `Self` type in its return type\n ...\n LL |     t\n    |     ^ the trait `Baz` cannot be made into an object\n    |\n+   = help: consider moving `baz` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Baz>` for `&T`\n    = note: required by cast to type `&dyn Baz`\n "}, {"sha": "f878cf8b462415b8d0b21340bd11416e157ba830", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,18 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety-no-static.rs:12:1\n+  --> $DIR/object-safety-no-static.rs:12:18\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL | fn diverges() -> Box<dyn Foo> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                  ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized {}\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "de56843962bea381bd9f5fa6319726f31f65b06e", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,14 +1,20 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:22:27\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let b: Box<dyn Foo> = Box::new(Bar);\n    |                           ^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<Bar>`\n    = note: required by cast to type `std::boxed::Box<dyn Foo>`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized {}\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2f605d8e904c5dfbfbd737a8a949376c738d478c", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized-2.rs:14:1\n+  --> $DIR/object-safety-sized-2.rs:14:30\n    |\n+LL | trait Bar\n+   |       --- this trait cannot be made into an object...\n+LL |     where Self : Sized\n+   |                  ----- ...because it requires `Self: Sized`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "2f1f06f4cf5fa395e767fd62f98e18e785b4d721", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,14 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:16:5\n    |\n+LL | trait Bar\n+   |       --- this trait cannot be made into an object...\n+LL |     where Self : Sized\n+   |                  ----- ...because it requires `Self: Sized`\n+...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "54f65c43d9cdef0f9e346b5d8ba4e58ca43a8005", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-sized.rs:12:1\n+  --> $DIR/object-safety-sized.rs:12:30\n    |\n+LL | trait Bar : Sized {\n+   |       ---   ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n+   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "58c2b7721474fafc1f1102ca267ff61679b6ec18", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,14 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:14:5\n    |\n+LL | trait Bar : Sized {\n+   |       ---   ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "ef7f6bacd1233793eecaa510d0821bf2e2e6302e", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-Self.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-supertrait-mentions-Self.rs:15:31\n    |\n+LL | trait Baz : Bar<Self> {\n+   |       ---   --------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                               ^^^^^^^ the trait `Baz` cannot be made into an object\n-   |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error: aborting due to previous error\n "}, {"sha": "5ab423d9e20772bd83f4fd92b358072ff3cc1ade", "filename": "src/test/ui/regions/regions-free-region-ordering-callee-4.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,12 +1,8 @@\n error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-free-region-ordering-callee-4.rs:5:1\n+  --> $DIR/regions-free-region-ordering-callee-4.rs:5:68\n    |\n-LL | / fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n-LL | |\n-LL | |     // Do not infer ordering from closure argument types.\n-LL | |     let z: Option<&'a &'b usize> = None;\n-LL | | }\n-   | |_^\n+LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the function body at 5:14\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:14"}, {"sha": "6470ebf541b5b9096416fb1ae66c91a06d53a088", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,8 @@\n error[E0491]: in type `&'x (dyn for<'z> Trait1<<T as Trait2<'y, 'z>>::Foo> + 'x)`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:1\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:25\n    |\n-LL | / fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-LL | |\n-LL | | {\n-LL | | }\n-   | |_^\n+LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'x` as defined on the function body at 21:11\n   --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:11"}, {"sha": "c35516d2c0871368685bc9f7a26139bfc68befce", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -67,15 +67,10 @@ LL | | }\n               found  `Project<'_, '_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:4\n    |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+LL | fn bar<'a, 'b>()\n+   |    ^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n@@ -88,15 +83,10 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined on\n LL | fn bar<'a, 'b>()\n    |            ^^\n note: ...so that the types are compatible\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:4\n    |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+LL | fn bar<'a, 'b>()\n+   |    ^^^\n    = note: expected  `Project<'a, 'b>`\n               found  `Project<'_, '_>`\n "}, {"sha": "d0c278d12d70aea93bf88c5c12fcc5f3ce7affb2", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n-  --> $DIR/issue-3907-2.rs:11:1\n+  --> $DIR/issue-3907-2.rs:11:12\n    |\n LL | fn bar(_x: Foo) {}\n-   | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n+   |            ^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n-   = note: associated function `bar` has no `self` parameter\n+   = note: the trait cannot be made into an object because associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "7948f7e9d6bc69e258898e446090a18331828d3f", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,17 +1,27 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:32\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+   |                  ---------\n+   |                  |\n+   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+   |                  ---------\n+   |                  |\n+   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object"}, {"sha": "74e76b8265f7055d49d9be4b0e2bd641ab53366f", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,8 +1,13 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s `self` parameter cannot be dispatched on\n+   |                  ---------\n+   |                  |\n+   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object"}, {"sha": "a9ec6b9c02fe8e4987a839c1e0549a441fdc467d", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   |    --- - required by this bound in `bot`\n+   |    --- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n+   |        |\n+   |        required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time"}, {"sha": "241dde9fec1d61e2d116f36fc8f267884cacee00", "filename": "src/test/ui/suggestions/imm-ref-trait-object.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n      t.min().unwrap() //~ ERROR the `min` method cannot be invoked on a trait object\n }"}, {"sha": "c5fe6ddb8a9bf852794b02a36795ab89851a0dd9", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,8 +1,13 @@\n error: the `min` method cannot be invoked on a trait object\n-  --> $DIR/imm-ref-trait-object.rs:2:8\n+  --> $DIR/imm-ref-trait-object.rs:7:8\n    |\n LL |      t.min().unwrap()\n    |        ^^^\n+   | \n+  ::: $SRC_DIR/libcore/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         Self: Sized,\n+   |               ----- this has a `Sized` requirement\n    |\n    = note: you need `&mut dyn std::iter::Iterator<Item = &u64>` instead of `&dyn std::iter::Iterator<Item = &u64>`\n "}, {"sha": "31d974ed43d99fea902229b4329a2452278655ce", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,20 +1,13 @@\n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:17:1\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:17:19\n    |\n-LL |   trait Parent {\n-   |   ------------ required by `Parent`\n+LL | trait Parent {\n+   | ------------ required by `Parent`\n ...\n-LL |   impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   |   ^                                                     - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-   |  _|\n-   | |\n-LL | |\n-LL | |     type Ty = A;\n-LL | |     type Assoc = ChildWrapper<T::Assoc>;\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |                   ^^^^^^                              - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+   |                   |\n+   |                   the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5"}, {"sha": "07bf053e996658196f5c9bb3258b82d3219b0812", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,12 @@\n+trait Trait {\n+    fn baz(&self, _: Self) {}\n+    fn bat(&self) -> Self {}\n+}\n+\n+fn bar(x: &dyn Trait) {} //~ ERROR the trait `Trait` cannot be made into an object\n+\n+trait Other: Sized {}\n+\n+fn foo(x: &dyn Other) {} //~ ERROR the trait `Other` cannot be made into an object\n+\n+fn main() {}"}, {"sha": "c3cfad70bf43067ad9c4b15b2abbc38d950d465c", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,30 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-references-self.rs:6:11\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn baz(&self, _: Self) {}\n+   |                      ---- ...because method `baz` references the `Self` type in this parameter\n+LL |     fn bat(&self) -> Self {}\n+   |                      ---- ...because method `bat` references the `Self` type in its return type\n+...\n+LL | fn bar(x: &dyn Trait) {}\n+   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+   = help: consider moving `baz` to another trait\n+   = help: consider moving `bat` to another trait\n+\n+error[E0038]: the trait `Other` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-references-self.rs:10:11\n+   |\n+LL | trait Other: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+LL | \n+LL | fn foo(x: &dyn Other) {}\n+   |           ^^^^^^^^^^ the trait `Other` cannot be made into an object\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "75f99075eb18f9fe44abc3052e68920bfdc8503a", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,16 @@\n+#![allow(bare_trait_objects)]\n+trait A: Sized {\n+    fn f(a: A) -> A;\n+    //~^ ERROR associated item referring to unboxed trait object for its own trait\n+    //~| ERROR the trait `A` cannot be made into an object\n+}\n+trait B {\n+    fn f(a: B) -> B;\n+    //~^ ERROR associated item referring to unboxed trait object for its own trait\n+    //~| ERROR the trait `B` cannot be made into an object\n+}\n+trait C {\n+    fn f(&self, a: C) -> C;\n+}\n+\n+fn main() {}"}, {"sha": "58be59602b9c54a94b3e21760bdabaeec6713270", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,54 @@\n+error: associated item referring to unboxed trait object for its own trait\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n+   |\n+LL | trait A: Sized {\n+   |       - in this trait\n+LL |     fn f(a: A) -> A;\n+   |             ^     ^\n+   |\n+help: you might have meant to use `Self` to refer to the implementing type\n+   |\n+LL |     fn f(a: Self) -> Self;\n+   |             ^^^^     ^^^^\n+\n+error[E0038]: the trait `A` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n+   |\n+LL | trait A: Sized {\n+   |       -  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+LL |     fn f(a: A) -> A;\n+   |             ^ the trait `A` cannot be made into an object\n+\n+error: associated item referring to unboxed trait object for its own trait\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n+   |\n+LL | trait B {\n+   |       - in this trait\n+LL |     fn f(a: B) -> B;\n+   |             ^     ^\n+   |\n+help: you might have meant to use `Self` to refer to the implementing type\n+   |\n+LL |     fn f(a: Self) -> Self;\n+   |             ^^^^     ^^^^\n+\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n+   |\n+LL | trait B {\n+   |       - this trait cannot be made into an object...\n+LL |     fn f(a: B) -> B;\n+   |        -    ^ the trait `B` cannot be made into an object\n+   |        |\n+   |        ...because associated function `f` has no `self` parameter\n+   |\n+help: consider turning `f` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn f(a: B) -> B where Self: Sized;\n+   |                     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "c4b8960b65e4adc9456bd7cf33d3e15a45ee6244", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n+\n+trait Trait {\n+    fn foo() where Self: Other, Self: Sized, { }\n+    fn bar(self: &Self) {} //~ ERROR invalid `self` parameter type\n+}\n+\n+fn bar(x: &dyn Trait) {} //~ ERROR the trait `Trait` cannot be made into an object\n+\n+trait Other {}\n+\n+fn main() {}"}, {"sha": "38d9aea16ebf6293529e67152304218320ec4d28", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n+\n+trait Trait {\n+    fn foo() where Self: Other, { }\n+    fn bar(self: ()) {} //~ ERROR invalid `self` parameter type\n+}\n+\n+fn bar(x: &dyn Trait) {} //~ ERROR the trait `Trait` cannot be made into an object\n+\n+trait Other {}\n+\n+fn main() {}"}, {"sha": "6466a768ecbe9096004cdda89cc47196ec8817b4", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -0,0 +1,35 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:9:11\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn foo() where Self: Other, { }\n+   |        --- ...because associated function `foo` has no `self` parameter\n+LL |     fn bar(self: ()) {}\n+   |                  -- ...because method `bar`'s `self` parameter cannot be dispatched on\n+...\n+LL | fn bar(x: &dyn Trait) {}\n+   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Other, Self: Sized, { }\n+   |                               ^^^^^^^^^^^^^\n+help: consider changing method `bar`'s `self` parameter to be `&self`\n+   |\n+LL |     fn bar(self: &Self) {}\n+   |                  ^^^^^\n+\n+error[E0307]: invalid `self` parameter type: ()\n+  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:6:18\n+   |\n+LL |     fn bar(self: ()) {}\n+   |                  ^^\n+   |\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0038, E0307.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "3be8db8663ab713ed473b4c1a527fbac93f19001", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #![feature(trait_alias)]\n \n trait EqAlias = Eq;"}, {"sha": "21818097bd6a0c0e0a644350e4cf8036f75b0d47", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n-  --> $DIR/trait-alias-object-fail.rs:7:13\n+  --> $DIR/trait-alias-object-fail.rs:12:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n    |             ^^^^^^^^^^^ the trait `std::cmp::Eq` cannot be made into an object\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n    |\n-   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+LL | pub trait Eq: PartialEq<Self> {\n+   |               --------------- the trait cannot be made into an object because it uses `Self` as a type parameter in this\n \n error[E0191]: the value of the associated type `Item` (from trait `std::iter::Iterator`) must be specified\n-  --> $DIR/trait-alias-object-fail.rs:9:17\n+  --> $DIR/trait-alias-object-fail.rs:14:17\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n    |                 ^^^^^^^^^^^^^ help: specify the associated type: `IteratorAlias<Item = Type>`"}, {"sha": "b71c0d719ff3fb11f41c89c118c6d742afd45d89", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,13 +1,12 @@\n error[E0277]: the trait bound `T: Foo` is not satisfied\n-  --> $DIR/trait-alias-wf.rs:5:1\n+  --> $DIR/trait-alias-wf.rs:5:14\n    |\n LL | trait A<T: Foo> {}\n    | --------------- required by `A`\n LL | trait B<T> = A<T>;\n-   | ^^^^^^^^-^^^^^^^^^\n-   | |       |\n-   | |       help: consider restricting this bound: `T: Foo`\n-   | the trait `Foo` is not implemented for `T`\n+   |         -    ^^^^ the trait `Foo` is not implemented for `T`\n+   |         |\n+   |         help: consider restricting this bound: `T: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "a2253021a7f1fc9aa5593ac948203c415467fa47", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,20 +1,20 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:15\n    |\n LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n LL | fn explode(x: Foo<u32>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u32`\n+   |               ^^^^^^^^ the trait `Trait` is not implemented for `u32`\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:14\n    |\n LL | enum Bar<T:Trait> {\n    | ----------------- required by `Bar`\n ...\n LL | fn kaboom(y: Bar<f32>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `f32`\n+   |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c5a7746afdfdb802e32396a7a12997b3a2bb1aa2", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `usize: trait_bounds_on_structs_and_enums_xc::Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:7:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:7:15\n    |\n LL | fn explode(x: Foo<usize>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `usize`\n+   |               ^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `usize`\n    |\n    = note: required by `trait_bounds_on_structs_and_enums_xc::Foo`\n \n error[E0277]: the trait bound `f32: trait_bounds_on_structs_and_enums_xc::Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:10:1\n+  --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:10:14\n    |\n LL | fn kaboom(y: Bar<f32>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `f32`\n+   |              ^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `f32`\n    |\n    = note: required by `trait_bounds_on_structs_and_enums_xc::Bar`\n "}, {"sha": "072328ab50c7068283ac0809d6e7c4c1f55bef78", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -111,16 +111,22 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n LL |         const A: u8 = 0;\n-   |               - the trait cannot contain associated consts like `A`\n+   |               - ...because it contains this associated `const`\n ...\n LL |         const B: u8 = 0;\n-   |               - the trait cannot contain associated consts like `B`\n+   |               - ...because it contains this associated `const`\n ...\n+LL |     pub trait C: A + B {\n+   |               - this trait cannot be made into an object...\n LL |         const C: u8 = 0;\n-   |               - the trait cannot contain associated consts like `C`\n+   |               - ...because it contains this associated `const`\n ...\n LL |     C::A;\n    |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n+   |\n+   = help: consider moving `C` to another trait\n+   = help: consider moving `B` to another trait\n+   = help: consider moving `A` to another trait\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "a8511f63c16a5ac9d1e88519cc2b397a926b6eac", "filename": "src/test/ui/traits/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -10,7 +10,7 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n LL |     m!(dyn Copy + Send + 'static);\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n+   = note: the trait cannot be made into an object because it requires `Self: Sized`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "162e9249b880efe953bd468103af16a2affbedbe", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,23 +1,36 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL | trait Tr {\n+   |       -- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n    = note: required by cast to type `&dyn Tr`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL | trait Tr {\n+   |       -- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- associated function `foo` has no `self` parameter\n+   |        --- ...because associated function `foo` has no `self` parameter\n ...\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n+   |\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9680d58b8c0c71869bc685fd7190251eab30b85c", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/trait-suggest-where-clause.rs:11:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+   |                       - this type parameter needs to be `std::marker::Sized`\n LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n@@ -19,7 +19,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/trait-suggest-where-clause.rs:14:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+   |                       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "9d1eef547568eb547b2e896b4a1e8874f4f55583", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -14,24 +14,31 @@ error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |                ---                    ---- method `blah` has generic type parameters\n-   |                |\n-   |                method `dup` references the `Self` type in its parameters or return type\n+   |       ---                    ----     ---- ...because method `blah` has generic type parameters\n+   |       |                      |\n+   |       |                      ...because method `dup` references the `Self` type in its return type\n+   |       this trait cannot be made into an object...\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n+   |\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |                ---                    ---- method `blah` has generic type parameters\n-   |                |\n-   |                method `dup` references the `Self` type in its parameters or return type\n+   |       ---                    ----     ---- ...because method `blah` has generic type parameters\n+   |       |                      |\n+   |       |                      ...because method `dup` references the `Self` type in its return type\n+   |       this trait cannot be made into an object...\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n    = note: required by cast to type `std::boxed::Box<dyn bar>`\n "}, {"sha": "08b26b8fc1307de927f4d60bccb3e2675ce23791", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,10 +1,8 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:7:1\n+  --> $DIR/generic_duplicate_lifetime_param.rs:7:26\n    |\n-LL | / fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n-LL | |     t\n-LL | | }\n-   | |_^\n+LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n+   |                          ^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n   --> $DIR/generic_duplicate_lifetime_param.rs:5:10"}, {"sha": "e5d2ebda318585bda22665f33cd0e17e6aec3cae", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -47,15 +47,14 @@ LL | trait TraitBound<T:Copy=String> {}\n    | required by `TraitBound`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:21:1\n+  --> $DIR/type-check-defaults.rs:21:25\n    |\n LL | trait Super<T: Copy> { }\n    | -------------------- required by `Super`\n LL | trait Base<T = String>: Super<T> { }\n-   | ^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |          |\n-   | |          help: consider restricting this bound: `T: std::marker::Copy`\n-   | the trait `std::marker::Copy` is not implemented for `T`\n+   |            -            ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |            |\n+   |            help: consider restricting this bound: `T: std::marker::Copy`\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "5493a4e5f10a817d4f0eb924537a44ef8e6b2193", "filename": "src/test/ui/type/type-check/issue-40294.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,8 +2,8 @@ trait Foo: Sized {\n     fn foo(self);\n }\n \n-fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations needed\n-    where &'a T : Foo,\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+    where &'a T : Foo, //~ ERROR type annotations needed\n           &'b T : Foo\n {\n     x.foo();"}, {"sha": "2c889b6c2ca0ae97320a2302fe6729c1181f3675", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,17 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-40294.rs:5:1\n+  --> $DIR/issue-40294.rs:6:19\n    |\n-LL |   trait Foo: Sized {\n-   |   ---------------- required by `Foo`\n+LL | trait Foo: Sized {\n+   | ---------------- required by `Foo`\n ...\n-LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-LL | |     where &'a T : Foo,\n-LL | |           &'b T : Foo\n-LL | | {\n-LL | |     x.foo();\n-LL | |     y.foo();\n-LL | | }\n-   | |_^ cannot infer type for reference `&'a T`\n+LL |     where &'a T : Foo,\n+   |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "539189982a8d7e8ec6b3dbb2f4d5196c4d6e01bd", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -14,10 +14,14 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n-   |                            --- method `add` references the `Self` type in its parameters or return type\n+   |       -----                                           ---- ...because method `add` references the `Self` type in its return type\n+   |       |\n+   |       this trait cannot be made into an object...\n ...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n+   |\n+   = help: consider moving `add` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62dacd064bed0b63ee047bdc105bbc4faeaa1d3b", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:4:5\n    |\n LL | union Foo<T: ?Sized> {\n-   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:9:5\n    |\n LL | struct Foo2<T: ?Sized> {\n-   |             -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |             - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -26,7 +26,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:15:11\n    |\n LL | enum Foo3<T: ?Sized> {\n-   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |"}, {"sha": "4cd2098eef256c651aade2aa6957afc67547ffc1", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,6 +1,9 @@\n error: the `foo` method cannot be invoked on a trait object\n   --> $DIR/by-value-trait-object-safety.rs:18:7\n    |\n+LL |     fn foo(self) -> String where Self: Sized;\n+   |                                        ----- this has a `Sized` requirement\n+...\n LL |     x.foo();\n    |       ^^^\n "}, {"sha": "772de23e64cf05a1184107afcf61053d4c0726a2", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -4,9 +4,9 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar<T: Sized>() { }\n    |    --- - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n-   |        --                   ^ doesn't have a size known at compile-time\n+   |        -                    ^ doesn't have a size known at compile-time\n    |        |\n-   |        help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |        this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "88f7b1f77aee011e6ef5dfc2ff07c77d3171c289", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -5,9 +5,9 @@ LL | enum Foo<U> { FooSome(U), FooNone }\n    | ----------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "bc3b3831f32699ed06c2fe6699b99150a2805ede", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `W` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |        -- help: consider further restricting this bound: `W: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n@@ -15,7 +15,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:25:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                   -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |                   - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                              -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+   |                              - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n@@ -41,7 +41,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:29:18\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                                         -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+   |                                         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time"}, {"sha": "5688ae5b89a0409559d0a6d41191188f523f3a36", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -5,9 +5,9 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> S5<X> {\n-   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "653fb5c1ae8dca6431058ae548e2d8c2fb85c8d3", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -5,9 +5,9 @@ LL | struct Foo<T> { data: T }\n    | ------------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -19,9 +19,9 @@ LL | fn is_sized<T:Sized>() { }\n    |    -------- - required by this bound in `is_sized`\n ...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-   |         --             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "3597073e7e6c632ef62a0c0759f85a0e9f606b28", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -5,9 +5,9 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n-   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "b37d9f9d5369efbc3dc90c1fa0c4bf5312d09d2e", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n-   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "e97d00fc4741d998554bca7df9cdb65c4c6d12d1", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,12 +2,14 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:7:13\n    |\n LL | fn f1<X: ?Sized>(x: &X) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   |    -- - required by this bound in `f2`\n+   |    -- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n+   |       |\n+   |       required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -16,12 +18,14 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:18:13\n    |\n LL | fn f3<X: ?Sized + T>(x: &X) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   |    -- - required by this bound in `f4`\n+   |    -- -   - help: consider relaxing the implicit `Sized` restriction: `+  ?Sized`\n+   |       |\n+   |       required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -33,7 +37,7 @@ LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n@@ -45,7 +49,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:40:8\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -58,7 +62,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:9\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -75,7 +79,7 @@ LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "de4da309791c0d5a928e510f27c52292476c571f", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:4:5\n    |\n LL | struct S1<X: ?Sized> {\n-   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     f1: X,\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:10:5\n    |\n LL | struct S2<X: ?Sized> {\n-   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     f: isize,\n LL |     g: X,\n    |     ^^^^ doesn't have a size known at compile-time\n@@ -47,7 +47,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:25:8\n    |\n LL | enum E<X: ?Sized> {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n@@ -59,7 +59,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:29:8\n    |\n LL | enum F<X: ?Sized> {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     V2{f1: X, f: isize},\n    |        ^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "337afd2ee7e100ca38470b61b3a528cacf91c50b", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:9:9\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                             -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+   |                             - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:7:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                  -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |                  - this type parameter needs to be `std::marker::Sized`\n LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -29,7 +29,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:11:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                                        -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+   |                                        - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -42,7 +42,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:15:9\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -55,7 +55,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:17:12\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |                  -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+   |                  - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -68,7 +68,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:22:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -81,7 +81,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:24:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -95,7 +95,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:26:10\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -109,7 +109,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:30:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -122,7 +122,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:32:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -136,7 +136,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:34:10\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -150,9 +150,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:38:18\n    |\n LL | fn g1<X: ?Sized>(x: X) {}\n-   |       --         ^ doesn't have a size known at compile-time\n+   |       -          ^ doesn't have a size known at compile-time\n    |       |\n-   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -163,9 +163,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:40:22\n    |\n LL | fn g2<X: ?Sized + T>(x: X) {}\n-   |       --             ^ doesn't have a size known at compile-time\n+   |       -              ^ doesn't have a size known at compile-time\n    |       |\n-   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "0f71c5f6f8fe6e1a1627c100767b2cd67bc460ee", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized7.rs:12:21\n    |\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n-   |      --             ^^^^^ doesn't have a size known at compile-time\n+   |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "eefb450155cdbb9f4c4f3e0b226211e4ee60c126", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,30 +1,42 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:16:33\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let t_box: Box<dyn Trait> = Box::new(S);\n    |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n    = note: required by cast to type `std::boxed::Box<dyn Trait>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     takes_box(Box::new(S));\n    |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n    = note: required by cast to type `std::boxed::Box<(dyn Trait + 'static)>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     Box::new(S) as Box<dyn Trait>;\n    |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Trait>>` for `std::boxed::Box<S>`\n    = note: required by cast to type `std::boxed::Box<dyn Trait>`\n "}, {"sha": "5e645382d1b21414e7e9eaad2ed7b9898a97f4f3", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,30 +1,42 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:16:25\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let t: &dyn Trait = &S;\n    |                         ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     takes_trait(&S);\n    |                 ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     &S as &dyn Trait;\n    |     ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n "}, {"sha": "042a2cb09d27b2a3cd980f8f53d60e2f3da73469", "filename": "src/test/ui/wf/wf-enum-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-enum SomeEnum<T,U> //~ ERROR E0277\n-    where T: ExtraCopy<U>\n+enum SomeEnum<T,U>\n+    where T: ExtraCopy<U> //~ ERROR E0277\n {\n     SomeVariant(T,U)\n }"}, {"sha": "0d22d18bf6fd9e6fecb3d1deaf3005adce228064", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-enum-bound.rs:9:1\n+  --> $DIR/wf-enum-bound.rs:10:14\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n-LL | \n-LL | / enum SomeEnum<T,U>\n-LL | |     where T: ExtraCopy<U>\n-   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | |     SomeVariant(T,U)\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n+...\n+LL |     where T: ExtraCopy<U>\n+   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "1c530ece29580731ad0a413ad04804f71768624e", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,34 +1,31 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-fn-where-clause.rs:8:1\n+  --> $DIR/wf-fn-where-clause.rs:8:24\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n LL | \n-LL |   fn foo<T,U>() where T: ExtraCopy<U>\n-   |   ^                                  - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | fn foo<T,U>() where T: ExtraCopy<U>\n+   |                        ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |                        |\n+   |                        the trait `std::marker::Copy` is not implemented for `U`\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n-  --> $DIR/wf-fn-where-clause.rs:12:1\n+  --> $DIR/wf-fn-where-clause.rs:12:16\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n-  --> $DIR/wf-fn-where-clause.rs:12:1\n+  --> $DIR/wf-fn-where-clause.rs:12:16\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n+   |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n+   = note: the trait cannot be made into an object because it requires `Self: Sized`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b8e88de54c2f191d94c2dba256f487a0d34630d5", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-arg.rs:10:1\n+  --> $DIR/wf-in-fn-arg.rs:10:14\n    |\n-LL |   struct MustBeCopy<T:Copy> {\n-   |   ------------------------- required by `MustBeCopy`\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n ...\n-LL |   fn bar<T>(_: &MustBeCopy<T>)\n-   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | fn bar<T>(_: &MustBeCopy<T>)\n+   |        -     ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        |\n+   |        help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "6ca1626d3aef57997e232a60ccf2768cf3c658f8", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-ret.rs:10:1\n+  --> $DIR/wf-in-fn-ret.rs:10:16\n    |\n-LL |   struct MustBeCopy<T:Copy> {\n-   |   ------------------------- required by `MustBeCopy`\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n ...\n-LL |   fn bar<T>() -> MustBeCopy<T>\n-   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | fn bar<T>() -> MustBeCopy<T>\n+   |        -       ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        |\n+   |        help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "e55295a3b25785762186abf32bb22c7aa3638d62", "filename": "src/test/ui/wf/wf-in-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -6,8 +6,8 @@\n trait MustBeCopy<T:Copy> {\n }\n \n-fn bar<T,U>() //~ ERROR E0277\n-    where T: MustBeCopy<U>\n+fn bar<T,U>()\n+    where T: MustBeCopy<U> //~ ERROR E0277\n {\n }\n "}, {"sha": "495041b7dadf8ba5ea5124e1cbc1a4c5bc5bbe4d", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-where-clause.rs:9:1\n+  --> $DIR/wf-in-fn-where-clause.rs:10:14\n    |\n-LL |   trait MustBeCopy<T:Copy> {\n-   |   ------------------------ required by `MustBeCopy`\n+LL | trait MustBeCopy<T:Copy> {\n+   | ------------------------ required by `MustBeCopy`\n ...\n-LL | / fn bar<T,U>()\n-LL | |     where T: MustBeCopy<U>\n-   | |                           - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL |     where T: MustBeCopy<U>\n+   |              ^^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "e9c1c8ddaf64033140c69c64ba152cd12643b742", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-inherent-impl-method-where-clause.rs:12:5\n+  --> $DIR/wf-inherent-impl-method-where-clause.rs:12:27\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n ...\n-LL |   impl<T,U> Foo<T,U> {\n-   |          - help: consider restricting this bound: `U: std::marker::Copy`\n-LL | /     fn foo(self) where T: ExtraCopy<U>\n-LL | |     {}\n-   | |______^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | impl<T,U> Foo<T,U> {\n+   |        - help: consider restricting this bound: `U: std::marker::Copy`\n+LL |     fn foo(self) where T: ExtraCopy<U>\n+   |                           ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "a4e6dce39cdcd459a29e4784fc1a00020b991292", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-inherent-impl-where-clause.rs:11:1\n+  --> $DIR/wf-inherent-impl-where-clause.rs:11:29\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n ...\n-LL |   impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n-   |   ^                                       - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+   |                             ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |                             |\n+   |                             the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "8935d766354fe8d8d46dfa4e820c2532df7659e7", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,11 +1,15 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n+LL | trait A {\n+   |       - this trait cannot be made into an object...\n LL |     fn foo(&self, _x: &Self);\n-   |        --- method `foo` references the `Self` type in its parameters or return type\n+   |                       ----- ...because method `foo` references the `Self` type in this parameter\n ...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "6e558ca8ff0b0ce6eb98eb10a873d5ad6ec3a358", "filename": "src/test/ui/wf/wf-struct-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-struct SomeStruct<T,U> //~ ERROR E0277\n-    where T: ExtraCopy<U>\n+struct SomeStruct<T,U>\n+    where T: ExtraCopy<U> //~ ERROR E0277\n {\n     data: (T,U)\n }"}, {"sha": "3f4047d9b5609066aba0f4407a093bd06308fa06", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-struct-bound.rs:9:1\n+  --> $DIR/wf-struct-bound.rs:10:14\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n-LL | \n-LL | / struct SomeStruct<T,U>\n-LL | |     where T: ExtraCopy<U>\n-   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | |     data: (T,U)\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n+...\n+LL |     where T: ExtraCopy<U>\n+   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "2f20e65e5021adcf7b9d3280ed18bd61b4c30b29", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-trait SomeTrait<T> { //~ ERROR E0277\n-    type Type1: ExtraCopy<T>;\n+trait SomeTrait<T> {\n+    type Type1: ExtraCopy<T>; //~ ERROR E0277\n }\n \n "}, {"sha": "3370cfc86939dd19014a14f16c78964ab9f44f2d", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-trait-associated-type-bound.rs:9:1\n+  --> $DIR/wf-trait-associated-type-bound.rs:10:17\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n LL | \n-LL |   trait SomeTrait<T> {\n-   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | |     type Type1: ExtraCopy<T>;\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | trait SomeTrait<T> {\n+   |                 - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     type Type1: ExtraCopy<T>;\n+   |                 ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n \n error: aborting due to previous error\n "}, {"sha": "62a1eb5b08864988306144a6ac908c0efdc0c77b", "filename": "src/test/ui/wf/wf-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-trait SomeTrait<T,U> //~ ERROR E0277\n-    where T: ExtraCopy<U>\n+trait SomeTrait<T,U>\n+    where T: ExtraCopy<U> //~ ERROR E0277\n {\n }\n "}, {"sha": "87c33714ff879c052e7a57435f9821a0fd593ae2", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-trait-bound.rs:9:1\n+  --> $DIR/wf-trait-bound.rs:10:14\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n-LL | \n-LL | / trait SomeTrait<T,U>\n-LL | |     where T: ExtraCopy<U>\n-   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n+...\n+LL |     where T: ExtraCopy<U>\n+   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "6a97d31cf3e653b4d6f908726597c773c0514a5c", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,18 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-arg.rs:11:5\n+  --> $DIR/wf-trait-default-fn-arg.rs:11:22\n    |\n-LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |   ----------------------- required by `Bar`\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n ...\n-LL |       fn bar(&self, x: &Bar<Self>) {\n-   |       ^                           - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |         //\n-LL | |         // Here, Eq ought to be implemented.\n-LL | |     }\n-   | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n+LL |     fn bar(&self, x: &Bar<Self>) {\n+   |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "36c1e486269f6f70c96a4a9659a8de941065aaf6", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,19 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-ret.rs:11:5\n+  --> $DIR/wf-trait-default-fn-ret.rs:11:22\n    |\n-LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |   ----------------------- required by `Bar`\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n ...\n-LL |       fn bar(&self) -> Bar<Self> {\n-   |       ^                         - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |         //\n-LL | |         // Here, Eq ought to be implemented.\n-LL | |         loop { }\n-LL | |     }\n-   | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n+LL |     fn bar(&self) -> Bar<Self> {\n+   |                      ^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "6b63feaba89a3c58c8c0b06c4575d745c8d295dd", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,18 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-where-clause.rs:11:5\n+  --> $DIR/wf-trait-default-fn-where-clause.rs:11:31\n    |\n-LL |   trait Bar<T:Eq+?Sized> { }\n-   |   ---------------------- required by `Bar`\n+LL | trait Bar<T:Eq+?Sized> { }\n+   | ---------------------- required by `Bar`\n ...\n-LL |       fn bar<A>(&self) where A: Bar<Self> {\n-   |       ^                                  - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |  _____|\n-   | |\n-LL | |\n-LL | |         //\n-LL | |         // Here, Eq ought to be implemented.\n-LL | |     }\n-   | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n+LL |     fn bar<A>(&self) where A: Bar<Self> {\n+   |                               ^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |                               |\n+   |                               the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "69e2ab72912d4baaa279768c1b1f3bce93208f79", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-arg.rs:10:5\n+  --> $DIR/wf-trait-fn-arg.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                           |\n-   |     |                           help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |     the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "bfc6265662e48eee4c9ea1cda39bb10b759c628f", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-ret.rs:10:5\n+  --> $DIR/wf-trait-fn-ret.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                          |\n-   |     |                          help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |     the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |                      |\n+   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "ec8f02c9c4feda7561a126255288ac063bbf48cf", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-where-clause.rs:10:5\n+  --> $DIR/wf-trait-fn-where-clause.rs:10:49\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                                               |\n-   |     |                                               help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |     the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                                                 ^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |                                                 |\n+   |                                                 the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "9ea9d046b260265b97186ce592497fe0bcab5a23", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-trait-superbound.rs:9:1\n+  --> $DIR/wf-trait-superbound.rs:9:21\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n LL | \n-LL |   trait SomeTrait<T>: ExtraCopy<T> {\n-   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | trait SomeTrait<T>: ExtraCopy<T> {\n+   |                 -   ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |                 |\n+   |                 help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "9319e3382c2d4f1e6c857ef55c5e24a489ce86e4", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0caef54a062b5e283cf15d1fad7027f631f29d/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=5b0caef54a062b5e283cf15d1fad7027f631f29d", "patch": "@@ -15,20 +15,28 @@ LL | |     }\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:26:21\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |         Some(()) => &S,\n    |                     ^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n+LL | trait Trait: Sized {}\n+   |       -----  ----- ...because it requires `Self: Sized`\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let t: &dyn Trait = match opt() {\n    |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Trait>` for `&R`\n    = note: required by cast to type `&dyn Trait`\n "}]}