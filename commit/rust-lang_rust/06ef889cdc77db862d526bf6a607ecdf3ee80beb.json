{"sha": "06ef889cdc77db862d526bf6a607ecdf3ee80beb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZWY4ODljZGM3N2RiODYyZDUyNmJmNmE2MDdlY2RmM2VlODBiZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T21:14:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-12T23:33:15Z"}, "message": "libsyntax: Remove `extern mod foo { ... }` from the language.", "tree": {"sha": "12ef3b970735baece127e674d7feb82bd6a5d9da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ef3b970735baece127e674d7feb82bd6a5d9da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ef889cdc77db862d526bf6a607ecdf3ee80beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ef889cdc77db862d526bf6a607ecdf3ee80beb", "html_url": "https://github.com/rust-lang/rust/commit/06ef889cdc77db862d526bf6a607ecdf3ee80beb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ef889cdc77db862d526bf6a607ecdf3ee80beb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830b945a9db072b68970b6f83dfafc1aaff8f837", "url": "https://api.github.com/repos/rust-lang/rust/commits/830b945a9db072b68970b6f83dfafc1aaff8f837", "html_url": "https://github.com/rust-lang/rust/commit/830b945a9db072b68970b6f83dfafc1aaff8f837"}], "stats": {"total": 306, "additions": 160, "deletions": 146}, "files": [{"sha": "2e580cab265d50c2b7f173e6f84a379c4f50399f", "filename": "doc/rust.md", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -618,7 +618,7 @@ each of which may have some number of [attributes](#attributes) attached to it.\n \n ~~~~~~~~ {.ebnf .gram}\n item : mod_item | fn_item | type_item | struct_item | enum_item\n-     | static_item | trait_item | impl_item | foreign_mod_item ;\n+     | static_item | trait_item | impl_item | extern_block ;\n ~~~~~~~~\n \n An _item_ is a component of a crate; some module items can be defined in crate\n@@ -752,10 +752,11 @@ link_attr : ident '=' literal ;\n ~~~~~~~~\n \n An _`extern mod` declaration_ specifies a dependency on an external crate.\n-The external crate is then bound into the declaring scope as the `ident` provided in the `extern_mod_decl`.\n+The external crate is then bound into the declaring scope\n+as the `ident` provided in the `extern_mod_decl`.\n \n-The external crate is resolved to a specific `soname` at compile time, and a\n-runtime linkage requirement to that `soname` is passed to the linker for\n+The external crate is resolved to a specific `soname` at compile time,\n+and a runtime linkage requirement to that `soname` is passed to the linker for\n loading at runtime. The `soname` is resolved at compile time by scanning the\n compiler's library path and matching the `link_attrs` provided in the\n `use_decl` against any `#link` attributes that were declared on the external\n@@ -992,10 +993,10 @@ Thus the return type on `f` only needs to reflect the `if` branch of the conditi\n #### Extern functions\n \n Extern functions are part of Rust's foreign function interface,\n-providing the opposite functionality to [foreign modules](#foreign-modules).\n-Whereas foreign modules allow Rust code to call foreign code,\n-extern functions with bodies defined in Rust code _can be called by foreign code_.\n-They are defined in the same way as any other Rust function,\n+providing the opposite functionality to [external blocks](#external-blocks).\n+Whereas external blocks allow Rust code to call foreign code,\n+extern functions with bodies defined in Rust code _can be called by foreign\n+code_. They are defined in the same way as any other Rust function,\n except that they have the `extern` modifier.\n \n ~~~\n@@ -1011,7 +1012,8 @@ let fptr: *u8 = new_vec;\n ~~~\n \n The primary motivation for extern functions is\n-to create callbacks for foreign functions that expect to receive function pointers.\n+to create callbacks for foreign functions that expect to receive function\n+pointers.\n \n ### Type definitions\n \n@@ -1308,64 +1310,61 @@ impl Seq<bool> for u32 {\n }\n ~~~~\n \n-### Foreign modules\n+### External blocks\n \n ~~~ {.ebnf .gram}\n-foreign_mod_item : \"extern mod\" ident '{' foreign_mod '} ;\n-foreign_mod : [ foreign_fn ] * ;\n+extern_block_item : \"extern\" '{' extern_block '} ;\n+extern_block : [ foreign_fn ] * ;\n ~~~\n \n-Foreign modules form the basis for Rust's foreign function interface. A\n-foreign module describes functions in external, non-Rust\n-libraries.\n-Functions within foreign modules are declared in the same way as other Rust functions,\n-with the exception that they may not have a body and are instead terminated by a semicolon.\n+External blocks form the basis for Rust's foreign function interface.\n+Declarations in an external block describe symbols\n+in external, non-Rust libraries.\n+\n+Functions within external blocks\n+are declared in the same way as other Rust functions,\n+with the exception that they may not have a body\n+and are instead terminated by a semicolon.\n \n ~~~\n # use core::libc::{c_char, FILE};\n # #[nolink]\n \n-extern mod c {\n+extern {\n     fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n }\n ~~~\n \n-Functions within foreign modules may be called by Rust code, just like functions defined in Rust.\n-The Rust compiler automatically translates between the Rust ABI and the foreign ABI.\n-\n-The name of the foreign module has special meaning to the Rust compiler in\n-that it will treat the module name as the name of a library to link to,\n-performing the linking as appropriate for the target platform. The name\n-given for the foreign module will be transformed in a platform-specific way\n-to determine the name of the library. For example, on Linux the name of the\n-foreign module is prefixed with 'lib' and suffixed with '.so', so the\n-foreign mod 'rustrt' would be linked to a library named 'librustrt.so'.\n+Functions within external blocks may be called by Rust code,\n+just like functions defined in Rust.\n+The Rust compiler automatically translates\n+between the Rust ABI and the foreign ABI.\n \n-A number of [attributes](#attributes) control the behavior of foreign\n-modules.\n+A number of [attributes](#attributes) control the behavior of external\n+blocks.\n \n-By default foreign modules assume that the library they are calling use the\n-standard C \"cdecl\" ABI. Other ABIs may be specified using the `abi`\n-attribute as in\n+By default external blocks assume\n+that the library they are calling uses the standard C \"cdecl\" ABI.\n+Other ABIs may be specified using the `abi` attribute as in\n \n ~~~{.xfail-test}\n // Interface to the Windows API\n #[abi = \"stdcall\"]\n-extern mod kernel32 { }\n+extern { }\n ~~~\n \n-The `link_name` attribute allows the default library naming behavior to\n-be overridden by explicitly specifying the name of the library.\n+The `link_name` attribute allows the name of the library to be specified.\n \n ~~~{.xfail-test}\n #[link_name = \"crypto\"]\n-extern mod mycrypto { }\n+extern { }\n ~~~\n \n-The `nolink` attribute tells the Rust compiler not to do any linking for the foreign module.\n-This is particularly useful for creating foreign\n-modules for libc, which tends to not follow standard library naming\n-conventions and is linked to all Rust programs anyway.\n+The `nolink` attribute tells the Rust compiler\n+not to do any linking for the external block.\n+This is particularly useful for creating external blocks for libc,\n+which tends to not follow standard library naming conventions\n+and is linked to all Rust programs anyway.\n \n ## Attributes\n "}, {"sha": "b2c2a8824eee6b5b884882872c6d90d6e70b6d4f", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -237,7 +237,8 @@ convention to use:\n ~~~~\n #[cfg(target_os = \"win32\")]\n #[abi = \"stdcall\"]\n-extern mod kernel32 {\n+#[link_name = \"kernel32\"]\n+extern {\n     fn SetEnvironmentVariableA(n: *u8, v: *u8) -> int;\n }\n ~~~~"}, {"sha": "d983377245c4eedd949dd83249d28a712c9f5a39", "filename": "src/libcore/os.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -196,10 +196,10 @@ pub fn env() -> ~[(~str,~str)] {\n         }\n         #[cfg(unix)]\n         unsafe fn get_env_pairs() -> ~[~str] {\n-            extern mod rustrt {\n+            extern {\n                 unsafe fn rust_env_pairs() -> **libc::c_char;\n             }\n-            let environ = rustrt::rust_env_pairs();\n+            let environ = rust_env_pairs();\n             if (environ as uint == 0) {\n                 fail!(fmt!(\"os::env() failure getting env string from OS: %s\",\n                            os::last_os_error()));\n@@ -685,9 +685,8 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n         unsafe fn get_list(p: &Path) -> ~[~str] {\n             use libc::{dirent_t};\n             use libc::{opendir, readdir, closedir};\n-            extern mod rustrt {\n-                unsafe fn rust_list_dir_val(ptr: *dirent_t)\n-                    -> *libc::c_char;\n+            extern {\n+                unsafe fn rust_list_dir_val(ptr: *dirent_t) -> *libc::c_char;\n             }\n             let input = p.to_str();\n             let mut strings = ~[];\n@@ -698,10 +697,8 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n         debug!(\"os::list_dir -- opendir() SUCCESS\");\n                 let mut entry_ptr = readdir(dir_ptr);\n                 while (entry_ptr as uint != 0) {\n-                    strings.push(\n-                        str::raw::from_c_str(\n-                            rustrt::rust_list_dir_val(\n-                                entry_ptr)));\n+                    strings.push(str::raw::from_c_str(rust_list_dir_val(\n+                        entry_ptr)));\n                     entry_ptr = readdir(dir_ptr);\n                 }\n                 closedir(dir_ptr);\n@@ -729,25 +726,23 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             };\n             use unstable::exchange_alloc::{malloc_raw, free_raw};\n             #[nolink]\n-            extern mod rustrt {\n+            extern {\n                 unsafe fn rust_list_dir_wfd_size() -> libc::size_t;\n                 unsafe fn rust_list_dir_wfd_fp_buf(wfd: *libc::c_void)\n                     -> *u16;\n             }\n             fn star(p: &Path) -> Path { p.push(\"*\") }\n             do as_utf16_p(star(p).to_str()) |path_ptr| {\n                 let mut strings = ~[];\n-                let wfd_ptr = malloc_raw(\n-                    rustrt::rust_list_dir_wfd_size() as uint);\n+                let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint);\n                 let find_handle =\n                     FindFirstFileW(\n                         path_ptr,\n                         ::cast::transmute(wfd_ptr));\n                 if find_handle as int != INVALID_HANDLE_VALUE {\n                     let mut more_files = 1 as libc::c_int;\n                     while more_files != 0 {\n-                        let fp_buf = rustrt::rust_list_dir_wfd_fp_buf(\n-                            wfd_ptr);\n+                        let fp_buf = rust_list_dir_wfd_fp_buf(wfd_ptr);\n                         if fp_buf as uint == 0 {\n                             fail!(~\"os::list_dir() failure:\"+\n                                   ~\" got null ptr from wfd\");"}, {"sha": "5b3f3e6efa746ec423474e4640ddc44cf206e231", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -14,7 +14,7 @@ use core::old_iter::BaseIter;\n use core::util::{replace, swap};\n \n #[abi = \"rust-intrinsic\"]\n-extern \"rust-intrinsic\" mod rusti {\n+extern \"rust-intrinsic\" {\n     fn move_val_init<T>(dst: &mut T, src: T);\n     fn init<T>() -> T;\n     #[cfg(not(stage0))]\n@@ -154,13 +154,13 @@ pub impl <T:Ord> PriorityQueue<T> {\n                 let parent = (pos - 1) >> 1;\n                 if new > self.data[parent] {\n                     let x = replace(&mut self.data[parent], rusti::uninit());\n-                    rusti::move_val_init(&mut self.data[pos], x);\n+                    move_val_init(&mut self.data[pos], x);\n                     pos = parent;\n                     loop\n                 }\n                 break\n             }\n-            rusti::move_val_init(&mut self.data[pos], new);\n+            move_val_init(&mut self.data[pos], new);\n         }\n     }\n \n@@ -173,13 +173,13 @@ pub impl <T:Ord> PriorityQueue<T> {\n                 let parent = (pos - 1) >> 1;\n                 if new > self.data[parent] {\n                     let x = replace(&mut self.data[parent], rusti::init());\n-                    rusti::move_val_init(&mut self.data[pos], x);\n+                    move_val_init(&mut self.data[pos], x);\n                     pos = parent;\n                     loop\n                 }\n                 break\n             }\n-            rusti::move_val_init(&mut self.data[pos], new);\n+            move_val_init(&mut self.data[pos], new);\n         }\n     }\n \n@@ -197,12 +197,12 @@ pub impl <T:Ord> PriorityQueue<T> {\n                     child = right;\n                 }\n                 let x = replace(&mut self.data[child], rusti::uninit());\n-                rusti::move_val_init(&mut self.data[pos], x);\n+                move_val_init(&mut self.data[pos], x);\n                 pos = child;\n                 child = 2 * pos + 1;\n             }\n \n-            rusti::move_val_init(&mut self.data[pos], new);\n+            move_val_init(&mut self.data[pos], new);\n             self.siftup(start, pos);\n         }\n     }\n@@ -220,12 +220,12 @@ pub impl <T:Ord> PriorityQueue<T> {\n                     child = right;\n                 }\n                 let x = replace(&mut self.data[child], rusti::init());\n-                rusti::move_val_init(&mut self.data[pos], x);\n+                move_val_init(&mut self.data[pos], x);\n                 pos = child;\n                 child = 2 * pos + 1;\n             }\n \n-            rusti::move_val_init(&mut self.data[pos], new);\n+            move_val_init(&mut self.data[pos], new);\n             self.siftup(start, pos);\n         }\n     }"}, {"sha": "8cf2da3a1e83275a53194a283337df5255efa4e6", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -110,6 +110,13 @@ mod test_rc {\n     }\n }\n \n+#[abi = \"rust-intrinsic\"]\n+extern \"rust-intrinsic\" {\n+    fn init<T>() -> T;\n+    #[cfg(not(stage0))]\n+    fn uninit<T>() -> T;\n+}\n+\n #[deriving(Eq)]\n enum Borrow {\n     Mutable,\n@@ -171,7 +178,7 @@ impl<T: Owned> Drop for RcMut<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                util::replace_ptr(self.ptr, intrinsics::uninit());\n+                util::replace_ptr(self.ptr, uninit());\n                 free(self.ptr as *c_void)\n             }\n         }\n@@ -185,7 +192,7 @@ impl<T: Owned> Drop for RcMut<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                util::replace_ptr(self.ptr, intrinsics::init());\n+                util::replace_ptr(self.ptr, init());\n                 free(self.ptr as *c_void)\n             }\n         }"}, {"sha": "a14c048b8ded514ea16da3ec63b9f40aa03f100d", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 70, "deletions": 71, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -730,8 +730,7 @@ pub mod uv_ll_struct_stubgen {\n }\n \n #[nolink]\n-extern mod rustrt {\n-\n+extern {\n     // libuv public API\n     unsafe fn rust_uv_loop_new() -> *libc::c_void;\n     unsafe fn rust_uv_loop_delete(lp: *libc::c_void);\n@@ -884,57 +883,57 @@ extern mod rustrt {\n }\n \n pub unsafe fn loop_new() -> *libc::c_void {\n-    return rustrt::rust_uv_loop_new();\n+    return rust_uv_loop_new();\n }\n \n pub unsafe fn loop_delete(loop_handle: *libc::c_void) {\n-    rustrt::rust_uv_loop_delete(loop_handle);\n+    rust_uv_loop_delete(loop_handle);\n }\n \n pub unsafe fn run(loop_handle: *libc::c_void) {\n-    rustrt::rust_uv_run(loop_handle);\n+    rust_uv_run(loop_handle);\n }\n \n pub unsafe fn close<T>(handle: *T, cb: *u8) {\n-    rustrt::rust_uv_close(handle as *libc::c_void, cb);\n+    rust_uv_close(handle as *libc::c_void, cb);\n }\n \n pub unsafe fn walk(loop_handle: *libc::c_void, cb: *u8, arg: *libc::c_void) {\n-    rustrt::rust_uv_walk(loop_handle, cb, arg);\n+    rust_uv_walk(loop_handle, cb, arg);\n }\n \n pub unsafe fn idle_new() -> *uv_idle_t {\n-    rustrt::rust_uv_idle_new()\n+    rust_uv_idle_new()\n }\n \n pub unsafe fn idle_delete(handle: *uv_idle_t) {\n-    rustrt::rust_uv_idle_delete(handle)\n+    rust_uv_idle_delete(handle)\n }\n \n pub unsafe fn idle_init(loop_handle: *uv_loop_t,\n                         handle: *uv_idle_t) -> libc::c_int {\n-    rustrt::rust_uv_idle_init(loop_handle, handle)\n+    rust_uv_idle_init(loop_handle, handle)\n }\n \n pub unsafe fn idle_start(handle: *uv_idle_t, cb: uv_idle_cb) -> libc::c_int {\n-    rustrt::rust_uv_idle_start(handle, cb)\n+    rust_uv_idle_start(handle, cb)\n }\n \n pub unsafe fn idle_stop(handle: *uv_idle_t) -> libc::c_int {\n-    rustrt::rust_uv_idle_stop(handle)\n+    rust_uv_idle_stop(handle)\n }\n \n pub unsafe fn tcp_init(loop_handle: *libc::c_void, handle: *uv_tcp_t)\n     -> libc::c_int {\n-    return rustrt::rust_uv_tcp_init(loop_handle, handle);\n+    return rust_uv_tcp_init(loop_handle, handle);\n }\n // FIXME ref #2064\n pub unsafe fn tcp_connect(connect_ptr: *uv_connect_t,\n                       tcp_handle_ptr: *uv_tcp_t,\n                       addr_ptr: *sockaddr_in,\n                       after_connect_cb: *u8)\n -> libc::c_int {\n-    return rustrt::rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr,\n+    return rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr,\n                                     after_connect_cb, addr_ptr);\n }\n // FIXME ref #2064\n@@ -943,98 +942,98 @@ pub unsafe fn tcp_connect6(connect_ptr: *uv_connect_t,\n                       addr_ptr: *sockaddr_in6,\n                       after_connect_cb: *u8)\n -> libc::c_int {\n-    return rustrt::rust_uv_tcp_connect6(connect_ptr, tcp_handle_ptr,\n+    return rust_uv_tcp_connect6(connect_ptr, tcp_handle_ptr,\n                                     after_connect_cb, addr_ptr);\n }\n // FIXME ref #2064\n pub unsafe fn tcp_bind(tcp_server_ptr: *uv_tcp_t,\n                    addr_ptr: *sockaddr_in) -> libc::c_int {\n-    return rustrt::rust_uv_tcp_bind(tcp_server_ptr,\n+    return rust_uv_tcp_bind(tcp_server_ptr,\n                                  addr_ptr);\n }\n // FIXME ref #2064\n pub unsafe fn tcp_bind6(tcp_server_ptr: *uv_tcp_t,\n                    addr_ptr: *sockaddr_in6) -> libc::c_int {\n-    return rustrt::rust_uv_tcp_bind6(tcp_server_ptr,\n+    return rust_uv_tcp_bind6(tcp_server_ptr,\n                                  addr_ptr);\n }\n \n pub unsafe fn tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n                               name: *sockaddr_in) -> libc::c_int {\n-    return rustrt::rust_uv_tcp_getpeername(tcp_handle_ptr, name);\n+    return rust_uv_tcp_getpeername(tcp_handle_ptr, name);\n }\n \n pub unsafe fn tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n                                name: *sockaddr_in6) ->libc::c_int {\n-    return rustrt::rust_uv_tcp_getpeername6(tcp_handle_ptr, name);\n+    return rust_uv_tcp_getpeername6(tcp_handle_ptr, name);\n }\n \n pub unsafe fn listen<T>(stream: *T, backlog: libc::c_int,\n                  cb: *u8) -> libc::c_int {\n-    return rustrt::rust_uv_listen(stream as *libc::c_void, backlog, cb);\n+    return rust_uv_listen(stream as *libc::c_void, backlog, cb);\n }\n \n pub unsafe fn accept(server: *libc::c_void, client: *libc::c_void)\n     -> libc::c_int {\n-    return rustrt::rust_uv_accept(server as *libc::c_void,\n+    return rust_uv_accept(server as *libc::c_void,\n                                client as *libc::c_void);\n }\n \n pub unsafe fn write<T>(req: *uv_write_t, stream: *T,\n          buf_in: *~[uv_buf_t], cb: *u8) -> libc::c_int {\n     let buf_ptr = vec::raw::to_ptr(*buf_in);\n     let buf_cnt = vec::len(*buf_in) as i32;\n-    return rustrt::rust_uv_write(req as *libc::c_void,\n+    return rust_uv_write(req as *libc::c_void,\n                               stream as *libc::c_void,\n                               buf_ptr, buf_cnt, cb);\n }\n pub unsafe fn read_start(stream: *uv_stream_t, on_alloc: *u8,\n                      on_read: *u8) -> libc::c_int {\n-    return rustrt::rust_uv_read_start(stream as *libc::c_void,\n+    return rust_uv_read_start(stream as *libc::c_void,\n                                    on_alloc, on_read);\n }\n \n pub unsafe fn read_stop(stream: *uv_stream_t) -> libc::c_int {\n-    return rustrt::rust_uv_read_stop(stream as *libc::c_void);\n+    return rust_uv_read_stop(stream as *libc::c_void);\n }\n \n pub unsafe fn last_error(loop_handle: *libc::c_void) -> uv_err_t {\n-    return rustrt::rust_uv_last_error(loop_handle);\n+    return rust_uv_last_error(loop_handle);\n }\n \n pub unsafe fn strerror(err: *uv_err_t) -> *libc::c_char {\n-    return rustrt::rust_uv_strerror(err);\n+    return rust_uv_strerror(err);\n }\n pub unsafe fn err_name(err: *uv_err_t) -> *libc::c_char {\n-    return rustrt::rust_uv_err_name(err);\n+    return rust_uv_err_name(err);\n }\n \n pub unsafe fn async_init(loop_handle: *libc::c_void,\n                      async_handle: *uv_async_t,\n                      cb: *u8) -> libc::c_int {\n-    return rustrt::rust_uv_async_init(loop_handle,\n+    return rust_uv_async_init(loop_handle,\n                                    async_handle,\n                                    cb);\n }\n \n pub unsafe fn async_send(async_handle: *uv_async_t) {\n-    return rustrt::rust_uv_async_send(async_handle);\n+    return rust_uv_async_send(async_handle);\n }\n pub unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n     let out_buf = uv_buf_t { base: ptr::null(), len: 0 as libc::size_t };\n     let out_buf_ptr: *uv_buf_t = &out_buf;\n-    rustrt::rust_uv_buf_init(out_buf_ptr, input, len as size_t);\n+    rust_uv_buf_init(out_buf_ptr, input, len as size_t);\n     return out_buf;\n }\n pub unsafe fn ip4_addr(ip: &str, port: int) -> sockaddr_in {\n     do str::as_c_str(ip) |ip_buf| {\n-        rustrt::rust_uv_ip4_addr(ip_buf as *u8,\n+        rust_uv_ip4_addr(ip_buf as *u8,\n                                  port as libc::c_int)\n     }\n }\n pub unsafe fn ip6_addr(ip: &str, port: int) -> sockaddr_in6 {\n     do str::as_c_str(ip) |ip_buf| {\n-        rustrt::rust_uv_ip6_addr(ip_buf as *u8,\n+        rust_uv_ip6_addr(ip_buf as *u8,\n                                  port as libc::c_int)\n     }\n }\n@@ -1043,7 +1042,7 @@ pub unsafe fn ip4_name(src: &sockaddr_in) -> ~str {\n     let dst: ~[u8] = ~[0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n                      0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8];\n     do vec::as_imm_buf(dst) |dst_buf, size| {\n-        rustrt::rust_uv_ip4_name(to_unsafe_ptr(src),\n+        rust_uv_ip4_name(to_unsafe_ptr(src),\n                                  dst_buf, size as libc::size_t);\n         // seems that checking the result of uv_ip4_name\n         // doesn't work too well..\n@@ -1064,7 +1063,7 @@ pub unsafe fn ip6_name(src: &sockaddr_in6) -> ~str {\n                        0u8,0u8,0u8,0u8,0u8,0u8];\n     do vec::as_imm_buf(dst) |dst_buf, size| {\n         let src_unsafe_ptr = to_unsafe_ptr(src);\n-        let result = rustrt::rust_uv_ip6_name(src_unsafe_ptr,\n+        let result = rust_uv_ip6_name(src_unsafe_ptr,\n                                               dst_buf, size as libc::size_t);\n         match result {\n           0i32 => str::raw::from_buf(dst_buf),\n@@ -1073,39 +1072,39 @@ pub unsafe fn ip6_name(src: &sockaddr_in6) -> ~str {\n     }\n }\n pub unsafe fn ip4_port(src: &sockaddr_in) -> uint {\n-    rustrt::rust_uv_ip4_port(to_unsafe_ptr(src)) as uint\n+    rust_uv_ip4_port(to_unsafe_ptr(src)) as uint\n }\n pub unsafe fn ip6_port(src: &sockaddr_in6) -> uint {\n-    rustrt::rust_uv_ip6_port(to_unsafe_ptr(src)) as uint\n+    rust_uv_ip6_port(to_unsafe_ptr(src)) as uint\n }\n \n pub unsafe fn timer_init(loop_ptr: *libc::c_void,\n                      timer_ptr: *uv_timer_t) -> libc::c_int {\n-    return rustrt::rust_uv_timer_init(loop_ptr, timer_ptr);\n+    return rust_uv_timer_init(loop_ptr, timer_ptr);\n }\n pub unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: uint,\n                       repeat: uint) -> libc::c_int {\n-    return rustrt::rust_uv_timer_start(timer_ptr, cb, timeout as libc::c_uint,\n+    return rust_uv_timer_start(timer_ptr, cb, timeout as libc::c_uint,\n                                     repeat as libc::c_uint);\n }\n pub unsafe fn timer_stop(timer_ptr: *uv_timer_t) -> libc::c_int {\n-    return rustrt::rust_uv_timer_stop(timer_ptr);\n+    return rust_uv_timer_stop(timer_ptr);\n }\n pub unsafe fn getaddrinfo(loop_ptr: *libc::c_void,\n                            handle: *uv_getaddrinfo_t,\n                            cb: *u8,\n                            node_name_ptr: *u8,\n                            service_name_ptr: *u8,\n                            hints: *addrinfo) -> libc::c_int {\n-    rustrt::rust_uv_getaddrinfo(loop_ptr,\n+    rust_uv_getaddrinfo(loop_ptr,\n                            handle,\n                            cb,\n                            node_name_ptr,\n                            service_name_ptr,\n                            hints)\n }\n pub unsafe fn freeaddrinfo(res: *addrinfo) {\n-    rustrt::rust_uv_freeaddrinfo(res);\n+    rust_uv_freeaddrinfo(res);\n }\n \n // libuv struct initializers\n@@ -1131,53 +1130,53 @@ pub fn getaddrinfo_t() -> uv_getaddrinfo_t {\n // data access helpers\n pub unsafe fn get_loop_for_uv_handle<T>(handle: *T)\n     -> *libc::c_void {\n-    return rustrt::rust_uv_get_loop_for_uv_handle(handle as *libc::c_void);\n+    return rust_uv_get_loop_for_uv_handle(handle as *libc::c_void);\n }\n pub unsafe fn get_stream_handle_from_connect_req(connect: *uv_connect_t)\n     -> *uv_stream_t {\n-    return rustrt::rust_uv_get_stream_handle_from_connect_req(\n+    return rust_uv_get_stream_handle_from_connect_req(\n         connect);\n }\n pub unsafe fn get_stream_handle_from_write_req(\n     write_req: *uv_write_t)\n     -> *uv_stream_t {\n-    return rustrt::rust_uv_get_stream_handle_from_write_req(\n+    return rust_uv_get_stream_handle_from_write_req(\n         write_req);\n }\n pub unsafe fn get_data_for_uv_loop(loop_ptr: *libc::c_void) -> *libc::c_void {\n-    rustrt::rust_uv_get_data_for_uv_loop(loop_ptr)\n+    rust_uv_get_data_for_uv_loop(loop_ptr)\n }\n pub unsafe fn set_data_for_uv_loop(loop_ptr: *libc::c_void,\n                                    data: *libc::c_void) {\n-    rustrt::rust_uv_set_data_for_uv_loop(loop_ptr, data);\n+    rust_uv_set_data_for_uv_loop(loop_ptr, data);\n }\n pub unsafe fn get_data_for_uv_handle<T>(handle: *T) -> *libc::c_void {\n-    return rustrt::rust_uv_get_data_for_uv_handle(handle as *libc::c_void);\n+    return rust_uv_get_data_for_uv_handle(handle as *libc::c_void);\n }\n pub unsafe fn set_data_for_uv_handle<T, U>(handle: *T, data: *U) {\n-    rustrt::rust_uv_set_data_for_uv_handle(handle as *libc::c_void,\n+    rust_uv_set_data_for_uv_handle(handle as *libc::c_void,\n                                            data as *libc::c_void);\n }\n pub unsafe fn get_data_for_req<T>(req: *T) -> *libc::c_void {\n-    return rustrt::rust_uv_get_data_for_req(req as *libc::c_void);\n+    return rust_uv_get_data_for_req(req as *libc::c_void);\n }\n pub unsafe fn set_data_for_req<T, U>(req: *T,\n                     data: *U) {\n-    rustrt::rust_uv_set_data_for_req(req as *libc::c_void,\n+    rust_uv_set_data_for_req(req as *libc::c_void,\n                                      data as *libc::c_void);\n }\n pub unsafe fn get_base_from_buf(buf: uv_buf_t) -> *u8 {\n-    return rustrt::rust_uv_get_base_from_buf(buf);\n+    return rust_uv_get_base_from_buf(buf);\n }\n pub unsafe fn get_len_from_buf(buf: uv_buf_t) -> libc::size_t {\n-    return rustrt::rust_uv_get_len_from_buf(buf);\n+    return rust_uv_get_len_from_buf(buf);\n }\n pub unsafe fn malloc_buf_base_of(suggested_size: libc::size_t)\n     -> *u8 {\n-    return rustrt::rust_uv_malloc_buf_base_of(suggested_size);\n+    return rust_uv_malloc_buf_base_of(suggested_size);\n }\n pub unsafe fn free_base_of_buf(buf: uv_buf_t) {\n-    rustrt::rust_uv_free_base_of_buf(buf);\n+    rust_uv_free_base_of_buf(buf);\n }\n \n pub unsafe fn get_last_err_info(uv_loop: *libc::c_void) -> ~str {\n@@ -1203,22 +1202,22 @@ pub struct uv_err_data {\n }\n \n pub unsafe fn is_ipv4_addrinfo(input: *addrinfo) -> bool {\n-    rustrt::rust_uv_is_ipv4_addrinfo(input)\n+    rust_uv_is_ipv4_addrinfo(input)\n }\n pub unsafe fn is_ipv6_addrinfo(input: *addrinfo) -> bool {\n-    rustrt::rust_uv_is_ipv6_addrinfo(input)\n+    rust_uv_is_ipv6_addrinfo(input)\n }\n pub unsafe fn get_INADDR_NONE() -> u32 {\n-    rustrt::rust_uv_helper_get_INADDR_NONE()\n+    rust_uv_helper_get_INADDR_NONE()\n }\n pub unsafe fn get_next_addrinfo(input: *addrinfo) -> *addrinfo {\n-    rustrt::rust_uv_get_next_addrinfo(input)\n+    rust_uv_get_next_addrinfo(input)\n }\n pub unsafe fn addrinfo_as_sockaddr_in(input: *addrinfo) -> *sockaddr_in {\n-    rustrt::rust_uv_addrinfo_as_sockaddr_in(input)\n+    rust_uv_addrinfo_as_sockaddr_in(input)\n }\n pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n-    rustrt::rust_uv_addrinfo_as_sockaddr_in6(input)\n+    rust_uv_addrinfo_as_sockaddr_in6(input)\n }\n \n #[cfg(test)]\n@@ -1792,7 +1791,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_tcp_t>(\n                 ~\"uv_tcp_t\",\n-                super::rustrt::rust_uv_helper_uv_tcp_t_size()\n+                super::rust_uv_helper_uv_tcp_t_size()\n             );\n         }\n     }\n@@ -1801,7 +1800,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_connect_t>(\n                 ~\"uv_connect_t\",\n-                super::rustrt::rust_uv_helper_uv_connect_t_size()\n+                super::rust_uv_helper_uv_connect_t_size()\n             );\n         }\n     }\n@@ -1810,7 +1809,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_buf_t>(\n                 ~\"uv_buf_t\",\n-                super::rustrt::rust_uv_helper_uv_buf_t_size()\n+                super::rust_uv_helper_uv_buf_t_size()\n             );\n         }\n     }\n@@ -1819,7 +1818,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_write_t>(\n                 ~\"uv_write_t\",\n-                super::rustrt::rust_uv_helper_uv_write_t_size()\n+                super::rust_uv_helper_uv_write_t_size()\n             );\n         }\n     }\n@@ -1829,15 +1828,15 @@ mod test {\n         unsafe {\n             struct_size_check_common::<sockaddr_in>(\n                 ~\"sockaddr_in\",\n-                super::rustrt::rust_uv_helper_sockaddr_in_size()\n+                super::rust_uv_helper_sockaddr_in_size()\n             );\n         }\n     }\n     #[test]\n     fn test_uv_ll_struct_size_sockaddr_in6() {\n         unsafe {\n             let foreign_handle_size =\n-                super::rustrt::rust_uv_helper_sockaddr_in6_size();\n+                super::rust_uv_helper_sockaddr_in6_size();\n             let rust_handle_size = sys::size_of::<sockaddr_in6>();\n             let output = fmt!(\"sockaddr_in6 -- foreign: %u rust: %u\",\n                               foreign_handle_size as uint, rust_handle_size);\n@@ -1856,7 +1855,7 @@ mod test {\n     fn test_uv_ll_struct_size_addr_in() {\n         unsafe {\n             let foreign_handle_size =\n-                super::rustrt::rust_uv_helper_addr_in_size();\n+                super::rust_uv_helper_addr_in_size();\n             let rust_handle_size = sys::size_of::<addr_in>();\n             let output = fmt!(\"addr_in -- foreign: %u rust: %u\",\n                               foreign_handle_size as uint, rust_handle_size);\n@@ -1872,7 +1871,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_async_t>(\n                 ~\"uv_async_t\",\n-                super::rustrt::rust_uv_helper_uv_async_t_size()\n+                super::rust_uv_helper_uv_async_t_size()\n             );\n         }\n     }\n@@ -1882,7 +1881,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_timer_t>(\n                 ~\"uv_timer_t\",\n-                super::rustrt::rust_uv_helper_uv_timer_t_size()\n+                super::rust_uv_helper_uv_timer_t_size()\n             );\n         }\n     }\n@@ -1893,7 +1892,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_getaddrinfo_t>(\n                 ~\"uv_getaddrinfo_t\",\n-                super::rustrt::rust_uv_helper_uv_getaddrinfo_t_size()\n+                super::rust_uv_helper_uv_getaddrinfo_t_size()\n             );\n         }\n     }\n@@ -1904,7 +1903,7 @@ mod test {\n         unsafe {\n             struct_size_check_common::<uv_timer_t>(\n                 ~\"addrinfo\",\n-                super::rustrt::rust_uv_helper_uv_timer_t_size()\n+                super::rust_uv_helper_uv_timer_t_size()\n             );\n         }\n     }"}, {"sha": "3e64133e893f2d7fdb9d90082290a56d4548cbfd", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -61,6 +61,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteStaticMethod,\n     ObsoleteConstItem,\n     ObsoleteFixedLengthVectorType,\n+    ObsoleteNamedExternModule,\n }\n \n #[cfg(stage0)]\n@@ -225,6 +226,11 @@ pub impl Parser {\n                 \"fixed-length vector notation\",\n                 \"instead of `[T * N]`, write `[T, ..N]`\"\n             ),\n+            ObsoleteNamedExternModule => (\n+                \"named external module\",\n+                \"instead of `extern mod foo { ... }`, write `mod foo { \\\n+                 extern { ... } }`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "6b0d5e3d38409c3ea86204d4f536fdf645a4ef5c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -82,6 +82,7 @@ use parse::obsolete::ObsoleteMode;\n use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n+use parse::obsolete::{ObsoleteNamedExternModule};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents, token_to_binop};\n use parse::token;\n@@ -415,8 +416,7 @@ pub impl Parser {\n         self.expect_keyword(&~\"fn\");\n \n         if self.parse_fn_ty_sigil().is_some() {\n-            self.obsolete(*self.span,\n-                          ObsoletePostFnTySigil);\n+            self.obsolete(*self.span, ObsoletePostFnTySigil);\n         }\n \n         let (decl, lifetimes) = self.parse_ty_fn_decl();\n@@ -3688,10 +3688,11 @@ pub impl Parser {\n \n     // at this point, this is essentially a wrapper for\n     // parse_foreign_items.\n-    fn parse_foreign_mod_items(&self, sort: ast::foreign_mod_sort,\n+    fn parse_foreign_mod_items(&self,\n+                               sort: ast::foreign_mod_sort,\n                                abis: AbiSet,\n                                first_item_attrs: ~[attribute])\n-                            -> foreign_mod {\n+                               -> foreign_mod {\n         let ParsedItemsAndViewItems {\n             attrs_remaining: _,\n             view_items: view_items,\n@@ -3714,8 +3715,7 @@ pub impl Parser {\n                               visibility: visibility,\n                               attrs: ~[attribute],\n                               items_allowed: bool)\n-                           -> item_or_view_item\n-    {\n+                              -> item_or_view_item {\n         let mut must_be_named_mod = false;\n         if self.is_keyword(&~\"mod\") {\n             must_be_named_mod = true;\n@@ -3750,6 +3750,11 @@ pub impl Parser {\n \n         // extern mod foo { ... } or extern { ... }\n         if items_allowed && self.eat(&token::LBRACE) {\n+            // `extern mod foo { ... }` is obsolete.\n+            if sort == ast::named {\n+                self.obsolete(*self.last_span, ObsoleteNamedExternModule);\n+            }\n+\n             let abis = opt_abis.get_or_default(AbiSet::C());\n \n             let (inner, next) = self.parse_inner_attrs_and_next();"}, {"sha": "465e5548f679c9a2bb8fc3552751725615c42891", "filename": "src/test/compile-fail/unused-unsafe.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Ftest%2Fcompile-fail%2Funused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef889cdc77db862d526bf6a607ecdf3ee80beb/src%2Ftest%2Fcompile-fail%2Funused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-unsafe.rs?ref=06ef889cdc77db862d526bf6a607ecdf3ee80beb", "patch": "@@ -12,8 +12,10 @@\n \n #[deny(unused_unsafe)];\n \n-extern mod foo {\n-    fn bar();\n+mod foo {\n+    pub extern {\n+        pub fn bar();\n+    }\n }\n \n fn callback<T>(_f: &fn() -> T) -> T { fail!() }"}]}