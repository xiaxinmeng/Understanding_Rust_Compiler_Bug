{"sha": "6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "node_id": "C_kwDOAAsO6NoAKDYxNTNkM2NiZTZhYmM3NGZiMzdlNGViZTQ4Y2M4MjU0ODRmZDZiYmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T18:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T18:10:51Z"}, "message": "Auto merge of #101212 - eholk:dyn-star, r=compiler-errors\n\nInitial implementation of dyn*\n\nThis PR adds extremely basic and incomplete support for [dyn*](https://smallcultfollowing.com/babysteps//blog/2022/03/29/dyn-can-we-make-dyn-sized/). The goal is to get something in tree behind a flag to make collaboration easier, and also to make sure the implementation so far is not unreasonable. This PR does quite a few things:\n\n* Introduce `dyn_star` feature flag\n* Adds parsing for `dyn* Trait` types\n* Defines `dyn* Trait` as a sized type\n* Adds support for explicit casts, like `42usize as dyn* Debug`\n  * Including const evaluation of such casts\n* Adds codegen for drop glue so things are cleaned up properly when a `dyn* Trait` object goes out of scope\n* Adds codegen for method calls, at least for methods that take `&self`\n\nQuite a bit is still missing, but this gives us a starting point. Note that this is never intended to become stable surface syntax for Rust, but rather `dyn*` is planned to be used as an implementation detail for async functions in dyn traits.\n\nJoint work with `@nikomatsakis` and `@compiler-errors.`\n\nr? `@bjorn3`", "tree": {"sha": "bef7759236490fe278aa160a8ac63f41d37ecd27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef7759236490fe278aa160a8ac63f41d37ecd27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "html_url": "https://github.com/rust-lang/rust/commit/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92669638461836f41f54f95e396f9082bb91391", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92669638461836f41f54f95e396f9082bb91391", "html_url": "https://github.com/rust-lang/rust/commit/a92669638461836f41f54f95e396f9082bb91391"}, {"sha": "0faafbf1d91f7b9ea4c775cd33cf12008575a35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0faafbf1d91f7b9ea4c775cd33cf12008575a35b", "html_url": "https://github.com/rust-lang/rust/commit/0faafbf1d91f7b9ea4c775cd33cf12008575a35b"}], "stats": {"total": 721, "additions": 617, "deletions": 104}, "files": [{"sha": "b4bb89af038719dfa4e502ff24e51d640ca8bc84", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -2072,6 +2072,7 @@ impl TyKind {\n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum TraitObjectSyntax {\n     Dyn,\n+    DynStar,\n     None,\n }\n "}, {"sha": "aeff73c5bbbfb0c9ab7e07e74864b57ec1944eb3", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -554,6 +554,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n             }\n+            ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::DynStar, ..) => {\n+                gate_feature_post!(&self, dyn_star, ty.span, \"dyn* trait objects are unstable\");\n+            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)"}, {"sha": "f41d70d384d8bbcc96bc17cec361aa5863a2aae3", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -30,8 +30,9 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n-    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueHiddenType,\n-    OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n+    self, Binder, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, Dynamic,\n+    OpaqueHiddenType, OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType,\n+    UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n@@ -2013,6 +2014,36 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         );\n                     }\n \n+                    CastKind::DynStar => {\n+                        // get the constraints from the target type (`dyn* Clone`)\n+                        //\n+                        // apply them to prove that the source type `Foo` implements `Clone` etc\n+                        let (existential_predicates, region) = match ty.kind() {\n+                            Dynamic(predicates, region, ty::DynStar) => (predicates, region),\n+                            _ => panic!(\"Invalid dyn* cast_ty\"),\n+                        };\n+\n+                        let self_ty = op.ty(body, tcx);\n+\n+                        self.prove_predicates(\n+                            existential_predicates\n+                                .iter()\n+                                .map(|predicate| predicate.with_self_ty(tcx, self_ty)),\n+                            location.to_locations(),\n+                            ConstraintCategory::Cast,\n+                        );\n+\n+                        let outlives_predicate =\n+                            tcx.mk_predicate(Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(self_ty, *region),\n+                            )));\n+                        self.prove_predicate(\n+                            outlives_predicate,\n+                            location.to_locations(),\n+                            ConstraintCategory::Cast,\n+                        );\n+                    }\n+\n                     CastKind::Pointer(PointerCast::MutToConstPointer) => {\n                         let ty::RawPtr(ty::TypeAndMut {\n                             ty: ty_from,"}, {"sha": "399474d79e3b6c30d20f0d8f3921af1185bbf987", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -701,6 +701,10 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     operand.unsize_value(fx, lval);\n                 }\n+                Rvalue::Cast(CastKind::DynStar, _, _) => {\n+                    // FIXME(dyn-star)\n+                    unimplemented!()\n+                }\n                 Rvalue::Discriminant(place) => {\n                     let place = codegen_place(fx, place);\n                     let value = place.to_cvalue(fx);"}, {"sha": "cfaadca9491079bca03a5390a70cca0c8d604083", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -815,7 +815,8 @@ pub(crate) fn assert_assignable<'tcx>(\n             );\n             // fn(&T) -> for<'l> fn(&'l T) is allowed\n         }\n-        (&ty::Dynamic(from_traits, _), &ty::Dynamic(to_traits, _)) => {\n+        (&ty::Dynamic(from_traits, _, _from_kind), &ty::Dynamic(to_traits, _, _to_kind)) => {\n+            // FIXME(dyn-star): Do the right thing with DynKinds\n             for (from, to) in from_traits.iter().zip(to_traits) {\n                 let from =\n                     fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), from);"}, {"sha": "cae46ebd2e9a7c366ab173be7226f136bb3cb05b", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> VirtualIndex {\n fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n     for arg in ty.peel_refs().walk() {\n         if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Dynamic(data, _) = ty.kind() {\n+            if let ty::Dynamic(data, _, _) = ty.kind() {\n                 return data.principal().expect(\"expected principal trait object\");\n             }\n         }\n@@ -86,15 +86,14 @@ fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'\n /// The `trait_ref` encodes the erased self type. Hence if we are\n /// making an object `Foo<dyn Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T: Trait`.\n+#[instrument(level = \"debug\", skip(cx))]\n pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     cx: &Cx,\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Cx::Value {\n     let tcx = cx.tcx();\n \n-    debug!(\"get_vtable(ty={:?}, trait_ref={:?})\", ty, trait_ref);\n-\n     // Check the cache.\n     if let Some(&val) = cx.vtables().borrow().get(&(ty, trait_ref)) {\n         return val;"}, {"sha": "a6b226ef72096db9ff11c86fa863fdcc4a09d4c8", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -367,6 +367,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx.ret(llval);\n     }\n \n+    #[tracing::instrument(level = \"trace\", skip(self, helper, bx))]\n     fn codegen_drop_terminator(\n         &mut self,\n         helper: TerminatorCodegenHelper<'tcx>,\n@@ -397,14 +398,75 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (drop_fn, fn_abi) = match ty.kind() {\n             // FIXME(eddyb) perhaps move some of this logic into\n             // `Instance::resolve_drop_in_place`?\n-            ty::Dynamic(..) => {\n+            ty::Dynamic(_, _, ty::Dyn) => {\n+                // IN THIS ARM, WE HAVE:\n+                // ty = *mut (dyn Trait)\n+                // which is: exists<T> ( *mut T,    Vtable<T: Trait> )\n+                //                       args[0]    args[1]\n+                //\n+                // args = ( Data, Vtable )\n+                //                  |\n+                //                  v\n+                //                /-------\\\n+                //                | ...   |\n+                //                \\-------/\n+                //\n                 let virtual_drop = Instance {\n                     def: ty::InstanceDef::Virtual(drop_fn.def_id(), 0),\n                     substs: drop_fn.substs,\n                 };\n+                debug!(\"ty = {:?}\", ty);\n+                debug!(\"drop_fn = {:?}\", drop_fn);\n+                debug!(\"args = {:?}\", args);\n                 let fn_abi = bx.fn_abi_of_instance(virtual_drop, ty::List::empty());\n                 let vtable = args[1];\n+                // Truncate vtable off of args list\n+                args = &args[..1];\n+                (\n+                    meth::VirtualIndex::from_index(ty::COMMON_VTABLE_ENTRIES_DROPINPLACE)\n+                        .get_fn(&mut bx, vtable, ty, &fn_abi),\n+                    fn_abi,\n+                )\n+            }\n+            ty::Dynamic(_, _, ty::DynStar) => {\n+                // IN THIS ARM, WE HAVE:\n+                // ty = *mut (dyn* Trait)\n+                // which is: *mut exists<T: sizeof(T) == sizeof(usize)> (T, Vtable<T: Trait>)\n+                //\n+                // args = [ * ]\n+                //          |\n+                //          v\n+                //      ( Data, Vtable )\n+                //                |\n+                //                v\n+                //              /-------\\\n+                //              | ...   |\n+                //              \\-------/\n+                //\n+                //\n+                // WE CAN CONVERT THIS INTO THE ABOVE LOGIC BY DOING\n+                //\n+                // data = &(*args[0]).0    // gives a pointer to Data above (really the same pointer)\n+                // vtable = (*args[0]).1   // loads the vtable out\n+                // (data, vtable)          // an equivalent Rust `*mut dyn Trait`\n+                //\n+                // SO THEN WE CAN USE THE ABOVE CODE.\n+                let virtual_drop = Instance {\n+                    def: ty::InstanceDef::Virtual(drop_fn.def_id(), 0),\n+                    substs: drop_fn.substs,\n+                };\n+                debug!(\"ty = {:?}\", ty);\n+                debug!(\"drop_fn = {:?}\", drop_fn);\n+                debug!(\"args = {:?}\", args);\n+                let fn_abi = bx.fn_abi_of_instance(virtual_drop, ty::List::empty());\n+                let data = args[0];\n+                let data_ty = bx.cx().backend_type(place.layout);\n+                let vtable_ptr =\n+                    bx.gep(data_ty, data, &[bx.cx().const_i32(0), bx.cx().const_i32(1)]);\n+                let vtable = bx.load(bx.type_i8p(), vtable_ptr, abi::Align::ONE);\n+                // Truncate vtable off of args list\n                 args = &args[..1];\n+                debug!(\"args' = {:?}\", args);\n                 (\n                     meth::VirtualIndex::from_index(ty::COMMON_VTABLE_ENTRIES_DROPINPLACE)\n                         .get_fn(&mut bx, vtable, ty, &fn_abi),\n@@ -845,7 +907,30 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         llargs.push(data_ptr);\n                         continue;\n                     }\n-                    _ => span_bug!(span, \"can't codegen a virtual call on {:?}\", op),\n+                    Immediate(_) => {\n+                        let ty::Ref(_, ty, _) = op.layout.ty.kind() else {\n+                            span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n+                        };\n+                        if !ty.is_dyn_star() {\n+                            span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n+                        }\n+                        // FIXME(dyn-star): Make sure this is done on a &dyn* receiver\n+                        let place = op.deref(bx.cx());\n+                        let data_ptr = place.project_field(&mut bx, 0);\n+                        let meta_ptr = place.project_field(&mut bx, 1);\n+                        let meta = bx.load_operand(meta_ptr);\n+                        llfn = Some(meth::VirtualIndex::from_index(idx).get_fn(\n+                            &mut bx,\n+                            meta.immediate(),\n+                            op.layout.ty,\n+                            &fn_abi,\n+                        ));\n+                        llargs.push(data_ptr.llval);\n+                        continue;\n+                    }\n+                    _ => {\n+                        span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n+                    }\n                 }\n             }\n "}, {"sha": "56852b0fcc821e1107d918da2dbfd05f1f9745df", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -4,6 +4,7 @@ use super::{FunctionCx, LocalRef};\n \n use crate::base;\n use crate::common::{self, IntPredicate};\n+use crate::meth::get_vtable;\n use crate::traits::*;\n use crate::MemFlags;\n \n@@ -271,6 +272,21 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             bug!(\"unexpected non-pair operand\");\n                         }\n                     }\n+                    mir::CastKind::DynStar => {\n+                        let data = match operand.val {\n+                            OperandValue::Ref(_, _, _) => todo!(),\n+                            OperandValue::Immediate(v) => v,\n+                            OperandValue::Pair(_, _) => todo!(),\n+                        };\n+                        let trait_ref =\n+                            if let ty::Dynamic(data, _, ty::DynStar) = cast.ty.kind() {\n+                                data.principal()\n+                            } else {\n+                                bug!(\"Only valid to do a DynStar cast into a DynStar type\")\n+                            };\n+                        let vtable = get_vtable(bx.cx(), source.ty(self.mir, bx.tcx()), trait_ref);\n+                        OperandValue::Pair(data, vtable)\n+                    }\n                     mir::CastKind::Pointer(\n                         PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n                     )"}, {"sha": "cbe98548025bca306bdd0e82a1a0d60986d3235c", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -108,6 +108,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     _ => span_bug!(self.cur_span(), \"closure fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n+\n+            DynStar => {\n+                if let ty::Dynamic(data, _, ty::DynStar) = cast_ty.kind() {\n+                    // Initial cast from sized to dyn trait\n+                    let vtable = self.get_vtable_ptr(src.layout.ty, data.principal())?;\n+                    let vtable = Scalar::from_maybe_pointer(vtable, self);\n+                    let data = self.read_immediate(src)?.to_scalar();\n+                    let _assert_pointer_sized = data.to_pointer(self)?;\n+                    let val = Immediate::ScalarPair(data, vtable);\n+                    self.write_immediate(val, dest)?;\n+                } else {\n+                    bug!()\n+                }\n+            }\n         }\n         Ok(())\n     }\n@@ -312,7 +326,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let new_vptr = self.get_vtable_ptr(ty, data_b.principal())?;\n                 self.write_immediate(Immediate::new_dyn_trait(old_data, new_vptr, self), dest)\n             }\n-            (_, &ty::Dynamic(ref data, _)) => {\n+            (_, &ty::Dynamic(ref data, _, ty::Dyn)) => {\n                 // Initial cast from sized to dyn trait\n                 let vtable = self.get_vtable_ptr(src_pointee_ty, data.principal())?;\n                 let ptr = self.read_scalar(src)?;"}, {"sha": "8637d6a7767e4d14199d1aea8225d5d750c547f8", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             | ty::Ref(_, _, _)\n             | ty::FnDef(_, _)\n             | ty::FnPtr(_)\n-            | ty::Dynamic(_, _)\n+            | ty::Dynamic(_, _, _)\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)"}, {"sha": "7e4c5fcb031b0bdf8473c0a2f4e8294a261de4a1", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::FnPtr(_)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Dynamic(_, _) => self.pretty_print_type(ty),\n+            | ty::Dynamic(_, _, _) => self.pretty_print_type(ty),\n \n             // Placeholders (all printed as `_` to uniformize them).\n             ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error(_) => {"}, {"sha": "7e15858c8c188ee690f54aba5891b4682b7ed5de", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -546,6 +546,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 // Since no pointer can ever get exposed (rejected above), this is easy to support.\n             }\n \n+            Rvalue::Cast(CastKind::DynStar, _, _) => {\n+                unimplemented!()\n+            }\n+\n             Rvalue::Cast(CastKind::Misc, _, _) => {}\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}"}, {"sha": "4aa98cb13d82bff5594b09f73a4451901ede31c1", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -569,6 +569,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             );\n                         }\n                     }\n+                    CastKind::DynStar => {\n+                        // FIXME(dyn-star): make sure nothing needs to be done here.\n+                    }\n                     // Nothing to check here\n                     CastKind::PointerFromExposedAddress\n                     | CastKind::PointerExposeAddress"}, {"sha": "c28fa654a6c525aefadea45b376c0c970b9ac079", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -384,6 +384,8 @@ declare_features! (\n     (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n+    /// Allows `dyn* Trait` objects.\n+    (incomplete, dyn_star, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types."}, {"sha": "ae56bea6f862d7fab55b40bb34f10f9c0999ea05", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -544,7 +544,7 @@ pub struct TraitObjectVisitor(pub FxHashSet<DefId>);\n impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n-            ty::Dynamic(preds, re) if re.is_static() => {\n+            ty::Dynamic(preds, re, _) if re.is_static() => {\n                 if let Some(def_id) = preds.principal_def_id() {\n                     self.0.insert(def_id);\n                 }"}, {"sha": "3d426ecbfcb0538a663491077f40e578a80758ee", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -222,7 +222,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     }\n                     has_emitted\n                 }\n-                ty::Dynamic(binder, _) => {\n+                ty::Dynamic(binder, _, _) => {\n                     let mut has_emitted = false;\n                     for predicate in binder.iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) ="}, {"sha": "526bb5d728599eeebfe9563bf01e19ccf9c61745", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1818,6 +1818,7 @@ impl<'tcx> Rvalue<'tcx> {\n             // While the model is undecided, we should be conservative. See\n             // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => false,\n+            Rvalue::Cast(CastKind::DynStar, _, _) => false,\n \n             Rvalue::Use(_)\n             | Rvalue::CopyForDeref(_)"}, {"sha": "d2bb897b5b676d9515aa66dc4f68540633bf40b0", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1139,6 +1139,8 @@ pub enum CastKind {\n     /// All sorts of pointer-to-pointer casts. Note that reference-to-raw-ptr casts are\n     /// translated into `&raw mut/const *r`, i.e., they are not actually casts.\n     Pointer(PointerCast),\n+    /// Cast into a dyn* object.\n+    DynStar,\n     /// Remaining unclassified casts.\n     Misc,\n }"}, {"sha": "981e2d3b6d2d3ea952bb49c047ea9c792985698d", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -33,6 +33,8 @@ pub enum CastTy<'tcx> {\n     FnPtr,\n     /// Raw pointers.\n     Ptr(ty::TypeAndMut<'tcx>),\n+    /// Casting into a `dyn*` value.\n+    DynStar,\n }\n \n /// Cast Kind. See [RFC 401](https://rust-lang.github.io/rfcs/0401-coercions.html)\n@@ -50,6 +52,7 @@ pub enum CastKind {\n     ArrayPtrCast,\n     FnPtrPtrCast,\n     FnPtrAddrCast,\n+    DynStarCast,\n }\n \n impl<'tcx> CastTy<'tcx> {\n@@ -67,6 +70,7 @@ impl<'tcx> CastTy<'tcx> {\n             ty::Adt(d, _) if d.is_enum() && d.is_payloadfree() => Some(CastTy::Int(IntTy::CEnum)),\n             ty::RawPtr(mt) => Some(CastTy::Ptr(mt)),\n             ty::FnPtr(..) => Some(CastTy::FnPtr),\n+            ty::Dynamic(_, _, ty::DynStar) => Some(CastTy::DynStar),\n             _ => None,\n         }\n     }"}, {"sha": "d0b49c4ee9e71c8ba19523001b0ca0c69eb40b29", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -63,7 +63,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n-use rustc_type_ir::{InternAs, InternIteratorElement, Interner, TypeFlags};\n+use rustc_type_ir::{DynKind, InternAs, InternIteratorElement, Interner, TypeFlags};\n \n use std::any::Any;\n use std::borrow::Borrow;\n@@ -2545,8 +2545,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n         reg: ty::Region<'tcx>,\n+        repr: DynKind,\n     ) -> Ty<'tcx> {\n-        self.mk_ty(Dynamic(obj, reg))\n+        self.mk_ty(Dynamic(obj, reg, repr))\n     }\n \n     #[inline]"}, {"sha": "855917fb8286932fb6514f4002a6924a2c38b5dc", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -467,7 +467,7 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 }\n             }\n \n-            Dynamic(dty, _) => {\n+            Dynamic(dty, _, _) => {\n                 for pred in *dty {\n                     match pred.skip_binder() {\n                         ExistentialPredicate::Trait(_) | ExistentialPredicate::Projection(_) => {"}, {"sha": "98b8a7386fe6a936de8c5ed1a6925584da54c146", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -171,7 +171,7 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n \n-            &ty::Dynamic(obj, r) => {\n+            &ty::Dynamic(obj, r, _) => {\n                 for predicate in obj.iter() {\n                     self.bound_computation(predicate, |computation, predicate| match predicate {\n                         ty::ExistentialPredicate::Trait(tr) => computation.add_substs(tr.substs),"}, {"sha": "042eeec3f4622eefcf41b8d547cb1e46ae715590", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -625,6 +625,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.intern_layout(self.scalar_pair(data_ptr, metadata))\n             }\n \n+            ty::Dynamic(_, _, ty::DynStar) => {\n+                let mut data = scalar_unit(Int(dl.ptr_sized_integer(), false));\n+                data.valid_range_mut().start = 0;\n+                let mut vtable = scalar_unit(Pointer);\n+                vtable.valid_range_mut().start = 1;\n+                tcx.intern_layout(self.scalar_pair(data, vtable))\n+            }\n+\n             // Arrays and slices.\n             ty::Array(element, mut count) => {\n                 if count.has_projections() {\n@@ -679,7 +687,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n             // Odd unit types.\n             ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,\n-            ty::Dynamic(..) | ty::Foreign(..) => {\n+            ty::Dynamic(_, _, ty::Dyn) | ty::Foreign(..) => {\n                 let mut unit = self.univariant_uninterned(\n                     ty,\n                     &[],\n@@ -2435,7 +2443,9 @@ where\n                 | ty::FnDef(..)\n                 | ty::GeneratorWitness(..)\n                 | ty::Foreign(..)\n-                | ty::Dynamic(..) => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n+                | ty::Dynamic(_, _, ty::Dyn) => {\n+                    bug!(\"TyAndLayout::field({:?}): not applicable\", this)\n+                }\n \n                 // Potentially-fat pointers.\n                 ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n@@ -2464,7 +2474,7 @@ where\n \n                     match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n                         ty::Slice(_) | ty::Str => TyMaybeWithLayout::Ty(tcx.types.usize),\n-                        ty::Dynamic(_, _) => {\n+                        ty::Dynamic(_, _, ty::Dyn) => {\n                             TyMaybeWithLayout::Ty(tcx.mk_imm_ref(\n                                 tcx.lifetimes.re_static,\n                                 tcx.mk_array(tcx.types.usize, 3),\n@@ -2533,6 +2543,22 @@ where\n                     }\n                 }\n \n+                ty::Dynamic(_, _, ty::DynStar) => {\n+                    if i == 0 {\n+                        TyMaybeWithLayout::Ty(tcx.types.usize)\n+                    } else if i == 1 {\n+                        // FIXME(dyn-star) same FIXME as above applies here too\n+                        TyMaybeWithLayout::Ty(\n+                            tcx.mk_imm_ref(\n+                                tcx.lifetimes.re_static,\n+                                tcx.mk_array(tcx.types.usize, 3),\n+                            ),\n+                        )\n+                    } else {\n+                        bug!(\"no field {i} on dyn*\")\n+                    }\n+                }\n+\n                 ty::Projection(_)\n                 | ty::Bound(..)\n                 | ty::Placeholder(..)\n@@ -2728,6 +2754,7 @@ impl<'tcx> ty::Instance<'tcx> {\n     // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),\n     // or should go through `FnAbi` instead, to avoid losing any\n     // adjustments `fn_abi_of_instance` might be performing.\n+    #[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n     fn fn_sig_for_fn_abi(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -2874,6 +2901,7 @@ impl<'tcx> ty::Instance<'tcx> {\n /// with `-Cpanic=abort` will look like they can't unwind when in fact they\n /// might (from a foreign exception or similar).\n #[inline]\n+#[tracing::instrument(level = \"debug\", skip(tcx))]\n pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: SpecAbi) -> bool {\n     if let Some(did) = fn_def_id {\n         // Special attribute for functions which can't unwind.\n@@ -3090,6 +3118,7 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     /// NB: that includes virtual calls, which are represented by \"direct calls\"\n     /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n     #[inline]\n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn fn_abi_of_instance(\n         &self,\n         instance: ty::Instance<'tcx>,\n@@ -3236,6 +3265,10 @@ pub fn adjust_for_rust_scalar<'tcx>(\n impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)\n     // arguments of this method, into a separate `struct`.\n+    #[tracing::instrument(\n+        level = \"debug\",\n+        skip(self, caller_location, fn_def_id, force_thin_self_ptr)\n+    )]\n     fn fn_abi_new_uncached(\n         &self,\n         sig: ty::PolyFnSig<'tcx>,\n@@ -3245,8 +3278,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n         force_thin_self_ptr: bool,\n     ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n-        debug!(\"fn_abi_new_uncached({:?}, {:?})\", sig, extra_args);\n-\n         let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);\n \n         let conv = conv_from_spec_abi(self.tcx(), sig.abi);\n@@ -3289,6 +3320,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n         let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {\n+            let span = tracing::debug_span!(\"arg_of\");\n+            let _entered = span.enter();\n             let is_return = arg_idx.is_none();\n \n             let layout = self.layout_of(ty)?;\n@@ -3345,6 +3378,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         Ok(self.tcx.arena.alloc(fn_abi))\n     }\n \n+    #[tracing::instrument(level = \"trace\", skip(self))]\n     fn fn_abi_adjust_for_abi(\n         &self,\n         fn_abi: &mut FnAbi<'tcx, Ty<'tcx>>,\n@@ -3419,6 +3453,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n+#[tracing::instrument(level = \"debug\", skip(cx))]\n fn make_thin_self_ptr<'tcx>(\n     cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),\n     layout: TyAndLayout<'tcx>,\n@@ -3430,7 +3465,7 @@ fn make_thin_self_ptr<'tcx>(\n         tcx.mk_mut_ptr(layout.ty)\n     } else {\n         match layout.abi {\n-            Abi::ScalarPair(..) => (),\n+            Abi::ScalarPair(..) | Abi::Scalar(..) => (),\n             _ => bug!(\"receiver type has unsupported layout: {:?}\", layout),\n         }\n "}, {"sha": "6641ab9b756369ab712a650b0c063d6ac8c2b41c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -58,6 +58,7 @@ use std::ops::ControlFlow;\n use std::{fmt, str};\n \n pub use crate::ty::diagnostics::*;\n+pub use rustc_type_ir::DynKind::*;\n pub use rustc_type_ir::InferTy::*;\n pub use rustc_type_ir::RegionKind::*;\n pub use rustc_type_ir::TyKind::*;\n@@ -1113,6 +1114,12 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n+impl<'tcx> ToPredicate<'tcx> for Predicate<'tcx> {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        self\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {"}, {"sha": "9db5a2894843ca3ebf1ed691fb52f3ce16104675", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -36,6 +36,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This should only be used outside of type inference. For example,\n     /// it assumes that normalization will succeed.\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n@@ -100,6 +101,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// N.B., currently, higher-ranked type bounds inhibit\n     /// normalization. Therefore, each time we erase them in\n     /// codegen, we need to normalize the contents.\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n     pub fn normalize_erasing_late_bound_regions<T>(\n         self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "f7d5d3116afb71300e9e2788be8e266e88e13e7a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -619,12 +619,16 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Adt(def, substs) => {\n                 p!(print_def_path(def.did(), substs));\n             }\n-            ty::Dynamic(data, r) => {\n+            ty::Dynamic(data, r, repr) => {\n                 let print_r = self.should_print_region(r);\n                 if print_r {\n                     p!(\"(\");\n                 }\n-                p!(\"dyn \", print(data));\n+                match repr {\n+                    ty::Dyn => p!(\"dyn \"),\n+                    ty::DynStar => p!(\"dyn* \"),\n+                }\n+                p!(print(data));\n                 if print_r {\n                     p!(\" + \", print(r), \")\");\n                 }"}, {"sha": "5b3750b8b4da0a6e5c10af3bea0dbdd06ffd5268", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -441,7 +441,9 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n \n         (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),\n \n-        (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {\n+        (&ty::Dynamic(a_obj, a_region, a_repr), &ty::Dynamic(b_obj, b_region, b_repr))\n+            if a_repr == b_repr =>\n+        {\n             let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {\n                 relation.relate_with_variance(\n                     ty::Contravariant,\n@@ -450,7 +452,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n                     b_region,\n                 )\n             })?;\n-            Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))\n+            Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound, a_repr))\n         }\n \n         (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))"}, {"sha": "d7e74d675de56d559f633f1d9cb139593f88a234", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1028,9 +1028,11 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             ty::Array(typ, sz) => ty::Array(typ.try_fold_with(folder)?, sz.try_fold_with(folder)?),\n             ty::Slice(typ) => ty::Slice(typ.try_fold_with(folder)?),\n             ty::Adt(tid, substs) => ty::Adt(tid, substs.try_fold_with(folder)?),\n-            ty::Dynamic(trait_ty, region) => {\n-                ty::Dynamic(trait_ty.try_fold_with(folder)?, region.try_fold_with(folder)?)\n-            }\n+            ty::Dynamic(trait_ty, region, representation) => ty::Dynamic(\n+                trait_ty.try_fold_with(folder)?,\n+                region.try_fold_with(folder)?,\n+                representation,\n+            ),\n             ty::Tuple(ts) => ty::Tuple(ts.try_fold_with(folder)?),\n             ty::FnDef(def_id, substs) => ty::FnDef(def_id, substs.try_fold_with(folder)?),\n             ty::FnPtr(f) => ty::FnPtr(f.try_fold_with(folder)?),\n@@ -1074,7 +1076,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             }\n             ty::Slice(typ) => typ.visit_with(visitor),\n             ty::Adt(_, substs) => substs.visit_with(visitor),\n-            ty::Dynamic(ref trait_ty, ref reg) => {\n+            ty::Dynamic(ref trait_ty, ref reg, _) => {\n                 trait_ty.visit_with(visitor)?;\n                 reg.visit_with(visitor)\n             }"}, {"sha": "18169045c901cf513ec0e509f86090874fdc9ccc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -692,6 +692,9 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n }\n \n impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {\n+    /// Given an existential predicate like `?Self: PartialEq<u32>` (e.g., derived from `dyn PartialEq<u32>`),\n+    /// and a concrete type `self_ty`, returns a full predicate where the existentially quantified variable `?Self`\n+    /// has been replaced with `self_ty` (e.g., `self_ty: PartialEq<u32>`, in our example).\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n         match self.skip_binder() {\n@@ -1849,7 +1852,12 @@ impl<'tcx> Ty<'tcx> {\n \n     #[inline]\n     pub fn is_trait(self) -> bool {\n-        matches!(self.kind(), Dynamic(..))\n+        matches!(self.kind(), Dynamic(_, _, ty::Dyn))\n+    }\n+\n+    #[inline]\n+    pub fn is_dyn_star(self) -> bool {\n+        matches!(self.kind(), Dynamic(_, _, ty::DynStar))\n     }\n \n     #[inline]"}, {"sha": "a3e11bbf056b358d9c8f0e502e2e1b3f544eaef9", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -152,7 +152,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             ty::Projection(data) => {\n                 stack.extend(data.substs.iter().rev());\n             }\n-            ty::Dynamic(obj, lt) => {\n+            ty::Dynamic(obj, lt, _) => {\n                 stack.push(lt.into());\n                 stack.extend(obj.iter().rev().flat_map(|predicate| {\n                     let (substs, opt_ty) = match predicate.skip_binder() {"}, {"sha": "98bdaf0bc62e262275065d5090f10caf0a3bd8a7", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -216,13 +216,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 let from_ty = CastTy::from_ty(ty);\n                 let cast_ty = CastTy::from_ty(expr.ty);\n+                debug!(\"ExprKind::Cast from_ty={from_ty:?}, cast_ty={:?}/{cast_ty:?}\", expr.ty,);\n                 let cast_kind = match (from_ty, cast_ty) {\n                     (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n                         CastKind::PointerExposeAddress\n                     }\n                     (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => {\n                         CastKind::PointerFromExposedAddress\n                     }\n+                    (_, Some(CastTy::DynStar)) => CastKind::DynStar,\n                     (_, _) => CastKind::Misc,\n                 };\n                 block.and(Rvalue::Cast(cast_kind, source, expr.ty))"}, {"sha": "2a843ab0b8b4b6e3be14773b56bddb79c35be373", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -689,7 +689,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 mir::CastKind::Pointer(PointerCast::Unsize),\n                 ref operand,\n                 target_ty,\n-            ) => {\n+            )\n+            | mir::Rvalue::Cast(mir::CastKind::DynStar, ref operand, target_ty) => {\n                 let target_ty = self.monomorphize(target_ty);\n                 let source_ty = operand.ty(self.body, self.tcx);\n                 let source_ty = self.monomorphize(source_ty);\n@@ -698,7 +699,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 // This could also be a different Unsize instruction, like\n                 // from a fixed sized array to a slice. But we are only\n                 // interested in things that produce a vtable.\n-                if target_ty.is_trait() && !source_ty.is_trait() {\n+                if (target_ty.is_trait() && !source_ty.is_trait())\n+                    || (target_ty.is_dyn_star() && !source_ty.is_dyn_star())\n+                {\n                     create_mono_items_for_vtable_methods(\n                         self.tcx,\n                         target_ty,\n@@ -1112,6 +1115,9 @@ fn find_vtable_types_for_unsizing<'tcx>(\n             ptr_vtable(source_ty.boxed_ty(), target_ty.boxed_ty())\n         }\n \n+        // T as dyn* Trait\n+        (_, &ty::Dynamic(_, _, ty::DynStar)) => ptr_vtable(source_ty, target_ty),\n+\n         (&ty::Adt(source_adt_def, source_substs), &ty::Adt(target_adt_def, target_substs)) => {\n             assert_eq!(source_adt_def, target_adt_def);\n "}, {"sha": "b47f0c0978381dcfd928e1296ce945cecfeade73", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -567,7 +567,8 @@ impl<'a> Parser<'a> {\n         self.check_keyword(kw::Dyn)\n             && (!self.token.uninterpolated_span().rust_2015()\n                 || self.look_ahead(1, |t| {\n-                    t.can_begin_bound() && !can_continue_type_after_non_fn_ident(t)\n+                    (t.can_begin_bound() || t.kind == TokenKind::BinOp(token::Star))\n+                        && !can_continue_type_after_non_fn_ident(t)\n                 }))\n     }\n \n@@ -576,10 +577,18 @@ impl<'a> Parser<'a> {\n     /// Note that this does *not* parse bare trait objects.\n     fn parse_dyn_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n         self.bump(); // `dyn`\n+\n+        // parse dyn* types\n+        let syntax = if self.eat(&TokenKind::BinOp(token::Star)) {\n+            TraitObjectSyntax::DynStar\n+        } else {\n+            TraitObjectSyntax::Dyn\n+        };\n+\n         // Always parse bounds greedily for better error recovery.\n         let bounds = self.parse_generic_bounds(None)?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n-        Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn))\n+        Ok(TyKind::TraitObject(bounds, syntax))\n     }\n \n     /// Parses a type starting with a path."}, {"sha": "fcc22e22cc18cb104e3c68909a41dba0ce559ccb", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -651,6 +651,7 @@ symbols! {\n         dropck_parametricity,\n         dylib,\n         dyn_metadata,\n+        dyn_star,\n         dyn_trait,\n         e,\n         edition_macro_pats,"}, {"sha": "aa65a72ab646a737301b943bb7fd7efccfba2e54", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -627,10 +627,13 @@ fn encode_ty<'tcx>(\n         }\n \n         // Trait types\n-        ty::Dynamic(predicates, region) => {\n+        ty::Dynamic(predicates, region, kind) => {\n             // u3dynI<element-type1[..element-typeN]>E, where <element-type> is <predicate>, as\n             // vendor extended type.\n-            let mut s = String::from(\"u3dynI\");\n+            let mut s = String::from(match kind {\n+                ty::Dyn => \"u3dynI\",\n+                ty::DynStar => \"u7dynstarI\",\n+            });\n             s.push_str(&encode_predicates(tcx, predicates, dict, options));\n             s.push_str(&encode_region(tcx, *region, dict, options));\n             s.push('E');"}, {"sha": "79d0ef69ba733576b9acb4dcb16591fce64d4409", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -479,8 +479,12 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 })?;\n             }\n \n-            ty::Dynamic(predicates, r) => {\n-                self.push(\"D\");\n+            ty::Dynamic(predicates, r, kind) => {\n+                self.push(match kind {\n+                    ty::Dyn => \"D\",\n+                    // FIXME(dyn-star): need to update v0 mangling docs\n+                    ty::DynStar => \"D*\",\n+                });\n                 self = self.print_dyn_existential(predicates)?;\n                 self = r.print(self)?;\n             }"}, {"sha": "e11a42201443dbcd623880ef1e129fbbccb4a301", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            if let ty::Dynamic(traits, _) = self_ty.kind() {\n+            if let ty::Dynamic(traits, _, _) = self_ty.kind() {\n                 for t in traits.iter() {\n                     if let ty::ExistentialPredicate::Trait(trait_ref) = t.skip_binder() {\n                         flags.push((sym::_Self, Some(self.tcx.def_path_str(trait_ref.def_id))))"}, {"sha": "13d9c160038f2820e580a2c45b1936c49d1dc527", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1067,7 +1067,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         object_ty: Ty<'tcx>,\n     ) {\n-        let ty::Dynamic(predicates, _) = object_ty.kind() else { return; };\n+        let ty::Dynamic(predicates, _, ty::Dyn) = object_ty.kind() else { return; };\n         let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n \n         for predicate in predicates.iter() {\n@@ -1365,7 +1365,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let trait_pred = self.resolve_vars_if_possible(trait_pred);\n         let ty = trait_pred.skip_binder().self_ty();\n         let is_object_safe = match ty.kind() {\n-            ty::Dynamic(predicates, _) => {\n+            ty::Dynamic(predicates, _, ty::Dyn) => {\n                 // If the `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n                 predicates\n                     .principal_def_id()\n@@ -1425,7 +1425,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut spans_and_needs_box = vec![];\n \n         match liberated_sig.output().kind() {\n-            ty::Dynamic(predicates, _) => {\n+            ty::Dynamic(predicates, _, _) => {\n                 let cause = ObligationCause::misc(ret_ty.span, fn_hir_id);\n                 let param_env = ty::ParamEnv::empty();\n "}, {"sha": "f2779ce2db140afbd75f212334508d5e5cec7178", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -600,7 +600,7 @@ fn object_ty_for_trait<'tcx>(\n     let existential_predicates = tcx\n         .mk_poly_existential_predicates(iter::once(trait_predicate).chain(projection_predicates));\n \n-    let object_ty = tcx.mk_dynamic(existential_predicates, lifetime);\n+    let object_ty = tcx.mk_dynamic(existential_predicates, lifetime, ty::Dyn);\n \n     debug!(\"object_ty_for_trait: object_ty=`{}`\", object_ty);\n "}, {"sha": "a80527f63a00429dc09852228cfeed7772bc5167", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1039,7 +1039,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Ref(_, _, _)\n             | ty::FnDef(_, _)\n             | ty::FnPtr(_)\n-            | ty::Dynamic(_, _)\n+            | ty::Dynamic(_, _, _)\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)"}, {"sha": "43c4ddd3f6faf71aa090c37ebbf66a9c4a312baf", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -784,7 +784,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let upcast_trait_ref;\n         match (source.kind(), target.kind()) {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n-            (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n+            (&ty::Dynamic(ref data_a, r_a, repr_a), &ty::Dynamic(ref data_b, r_b, repr_b))\n+                if repr_a == repr_b =>\n+            {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n@@ -810,7 +812,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_b);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n@@ -888,7 +890,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut nested = vec![];\n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (auto traits and lifetime subtyping).\n-            (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n+            (&ty::Dynamic(ref data_a, r_a, ty::Dyn), &ty::Dynamic(ref data_b, r_b, ty::Dyn)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let iter = data_a\n@@ -907,7 +909,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, ty::Dyn);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n@@ -934,7 +936,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // `T` -> `Trait`\n-            (_, &ty::Dynamic(ref data, r)) => {\n+            (_, &ty::Dynamic(ref data, r, ty::Dyn)) => {\n                 let mut object_dids = data.auto_traits().chain(data.principal_def_id());\n                 if let Some(did) = object_dids.find(|did| !tcx.is_object_safe(*did)) {\n                     return Err(TraitNotObjectSafe(did));"}, {"sha": "9efc95b4405cea59184ca4295076723582423acc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1865,6 +1865,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n+            | ty::Dynamic(_, _, ty::DynStar)\n             | ty::Error(_) => {\n                 // safe for everything\n                 Where(ty::Binder::dummy(Vec::new()))"}, {"sha": "f95e217da3073997267fd9d936e41c7c8ee5b0b4", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -639,7 +639,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                     }\n                 }\n \n-                ty::Dynamic(data, r) => {\n+                ty::Dynamic(data, r, _) => {\n                     // WfObject\n                     //\n                     // Here, we defer WF checking due to higher-ranked"}, {"sha": "45d5ea93d547fd5f4139afaa2dad8541f5475071", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -326,7 +326,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     )),\n                 })\n             }\n-            ty::Dynamic(predicates, region) => chalk_ir::TyKind::Dyn(chalk_ir::DynTy {\n+            // FIXME(dyn-star): handle the dynamic kind (dyn or dyn*)\n+            ty::Dynamic(predicates, region, _kind) => chalk_ir::TyKind::Dyn(chalk_ir::DynTy {\n                 bounds: predicates.lower_into(interner),\n                 lifetime: region.lower_into(interner),\n             }),"}, {"sha": "9266e4e3f6efba1fc5bea551e4d2612277e828ff", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -389,7 +389,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n \n     let self_ty = trait_ref.self_ty();\n     let self_ty_matches = match self_ty.kind() {\n-        ty::Dynamic(ref data, re) if re.is_static() => data.principal().is_none(),\n+        ty::Dynamic(ref data, re, _) if re.is_static() => data.principal().is_none(),\n         _ => false,\n     };\n "}, {"sha": "6d54924e515fca03c725680bf81b3aecda1a0682", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -18,6 +18,34 @@ use self::TyKind::*;\n use rustc_data_structures::stable_hasher::HashStable;\n use rustc_serialize::{Decodable, Decoder, Encodable};\n \n+/// Specifies how a trait object is represented.\n+#[derive(\n+    Clone,\n+    Copy,\n+    PartialEq,\n+    Eq,\n+    PartialOrd,\n+    Ord,\n+    Hash,\n+    Debug,\n+    Encodable,\n+    Decodable,\n+    HashStable_Generic\n+)]\n+pub enum DynKind {\n+    /// An unsized `dyn Trait` object\n+    Dyn,\n+    /// A sized `dyn* Trait` object\n+    ///\n+    /// These objects are represented as a `(data, vtable)` pair where `data` is a ptr-sized value\n+    /// (often a pointer to the real object, but not necessarily) and `vtable` is a pointer to\n+    /// the vtable for `dyn* Trait`. The representation is essentially the same as `&dyn Trait`\n+    /// or similar, but the drop function included in the vtable is responsible for freeing the\n+    /// underlying storage if needed. This allows a `dyn*` object to be treated agnostically with\n+    /// respect to whether it points to a `Box<T>`, `Rc<T>`, etc.\n+    DynStar,\n+}\n+\n /// Defines the kinds of types used by the type system.\n ///\n /// Types written by the user start out as `hir::TyKind` and get\n@@ -95,7 +123,7 @@ pub enum TyKind<I: Interner> {\n     FnPtr(I::PolyFnSig),\n \n     /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.\n-    Dynamic(I::ListBinderExistentialPredicate, I::Region),\n+    Dynamic(I::ListBinderExistentialPredicate, I::Region, DynKind),\n \n     /// The anonymous type of a closure. Used to represent the type of `|a| a`.\n     ///\n@@ -218,7 +246,7 @@ const fn tykind_discriminant<I: Interner>(value: &TyKind<I>) -> usize {\n         Ref(_, _, _) => 11,\n         FnDef(_, _) => 12,\n         FnPtr(_) => 13,\n-        Dynamic(_, _) => 14,\n+        Dynamic(..) => 14,\n         Closure(_, _) => 15,\n         Generator(_, _, _) => 16,\n         GeneratorWitness(_) => 17,\n@@ -252,7 +280,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n             FnDef(d, s) => FnDef(d.clone(), s.clone()),\n             FnPtr(s) => FnPtr(s.clone()),\n-            Dynamic(p, r) => Dynamic(p.clone(), r.clone()),\n+            Dynamic(p, r, repr) => Dynamic(p.clone(), r.clone(), repr.clone()),\n             Closure(d, s) => Closure(d.clone(), s.clone()),\n             Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n             GeneratorWitness(g) => GeneratorWitness(g.clone()),\n@@ -297,9 +325,10 @@ impl<I: Interner> PartialEq for TyKind<I> {\n                     __self_0 == __arg_1_0 && __self_1 == __arg_1_1\n                 }\n                 (&FnPtr(ref __self_0), &FnPtr(ref __arg_1_0)) => __self_0 == __arg_1_0,\n-                (&Dynamic(ref __self_0, ref __self_1), &Dynamic(ref __arg_1_0, ref __arg_1_1)) => {\n-                    __self_0 == __arg_1_0 && __self_1 == __arg_1_1\n-                }\n+                (\n+                    &Dynamic(ref __self_0, ref __self_1, ref self_repr),\n+                    &Dynamic(ref __arg_1_0, ref __arg_1_1, ref arg_repr),\n+                ) => __self_0 == __arg_1_0 && __self_1 == __arg_1_1 && self_repr == arg_repr,\n                 (&Closure(ref __self_0, ref __self_1), &Closure(ref __arg_1_0, ref __arg_1_1)) => {\n                     __self_0 == __arg_1_0 && __self_1 == __arg_1_1\n                 }\n@@ -384,12 +413,16 @@ impl<I: Interner> Ord for TyKind<I> {\n                     }\n                 }\n                 (&FnPtr(ref __self_0), &FnPtr(ref __arg_1_0)) => Ord::cmp(__self_0, __arg_1_0),\n-                (&Dynamic(ref __self_0, ref __self_1), &Dynamic(ref __arg_1_0, ref __arg_1_1)) => {\n-                    match Ord::cmp(__self_0, __arg_1_0) {\n-                        Ordering::Equal => Ord::cmp(__self_1, __arg_1_1),\n+                (\n+                    &Dynamic(ref __self_0, ref __self_1, ref self_repr),\n+                    &Dynamic(ref __arg_1_0, ref __arg_1_1, ref arg_repr),\n+                ) => match Ord::cmp(__self_0, __arg_1_0) {\n+                    Ordering::Equal => match Ord::cmp(__self_1, __arg_1_1) {\n+                        Ordering::Equal => Ord::cmp(self_repr, arg_repr),\n                         cmp => cmp,\n-                    }\n-                }\n+                    },\n+                    cmp => cmp,\n+                },\n                 (&Closure(ref __self_0, ref __self_1), &Closure(ref __arg_1_0, ref __arg_1_1)) => {\n                     match Ord::cmp(__self_0, __arg_1_0) {\n                         Ordering::Equal => Ord::cmp(__self_1, __arg_1_1),\n@@ -492,10 +525,11 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n                 hash::Hash::hash(&tykind_discriminant(self), state);\n                 hash::Hash::hash(__self_0, state)\n             }\n-            (&Dynamic(ref __self_0, ref __self_1),) => {\n+            (&Dynamic(ref __self_0, ref __self_1, ref repr),) => {\n                 hash::Hash::hash(&tykind_discriminant(self), state);\n                 hash::Hash::hash(__self_0, state);\n-                hash::Hash::hash(__self_1, state)\n+                hash::Hash::hash(__self_1, state);\n+                hash::Hash::hash(repr, state)\n             }\n             (&Closure(ref __self_0, ref __self_1),) => {\n                 hash::Hash::hash(&tykind_discriminant(self), state);\n@@ -570,7 +604,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n             Ref(f0, f1, f2) => Formatter::debug_tuple_field3_finish(f, \"Ref\", f0, f1, f2),\n             FnDef(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"FnDef\", f0, f1),\n             FnPtr(f0) => Formatter::debug_tuple_field1_finish(f, \"FnPtr\", f0),\n-            Dynamic(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Dynamic\", f0, f1),\n+            Dynamic(f0, f1, f2) => Formatter::debug_tuple_field3_finish(f, \"Dynamic\", f0, f1, f2),\n             Closure(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Closure\", f0, f1),\n             Generator(f0, f1, f2) => {\n                 Formatter::debug_tuple_field3_finish(f, \"Generator\", f0, f1, f2)\n@@ -659,9 +693,10 @@ where\n             FnPtr(polyfnsig) => e.emit_enum_variant(disc, |e| {\n                 polyfnsig.encode(e);\n             }),\n-            Dynamic(l, r) => e.emit_enum_variant(disc, |e| {\n+            Dynamic(l, r, repr) => e.emit_enum_variant(disc, |e| {\n                 l.encode(e);\n                 r.encode(e);\n+                repr.encode(e);\n             }),\n             Closure(def_id, substs) => e.emit_enum_variant(disc, |e| {\n                 def_id.encode(e);\n@@ -748,7 +783,7 @@ where\n             11 => Ref(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n             12 => FnDef(Decodable::decode(d), Decodable::decode(d)),\n             13 => FnPtr(Decodable::decode(d)),\n-            14 => Dynamic(Decodable::decode(d), Decodable::decode(d)),\n+            14 => Dynamic(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n             15 => Closure(Decodable::decode(d), Decodable::decode(d)),\n             16 => Generator(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n             17 => GeneratorWitness(Decodable::decode(d)),\n@@ -845,9 +880,10 @@ where\n             FnPtr(polyfnsig) => {\n                 polyfnsig.hash_stable(__hcx, __hasher);\n             }\n-            Dynamic(l, r) => {\n+            Dynamic(l, r, repr) => {\n                 l.hash_stable(__hcx, __hasher);\n                 r.hash_stable(__hcx, __hasher);\n+                repr.hash_stable(__hcx, __hasher);\n             }\n             Closure(def_id, substs) => {\n                 def_id.hash_stable(__hcx, __hasher);"}, {"sha": "6d2ba7c1c950be209baf0e2d0c99016b82ddd767", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -27,6 +27,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{\n     self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n@@ -1252,6 +1253,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_bounds: &[hir::PolyTraitRef<'_>],\n         lifetime: &hir::Lifetime,\n         borrowed: bool,\n+        representation: DynKind,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n@@ -1572,7 +1574,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n         debug!(\"region_bound: {:?}\", region_bound);\n \n-        let ty = tcx.mk_dynamic(existential_predicates, region_bound);\n+        let ty = tcx.mk_dynamic(existential_predicates, region_bound, representation);\n         debug!(\"trait_object_type: {:?}\", ty);\n         ty\n     }\n@@ -2618,9 +2620,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     Some(ast_ty),\n                 ))\n             }\n-            hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n+            hir::TyKind::TraitObject(bounds, ref lifetime, repr) => {\n                 self.maybe_lint_bare_trait(ast_ty, in_path);\n-                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed)\n+                let repr = match repr {\n+                    TraitObjectSyntax::Dyn | TraitObjectSyntax::None => ty::Dyn,\n+                    TraitObjectSyntax::DynStar => ty::DynStar,\n+                };\n+                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed, repr)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(ref maybe_qself, ref path)) => {\n                 debug!(?maybe_qself, ?path);"}, {"sha": "81a979865acc3bef7e38809da9397e043c55c4a9", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 83, "deletions": 4, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -35,12 +35,13 @@ use crate::type_error_struct;\n use hir::def_id::LOCAL_CRATE;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_infer::traits::{Obligation, ObligationCause, ObligationCauseCode};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable, VariantDef};\n+use rustc_middle::ty::{self, Binder, Ty, TypeAndMut, TypeVisitable, VariantDef};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -52,9 +53,12 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n /// a function context.\n #[derive(Debug)]\n pub struct CastCheck<'tcx> {\n+    /// The expression whose value is being casted\n     expr: &'tcx hir::Expr<'tcx>,\n+    /// The source type for the cast expression\n     expr_ty: Ty<'tcx>,\n     expr_span: Span,\n+    /// The target type. That is, the type we are casting to.\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n@@ -101,7 +105,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         Ok(match *t.kind() {\n             ty::Slice(_) | ty::Str => Some(PointerKind::Length),\n-            ty::Dynamic(ref tty, ..) => Some(PointerKind::VTable(tty.principal_def_id())),\n+            ty::Dynamic(ref tty, _, ty::Dyn) => Some(PointerKind::VTable(tty.principal_def_id())),\n             ty::Adt(def, substs) if def.is_struct() => match def.non_enum_variant().fields.last() {\n                 None => Some(PointerKind::Thin),\n                 Some(f) => {\n@@ -138,6 +142,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             | ty::Generator(..)\n             | ty::Adt(..)\n             | ty::Never\n+            | ty::Dynamic(_, _, ty::DynStar)\n             | ty::Error(_) => {\n                 let reported = self\n                     .tcx\n@@ -199,8 +204,76 @@ fn make_invalid_casting_error<'a, 'tcx>(\n     )\n }\n \n+pub enum CastCheckResult<'tcx> {\n+    Ok,\n+    Deferred(CastCheck<'tcx>),\n+    Err(ErrorGuaranteed),\n+}\n+\n+pub fn check_cast<'tcx>(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: Ty<'tcx>,\n+    cast_span: Span,\n+    span: Span,\n+) -> CastCheckResult<'tcx> {\n+    if cast_ty.is_dyn_star() {\n+        check_dyn_star_cast(fcx, expr, expr_ty, cast_ty)\n+    } else {\n+        match CastCheck::new(fcx, expr, expr_ty, cast_ty, cast_span, span) {\n+            Ok(check) => CastCheckResult::Deferred(check),\n+            Err(e) => CastCheckResult::Err(e),\n+        }\n+    }\n+}\n+\n+fn check_dyn_star_cast<'tcx>(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: Ty<'tcx>,\n+) -> CastCheckResult<'tcx> {\n+    // Find the bounds in the dyn*. For eaxmple, if we have\n+    //\n+    //    let x = 22_usize as dyn* (Clone + Debug + 'static)\n+    //\n+    // this would return `existential_predicates = [?Self: Clone, ?Self: Debug]` and `region = 'static`.\n+    let (existential_predicates, region) = match cast_ty.kind() {\n+        ty::Dynamic(predicates, region, ty::DynStar) => (predicates, region),\n+        _ => panic!(\"Invalid dyn* cast_ty\"),\n+    };\n+\n+    let cause = ObligationCause::new(\n+        expr.span,\n+        fcx.body_id,\n+        // FIXME(dyn-star): Use a better obligation cause code\n+        ObligationCauseCode::MiscObligation,\n+    );\n+\n+    // For each existential predicate (e.g., `?Self: Clone`) substitute\n+    // the type of the expression (e.g., `usize` in our example above)\n+    // and then require that the resulting predicate (e.g., `usize: Clone`)\n+    // holds (it does).\n+    for existential_predicate in existential_predicates.iter() {\n+        let predicate = existential_predicate.with_self_ty(fcx.tcx, expr_ty);\n+        fcx.register_predicate(Obligation::new(cause.clone(), fcx.param_env, predicate));\n+    }\n+\n+    // Enforce the region bound `'static` (e.g., `usize: 'static`, in our example).\n+    fcx.register_predicate(Obligation::new(\n+        cause,\n+        fcx.param_env,\n+        fcx.tcx.mk_predicate(Binder::dummy(ty::PredicateKind::TypeOutlives(\n+            ty::OutlivesPredicate(expr_ty, *region),\n+        ))),\n+    ));\n+\n+    CastCheckResult::Ok\n+}\n+\n impl<'a, 'tcx> CastCheck<'tcx> {\n-    pub fn new(\n+    fn new(\n         fcx: &FnCtxt<'a, 'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n         expr_ty: Ty<'tcx>,\n@@ -215,7 +288,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // cases now. We do a more thorough check at the end, once\n         // inference is more completely known.\n         match cast_ty.kind() {\n-            ty::Dynamic(..) | ty::Slice(..) => {\n+            ty::Dynamic(_, _, ty::Dyn) | ty::Slice(..) => {\n                 let reported = check.report_cast_to_unsized_type(fcx);\n                 Err(reported)\n             }\n@@ -854,6 +927,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             (Int(Char) | Int(Bool), Int(_)) => Ok(CastKind::PrimIntCast),\n \n             (Int(_) | Float, Int(_) | Float) => Ok(CastKind::NumericCast),\n+\n+            // FIXME(dyn-star): this needs more conditions...\n+            (_, DynStar) => Ok(CastKind::DynStarCast),\n+\n+            // FIXME(dyn-star): do we want to allow dyn* upcasting or other casts?\n+            (DynStar, _) => Err(CastError::IllegalCast),\n         }\n     }\n "}, {"sha": "93b00850069c277e18eea35b30367b11386c32b7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -3,18 +3,15 @@\n //! See `mod.rs` for more context on type checking in general.\n \n use crate::astconv::AstConv as _;\n-use crate::check::cast;\n+use crate::check::cast::{self, CastCheckResult};\n use crate::check::coercion::CoerceMany;\n use crate::check::fatally_break_rust;\n use crate::check::method::SelfSource;\n-use crate::check::report_unexpected_variant_res;\n-use crate::check::BreakableCtxt;\n-use crate::check::Diverges;\n-use crate::check::DynamicCoerceMany;\n use crate::check::Expectation::{self, ExpectCastableToType, ExpectHasType, NoExpectation};\n-use crate::check::FnCtxt;\n-use crate::check::Needs;\n-use crate::check::TupleArgumentsFlag::DontTupleArguments;\n+use crate::check::{\n+    report_unexpected_variant_res, BreakableCtxt, Diverges, DynamicCoerceMany, FnCtxt, Needs,\n+    TupleArgumentsFlag::DontTupleArguments,\n+};\n use crate::errors::{\n     FieldMultiplySpecifiedInInitializer, FunctionalRecordUpdateOnNonStruct,\n     YieldExprOutsideOfGenerator,\n@@ -1252,16 +1249,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-            match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n-                Ok(cast_check) => {\n+            match cast::check_cast(self, e, t_expr, t_cast, t.span, expr.span) {\n+                CastCheckResult::Ok => t_cast,\n+                CastCheckResult::Deferred(cast_check) => {\n                     debug!(\n                         \"check_expr_cast: deferring cast from {:?} to {:?}: {:?}\",\n                         t_cast, t_expr, cast_check,\n                     );\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(_) => self.tcx.ty_error(),\n+                CastCheckResult::Err(ErrorGuaranteed { .. }) => self.tcx.ty_error(),\n             }\n         }\n     }"}, {"sha": "ee0ad7b5d0ab4a7995e46bf78ff2fbf25e057acf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     })\n                 }\n-                ty::Dynamic(data, _) => {\n+                ty::Dynamic(data, _, ty::Dyn) => {\n                     data.iter().find_map(|pred| {\n                         if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n                         && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()"}, {"sha": "7ab6d9e2bab12acebd9a92a4274d5a9a0a68f452", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -527,7 +527,7 @@ fn check_must_not_suspend_ty<'tcx>(\n             }\n             has_emitted\n         }\n-        ty::Dynamic(binder, _) => {\n+        ty::Dynamic(binder, _, _) => {\n             let mut has_emitted = false;\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {"}, {"sha": "2d459b2cc0e32b19ba78c722d803d76b9f934c83", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -537,7 +537,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 bound_spans.push((self.tcx.def_span(def.did()), msg))\n                             }\n                             // Point at the trait object that couldn't satisfy the bound.\n-                            ty::Dynamic(preds, _) => {\n+                            ty::Dynamic(preds, _, _) => {\n                                 for pred in preds.iter() {\n                                     match pred.skip_binder() {\n                                         ty::ExistentialPredicate::Trait(tr) => bound_spans"}, {"sha": "eaf0310d57aeca595c744cf9ee437a31610091c1", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_invariant_substs(current, substs, variance);\n             }\n \n-            ty::Dynamic(data, r) => {\n+            ty::Dynamic(data, r, _) => {\n                 // The type `Foo<T+'a>` is contravariant w/r/t `'a`:\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(current, r, contra);"}, {"sha": "c8875c272bb08cb20d8d3c330d248a5d0fd832e6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -1600,7 +1600,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let path = external_path(cx, did, false, ThinVec::new(), InternalSubsts::empty());\n             Type::Path { path }\n         }\n-        ty::Dynamic(obj, ref reg) => {\n+        ty::Dynamic(obj, ref reg, _) => {\n             // HACK: pick the first `did` as the `did` of the trait object. Someone\n             // might want to implement \"native\" support for marker-trait-only\n             // trait objects."}, {"sha": "e49caf649f892c53d0606134218d4f654387218b", "filename": "src/test/ui/dyn-star/const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fconst.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(dyn_star)]\n+#![allow(unused, incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn make_dyn_star() {\n+    let i = 42usize;\n+    let dyn_i: dyn* Debug = i as dyn* Debug;\n+}\n+\n+fn main() {\n+    make_dyn_star();\n+}"}, {"sha": "46b232f3dd39996108697efe8476522100d7e379", "filename": "src/test/ui/dyn-star/drop.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+// check-run-results\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+#[derive(Debug)]\n+struct Foo(usize);\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"destructor called\");\n+    }\n+}\n+\n+fn make_dyn_star(i: Foo) {\n+    let _dyn_i: dyn* Debug = i as dyn* Debug;\n+}\n+\n+fn main() {\n+    make_dyn_star(Foo(42));\n+}"}, {"sha": "dadb33ccf3ac33989e45432bfaf34853588e6273", "filename": "src/test/ui/dyn-star/drop.run.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.run.stdout?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1 @@\n+destructor called"}, {"sha": "33eff80a5fe70276a472ad42a4345ea00075a002", "filename": "src/test/ui/dyn-star/error.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ferror.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,13 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {}\n+\n+fn make_dyn_star() {\n+    let i = 42;\n+    let dyn_i: dyn* Foo = i as dyn* Foo; //~ ERROR trait bound `{integer}: Foo` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "d612ccc630ea8a0bb01b97b8370a585cf96043c3", "filename": "src/test/ui/dyn-star/error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ferror.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ferror.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ferror.stderr?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `{integer}: Foo` is not satisfied\n+  --> $DIR/error.rs:10:27\n+   |\n+LL |     let dyn_i: dyn* Foo = i as dyn* Foo;\n+   |                           ^ the trait `Foo` is not implemented for `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4756661cf41b7318d27fccb2af1c9871de643880", "filename": "src/test/ui/dyn-star/feature-gate-dyn_star.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,9 @@\n+// Feature gate test for dyn_star\n+\n+/// dyn* is not necessarily the final surface syntax (if we have one at all),\n+/// but for now we will support it to aid in writing tests independently.\n+pub fn dyn_star_parameter(_: &dyn* Send) {\n+    //~^ dyn* trait objects are unstable\n+}\n+\n+fn main() {}"}, {"sha": "2767e9478e2e8df8df4d0ed7e1ea8d96d0b92853", "filename": "src/test/ui/dyn-star/feature-gate-dyn_star.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: dyn* trait objects are unstable\n+  --> $DIR/feature-gate-dyn_star.rs:5:31\n+   |\n+LL | pub fn dyn_star_parameter(_: &dyn* Send) {\n+   |                               ^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(dyn_star)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "708ffa25d6feef70fb2e39d934a88648a39a7c25", "filename": "src/test/ui/dyn-star/make-dyn-star.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn make_dyn_star(i: usize) {\n+    let _dyn_i: dyn* Debug = i as dyn* Debug;\n+}\n+\n+fn main() {\n+    make_dyn_star(42);\n+}"}, {"sha": "d04958ca2aac9d56fedf02a96c7e9d8205be25c1", "filename": "src/test/ui/dyn-star/method.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmethod.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn get(&self) -> usize;\n+}\n+\n+impl Foo for usize {\n+    fn get(&self) -> usize {\n+        *self\n+    }\n+}\n+\n+fn invoke_dyn_star(i: dyn* Foo) -> usize {\n+    i.get()\n+}\n+\n+fn make_and_invoke_dyn_star(i: usize) -> usize {\n+    let dyn_i: dyn* Foo = i as dyn* Foo;\n+    invoke_dyn_star(dyn_i)\n+}\n+\n+fn main() {\n+    println!(\"{}\", make_and_invoke_dyn_star(42));\n+}"}, {"sha": "618c72562b2a7f18179d8cb972fe7de454e2fd47", "filename": "src/test/ui/dyn-star/syntax.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -0,0 +1,11 @@\n+// Make sure we can parse the `dyn* Trait` syntax\n+//\n+// check-pass\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+pub fn dyn_star_parameter(_: dyn* Send) {\n+}\n+\n+fn main() {}"}, {"sha": "cc04ac052040e30a37be98c8f17be97365dcf820", "filename": "src/test/ui/parser/trait-object-delimiters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -6,7 +6,7 @@ fn foo1(_: &dyn Drop + AsRef<str>) {} //~ ERROR ambiguous `+` in a type\n fn foo2(_: &dyn (Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n \n fn foo3(_: &dyn {Drop + AsRef<str>}) {} //~ ERROR expected parameter name, found `{`\n-//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n+//~^ ERROR expected one of `!`, `(`, `)`, `*`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n //~| ERROR at least one trait is required for an object type\n \n fn foo4(_: &dyn <Drop + AsRef<str>>) {} //~ ERROR expected identifier, found `<`"}, {"sha": "99c4515459d2e5166262754634394449e8ad031b", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -22,11 +22,11 @@ error: expected parameter name, found `{`\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n    |                 ^ expected parameter name\n \n-error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n+error: expected one of `!`, `(`, `)`, `*`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n   --> $DIR/trait-object-delimiters.rs:8:17\n    |\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n-   |                -^ expected one of 9 possible tokens\n+   |                -^ expected one of 10 possible tokens\n    |                |\n    |                help: missing `,`\n "}, {"sha": "8bdadf2440231d6c6604a9995a873eb44fb2fcd1", "filename": "src/tools/clippy/clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -2,7 +2,7 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n-use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n+use rustc_typeck::check::{cast::{self, CastCheckResult}, FnCtxt, Inherited};\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n@@ -53,7 +53,7 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n             \"Newly created FnCtxt contained errors\"\n         );\n \n-        if let Ok(check) = CastCheck::new(\n+        if let CastCheckResult::Deferred(check) = cast::check_cast(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n             DUMMY_SP, DUMMY_SP,"}, {"sha": "8835b9329095818d14b610eb0bbdb68f57010995", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -82,7 +82,7 @@ fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n             ty::FnPtr(..) => {\n                 return Err((span, \"function pointers in const fn are unstable\".into()));\n             },\n-            ty::Dynamic(preds, _) => {\n+            ty::Dynamic(preds, _, _) => {\n                 for pred in preds.iter() {\n                     match pred.skip_binder() {\n                         ty::ExistentialPredicate::AutoTrait(_) | ty::ExistentialPredicate::Projection(_) => {\n@@ -161,6 +161,10 @@ fn check_rvalue<'tcx>(\n         Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n             Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n         },\n+        Rvalue::Cast(CastKind::DynStar, _, _) => {\n+            // FIXME(dyn-star)\n+            unimplemented!()\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -221,7 +225,6 @@ fn check_statement<'tcx>(\n             check_operand(tcx, src, span, body)?;\n             check_operand(tcx, count, span, body)\n         },\n-\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}, {"sha": "a8ad6cf4f6a3c9e3b7134ade39d808fd907d072d", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=6153d3cbe6abc74fb37e4ebe48cc825484fd6bbf", "patch": "@@ -201,7 +201,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             }\n             false\n         },\n-        ty::Dynamic(binder, _) => {\n+        ty::Dynamic(binder, _, _) => {\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n                     if cx.tcx.has_attr(trait_ref.def_id, sym::must_use) {\n@@ -579,7 +579,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n         ty::Opaque(id, _) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(id), cx.tcx.opt_parent(id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n-        ty::Dynamic(bounds, _) => {\n+        ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n             match bounds.principal() {\n                 Some(bound)"}]}