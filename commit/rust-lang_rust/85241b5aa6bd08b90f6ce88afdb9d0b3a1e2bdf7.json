{"sha": "85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MjQxYjVhYTZiZDA4YjkwZjZjZTg4YWZkYjlkMGIzYTFlMmJkZjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T19:54:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T19:54:26Z"}, "message": "Rollup merge of #69120 - spunit262:invalid-sugar-suggest, r=matthewjasper\n\nDon't give invalid suggestion on desugared span.", "tree": {"sha": "596dcf3ee8dd79c9d747621ee0a3b6b75d570ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596dcf3ee8dd79c9d747621ee0a3b6b75d570ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZU1yCRBK7hj4Ov3rIwAAdHIIAGfTWBUI4qqyMasCpL2gb5ck\nfufOqdRtGvnVDtwUShL6f3EG8TlL25AJwyNHQ+V7EQnXYuA+IK7q/Qutnhp83T21\nHE7J82z70SV3QAaJBC69vx3DsczlNmCqqVS1dj1bDwdwfxNLRYCAjgU27mWS14QL\nzkXlNOUxYZnJye7foxNCOLwn+SC6srEB1MaphNQGtbjBemVRx/hOoe0sw7LX3oGH\nk824ASQNgBrTgXwDRvL5RAEBZI2sp5r3GDACrIQdStT4f89iElLcqStTc161ubgj\nuAj3WqUI5aksyUZ+ThiZJjJAtyw1lFGloM0NExv5gJKIQPIrrcVZUHrfAA1Tyk8=\n=FDC6\n-----END PGP SIGNATURE-----\n", "payload": "tree 596dcf3ee8dd79c9d747621ee0a3b6b75d570ce8\nparent 564758c4c329e89722454dd2fbb35f1ac0b8b47c\nparent 30d4f1b78d997fb555388cb8ebea474ffb85794c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583697266 +0100\ncommitter GitHub <noreply@github.com> 1583697266 +0100\n\nRollup merge of #69120 - spunit262:invalid-sugar-suggest, r=matthewjasper\n\nDon't give invalid suggestion on desugared span.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "html_url": "https://github.com/rust-lang/rust/commit/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564758c4c329e89722454dd2fbb35f1ac0b8b47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/564758c4c329e89722454dd2fbb35f1ac0b8b47c", "html_url": "https://github.com/rust-lang/rust/commit/564758c4c329e89722454dd2fbb35f1ac0b8b47c"}, {"sha": "30d4f1b78d997fb555388cb8ebea474ffb85794c", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d4f1b78d997fb555388cb8ebea474ffb85794c", "html_url": "https://github.com/rust-lang/rust/commit/30d4f1b78d997fb555388cb8ebea474ffb85794c"}], "stats": {"total": 98, "additions": 47, "deletions": 51}, "files": [{"sha": "76475e709586877e97d8a59bcab56a1cc3cd91b6", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "patch": "@@ -329,58 +329,60 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if self.body.local_decls[local].is_user_variable() =>\n             {\n                 let local_decl = &self.body.local_decls[local];\n-                let suggestion = match local_decl.local_info {\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf(_))) => {\n-                        Some(suggest_ampmut_self(self.infcx.tcx, local_decl))\n-                    }\n-\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                        mir::VarBindingForm {\n-                            binding_mode: ty::BindingMode::BindByValue(_),\n-                            opt_ty_info,\n-                            ..\n-                        },\n-                    ))) => Some(suggest_ampmut(\n-                        self.infcx.tcx,\n-                        self.body,\n-                        local,\n-                        local_decl,\n-                        opt_ty_info,\n-                    )),\n-\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                        mir::VarBindingForm {\n-                            binding_mode: ty::BindingMode::BindByReference(_),\n-                            ..\n-                        },\n-                    ))) => {\n-                        let pattern_span = local_decl.source_info.span;\n-                        suggest_ref_mut(self.infcx.tcx, pattern_span)\n-                            .map(|replacement| (pattern_span, replacement))\n-                    }\n-\n-                    LocalInfo::User(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n-\n-                    _ => unreachable!(),\n-                };\n \n                 let (pointer_sigil, pointer_desc) = if local_decl.ty.is_region_ptr() {\n                     (\"&\", \"reference\")\n                 } else {\n                     (\"*const\", \"pointer\")\n                 };\n \n-                if let Some((err_help_span, suggested_code)) = suggestion {\n-                    err.span_suggestion(\n-                        err_help_span,\n-                        &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n-                        suggested_code,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-\n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n+                        let suggestion = match local_decl.local_info {\n+                            LocalInfo::User(ClearCrossCrate::Set(\n+                                mir::BindingForm::ImplicitSelf(_),\n+                            )) => Some(suggest_ampmut_self(self.infcx.tcx, local_decl)),\n+\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                                mir::VarBindingForm {\n+                                    binding_mode: ty::BindingMode::BindByValue(_),\n+                                    opt_ty_info,\n+                                    ..\n+                                },\n+                            ))) => Some(suggest_ampmut(\n+                                self.infcx.tcx,\n+                                self.body,\n+                                local,\n+                                local_decl,\n+                                opt_ty_info,\n+                            )),\n+\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                                mir::VarBindingForm {\n+                                    binding_mode: ty::BindingMode::BindByReference(_),\n+                                    ..\n+                                },\n+                            ))) => {\n+                                let pattern_span = local_decl.source_info.span;\n+                                suggest_ref_mut(self.infcx.tcx, pattern_span)\n+                                    .map(|replacement| (pattern_span, replacement))\n+                            }\n+\n+                            LocalInfo::User(ClearCrossCrate::Clear) => {\n+                                bug!(\"saw cleared local state\")\n+                            }\n+\n+                            _ => unreachable!(),\n+                        };\n+\n+                        if let Some((err_help_span, suggested_code)) = suggestion {\n+                            err.span_suggestion(\n+                                err_help_span,\n+                                &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n+                                suggested_code,\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                         err.span_label(\n                             span,\n                             format!("}, {"sha": "d80467c7fa88756abf962371b63e457a2c206e99", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "patch": "@@ -2,10 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/dont-print-desugared-async.rs:5:20\n    |\n LL | async fn async_fn(&ref mut s: &[i32]) {}\n-   |                   -^^^^^^^^^\n-   |                   ||\n-   |                   |cannot borrow as mutable through `&` reference\n-   |                   help: consider changing this to be a mutable reference: `&mut ref mut s`\n+   |                    ^^^^^^^^^ cannot borrow as mutable through `&` reference\n \n error: aborting due to previous error\n "}, {"sha": "88773def8b7c840e44fab37dc429a407f0c0fa8f", "filename": "src/test/ui/nll/dont-print-desugared.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr?ref=85241b5aa6bd08b90f6ce88afdb9d0b3a1e2bdf7", "patch": "@@ -2,10 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/dont-print-desugared.rs:4:10\n    |\n LL |     for &ref mut x in s {}\n-   |         -^^^^^^^^^\n-   |         ||\n-   |         |cannot borrow as mutable through `&` reference\n-   |         help: consider changing this to be a mutable reference: `&mut ref mut x`\n+   |          ^^^^^^^^^ cannot borrow as mutable through `&` reference\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/dont-print-desugared.rs:17:16"}]}