{"sha": "c26d965714e38d62b1610780f67bec14dafe25c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNmQ5NjU3MTRlMzhkNjJiMTYxMDc4MGY2N2JlYzE0ZGFmZTI1YzM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-28T23:21:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-20T22:36:31Z"}, "message": "Move report_cycle to rustc_query_system.\n\nThe call to `ty::print::with_forced_impl_filename_line`\nis done when constructing the description,\nat the construction of the QueryStackFrame.", "tree": {"sha": "e654c3590e355e229d055029deceb5509dd6bd5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e654c3590e355e229d055029deceb5509dd6bd5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26d965714e38d62b1610780f67bec14dafe25c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26d965714e38d62b1610780f67bec14dafe25c3", "html_url": "https://github.com/rust-lang/rust/commit/c26d965714e38d62b1610780f67bec14dafe25c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26d965714e38d62b1610780f67bec14dafe25c3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3897395787866281e98e3f0e41cf26dab5d94d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3897395787866281e98e3f0e41cf26dab5d94d7b", "html_url": "https://github.com/rust-lang/rust/commit/3897395787866281e98e3f0e41cf26dab5d94d7b"}], "stats": {"total": 118, "additions": 54, "deletions": 64}, "files": [{"sha": "176c68cf0fc12b34526d8478ba27de4669436d1c", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=c26d965714e38d62b1610780f67bec14dafe25c3", "patch": "@@ -18,7 +18,7 @@ extern crate tracing;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{Diagnostic, Handler, Level};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, Handler, Level};\n use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n use rustc_middle::dep_graph;"}, {"sha": "00392fbcf560604c1dfb6725ddf81b4e5dcdbd65", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=c26d965714e38d62b1610780f67bec14dafe25c3", "patch": "@@ -8,15 +8,13 @@ use rustc_middle::ty::query::on_disk_cache;\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n-use rustc_query_system::query::{CycleError, QueryJobId};\n-use rustc_query_system::query::{QueryContext, QueryDescription, QueryMap, QueryStackFrame};\n+use rustc_query_system::query::{QueryContext, QueryDescription, QueryJobId, QueryMap};\n \n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::Diagnostic;\n use rustc_serialize::opaque;\n use rustc_span::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n \n #[derive(Copy, Clone)]\n pub struct QueryCtxt<'tcx> {\n@@ -175,54 +173,6 @@ impl QueryContext for QueryCtxt<'tcx> {\n }\n \n impl<'tcx> QueryCtxt<'tcx> {\n-    #[inline(never)]\n-    #[cold]\n-    pub(super) fn report_cycle(\n-        self,\n-        CycleError { usage, cycle: stack }: CycleError,\n-    ) -> DiagnosticBuilder<'tcx> {\n-        assert!(!stack.is_empty());\n-\n-        let fix_span = |span: Span, query: &QueryStackFrame| {\n-            self.sess.source_map().guess_head_span(query.default_span(span))\n-        };\n-\n-        // Disable naming impls with types in this path, since that\n-        // sometimes cycles itself, leading to extra cycle errors.\n-        // (And cycle errors around impls tend to occur during the\n-        // collect/coherence phases anyhow.)\n-        ty::print::with_forced_impl_filename_line(|| {\n-            let span = fix_span(stack[1 % stack.len()].span, &stack[0].query);\n-            let mut err = struct_span_err!(\n-                self.sess,\n-                span,\n-                E0391,\n-                \"cycle detected when {}\",\n-                stack[0].query.description\n-            );\n-\n-            for i in 1..stack.len() {\n-                let query = &stack[i].query;\n-                let span = fix_span(stack[(i + 1) % stack.len()].span, query);\n-                err.span_note(span, &format!(\"...which requires {}...\", query.description));\n-            }\n-\n-            err.note(&format!(\n-                \"...which again requires {}, completing the cycle\",\n-                stack[0].query.description\n-            ));\n-\n-            if let Some((span, query)) = usage {\n-                err.span_note(\n-                    fix_span(span, &query),\n-                    &format!(\"cycle used when {}\", query.description),\n-                );\n-            }\n-\n-            err\n-        })\n-    }\n-\n     pub(super) fn encode_query_results(\n         self,\n         encoder: &mut on_disk_cache::CacheEncoder<'a, 'tcx, opaque::FileEncoder>,\n@@ -302,16 +252,16 @@ pub struct QueryStruct {\n \n macro_rules! handle_cycle_error {\n     ([][$tcx: expr, $error:expr]) => {{\n-        $tcx.report_cycle($error).emit();\n+        $error.emit();\n         Value::from_cycle_error($tcx)\n     }};\n     ([fatal_cycle $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n-        $tcx.report_cycle($error).emit();\n+        $error.emit();\n         $tcx.sess.abort_if_errors();\n         unreachable!()\n     }};\n     ([cycle_delay_bug $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n-        $tcx.report_cycle($error).delay_as_bug();\n+        $error.delay_as_bug();\n         Value::from_cycle_error($tcx)\n     }};\n     ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n@@ -459,7 +409,7 @@ macro_rules! define_queries {\n \n             fn handle_cycle_error(\n                 tcx: QueryCtxt<'tcx>,\n-                error: CycleError,\n+                mut error: DiagnosticBuilder<'_>,\n             ) -> Self::Value {\n                 handle_cycle_error!([$($modifiers)*][tcx, error])\n             }"}, {"sha": "4e2515c3ac3fa209b3768815713ceb18a795e0b7", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=c26d965714e38d62b1610780f67bec14dafe25c3", "patch": "@@ -3,10 +3,10 @@\n use crate::dep_graph::DepNode;\n use crate::dep_graph::SerializedDepNodeIndex;\n use crate::query::caches::QueryCache;\n-use crate::query::plumbing::CycleError;\n use crate::query::{QueryCacheStore, QueryContext, QueryState};\n \n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_errors::DiagnosticBuilder;\n use std::fmt::Debug;\n use std::hash::Hash;\n \n@@ -27,7 +27,7 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub compute: fn(CTX, K) -> V,\n \n     pub hash_result: fn(&mut CTX::StableHashingContext, &V) -> Option<Fingerprint>,\n-    pub handle_cycle_error: fn(CTX, CycleError) -> V,\n+    pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n     pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n     pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n }\n@@ -52,8 +52,8 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n         (self.hash_result)(hcx, value)\n     }\n \n-    pub(crate) fn handle_cycle_error(&self, tcx: CTX, error: CycleError) -> V {\n-        (self.handle_cycle_error)(tcx, error)\n+    pub(crate) fn handle_cycle_error(&self, tcx: CTX, diag: DiagnosticBuilder<'_>) -> V {\n+        (self.handle_cycle_error)(tcx, diag)\n     }\n \n     pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K, value: Option<&V>) -> bool {\n@@ -90,7 +90,7 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n         result: &Self::Value,\n     ) -> Option<Fingerprint>;\n \n-    fn handle_cycle_error(tcx: CTX, error: CycleError) -> Self::Value;\n+    fn handle_cycle_error(tcx: CTX, diag: DiagnosticBuilder<'_>) -> Self::Value;\n }\n \n pub trait QueryDescription<CTX: QueryContext>: QueryAccessors<CTX> {"}, {"sha": "a30cd078d6c0c775bcb1814d9b4508eccb8f0503", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=c26d965714e38d62b1610780f67bec14dafe25c3", "patch": "@@ -2,6 +2,8 @@ use crate::query::plumbing::CycleError;\n use crate::query::QueryStackFrame;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_session::Session;\n use rustc_span::Span;\n \n use std::convert::TryFrom;\n@@ -590,3 +592,37 @@ pub fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n \n     on_panic.disable();\n }\n+\n+#[inline(never)]\n+#[cold]\n+pub(crate) fn report_cycle<'a>(\n+    sess: &'a Session,\n+    CycleError { usage, cycle: stack }: CycleError,\n+) -> DiagnosticBuilder<'a> {\n+    assert!(!stack.is_empty());\n+\n+    let fix_span = |span: Span, query: &QueryStackFrame| {\n+        sess.source_map().guess_head_span(query.default_span(span))\n+    };\n+\n+    let span = fix_span(stack[1 % stack.len()].span, &stack[0].query);\n+    let mut err =\n+        struct_span_err!(sess, span, E0391, \"cycle detected when {}\", stack[0].query.description);\n+\n+    for i in 1..stack.len() {\n+        let query = &stack[i].query;\n+        let span = fix_span(stack[(i + 1) % stack.len()].span, query);\n+        err.span_note(span, &format!(\"...which requires {}...\", query.description));\n+    }\n+\n+    err.note(&format!(\n+        \"...which again requires {}, completing the cycle\",\n+        stack[0].query.description\n+    ));\n+\n+    if let Some((span, query)) = usage {\n+        err.span_note(fix_span(span, &query), &format!(\"cycle used when {}\", query.description));\n+    }\n+\n+    err\n+}"}, {"sha": "0050670b338ea572b2dad1d2a6f9e83cac1f4fcd", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d965714e38d62b1610780f67bec14dafe25c3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=c26d965714e38d62b1610780f67bec14dafe25c3", "patch": "@@ -6,7 +6,9 @@ use crate::dep_graph::{DepContext, DepKind, DepNode};\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use crate::query::caches::QueryCache;\n use crate::query::config::{QueryDescription, QueryVtable, QueryVtableExt};\n-use crate::query::job::{QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId};\n+use crate::query::job::{\n+    report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId,\n+};\n use crate::query::{QueryContext, QueryMap, QueryStackFrame};\n \n #[cfg(not(parallel_compiler))]\n@@ -245,6 +247,7 @@ where\n                 &tcx.current_query_job(),\n                 span,\n             );\n+            let error = report_cycle(tcx.dep_context().sess(), error);\n             let value = query.handle_cycle_error(tcx, error);\n             cache.cache.store_nocache(value)\n         }));\n@@ -256,6 +259,7 @@ where\n             let result = latch.wait_on(tcx.current_query_job(), span);\n \n             if let Err(cycle) = result {\n+                let cycle = report_cycle(tcx.dep_context().sess(), cycle);\n                 let value = query.handle_cycle_error(tcx, cycle);\n                 let value = cache.cache.store_nocache(value);\n                 return TryGetJob::Cycle(value);\n@@ -352,7 +356,7 @@ where\n }\n \n #[derive(Clone)]\n-pub struct CycleError {\n+pub(crate) struct CycleError {\n     /// The query and related span that uses the cycle.\n     pub usage: Option<(Span, QueryStackFrame)>,\n     pub cycle: Vec<QueryInfo>,"}]}