{"sha": "9b1035904152ab5e12f08f5e5353c4af33368dcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMTAzNTkwNDE1MmFiNWUxMmYwOGY1ZTUzNTNjNGFmMzMzNjhkY2Q=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-05-21T13:45:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T05:29:17Z"}, "message": "std: several minor cleanups wrt codereview.. see extended comments\n\n* there are a few places where I was experimenting w/ using `alt` in places\nwhere `if`/`else` would've sufficed. don't drink the koolaid!\n* I had an unneeded `else` structure (the `if` branch that preceeded\nconcluded with a `fail` statement.. I added the `fail` later in the dev\ncycle for this branch, so I forgot to remove the `else` after doing so)\n* consistent wrt `prop_name: value` vs. `prop_name : value` in record decl\nand initialization\n* change an `alt` exp on an `ip_addr` to actually be exhaustive,\ninstead of using a catch-all clause", "tree": {"sha": "89899f35abfceabef2aa54559c177c44b3b7a9e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89899f35abfceabef2aa54559c177c44b3b7a9e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b1035904152ab5e12f08f5e5353c4af33368dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1035904152ab5e12f08f5e5353c4af33368dcd", "html_url": "https://github.com/rust-lang/rust/commit/9b1035904152ab5e12f08f5e5353c4af33368dcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b1035904152ab5e12f08f5e5353c4af33368dcd/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de1a68217767eaedc7c192301c3814eea8c7a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de1a68217767eaedc7c192301c3814eea8c7a5e", "html_url": "https://github.com/rust-lang/rust/commit/7de1a68217767eaedc7c192301c3814eea8c7a5e"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "632c901f694a4b58047014f77cc160e346fabee8", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9b1035904152ab5e12f08f5e5353c4af33368dcd/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1035904152ab5e12f08f5e5353c4af33368dcd/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9b1035904152ab5e12f08f5e5353c4af33368dcd", "patch": "@@ -107,9 +107,9 @@ fn connect(input_ip: ip::ip_addr, port: uint)\n     let socket_data = @{\n         reader_po: reader_po,\n         reader_ch: comm::chan(reader_po),\n-        stream_handle_ptr : stream_handle_ptr,\n-        connect_req : uv::ll::connect_t(),\n-        write_req : uv::ll::write_t(),\n+        stream_handle_ptr: stream_handle_ptr,\n+        connect_req: uv::ll::connect_t(),\n+        write_req: uv::ll::write_t(),\n         hl_loop: hl_loop\n     };\n     let socket_data_ptr = ptr::addr_of(*socket_data);\n@@ -523,13 +523,14 @@ net::tcp::listen(remote_ip, remote_port, backlog) {|new_conn, kill_ch|\n     let cont_ch = comm::chan(cont_po);\n     task::spawn {||\n         let accept_result = net::tcp::accept(new_conn);\n-        alt accept_result.is_failure() {\n-          false { comm::send(cont_ch, result::get_err(accept_result)); }\n-          true {\n+        if accept_result.is_failure() {\n+            comm::send(cont_ch, result::get_err(accept_result));\n+            // fail?\n+        }\n+        else {\n             let sock = result::get(accept_result);\n             comm::send(cont_ch, true);\n             // do work here\n-          }\n         }\n     };\n     alt comm::recv(cont_po) {\n@@ -841,8 +842,7 @@ crust fn tcp_lfc_on_connection_cb(handle: *uv::ll::uv_tcp_t,\n     let server_data_ptr = uv::ll::get_data_for_uv_handle(handle)\n         as *tcp_listen_fc_data;\n     let kill_ch = (*server_data_ptr).kill_ch;\n-    alt (*server_data_ptr).active {\n-      true {\n+    if (*server_data_ptr).active {\n         alt status {\n           0i32 {\n             let new_conn = new_tcp_conn(handle);\n@@ -856,9 +856,6 @@ crust fn tcp_lfc_on_connection_cb(handle: *uv::ll::uv_tcp_t,\n             (*server_data_ptr).active = false;\n           }\n         }\n-      }\n-      _ {\n-      }\n     }\n }\n \n@@ -1101,7 +1098,7 @@ fn ipv4_ip_addr_to_sockaddr_in(input_ip: ip::ip_addr,\n       ip::ipv4(_,_,_,_) {\n         uv::ll::ip4_addr(ip::format_addr(input_ip), port as int)\n       }\n-      _ {\n+      ip::ipv6(_,_,_,_,_,_,_,_) {\n         fail \"FIXME ipv6 not yet supported\";\n       }\n     }\n@@ -1324,24 +1321,22 @@ mod test {\n                                 err_data.err_name, err_data.err_msg));\n                 fail \"couldn't recv new conn\";\n             }\n-            else {\n-                let sock = result::unwrap(new_conn_result);\n-                log(debug, \"SERVER: successfully accepted\"+\n-                    \"connection!\");\n-                let received_req_bytes =\n-                    tcp_read_single(sock);\n-                alt received_req_bytes {\n-                  result::ok(data) {\n-                    server_ch.send(\n-                        str::from_bytes(data));\n-                    log(debug, \"SERVER: before write\");\n-                    tcp_write_single(sock, str::bytes(resp));\n-                    log(debug, \"SERVER: after write.. die\");\n-                  }\n-                  result::err(err_data) {\n-                    server_ch.send(\"\");\n-                  }\n-                }\n+            let sock = result::unwrap(new_conn_result);\n+            log(debug, \"SERVER: successfully accepted\"+\n+                \"connection!\");\n+            let received_req_bytes =\n+                tcp_read_single(sock);\n+            alt received_req_bytes {\n+              result::ok(data) {\n+                server_ch.send(\n+                    str::from_bytes(data));\n+                log(debug, \"SERVER: before write\");\n+                tcp_write_single(sock, str::bytes(resp));\n+                log(debug, \"SERVER: after write.. die\");\n+              }\n+              result::err(err_data) {\n+                server_ch.send(\"\");\n+              }\n             }\n         };\n         let ret_val = server_ch.recv();"}]}