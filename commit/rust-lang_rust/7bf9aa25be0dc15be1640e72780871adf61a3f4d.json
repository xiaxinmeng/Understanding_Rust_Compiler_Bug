{"sha": "7bf9aa25be0dc15be1640e72780871adf61a3f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjlhYTI1YmUwZGMxNWJlMTY0MGU3Mjc4MDg3MWFkZjYxYTNmNGQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-08T15:16:18Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-08T15:16:18Z"}, "message": "Add reorder_extern_crates and reorder_extern_crates_in_group config options", "tree": {"sha": "4d78c15ae1e77b0b0861bd9162590aeeba27174c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d78c15ae1e77b0b0861bd9162590aeeba27174c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf9aa25be0dc15be1640e72780871adf61a3f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf9aa25be0dc15be1640e72780871adf61a3f4d", "html_url": "https://github.com/rust-lang/rust/commit/7bf9aa25be0dc15be1640e72780871adf61a3f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf9aa25be0dc15be1640e72780871adf61a3f4d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b2dc8e0a5954030f1a9d5760fbc1a7d4f39c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b2dc8e0a5954030f1a9d5760fbc1a7d4f39c54", "html_url": "https://github.com/rust-lang/rust/commit/b1b2dc8e0a5954030f1a9d5760fbc1a7d4f39c54"}], "stats": {"total": 97, "additions": 68, "deletions": 29}, "files": [{"sha": "7b2fb9f629db4fb6682b00e8ac77019bc4ce83ad", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf9aa25be0dc15be1640e72780871adf61a3f4d/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf9aa25be0dc15be1640e72780871adf61a3f4d/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=7bf9aa25be0dc15be1640e72780871adf61a3f4d", "patch": "@@ -558,6 +558,8 @@ create_config! {\n                                             exceeds `chain_one_line_max`\";\n     imports_indent: IndentStyle, IndentStyle::Visual, \"Indent of imports\";\n     imports_layout: ListTactic, ListTactic::Mixed, \"Item layout inside a import block\";\n+    reorder_extern_crates: bool, true, \"Reorder extern crate statements alphabetically\";\n+    reorder_extern_crates_in_group: bool, true, \"Reorder extern crate statements in group\";\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imports_in_group: bool, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, true,"}, {"sha": "b73c85ddb5642ce055f5258d37e108ea454c525a", "filename": "src/imports.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bf9aa25be0dc15be1640e72780871adf61a3f4d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf9aa25be0dc15be1640e72780871adf61a3f4d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=7bf9aa25be0dc15be1640e72780871adf61a3f4d", "patch": "@@ -113,11 +113,14 @@ fn compare_view_paths(a: &ast::ViewPath_, b: &ast::ViewPath_) -> Ordering {\n     }\n }\n \n-fn compare_use_items(a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n+fn compare_use_items(context: &RewriteContext, a: &ast::Item, b: &ast::Item) -> Option<Ordering> {\n     match (&a.node, &b.node) {\n         (&ast::ItemKind::Use(ref a_vp), &ast::ItemKind::Use(ref b_vp)) => {\n             Some(compare_view_paths(&a_vp.node, &b_vp.node))\n         }\n+        (&ast::ItemKind::ExternCrate(..), &ast::ItemKind::ExternCrate(..)) => {\n+            Some(context.snippet(a.span).cmp(&context.snippet(b.span)))\n+        }\n         _ => None,\n     }\n }\n@@ -214,7 +217,9 @@ impl<'a> FmtVisitor<'a> {\n             .collect::<Vec<_>>();\n         let pos_after_last_use_item = last_pos_of_prev_use_item;\n         // Order the imports by view-path & other import path properties\n-        ordered_use_items.sort_by(|a, b| compare_use_items(a.0, b.0).unwrap());\n+        ordered_use_items.sort_by(|a, b| {\n+            compare_use_items(&self.get_context(), a.0, b.0).unwrap()\n+        });\n         // First, output the span before the first import\n         let prev_span_str = self.snippet(utils::mk_sp(self.last_pos, pos_before_first_use_item));\n         // Look for purely trailing space at the start of the prefix snippet before a linefeed, or"}, {"sha": "3427867274a560959374a03f4b9e9baee0efbd62", "filename": "src/visitor.rs", "status": "modified", "additions": 59, "deletions": 27, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7bf9aa25be0dc15be1640e72780871adf61a3f4d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf9aa25be0dc15be1640e72780871adf61a3f4d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7bf9aa25be0dc15be1640e72780871adf61a3f4d", "patch": "@@ -36,6 +36,13 @@ fn is_use_item(item: &ast::Item) -> bool {\n     }\n }\n \n+fn is_extern_crate(item: &ast::Item) -> bool {\n+    match item.node {\n+        ast::ItemKind::ExternCrate(..) => true,\n+        _ => false,\n+    }\n+}\n+\n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n@@ -627,40 +634,65 @@ impl<'a> FmtVisitor<'a> {\n         false\n     }\n \n+    fn reorder_items<F>(\n+        &mut self,\n+        items_left: &[ptr::P<ast::Item>],\n+        is_item: &F,\n+        in_group: bool,\n+    ) -> usize\n+    where\n+        F: Fn(&ast::Item) -> bool,\n+    {\n+        let mut last = self.codemap.lookup_line_range(items_left[0].span());\n+        let item_length = items_left\n+            .iter()\n+            .take_while(|ppi| {\n+                is_item(&***ppi) && (!in_group || {\n+                    let current = self.codemap.lookup_line_range(ppi.span());\n+                    let in_same_group = current.lo < last.hi + 2;\n+                    last = current;\n+                    in_same_group\n+                })\n+            })\n+            .count();\n+        let items = &items_left[..item_length];\n+\n+        let at_least_one_in_file_lines = items\n+            .iter()\n+            .any(|item| !out_of_file_lines_range!(self, item.span));\n+\n+        if at_least_one_in_file_lines {\n+            self.format_imports(items);\n+        } else {\n+            for item in items {\n+                self.push_rewrite(item.span, None);\n+            }\n+        }\n+\n+        item_length\n+    }\n+\n     fn walk_mod_items(&mut self, m: &ast::Mod) {\n         let mut items_left: &[ptr::P<ast::Item>] = &m.items;\n         while !items_left.is_empty() {\n             // If the next item is a `use` declaration, then extract it and any subsequent `use`s\n             // to be potentially reordered within `format_imports`. Otherwise, just format the\n             // next item for output.\n             if self.config.reorder_imports() && is_use_item(&*items_left[0]) {\n-                let reorder_imports_in_group = self.config.reorder_imports_in_group();\n-                let mut last = self.codemap.lookup_line_range(items_left[0].span());\n-                let use_item_length = items_left\n-                    .iter()\n-                    .take_while(|ppi| {\n-                        is_use_item(&***ppi) && (!reorder_imports_in_group || {\n-                            let current = self.codemap.lookup_line_range(ppi.span());\n-                            let in_same_group = current.lo < last.hi + 2;\n-                            last = current;\n-                            in_same_group\n-                        })\n-                    })\n-                    .count();\n-                let (use_items, rest) = items_left.split_at(use_item_length);\n-\n-                let at_least_one_in_file_lines = use_items\n-                    .iter()\n-                    .any(|item| !out_of_file_lines_range!(self, item.span));\n-\n-                if at_least_one_in_file_lines {\n-                    self.format_imports(use_items);\n-                } else {\n-                    for item in use_items {\n-                        self.push_rewrite(item.span, None);\n-                    }\n-                }\n-\n+                let used_items_len = self.reorder_items(\n+                    &items_left,\n+                    &is_use_item,\n+                    self.config.reorder_imports_in_group(),\n+                );\n+                let (_, rest) = items_left.split_at(used_items_len);\n+                items_left = rest;\n+            } else if self.config.reorder_extern_crates() && is_extern_crate(&*items_left[0]) {\n+                let used_items_len = self.reorder_items(\n+                    &items_left,\n+                    &is_extern_crate,\n+                    self.config.reorder_extern_crates_in_group(),\n+                );\n+                let (_, rest) = items_left.split_at(used_items_len);\n                 items_left = rest;\n             } else {\n                 // `unwrap()` is safe here because we know `items_left`"}]}