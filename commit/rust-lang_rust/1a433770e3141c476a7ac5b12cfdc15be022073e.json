{"sha": "1a433770e3141c476a7ac5b12cfdc15be022073e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDMzNzcwZTMxNDFjNDc2YTdhYzViMTJjZmRjMTViZTAyMjA3M2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-06T23:14:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "sync: Convert statics to constants", "tree": {"sha": "5e1b5691a9c6ac30a804a1e90317b6af13e47ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1b5691a9c6ac30a804a1e90317b6af13e47ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a433770e3141c476a7ac5b12cfdc15be022073e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a433770e3141c476a7ac5b12cfdc15be022073e", "html_url": "https://github.com/rust-lang/rust/commit/1a433770e3141c476a7ac5b12cfdc15be022073e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a433770e3141c476a7ac5b12cfdc15be022073e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "html_url": "https://github.com/rust-lang/rust/commit/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "053b5dc4c8a7478454cefee3514d9543857597fa", "filename": "src/libsync/comm/oneshot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Foneshot.rs?ref=1a433770e3141c476a7ac5b12cfdc15be022073e", "patch": "@@ -43,9 +43,9 @@ use atomic;\n use comm::Receiver;\n \n // Various states you can find a port in.\n-static EMPTY: uint = 0;\n-static DATA: uint = 1;\n-static DISCONNECTED: uint = 2;\n+const EMPTY: uint = 0;\n+const DATA: uint = 1;\n+const DISCONNECTED: uint = 2;\n \n pub struct Packet<T> {\n     // Internal state of the chan/port pair (stores the blocked task as well)"}, {"sha": "cfd045d08821af814a61728f27d90c529a94fb4b", "filename": "src/libsync/comm/shared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fshared.rs?ref=1a433770e3141c476a7ac5b12cfdc15be022073e", "patch": "@@ -31,12 +31,12 @@ use rustrt::thread::Thread;\n use atomic;\n use mpsc_queue as mpsc;\n \n-static DISCONNECTED: int = int::MIN;\n-static FUDGE: int = 1024;\n+const DISCONNECTED: int = int::MIN;\n+const FUDGE: int = 1024;\n #[cfg(test)]\n-static MAX_STEALS: int = 5;\n+const MAX_STEALS: int = 5;\n #[cfg(not(test))]\n-static MAX_STEALS: int = 1 << 20;\n+const MAX_STEALS: int = 1 << 20;\n \n pub struct Packet<T> {\n     queue: mpsc::Queue<T>,"}, {"sha": "8e433c6a585f3dc57b7d7c29066184126ac5ae0f", "filename": "src/libsync/comm/stream.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fstream.rs?ref=1a433770e3141c476a7ac5b12cfdc15be022073e", "patch": "@@ -30,11 +30,11 @@ use atomic;\n use comm::Receiver;\n use spsc_queue as spsc;\n \n-static DISCONNECTED: int = int::MIN;\n+const DISCONNECTED: int = int::MIN;\n #[cfg(test)]\n-static MAX_STEALS: int = 5;\n+const MAX_STEALS: int = 5;\n #[cfg(not(test))]\n-static MAX_STEALS: int = 1 << 20;\n+const MAX_STEALS: int = 1 << 20;\n \n pub struct Packet<T> {\n     queue: spsc::Queue<Message<T>>, // internal queue for all message"}, {"sha": "c6413d0d09cc724a3d0235624494d32ced2a30cb", "filename": "src/libsync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmutex.rs?ref=1a433770e3141c476a7ac5b12cfdc15be022073e", "patch": "@@ -70,9 +70,9 @@ use rustrt::thread::Thread;\n \n use mpsc_intrusive as q;\n \n-pub static LOCKED: uint = 1 << 0;\n-pub static GREEN_BLOCKED: uint = 1 << 1;\n-pub static NATIVE_BLOCKED: uint = 1 << 2;\n+pub const LOCKED: uint = 1 << 0;\n+pub const GREEN_BLOCKED: uint = 1 << 1;\n+pub const NATIVE_BLOCKED: uint = 1 << 2;\n \n /// A mutual exclusion primitive useful for protecting shared data\n ///\n@@ -163,7 +163,7 @@ pub struct Guard<'a> {\n \n /// Static initialization of a mutex. This constant can be used to initialize\n /// other mutex constants.\n-pub static MUTEX_INIT: StaticMutex = StaticMutex {\n+pub const MUTEX_INIT: StaticMutex = StaticMutex {\n     lock: mutex::NATIVE_MUTEX_INIT,\n     state: atomic::INIT_ATOMIC_UINT,\n     flavor: UnsafeCell { value: Unlocked },"}, {"sha": "c740c4f3d2e95f2076cd896c23a52ddbb763bffd", "filename": "src/libsync/one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a433770e3141c476a7ac5b12cfdc15be022073e/src%2Flibsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fone.rs?ref=1a433770e3141c476a7ac5b12cfdc15be022073e", "patch": "@@ -45,7 +45,7 @@ pub struct Once {\n }\n \n /// Initialization value for static `Once` values.\n-pub static ONCE_INIT: Once = Once {\n+pub const ONCE_INIT: Once = Once {\n     mutex: MUTEX_INIT,\n     cnt: atomic::INIT_ATOMIC_INT,\n     lock_cnt: atomic::INIT_ATOMIC_INT,"}]}