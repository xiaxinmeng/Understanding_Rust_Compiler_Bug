{"sha": "45da2a5f48300eff8ccfd524a0bad5c351c20298", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZGEyYTVmNDgzMDBlZmY4Y2NmZDUyNGEwYmFkNWMzNTFjMjAyOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-11T11:11:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-11T11:11:08Z"}, "message": "auto merge of #8412 : thestinger/rust/vector-add, r=alexcrichton", "tree": {"sha": "57da7bbb03fb467fcb97638c2a02119214f5bf07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57da7bbb03fb467fcb97638c2a02119214f5bf07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45da2a5f48300eff8ccfd524a0bad5c351c20298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45da2a5f48300eff8ccfd524a0bad5c351c20298", "html_url": "https://github.com/rust-lang/rust/commit/45da2a5f48300eff8ccfd524a0bad5c351c20298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45da2a5f48300eff8ccfd524a0bad5c351c20298/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac9affc20984a8a2d01c2ff3201a56f91b5bc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac9affc20984a8a2d01c2ff3201a56f91b5bc6e", "html_url": "https://github.com/rust-lang/rust/commit/cac9affc20984a8a2d01c2ff3201a56f91b5bc6e"}, {"sha": "83b3a0eaf166c5dc88eb0ab9b4b793a3694f680b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b3a0eaf166c5dc88eb0ab9b4b793a3694f680b", "html_url": "https://github.com/rust-lang/rust/commit/83b3a0eaf166c5dc88eb0ab9b4b793a3694f680b"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "0b270edc5342ae241b57d5b4792c18cd1214ea42", "filename": "src/libstd/str.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/45da2a5f48300eff8ccfd524a0bad5c351c20298/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45da2a5f48300eff8ccfd524a0bad5c351c20298/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=45da2a5f48300eff8ccfd524a0bad5c351c20298", "patch": "@@ -807,13 +807,24 @@ pub fn from_utf16(v: &[u16]) -> ~str {\n \n /// Allocates a new string with the specified capacity. The string returned is\n /// the empty string, but has capacity for much more.\n+#[cfg(stage0)]\n #[inline]\n pub fn with_capacity(capacity: uint) -> ~str {\n     let mut buf = ~\"\";\n     buf.reserve(capacity);\n     buf\n }\n \n+/// Allocates a new string with the specified capacity. The string returned is\n+/// the empty string, but has capacity for much more.\n+#[cfg(not(stage0))]\n+#[inline]\n+pub fn with_capacity(capacity: uint) -> ~str {\n+    unsafe {\n+        cast::transmute(vec::with_capacity::<~[u8]>(capacity))\n+    }\n+}\n+\n /// As char_len but for a slice of a string\n ///\n /// # Arguments\n@@ -948,6 +959,14 @@ pub mod raw {\n         ::cast::transmute(v)\n     }\n \n+    #[lang=\"strdup_uniq\"]\n+    #[cfg(not(test))]\n+    #[allow(missing_doc)]\n+    #[inline]\n+    pub unsafe fn strdup_uniq(ptr: *u8, len: uint) -> ~str {\n+        from_buf_len(ptr, len)\n+    }\n+\n     /// Create a Rust string from a null-terminated C string\n     pub unsafe fn from_c_str(buf: *libc::c_char) -> ~str {\n         let mut curr = buf;\n@@ -3700,7 +3719,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use str;\n+    use super::*;\n \n     #[bench]\n     fn is_utf8_100_ascii(bh: &mut BenchHarness) {\n@@ -3710,7 +3729,7 @@ mod bench {\n \n         assert_eq!(100, s.len());\n         do bh.iter {\n-            str::is_utf8(s);\n+            is_utf8(s);\n         }\n     }\n \n@@ -3719,7 +3738,7 @@ mod bench {\n         let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n         assert_eq!(100, s.len());\n         do bh.iter {\n-            str::is_utf8(s);\n+            is_utf8(s);\n         }\n     }\n \n@@ -3742,4 +3761,11 @@ mod bench {\n             s.map_chars(|c| ((c as uint) + 1) as char);\n         }\n     }\n+\n+    #[bench]\n+    fn bench_with_capacity(bh: &mut BenchHarness) {\n+        do bh.iter {\n+            with_capacity(100);\n+        }\n+    }\n }"}, {"sha": "d8df967a45ca2233cc2fa1d2c8076a34f3178844", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45da2a5f48300eff8ccfd524a0bad5c351c20298/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45da2a5f48300eff8ccfd524a0bad5c351c20298/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=45da2a5f48300eff8ccfd524a0bad5c351c20298", "patch": "@@ -12,8 +12,7 @@\n \n use c_str::ToCStr;\n use cast::transmute;\n-use libc::{c_char, c_uchar, c_void, size_t, uintptr_t};\n-use str;\n+use libc::{c_char, c_void, size_t, uintptr_t};\n use sys;\n use rt::task::Task;\n use rt::local::Local;\n@@ -93,12 +92,6 @@ pub unsafe fn check_not_borrowed(a: *u8,\n     borrowck::check_not_borrowed(a, file, line)\n }\n \n-#[lang=\"strdup_uniq\"]\n-#[inline]\n-pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n-    str::raw::from_buf_len(ptr, len)\n-}\n-\n #[lang=\"annihilate\"]\n pub unsafe fn annihilate() {\n     ::cleanup::annihilate()"}, {"sha": "d626b8604db87ed065ee36ff93d632514edbc7a8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45da2a5f48300eff8ccfd524a0bad5c351c20298/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45da2a5f48300eff8ccfd524a0bad5c351c20298/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=45da2a5f48300eff8ccfd524a0bad5c351c20298", "patch": "@@ -561,7 +561,7 @@ impl<'self, T> RandomAccessIterator<&'self [T]> for ChunkIter<'self, T> {\n \n #[cfg(not(test))]\n pub mod traits {\n-    use super::Vector;\n+    use super::*;\n \n     use clone::Clone;\n     use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Equal, Equiv};\n@@ -686,17 +686,17 @@ pub mod traits {\n     impl<'self,T:Clone, V: Vector<T>> Add<V, ~[T]> for &'self [T] {\n         #[inline]\n         fn add(&self, rhs: &V) -> ~[T] {\n-            let mut res = self.to_owned();\n+            let mut res = with_capacity(self.len() + rhs.as_slice().len());\n+            res.push_all(*self);\n             res.push_all(rhs.as_slice());\n             res\n         }\n     }\n+\n     impl<T:Clone, V: Vector<T>> Add<V, ~[T]> for ~[T] {\n         #[inline]\n         fn add(&self, rhs: &V) -> ~[T] {\n-            let mut res = self.to_owned();\n-            res.push_all(rhs.as_slice());\n-            res\n+            self.as_slice() + rhs.as_slice()\n         }\n     }\n }\n@@ -3662,4 +3662,13 @@ mod bench {\n             }\n         }\n     }\n+\n+    #[bench]\n+    fn add(b: &mut BenchHarness) {\n+        let xs: &[int] = [5, ..10];\n+        let ys: &[int] = [5, ..10];\n+        do b.iter() {\n+            xs + ys;\n+        }\n+    }\n }"}]}