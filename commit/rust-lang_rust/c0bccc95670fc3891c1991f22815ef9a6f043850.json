{"sha": "c0bccc95670fc3891c1991f22815ef9a6f043850", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYmNjYzk1NjcwZmMzODkxYzE5OTFmMjI4MTVlZjlhNmYwNDM4NTA=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-12-14T12:31:28Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-12-14T12:32:07Z"}, "message": "more doc comments", "tree": {"sha": "719818188917a65d72eada594a8e2fb38787709e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/719818188917a65d72eada594a8e2fb38787709e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0bccc95670fc3891c1991f22815ef9a6f043850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bccc95670fc3891c1991f22815ef9a6f043850", "html_url": "https://github.com/rust-lang/rust/commit/c0bccc95670fc3891c1991f22815ef9a6f043850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0bccc95670fc3891c1991f22815ef9a6f043850/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc3a3e79db0634a7866f68745d894f2780acb780", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3a3e79db0634a7866f68745d894f2780acb780", "html_url": "https://github.com/rust-lang/rust/commit/dc3a3e79db0634a7866f68745d894f2780acb780"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "b4e81ac6a2b8d7a1a192484a45a79612a140214d", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0bccc95670fc3891c1991f22815ef9a6f043850/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bccc95670fc3891c1991f22815ef9a6f043850/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=c0bccc95670fc3891c1991f22815ef9a6f043850", "patch": "@@ -3,11 +3,25 @@ use rustc::lint::{LateLintPass, LateContext, LintArray, LintPass};\n use rustc_front::intravisit::{Visitor, walk_expr};\n use utils::*;\n \n+/// **What it does:** This lint checks for `if` conditions that use blocks to contain an expression.\n+///\n+/// **Why is this bad?** It isn't really rust style, same as using parentheses to contain expressions.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `if { true } ..`\n declare_lint! {\n     pub BLOCK_IN_IF_CONDITION_EXPR, Warn,\n     \"braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\"\n }\n \n+/// **What it does:** This lint checks for `if` conditions that use blocks containing statements, or conditions that use closures with blocks.\n+///\n+/// **Why is this bad?** Using blocks in the condition makes it hard to read.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `if { let x = somefunc(); x } ..` or `if somefunc(|x| { x == 47 }) ..`\n declare_lint! {\n     pub BLOCK_IN_IF_CONDITION_STMT, Warn,\n     \"avoid complex blocks in conditions, instead move the block higher and bind it \\"}, {"sha": "f5e8d20a745e0011c4992dc226e0ea89b2bee1cc", "filename": "src/map_clone.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0bccc95670fc3891c1991f22815ef9a6f043850/src%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bccc95670fc3891c1991f22815ef9a6f043850/src%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmap_clone.rs?ref=c0bccc95670fc3891c1991f22815ef9a6f043850", "patch": "@@ -4,6 +4,13 @@ use utils::{CLONE_PATH, OPTION_PATH};\n use utils::{is_adjusted, match_path, match_trait_method, match_type, snippet, span_help_and_lint};\n use utils::{walk_ptrs_ty, walk_ptrs_ty_depth};\n \n+/// **What it does:** This lint checks for mapping clone() over an iterator. It is `Warn` by default and suggests to use `.cloned()` instead.\n+///\n+/// **Why is this bad?** It makes the code less readable.\n+///\n+/// **Known problems:** False negative: The lint currently misses mapping `Clone::clone` directly. Issue #436 is tracking this.\n+///\n+/// **Example:** `x.map(|e| e.clone());`\n declare_lint!(pub MAP_CLONE, Warn,\n               \"using `.map(|x| x.clone())` to clone an iterator or option's contents (recommends \\\n               `.cloned()` instead)\");"}]}