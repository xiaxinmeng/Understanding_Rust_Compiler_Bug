{"sha": "2df473dc6942cd509e1e1763417d93c459b536cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjQ3M2RjNjk0MmNkNTA5ZTFlMTc2MzQxN2Q5M2M0NTliNTM2Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-07T05:04:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-07T05:04:37Z"}, "message": "auto merge of #4801 : z0w0/rust/randomtrait, r=graydon\n\nAlso adds Rng::gen() for generically generating any type that implements the Rand trait. There's no way to generate things with a length (for e.g. strings or vectors), because I can't think of an elegant way to do that. Maybe have a RandLen trait that inherits Rand?\r\n\r\nThis can be used for a quickcheck mechanism I'm working on.", "tree": {"sha": "3f5ffed20d1990a78c6323d34e3159ceb94f32b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f5ffed20d1990a78c6323d34e3159ceb94f32b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df473dc6942cd509e1e1763417d93c459b536cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df473dc6942cd509e1e1763417d93c459b536cd", "html_url": "https://github.com/rust-lang/rust/commit/2df473dc6942cd509e1e1763417d93c459b536cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df473dc6942cd509e1e1763417d93c459b536cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13ea4121eb8997ecdbdd616443267e56efe678b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13ea4121eb8997ecdbdd616443267e56efe678b", "html_url": "https://github.com/rust-lang/rust/commit/f13ea4121eb8997ecdbdd616443267e56efe678b"}, {"sha": "abd29e5eadb46ec7d7126fa0438c1c52c4ace00f", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd29e5eadb46ec7d7126fa0438c1c52c4ace00f", "html_url": "https://github.com/rust-lang/rust/commit/abd29e5eadb46ec7d7126fa0438c1c52c4ace00f"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "50232f99f85ab66b2611f04673d489be653edeb1", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2df473dc6942cd509e1e1763417d93c459b536cd/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df473dc6942cd509e1e1763417d93c459b536cd/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=2df473dc6942cd509e1e1763417d93c459b536cd", "patch": "@@ -23,6 +23,102 @@ use uint;\n use util;\n use vec;\n \n+/// A type that can be randomly generated using an RNG\n+pub trait Rand {\n+    static fn rand(rng: rand::Rng) -> Self;\n+}\n+\n+impl int: Rand {\n+    static fn rand(rng: rand::Rng) -> int {\n+        rng.gen_int()\n+    }\n+}\n+\n+impl i8: Rand {\n+    static fn rand(rng: rand::Rng) -> i8 {\n+        rng.gen_i8()\n+    }\n+}\n+\n+impl i16: Rand {\n+    static fn rand(rng: rand::Rng) -> i16 {\n+        rng.gen_i16()\n+    }\n+}\n+\n+impl i32: Rand {\n+    static fn rand(rng: rand::Rng) -> i32 {\n+        rng.gen_i32()\n+    }\n+}\n+\n+impl i64: Rand {\n+    static fn rand(rng: rand::Rng) -> i64 {\n+        rng.gen_i64()\n+    }\n+}\n+\n+impl u8: Rand {\n+    static fn rand(rng: rand::Rng) -> u8 {\n+        rng.gen_u8()\n+    }\n+}\n+\n+impl u16: Rand {\n+    static fn rand(rng: rand::Rng) -> u16 {\n+        rng.gen_u16()\n+    }\n+}\n+\n+impl u32: Rand {\n+    static fn rand(rng: rand::Rng) -> u32 {\n+        rng.gen_u32()\n+    }\n+}\n+\n+impl u64: Rand {\n+    static fn rand(rng: rand::Rng) -> u64 {\n+        rng.gen_u64()\n+    }\n+}\n+\n+impl float: Rand {\n+    static fn rand(rng: rand::Rng) -> float {\n+        rng.gen_float()\n+    }\n+}\n+\n+impl f32: Rand {\n+    static fn rand(rng: rand::Rng) -> f32 {\n+        rng.gen_f32()\n+    }\n+}\n+\n+impl f64: Rand {\n+    static fn rand(rng: rand::Rng) -> f64 {\n+        rng.gen_f64()\n+    }\n+}\n+\n+impl char: Rand {\n+    static fn rand(rng: rand::Rng) -> char {\n+        rng.gen_char()\n+    }\n+}\n+\n+impl bool: Rand {\n+    static fn rand(rng: rand::Rng) -> bool {\n+        rng.gen_bool()\n+    }\n+}\n+\n+impl<T: Rand> Option<T>: Rand {\n+    static fn rand(rng: rand::Rng) -> Option<T> {\n+        if rng.gen_bool() { Some(Rand::rand(rng)) }\n+        else { None }\n+    }\n+}\n+\n #[allow(non_camel_case_types)] // runtime type\n enum rctx {}\n \n@@ -49,6 +145,10 @@ pub struct Weighted<T> {\n \n /// Extension methods for random number generators\n impl Rng {\n+    /// Return a random value for a Rand type\n+    fn gen<T: Rand>() -> T {\n+        Rand::rand(self)\n+    }\n \n     /// Return a random int\n     fn gen_int() -> int {"}]}