{"sha": "b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZDQzNzkwNDIxZGFiODBhOGFkNTdmMWMzYWQzYzk4ZGJlZjMzOWQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-15T07:05:37Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T01:19:24Z"}, "message": "Fallout from new termination semantics", "tree": {"sha": "bff886a7119bef9f3401fe91fca92bab46df9379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff886a7119bef9f3401fe91fca92bab46df9379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "html_url": "https://github.com/rust-lang/rust/commit/b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6987ad22e46f55b12d8749be7522f4578d227c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/6987ad22e46f55b12d8749be7522f4578d227c62", "html_url": "https://github.com/rust-lang/rust/commit/6987ad22e46f55b12d8749be7522f4578d227c62"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "b1d387a9cc358239d02342c62b296585d78244d4", "filename": "src/librustrt/local.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Flibrustrt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Flibrustrt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal.rs?ref=b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "patch": "@@ -52,17 +52,15 @@ impl Local<local_ptr::Borrowed<Task>> for Task {\n \n #[cfg(test)]\n mod test {\n-    extern crate rustrt;\n-\n     use std::prelude::*;\n-    use rustrt::thread::Thread;\n+    use thread::Thread;\n     use super::*;\n     use task::Task;\n \n     #[test]\n     fn thread_local_task_smoke_test() {\n         Thread::start(proc() {\n-            let task = box Task::new();\n+            let task = box Task::new(None, None);\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n@@ -72,11 +70,11 @@ mod test {\n     #[test]\n     fn thread_local_task_two_instances() {\n         Thread::start(proc() {\n-            let task = box Task::new();\n+            let task = box Task::new(None, None);\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n-            let task = box Task::new();\n+            let task = box Task::new(None, None);\n             Local::put(task);\n             let task: Box<Task> = Local::take();\n             cleanup_task(task);\n@@ -86,7 +84,7 @@ mod test {\n     #[test]\n     fn borrow_smoke_test() {\n         Thread::start(proc() {\n-            let task = box Task::new();\n+            let task = box Task::new(None, None);\n             Local::put(task);\n \n             unsafe {\n@@ -100,7 +98,7 @@ mod test {\n     #[test]\n     fn borrow_with_return() {\n         Thread::start(proc() {\n-            let task = box Task::new();\n+            let task = box Task::new(None, None);\n             Local::put(task);\n \n             {\n@@ -115,7 +113,7 @@ mod test {\n     #[test]\n     fn try_take() {\n         Thread::start(proc() {\n-            let task = box Task::new();\n+            let task = box Task::new(None, None);\n             Local::put(task);\n \n             let t: Box<Task> = Local::try_take().unwrap();"}, {"sha": "2f0daf8f6e2429a073bc7d4d1c7794e5a1a2ea39", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "patch": "@@ -649,13 +649,11 @@ mod imp {\n \n #[cfg(test)]\n mod test {\n-    extern crate rustrt;\n-\n     use std::prelude::*;\n \n     use std::mem::drop;\n     use super::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n-    use rustrt::thread::Thread;\n+    use thread::Thread;\n \n     #[test]\n     fn smoke_lock() {"}, {"sha": "64c402bfbbc3985c8293205f169629c3b9a755c7", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "patch": "@@ -544,11 +544,10 @@ impl Death {\n \n #[cfg(test)]\n mod test {\n-    extern crate rustrt;\n-\n     use super::*;\n     use std::prelude::*;\n     use std::task;\n+    use unwind;\n \n     #[test]\n     fn tls() {\n@@ -594,20 +593,20 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_begin_unwind() {\n-        use rustrt::unwind::begin_unwind;\n+        use unwind::begin_unwind;\n         begin_unwind(\"cause\", &(file!(), line!()))\n     }\n \n     #[test]\n     fn drop_new_task_ok() {\n-        drop(Task::new());\n+        drop(Task::new(None, None));\n     }\n \n     // Task blocking tests\n \n     #[test]\n     fn block_and_wake() {\n-        let task = box Task::new();\n+        let task = box Task::new(None, None);\n         let task = BlockedTask::block(task).wake().unwrap();\n         task.drop();\n     }"}, {"sha": "21847a486d949f574fb87f7781e84abd5adb78c4", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "patch": "@@ -36,9 +36,12 @@ fn main() {\n     let args = os::args();\n     let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"recurse\" {\n+        let (tx, rx) = channel();\n         spawn(proc() {\n             recurse();\n+            tx.send(());\n         });\n+        rx.recv();\n     } else {\n         let recurse = Command::new(args[0].as_slice()).arg(\"recurse\").output().unwrap();\n         assert!(!recurse.status.success());"}, {"sha": "cceb0bf4d96e832d8de6a2f22d8d447370e96caf", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d43790421dab80a8ad57f1c3ad3c98dbef339d/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=b3d43790421dab80a8ad57f1c3ad3c98dbef339d", "patch": "@@ -16,8 +16,6 @@\n // non-ASCII characters.  The child process ensures all the strings are\n // intact.\n \n-extern crate native;\n-\n use std::io;\n use std::io::fs;\n use std::io::Command;"}]}