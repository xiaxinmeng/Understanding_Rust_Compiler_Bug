{"sha": "ecabed67ec75ac6498c6176a7a6de3ad53b2e54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYWJlZDY3ZWM3NWFjNjQ5OGM2MTc2YTdhNmRlM2FkNTNiMmU1NGI=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-06-07T14:43:17Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-06-07T19:16:05Z"}, "message": "Apply self-review by Centril", "tree": {"sha": "9f7ebd867ef59170b724367a783c50b4722ceba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7ebd867ef59170b724367a783c50b4722ceba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecabed67ec75ac6498c6176a7a6de3ad53b2e54b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl7dPPUACgkQLO/Nsn7Q\nvnm6/w/7B+Hc2SctHYQJY82mTWhb9F3+A82FpV0c3vzPq2vAtBVCh/0hCsf3HWuX\nwe6fiY+IS+HDSATV4gN6HzIniG9zaCHdaARI1Q/X58vE5KMrGRonW/TxXFryRjUf\nvumT/7FxnpIAjO2nxfeUDkZlf1Xc9mKqGci2k+7oU6fnCZmnklFS+k5CXic1TC6t\nRQFY93IUO7FIoqNQyvqiUOwJkP1BRMw86vXECKNv9I7jLVHXRoa9PdMKir5vu1tm\n45+dB0vDlJzHWrjSpLInbO6YBr6XbupDePA5P/7+7o72wLBF0wLegvyejr6RoiRJ\nYzN2SBcJKMJlkje2NawWrB32QdVuD+OohyLyi7tA8VYfpt+/HC3AJfEK8LZEw+yk\nOB4jLOu6LM+dhFeA83ViCKpYmoiy2qaCsK1BTfedX7C4yKxW8Bo+pNItFewkwq4a\nyg0O0pk0w4h84eHQsEJfzslOeT3FAG7gcjkngy3KVF8Fw/ag4qCwoKJjVKa7PU0a\nSxMsDGD1GSHMrBPHBn5b4B0Yh3fpTsSmlSpPnV9IlyCPJ1/NNyW+xQmGn1bL25O7\ng2jmvTSdVKsi6hv1a19VnacGEzjXSWlzOoMe/voA01U7KcU8FWk09ljJOfR/q5Gj\nr/+7dFT8LrVBefgYEqQMrlEtyBrhCNvRunzFLaETGn3HLazFdOw=\n=X4YR\n-----END PGP SIGNATURE-----", "payload": "tree 9f7ebd867ef59170b724367a783c50b4722ceba6\nparent d6136b92a203207bf25ee2f3c7c56ca9c881e92b\nauthor flip1995 <hello@philkrones.com> 1591540997 +0200\ncommitter flip1995 <hello@philkrones.com> 1591557365 +0200\n\nApply self-review by Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecabed67ec75ac6498c6176a7a6de3ad53b2e54b", "html_url": "https://github.com/rust-lang/rust/commit/ecabed67ec75ac6498c6176a7a6de3ad53b2e54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecabed67ec75ac6498c6176a7a6de3ad53b2e54b/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6136b92a203207bf25ee2f3c7c56ca9c881e92b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6136b92a203207bf25ee2f3c7c56ca9c881e92b", "html_url": "https://github.com/rust-lang/rust/commit/d6136b92a203207bf25ee2f3c7c56ca9c881e92b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "8c281126c32bf8c954b7e1c057e6ced0c8573e49", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecabed67ec75ac6498c6176a7a6de3ad53b2e54b/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecabed67ec75ac6498c6176a7a6de3ad53b2e54b/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=ecabed67ec75ac6498c6176a7a6de3ad53b2e54b", "patch": "@@ -214,21 +214,21 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n     let changed = match &mut focus_kind {\n         // These pattern forms are \"leafs\" and do not have sub-patterns.\n         // Therefore they are not some form of constructor `C`,\n-        // with which a pattern `C(P0)` may be formed,\n-        // which we would want to join with other `C(Pj)`s.\n+        // with which a pattern `C(p_0)` may be formed,\n+        // which we would want to join with other `C(p_j)`s.\n         Ident(.., None) | Lit(_) | Wild | Path(..) | Range(..) | Rest | MacCall(_)\n         // Dealt with elsewhere.\n         | Or(_) | Paren(_) => false,\n         // Transform `box x | ... | box y` into `box (x | y)`.\n         //\n-        // The cases below until `Slice(...)` deal *singleton* products.\n+        // The cases below until `Slice(...)` deal with *singleton* products.\n         // These patterns have the shape `C(p)`, and not e.g., `C(p0, ..., pn)`.\n         Box(target) => extend_with_matching(\n             target, start, alternatives,\n             |k| matches!(k, Box(_)),\n             |k| always_pat!(k, Box(p) => p),\n         ),\n-        // Transform `&m x | ... | &m y` into `&m (x, y)`.\n+        // Transform `&m x | ... | &m y` into `&m (x | y)`.\n         Ref(target, m1) => extend_with_matching(\n             target, start, alternatives,\n             |k| matches!(k, Ref(_, m2) if m1 == m2), // Mutabilities must match.\n@@ -247,13 +247,13 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n             |k, ps1, idx| matches!(k, Slice(ps2) if eq_pre_post(ps1, ps2, idx)),\n             |k| always_pat!(k, Slice(ps) => ps),\n         ),\n-        // Transform `(pre, x, post) | ... | (pre, y, post)` into `(pre, x | y, post]`.\n+        // Transform `(pre, x, post) | ... | (pre, y, post)` into `(pre, x | y, post)`.\n         Tuple(ps1) => extend_with_matching_product(\n             ps1, start, alternatives,\n             |k, ps1, idx| matches!(k, Tuple(ps2) if eq_pre_post(ps1, ps2, idx)),\n             |k| always_pat!(k, Tuple(ps) => ps),\n         ),\n-        // Transform `S(pre, x, post) | ... | S(pre, y, post)` into `S(pre, x | y, post]`.\n+        // Transform `S(pre, x, post) | ... | S(pre, y, post)` into `S(pre, x | y, post)`.\n         TupleStruct(path1, ps1) => extend_with_matching_product(\n             ps1, start, alternatives,\n             |k, ps1, idx| matches!("}]}