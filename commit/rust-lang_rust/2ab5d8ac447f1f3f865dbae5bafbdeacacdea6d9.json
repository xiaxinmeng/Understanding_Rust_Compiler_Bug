{"sha": "2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYjVkOGFjNDQ3ZjFmM2Y4NjVkYmFlNWJhZmJkZWFjYWNkZWE2ZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-20T08:26:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-20T08:26:12Z"}, "message": "Auto merge of #57651 - JohnTitor:give-char-type, r=estebank\n\nImplement new literal type `Err`\n\nFixes #57384\n\nI removed `return Ok`, otherwise, two errors occur. Any solutions?\n\nr? @estebank", "tree": {"sha": "277e74cb41d08c97b79f8b372ed0b35cb719581d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277e74cb41d08c97b79f8b372ed0b35cb719581d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "html_url": "https://github.com/rust-lang/rust/commit/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588f94b37d020aefe54b0c00ced2fdd7ccc61dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/588f94b37d020aefe54b0c00ced2fdd7ccc61dfb", "html_url": "https://github.com/rust-lang/rust/commit/588f94b37d020aefe54b0c00ced2fdd7ccc61dfb"}, {"sha": "4005d3a8cb082f84f6bfb8c2168387a747aabf1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4005d3a8cb082f84f6bfb8c2168387a747aabf1e", "html_url": "https://github.com/rust-lang/rust/commit/4005d3a8cb082f84f6bfb8c2168387a747aabf1e"}], "stats": {"total": 223, "additions": 165, "deletions": 58}, "files": [{"sha": "7e48554067a95b2d3bca2e46e7203abc3b535081", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -164,6 +164,7 @@ impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Str(value, style),\n+    Err(value),\n     ByteStr(value),\n     Byte(value),\n     Char(value),\n@@ -329,6 +330,7 @@ fn hash_token<'a, 'gcx, W: StableHasherResult>(\n             match *lit {\n                 token::Lit::Byte(val) |\n                 token::Lit::Char(val) |\n+                token::Lit::Err(val) |\n                 token::Lit::Integer(val) |\n                 token::Lit::Float(val) |\n                 token::Lit::Str_(val) |"}, {"sha": "f63c3e2ff61420a4eba75b24a8fa2ae8c1266e42", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -37,6 +37,14 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n             let id = tcx.allocate_bytes(s.as_bytes());\n             ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n         },\n+        LitKind::Err(ref s) => {\n+            let s = s.as_str();\n+            let id = tcx.allocate_bytes(s.as_bytes());\n+            return Ok(ty::Const {\n+                val: ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx),\n+                ty: tcx.types.err,\n+            });\n+        },\n         LitKind::ByteStr(ref data) => {\n             let id = tcx.allocate_bytes(data);\n             ConstValue::Scalar(Scalar::Ptr(id.into()))"}, {"sha": "ad4bc3cd83958e448be8955986ba2fad8adcbce5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -3121,7 +3121,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 opt_ty.unwrap_or_else(\n                     || tcx.mk_float_var(self.next_float_var_id()))\n             }\n-            ast::LitKind::Bool(_) => tcx.types.bool\n+            ast::LitKind::Bool(_) => tcx.types.bool,\n+            ast::LitKind::Err(_) => tcx.types.err,\n         }\n     }\n "}, {"sha": "558ba1c2e2ef2d6c8cf83efed3d6b0d00a32bd14", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -296,7 +296,7 @@ impl<'a> Classifier<'a> {\n             token::Literal(lit, _suf) => {\n                 match lit {\n                     // Text literals.\n-                    token::Byte(..) | token::Char(..) |\n+                    token::Byte(..) | token::Char(..) | token::Err(..) |\n                         token::ByteStr(..) | token::ByteStrRaw(..) |\n                         token::Str_(..) | token::StrRaw(..) => Class::String,\n "}, {"sha": "f411e40e16064eada2e3bf02121832735302c0f2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1285,6 +1285,8 @@ pub enum LitKind {\n     FloatUnsuffixed(Symbol),\n     /// A boolean literal.\n     Bool(bool),\n+    /// A recovered character literal that contains mutliple `char`s, most likely a typo.\n+    Err(Symbol),\n }\n \n impl LitKind {\n@@ -1321,6 +1323,7 @@ impl LitKind {\n             | LitKind::ByteStr(..)\n             | LitKind::Byte(..)\n             | LitKind::Char(..)\n+            | LitKind::Err(..)\n             | LitKind::Int(_, LitIntType::Unsuffixed)\n             | LitKind::FloatUnsuffixed(..)\n             | LitKind::Bool(..) => true,"}, {"sha": "e5ce6a3f19a49f7ed40276b4cbcfa739f830ef38", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -666,6 +666,7 @@ impl LitKind {\n             } else {\n                 \"false\"\n             })), false),\n+            LitKind::Err(val) => Token::Literal(token::Lit::Err(val), None),\n         }\n     }\n "}, {"sha": "df3b49cf6ed73b8970db0ce951df1da0011761f2", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -646,6 +646,7 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n \n         token::Literal(token::Byte(i), suf) => return mk_lit!(\"Byte\", suf, i),\n         token::Literal(token::Char(i), suf) => return mk_lit!(\"Char\", suf, i),\n+        token::Literal(token::Err(_i), _suf) => return cx.expr(sp, ast::ExprKind::Err),\n         token::Literal(token::Integer(i), suf) => return mk_lit!(\"Integer\", suf, i),\n         token::Literal(token::Float(i), suf) => return mk_lit!(\"Float\", suf, i),\n         token::Literal(token::Str_(i), suf) => return mk_lit!(\"Str_\", suf, i),"}, {"sha": "cf51d3ed58d53143109f9cfc24e05d0495872951", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1408,9 +1408,10 @@ impl<'a> StringReader<'a> {\n                     // lifetimes shouldn't end with a single quote\n                     // if we find one, then this is an invalid character literal\n                     if self.ch_is('\\'') {\n-                        self.fatal_span_verbose(start_with_quote, self.next_pos,\n-                                String::from(\"character literal may only contain one codepoint\"))\n-                            .raise();\n+                        self.err_span_(start_with_quote, self.next_pos,\n+                                \"character literal may only contain one codepoint\");\n+                        self.bump();\n+                        return Ok(token::Literal(token::Err(Symbol::intern(\"??\")), None))\n \n                     }\n \n@@ -1445,7 +1446,7 @@ impl<'a> StringReader<'a> {\n                                     format!(\"\\\"{}\\\"\", &self.src[start..end]),\n                                     Applicability::MachineApplicable\n                                 ).emit();\n-                            return Ok(token::Literal(token::Str_(Symbol::intern(\"??\")), None))\n+                            return Ok(token::Literal(token::Err(Symbol::intern(\"??\")), None))\n                         }\n                         if self.ch_is('\\n') || self.is_eof() || self.ch_is('/') {\n                             // Only attempt to infer single line string literals. If we encounter"}, {"sha": "8d039692ac4dd7b3782c85990a7f6b5eaaecdd9e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -466,6 +466,7 @@ crate fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Ha\n     match lit {\n        token::Byte(i) => (true, Some(LitKind::Byte(byte_lit(&i.as_str()).0))),\n        token::Char(i) => (true, Some(LitKind::Char(char_lit(&i.as_str(), diag).0))),\n+       token::Err(i) => (true, Some(LitKind::Err(i))),\n \n         // There are some valid suffixes for integer and float literals,\n         // so all the handling is done internally."}, {"sha": "f06e975a6d95acd436b6a9325d2442e48205379f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -60,6 +60,7 @@ impl DelimToken {\n pub enum Lit {\n     Byte(ast::Name),\n     Char(ast::Name),\n+    Err(ast::Name),\n     Integer(ast::Name),\n     Float(ast::Name),\n     Str_(ast::Name),\n@@ -73,6 +74,7 @@ impl Lit {\n         match *self {\n             Byte(_) => \"byte literal\",\n             Char(_) => \"char literal\",\n+            Err(_) => \"invalid literal\",\n             Integer(_) => \"integer literal\",\n             Float(_) => \"float literal\",\n             Str_(_) | StrRaw(..) => \"string literal\",\n@@ -471,8 +473,7 @@ impl Token {\n \n             Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot |\n             DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar |\n-            Question | OpenDelim(..) | CloseDelim(..) => return None,\n-\n+            Question | OpenDelim(..) | CloseDelim(..) |\n             Literal(..) | Ident(..) | Lifetime(..) | Interpolated(..) | DocComment(..) |\n             Whitespace | Comment | Shebang(..) | Eof => return None,\n         })"}, {"sha": "7cecf4b9af73faf9f4f7497991e1b7b834de5104", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -224,6 +224,7 @@ pub fn token_to_string(tok: &Token) -> String {\n             let mut out = match lit {\n                 token::Byte(b)           => format!(\"b'{}'\", b),\n                 token::Char(c)           => format!(\"'{}'\", c),\n+                token::Err(c)            => format!(\"'{}'\", c),\n                 token::Float(c)          |\n                 token::Integer(c)        => c.to_string(),\n                 token::Str_(s)           => format!(\"\\\"{}\\\"\", s),\n@@ -603,6 +604,14 @@ pub trait PrintState<'a> {\n         }\n         match lit.node {\n             ast::LitKind::Str(st, style) => self.print_string(&st.as_str(), style),\n+            ast::LitKind::Err(st) => {\n+                let st = st.as_str().escape_debug();\n+                let mut res = String::with_capacity(st.len() + 2);\n+                res.push('\\'');\n+                res.push_str(&st);\n+                res.push('\\'');\n+                self.writer().word(res)\n+            }\n             ast::LitKind::Byte(byte) => {\n                 let mut res = String::from(\"b'\");\n                 res.extend(ascii::escape_default(byte).map(|c| c as char));"}, {"sha": "f148f8e003df39eea6af5fd0574cca267292a24b", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -23,6 +23,7 @@ pub fn expand_syntax_ext(\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => match lit.node {\n                 ast::LitKind::Str(ref s, _)\n+                | ast::LitKind::Err(ref s)\n                 | ast::LitKind::Float(ref s, _)\n                 | ast::LitKind::FloatUnsuffixed(ref s) => {\n                     accumulator.push_str(&s.as_str());"}, {"sha": "1e180f87fc186ef1719ee47e0b9e71560bdd25d5", "filename": "src/test/ui/parser/lex-bad-char-literals-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,4 +1,4 @@\n // This test needs to the last one appearing in this file as it kills the parser\n static c: char =\n-    'nope' //~ ERROR: character literal may only contain one codepoint: 'nope'\n+    'nope' //~ ERROR: character literal may only contain one codepoint\n ;"}, {"sha": "7eadb8ebfe06d6021636c9038a18e480c89a49c5", "filename": "src/test/ui/parser/lex-bad-char-literals-2.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,8 +1,13 @@\n-error: character literal may only contain one codepoint: 'nope'\n+error: character literal may only contain one codepoint\n   --> $DIR/lex-bad-char-literals-2.rs:3:5\n    |\n-LL |     'nope' //~ ERROR: character literal may only contain one codepoint: 'nope'\n+LL |     'nope' //~ ERROR: character literal may only contain one codepoint\n    |     ^^^^^^\n \n-error: aborting due to previous error\n+error[E0601]: `main` function not found in crate `lex_bad_char_literals_2`\n+   |\n+   = note: consider adding a `main` function to `$DIR/lex-bad-char-literals-2.rs`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "5194ff4d9354f2dc744cf22b1f57f7c040a9c1d1", "filename": "src/test/ui/parser/lex-bad-char-literals-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,7 +1,7 @@\n-// This test needs to the last one appearing in this file as it kills the parser\n-static c: char =\n-    '\u25cf\u25cf' //~ ERROR: character literal may only contain one codepoint\n-         //~| ERROR: mismatched types\n-;\n+static c: char = '\u25cf\u25cf';\n+//~^ ERROR: character literal may only contain one codepoint\n \n-fn main() {}\n+fn main() {\n+    let ch: &str = '\u25cf\u25cf';\n+    //~^ ERROR: character literal may only contain one codepoint\n+}"}, {"sha": "6462a3c0e57ba53606c88d6c48cd160f9c4aa96f", "filename": "src/test/ui/parser/lex-bad-char-literals-3.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.stderr?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,22 +1,22 @@\n error: character literal may only contain one codepoint\n-  --> $DIR/lex-bad-char-literals-3.rs:3:5\n+  --> $DIR/lex-bad-char-literals-3.rs:1:18\n    |\n-LL |     '\u25cf\u25cf' //~ ERROR: character literal may only contain one codepoint\n-   |     ^^^^\n+LL | static c: char = '\u25cf\u25cf';\n+   |                  ^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL |     \"\u25cf\u25cf\" //~ ERROR: character literal may only contain one codepoint\n-   |     ^^^^\n+LL | static c: char = \"\u25cf\u25cf\";\n+   |                  ^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/lex-bad-char-literals-3.rs:3:5\n+error: character literal may only contain one codepoint\n+  --> $DIR/lex-bad-char-literals-3.rs:5:20\n    |\n-LL |     '\u25cf\u25cf' //~ ERROR: character literal may only contain one codepoint\n-   |     ^^^^ expected char, found reference\n+LL |     let ch: &str = '\u25cf\u25cf';\n+   |                    ^^^^\n+help: if you meant to write a `str` literal, use double quotes\n    |\n-   = note: expected type `char`\n-              found type `&'static str`\n+LL |     let ch: &str = \"\u25cf\u25cf\";\n+   |                    ^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "e13f11f36df489e0b23972e514d0bdd11675cddb", "filename": "src/test/ui/parser/lex-bad-char-literals-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-4.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,5 +1,5 @@\n //\n // This test needs to the last one appearing in this file as it kills the parser\n static c: char =\n-    '\u25cf  //~ ERROR: character literal may only contain one codepoint: '\u25cf\n+    '\u25cf  //~ ERROR: character literal may only contain one codepoint\n ;"}, {"sha": "881e3d5276bb1bf564710cf63acfdacf8ae549f9", "filename": "src/test/ui/parser/lex-bad-char-literals-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-4.stderr?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,7 +1,7 @@\n error: character literal may only contain one codepoint: '\u25cf\n   --> $DIR/lex-bad-char-literals-4.rs:4:5\n    |\n-LL |     '\u25cf  //~ ERROR: character literal may only contain one codepoint: '\u25cf\n+LL |     '\u25cf  //~ ERROR: character literal may only contain one codepoint\n    |     ^^\n \n error: aborting due to previous error"}, {"sha": "0c4339edc4fa7f9d17dea6da00e97f56d0b941ed", "filename": "src/test/ui/parser/lex-bad-char-literals-5.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,8 +1,7 @@\n-//\n-// This test needs to the last one appearing in this file as it kills the parser\n-static c: char =\n-    '\\x10\\x10'  //~ ERROR: character literal may only contain one codepoint\n-                //~| ERROR: mismatched types\n-;\n+static c: char = '\\x10\\x10';\n+//~^ ERROR: character literal may only contain one codepoint\n \n-fn main() {}\n+fn main() {\n+    let ch: &str = '\\x10\\x10';\n+    //~^ ERROR: character literal may only contain one codepoint\n+}"}, {"sha": "ef0297331015339b70445ad36d83dffdbe7b0213", "filename": "src/test/ui/parser/lex-bad-char-literals-5.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,22 +1,22 @@\n error: character literal may only contain one codepoint\n-  --> $DIR/lex-bad-char-literals-5.rs:4:5\n+  --> $DIR/lex-bad-char-literals-5.rs:1:18\n    |\n-LL |     '/x10/x10'  //~ ERROR: character literal may only contain one codepoint\n-   |     ^^^^^^^^^^\n+LL | static c: char = '/x10/x10';\n+   |                  ^^^^^^^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL |     \"/x10/x10\"  //~ ERROR: character literal may only contain one codepoint\n-   |     ^^^^^^^^^^\n+LL | static c: char = \"/x10/x10\";\n+   |                  ^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/lex-bad-char-literals-5.rs:4:5\n+error: character literal may only contain one codepoint\n+  --> $DIR/lex-bad-char-literals-5.rs:5:20\n    |\n-LL |     '/x10/x10'  //~ ERROR: character literal may only contain one codepoint\n-   |     ^^^^^^^^^^ expected char, found reference\n+LL |     let ch: &str = '/x10/x10';\n+   |                    ^^^^^^^^^^\n+help: if you meant to write a `str` literal, use double quotes\n    |\n-   = note: expected type `char`\n-              found type `&'static str`\n+LL |     let ch: &str = \"/x10/x10\";\n+   |                    ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4379b4fa6d777b53006a85a3360e2b9a1b6c52b5", "filename": "src/test/ui/parser/lex-bad-char-literals-6.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -0,0 +1,17 @@\n+fn main() {\n+    let x: &str = 'ab';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    let y: char = 'cd';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    let z = 'ef';\n+    //~^ ERROR: character literal may only contain one codepoint\n+\n+    if x == y {}\n+    //~^ ERROR: can't compare `&str` with `char`\n+    if y == z {}  // no error here\n+    if x == z {}\n+    //~^ ERROR: can't compare `&str` with `char`\n+\n+    let a: usize = \"\";\n+    //~^ ERROR: mismatched types\n+}"}, {"sha": "df99726034878d464a6bb9fe3008563feab7a550", "filename": "src/test/ui/parser/lex-bad-char-literals-6.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -0,0 +1,47 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/lex-bad-char-literals-6.rs:2:19\n+   |\n+LL |     let x: &str = 'ab';\n+   |                   ^^^^\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/lex-bad-char-literals-6.rs:4:19\n+   |\n+LL |     let y: char = 'cd';\n+   |                   ^^^^\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/lex-bad-char-literals-6.rs:6:13\n+   |\n+LL |     let z = 'ef';\n+   |             ^^^^\n+\n+error[E0277]: can't compare `&str` with `char`\n+  --> $DIR/lex-bad-char-literals-6.rs:9:10\n+   |\n+LL |     if x == y {}\n+   |          ^^ no implementation for `&str == char`\n+   |\n+   = help: the trait `std::cmp::PartialEq<char>` is not implemented for `&str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/lex-bad-char-literals-6.rs:15:20\n+   |\n+LL |     let a: usize = \"\";\n+   |                    ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error[E0277]: can't compare `&str` with `char`\n+  --> $DIR/lex-bad-char-literals-6.rs:12:10\n+   |\n+LL |     if x == z {}\n+   |          ^^ no implementation for `&str == char`\n+   |\n+   = help: the trait `std::cmp::PartialEq<char>` is not implemented for `&str`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "accead5c850cca8906988432f19a83c12ceebd2e", "filename": "src/test/ui/str/str-as-char.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.fixed?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n fn main() {\n-    println!(\"\u25cf\u25cf\");\n-    //~^ ERROR character literal may only contain one codepoint\n+    println!(\"{}\", \"\u25cf\u25cf\"); //~ ERROR character literal may only contain one codepoint\n+    //~^ ERROR format argument must be a string literal\n }"}, {"sha": "fb179ec7245d2db4e48909399b9141c83eb61dca", "filename": "src/test/ui/str/str-as-char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.rs?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n fn main() {\n-    println!('\u25cf\u25cf');\n-    //~^ ERROR character literal may only contain one codepoint\n+    println!('\u25cf\u25cf'); //~ ERROR character literal may only contain one codepoint\n+    //~^ ERROR format argument must be a string literal\n }"}, {"sha": "4ca430a4cde9b0ddc15b6f4883e6692875a29f49", "filename": "src/test/ui/str/str-as-char.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr?ref=2ab5d8ac447f1f3f865dbae5bafbdeacacdea6d9", "patch": "@@ -1,12 +1,22 @@\n error: character literal may only contain one codepoint\n   --> $DIR/str-as-char.rs:4:14\n    |\n-LL |     println!('\u25cf\u25cf');\n+LL |     println!('\u25cf\u25cf'); //~ ERROR character literal may only contain one codepoint\n    |              ^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL |     println!(\"\u25cf\u25cf\");\n+LL |     println!(\"\u25cf\u25cf\"); //~ ERROR character literal may only contain one codepoint\n    |              ^^^^\n \n-error: aborting due to previous error\n+error: format argument must be a string literal\n+  --> $DIR/str-as-char.rs:4:14\n+   |\n+LL |     println!('\u25cf\u25cf'); //~ ERROR character literal may only contain one codepoint\n+   |              ^^^^\n+help: you might be missing a string literal to format with\n+   |\n+LL |     println!(\"{}\", '\u25cf\u25cf'); //~ ERROR character literal may only contain one codepoint\n+   |              ^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}