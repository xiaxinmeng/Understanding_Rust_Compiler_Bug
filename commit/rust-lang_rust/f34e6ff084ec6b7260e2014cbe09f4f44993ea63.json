{"sha": "f34e6ff084ec6b7260e2014cbe09f4f44993ea63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNGU2ZmYwODRlYzZiNzI2MGUyMDE0Y2JlMDlmNGY0NDk5M2VhNjM=", "commit": {"author": {"name": "Martin Pool", "email": "mbp@sourcefrog.net", "date": "2015-11-28T01:10:50Z"}, "committer": {"name": "Martin Pool", "email": "mbp@sourcefrog.net", "date": "2015-11-28T01:15:05Z"}, "message": "Copy in some documentation about which casts are legal", "tree": {"sha": "8e15aceed71af4e1a2335cd4a6d1d3de28ccea36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e15aceed71af4e1a2335cd4a6d1d3de28ccea36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34e6ff084ec6b7260e2014cbe09f4f44993ea63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34e6ff084ec6b7260e2014cbe09f4f44993ea63", "html_url": "https://github.com/rust-lang/rust/commit/f34e6ff084ec6b7260e2014cbe09f4f44993ea63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34e6ff084ec6b7260e2014cbe09f4f44993ea63/comments", "author": {"login": "sourcefrog", "id": 346355, "node_id": "MDQ6VXNlcjM0NjM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcefrog", "html_url": "https://github.com/sourcefrog", "followers_url": "https://api.github.com/users/sourcefrog/followers", "following_url": "https://api.github.com/users/sourcefrog/following{/other_user}", "gists_url": "https://api.github.com/users/sourcefrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcefrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcefrog/subscriptions", "organizations_url": "https://api.github.com/users/sourcefrog/orgs", "repos_url": "https://api.github.com/users/sourcefrog/repos", "events_url": "https://api.github.com/users/sourcefrog/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcefrog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sourcefrog", "id": 346355, "node_id": "MDQ6VXNlcjM0NjM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcefrog", "html_url": "https://github.com/sourcefrog", "followers_url": "https://api.github.com/users/sourcefrog/followers", "following_url": "https://api.github.com/users/sourcefrog/following{/other_user}", "gists_url": "https://api.github.com/users/sourcefrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcefrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcefrog/subscriptions", "organizations_url": "https://api.github.com/users/sourcefrog/orgs", "repos_url": "https://api.github.com/users/sourcefrog/repos", "events_url": "https://api.github.com/users/sourcefrog/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcefrog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac2b13a5a0132a020a3954031635fed65fd6c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac2b13a5a0132a020a3954031635fed65fd6c22", "html_url": "https://github.com/rust-lang/rust/commit/bac2b13a5a0132a020a3954031635fed65fd6c22"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "4c520e3d6a80f5b4002efc04dd0a6535e4e4ba67", "filename": "src/doc/book/casting-between-types.md", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f34e6ff084ec6b7260e2014cbe09f4f44993ea63/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/f34e6ff084ec6b7260e2014cbe09f4f44993ea63/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcasting-between-types.md?ref=f34e6ff084ec6b7260e2014cbe09f4f44993ea63", "patch": "@@ -7,15 +7,71 @@ most dangerous features of Rust!\n \n # `as`\n \n-The `as` keyword does basic casting:\n+The `as` keyword does safe casting:\n \n ```rust\n let x: i32 = 5;\n \n let y = x as i64;\n ```\n \n-It only allows certain kinds of casting, however:\n+There are three major categories of safe cast: explicit coercions, casts\n+between numeric types, and pointer casts.\n+\n+Casting is not transitive: even if `e as U1 as U2` is a valid\n+expression, `e as U2` is not necessarily so (in fact it will only be valid if\n+`U1` coerces to `U2`).\n+\n+\n+## Explicit coercions\n+\n+A cast `e as U` is valid if `e` has type `T` and `T` *coerces* to `U`.\n+\n+For example:\n+\n+```rust\n+let a = \"hello\";\n+let b = a as String\n+```\n+\n+Coercions always occur implicitly so this form is only for clarity.\n+\n+## Numeric casts\n+\n+A cast `e as U` is also valid in any of the following cases:\n+\n+ * `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n+ * `e` is a C-like enum and `U` is an integer type; *enum-cast*\n+ * `e` has type `bool` or `char` and `U` is an integer; *prim-int-cast*\n+ * `e` has type `u8` and `U` is `char`; *u8-char-cast*\n+ \n+For example\n+\n+```rust\n+let one = true as u8;\n+let at_sign = 64 as char;\n+```\n+ \n+## Pointer casts\n+ \n+Perhaps surprisingly, it is safe to cast pointers to and from integers, and\n+to cast between pointers to different types subject to some constraints. It\n+is only unsafe to dereference the pointer.\n+\n+* `e` has type `*T`, `U` is a pointer to `*U_0`, and either `U_0: Sized` or\n+  unsize_kind(`T`) = unsize_kind(`U_0`); a *ptr-ptr-cast*\n+* `e` has type `*T` and `U` is a numeric type, while `T: Sized`; *ptr-addr-cast*\n+* `e` is an integer and `U` is `*U_0`, while `U_0: Sized`; *addr-ptr-cast*\n+* `e` has type `&[T; n]` and `U` is `*const T`; *array-ptr-cast*\n+* `e` is a function pointer type and `U` has type `*T`,\n+  while `T: Sized`; *fptr-ptr-cast*\n+* `e` is a function pointer type and `U` is an integer; *fptr-addr-cast*\n+\n+\n+# `transmute`\n+\n+`as` only allows safe casting, and will for example reject an attempt to\n+cast four bytes into a `u32`:\n \n ```rust,ignore\n let a = [0u8, 0u8, 0u8, 0u8];\n@@ -31,13 +87,11 @@ let b = a as u32; // four eights makes 32\n         ^~~~~~~~\n ```\n \n-It\u2019s a \u2018non-scalar cast\u2019 because we have multiple values here: the four\n+This is a \u2018non-scalar cast\u2019 because we have multiple values here: the four\n elements of the array. These kinds of casts are very dangerous, because they\n make assumptions about the way that multiple underlying structures are\n implemented. For this, we need something more dangerous.\n \n-# `transmute`\n-\n The `transmute` function is provided by a [compiler intrinsic][intrinsics], and\n what it does is very simple, but very scary. It tells Rust to treat a value of\n one type as though it were another type. It does this regardless of the"}]}