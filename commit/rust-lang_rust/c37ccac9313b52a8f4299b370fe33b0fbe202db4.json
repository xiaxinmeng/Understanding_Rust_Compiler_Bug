{"sha": "c37ccac9313b52a8f4299b370fe33b0fbe202db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzN2NjYWM5MzEzYjUyYThmNDI5OWIzNzBmZTMzYjBmYmUyMDJkYjQ=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-24T19:35:02Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-26T22:19:07Z"}, "message": "Add a run-pass test for existential traits in ARCs.", "tree": {"sha": "1501e18aebbea92c05b6134aea576701a82dc55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1501e18aebbea92c05b6134aea576701a82dc55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c37ccac9313b52a8f4299b370fe33b0fbe202db4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c37ccac9313b52a8f4299b370fe33b0fbe202db4", "html_url": "https://github.com/rust-lang/rust/commit/c37ccac9313b52a8f4299b370fe33b0fbe202db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c37ccac9313b52a8f4299b370fe33b0fbe202db4/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "html_url": "https://github.com/rust-lang/rust/commit/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "585c2185a7eca000d789a9131aed26d3018b8637", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/c37ccac9313b52a8f4299b370fe33b0fbe202db4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37ccac9313b52a8f4299b370fe33b0fbe202db4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=c37ccac9313b52a8f4299b370fe33b0fbe202db4", "patch": "@@ -0,0 +1,103 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that a heterogeneous list of existential types can be put inside an ARC\n+// and shared between tasks as long as all types fulfill Const+Owned.\n+\n+// xfail-fast\n+\n+extern mod extra;\n+use extra::arc;\n+use std::comm;\n+use std::task;\n+use std::cell;\n+\n+trait Pet {\n+    fn name(&self, blk: &fn(&str));\n+    fn num_legs(&self) -> uint;\n+    fn of_good_pedigree(&self) -> bool;\n+}\n+\n+struct Catte {\n+    num_whiskers: uint,\n+    name: ~str,\n+}\n+\n+struct Dogge {\n+    bark_decibels: uint,\n+    tricks_known: uint,\n+    name: ~str,\n+}\n+\n+struct Goldfyshe {\n+    swim_speed: uint,\n+    name: ~str,\n+}\n+\n+impl Pet for Catte {\n+    fn name(&self, blk: &fn(&str)) { blk(self.name) }\n+    fn num_legs(&self) -> uint { 4 }\n+    fn of_good_pedigree(&self) -> bool { self.num_whiskers >= 4 }\n+}\n+impl Pet for Dogge {\n+    fn name(&self, blk: &fn(&str)) { blk(self.name) }\n+    fn num_legs(&self) -> uint { 4 }\n+    fn of_good_pedigree(&self) -> bool {\n+        self.bark_decibels < 70 || self.tricks_known > 20\n+    }\n+}\n+impl Pet for Goldfyshe {\n+    fn name(&self, blk: &fn(&str)) { blk(self.name) }\n+    fn num_legs(&self) -> uint { 0 }\n+    fn of_good_pedigree(&self) -> bool { self.swim_speed >= 500 }\n+}\n+\n+fn main() {\n+    let catte = Catte { num_whiskers: 7, name: ~\"alonzo_church\" };\n+    let dogge1 = Dogge { bark_decibels: 100, tricks_known: 42, name: ~\"alan_turing\" };\n+    let dogge2 = Dogge { bark_decibels: 55,  tricks_known: 11, name: ~\"albert_einstein\" };\n+    let fishe = Goldfyshe { swim_speed: 998, name: ~\"alec_guinness\" };\n+    let arc = arc::ARC(~[~catte  as ~Pet:Const+Owned,\n+                         ~dogge1 as ~Pet:Const+Owned,\n+                         ~fishe  as ~Pet:Const+Owned,\n+                         ~dogge2 as ~Pet:Const+Owned]);\n+    let (p1,c1) = comm::stream();\n+    let arc1 = cell::Cell::new(arc.clone());\n+    do task::spawn { check_legs(arc1.take()); c1.send(()); }\n+    let (p2,c2) = comm::stream();\n+    let arc2 = cell::Cell::new(arc.clone());\n+    do task::spawn { check_names(arc2.take()); c2.send(()); }\n+    let (p3,c3) = comm::stream();\n+    let arc3 = cell::Cell::new(arc.clone());\n+    do task::spawn { check_pedigree(arc3.take()); c3.send(()); }\n+    p1.recv();\n+    p2.recv();\n+    p3.recv();\n+}\n+\n+fn check_legs(arc: arc::ARC<~[~Pet:Const+Owned]>) {\n+    let mut legs = 0;\n+    for arc.get().iter().advance |pet| {\n+        legs += pet.num_legs();\n+    }\n+    assert!(legs == 12);\n+}\n+fn check_names(arc: arc::ARC<~[~Pet:Const+Owned]>) {\n+    for arc.get().iter().advance |pet| {\n+        do pet.name |name| {\n+            assert!(name[0] == 'a' as u8 && name[1] == 'l' as u8);\n+        }\n+    }\n+}\n+fn check_pedigree(arc: arc::ARC<~[~Pet:Const+Owned]>) {\n+    for arc.get().iter().advance |pet| {\n+        assert!(pet.of_good_pedigree());\n+    }\n+}"}]}