{"sha": "20f0cdaa6356c6a6562ad735adccb51d9e25aae8", "node_id": "C_kwDOAAsO6NoAKDIwZjBjZGFhNjM1NmM2YTY1NjJhZDczNWFkY2NiNTFkOWUyNWFhZTg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-21T04:53:28Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-23T23:40:21Z"}, "message": "Rewrite `TyKind::fmt`.\n\nThe handwritten versions more compact and easier to read than the\nderived version.", "tree": {"sha": "0289ba09534c8691499be98414697cfede9ae8eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0289ba09534c8691499be98414697cfede9ae8eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f0cdaa6356c6a6562ad735adccb51d9e25aae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f0cdaa6356c6a6562ad735adccb51d9e25aae8", "html_url": "https://github.com/rust-lang/rust/commit/20f0cdaa6356c6a6562ad735adccb51d9e25aae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f0cdaa6356c6a6562ad735adccb51d9e25aae8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b54363961c6adac7b2acc1aade81c0173797e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b54363961c6adac7b2acc1aade81c0173797e52", "html_url": "https://github.com/rust-lang/rust/commit/5b54363961c6adac7b2acc1aade81c0173797e52"}], "stats": {"total": 163, "additions": 32, "deletions": 131}, "files": [{"sha": "f9708d6d9195fcf695e2d03b9c9ea72a4c017a90", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20f0cdaa6356c6a6562ad735adccb51d9e25aae8/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0cdaa6356c6a6562ad735adccb51d9e25aae8/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=20f0cdaa6356c6a6562ad735adccb51d9e25aae8", "patch": "@@ -1,3 +1,4 @@\n+#![feature(fmt_helpers_for_derive)]\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n "}, {"sha": "74737e30bb4d35a78c3adb1214276ba0bc2fb2eb", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 31, "deletions": 131, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/20f0cdaa6356c6a6562ad735adccb51d9e25aae8/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f0cdaa6356c6a6562ad735adccb51d9e25aae8/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=20f0cdaa6356c6a6562ad735adccb51d9e25aae8", "patch": "@@ -554,137 +554,37 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n // This is manually implemented because a derive would require `I: Debug`\n impl<I: Interner> fmt::Debug for TyKind<I> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match (&*self,) {\n-            (&Bool,) => fmt::Formatter::write_str(f, \"Bool\"),\n-            (&Char,) => fmt::Formatter::write_str(f, \"Char\"),\n-            (&Int(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Int\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Uint(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Uint\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Float(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Float\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Adt(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Adt\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Foreign(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Foreign\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Str,) => fmt::Formatter::write_str(f, \"Str\"),\n-            (&Array(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Array\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Slice(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Slice\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&RawPtr(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"RawPtr\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Ref(ref __self_0, ref __self_1, ref __self_2),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Ref\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_2);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&FnDef(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"FnDef\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&FnPtr(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"FnPtr\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Dynamic(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Dynamic\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Closure(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Closure\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Generator(ref __self_0, ref __self_1, ref __self_2),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Generator\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_2);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&GeneratorWitness(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"GeneratorWitness\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Never,) => fmt::Formatter::write_str(f, \"Never\"),\n-            (&Tuple(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Tuple\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Projection(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Projection\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Opaque(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Opaque\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Param(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Param\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Bound(ref __self_0, ref __self_1),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Bound\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_1);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Placeholder(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Placeholder\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Infer(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Infer\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n-            (&Error(ref __self_0),) => {\n-                let debug_trait_builder = &mut fmt::Formatter::debug_tuple(f, \"Error\");\n-                let _ = fmt::DebugTuple::field(debug_trait_builder, &__self_0);\n-                fmt::DebugTuple::finish(debug_trait_builder)\n-            }\n+        use std::fmt::*;\n+        match self {\n+            Bool => Formatter::write_str(f, \"Bool\"),\n+            Char => Formatter::write_str(f, \"Char\"),\n+            Int(f0) => Formatter::debug_tuple_field1_finish(f, \"Int\", f0),\n+            Uint(f0) => Formatter::debug_tuple_field1_finish(f, \"Uint\", f0),\n+            Float(f0) => Formatter::debug_tuple_field1_finish(f, \"Float\", f0),\n+            Adt(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Adt\", f0, f1),\n+            Foreign(f0) => Formatter::debug_tuple_field1_finish(f, \"Foreign\", f0),\n+            Str => Formatter::write_str(f, \"Str\"),\n+            Array(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Array\", f0, f1),\n+            Slice(f0) => Formatter::debug_tuple_field1_finish(f, \"Slice\", f0),\n+            RawPtr(f0) => Formatter::debug_tuple_field1_finish(f, \"RawPtr\", f0),\n+            Ref(f0, f1, f2) => Formatter::debug_tuple_field3_finish(f, \"Ref\", f0, f1, f2),\n+            FnDef(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"FnDef\", f0, f1),\n+            FnPtr(f0) => Formatter::debug_tuple_field1_finish(f, \"FnPtr\", f0),\n+            Dynamic(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Dynamic\", f0, f1),\n+            Closure(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Closure\", f0, f1),\n+            Generator(f0, f1, f2) => {\n+                Formatter::debug_tuple_field3_finish(f, \"Generator\", f0, f1, f2)\n+            }\n+            GeneratorWitness(f0) => Formatter::debug_tuple_field1_finish(f, \"GeneratorWitness\", f0),\n+            Never => Formatter::write_str(f, \"Never\"),\n+            Tuple(f0) => Formatter::debug_tuple_field1_finish(f, \"Tuple\", f0),\n+            Projection(f0) => Formatter::debug_tuple_field1_finish(f, \"Projection\", f0),\n+            Opaque(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Opaque\", f0, f1),\n+            Param(f0) => Formatter::debug_tuple_field1_finish(f, \"Param\", f0),\n+            Bound(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Bound\", f0, f1),\n+            Placeholder(f0) => Formatter::debug_tuple_field1_finish(f, \"Placeholder\", f0),\n+            Infer(f0) => Formatter::debug_tuple_field1_finish(f, \"Infer\", f0),\n+            TyKind::Error(f0) => Formatter::debug_tuple_field1_finish(f, \"Error\", f0),\n         }\n     }\n }"}]}