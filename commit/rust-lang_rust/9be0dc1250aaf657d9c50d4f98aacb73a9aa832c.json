{"sha": "9be0dc1250aaf657d9c50d4f98aacb73a9aa832c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTBkYzEyNTBhYWY2NTdkOWM1MGQ0Zjk4YWFjYjczYTlhYTgzMmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-03T00:37:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-03T01:00:13Z"}, "message": "Cleanup mk/tests.mk", "tree": {"sha": "e23ed6efdd8f6d1bef5e656e2316d6828cf25453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23ed6efdd8f6d1bef5e656e2316d6828cf25453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be0dc1250aaf657d9c50d4f98aacb73a9aa832c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be0dc1250aaf657d9c50d4f98aacb73a9aa832c", "html_url": "https://github.com/rust-lang/rust/commit/9be0dc1250aaf657d9c50d4f98aacb73a9aa832c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be0dc1250aaf657d9c50d4f98aacb73a9aa832c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6f3cf275061c03c8169ce50779efbda0faa845", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6f3cf275061c03c8169ce50779efbda0faa845", "html_url": "https://github.com/rust-lang/rust/commit/3a6f3cf275061c03c8169ce50779efbda0faa845"}], "stats": {"total": 187, "additions": 81, "deletions": 106}, "files": [{"sha": "318e2935e6ce93113e22ccd3f0029f778a1abe18", "filename": "mk/tests.mk", "status": "modified", "additions": 81, "deletions": 106, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/9be0dc1250aaf657d9c50d4f98aacb73a9aa832c/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9be0dc1250aaf657d9c50d4f98aacb73a9aa832c/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=9be0dc1250aaf657d9c50d4f98aacb73a9aa832c", "patch": "@@ -88,217 +88,192 @@ tidy:\n \t    $(S)src/etc/%, $(PKG_FILES)) \\\n \t  | xargs -n 10 python $(S)src/etc/tidy.py\n \n-# Cancel the implicit .out rule in GNU make\n-%.out: %\n-\n-%.out: %.out.tmp\n-\t$(Q)mv $< $@\n-\n \n ######################################################################\n # Rules for the test runners\n ######################################################################\n \n-# StageN template: to stay consistent with stageN.mk, arge 2 is the\n-# stage being tested, arg 1 is stage N-1\n-\n define TEST_STAGEN\n \n-# FIXME: These rules are complicated by a scheme to produce .out files\n-# for each test, with the idea that if the targets produce actual\n-# output, subsequent \"make check's\" will just exit successfully\n-# without re-running the tests. Unfortunately this scheme is currently\n-# broken and the tests rerun with every invocation of \"make check\"\n-# anyway. Nobody seems to have noticed, so it would be simpler to just\n-# remove all the code here involved with producing .out files.\n+# All the per-stage build rules you might want to call from the\n+# command line\n \n-check-stage$(2): tidy \\\n-\tcheck-stage$(2)-rustc \\\n-\tcheck-stage$(2)-std \\\n-\tcheck-stage$(2)-rpass \\\n-\tcheck-stage$(2)-rfail \\\n-\tcheck-stage$(2)-cfail \\\n-\tcheck-stage$(2)-bench \\\n-\tcheck-stage$(2)-pretty \\\n+check-stage$(1): tidy \\\n+\tcheck-stage$(1)-rustc \\\n+\tcheck-stage$(1)-std \\\n+\tcheck-stage$(1)-rpass \\\n+\tcheck-stage$(1)-rfail \\\n+\tcheck-stage$(1)-cfail \\\n+\tcheck-stage$(1)-bench \\\n+\tcheck-stage$(1)-pretty\n \n+check-stage$(1)-std: check-stage$(1)-std-dummy\n \n-# Rules for the standard library test runner\n+check-stage$(1)-rustc: check-stage$(1)-rustc-dummy\n \n-check-stage$(2)-std: test/stdtest.stage$(2).out \\\n+check-stage$(1)-cfail: check-stage$(1)-cfail-dummy\n \n-test/stdtest.stage$(2)$$(X): $$(STDTEST_CRATE) $$(STDTEST_INPUTS) \\\n-                             $$(SREQ$(2)$$(CFG_HOST_TRIPLE))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2)) -o $$@ $$< --test\n+check-stage$(1)-rfail: check-stage$(1)-rfail-dummy\n \n-test/stdtest.stage$(2).out.tmp: test/stdtest.stage$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<) $$(TESTARGS)\n-\t$$(Q)touch $$@\n+check-stage$(1)-rpass: check-stage$(1)-rpass-dummy\n \n+check-stage$(1)-bench: check-stage$(1)-bench-dummy\n \n-# Rules for the rustc test runner\n+check-stage$(1)-perf: check-stage$(1)-perf-dummy\n \n-check-stage$(2)-rustc: test/rustctest.stage$(2).out \\\n+check-stage$(1)-pretty: check-stage$(1)-pretty-rpass \\\n+                        check-stage$(1)-pretty-rfail \\\n+                        check-stage$(1)-pretty-bench \\\n+                        check-stage$(1)-pretty-pretty\n \n-test/rustctest.stage$(2)$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-                           $$(HOST_LIB$(2))/$$(CFG_RUNTIME) \\\n-                           $$(HOST_STDLIB_DEFAULT$(2)) \\\n-                           $$(HOST_LIB$(2))/$$(CFG_RUSTLLVM) \\\n-                           $$(SREQ$(1)$$(CFG_HOST_TRIPLE))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)) -L $$(HOST_LIB$(2)) -o $$@ $$< --test\n+check-stage$(1)-pretty-rpass: check-stage$(1)-pretty-rpass-dummy\n \n-test/rustctest.stage$(2).out.tmp: test/rustctest.stage$(2)$$(X)\n-\t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN,$$(HOST_LIB$(2)),$$(CFG_VALGRIND) $$<) \\\n-\t  $$(TESTARGS)\n-\t$$(Q)touch $$@\n+check-stage$(1)-pretty-rfail: check-stage$(1)-pretty-rfail-dummy\n \n+check-stage$(1)-pretty-bench: check-stage$(1)-pretty-bench-dummy\n \n-# Rules for the cfail/rfail/rpass/bench/perf test runner\n+check-stage$(1)-pretty-pretty: check-stage$(1)-pretty-pretty-dummy\n \n-check-stage$(2)-cfail: test/compile-fail.stage$(2).out \\\n \n-check-stage$(2)-rfail: test/run-fail.stage$(2).out \\\n+# Rules for the standard library test runner\n \n-check-stage$(2)-rpass: test/run-pass.stage$(2).out \\\n+test/stdtest.stage$(1)$$(X): $$(STDTEST_CRATE) $$(STDTEST_INPUTS) \\\n+                             $$(SREQ$(1)$$(CFG_HOST_TRIPLE))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)) -o $$@ $$< --test\n \n-check-stage$(2)-bench: test/bench.stage$(2).out \\\n+check-stage$(1)-std-dummy: test/stdtest.stage$(1)$$(X)\n+\t@$$(call E, run: $$<)\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<) $$(TESTARGS)\n \n-check-stage$(2)-perf: test/perf.stage$(2).out \\\n \n-check-stage$(2)-pretty-rpass: test/pretty-rpass.stage$(2).out \\\n+# Rules for the rustc test runner\n \n-check-stage$(2)-pretty-rfail: test/pretty-rfail.stage$(2).out \\\n+test/rustctest.stage$(1)$$(X): \\\n+\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n+\t$$(TARGET_SREQ$(1)$$(CFG_HOST_TRPILE)) \\\n+        $$(HOST_LIB$(1))/$$(CFG_RUSTLLVM) \\\n+\t$$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE))/$$(CFG_RUSTLLVM)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)) -o $$@ $$< --test\n \n-check-stage$(2)-pretty-bench: test/pretty-bench.stage$(2).out \\\n+check-stage$(1)-rustc-dummy: test/rustctest.stage$(1)$$(X)\n+\t@$$(call E, run: $$<)\n+\t$$(Q)$$(call CFG_RUN,$$(HOST_LIB$(1)),$$(CFG_VALGRIND) $$<) \\\n+\t  $$(TESTARGS)\n \n-check-stage$(2)-pretty-pretty: test/pretty-pretty.stage$(2).out \\\n \n-check-stage$(2)-pretty: check-stage$(2)-pretty-rpass \\\n-                        check-stage$(2)-pretty-rfail \\\n-                        check-stage$(2)-pretty-bench \\\n-                        check-stage$(2)-pretty-pretty \\\n+# Rules for the cfail/rfail/rpass/bench/perf test runner\n \n-CTEST_COMMON_ARGS$(2) := --compile-lib-path $$(HOST_LIB$(2)) \\\n-                         --run-lib-path $$(TARGET_LIB$(2)$$(CFG_HOST_TRIPLE)) \\\n-                         --rustc-path $$(HOST_BIN$(2))/rustc$$(X) \\\n-                         --stage-id stage$(2) \\\n+CTEST_COMMON_ARGS$(1) := --compile-lib-path $$(HOST_LIB$(1)) \\\n+                         --run-lib-path $$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE)) \\\n+                         --rustc-path $$(HOST_BIN$(1))/rustc$$(X) \\\n+                         --stage-id stage$(1) \\\n                          --rustcflags \"$$(CFG_RUSTC_FLAGS)\" \\\n                          $$(CTEST_TESTARGS) \\\n \n-CFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+CFAIL_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                   --src-base $$(S)src/test/compile-fail/ \\\n                   --build-base test/compile-fail/ \\\n                   --mode compile-fail \\\n \n-RFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+RFAIL_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                   --src-base $$(S)src/test/run-fail/ \\\n                   --build-base test/run-fail/ \\\n                   --mode run-fail \\\n                   $$(CTEST_RUNTOOL) \\\n \n-RPASS_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+RPASS_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                   --src-base $$(S)src/test/run-pass/ \\\n                   --build-base test/run-pass/ \\\n                   --mode run-pass \\\n                   $$(CTEST_RUNTOOL) \\\n \n-BENCH_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+BENCH_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                   --src-base $$(S)src/test/bench/ \\\n                   --build-base test/bench/ \\\n                   --mode run-pass \\\n                   $$(CTEST_RUNTOOL) \\\n \n-PERF_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+PERF_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                   --src-base $$(S)src/test/bench/ \\\n                   --build-base test/perf/ \\\n                   --mode run-pass \\\n                   $$(CTEST_PERF_RUNTOOL) \\\n \n-PRETTY_RPASS_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+PRETTY_RPASS_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                          --src-base $$(S)src/test/run-pass/ \\\n                          --build-base test/run-pass/ \\\n                          --mode pretty \\\n \n-PRETTY_RFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+PRETTY_RFAIL_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                          --src-base $$(S)src/test/run-fail/ \\\n                          --build-base test/run-fail/ \\\n                          --mode pretty \\\n \n-PRETTY_BENCH_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+PRETTY_BENCH_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                          --src-base $$(S)src/test/bench/ \\\n                          --build-base test/bench/ \\\n                          --mode pretty \\\n \n-PRETTY_PRETTY_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+PRETTY_PRETTY_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n                           --src-base $$(S)src/test/pretty/ \\\n                           --build-base test/pretty/ \\\n                           --mode pretty \\\n \n-test/compile-fail.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-cfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                    $$(CFAIL_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(CFAIL_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(CFAIL_ARGS$(1))\n \n-test/run-fail.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                $$(RFAIL_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(RFAIL_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RFAIL_ARGS$(1))\n \n-test/run-pass.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                $$(RPASS_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(RPASS_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RPASS_ARGS$(1))\n \n-test/bench.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                             $$(BENCH_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(BENCH_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(BENCH_ARGS$(1))\n \n-test/perf.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-perf-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                             $$(BENCH_TESTS)\n \t@$$(call E, perf: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PERF_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PERF_ARGS$(1))\n \n-test/pretty-rpass.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-pretty-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                      $$(RPASS_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PRETTY_RPASS_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RPASS_ARGS$(1))\n \n-test/pretty-rfail.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-pretty-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                      $$(RFAIL_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PRETTY_RFAIL_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RFAIL_ARGS$(1))\n \n-test/pretty-bench.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-pretty-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                      $$(BENCH_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PRETTY_BENCH_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_BENCH_ARGS$(1))\n \n-test/pretty-pretty.stage$(2).out.tmp: $$(HOST_BIN$(2))/compiletest$$(X) \\\n+check-stage$(1)-pretty-pretty-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                                      $$(PRETTY_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PRETTY_PRETTY_ARGS$(2))\n-\t$$(Q)touch $$@\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_PRETTY_ARGS$(1))\n \n endef\n \n # Instantiate the template for stage 0, 1, 2, 3\n \n-$(eval $(call TEST_STAGEN,0,0))\n-$(eval $(call TEST_STAGEN,0,1))\n-$(eval $(call TEST_STAGEN,1,2))\n-$(eval $(call TEST_STAGEN,2,3))\n+$(eval $(call TEST_STAGEN,0))\n+$(eval $(call TEST_STAGEN,1))\n+$(eval $(call TEST_STAGEN,2))\n+$(eval $(call TEST_STAGEN,3))\n \n \n ######################################################################"}]}