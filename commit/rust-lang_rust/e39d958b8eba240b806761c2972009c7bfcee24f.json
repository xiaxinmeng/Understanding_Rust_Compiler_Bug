{"sha": "e39d958b8eba240b806761c2972009c7bfcee24f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOWQ5NThiOGViYTI0MGI4MDY3NjFjMjk3MjAwOWM3YmZjZWUyNGY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-10T05:04:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-10T05:04:11Z"}, "message": "words", "tree": {"sha": "1387a49d51231717a79eb447749b7158cc8e3c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1387a49d51231717a79eb447749b7158cc8e3c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e39d958b8eba240b806761c2972009c7bfcee24f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e39d958b8eba240b806761c2972009c7bfcee24f", "html_url": "https://github.com/rust-lang/rust/commit/e39d958b8eba240b806761c2972009c7bfcee24f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e39d958b8eba240b806761c2972009c7bfcee24f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c835b0cca83fe21090562603e4bda77c183ace3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c835b0cca83fe21090562603e4bda77c183ace3", "html_url": "https://github.com/rust-lang/rust/commit/0c835b0cca83fe21090562603e4bda77c183ace3"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a5490696ba0b4355ba18f2b4cc6c7b0d98c58ad1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e39d958b8eba240b806761c2972009c7bfcee24f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d958b8eba240b806761c2972009c7bfcee24f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e39d958b8eba240b806761c2972009c7bfcee24f", "patch": "@@ -1161,7 +1161,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n         match ty_opt {\n             None => {\n-                // infer the variable's type\n+                // Infer the variable's type.\n                 let var_ty = self.fcx.next_ty_var(TypeVariableOrigin {\n                     kind: TypeVariableOriginKind::TypeInference,\n                     span,\n@@ -1173,7 +1173,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n                 var_ty\n             }\n             Some(typ) => {\n-                // take type that the user specified\n+                // Take type that the user specified.\n                 self.fcx.locals.borrow_mut().insert(nid, typ);\n                 typ.revealed_ty\n             }\n@@ -1244,7 +1244,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         intravisit::walk_pat(self, p);\n     }\n \n-    // Don't descend into the bodies of nested closures\n+    // Don't descend into the bodies of nested closures.\n     fn visit_fn(\n         &mut self,\n         _: intravisit::FnKind<'tcx>,\n@@ -1292,7 +1292,7 @@ fn check_fn<'a, 'tcx>(\n \n     debug!(\"check_fn(sig={:?}, fn_id={}, param_env={:?})\", fn_sig, fn_id, param_env);\n \n-    // Create the function context.  This is either derived from scratch or,\n+    // Create the function context. This is either derived from scratch or,\n     // in the case of closures, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n     *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);"}, {"sha": "146fc04bc27cbf9fba34ce1533f03bcc16f98e92", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e39d958b8eba240b806761c2972009c7bfcee24f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d958b8eba240b806761c2972009c7bfcee24f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=e39d958b8eba240b806761c2972009c7bfcee24f", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_def_id = self.tcx.hir().local_def_id(item_id);\n \n         // This attribute causes us to dump some writeback information\n-        // in the form of errors, which is uSymbolfor unit tests.\n+        // in the form of errors, which is uSymbol for unit tests.\n         let rustc_dump_user_substs = self.tcx.has_attr(item_def_id, sym::rustc_dump_user_substs);\n \n         let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);"}]}