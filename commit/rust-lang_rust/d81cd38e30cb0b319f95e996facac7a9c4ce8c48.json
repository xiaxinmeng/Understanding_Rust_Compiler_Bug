{"sha": "d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MWNkMzhlMzBjYjBiMzE5Zjk1ZTk5NmZhY2FjN2E5YzRjZThjNDg=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-12-03T12:57:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-12-21T18:21:39Z"}, "message": "Combine GlobalArenas and DroplessArena into AllArenas", "tree": {"sha": "d4219eaad38747a423730118f9eabc8a01d782f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4219eaad38747a423730118f9eabc8a01d782f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "html_url": "https://github.com/rust-lang/rust/commit/d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "html_url": "https://github.com/rust-lang/rust/commit/eff3de0927c36e6483ccb8a35c3d2da6e063de0b"}], "stats": {"total": 76, "additions": 30, "deletions": 46}, "files": [{"sha": "b233156cf7fc683b52ee67579085786661fda1c6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -76,6 +76,20 @@ use syntax_pos::Span;\n \n use hir;\n \n+pub struct AllArenas<'tcx> {\n+    pub global: GlobalArenas<'tcx>,\n+    pub interner: DroplessArena,\n+}\n+\n+impl<'tcx> AllArenas<'tcx> {\n+    pub fn new() -> Self {\n+        AllArenas {\n+            global: GlobalArenas::new(),\n+            interner: DroplessArena::new(),\n+        }\n+    }\n+}\n+\n /// Internal storage\n pub struct GlobalArenas<'tcx> {\n     // internings\n@@ -1120,8 +1134,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   cstore: &'tcx CrateStore,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n-                                  arenas: &'tcx GlobalArenas<'tcx>,\n-                                  arena: &'tcx DroplessArena,\n+                                  arenas: &'tcx AllArenas<'tcx>,\n                                   resolutions: ty::Resolutions,\n                                   hir: hir_map::Map<'tcx>,\n                                   on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n@@ -1132,7 +1145,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n     {\n         let data_layout = TargetDataLayout::parse(s);\n-        let interners = CtxtInterners::new(arena);\n+        let interners = CtxtInterners::new(&arenas.interner);\n         let common_types = CommonTypes::new(&interners);\n         let dep_graph = hir.dep_graph.clone();\n         let max_cnum = cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n@@ -1184,7 +1197,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             cstore,\n-            global_arenas: arenas,\n+            global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n             on_disk_query_result_cache,"}, {"sha": "e03e1237466e699fd03e892b16b45d0c3c3ff467", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -77,7 +77,7 @@ pub use self::sty::TypeVariants::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{TyCtxt, GlobalArenas, tls, keep_local};\n+pub use self::context::{TyCtxt, GlobalArenas, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables};\n \n pub use self::instance::{Instance, InstanceDef};"}, {"sha": "8773ac4a24eb7bf5e299d62a09dc20231e29a727", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -22,7 +22,7 @@ use rustc::lint;\n use rustc::middle::{self, stability, reachable, resolve_lifetime};\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n+use rustc::ty::{self, TyCtxt, Resolutions, AllArenas};\n use rustc::traits;\n use rustc::util::common::{ErrorReported, time};\n use rustc_allocator as allocator;\n@@ -62,7 +62,6 @@ use syntax::util::node_count::NodeCounter;\n use syntax_pos::FileName;\n use syntax;\n use syntax_ext;\n-use arena::DroplessArena;\n \n use derive_registrar;\n use pretty::ReplaceBodyWithLoop;\n@@ -169,8 +168,7 @@ pub fn compile_input(sess: &Session,\n             return Ok(())\n         }\n \n-        let arena = DroplessArena::new();\n-        let arenas = GlobalArenas::new();\n+        let arenas = AllArenas::new();\n \n         // Construct the HIR map\n         let hir_map = time(sess.time_passes(),\n@@ -185,7 +183,6 @@ pub fn compile_input(sess: &Session,\n                                                                   sess,\n                                                                   outdir,\n                                                                   output,\n-                                                                  &arena,\n                                                                   &arenas,\n                                                                   &cstore,\n                                                                   &hir_map,\n@@ -215,7 +212,6 @@ pub fn compile_input(sess: &Session,\n                                     hir_map,\n                                     analysis,\n                                     resolutions,\n-                                    &arena,\n                                     &arenas,\n                                     &crate_name,\n                                     &outputs,\n@@ -401,8 +397,7 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub output_filenames: Option<&'a OutputFilenames>,\n     pub out_dir: Option<&'a Path>,\n     pub out_file: Option<&'a Path>,\n-    pub arena: Option<&'tcx DroplessArena>,\n-    pub arenas: Option<&'tcx GlobalArenas<'tcx>>,\n+    pub arenas: Option<&'tcx AllArenas<'tcx>>,\n     pub expanded_crate: Option<&'a ast::Crate>,\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub hir_map: Option<&'a hir_map::Map<'tcx>>,\n@@ -422,7 +417,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             session,\n             out_dir: out_dir.as_ref().map(|s| &**s),\n             out_file: None,\n-            arena: None,\n             arenas: None,\n             krate: None,\n             registry: None,\n@@ -477,8 +471,7 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                                 session: &'tcx Session,\n                                 out_dir: &'a Option<PathBuf>,\n                                 out_file: &'a Option<PathBuf>,\n-                                arena: &'tcx DroplessArena,\n-                                arenas: &'tcx GlobalArenas<'tcx>,\n+                                arenas: &'tcx AllArenas<'tcx>,\n                                 cstore: &'tcx CStore,\n                                 hir_map: &'a hir_map::Map<'tcx>,\n                                 analysis: &'a ty::CrateAnalysis,\n@@ -490,7 +483,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                                 -> Self {\n         CompileState {\n             crate_name: Some(crate_name),\n-            arena: Some(arena),\n             arenas: Some(arenas),\n             cstore: Some(cstore),\n             hir_map: Some(hir_map),\n@@ -959,8 +951,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(control: &CompileController,\n                                                hir_map: hir_map::Map<'tcx>,\n                                                mut analysis: ty::CrateAnalysis,\n                                                resolutions: Resolutions,\n-                                               arena: &'tcx DroplessArena,\n-                                               arenas: &'tcx GlobalArenas<'tcx>,\n+                                               arenas: &'tcx AllArenas<'tcx>,\n                                                name: &str,\n                                                output_filenames: &OutputFilenames,\n                                                f: F)\n@@ -1020,7 +1011,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(control: &CompileController,\n                              local_providers,\n                              extern_providers,\n                              arenas,\n-                             arena,\n                              resolutions,\n                              hir_map,\n                              query_result_on_disk_cache,"}, {"sha": "eac7483224ee7f5500f96501191dff02523abd22", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -579,7 +579,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                                      &state.expanded_crate.take().unwrap(),\n                                                      state.crate_name.unwrap(),\n                                                      ppm,\n-                                                     state.arena.unwrap(),\n                                                      state.arenas.unwrap(),\n                                                      state.output_filenames.unwrap(),\n                                                      opt_uii.clone(),"}, {"sha": "86ac021bf8edde36e3823007d83b1c5bc580604b", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -17,7 +17,7 @@ use self::NodesMatchingUII::*;\n \n use {abort_on_err, driver};\n \n-use rustc::ty::{self, TyCtxt, GlobalArenas, Resolutions};\n+use rustc::ty::{self, TyCtxt, Resolutions, AllArenas};\n use rustc::cfg;\n use rustc::cfg::graphviz::LabelledCFG;\n use rustc::middle::cstore::CrateStore;\n@@ -51,8 +51,6 @@ use rustc::hir::map::blocks;\n use rustc::hir;\n use rustc::hir::print as pprust_hir;\n \n-use arena::DroplessArena;\n-\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n     PpmNormal,\n@@ -205,8 +203,7 @@ impl PpSourceMode {\n                                                hir_map: &hir_map::Map<'tcx>,\n                                                analysis: &ty::CrateAnalysis,\n                                                resolutions: &Resolutions,\n-                                               arena: &'tcx DroplessArena,\n-                                               arenas: &'tcx GlobalArenas<'tcx>,\n+                                               arenas: &'tcx AllArenas<'tcx>,\n                                                output_filenames: &OutputFilenames,\n                                                id: &str,\n                                                f: F)\n@@ -237,7 +234,6 @@ impl PpSourceMode {\n                                                                  hir_map.clone(),\n                                                                  analysis.clone(),\n                                                                  resolutions.clone(),\n-                                                                 arena,\n                                                                  arenas,\n                                                                  id,\n                                                                  output_filenames,\n@@ -912,8 +908,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                 krate: &ast::Crate,\n                                                 crate_name: &str,\n                                                 ppm: PpMode,\n-                                                arena: &'tcx DroplessArena,\n-                                                arenas: &'tcx GlobalArenas<'tcx>,\n+                                                arenas: &'tcx AllArenas<'tcx>,\n                                                 output_filenames: &OutputFilenames,\n                                                 opt_uii: Option<UserIdentifiedItem>,\n                                                 ofile: Option<&Path>) {\n@@ -924,7 +919,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                             analysis,\n                             resolutions,\n                             crate_name,\n-                            arena,\n                             arenas,\n                             output_filenames,\n                             ppm,\n@@ -963,7 +957,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -988,7 +981,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -1005,7 +997,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -1040,7 +1031,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -1071,8 +1061,7 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,\n                                        crate_name: &str,\n-                                       arena: &'tcx DroplessArena,\n-                                       arenas: &'tcx GlobalArenas<'tcx>,\n+                                       arenas: &'tcx AllArenas<'tcx>,\n                                        output_filenames: &OutputFilenames,\n                                        ppm: PpMode,\n                                        uii: Option<UserIdentifiedItem>,\n@@ -1094,7 +1083,6 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                      hir_map.clone(),\n                                                      analysis.clone(),\n                                                      resolutions.clone(),\n-                                                     arena,\n                                                      arenas,\n                                                      crate_name,\n                                                      output_filenames,"}, {"sha": "6765ea5e67a6055d61d0040dcb2fc3dab44ad278", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -40,7 +40,6 @@ use errors::{Level, DiagnosticBuilder};\n use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;\n-use arena::DroplessArena;\n \n use rustc::hir;\n \n@@ -131,8 +130,7 @@ fn test_env<F>(source_string: &str,\n             .expect(\"phase 2 aborted\")\n     };\n \n-    let arena = DroplessArena::new();\n-    let arenas = ty::GlobalArenas::new();\n+    let arenas = ty::AllArenas::new();\n     let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n \n     // run just enough stuff to build a tcx:\n@@ -149,7 +147,6 @@ fn test_env<F>(source_string: &str,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),\n                              &arenas,\n-                             &arena,\n                              resolutions,\n                              hir_map,\n                              OnDiskCache::new_empty(sess.codemap()),"}, {"sha": "b353c0da865c86cfa5fbf66b78add79382845fa8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81cd38e30cb0b319f95e996facac7a9c4ce8c48/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d81cd38e30cb0b319f95e996facac7a9c4ce8c48", "patch": "@@ -14,7 +14,7 @@ use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::ty::{self, TyCtxt, GlobalArenas};\n+use rustc::ty::{self, TyCtxt, AllArenas};\n use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc::util::nodemap::FxHashMap;\n@@ -37,7 +37,6 @@ use visit_ast::RustdocVisitor;\n use clean;\n use clean::Clean;\n use html::render::RenderInfo;\n-use arena::DroplessArena;\n \n pub use rustc::session::config::Input;\n pub use rustc::session::search_paths::SearchPaths;\n@@ -170,8 +169,7 @@ pub fn run_core(search_paths: SearchPaths,\n         abort_on_err(result, &sess)\n     };\n \n-    let arena = DroplessArena::new();\n-    let arenas = GlobalArenas::new();\n+    let arenas = AllArenas::new();\n     let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n     let output_filenames = driver::build_output_filenames(&input,\n                                                           &None,\n@@ -185,7 +183,6 @@ pub fn run_core(search_paths: SearchPaths,\n                                                      hir_map,\n                                                      analysis,\n                                                      resolutions,\n-                                                     &arena,\n                                                      &arenas,\n                                                      &name,\n                                                      &output_filenames,"}]}