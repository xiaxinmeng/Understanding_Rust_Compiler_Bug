{"sha": "fb7cc3c164f457e8724bb483b19e40aecb31329b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiN2NjM2MxNjRmNDU3ZTg3MjRiYjQ4M2IxOWU0MGFlY2IzMTMyOWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T15:09:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T15:09:36Z"}, "message": "Fix single field by val tuples", "tree": {"sha": "3537ba80aee16718b028e060bab6ef730de12b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3537ba80aee16718b028e060bab6ef730de12b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb7cc3c164f457e8724bb483b19e40aecb31329b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7cc3c164f457e8724bb483b19e40aecb31329b", "html_url": "https://github.com/rust-lang/rust/commit/fb7cc3c164f457e8724bb483b19e40aecb31329b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb7cc3c164f457e8724bb483b19e40aecb31329b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "197226aa2a5eac9a580c15fd35f1bb98723c3249", "url": "https://api.github.com/repos/rust-lang/rust/commits/197226aa2a5eac9a580c15fd35f1bb98723c3249", "html_url": "https://github.com/rust-lang/rust/commit/197226aa2a5eac9a580c15fd35f1bb98723c3249"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "1712a0cc12626329f64c9c0775c966e7db16b144", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb7cc3c164f457e8724bb483b19e40aecb31329b/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7cc3c164f457e8724bb483b19e40aecb31329b/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=fb7cc3c164f457e8724bb483b19e40aecb31329b", "patch": "@@ -224,6 +224,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 )?;\n \n                 let mut arg_locals = self.frame().mir.args_iter();\n+                trace!(\"ABI: {:?}\", sig.abi);\n+                trace!(\"arg_locals: {:?}\", self.frame().mir.args_iter().collect::<Vec<_>>());\n+                trace!(\"arg_operands: {:?}\", arg_operands);\n                 match sig.abi {\n                     Abi::Rust => {\n                         for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n@@ -245,16 +248,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let (arg_val, arg_ty) = args.remove(0);\n                         let layout = self.type_layout(arg_ty)?;\n                         if let (&ty::TyTuple(fields, _), &Layout::Univariant { ref variant, .. }) = (&arg_ty.sty, layout) {\n+                            trace!(\"fields: {:?}\", fields);\n                             if self.frame().mir.args_iter().count() == fields.len() + 1 {\n                                 let offsets = variant.offsets.iter().map(|s| s.bytes());\n-                                if let Value::ByRef(ptr) = arg_val {\n-                                    for ((offset, ty), arg_local) in offsets.zip(fields).zip(arg_locals) {\n-                                        let arg = Value::ByRef(ptr.offset(offset));\n-                                        let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n-                                        self.write_value(arg, dest, ty)?;\n+                                match arg_val {\n+                                    Value::ByRef(ptr) => {\n+                                        for ((offset, ty), arg_local) in offsets.zip(fields).zip(arg_locals) {\n+                                            let arg = Value::ByRef(ptr.offset(offset));\n+                                            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                                            trace!(\"writing arg {:?} to {:?} (type: {})\", arg, dest, ty);\n+                                            self.write_value(arg, dest, ty)?;\n+                                        }\n+                                    },\n+                                    Value::ByVal(PrimVal::Undef) => {},\n+                                    other => {\n+                                        assert_eq!(fields.len(), 1);\n+                                        let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_locals.next().unwrap()))?;\n+                                        self.write_value(other, dest, fields[0])?;\n                                     }\n                                 }\n                             } else {\n+                                trace!(\"manual impl of rust-call ABI\");\n                                 // called a manual impl of a rust-call function\n                                 let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_locals.next().unwrap()))?;\n                                 self.write_value(arg_val, dest, arg_ty)?;"}]}