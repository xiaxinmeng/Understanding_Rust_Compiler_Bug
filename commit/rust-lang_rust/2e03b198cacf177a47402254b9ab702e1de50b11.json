{"sha": "2e03b198cacf177a47402254b9ab702e1de50b11", "node_id": "C_kwDOAAsO6NoAKDJlMDNiMTk4Y2FjZjE3N2E0NzQwMjI1NGI5YWI3MDJlMWRlNTBiMTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-13T15:41:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-13T15:41:09Z"}, "message": "fix: Fix perf regression from symbol index refactor", "tree": {"sha": "7f654136d34050cf224d4691c9a2212cf0e8b417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f654136d34050cf224d4691c9a2212cf0e8b417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e03b198cacf177a47402254b9ab702e1de50b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e03b198cacf177a47402254b9ab702e1de50b11", "html_url": "https://github.com/rust-lang/rust/commit/2e03b198cacf177a47402254b9ab702e1de50b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e03b198cacf177a47402254b9ab702e1de50b11/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "884dd8c966e29d48bd9f8e5f22440cd238aa7cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/884dd8c966e29d48bd9f8e5f22440cd238aa7cf1", "html_url": "https://github.com/rust-lang/rust/commit/884dd8c966e29d48bd9f8e5f22440cd238aa7cf1"}], "stats": {"total": 447, "additions": 434, "deletions": 13}, "files": [{"sha": "5d68aa52e62c743b05b8e7aa1cb709a63f513663", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 88, "deletions": 11, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2e03b198cacf177a47402254b9ab702e1de50b11/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e03b198cacf177a47402254b9ab702e1de50b11/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=2e03b198cacf177a47402254b9ab702e1de50b11", "patch": "@@ -1,12 +1,15 @@\n //! File symbol extraction.\n \n+use base_db::FileRange;\n use hir_def::{\n-    AdtId, AssocItemId, DefWithBodyId, HasModule, ImplId, MacroId, ModuleDefId, ModuleId, TraitId,\n+    src::HasSource, AdtId, AssocItemId, DefWithBodyId, HasModule, ImplId, Lookup, MacroId,\n+    ModuleDefId, ModuleId, TraitId,\n };\n+use hir_expand::{HirFileId, InFile};\n use hir_ty::db::HirDatabase;\n-use syntax::SmolStr;\n+use syntax::{ast::HasName, AstNode, SmolStr, SyntaxNode, SyntaxNodePtr};\n \n-use crate::{Module, ModuleDef};\n+use crate::{Module, ModuleDef, Semantics};\n \n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n@@ -15,6 +18,45 @@ pub struct FileSymbol {\n     // even though name can be derived from the def, we store it for efficiency\n     pub name: SmolStr,\n     pub def: ModuleDef,\n+    pub loc: DeclarationLocation,\n+    pub container_name: Option<SmolStr>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct DeclarationLocation {\n+    /// The file id for both the `ptr` and `name_ptr`.\n+    pub hir_file_id: HirFileId,\n+    /// This points to the whole syntax node of the declaration.\n+    pub ptr: SyntaxNodePtr,\n+    /// This points to the [`syntax::ast::Name`] identifier of the declaration.\n+    pub name_ptr: SyntaxNodePtr,\n+}\n+\n+impl DeclarationLocation {\n+    pub fn syntax<DB: HirDatabase>(&self, sema: &Semantics<'_, DB>) -> SyntaxNode {\n+        let root = sema.parse_or_expand(self.hir_file_id);\n+        self.ptr.to_node(&root)\n+    }\n+\n+    pub fn original_range(&self, db: &dyn HirDatabase) -> FileRange {\n+        let node = resolve_node(db, self.hir_file_id, &self.ptr);\n+        node.as_ref().original_file_range(db.upcast())\n+    }\n+\n+    pub fn original_name_range(&self, db: &dyn HirDatabase) -> Option<FileRange> {\n+        let node = resolve_node(db, self.hir_file_id, &self.name_ptr);\n+        node.as_ref().original_file_range_opt(db.upcast())\n+    }\n+}\n+\n+fn resolve_node(\n+    db: &dyn HirDatabase,\n+    file_id: HirFileId,\n+    ptr: &SyntaxNodePtr,\n+) -> InFile<SyntaxNode> {\n+    let root = db.parse_or_expand(file_id);\n+    let node = ptr.to_node(&root);\n+    InFile::new(file_id, node)\n }\n \n /// Represents an outstanding module that the symbol collector must collect symbols from.\n@@ -193,17 +235,52 @@ impl<'a> SymbolCollector<'a> {\n         }\n     }\n \n-    fn push_decl(&mut self, id: impl Into<ModuleDefId>) {\n-        let def = ModuleDef::from(id.into());\n-        if let Some(name) = def.name(self.db) {\n-            self.symbols.push(FileSymbol { name: name.to_smol_str(), def });\n-        }\n+    fn push_decl<L>(&mut self, id: L)\n+    where\n+        L: Lookup + Into<ModuleDefId>,\n+        <L as Lookup>::Data: HasSource,\n+        <<L as Lookup>::Data as HasSource>::Value: HasName,\n+    {\n+        self.push_file_symbol(|s| {\n+            let loc = id.lookup(s.db.upcast());\n+            let source = loc.source(s.db.upcast());\n+            let name_node = source.value.name()?;\n+            Some(FileSymbol {\n+                name: name_node.text().into(),\n+                def: ModuleDef::from(id.into()),\n+                container_name: s.current_container_name.clone(),\n+                loc: DeclarationLocation {\n+                    hir_file_id: source.file_id,\n+                    ptr: SyntaxNodePtr::new(source.value.syntax()),\n+                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+                },\n+            })\n+        })\n     }\n \n     fn push_module(&mut self, module_id: ModuleId) {\n-        let def = Module::from(module_id);\n-        if let Some(name) = def.name(self.db) {\n-            self.symbols.push(FileSymbol { name: name.to_smol_str(), def: ModuleDef::Module(def) });\n+        self.push_file_symbol(|s| {\n+            let def_map = module_id.def_map(s.db.upcast());\n+            let module_data = &def_map[module_id.local_id];\n+            let declaration = module_data.origin.declaration()?;\n+            let module = declaration.to_node(s.db.upcast());\n+            let name_node = module.name()?;\n+            Some(FileSymbol {\n+                name: name_node.text().into(),\n+                def: ModuleDef::Module(module_id.into()),\n+                container_name: s.current_container_name.clone(),\n+                loc: DeclarationLocation {\n+                    hir_file_id: declaration.file_id,\n+                    ptr: SyntaxNodePtr::new(module.syntax()),\n+                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+                },\n+            })\n+        })\n+    }\n+\n+    fn push_file_symbol(&mut self, f: impl FnOnce(&Self) -> Option<FileSymbol>) {\n+        if let Some(file_symbol) = f(self) {\n+            self.symbols.push(file_symbol);\n         }\n     }\n }"}, {"sha": "1e34dd633c84c40df190b5e4b4eaa0e8279b127b", "filename": "crates/ide-db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/rust-lang/rust/blob/2e03b198cacf177a47402254b9ab702e1de50b11/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2e03b198cacf177a47402254b9ab702e1de50b11/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=2e03b198cacf177a47402254b9ab702e1de50b11", "patch": "@@ -17,6 +17,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: TYPE_ALIAS,\n+                        range: 397..417,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 402..407,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"CONST\",\n@@ -27,6 +41,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: CONST,\n+                        range: 340..361,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 346..351,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"CONST_WITH_INNER\",\n@@ -37,6 +65,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: CONST,\n+                        range: 520..592,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 526..542,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"Enum\",\n@@ -49,6 +91,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: ENUM,\n+                        range: 185..207,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 190..194,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"Macro\",\n@@ -61,6 +117,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: MACRO_DEF,\n+                        range: 153..168,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 159..164,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"STATIC\",\n@@ -71,6 +141,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STATIC,\n+                        range: 362..396,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 369..375,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"Struct\",\n@@ -83,6 +167,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 170..184,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 177..183,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"StructFromMacro\",\n@@ -95,6 +193,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        2147483648,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..22,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 6..21,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"StructInFn\",\n@@ -107,6 +219,22 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 318..336,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 325..335,\n+                    },\n+                },\n+                container_name: Some(\n+                    \"main\",\n+                ),\n             },\n             FileSymbol {\n                 name: \"StructInNamedConst\",\n@@ -119,6 +247,22 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 555..581,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 562..580,\n+                    },\n+                },\n+                container_name: Some(\n+                    \"CONST_WITH_INNER\",\n+                ),\n             },\n             FileSymbol {\n                 name: \"StructInUnnamedConst\",\n@@ -131,6 +275,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 479..507,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 486..506,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"Trait\",\n@@ -141,6 +299,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: TRAIT,\n+                        range: 261..300,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 267..272,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"Union\",\n@@ -153,6 +325,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: UNION,\n+                        range: 208..222,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 214..219,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"a_mod\",\n@@ -165,6 +351,20 @@\n                         },\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: MODULE,\n+                        range: 419..457,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 423..428,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"b_mod\",\n@@ -177,6 +377,20 @@\n                         },\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: MODULE,\n+                        range: 594..604,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 598..603,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"define_struct\",\n@@ -189,6 +403,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: MACRO_RULES,\n+                        range: 51..131,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 64..77,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"impl_fn\",\n@@ -199,6 +427,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: FN,\n+                        range: 242..257,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 245..252,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"macro_rules_macro\",\n@@ -211,6 +453,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: MACRO_RULES,\n+                        range: 1..48,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 14..31,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"main\",\n@@ -221,6 +477,20 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: FN,\n+                        range: 302..338,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 305..309,\n+                    },\n+                },\n+                container_name: None,\n             },\n             FileSymbol {\n                 name: \"trait_fn\",\n@@ -231,6 +501,22 @@\n                         ),\n                     },\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: FN,\n+                        range: 279..298,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 282..290,\n+                    },\n+                },\n+                container_name: Some(\n+                    \"Trait\",\n+                ),\n             },\n         ],\n     ),\n@@ -254,6 +540,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 435..455,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 442..454,\n+                    },\n+                },\n+                container_name: None,\n             },\n         ],\n     ),\n@@ -277,6 +577,20 @@\n                         },\n                     ),\n                 ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        1,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..20,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 7..19,\n+                    },\n+                },\n+                container_name: None,\n             },\n         ],\n     ),"}, {"sha": "d8ce79de3755eed55e93df08e6e0c9195602189c", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2e03b198cacf177a47402254b9ab702e1de50b11/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e03b198cacf177a47402254b9ab702e1de50b11/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=2e03b198cacf177a47402254b9ab702e1de50b11", "patch": "@@ -4,8 +4,8 @@ use std::fmt;\n \n use either::Either;\n use hir::{\n-    AssocItem, Documentation, FieldSource, HasAttrs, HasContainer, HasSource, HirDisplay, InFile,\n-    LocalSource, ModuleSource,\n+    symbols::FileSymbol, AssocItem, Documentation, FieldSource, HasAttrs, HasContainer, HasSource,\n+    HirDisplay, InFile, LocalSource, ModuleSource,\n };\n use ide_db::{\n     base_db::{FileId, FileRange},\n@@ -158,6 +158,36 @@ impl NavigationTarget {\n     }\n }\n \n+impl TryToNav for FileSymbol {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let full_range = self.loc.original_range(db);\n+        let name_range = self.loc.original_name_range(db)?;\n+\n+        Some(NavigationTarget {\n+            file_id: full_range.file_id,\n+            name: self.name.clone(),\n+            kind: Some(hir::ModuleDefId::from(self.def).into()),\n+            full_range: full_range.range,\n+            focus_range: Some(name_range.range),\n+            container_name: self.container_name.clone(),\n+            description: match self.def {\n+                hir::ModuleDef::Module(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Function(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Adt(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Variant(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Const(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Static(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Trait(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::TraitAlias(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::TypeAlias(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::Macro(it) => Some(it.display(db).to_string()),\n+                hir::ModuleDef::BuiltinType(_) => None,\n+            },\n+            docs: None,\n+        })\n+    }\n+}\n+\n impl TryToNav for Definition {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         match self {"}]}