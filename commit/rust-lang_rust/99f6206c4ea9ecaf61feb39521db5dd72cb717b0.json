{"sha": "99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZjYyMDZjNGVhOWVjYWY2MWZlYjM5NTIxZGI1ZGQ3MmNiNzE3YjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T21:08:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T21:08:03Z"}, "message": "Auto merge of #21894 - dotdash:assume_rc, r=alexcrichton\n\nThis is half of what @Aatch implemented in #21418. The non-null assumption is later canonicalized to !nonnull metadata and doesn't cause any slowdowns (in fact the build is slightly faster with this change). I left out the other half of #21418 because that still causes a ~16% increase in compile times (30m -> 35m).", "tree": {"sha": "a05ff78f8a1a64c4c8f11d61157fd7ec7f5ed438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05ff78f8a1a64c4c8f11d61157fd7ec7f5ed438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "html_url": "https://github.com/rust-lang/rust/commit/99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f6206c4ea9ecaf61feb39521db5dd72cb717b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189930fcae287565dcef856ae8d60a83190a4b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/189930fcae287565dcef856ae8d60a83190a4b92", "html_url": "https://github.com/rust-lang/rust/commit/189930fcae287565dcef856ae8d60a83190a4b92"}, {"sha": "40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "html_url": "https://github.com/rust-lang/rust/commit/40b6e34240c6669fdf7fb1b83c3925b0becafd0e"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "80ffa4a0a191013c4024afedc04056318da64de0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/99f6206c4ea9ecaf61feb39521db5dd72cb717b0/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f6206c4ea9ecaf61feb39521db5dd72cb717b0/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=99f6206c4ea9ecaf61feb39521db5dd72cb717b0", "patch": "@@ -160,6 +160,7 @@ use core::option::Option::{Some, None};\n use core::ptr::{self, PtrExt};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n+use core::intrinsics::assume;\n \n use heap::deallocate;\n \n@@ -769,12 +770,34 @@ trait RcBoxPtr<T> {\n \n impl<T> RcBoxPtr<T> for Rc<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(**self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        unsafe {\n+            // Safe to assume this here, as if it weren't true, we'd be breaking\n+            // the contract anyway.\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n+            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n+                assume(!self._ptr.is_null());\n+            }\n+            &(**self._ptr)\n+        }\n+    }\n }\n \n impl<T> RcBoxPtr<T> for Weak<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(**self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        unsafe {\n+            // Safe to assume this here, as if it weren't true, we'd be breaking\n+            // the contract anyway.\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n+            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n+                assume(!self._ptr.is_null());\n+            }\n+            &(**self._ptr)\n+        }\n+    }\n }\n \n #[cfg(test)]"}]}