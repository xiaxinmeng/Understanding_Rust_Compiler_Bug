{"sha": "31d65453d47f243635ea17563db6b2c1127e9836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDY1NDUzZDQ3ZjI0MzYzNWVhMTc1NjNkYjZiMmMxMTI3ZTk4MzY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T19:46:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T19:46:10Z"}, "message": "OptLevel changes. Accepts levels 0 to 3 only. '-O' is synonym for --OptLevel=2.", "tree": {"sha": "d63a3d6512237883b35b908c756177fb241f3e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63a3d6512237883b35b908c756177fb241f3e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d65453d47f243635ea17563db6b2c1127e9836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d65453d47f243635ea17563db6b2c1127e9836", "html_url": "https://github.com/rust-lang/rust/commit/31d65453d47f243635ea17563db6b2c1127e9836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d65453d47f243635ea17563db6b2c1127e9836/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a74ffaea336177ab65b92d578a187d1388857e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a74ffaea336177ab65b92d578a187d1388857e3", "html_url": "https://github.com/rust-lang/rust/commit/0a74ffaea336177ab65b92d578a187d1388857e3"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "d0e6b5a7c6f7cd454bc97dcb3ddc6822a3c2c7f0", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31d65453d47f243635ea17563db6b2c1127e9836/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d65453d47f243635ea17563db6b2c1127e9836/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=31d65453d47f243635ea17563db6b2c1127e9836", "patch": "@@ -101,7 +101,7 @@ mod write {\n         if (opts.save_temps) {\n             alt (opts.output_type) {\n                 case (output_type_bitcode) {\n-                    if (opts.optimize) {\n+                    if (opts.optimize != 0u) {\n                         auto filename = mk_intermediate_name(output,\n                                                              \"no-opt.bc\");\n                         llvm::LLVMWriteBitcodeToFile(llmod,\n@@ -121,22 +121,26 @@ mod write {\n         // -Os, etc\n         // FIXME3: Should we expose and use the pass lists used by the opt\n         // tool?\n-        if (opts.optimize) {\n+        if (opts.optimize != 0u) {\n             auto fpm = mk_pass_manager();\n             llvm::LLVMAddTargetData(td.lltd, fpm.llpm);\n             llvm::LLVMAddStandardFunctionPasses(fpm.llpm, 2u);\n             llvm::LLVMRunPassManager(fpm.llpm, llmod);\n \n-            // TODO: On -O3, use 275 instead of 225 for the inlining\n-            // threshold.\n+            let uint threshold = 225u;\n+            if (opts.optimize == 3u) {\n+                threshold = 275u;\n+            }\n+\n             llvm::LLVMAddStandardModulePasses(pm.llpm,\n-                                             2u,    // optimization level\n-                                             False, // optimize for size\n-                                             True,  // unit-at-a-time\n-                                             True,  // unroll loops\n-                                             True,  // simplify lib calls\n-                                             True,  // have exceptions\n-                                             225u); // inlining threshold\n+                                              // optimization level\n+                                              opts.optimize,\n+                                              False, // optimize for size\n+                                              True,  // unit-at-a-time\n+                                              True,  // unroll loops\n+                                              True,  // simplify lib calls\n+                                              True,  // have exceptions\n+                                              threshold); // inline threshold\n         }\n \n         if (opts.verify) {"}, {"sha": "0ce20eb2f159ffa0091169e79af67a19f400481e", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/31d65453d47f243635ea17563db6b2c1127e9836/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d65453d47f243635ea17563db6b2c1127e9836/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=31d65453d47f243635ea17563db6b2c1127e9836", "patch": "@@ -165,7 +165,8 @@ options:\n     --depend           print dependencies, in makefile-rule form\n     --parse-only       parse only; do not compile, assemble, or link\n     -g                 produce debug info\n-    -O                 optimize\n+    --OptLevel=        optimize with possible levels 0-3\n+    -O                 equivalent to --OptLevel=2\n     -S                 compile only; do not assemble or link\n     -c                 compile and assemble, but do not link\n     --emit-llvm        produce an LLVM bitcode file\n@@ -228,8 +229,9 @@ fn main(vec[str] args) {\n                     optflag(\"glue\"), optflag(\"emit-llvm\"),\n                     optflag(\"pretty\"), optflag(\"typed-pretty\"),\n                     optflag(\"ls\"), optflag(\"parse-only\"),\n-                    optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n-                    optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n+                    optflag(\"O\"), optopt(\"OptLevel\"),\n+                    optflag(\"shared\"), optmulti(\"L\"),\n+                    optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optopt(\"g\"),\n                     optflag(\"save-temps\"), optopt(\"sysroot\"),\n                     optflag(\"stats\"),\n                     optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n@@ -276,15 +278,46 @@ fn main(vec[str] args) {\n \n     auto verify = !opt_present(match, \"noverify\");\n     auto save_temps = opt_present(match, \"save-temps\");\n-    // FIXME: Maybe we should support -O0, -O1, -Os, etc\n-    auto optimize = opt_present(match, \"O\");\n     auto debuginfo = opt_present(match, \"g\");\n     auto stats = opt_present(match, \"stats\");\n     auto time_passes = opt_present(match, \"time-passes\");\n     auto time_llvm_passes = opt_present(match, \"time-llvm-passes\");\n     auto run_typestate = !opt_present(match, \"no-typestate\");\n     auto sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n \n+    let uint optLevel = 0u;\n+    if (opt_present(match, \"O\")) {\n+        optLevel = 2u;\n+        if (opt_present(match, \"OptLevel\")) {\n+            log\n+                (\"error: -O and --OptLevel both provided\");\n+            fail;\n+        }\n+    }\n+\n+    if (opt_present(match, \"OptLevel\")) {\n+        auto opt = getopts::opt_maybe_str(match, \"OptLevel\");\n+        alt (opt) {\n+            case (some[str](?s)) {\n+                alt (s) {\n+                    case (\"0\") { optLevel = 0u; }\n+                    case (\"1\") { optLevel = 1u; }\n+                    case (\"2\") { optLevel = 2u; }\n+                    case (\"3\") { optLevel = 3u; }\n+                    case (_) {\n+                        log\n+                        (\"error: optimization level needs to be between 0-3\");\n+                        fail;\n+                    }\n+                }\n+            }\n+            case (none[str]) {\n+                log(\"error: expected optimization level after --OptLevel=\");\n+                fail;\n+            }\n+        }\n+    }\n+\n     auto sysroot;\n     alt (sysroot_opt) {\n         case (none[str]) { sysroot = get_default_sysroot(binary); }\n@@ -293,7 +326,7 @@ fn main(vec[str] args) {\n \n     let @session::options sopts =\n         @rec(shared = shared,\n-             optimize = optimize,\n+             optimize = optLevel,\n              debuginfo = debuginfo,\n              verify = verify,\n              run_typestate = run_typestate,"}, {"sha": "d943c151c6d600cd2778b6f73037fbb710c276a4", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d65453d47f243635ea17563db6b2c1127e9836/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d65453d47f243635ea17563db6b2c1127e9836/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=31d65453d47f243635ea17563db6b2c1127e9836", "patch": "@@ -26,7 +26,7 @@ type config = rec(os os,\n                   ty_mach float_type);\n \n type options = rec(bool shared,\n-                   bool optimize,\n+                   uint optimize,\n                    bool debuginfo,\n                    bool verify,\n                    bool run_typestate,"}]}