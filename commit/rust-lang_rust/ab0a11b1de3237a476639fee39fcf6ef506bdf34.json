{"sha": "ab0a11b1de3237a476639fee39fcf6ef506bdf34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMGExMWIxZGUzMjM3YTQ3NjYzOWZlZTM5ZmNmNmVmNTA2YmRmMzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T17:35:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T17:35:03Z"}, "message": "Simplify array parsing", "tree": {"sha": "d02418aa8a96b7df2703ed379f96310f7f4441b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d02418aa8a96b7df2703ed379f96310f7f4441b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0a11b1de3237a476639fee39fcf6ef506bdf34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0a11b1de3237a476639fee39fcf6ef506bdf34", "html_url": "https://github.com/rust-lang/rust/commit/ab0a11b1de3237a476639fee39fcf6ef506bdf34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0a11b1de3237a476639fee39fcf6ef506bdf34/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c4fbbbc45afc7d480185493b5ce77b5daa1747", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c4fbbbc45afc7d480185493b5ce77b5daa1747", "html_url": "https://github.com/rust-lang/rust/commit/d3c4fbbbc45afc7d480185493b5ce77b5daa1747"}], "stats": {"total": 112, "additions": 44, "deletions": 68}, "files": [{"sha": "f3158ade300bc208fabfde1627d7e64552858809", "filename": "crates/ra_parser/src/grammar/attributes.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab0a11b1de3237a476639fee39fcf6ef506bdf34/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0a11b1de3237a476639fee39fcf6ef506bdf34/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=ab0a11b1de3237a476639fee39fcf6ef506bdf34", "patch": "@@ -8,28 +8,6 @@ pub(super) fn inner_attributes(p: &mut Parser) {\n     }\n }\n \n-pub(super) fn with_outer_attributes(\n-    p: &mut Parser,\n-    f: impl Fn(&mut Parser) -> Option<CompletedMarker>,\n-) -> bool {\n-    let am = p.start();\n-    let has_attrs = p.at(T![#]);\n-    attributes::outer_attributes(p);\n-    let cm = f(p);\n-    let success = cm.is_some();\n-\n-    match (has_attrs, cm) {\n-        (true, Some(cm)) => {\n-            let kind = cm.kind();\n-            cm.undo_completion(p).abandon(p);\n-            am.complete(p, kind);\n-        }\n-        _ => am.abandon(p),\n-    }\n-\n-    success\n-}\n-\n pub(super) fn outer_attributes(p: &mut Parser) {\n     while p.at(T![#]) {\n         attribute(p, false)"}, {"sha": "5c413317e7c54bab66bed15ddd5b7b646c744da9", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ab0a11b1de3237a476639fee39fcf6ef506bdf34/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0a11b1de3237a476639fee39fcf6ef506bdf34/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=ab0a11b1de3237a476639fee39fcf6ef506bdf34", "patch": "@@ -181,47 +181,52 @@ fn tuple_expr(p: &mut Parser) -> CompletedMarker {\n fn array_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T!['[']));\n     let m = p.start();\n-    p.bump(T!['[']);\n-    if p.eat(T![']']) {\n-        return m.complete(p, ARRAY_EXPR);\n-    }\n \n-    // test first_array_member_attributes\n-    // pub const A: &[i64] = &[\n-    //    #[cfg(test)]\n-    //    1,\n-    //    2,\n-    // ];\n-    attributes::with_outer_attributes(p, |p| expr(p).0);\n+    let mut n_exprs = 0u32;\n+    let mut has_semi = false;\n \n-    if p.eat(T![;]) {\n-        expr(p);\n-        p.expect(T![']']);\n-        return m.complete(p, ARRAY_EXPR);\n-    }\n+    p.bump(T!['[']);\n     while !p.at(EOF) && !p.at(T![']']) {\n-        p.expect(T![,]);\n-        if p.at(T![']']) {\n-            break;\n-        }\n+        n_exprs += 1;\n+        // test first_array_member_attributes\n+        // pub const A: &[i64] = &[\n+        //    #[cfg(test)]\n+        //    1,\n+        //    2,\n+        // ];\n \n         // test subsequent_array_member_attributes\n         // pub const A: &[i64] = &[\n         //    1,\n         //    #[cfg(test)]\n         //    2,\n         // ];\n-        if !attributes::with_outer_attributes(p, |p| {\n-            if !p.at_ts(EXPR_FIRST) {\n-                p.error(\"expected expression\");\n-                return None;\n+        let m = p.start();\n+        let has_attrs = p.at(T![#]);\n+        attributes::outer_attributes(p);\n+\n+        let cm = expr(p).0;\n+\n+        match (has_attrs, cm) {\n+            (true, Some(cm)) => {\n+                let kind = cm.kind();\n+                cm.undo_completion(p).abandon(p);\n+                m.complete(p, kind);\n             }\n-            expr(p).0\n-        }) {\n+            _ => m.abandon(p),\n+        }\n+\n+        if n_exprs == 1 && p.eat(T![;]) {\n+            has_semi = true;\n+            continue;\n+        }\n+\n+        if has_semi || !p.at(T![']']) && !p.expect(T![,]) {\n             break;\n         }\n     }\n     p.expect(T![']']);\n+\n     m.complete(p, ARRAY_EXPR)\n }\n "}, {"sha": "310a8246448ef219625316fda3e379b321b750df", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.txt", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ab0a11b1de3237a476639fee39fcf6ef506bdf34/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ab0a11b1de3237a476639fee39fcf6ef506bdf34/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt?ref=ab0a11b1de3237a476639fee39fcf6ef506bdf34", "patch": "@@ -12,8 +12,8 @@ SOURCE_FILE@[0; 112)\n       BLOCK@[7; 33)\n         L_CURLY@[7; 8) \"{\"\n         WHITESPACE@[8; 9) \" \"\n-        EXPR_STMT@[9; 15)\n-          ARRAY_EXPR@[9; 15)\n+        EXPR_STMT@[9; 26)\n+          ARRAY_EXPR@[9; 26)\n             L_BRACK@[9; 10) \"[\"\n             LITERAL@[10; 11)\n               INT_NUMBER@[10; 11) \"1\"\n@@ -22,17 +22,13 @@ SOURCE_FILE@[0; 112)\n             LITERAL@[13; 14)\n               INT_NUMBER@[13; 14) \"2\"\n             COMMA@[14; 15) \",\"\n-        WHITESPACE@[15; 16) \" \"\n-        EXPR_STMT@[16; 17)\n-          ERROR@[16; 17)\n-            AT@[16; 17) \"@\"\n-        EXPR_STMT@[17; 18)\n-          ERROR@[17; 18)\n+            WHITESPACE@[15; 16) \" \"\n+            ERROR@[16; 17)\n+              AT@[16; 17) \"@\"\n             COMMA@[17; 18) \",\"\n-        WHITESPACE@[18; 19) \" \"\n-        STRUCT_DEF@[19; 26)\n-          STRUCT_KW@[19; 25) \"struct\"\n-          ERROR@[25; 26)\n+            WHITESPACE@[18; 19) \" \"\n+            ERROR@[19; 25)\n+              STRUCT_KW@[19; 25) \"struct\"\n             COMMA@[25; 26) \",\"\n         WHITESPACE@[26; 27) \" \"\n         LET_STMT@[27; 31)\n@@ -151,15 +147,12 @@ SOURCE_FILE@[0; 112)\n         WHITESPACE@[109; 110) \" \"\n         R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\"\n-error 15: expected expression\n-error 15: expected R_BRACK\n-error 15: expected SEMI\n error 16: expected expression\n-error 17: expected SEMI\n-error 17: expected expression\n-error 18: expected SEMI\n-error 25: expected a name\n-error 26: expected `;`, `{`, or `(`\n+error 19: expected expression\n+error 26: expected expression\n+error 26: expected COMMA\n+error 26: expected R_BRACK\n+error 26: expected SEMI\n error 30: expected pattern\n error 31: expected SEMI\n error 52: expected expression"}]}