{"sha": "4459d14243395e8c90c5b354cf526b9e6ca3ca23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTlkMTQyNDMzOTVlOGM5MGM1YjM1NGNmNTI2YjllNmNhM2NhMjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T10:26:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T10:26:25Z"}, "message": "Merge remote-tracking branch 'origin/master' into auto-libstd", "tree": {"sha": "a3e6189fcd897efdea340dc848654dbbd4eba22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e6189fcd897efdea340dc848654dbbd4eba22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4459d14243395e8c90c5b354cf526b9e6ca3ca23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4459d14243395e8c90c5b354cf526b9e6ca3ca23", "html_url": "https://github.com/rust-lang/rust/commit/4459d14243395e8c90c5b354cf526b9e6ca3ca23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4459d14243395e8c90c5b354cf526b9e6ca3ca23/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f78a37d4e8d7c55330e90e0a36815bf615a8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f78a37d4e8d7c55330e90e0a36815bf615a8d9", "html_url": "https://github.com/rust-lang/rust/commit/07f78a37d4e8d7c55330e90e0a36815bf615a8d9"}, {"sha": "5a8ed25aa807bb8ba04056016f1ad4544ff1c7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8ed25aa807bb8ba04056016f1ad4544ff1c7db", "html_url": "https://github.com/rust-lang/rust/commit/5a8ed25aa807bb8ba04056016f1ad4544ff1c7db"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "babd0246e7e1afcd0f2a1ed0ac540bfcc45443dc", "filename": "tests/compile-fail-fullmir/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -2,5 +2,5 @@\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;\n-    let _ = unsafe { x.offset(isize::min_value()) };\n+    let _val = unsafe { x.offset(isize::min_value()) };\n }"}, {"sha": "c1b8727c129b9a17b4bc8553e497503e6c3341fc", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -12,5 +12,5 @@ pub enum Foo {\n \n fn main() {\n     let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n-    let _ = mem::discriminant(&f);\n+    let _val = mem::discriminant(&f);\n }"}, {"sha": "a584863654cef267071ce6724fae3a0a0a074141", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const usize;\n     let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _ = ptr_bytes / 432; //~ ERROR invalid arithmetic on pointers that would leak base addresses\n+    let _val = ptr_bytes / 432; //~ ERROR invalid arithmetic on pointers that would leak base addresses\n }"}, {"sha": "ddb9bc1f995f28448c6ca1b7dccc05a09225bbc6", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n+    let _val = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n }"}, {"sha": "5d5eab155083b4f6e34ca4f69e2f62a751e13c79", "filename": "tests/compile-fail/ptr_bitops2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_bitops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_bitops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops2.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let val = 13usize;\n     let addr = &val as *const _ as usize;\n-    let _ = addr & 13; //~ ERROR access part of a pointer value as raw bytes\n+    let _val = addr & 13; //~ ERROR access part of a pointer value as raw bytes\n }"}, {"sha": "a823a0f49b630fe8454ccf99700f077e653558a0", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x = x as *const i32;\n     let x = x as u8; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n-    let _ = unsafe { *x };\n+    let _val = unsafe { *x };\n }"}, {"sha": "d02739610814415057670800990d939fde28886c", "filename": "tests/compile-fail/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     // Can't offset an integer pointer by non-zero offset.\n     unsafe {\n-        let _ = (1 as *mut u8).offset(1);\n+        let _val = (1 as *mut u8).offset(1);\n     }\n }"}, {"sha": "b49c758c72f786404ec2fb4390db3eb8cd043ccc", "filename": "tests/compile-fail/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));\n     // Can't start with an integer pointer and get to something usable\n     unsafe {\n-        let _ = (1 as *mut u8).offset(ptr as isize);\n+        let _val = (1 as *mut u8).offset(ptr as isize);\n     }\n }"}, {"sha": "dfc91e9dc1b12eba0805296eab816917dec8b9f2", "filename": "tests/compile-fail/ptr_rem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_rem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_rem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_rem.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let val = 13usize;\n     let addr = &val as *const _ as usize;\n-    let _ = addr % 16; //~ ERROR access part of a pointer value as raw bytes\n+    let _val = addr % 16; //~ ERROR access part of a pointer value as raw bytes\n }"}, {"sha": "eacb9f07fffd79be6663c124841bd785bcca0859", "filename": "tests/compile-fail/ptr_wrapping_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));\n     // Can't start with an integer pointer and get to something usable\n     let ptr = (1 as *mut u8).wrapping_offset(ptr as isize);\n-    let _ = unsafe { *ptr };\n+    let _val = unsafe { *ptr };\n }"}, {"sha": "ddc78c8bf1d4ae75a43254c5a41f016713a09648", "filename": "tests/compile-fail/transmute_fat1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat1.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n     };\n-    let _ = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let _val = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "a3f90703634919f81894cc55dc30db888d9fcaf5", "filename": "tests/compile-fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    let _ = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected something less or equal to 1114111\n+    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected something less or equal to 1114111\n         'a' => {true},\n         'b' => {false},\n         _ => {true},"}, {"sha": "0488926870a21bd8bc00bbee72b12bc76305d100", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR access memory with alignment 1, but alignment 4 is required\n+    let _val = unsafe { *x }; //~ ERROR access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "aa7bccaa5ff3acfe7099b7da53f91158d2347c05", "filename": "tests/run-pass-fullmir/catch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass-fullmir%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass-fullmir%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fcatch.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -3,6 +3,6 @@ use std::panic::{catch_unwind, AssertUnwindSafe};\n \n fn main() {\n     let mut i = 3;\n-    let _ = catch_unwind(AssertUnwindSafe(|| {i -= 2;} ));\n+    let _val = catch_unwind(AssertUnwindSafe(|| {i -= 2;} ));\n     println!(\"{}\", i);\n }"}, {"sha": "ce59e60a932d5cd005ccfd3d4c8fcb643299a0c1", "filename": "tests/run-pass-fullmir/from_utf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass-fullmir%2Ffrom_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass-fullmir%2Ffrom_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Ffrom_utf8.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let _ = ::std::str::from_utf8(b\"a\");\n+    let _val = ::std::str::from_utf8(b\"a\");\n }"}, {"sha": "dad47d85a24663e68abbf8fdb2f246d851e4c323", "filename": "tests/run-pass-fullmir/threads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass-fullmir%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass-fullmir%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fthreads.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -5,15 +5,15 @@ use std::sync;\n \n fn main() {\n     let m = sync::Mutex::new(0);\n-    let _ = m.lock();\n+    drop(m.lock());\n     drop(m);\n \n     // We don't provide RwLock on Windows\n     #[cfg(not(target_os = \"windows\"))]\n     {\n         let rw = sync::RwLock::new(0);\n-        let _ = rw.read();\n-        let _ = rw.write();\n+        drop(rw.read());\n+        drop(rw.write());\n         drop(rw);\n     }\n }"}, {"sha": "374efb6032bf53b30d2388f5296c64d7c9665085", "filename": "tests/run-pass/closure-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fclosure-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fclosure-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosure-drop.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         // this closure never by val uses its captures\n         // so it's basically a fn(&self)\n         // the shim used to not drop the `x`\n-        let x = move || { let _ = x; };\n+        let x = move || { let _val = x; };\n         f(x);\n     }\n     assert!(ran_drop);"}, {"sha": "8b481a0a2dd8984e2f94d95e1c7573ccc82f3440", "filename": "tests/run-pass/drop_empty_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fdrop_empty_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fdrop_empty_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_empty_slice.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     // With the nested Vec, this is calling Offset(Unique::empty(), 0) on drop.\n     let args : Vec<Vec<i32>> = Vec::new();\n-    let _ = box args;\n+    let _val = box args;\n }"}, {"sha": "01371f5bec6830e592f9a960e890b5808db8d44e", "filename": "tests/run-pass/issue-20575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-20575.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n-    let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n+    let _val: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "e29e5fbcc40812e3b99544aa30071c2d2716a319", "filename": "tests/run-pass/issue-26709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-26709.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let mut x = 0;\n     {\n         let wrapper = Box::new(Wrapper(&mut x, 123));\n-        let _: Box<Wrapper<Send>> = wrapper;\n+        let _val: Box<Wrapper<Send>> = wrapper;\n     }\n     assert_eq!(432, x)\n }"}, {"sha": "62a4263c1069bcab90a79a219cc072bb4a896789", "filename": "tests/run-pass/issue-33387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-33387.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -15,5 +15,5 @@ trait Foo {}\n impl Foo for [u8; 2] {}\n \n fn main() {\n-    let _: Arc<Foo + Send> = Arc::new([3, 4]);\n+    let _val: Arc<Foo + Send> = Arc::new([3, 4]);\n }"}, {"sha": "39c841403ef0c8f94f99e0af76a8ddd80312201b", "filename": "tests/run-pass/issue-miri-184.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-miri-184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fissue-miri-184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-miri-184.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -1,4 +1,4 @@\n pub fn main() {\n     let bytes: [u8; 8] = unsafe { ::std::mem::transmute(0u64) };\n-    let _: &[u8] = &bytes;\n+    let _val: &[u8] = &bytes;\n }"}, {"sha": "3280c36e0a7292f75c8b0c2e7db1b71cc097e7e1", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -27,6 +27,6 @@ fn foo(i:isize, j: char) -> Foo {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _ = tx.send(foo(42, 'c'));\n-    let _ = rx;\n+    tx.send(foo(42, 'c')).unwrap();\n+    let _val = rx;\n }"}, {"sha": "4506a72e8dd0284ed1af91809a565ae8183a8392", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459d14243395e8c90c5b354cf526b9e6ca3ca23/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=4459d14243395e8c90c5b354cf526b9e6ca3ca23", "patch": "@@ -4,15 +4,15 @@ fn slice_of_zst() {\n     fn foo<T>(v: &[T]) -> Option<&[T]> {\n         let mut it = v.iter();\n         for _ in 0..5 {\n-            let _ = it.next();\n+            it.next();\n         }\n         Some(it.as_slice())\n     }\n \n     fn foo_mut<T>(v: &mut [T]) -> Option<&mut [T]> {\n         let mut it = v.iter_mut();\n         for _ in 0..5 {\n-            let _ = it.next();\n+            it.next();\n         }\n         Some(it.into_slice())\n     }"}]}