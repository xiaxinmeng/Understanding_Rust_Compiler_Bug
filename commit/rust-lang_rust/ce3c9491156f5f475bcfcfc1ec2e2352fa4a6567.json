{"sha": "ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlM2M5NDkxMTU2ZjVmNDc1YmNmY2ZjMWVjMmUyMzUyZmE0YTY1Njc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-04T22:52:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:24Z"}, "message": "Intern BareFnTys to make sty slightly smaller.\n\nThis cuts the ty_bare_fn variant to 48 bytes rather than 56. There\ndoesn't seem to be a noticable memory usage decrease from this.", "tree": {"sha": "548578cda0a1808ecba55af9e62fc8e2a4689b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548578cda0a1808ecba55af9e62fc8e2a4689b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "html_url": "https://github.com/rust-lang/rust/commit/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a33a7d20de35febdb697ca93d3c36b78930dde8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a33a7d20de35febdb697ca93d3c36b78930dde8d", "html_url": "https://github.com/rust-lang/rust/commit/a33a7d20de35febdb697ca93d3c36b78930dde8d"}], "stats": {"total": 155, "additions": 91, "deletions": 64}, "files": [{"sha": "5dd1ee2882f21412cabab50f1b54737994d9cf0a", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -454,10 +454,12 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n       }\n       'F' => {\n           let def_id = parse_def(st, NominalType, |x,y| conv(x,y));\n-          return ty::mk_bare_fn(st.tcx, Some(def_id), parse_bare_fn_ty(st, |x,y| conv(x,y)));\n+          return ty::mk_bare_fn(st.tcx, Some(def_id),\n+                                st.tcx.mk_bare_fn(parse_bare_fn_ty(st, |x,y| conv(x,y))));\n       }\n       'G' => {\n-          return ty::mk_bare_fn(st.tcx, None, parse_bare_fn_ty(st, |x,y| conv(x,y)));\n+          return ty::mk_bare_fn(st.tcx, None,\n+                                st.tcx.mk_bare_fn(parse_bare_fn_ty(st, |x,y| conv(x,y))));\n       }\n       '#' => {\n         let pos = parse_hex(st);"}, {"sha": "d64bdf8af898c7aa8f8e448980cc859fa01b22a3", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -174,7 +174,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         self.unpack_actual_value(a, |a| {\n             match a.sty {\n-                ty::ty_bare_fn(Some(a_def_id), ref a_f) => {\n+                ty::ty_bare_fn(Some(a_def_id), a_f) => {\n                     // Function items are coercible to any closure\n                     // type; function pointers are not (that would\n                     // require double indirection).\n@@ -486,7 +486,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                b.repr(self.tcx()));\n \n         match a.sty {\n-            ty::ty_bare_fn(Some(a_def_id), ref f) => {\n+            ty::ty_bare_fn(Some(a_def_id), f) => {\n                 self.coerce_from_fn_item(a, a_def_id, f, b)\n             }\n             _ => {"}, {"sha": "220f2f369c23b0f9b31fc3d21941b224c0bc5da2", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -568,7 +568,7 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n         }\n       }\n \n-        (&ty::ty_bare_fn(a_opt_def_id, ref a_fty), &ty::ty_bare_fn(b_opt_def_id, ref b_fty))\n+        (&ty::ty_bare_fn(a_opt_def_id, a_fty), &ty::ty_bare_fn(b_opt_def_id, b_fty))\n             if a_opt_def_id == b_opt_def_id =>\n         {\n             let fty = try!(this.bare_fn_tys(a_fty, b_fty));"}, {"sha": "a32830bf92ee6b7d96fd03a09141282d1c2e053b", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -806,7 +806,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // provide an impl, but only for suitable `fn` pointers\n-            ty::ty_bare_fn(_, ty::BareFnTy {\n+            ty::ty_bare_fn(_, &ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -1549,7 +1549,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         let sig = match self_ty.sty {\n-            ty::ty_bare_fn(_, ty::BareFnTy {\n+            ty::ty_bare_fn(_, &ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 ref sig"}, {"sha": "473c3b49cd2f1863178b81a0c94a5940bf8cc8ed", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -611,6 +611,7 @@ pub struct ctxt<'tcx> {\n     /// The arena that types are allocated from.\n     type_arena: &'tcx TypedArena<TyS<'tcx>>,\n     substs_arena: &'tcx TypedArena<Substs<'tcx>>,\n+    bare_fn_arena: &'tcx TypedArena<BareFnTy<'tcx>>,\n \n     /// Specifically use a speedy hash algorithm for this hash map, it's used\n     /// quite often.\n@@ -619,6 +620,7 @@ pub struct ctxt<'tcx> {\n     interner: RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>,\n     // FIXME as above, use a hashset if equivalent elements can be queried.\n     substs_interner: RefCell<FnvHashMap<&'tcx Substs<'tcx>, &'tcx Substs<'tcx>>>,\n+    bare_fn_interner: RefCell<FnvHashMap<&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>>>,\n \n     pub sess: Session,\n     pub def_map: DefMap,\n@@ -1327,7 +1329,7 @@ pub enum sty<'tcx> {\n \n     // If the def-id is Some(_), then this is the type of a specific\n     // fn item. Otherwise, if None(_), it a fn pointer type.\n-    ty_bare_fn(Option<DefId>, BareFnTy<'tcx>),\n+    ty_bare_fn(Option<DefId>, &'tcx BareFnTy<'tcx>),\n \n     ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n@@ -2056,6 +2058,7 @@ impl UnboxedClosureKind {\n pub fn mk_ctxt<'tcx>(s: Session,\n                      type_arena: &'tcx TypedArena<TyS<'tcx>>,\n                      substs_arena: &'tcx TypedArena<Substs<'tcx>>,\n+                     bare_fn_arena: &'tcx TypedArena<BareFnTy<'tcx>>,\n                      dm: DefMap,\n                      named_region_map: resolve_lifetime::NamedRegionMap,\n                      map: ast_map::Map<'tcx>,\n@@ -2067,8 +2070,10 @@ pub fn mk_ctxt<'tcx>(s: Session,\n     ctxt {\n         type_arena: type_arena,\n         substs_arena: substs_arena,\n+        bare_fn_arena: bare_fn_arena,\n         interner: RefCell::new(FnvHashMap::new()),\n         substs_interner: RefCell::new(FnvHashMap::new()),\n+        bare_fn_interner: RefCell::new(FnvHashMap::new()),\n         named_region_map: named_region_map,\n         item_variance_map: RefCell::new(DefIdMap::new()),\n         variance_computed: Cell::new(false),\n@@ -2138,6 +2143,16 @@ impl<'tcx> ctxt<'tcx> {\n         self.substs_interner.borrow_mut().insert(substs, substs);\n         substs\n     }\n+\n+    pub fn mk_bare_fn(&self, bare_fn: BareFnTy<'tcx>) -> &'tcx BareFnTy<'tcx> {\n+        if let Some(bare_fn) = self.bare_fn_interner.borrow().get(&bare_fn) {\n+            return *bare_fn;\n+        }\n+\n+        let bare_fn = self.bare_fn_arena.alloc(bare_fn);\n+        self.bare_fn_interner.borrow_mut().insert(bare_fn, bare_fn);\n+        bare_fn\n+    }\n }\n \n // Interns a type/name combination, stores the resulting box in cx.interner,\n@@ -2444,7 +2459,7 @@ pub fn mk_closure<'tcx>(cx: &ctxt<'tcx>, fty: ClosureTy<'tcx>) -> Ty<'tcx> {\n \n pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>,\n                         opt_def_id: Option<ast::DefId>,\n-                        fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n+                        fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> {\n     mk_t(cx, ty_bare_fn(opt_def_id, fty))\n }\n \n@@ -2455,15 +2470,15 @@ pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,\n     let input_args = input_tys.iter().map(|ty| *ty).collect();\n     mk_bare_fn(cx,\n                Some(def_id),\n-               BareFnTy {\n+               cx.mk_bare_fn(BareFnTy {\n                    unsafety: ast::Unsafety::Normal,\n                    abi: abi::Rust,\n                    sig: ty::Binder(FnSig {\n                     inputs: input_args,\n                     output: ty::FnConverging(output),\n                     variadic: false\n                    })\n-                })\n+                }))\n }\n \n "}, {"sha": "e2323127aecbd47d412796d5ed0f3a2498da8580", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -81,7 +81,10 @@ pub fn compile_input(sess: Session,\n \n         let type_arena = TypedArena::new();\n         let substs_arena = TypedArena::new();\n-        let analysis = phase_3_run_analysis_passes(sess, ast_map, &type_arena, &substs_arena, id);\n+        let bare_fn_arena = TypedArena::new();\n+        let analysis = phase_3_run_analysis_passes(sess, ast_map,\n+                                                   &type_arena, &substs_arena, &bare_fn_arena,\n+                                                   id);\n         phase_save_analysis(&analysis.ty_cx.sess, analysis.ty_cx.map.krate(), &analysis, outdir);\n \n         if log_enabled!(::log::INFO) {\n@@ -345,6 +348,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                                          ast_map: ast_map::Map<'tcx>,\n                                          type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n                                          substs_arena: &'tcx TypedArena<subst::Substs<'tcx>>,\n+                                         bare_fn_arena: &'tcx TypedArena<ty::BareFnTy<'tcx>>,\n                                          name: String) -> ty::CrateAnalysis<'tcx> {\n     let time_passes = sess.time_passes();\n     let krate = ast_map.krate();\n@@ -406,6 +410,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     let ty_cx = ty::mk_ctxt(sess,\n                             type_arena,\n                             substs_arena,\n+                            bare_fn_arena,\n                             def_map,\n                             named_region_map,\n                             ast_map,"}, {"sha": "c60e0ba4fc8cba8532c43324bcbc1c181a068baa", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -114,6 +114,7 @@ impl PpSourceMode {\n                                            ast_map: Option<ast_map::Map<'tcx>>,\n                                            type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n                                            substs_arena: &'tcx TypedArena<subst::Substs<'tcx>>,\n+                                           bare_fn_arena: &'tcx TypedArena<ty::BareFnTy<'tcx>>,\n                                            id: String,\n                                            payload: B,\n                                            f: F) -> A where\n@@ -136,7 +137,9 @@ impl PpSourceMode {\n             PpmTyped => {\n                 let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n                 let analysis = driver::phase_3_run_analysis_passes(sess, ast_map,\n-                                                                   type_arena, substs_arena, id);\n+                                                                   type_arena, substs_arena,\n+                                                                   bare_fn_arena,\n+                                                                   id);\n                 let annotation = TypedAnnotation { analysis: analysis };\n                 f(&annotation, payload)\n             }\n@@ -513,6 +516,7 @@ pub fn pretty_print_input(sess: Session,\n     let mut forest = ast_map::Forest::new(krate);\n     let type_arena = TypedArena::new();\n     let substs_arena = TypedArena::new();\n+    let bare_fn_arena = TypedArena::new();\n \n     let (krate, ast_map) = if compute_ast_map {\n         let map = driver::assign_node_ids_and_map(&sess, &mut forest);\n@@ -541,7 +545,8 @@ pub fn pretty_print_input(sess: Session,\n     match (ppm, opt_uii) {\n         (PpmSource(s), None) =>\n             s.call_with_pp_support(\n-                sess, ast_map, &type_arena, &substs_arena, id, out, |annotation, out| {\n+                sess, ast_map, &type_arena, &substs_arena, &bare_fn_arena,\n+                id, out, |annotation, out| {\n                     debug!(\"pretty printing source code {}\", s);\n                     let sess = annotation.sess();\n                     pprust::print_crate(sess.codemap(),\n@@ -556,7 +561,8 @@ pub fn pretty_print_input(sess: Session,\n \n         (PpmSource(s), Some(uii)) =>\n             s.call_with_pp_support(\n-                sess, ast_map, &type_arena, &substs_arena, id, (out,uii), |annotation, (out,uii)| {\n+                sess, ast_map, &type_arena, &substs_arena, &bare_fn_arena,\n+                id, (out,uii), |annotation, (out,uii)| {\n                     debug!(\"pretty printing source code {}\", s);\n                     let sess = annotation.sess();\n                     let ast_map = annotation.ast_map()\n@@ -600,6 +606,7 @@ pub fn pretty_print_input(sess: Session,\n                     let variants = gather_flowgraph_variants(&sess);\n                     let analysis = driver::phase_3_run_analysis_passes(sess, ast_map,\n                                                                        &type_arena, &substs_arena,\n+                                                                       &bare_fn_arena,\n                                                                        id);\n                     print_flowgraph(variants, analysis, code, out)\n                 }"}, {"sha": "2201d90a265c40f7663556add3518a13137e52bc", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -128,8 +128,12 @@ fn test_env<F>(source_string: &str,\n     let region_map = region::resolve_crate(&sess, krate);\n     let stability_index = stability::Index::build(krate);\n     let type_arena = TypedArena::new();\n+    let substs_arena = TypedArena::new();\n+    let bare_fn_arena = TypedArena::new();\n     let tcx = ty::mk_ctxt(sess,\n                           &type_arena,\n+                          &substs_arena,\n+                          &bare_fn_arena,\n                           def_map,\n                           named_region_map,\n                           ast_map,\n@@ -816,4 +820,3 @@ fn subst_region_renumber_region() {\n         assert_eq!(t_substituted, t_expected);\n     })\n }\n-"}, {"sha": "8450e99bc28e5ba4e20ebde555efe8a62ae92345", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -279,7 +279,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let (opt_def_id, input_tys, output_ty) =\n         match bare_fn_ty.sty {\n             ty::ty_bare_fn(opt_def_id,\n-                           ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n+                           &ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                           abi: synabi::Rust,\n                                           sig: ty::Binder(ty::FnSig { inputs: ref input_tys,\n                                                                       output: output_ty,\n@@ -296,14 +296,15 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let tuple_input_ty = ty::mk_tup(tcx, input_tys.to_vec());\n     let tuple_fn_ty = ty::mk_bare_fn(tcx,\n                                      opt_def_id,\n-                                     ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n-                                                    abi: synabi::RustCall,\n-                                                    sig: ty::Binder(ty::FnSig {\n-                                                        inputs: vec![bare_fn_ty_ref,\n-                                                                     tuple_input_ty],\n-                                                        output: output_ty,\n-                                                        variadic: false\n-                                                    })});\n+                                     tcx.mk_bare_fn(ty::BareFnTy {\n+                                         unsafety: ast::Unsafety::Normal,\n+                                         abi: synabi::RustCall,\n+                                         sig: ty::FnSig {\n+                                             inputs: vec![bare_fn_ty_ref,\n+                                                          tuple_input_ty],\n+                                             output: output_ty,\n+                                             variadic: false\n+                                         }}));\n     debug!(\"tuple_fn_ty: {}\", tuple_fn_ty.repr(tcx));\n \n     //"}, {"sha": "ea2d42bebdfc4cf9a45149778a0b9ee8798bd829", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -430,7 +430,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                        trait_data.principal.substs(),\n                                        &mut unique_type_id);\n             },\n-            ty::ty_bare_fn(_, ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+            ty::ty_bare_fn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == ast::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n                 }\n@@ -3819,7 +3819,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, trait_data.principal.def_id(), false, output);\n             push_type_params(cx, trait_data.principal.substs(), output);\n         },\n-        ty::ty_bare_fn(_, ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+        ty::ty_bare_fn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == ast::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }"}, {"sha": "553613a8eac0e2d350e5846de86c540a7ae60746", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -639,7 +639,7 @@ fn emit_vtable_methods<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                        m.repr(tcx),\n                        substs.repr(tcx));\n                 if m.generics.has_type_params(subst::FnSpace) ||\n-                    ty::type_has_self(ty::mk_bare_fn(tcx, None, m.fty.clone()))\n+                    ty::type_has_self(ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(m.fty.clone())))\n                 {\n                     debug!(\"(making impl vtable) method has self or type \\\n                             params: {}\","}, {"sha": "abb0d1951c493c8fa1361cd9d07deea149200645", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -954,7 +954,8 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                     tcx.sess.span_err(ast_ty.span,\n                                       \"variadic function must have C calling convention\");\n                 }\n-                ty::mk_bare_fn(tcx, None, ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl))\n+                let bare_fn = ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl);\n+                ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(bare_fn))\n             }\n             ast::TyClosure(ref f) => {\n                 // Use corresponding trait store to figure out default bounds"}, {"sha": "abd99f6b32455d52a0b6b279f5416374b25711da", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -113,11 +113,11 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         self.add_obligations(&pick, &method_bounds_substs, &method_bounds);\n \n         // Create the final `MethodCallee`.\n-        let fty = ty::mk_bare_fn(self.tcx(), None, ty::BareFnTy {\n+        let fty = ty::mk_bare_fn(self.tcx(), None, self.tcx().mk_bare_fn(ty::BareFnTy {\n             sig: ty::Binder(method_sig),\n             unsafety: pick.method_ty.fty.unsafety,\n             abi: pick.method_ty.fty.abi.clone(),\n-        });\n+        }));\n         let callee = MethodCallee {\n             origin: method_origin,\n             ty: fty,"}, {"sha": "d38bd7c2a1d700092431f697c0774e25b5a4f748", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -199,11 +199,10 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n                                                                        infer::FnCall,\n                                                                        &fn_sig).0;\n     let transformed_self_ty = fn_sig.inputs[0];\n-    let fty = ty::mk_bare_fn(tcx, None, ty::BareFnTy {\n-        sig: ty::Binder(fn_sig),\n+    let fty = ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: bare_fn_ty.unsafety,\n         abi: bare_fn_ty.abi.clone(),\n-    });\n+    }));\n \n     debug!(\"lookup_in_trait_adjusted: matched method fty={} obligation={}\",\n            fty.repr(fcx.tcx()),"}, {"sha": "0bf8d4d3982bf873f7fa93f4d3fb501c2ec4401b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -1154,9 +1154,9 @@ fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n \n     // Compute skolemized form of impl and trait method tys.\n-    let impl_fty = ty::mk_bare_fn(tcx, None, impl_m.fty.clone());\n+    let impl_fty = ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(impl_m.fty.clone()));\n     let impl_fty = impl_fty.subst(tcx, &impl_to_skol_substs);\n-    let trait_fty = ty::mk_bare_fn(tcx, None, trait_m.fty.clone());\n+    let trait_fty = ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(trait_m.fty.clone()));\n     let trait_fty = trait_fty.subst(tcx, &trait_to_skol_substs);\n \n     // Check the impl method type IM is a subtype of the trait method\n@@ -2949,7 +2949,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         });\n \n         let fn_sig = match fn_ty.sty {\n-            ty::ty_bare_fn(_, ty::BareFnTy {ref sig, ..}) |\n+            ty::ty_bare_fn(_, &ty::BareFnTy {ref sig, ..}) |\n             ty::ty_closure(box ty::ClosureTy {ref sig, ..}) => sig,\n             _ => {\n                 fcx.type_error_message(call_expr.span, |actual| {\n@@ -5769,15 +5769,15 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n         };\n         (n_tps, inputs, ty::FnConverging(output))\n     };\n-    let fty = ty::mk_bare_fn(tcx, None, ty::BareFnTy {\n+    let fty = ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: ast::Unsafety::Unsafe,\n         abi: abi::RustIntrinsic,\n         sig: ty::Binder(FnSig {\n             inputs: inputs,\n             output: output,\n             variadic: false,\n         }),\n-    });\n+    }));\n     let i_ty = ty::lookup_item_type(ccx.tcx, local_def(it.id));\n     let i_n_tps = i_ty.generics.types.len(subst::FnSpace);\n     if i_n_tps != n_tps {"}, {"sha": "258177bb72096ba9259d0f3ddf8f35584e6cde22", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -355,7 +355,7 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n \n                 self.fold_substs(substs);\n             }\n-            ty::ty_bare_fn(_, ty::BareFnTy{sig: ref fn_sig, ..}) |\n+            ty::ty_bare_fn(_, &ty::BareFnTy{sig: ref fn_sig, ..}) |\n             ty::ty_closure(box ty::ClosureTy{sig: ref fn_sig, ..}) => {\n                 self.binding_count += 1;\n "}, {"sha": "f92c7764a69b06b177cc0d1572a23a336c66f0eb", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -235,7 +235,8 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             // impl, plus its own.\n             let new_polytype = ty::Polytype {\n                 generics: new_method_ty.generics.clone(),\n-                ty: ty::mk_bare_fn(tcx, Some(new_did), new_method_ty.fty.clone())\n+                ty: ty::mk_bare_fn(tcx, Some(new_did),\n+                                   tcx.mk_bare_fn(new_method_ty.fty.clone()))\n             };\n             debug!(\"new_polytype={}\", new_polytype.repr(tcx));\n "}, {"sha": "9252e5a82034045646e4b882e228ce83ab767b21", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -355,7 +355,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             m.def_id,\n             Polytype {\n                 generics: m.generics.clone(),\n-                ty: ty::mk_bare_fn(ccx.tcx, Some(m.def_id), m.fty.clone()) });\n+                ty: ty::mk_bare_fn(ccx.tcx, Some(m.def_id), ccx.tcx.mk_bare_fn(m.fty.clone())) });\n     }\n \n     fn ty_method_of_trait_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n@@ -529,7 +529,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                                        untransformed_rcvr_ty,\n                                        rcvr_ty_generics,\n                                        rcvr_visibility));\n-        let fty = ty::mk_bare_fn(tcx, Some(m_def_id), mty.fty.clone());\n+        let fty = ty::mk_bare_fn(tcx, Some(m_def_id), tcx.mk_bare_fn(mty.fty.clone()));\n         debug!(\"method {} (id {}) has type {}\",\n                 m.pe_ident().repr(tcx),\n                 m.id,\n@@ -1465,7 +1465,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n             };\n             let pty = Polytype {\n                 generics: ty_generics,\n-                ty: ty::mk_bare_fn(ccx.tcx, Some(local_def(it.id)), tofd)\n+                ty: ty::mk_bare_fn(ccx.tcx, Some(local_def(it.id)), ccx.tcx.mk_bare_fn(tofd))\n             };\n             debug!(\"type of {} (id {}) is {}\",\n                     token::get_ident(it.ident),\n@@ -1775,12 +1775,7 @@ fn ty_generics<'tcx,AC>(this: &AC,\n         let def = get_or_create_type_parameter_def(&gcx,\n                                                    space,\n                                                    param,\n-<<<<<<< HEAD\n-                                                   i,\n-=======\n                                                    i as u32,\n-                                                   where_clause,\n->>>>>>> Switch Region information from uint to u32.\n                                                    None);\n         debug!(\"ty_generics: def for type param: {}, {}\",\n                def.repr(this.tcx()),\n@@ -1968,12 +1963,7 @@ fn ty_generics<'tcx,AC>(this: &AC,\n fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,\n                                              space: subst::ParamSpace,\n                                              param: &ast::TyParam,\n-<<<<<<< HEAD\n-                                             index: uint,\n-=======\n                                              index: u32,\n-                                             where_clause: &ast::WhereClause,\n->>>>>>> Switch Region information from uint to u32.\n                                              associated_with: Option<ast::DefId>)\n                                              -> ty::TypeParameterDef<'tcx>\n     where AC: AstConv<'tcx>\n@@ -2153,13 +2143,13 @@ pub fn ty_of_foreign_fn_decl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let t_fn = ty::mk_bare_fn(\n         ccx.tcx,\n         None,\n-        ty::BareFnTy {\n+        ccx.tcx.mk_bare_fn(ty::BareFnTy {\n             abi: abi,\n             unsafety: ast::Unsafety::Unsafe,\n             sig: ty::Binder(ty::FnSig {inputs: input_tys,\n-                                       output: output,\n-                                       variadic: decl.variadic}),\n-        });\n+                            output: output,\n+                            variadic: decl.variadic})\n+        }));\n     let pty = Polytype {\n         generics: ty_generics_for_fn_or_method,\n         ty: t_fn"}, {"sha": "3418cded022c9776cb1a6d9e392f34fc3069f431", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -225,15 +225,15 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 }\n                 _ => ()\n             }\n-            let se_ty = ty::mk_bare_fn(tcx, Some(local_def(main_id)), ty::BareFnTy {\n+            let se_ty = ty::mk_bare_fn(tcx, Some(local_def(main_id)), tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n                     inputs: Vec::new(),\n                     output: ty::FnConverging(ty::mk_nil(tcx)),\n                     variadic: false\n                 })\n-            });\n+            }));\n \n             require_same_types(tcx, None, false, main_span, main_t, se_ty,\n                 || {\n@@ -273,7 +273,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n \n-            let se_ty = ty::mk_bare_fn(tcx, Some(local_def(start_id)), ty::BareFnTy {\n+            let se_ty = ty::mk_bare_fn(tcx, Some(local_def(start_id)), tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -284,7 +284,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                     output: ty::FnConverging(ty::mk_int()),\n                     variadic: false\n                 }),\n-            });\n+            }));\n \n             require_same_types(tcx, None, false, start_span, start_t, se_ty,\n                 || {"}, {"sha": "8bbc4d21739a48f09be6fda0304e3b8582cb7223", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -814,7 +814,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::ty_bare_fn(_, ty::BareFnTy { ref sig, .. }) |\n+            ty::ty_bare_fn(_, &ty::BareFnTy { ref sig, .. }) |\n             ty::ty_closure(box ty::ClosureTy {\n                     ref sig,\n                     store: ty::UniqTraitStore,"}, {"sha": "9456d8847b67d8fc07e13d932ec76448b7956ee3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "patch": "@@ -123,9 +123,12 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n \n     let type_arena = TypedArena::new();\n     let substs_arena = TypedArena::new();\n+    let bare_fn_arena = TypedArena::new();\n     let ty::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n-    } = driver::phase_3_run_analysis_passes(sess, ast_map, &type_arena, &substs_arena, name);\n+    } = driver::phase_3_run_analysis_passes(sess, ast_map,\n+                                            &type_arena, &substs_arena, &bare_fn_arena,\n+                                            name);\n \n     let ctxt = DocContext {\n         krate: ty_cx.map.krate(),"}]}