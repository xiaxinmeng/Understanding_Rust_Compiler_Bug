{"sha": "aece3df81e9ebd8bab3701e12bdb67b68c03564b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlY2UzZGY4MWU5ZWJkOGJhYjM3MDFlMTJiZGI2N2I2OGMwMzU2NGI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-22T11:39:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-22T11:39:24Z"}, "message": "Rollup merge of #87343 - steffahn:fix_unsound_zip_optimization_only_regression_fix, r=cuviper\n\nRegression fix to avoid further beta backports: Remove unsound TrustedRandomAccess implementations\n\nRemoves the implementations that depend on the user-definable trait `Copy`.\n\nOnly fix regressions to ensure merge in 1.55: Does not modify `vec::IntoIter`.\n\n<hr>\n\nThis PR applies the beta-`1.53` backport #86222 (merged as part of #86225), a reduced version of #85874 that only fixes regressions, to `master` in order to avoid the need for further backports from `1.55` onwards. Beta-`1.54` backport already happened with #87136. In case that #85874 gets merged quickly (within a week), this PR would be unnecessary.\n\nr? `@cuviper`", "tree": {"sha": "88e58ffd03a8620e9c1b11b4b7c817b119c4ddce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e58ffd03a8620e9c1b11b4b7c817b119c4ddce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aece3df81e9ebd8bab3701e12bdb67b68c03564b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+VjsCRBK7hj4Ov3rIwAAg/IIAEy25h3/WFBLi0ISEdySZjI9\ng7vjvSNAN3gO/F41Q52tEzomBYfy/Vf5rZZrSOh4JDqtuGXscrnO/og7QwwfYXqo\nRFphY3HOskvSa3cC1TQWrI1H20eI5xjJkbrFIGU5r8HWEPc2NAFulmhRDVbhr0io\nvVqIzV2zx7HAxHZxdHafeothPCmhuTCxKVxnjeEvU91ovUNBsYxJfz3BEc20UNuS\n2PaNshi71aqsK9DYCIBg7uq7Ok4a8yWXo012XlRXdtppZERrxyf1XK016n0+VZzz\nJIqIja7DMJR7jHnyMykhE9EP8Ac+TZEeo+aebCsZ8/sNFkuxn1PMnNvltONZIJU=\n=4mRC\n-----END PGP SIGNATURE-----\n", "payload": "tree 88e58ffd03a8620e9c1b11b4b7c817b119c4ddce\nparent 90d6d3327d7d40f1f0c8e524c5e40f658070c90f\nparent 1b66a799c7ef707d2cd4b325b654e69bf536c30f\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626953964 +0200\ncommitter GitHub <noreply@github.com> 1626953964 +0200\n\nRollup merge of #87343 - steffahn:fix_unsound_zip_optimization_only_regression_fix, r=cuviper\n\nRegression fix to avoid further beta backports: Remove unsound TrustedRandomAccess implementations\n\nRemoves the implementations that depend on the user-definable trait `Copy`.\n\nOnly fix regressions to ensure merge in 1.55: Does not modify `vec::IntoIter`.\n\n<hr>\n\nThis PR applies the beta-`1.53` backport #86222 (merged as part of #86225), a reduced version of #85874 that only fixes regressions, to `master` in order to avoid the need for further backports from `1.55` onwards. Beta-`1.54` backport already happened with #87136. In case that #85874 gets merged quickly (within a week), this PR would be unnecessary.\n\nr? `@cuviper`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aece3df81e9ebd8bab3701e12bdb67b68c03564b", "html_url": "https://github.com/rust-lang/rust/commit/aece3df81e9ebd8bab3701e12bdb67b68c03564b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aece3df81e9ebd8bab3701e12bdb67b68c03564b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d6d3327d7d40f1f0c8e524c5e40f658070c90f", "html_url": "https://github.com/rust-lang/rust/commit/90d6d3327d7d40f1f0c8e524c5e40f658070c90f"}, {"sha": "1b66a799c7ef707d2cd4b325b654e69bf536c30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b66a799c7ef707d2cd4b325b654e69bf536c30f", "html_url": "https://github.com/rust-lang/rust/commit/1b66a799c7ef707d2cd4b325b654e69bf536c30f"}], "stats": {"total": 56, "additions": 2, "deletions": 54}, "files": [{"sha": "612f7e6eb4da8c213c2c36b93e34c7d905074c29", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aece3df81e9ebd8bab3701e12bdb67b68c03564b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aece3df81e9ebd8bab3701e12bdb67b68c03564b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=aece3df81e9ebd8bab3701e12bdb67b68c03564b", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen};\n \n use super::VecDeque;\n \n@@ -36,23 +36,6 @@ impl<T> Iterator for IntoIter<T> {\n         let len = self.inner.len();\n         (len, Some(len))\n     }\n-\n-    #[inline]\n-    #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n-        // that is in bounds.\n-        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n-        // multiple repeated reads of the same index would be safe and the\n-        // values are !Drop, thus won't suffer from double drops.\n-        unsafe {\n-            let idx = self.inner.wrap_add(self.inner.tail, idx);\n-            self.inner.buffer_read(idx)\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -75,14 +58,3 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for IntoIter<T> {}\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n-// and thus we can't implement drop-handling\n-unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n-where\n-    T: Copy,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = false;\n-}"}, {"sha": "61ab1b1faff89826be67617085c9a6e0def438ae", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aece3df81e9ebd8bab3701e12bdb67b68c03564b/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aece3df81e9ebd8bab3701e12bdb67b68c03564b/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=aece3df81e9ebd8bab3701e12bdb67b68c03564b", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     fmt,\n-    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n+    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n     mem::{self, MaybeUninit},\n     ops::Range,\n     ptr,\n@@ -130,19 +130,6 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n-\n-    #[inline]\n-    #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // SAFETY: Callers are only allowed to pass an index that is in bounds\n-        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n-        // multiple repeated reads of the same index would be safe and the\n-        // values are !Drop, thus won't suffer from double drops.\n-        unsafe { self.data.get_unchecked(self.alive.start + idx).assume_init_read() }\n-    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -197,17 +184,6 @@ impl<T, const N: usize> FusedIterator for IntoIter<T, N> {}\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> {}\n \n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n-// and thus we can't implement drop-handling\n-unsafe impl<T, const N: usize> TrustedRandomAccess for IntoIter<T, N>\n-where\n-    T: Copy,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = false;\n-}\n-\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n     fn clone(&self) -> Self {"}]}