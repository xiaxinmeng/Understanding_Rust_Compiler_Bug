{"sha": "b954d4d1b5a97cf9c13929a742e81035f3158440", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NTRkNGQxYjVhOTdjZjljMTM5MjlhNzQyZTgxMDM1ZjMxNTg0NDA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-22T17:02:41Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-22T17:02:41Z"}, "message": "Rollup merge of #52051 - scottmcm:swap-directly, r=alexcrichton\n\nmem::swap the obvious way for types smaller than the SIMD optimization's block size\n\nLLVM isn't able to remove the alloca for the unaligned block in the post-SIMD tail in some cases, so doing this helps SRoA work in cases where it currently doesn't.  Found in the `replace_with` RFC discussion.\n\nExamples of the improvements:\n<details>\n <summary>swapping `[u16; 3]` takes 1/3 fewer instructions and no stackalloc</summary>\n\n```rust\ntype Demo = [u16; 3];\npub fn swap_demo(x: &mut Demo, y: &mut Demo) {\n    std::mem::swap(x, y);\n}\n```\n\nnightly:\n```asm\n_ZN4blah9swap_demo17ha1732a9b71393a7eE:\n.seh_proc _ZN4blah9swap_demo17ha1732a9b71393a7eE\n\tsub\trsp, 32\n\t.seh_stackalloc 32\n\t.seh_endprologue\n\tmovzx\teax, word ptr [rcx + 4]\n\tmov\tword ptr [rsp + 4], ax\n\tmov\teax, dword ptr [rcx]\n\tmov\tdword ptr [rsp], eax\n\tmovzx\teax, word ptr [rdx + 4]\n\tmov\tword ptr [rcx + 4], ax\n\tmov\teax, dword ptr [rdx]\n\tmov\tdword ptr [rcx], eax\n\tmovzx\teax, word ptr [rsp + 4]\n\tmov\tword ptr [rdx + 4], ax\n\tmov\teax, dword ptr [rsp]\n\tmov\tdword ptr [rdx], eax\n\tadd\trsp, 32\n\tret\n\t.seh_handlerdata\n\t.section\t.text,\"xr\",one_only,_ZN4blah9swap_demo17ha1732a9b71393a7eE\n\t.seh_endproc\n```\n\nthis PR:\n```asm\n_ZN4blah9swap_demo17ha1732a9b71393a7eE:\n\tmov\tr8d, dword ptr [rcx]\n\tmovzx\tr9d, word ptr [rcx + 4]\n\tmovzx\teax, word ptr [rdx + 4]\n\tmov\tword ptr [rcx + 4], ax\n\tmov\teax, dword ptr [rdx]\n\tmov\tdword ptr [rcx], eax\n\tmov\tword ptr [rdx + 4], r9w\n\tmov\tdword ptr [rdx], r8d\n\tret\n```\n</details>\n\n<details>\n <summary>`replace_with` optimizes down much better</summary>\n\nInspired by https://github.com/rust-lang/rfcs/pull/2490,\n\n```rust\nfn replace_with<T, F>(x: &mut Option<T>, f: F)\n    where F: FnOnce(Option<T>) -> Option<T>\n{\n    *x = f(x.take());\n}\n\npub fn inc_opt(mut x: &mut Option<i32>) {\n    replace_with(&mut x, |i| i.map(|j| j + 1));\n}\n```\n\nRust 1.26.0:\n```asm\n_ZN4blah7inc_opt17heb0acb64c51777cfE:\n\tmov\trax, qword ptr [rcx]\n\tmovabs\tr8, 4294967296\n\tadd\tr8, rax\n\tshl\trax, 32\n\tmovabs\trdx, -4294967296\n\tand\trdx, r8\n\txor\tr8d, r8d\n\ttest\trax, rax\n\tcmove\trdx, rax\n\tsetne\tr8b\n\tor\trdx, r8\n\tmov\tqword ptr [rcx], rdx\n\tret\n```\n\nNightly (better thanks to ScalarPair, maybe?):\n```asm\n_ZN4blah7inc_opt17h66df690be0b5899dE:\n\tmov\tr8, qword ptr [rcx]\n\tmov\trdx, r8\n\tshr\trdx, 32\n\txor\teax, eax\n\ttest\tr8d, r8d\n\tsetne\tal\n\tadd\tedx, 1\n\tmov\tdword ptr [rcx], eax\n\tmov\tdword ptr [rcx + 4], edx\n\tret\n```\n\nThis PR:\n```asm\n_ZN4blah7inc_opt17h1426dc215ecbdb19E:\n\txor\teax, eax\n\tcmp\tdword ptr [rcx], 0\n\tsetne\tal\n\tmov\tdword ptr [rcx], eax\n\tadd\tdword ptr [rcx + 4], 1\n\tret\n```\n\nWhere that add is beautiful -- using an addressing mode to not even need to explicitly go through a register -- and the remaining imperfection is well-known (https://github.com/rust-lang/rust/pull/49420#issuecomment-376805721).\n</details>", "tree": {"sha": "c1f4323da1215d5d248af97784d665fa6c0a2394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1f4323da1215d5d248af97784d665fa6c0a2394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b954d4d1b5a97cf9c13929a742e81035f3158440", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltUuM8ACgkQ/vbIBR0O\nATzpxA//ZqW6zIuzZ0p+pngmGS2x0Ko1QI1iott6GsJgGoHJ/H/MjgQLMcVWHHyL\n49wa3lho9YqfHoA7PFQ2mFuC2aPi42vQVN/qx4rbTnPhGmClhrpvs/YZGnyMu/bM\nK4oLr5Hfb/8kZHpf/krgHuTkfUhnw+x65iTfhyjLo59zyLy3m0puFFyZQ1pzsNFF\nsJMDItIYxhw+E0GP5J3KJC3kD2QzAl85mu2MBZS2QFkgNYRtVb6CjmdGuQpL1NBp\nONXuHQpSdyuxx9hDRSzjA4K2PRw6TvMI4in9iTF5ptmoQCs/dejw++i5+ys60M+R\nr1I6QWzL+7jYA+LiViZoQNjz1cbTgQ+R/rJWvk9v89rh8FNtRnquAiT5EHupjyd6\n4qkJgKofJ3XNG3v7zA44+bZOR6tyNvRQNYQhsSStUO1AQE6i/5jPvtwbu3IsxL0Z\nvi1zFyA0fXIu+j5Yr6jYBhEVJHK00vBZ8OwFanA0FRbDs8IFGs7CDHEcPQ0rAJ52\npfuluOTG8Nkdo24bBtnbQjDQV17WWgKtNQN68Eu6hBzuspIQY8k2OkbptabEMdbg\nodVNpB5gqHN0LWdZM1PCeuYnvb2if2uu+y02C3K7blX+ObwbeGCY/F8ZyCMEVNKT\nre+OitX+9fyt25U5KEUaQTofgeniXuVPjBxOr0Xh2TqrMXbm7CY=\n=ao1e\n-----END PGP SIGNATURE-----", "payload": "tree c1f4323da1215d5d248af97784d665fa6c0a2394\nparent 7019ccee93c6d2dfbab572ce5203203c7e52c316\nparent c9482f724f2c6369a56faddd3ba4c1f00545a086\nauthor kennytm <kennytm@gmail.com> 1532278961 +0800\ncommitter kennytm <kennytm@gmail.com> 1532278961 +0800\n\nRollup merge of #52051 - scottmcm:swap-directly, r=alexcrichton\n\nmem::swap the obvious way for types smaller than the SIMD optimization's block size\n\nLLVM isn't able to remove the alloca for the unaligned block in the post-SIMD tail in some cases, so doing this helps SRoA work in cases where it currently doesn't.  Found in the `replace_with` RFC discussion.\n\nExamples of the improvements:\n<details>\n <summary>swapping `[u16; 3]` takes 1/3 fewer instructions and no stackalloc</summary>\n\n```rust\ntype Demo = [u16; 3];\npub fn swap_demo(x: &mut Demo, y: &mut Demo) {\n    std::mem::swap(x, y);\n}\n```\n\nnightly:\n```asm\n_ZN4blah9swap_demo17ha1732a9b71393a7eE:\n.seh_proc _ZN4blah9swap_demo17ha1732a9b71393a7eE\n\tsub\trsp, 32\n\t.seh_stackalloc 32\n\t.seh_endprologue\n\tmovzx\teax, word ptr [rcx + 4]\n\tmov\tword ptr [rsp + 4], ax\n\tmov\teax, dword ptr [rcx]\n\tmov\tdword ptr [rsp], eax\n\tmovzx\teax, word ptr [rdx + 4]\n\tmov\tword ptr [rcx + 4], ax\n\tmov\teax, dword ptr [rdx]\n\tmov\tdword ptr [rcx], eax\n\tmovzx\teax, word ptr [rsp + 4]\n\tmov\tword ptr [rdx + 4], ax\n\tmov\teax, dword ptr [rsp]\n\tmov\tdword ptr [rdx], eax\n\tadd\trsp, 32\n\tret\n\t.seh_handlerdata\n\t.section\t.text,\"xr\",one_only,_ZN4blah9swap_demo17ha1732a9b71393a7eE\n\t.seh_endproc\n```\n\nthis PR:\n```asm\n_ZN4blah9swap_demo17ha1732a9b71393a7eE:\n\tmov\tr8d, dword ptr [rcx]\n\tmovzx\tr9d, word ptr [rcx + 4]\n\tmovzx\teax, word ptr [rdx + 4]\n\tmov\tword ptr [rcx + 4], ax\n\tmov\teax, dword ptr [rdx]\n\tmov\tdword ptr [rcx], eax\n\tmov\tword ptr [rdx + 4], r9w\n\tmov\tdword ptr [rdx], r8d\n\tret\n```\n</details>\n\n<details>\n <summary>`replace_with` optimizes down much better</summary>\n\nInspired by https://github.com/rust-lang/rfcs/pull/2490,\n\n```rust\nfn replace_with<T, F>(x: &mut Option<T>, f: F)\n    where F: FnOnce(Option<T>) -> Option<T>\n{\n    *x = f(x.take());\n}\n\npub fn inc_opt(mut x: &mut Option<i32>) {\n    replace_with(&mut x, |i| i.map(|j| j + 1));\n}\n```\n\nRust 1.26.0:\n```asm\n_ZN4blah7inc_opt17heb0acb64c51777cfE:\n\tmov\trax, qword ptr [rcx]\n\tmovabs\tr8, 4294967296\n\tadd\tr8, rax\n\tshl\trax, 32\n\tmovabs\trdx, -4294967296\n\tand\trdx, r8\n\txor\tr8d, r8d\n\ttest\trax, rax\n\tcmove\trdx, rax\n\tsetne\tr8b\n\tor\trdx, r8\n\tmov\tqword ptr [rcx], rdx\n\tret\n```\n\nNightly (better thanks to ScalarPair, maybe?):\n```asm\n_ZN4blah7inc_opt17h66df690be0b5899dE:\n\tmov\tr8, qword ptr [rcx]\n\tmov\trdx, r8\n\tshr\trdx, 32\n\txor\teax, eax\n\ttest\tr8d, r8d\n\tsetne\tal\n\tadd\tedx, 1\n\tmov\tdword ptr [rcx], eax\n\tmov\tdword ptr [rcx + 4], edx\n\tret\n```\n\nThis PR:\n```asm\n_ZN4blah7inc_opt17h1426dc215ecbdb19E:\n\txor\teax, eax\n\tcmp\tdword ptr [rcx], 0\n\tsetne\tal\n\tmov\tdword ptr [rcx], eax\n\tadd\tdword ptr [rcx + 4], 1\n\tret\n```\n\nWhere that add is beautiful -- using an addressing mode to not even need to explicitly go through a register -- and the remaining imperfection is well-known (https://github.com/rust-lang/rust/pull/49420#issuecomment-376805721).\n</details>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b954d4d1b5a97cf9c13929a742e81035f3158440", "html_url": "https://github.com/rust-lang/rust/commit/b954d4d1b5a97cf9c13929a742e81035f3158440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b954d4d1b5a97cf9c13929a742e81035f3158440/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7019ccee93c6d2dfbab572ce5203203c7e52c316", "url": "https://api.github.com/repos/rust-lang/rust/commits/7019ccee93c6d2dfbab572ce5203203c7e52c316", "html_url": "https://github.com/rust-lang/rust/commit/7019ccee93c6d2dfbab572ce5203203c7e52c316"}, {"sha": "c9482f724f2c6369a56faddd3ba4c1f00545a086", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9482f724f2c6369a56faddd3ba4c1f00545a086", "html_url": "https://github.com/rust-lang/rust/commit/c9482f724f2c6369a56faddd3ba4c1f00545a086"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "a0fe6e98806062059136688fc77f9374ecfde8b5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b954d4d1b5a97cf9c13929a742e81035f3158440/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b954d4d1b5a97cf9c13929a742e81035f3158440/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b954d4d1b5a97cf9c13929a742e81035f3158440", "patch": "@@ -638,7 +638,7 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        ptr::swap_nonoverlapping(x, y, 1);\n+        ptr::swap_nonoverlapping_one(x, y);\n     }\n }\n "}, {"sha": "d020e14be4cbdd8a6dba3e445e6af0e08dc4404e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b954d4d1b5a97cf9c13929a742e81035f3158440/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b954d4d1b5a97cf9c13929a742e81035f3158440/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b954d4d1b5a97cf9c13929a742e81035f3158440", "patch": "@@ -187,6 +187,19 @@ pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     swap_nonoverlapping_bytes(x, y, len)\n }\n \n+#[inline]\n+pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+    // For types smaller than the block optimization below,\n+    // just swap directly to avoid pessimizing codegen.\n+    if mem::size_of::<T>() < 32 {\n+        let z = read(x);\n+        copy_nonoverlapping(y, x, 1);\n+        write(y, z);\n+    } else {\n+        swap_nonoverlapping(x, y, 1);\n+    }\n+}\n+\n #[inline]\n unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // The approach here is to utilize simd to swap x & y efficiently. Testing reveals"}, {"sha": "46406ee5182a732f2bb07386e04ede9f82428d0f", "filename": "src/test/codegen/swap-small-types.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b954d4d1b5a97cf9c13929a742e81035f3158440/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b954d4d1b5a97cf9c13929a742e81035f3158440/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fswap-small-types.rs?ref=b954d4d1b5a97cf9c13929a742e81035f3158440", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+\n+use std::mem::swap;\n+\n+type RGB48 = [u16; 3];\n+\n+// CHECK-LABEL: @swap_rgb48\n+#[no_mangle]\n+pub fn swap_rgb48(x: &mut RGB48, y: &mut RGB48) {\n+// CHECK-NOT: alloca\n+// CHECK: load i48\n+// CHECK: store i48\n+    swap(x, y)\n+}"}]}