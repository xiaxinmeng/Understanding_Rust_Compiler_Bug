{"sha": "d22acb77b219f1abe7265ea3a6d88017523a2d7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMmFjYjc3YjIxOWYxYWJlNzI2NWVhM2E2ZDg4MDE3NTIzYTJkN2U=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T19:28:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libstd: fix fallout", "tree": {"sha": "b4fc9a578ce2091bf89c0ce113f8face1a901425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4fc9a578ce2091bf89c0ce113f8face1a901425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d22acb77b219f1abe7265ea3a6d88017523a2d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d22acb77b219f1abe7265ea3a6d88017523a2d7e", "html_url": "https://github.com/rust-lang/rust/commit/d22acb77b219f1abe7265ea3a6d88017523a2d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d22acb77b219f1abe7265ea3a6d88017523a2d7e/comments", "author": null, "committer": null, "parents": [{"sha": "0fcd73037358b5f39276cf48f600299c44c7ccec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcd73037358b5f39276cf48f600299c44c7ccec", "html_url": "https://github.com/rust-lang/rust/commit/0fcd73037358b5f39276cf48f600299c44c7ccec"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "97e0518a072cd958f0d0726aec5184e41f37ef28", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d22acb77b219f1abe7265ea3a6d88017523a2d7e", "patch": "@@ -852,7 +852,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn keys(&self) -> Keys<K, V> {\n-        self.iter().map(|(k, _v)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.iter().map(first)\n     }\n \n     /// An iterator visiting all values in arbitrary order.\n@@ -874,7 +876,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn values(&self) -> Values<K, V> {\n-        self.iter().map(|(_k, v)| v)\n+        fn second<A, B>((_, b): (A, B)) -> B { b }\n+\n+        self.iter().map(second)\n     }\n \n     /// An iterator visiting all key-value pairs in arbitrary order.\n@@ -946,8 +950,10 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn into_iter(self) -> MoveEntries<K, V> {\n+        fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n+\n         MoveEntries {\n-            inner: self.table.into_iter().map(|(_, k, v)| (k, v))\n+            inner: self.table.into_iter().map(last_two)\n         }\n     }\n \n@@ -1316,7 +1322,12 @@ pub struct MutEntries<'a, K: 'a, V: 'a> {\n \n /// HashMap move iterator\n pub struct MoveEntries<K, V> {\n-    inner: iter::Map<'static, (SafeHash, K, V), (K, V), table::MoveEntries<K, V>>\n+    inner: iter::Map<\n+        (SafeHash, K, V),\n+        (K, V),\n+        table::MoveEntries<K, V>,\n+        fn((SafeHash, K, V)) -> (K, V),\n+    >\n }\n \n /// A view into a single occupied location in a HashMap\n@@ -1434,11 +1445,11 @@ impl<'a, K, V> VacantEntry<'a, K, V> {\n \n /// HashMap keys iterator\n pub type Keys<'a, K, V> =\n-    iter::Map<'static, (&'a K, &'a V), &'a K, Entries<'a, K, V>>;\n+    iter::Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>;\n \n /// HashMap values iterator\n pub type Values<'a, K, V> =\n-    iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n+    iter::Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>;\n \n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n     fn from_iter<T: Iterator<(K, V)>>(iter: T) -> HashMap<K, V, H> {"}, {"sha": "5db7bd7fc48d83ca1ced0f241ce9f3af20f555a4", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=d22acb77b219f1abe7265ea3a6d88017523a2d7e", "patch": "@@ -277,7 +277,9 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn into_iter(self) -> SetMoveItems<T> {\n-        self.map.into_iter().map(|(k, _)| k)\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+\n+        self.map.into_iter().map(first)\n     }\n \n     /// Visit the values representing the difference.\n@@ -611,11 +613,10 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n \n /// HashSet iterator\n pub type SetItems<'a, K> =\n-    iter::Map<'static, (&'a K, &'a ()), &'a K, Entries<'a, K, ()>>;\n+    iter::Map<(&'a K, &'a ()), &'a K, Entries<'a, K, ()>, fn((&'a K, &'a ())) -> &'a K>;\n \n /// HashSet move iterator\n-pub type SetMoveItems<K> =\n-    iter::Map<'static, (K, ()), K, MoveEntries<K, ()>>;\n+pub type SetMoveItems<K> = iter::Map<(K, ()), K, MoveEntries<K, ()>, fn((K, ())) -> K>;\n \n // `Repeat` is used to feed the filter closure an explicit capture\n // of a reference to the other set"}, {"sha": "6cafedcad116ddeddc3ed74237c92ee60de96901", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=d22acb77b219f1abe7265ea3a6d88017523a2d7e", "patch": "@@ -32,8 +32,8 @@ use super::{BytesContainer, GenericPath, GenericPathUnsafe};\n pub type Components<'a> = Splits<'a, u8>;\n \n /// Iterator that yields successive components of a Path as Option<&str>\n-pub type StrComponents<'a> = Map<'a, &'a [u8], Option<&'a str>,\n-                                       Components<'a>>;\n+pub type StrComponents<'a> =\n+    Map<&'a [u8], Option<&'a str>, Components<'a>, fn(&[u8]) -> Option<&str>>;\n \n /// Represents a POSIX file path\n #[deriving(Clone)]"}, {"sha": "c3242c9cead41c7084d2d11005200376f7ee44eb", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22acb77b219f1abe7265ea3a6d88017523a2d7e/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=d22acb77b219f1abe7265ea3a6d88017523a2d7e", "patch": "@@ -38,12 +38,12 @@ use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};\n ///\n /// Each component is yielded as Option<&str> for compatibility with PosixPath, but\n /// every component in WindowsPath is guaranteed to be Some.\n-pub type StrComponents<'a> = Map<'a, &'a str, Option<&'a str>,\n-                                       CharSplits<'a, char>>;\n+pub type StrComponents<'a> =\n+    Map<&'a str, Option<&'a str>, CharSplits<'a, char>, fn(&'a str) -> Option<&'a str>>;\n \n /// Iterator that yields successive components of a Path as &[u8]\n-pub type Components<'a> = Map<'a, Option<&'a str>, &'a [u8],\n-                                    StrComponents<'a>>;\n+pub type Components<'a> =\n+    Map<Option<&'a str>, &'a [u8], StrComponents<'a>, fn(Option<&str>) -> &[u8]>;\n \n /// Represents a Windows path\n // Notes for Windows path impl:"}]}