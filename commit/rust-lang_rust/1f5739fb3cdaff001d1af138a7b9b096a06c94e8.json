{"sha": "1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNTczOWZiM2NkYWZmMDAxZDFhZjEzOGE3YjliMDk2YTA2Yzk0ZTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-12T18:25:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:40Z"}, "message": "Switch shuffle intrinsics to arrays of indices.\n\nFormat:\n\n    fn shuffle_simdNNN<T, U>(x: T, y: T, idx: [u32; NNN]) -> U;", "tree": {"sha": "5ce82107ef5f526cb94a8046956150616861d1c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ce82107ef5f526cb94a8046956150616861d1c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "html_url": "https://github.com/rust-lang/rust/commit/1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5739fb3cdaff001d1af138a7b9b096a06c94e8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2115468f3363362e3c23b0aeb088cd8d39f6f2a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2115468f3363362e3c23b0aeb088cd8d39f6f2a6", "html_url": "https://github.com/rust-lang/rust/commit/2115468f3363362e3c23b0aeb088cd8d39f6f2a6"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "e076e376b0907db1ef299d2339668ef1dfe1cc50", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1f5739fb3cdaff001d1af138a7b9b096a06c94e8/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5739fb3cdaff001d1af138a7b9b096a06c94e8/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "patch": "@@ -12,6 +12,7 @@\n \n use arena::TypedArena;\n use intrinsics::{self, Intrinsic};\n+use libc;\n use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef, TypeKind};\n use middle::subst;\n@@ -24,6 +25,7 @@ use trans::callee;\n use trans::cleanup;\n use trans::cleanup::CleanupMethods;\n use trans::common::*;\n+use trans::consts;\n use trans::datum::*;\n use trans::debuginfo::DebugLoc;\n use trans::declare;\n@@ -38,6 +40,7 @@ use middle::ty::{self, Ty, HasTypeFlags};\n use middle::subst::Substs;\n use syntax::abi::{self, RustIntrinsic};\n use syntax::ast;\n+use syntax::ptr::P;\n use syntax::parse::token;\n \n pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Option<ValueRef> {\n@@ -343,6 +346,13 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n     }\n \n+    // save the actual AST arguments for later (some places need to do\n+    // const-evaluation on them)\n+    let expr_arguments = match args {\n+        callee::ArgExprs(args) => Some(args),\n+        _ => None,\n+    };\n+\n     // Push the arguments.\n     let mut llargs = Vec::new();\n     bcx = callee::trans_args(bcx,\n@@ -805,6 +815,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             generic_simd_intrinsic(bcx, name,\n                                    substs,\n                                    callee_ty,\n+                                   expr_arguments,\n                                    &llargs,\n                                    ret_ty, llret_ty,\n                                    call_debug_location,\n@@ -1307,15 +1318,18 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     return rust_try\n }\n \n-fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                      name: &str,\n-                                      _substs: subst::Substs<'tcx>,\n-                                      callee_ty: Ty<'tcx>,\n-                                      llargs: &[ValueRef],\n-                                      ret_ty: Ty<'tcx>,\n-                                      llret_ty: Type,\n-                                      call_debug_location: DebugLoc,\n-                                      call_info: NodeIdAndSpan) -> ValueRef {\n+fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n+    (bcx: Block<'blk, 'tcx>,\n+     name: &str,\n+     substs: subst::Substs<'tcx>,\n+     callee_ty: Ty<'tcx>,\n+     args: Option<&[P<ast::Expr>]>,\n+     llargs: &[ValueRef],\n+     ret_ty: Ty<'tcx>,\n+     llret_ty: Type,\n+     call_debug_location: DebugLoc,\n+     call_info: NodeIdAndSpan) -> ValueRef\n+{\n     let tcx = bcx.tcx();\n     let arg_tys = match callee_ty.sty {\n         ty::TyBareFn(_, ref f) => {\n@@ -1376,7 +1390,6 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             Err(_) => tcx.sess.span_bug(call_info.span,\n                                           \"bad `simd_shuffle` instruction only caught in trans?\")\n         };\n-        assert_eq!(llargs.len(), 2 + n);\n \n         require!(arg_tys[0] == arg_tys[1],\n                  \"SIMD shuffle intrinsic monomorphised with different input types\");\n@@ -1394,12 +1407,18 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         let total_len = in_len as u64 * 2;\n \n-        let indices: Option<Vec<_>> = llargs[2..]\n-            .iter()\n-            .enumerate()\n-            .map(|(i, val)| {\n-                let arg_idx = i + 2;\n-                let c = const_to_opt_uint(*val);\n+        let vector = match args {\n+            Some(args) => &args[2],\n+            None => bcx.sess().span_bug(call_info.span,\n+                                        \"intrinsic call with unexpected argument shape\"),\n+        };\n+        let vector = consts::const_expr(bcx.ccx(), vector, tcx.mk_substs(substs), None).0;\n+\n+        let indices: Option<Vec<_>> = (0..n)\n+            .map(|i| {\n+                let arg_idx = i;\n+                let val = const_get_elt(bcx.ccx(), vector, &[i as libc::c_uint]);\n+                let c = const_to_opt_uint(val);\n                 match c {\n                     None => {\n                         bcx.sess().span_err(call_info.span,"}, {"sha": "8b5fbcd02f55270b033e05759a903e6117fa3b7a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5739fb3cdaff001d1af138a7b9b096a06c94e8/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5739fb3cdaff001d1af138a7b9b096a06c94e8/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "patch": "@@ -21,7 +21,6 @@ use middle::ty_fold::TypeFolder;\n use {CrateCtxt, require_same_types};\n \n use std::collections::{HashMap};\n-use std::iter;\n use syntax::abi;\n use syntax::attr::AttrMetaMethods;\n use syntax::ast;\n@@ -387,8 +386,8 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n         name if name.starts_with(\"simd_shuffle\") => {\n             match name[\"simd_shuffle\".len()..].parse() {\n                 Ok(n) => {\n-                    let mut params = vec![param(0), param(0)];\n-                    params.extend(iter::repeat(tcx.types.u32).take(n));\n+                    let params = vec![param(0), param(0),\n+                                      tcx.mk_ty(ty::TyArray(tcx.types.u32, n))];\n \n                     let ictxt = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n                     let ret = ictxt.next_ty_var();"}]}