{"sha": "7f567ce1d18a3d4579567fae33bfceaa0b18a9ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTY3Y2UxZDE4YTNkNDU3OTU2N2ZhZTMzYmZjZWFhMGIxOGE5ZmY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T00:38:55Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T00:38:55Z"}, "message": "Fix false negative with OK_EXPECT", "tree": {"sha": "81294edcd9a2659fab0f8cabd7e3002f70ba73ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81294edcd9a2659fab0f8cabd7e3002f70ba73ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff", "html_url": "https://github.com/rust-lang/rust/commit/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b7b413f7e89be6879ea99c3aefc76c41416e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b7b413f7e89be6879ea99c3aefc76c41416e87", "html_url": "https://github.com/rust-lang/rust/commit/17b7b413f7e89be6879ea99c3aefc76c41416e87"}], "stats": {"total": 29, "additions": 6, "deletions": 23}, "files": [{"sha": "175e3b5c03336739f6ad63f24e5262d1996cdd99", "filename": "src/methods.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=7f567ce1d18a3d4579567fae33bfceaa0b18a9ff", "patch": "@@ -274,7 +274,6 @@ declare_lint! {\n ///    println!(\"{:p} {:p}\",*y, z); // prints out the same pointer\n /// }\n /// ```\n-/// \n declare_lint! {\n     pub CLONE_DOUBLE_REF, Warn, \"using `clone` on `&&T`\"\n }\n@@ -789,26 +788,12 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n     None\n }\n \n-/// This checks whether a given type is known to implement Debug. It's\n-/// conservative, i.e. it should not return false positives, but will return\n-/// false negatives.\n+/// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'a, 'b>(ty: ty::Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n-    let no_ref_ty = walk_ptrs_ty(ty);\n-    let debug = match cx.tcx.lang_items.debug_trait() {\n-        Some(debug) => debug,\n-        None => return false,\n-    };\n-    let debug_def = cx.tcx.lookup_trait_def(debug);\n-    let mut debug_impl_exists = false;\n-    debug_def.for_each_relevant_impl(cx.tcx, no_ref_ty, |d| {\n-        let self_ty = &cx.tcx.impl_trait_ref(d).and_then(|im| im.substs.self_ty());\n-        if let Some(self_ty) = *self_ty {\n-            if !self_ty.flags.get().contains(ty::TypeFlags::HAS_PARAMS) {\n-                debug_impl_exists = true;\n-            }\n-        }\n-    });\n-    debug_impl_exists\n+    match cx.tcx.lang_items.debug_trait() {\n+        Some(debug) => implements_trait(cx, ty, debug, Some(vec![])),\n+        None => false,\n+    }\n }\n \n #[cfg_attr(rustfmt, rustfmt_skip)]"}, {"sha": "043f9e7bcace375c9c877c2cb189a9c951a8b97c", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f567ce1d18a3d4579567fae33bfceaa0b18a9ff/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=7f567ce1d18a3d4579567fae33bfceaa0b18a9ff", "patch": "@@ -274,10 +274,8 @@ fn main() {\n     // the error type implements `Debug`\n     let res2: Result<i32, MyError> = Ok(0);\n     res2.ok().expect(\"oh noes!\");\n-    // we currently don't warn if the error type has a type parameter\n-    // (but it would be nice if we did)\n     let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n-    res3.ok().expect(\"whoof\");\n+    res3.ok().expect(\"whoof\"); //~ERROR called `ok().expect()`\n     let res4: Result<u32, io::Error> = Ok(0);\n     res4.ok().expect(\"argh\"); //~ERROR called `ok().expect()`\n     let res5: io::Result<u32> = Ok(0);"}]}