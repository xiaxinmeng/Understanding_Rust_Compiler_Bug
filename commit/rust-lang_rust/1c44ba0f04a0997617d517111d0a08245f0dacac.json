{"sha": "1c44ba0f04a0997617d517111d0a08245f0dacac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNDRiYTBmMDRhMDk5NzYxN2Q1MTcxMTFkMGEwODI0NWYwZGFjYWM=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-21T19:11:27Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T19:03:14Z"}, "message": "simplify newline check with macro", "tree": {"sha": "bf5d373e350ab60ea56cf0b84d1dbf6aa6679124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf5d373e350ab60ea56cf0b84d1dbf6aa6679124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c44ba0f04a0997617d517111d0a08245f0dacac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c44ba0f04a0997617d517111d0a08245f0dacac", "html_url": "https://github.com/rust-lang/rust/commit/1c44ba0f04a0997617d517111d0a08245f0dacac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c44ba0f04a0997617d517111d0a08245f0dacac/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6312085a1ac97030fa768366585b9cfb6c955cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6312085a1ac97030fa768366585b9cfb6c955cd", "html_url": "https://github.com/rust-lang/rust/commit/d6312085a1ac97030fa768366585b9cfb6c955cd"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "2dd7fd70866f625ceeb1a0dd17067302d4553c1e", "filename": "crates/ra_editor/src/line_index_utils.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c44ba0f04a0997617d517111d0a08245f0dacac/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c44ba0f04a0997617d517111d0a08245f0dacac/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs?ref=1c44ba0f04a0997617d517111d0a08245f0dacac", "patch": "@@ -143,35 +143,33 @@ pub fn count_newlines(offset: TextUnit, line_index: &LineIndex, edits: &[AtomTex\n \n     let mut lines: u32 = 0;\n \n+    macro_rules! test_newline {\n+        ($x:ident) => {\n+            if offset < $x {\n+                return lines;\n+            } else {\n+                lines += 1;\n+            }\n+        };\n+    }\n+\n     for &orig_newline in line_index.newlines() {\n         loop {\n             let translated_newline = state.translate(orig_newline);\n             match state.next_newlines(translated_newline) {\n                 NextNewlines::Use => {\n-                    if offset < translated_newline {\n-                        return lines;\n-                    } else {\n-                        lines += 1;\n-                    }\n+                    test_newline!(translated_newline);\n                     break;\n                 }\n                 NextNewlines::ReplaceMany(ns) => {\n                     for n in ns {\n-                        if offset < n {\n-                            return lines;\n-                        } else {\n-                            lines += 1;\n-                        }\n+                        test_newline!(n);\n                     }\n                     break;\n                 }\n                 NextNewlines::AddMany(ns) => {\n                     for n in ns {\n-                        if offset < n {\n-                            return lines;\n-                        } else {\n-                            lines += 1;\n-                        }\n+                        test_newline!(n);\n                     }\n                 }\n             }\n@@ -183,11 +181,7 @@ pub fn count_newlines(offset: TextUnit, line_index: &LineIndex, edits: &[AtomTex\n             None => break,\n             Some(ns) => {\n                 for n in ns {\n-                    if offset < n {\n-                        return lines;\n-                    } else {\n-                        lines += 1;\n-                    }\n+                    test_newline!(n);\n                 }\n             }\n         }"}]}