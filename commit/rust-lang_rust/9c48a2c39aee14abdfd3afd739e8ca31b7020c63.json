{"sha": "9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDhhMmMzOWFlZTE0YWJkZmQzYWZkNzM5ZThjYTMxYjcwMjBjNjM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-08T05:15:16Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-08T05:15:16Z"}, "message": "Merge branch 'master' into fix-4727", "tree": {"sha": "80dd2374ccdc805baf96a9731be381c6c0f91895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80dd2374ccdc805baf96a9731be381c6c0f91895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "html_url": "https://github.com/rust-lang/rust/commit/9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/comments", "author": null, "committer": null, "parents": [{"sha": "e3c1aea1578f644d22c909e4c91792919a3ed053", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c1aea1578f644d22c909e4c91792919a3ed053", "html_url": "https://github.com/rust-lang/rust/commit/e3c1aea1578f644d22c909e4c91792919a3ed053"}, {"sha": "4192dbedcbcaed7f9329e1a45085ce4ff4c2170b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4192dbedcbcaed7f9329e1a45085ce4ff4c2170b", "html_url": "https://github.com/rust-lang/rust/commit/4192dbedcbcaed7f9329e1a45085ce4ff4c2170b"}], "stats": {"total": 747, "additions": 417, "deletions": 330}, "files": [{"sha": "b07ebe501c7697ec71245c7d287e6675fe2ac6c3", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -56,15 +56,15 @@ matrix:\n     # We don't want to run these always because they go towards\n     # the build limit within the Travis rust-lang account.\n     # The jobs are approximately sorted by execution time\n+    - env: INTEGRATION=rust-lang/rls\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang/cargo\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/chalk\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    - env: INTEGRATION=rust-lang/rls\n-      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=Geal/nom\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    # FIXME blocked on https://github.com/rust-lang/rust-clippy/issues/4742\n+    # FIXME blocked on https://github.com/rust-lang/rust-clippy/issues/4727\n     #- env: INTEGRATION=rust-lang/rustfmt\n     #  if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=hyperium/hyper\n@@ -90,7 +90,6 @@ matrix:\n   allow_failures:\n     - os: windows\n       env: CARGO_INCREMENTAL=0 OS_WINDOWS=true\n-    - env: INTEGRATION=rust-lang-nursery/stdsimd\n \n before_script:\n   - |"}, {"sha": "84a3bd491cb829a842872231b0e67b9b77118109", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -996,6 +996,7 @@ Released 2018-09-13\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n+[`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop"}, {"sha": "608fb668c5ae0312e1089399d5311693e26bb108", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -18,20 +18,21 @@ edition = \"2018\"\n \n [dependencies]\n cargo_metadata = \"0.9.0\"\n+if_chain = \"1.0.0\"\n itertools = \"0.8\"\n lazy_static = \"1.0.2\"\n matches = \"0.1.7\"\n+pulldown-cmark = \"0.6.0\"\n quine-mc_cluskey = \"0.2.2\"\n regex-syntax = \"0.6\"\n-semver = \"0.9.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n+smallvec = { version = \"1\", features = [\"union\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n-pulldown-cmark = \"0.6.0\"\n-url = { version =  \"2.1.0\", features = [\"serde\"] } # cargo requires serde feat in its url dep\n-# see https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864\n-if_chain = \"1.0.0\"\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+semver = \"0.9.0\"\n+# NOTE: cargo requires serde feat in its url dep\n+# see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n+url = { version =  \"2.1.0\", features = [\"serde\"] }\n \n [features]\n debugging = []"}, {"sha": "fac75cffeba6facee676ca726443594f747f0d81", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use std::f64::consts as f64;\n-use syntax::ast::{FloatTy, LitKind};\n+use syntax::ast::{FloatTy, LitFloatType, LitKind};\n use syntax::symbol;\n \n declare_clippy_lint! {\n@@ -62,9 +62,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ApproxConstant {\n \n fn check_lit(cx: &LateContext<'_, '_>, lit: &LitKind, e: &Expr) {\n     match *lit {\n-        LitKind::Float(s, FloatTy::F32) => check_known_consts(cx, e, s, \"f32\"),\n-        LitKind::Float(s, FloatTy::F64) => check_known_consts(cx, e, s, \"f64\"),\n-        LitKind::FloatUnsuffixed(s) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n+        LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n+            FloatTy::F32 => check_known_consts(cx, e, s, \"f32\"),\n+            FloatTy::F64 => check_known_consts(cx, e, s, \"f64\"),\n+        },\n+        LitKind::Float(s, LitFloatType::Unsuffixed) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n         _ => (),\n     }\n }"}, {"sha": "06df8504def993703ac3bd76a20d37c9f943400a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -15,7 +15,7 @@ use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use semver::Version;\n-use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n+use syntax::ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use syntax::source_map::Span;\n use syntax_pos::symbol::Symbol;\n \n@@ -417,11 +417,14 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n     }\n \n     for attr in attrs {\n-        if attr.is_sugared_doc {\n-            return;\n-        }\n+        let attr_item = if let AttrKind::Normal(ref attr) = attr.kind {\n+            attr\n+        } else {\n+            continue;\n+        };\n+\n         if attr.style == AttrStyle::Outer {\n-            if attr.tokens.is_empty() || !is_present_in_source(cx, attr.span) {\n+            if attr_item.tokens.is_empty() || !is_present_in_source(cx, attr.span) {\n                 return;\n             }\n "}, {"sha": "fc5c8b2e379de9b04b050651a2e4b0fc3507f34e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -161,9 +161,11 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n         LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n-        LitKind::Float(ref is, FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),\n-        LitKind::Float(ref is, FloatTy::F64) => Constant::F64(is.as_str().parse().unwrap()),\n-        LitKind::FloatUnsuffixed(ref is) => match ty.expect(\"type of float is known\").kind {\n+        LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {\n+            FloatTy::F32 => Constant::F32(is.as_str().parse().unwrap()),\n+            FloatTy::F64 => Constant::F64(is.as_str().parse().unwrap()),\n+        },\n+        LitKind::Float(ref is, LitFloatType::Unsuffixed) => match ty.expect(\"type of float is known\").kind {\n             ty::Float(FloatTy::F32) => Constant::F32(is.as_str().parse().unwrap()),\n             ty::Float(FloatTy::F64) => Constant::F64(is.as_str().parse().unwrap()),\n             _ => bug!(),"}, {"sha": "f399b4a78c6d4eaea851f836f7d45d164a9627ab", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 70, "deletions": 62, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -4,129 +4,137 @@ macro_rules! declare_deprecated_lint {\n     }\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n-/// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n+    /// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n     pub SHOULD_ASSERT_EQ,\n     \"`assert!()` will be more flexible with RFC 2011\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n-/// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n+    /// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n     pub EXTEND_FROM_SLICE,\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n-/// an infinite iterator, which is better expressed by `iter::repeat`,\n-/// but the method has been removed for `Iterator::step_by` which panics\n-/// if given a zero\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n+    /// an infinite iterator, which is better expressed by `iter::repeat`,\n+    /// but the method has been removed for `Iterator::step_by` which panics\n+    /// if given a zero\n     pub RANGE_STEP_BY_ZERO,\n     \"`iterator.step_by(0)` panics nowadays\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n-/// stable alternatives. `Vec::as_slice` has now been stabilized.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n+    /// stable alternatives. `Vec::as_slice` has now been stabilized.\n     pub UNSTABLE_AS_SLICE,\n     \"`Vec::as_slice` has been stabilized in 1.7\"\n }\n \n-\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n-/// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n+    /// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n     pub UNSTABLE_AS_MUT_SLICE,\n     \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-/// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n-/// specialized to be as efficient as `to_owned`.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+    /// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n+    /// specialized to be as efficient as `to_owned`.\n     pub STR_TO_STRING,\n     \"using `str::to_string` is common even today and specialization will likely happen soon\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-/// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n-/// specialized to be as efficient as `clone`.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+    /// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n+    /// specialized to be as efficient as `clone`.\n     pub STRING_TO_STRING,\n     \"using `string::to_string` is common even today and specialization will likely happen soon\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n-/// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n-/// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n-/// cast_ptr_alignment and transmute_ptr_to_ptr.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n+    /// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n+    /// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n+    /// cast_ptr_alignment and transmute_ptr_to_ptr.\n     pub MISALIGNED_TRANSMUTE,\n     \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint is too subjective, not having a good reason for being in clippy.\n-/// Additionally, compound assignment operators may be overloaded separately from their non-assigning\n-/// counterparts, so this lint may suggest a change in behavior or the code may not compile.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint is too subjective, not having a good reason for being in clippy.\n+    /// Additionally, compound assignment operators may be overloaded separately from their non-assigning\n+    /// counterparts, so this lint may suggest a change in behavior or the code may not compile.\n     pub ASSIGN_OPS,\n     \"using compound assignment operators (e.g., `+=`) is harmless\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** The original rule will only lint for `if let`. After\n-/// making it support to lint `match`, naming as `if let` is not suitable for it.\n-/// So, this lint is deprecated.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The original rule will only lint for `if let`. After\n+    /// making it support to lint `match`, naming as `if let` is not suitable for it.\n+    /// So, this lint is deprecated.\n     pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n     \"this lint has been changed to redundant_pattern_matching\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n-/// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n-/// replacement has very different performance characteristics so the lint is\n-/// deprecated.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n+    /// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n+    /// replacement has very different performance characteristics so the lint is\n+    /// deprecated.\n     pub UNSAFE_VECTOR_INITIALIZATION,\n     \"the replacement suggested by this lint had substantially different behavior\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint has been superseded by the warn-by-default\n-/// `invalid_value` rustc lint.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been superseded by the warn-by-default\n+    /// `invalid_value` rustc lint.\n     pub INVALID_REF,\n     \"superseded by rustc lint `invalid_value`\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n     pub UNUSED_COLLECT,\n     \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `array_into_iter`.\n+    pub INTO_ITER_ON_ARRAY,\n+    \"this lint has been uplifted to rustc and is now called `array_into_iter`\"\n+}"}, {"sha": "aca4d176724ff793156e6e73d4392d05a800498c", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use std::ops::Range;\n-use syntax::ast::Attribute;\n+use syntax::ast::{AttrKind, Attribute};\n use syntax::source_map::{BytePos, Span};\n use syntax_pos::Pos;\n use url::Url;\n@@ -247,13 +247,11 @@ pub fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String\n     let mut spans = vec![];\n \n     for attr in attrs {\n-        if attr.is_sugared_doc {\n-            if let Some(ref current) = attr.value_str() {\n-                let current = current.to_string();\n-                let (current, current_spans) = strip_doc_comment_decoration(&current, attr.span);\n-                spans.extend_from_slice(&current_spans);\n-                doc.push_str(&current);\n-            }\n+        if let AttrKind::DocComment(ref comment) = attr.kind {\n+            let comment = comment.to_string();\n+            let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n+            spans.extend_from_slice(&current_spans);\n+            doc.push_str(&comment);\n         } else if attr.check_name(sym!(doc)) {\n             // ignore mix of sugared and non-sugared doc\n             return true; // don't trigger the safety check"}, {"sha": "8027a736c6b45ac9562dcb487986856c4886ac8c", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n             let ty = cx.tables.expr_ty(expr);\n             if let ty::Float(fty) = ty.kind;\n             if let hir::ExprKind::Lit(ref lit) = expr.kind;\n-            if let LitKind::Float(sym, _) | LitKind::FloatUnsuffixed(sym) = lit.node;\n+            if let LitKind::Float(sym, _) = lit.node;\n             if let Some(sugg) = Self::check(sym, fty);\n             then {\n                 span_lint_and_sugg("}, {"sha": "986c3d97b58b04e3909250fb3d1073a0eb9b79c7", "filename": "clippy_lints/src/exit.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,47 @@\n+use crate::utils::{is_entrypoint_fn, match_def_path, paths, qpath_res, span_lint};\n+use if_chain::if_chain;\n+use rustc::hir::{Expr, ExprKind, Item, ItemKind, Node};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** `exit()`  terminates the program and doesn't provide a\n+    /// stack trace.\n+    ///\n+    /// **Why is this bad?** Ideally a program is terminated by finishing\n+    /// the main function.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// std::process::exit(0)\n+    /// ```\n+    pub EXIT,\n+    restriction,\n+    \"`std::process::exit` is called, terminating the program\"\n+}\n+\n+declare_lint_pass!(Exit => [EXIT]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Exit {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::Call(ref path_expr, ref _args) = e.kind;\n+            if let ExprKind::Path(ref path) = path_expr.kind;\n+            if let Some(def_id) = qpath_res(cx, path, path_expr.hir_id).opt_def_id();\n+            if match_def_path(cx, def_id, &paths::EXIT);\n+            then {\n+                let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n+                if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find(parent) {\n+                    // If the next item up is a function we check if it is an entry point\n+                    // and only then emit a linter warning\n+                    let def_id = cx.tcx.hir().local_def_id(parent);\n+                    if !is_entrypoint_fn(cx, def_id) {\n+                        span_lint(cx, EXIT, e.span, \"usage of `process::exit`\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "dae1c429b7d5e2b4521d5afef24e2b1546302315", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -188,6 +188,7 @@ pub mod escape;\n pub mod eta_reduction;\n pub mod eval_order_dependence;\n pub mod excessive_precision;\n+pub mod exit;\n pub mod explicit_write;\n pub mod fallible_impl_from;\n pub mod format;\n@@ -430,6 +431,10 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         \"clippy::unused_collect\",\n         \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n     );\n+    store.register_removed(\n+        \"clippy::into_iter_on_array\",\n+        \"this lint has been uplifted to rustc and is now called `array_into_iter`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -497,6 +502,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n         &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         &excessive_precision::EXCESSIVE_PRECISION,\n+        &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n         &format::USELESS_FORMAT,\n@@ -584,7 +590,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::FLAT_MAP_IDENTITY,\n         &methods::GET_UNWRAP,\n         &methods::INEFFICIENT_TO_STRING,\n-        &methods::INTO_ITER_ON_ARRAY,\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITER_CLONED_COLLECT,\n         &methods::ITER_NTH,\n@@ -938,12 +943,14 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n+    store.register_late_pass(|| box exit::Exit);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n         LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+        LintId::of(&exit::EXIT),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),\n         LintId::of(&indexing_slicing::INDEXING_SLICING),\n         LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),\n@@ -1142,7 +1149,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n-        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NTH),\n@@ -1481,7 +1487,6 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n-        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&minmax::MIN_MAX),"}, {"sha": "18ac8f0f47360f2a667aca791965ab33be8e47bb", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -373,7 +373,7 @@ impl LiteralDigitGrouping {\n                     }\n                 }\n             },\n-            LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+            LitKind::Float(..) => {\n                 // Lint floating-point literals.\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);\n@@ -509,17 +509,12 @@ impl DecimalLiteralRepresentation {\n     fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n         // Lint integral literals.\n         if_chain! {\n-            if let LitKind::Int(..) = lit.kind;\n+            if let LitKind::Int(val, _) = lit.kind;\n             if let Some(src) = snippet_opt(cx, lit.span);\n             if let Some(firstch) = src.chars().next();\n             if char::to_digit(firstch, 10).is_some();\n             let digit_info = DigitInfo::new(&src, false);\n             if digit_info.radix == Radix::Decimal;\n-            if let Ok(val) = digit_info.digits\n-                .chars()\n-                .filter(|&c| c != '_')\n-                .collect::<String>()\n-                .parse::<u128>();\n             if val >= u128::from(self.threshold);\n             then {\n                 let hex = format!(\"{:#X}\", val);"}, {"sha": "5e51b6b75d839019bd383af3b4f573ff938aef11", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::{Crate, Expr, ExprKind, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n+use syntax::ast::AttrKind;\n use syntax::symbol::sym;\n \n use crate::utils::{is_entrypoint_fn, snippet, span_help_and_lint};\n@@ -34,7 +35,13 @@ impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_, '_> for MainRecursion {\n     fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate) {\n-        self.has_no_std_attr = krate.attrs.iter().any(|attr| attr.path == sym::no_std);\n+        self.has_no_std_attr = krate.attrs.iter().any(|attr| {\n+            if let AttrKind::Normal(ref attr) = attr.kind {\n+                attr.path == sym::no_std\n+            } else {\n+                false\n+            }\n+        });\n     }\n \n     fn check_expr_post(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {"}, {"sha": "c71324ea4725433ae529aa5d42c23bb73c07c707", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 7, "deletions": 44, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -17,7 +17,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::Span;\n-use syntax::symbol::{sym, LocalInternedString, Symbol};\n+use syntax::symbol::{sym, Symbol, SymbolStr};\n \n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n@@ -968,34 +968,6 @@ declare_clippy_lint! {\n     \"using `filter_map` when a more succinct alternative exists\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `into_iter` calls on types which should be replaced by `iter` or\n-    /// `iter_mut`.\n-    ///\n-    /// **Why is this bad?** Arrays and `PathBuf` do not yet have an `into_iter` method which move out\n-    /// their content into an iterator. Auto-referencing resolves the `into_iter` call to its reference\n-    /// instead, like `<&[T; N] as IntoIterator>::into_iter`, which just iterates over item references\n-    /// like calling `iter` would. Furthermore, when the standard library actually\n-    /// [implements the `into_iter` method](https://github.com/rust-lang/rust/issues/25725) which moves\n-    /// the content out of the array, the original use of `into_iter` got inferred with the wrong type\n-    /// and the code will be broken.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// let _ = [1, 2, 3].into_iter().map(|x| *x).collect::<Vec<u32>>();\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// let _ = [1, 2, 3].iter().map(|x| *x).collect::<Vec<u32>>();\n-    /// ```\n-    pub INTO_ITER_ON_ARRAY,\n-    correctness,\n-    \"using `.into_iter()` on an array\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `into_iter` calls on references which should be replaced by `iter`\n     /// or `iter_mut`.\n@@ -1133,7 +1105,6 @@ declare_lint_pass!(Methods => [\n     USELESS_ASREF,\n     UNNECESSARY_FOLD,\n     UNNECESSARY_FILTER_MAP,\n-    INTO_ITER_ON_ARRAY,\n     INTO_ITER_ON_REF,\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n@@ -1148,8 +1119,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         }\n \n         let (method_names, arg_lists, method_spans) = method_calls(expr, 2);\n-        let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n+        let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n \n         match method_names.as_slice() {\n             [\"unwrap\", \"get\"] => lint_get_unwrap(cx, expr, arg_lists[1], false),\n@@ -2786,16 +2757,8 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(\n-    cx: &LateContext<'_, '_>,\n-    self_ref_ty: Ty<'_>,\n-) -> Option<(&'static Lint, &'static str, &'static str)> {\n+fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(&'static str, &'static str)> {\n     has_iter_method(cx, self_ref_ty).map(|ty_name| {\n-        let lint = if ty_name == \"array\" || ty_name == \"PathBuf\" {\n-            INTO_ITER_ON_ARRAY\n-        } else {\n-            INTO_ITER_ON_REF\n-        };\n         let mutbl = match self_ref_ty.kind {\n             ty::Ref(_, _, mutbl) => mutbl,\n             _ => unreachable!(),\n@@ -2804,18 +2767,18 @@ fn ty_has_iter_method(\n             hir::MutImmutable => \"iter\",\n             hir::MutMutable => \"iter_mut\",\n         };\n-        (lint, ty_name, method_name)\n+        (ty_name, method_name)\n     })\n }\n \n fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: Ty<'_>, method_span: Span) {\n     if !match_trait_method(cx, expr, &paths::INTO_ITERATOR) {\n         return;\n     }\n-    if let Some((lint, kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n+    if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n         span_lint_and_sugg(\n             cx,\n-            lint,\n+            INTO_ITER_ON_REF,\n             method_span,\n             &format!(\n                 \"this .into_iter() call is equivalent to .{}() and will not move the {}\","}, {"sha": "d756980b354d08dabc82183d4cefa20229b578e0", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -482,8 +482,8 @@ impl MiscEarlyLints {\n \n         if let LitKind::Int(value, lit_int_type) = lit.kind {\n             let suffix = match lit_int_type {\n-                LitIntType::Signed(ty) => ty.ty_to_string(),\n-                LitIntType::Unsigned(ty) => ty.ty_to_string(),\n+                LitIntType::Signed(ty) => ty.name_str(),\n+                LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n \n@@ -543,8 +543,8 @@ impl MiscEarlyLints {\n                     },\n                 );\n             }\n-        } else if let LitKind::Float(_, float_ty) = lit.kind {\n-            let suffix = float_ty.ty_to_string();\n+        } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n+            let suffix = float_ty.name_str();\n             let maybe_last_sep_idx = lit_snip.len() - suffix.len() - 1;\n             if lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n                 span_lint_and_sugg("}, {"sha": "12df9325650f3648c5695ae8645501eae5fadf2d", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -5,7 +5,7 @@ use std::cmp::Ordering;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::SymbolStr;\n use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n \n declare_clippy_lint! {\n@@ -72,7 +72,7 @@ pub struct NonExpressiveNames {\n impl_lint_pass!(NonExpressiveNames => [SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES, JUST_UNDERSCORES_AND_DIGITS]);\n \n struct ExistingName {\n-    interned: LocalInternedString,\n+    interned: SymbolStr,\n     span: Span,\n     len: usize,\n     whitelist: &'static [&'static str],"}, {"sha": "eee60e33bab636eee51fbf172135b4442b0295b6", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathBufPushOverwrite {\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(&path_lit.as_str());\n+            if let pushed_path = Path::new(&*path_lit.as_str());\n             if let Some(pushed_path_lit) = pushed_path.to_str();\n             if pushed_path.has_root();\n             if let Some(root) = pushed_path.components().next();"}, {"sha": "a0bcba17d5565fde0c037c4dcb80694478fb9511", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -90,7 +90,7 @@ impl EarlyLintPass for Precedence {\n                 if let Some(slf) = args.first() {\n                     if let ExprKind::Lit(ref lit) = slf.kind {\n                         match lit.kind {\n-                            LitKind::Int(..) | LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => {\n+                            LitKind::Int(..) | LitKind::Float(..) => {\n                                 let mut applicability = Applicability::MachineApplicable;\n                                 span_lint_and_sugg(\n                                     cx,"}, {"sha": "788d02ecb0aa76bf46d3c25fc1481fdcc8984372", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             |db| {\n                                 let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let arg = if let ty::Int(_) = from_ty.kind {\n-                                    arg.as_ty(ast::UintTy::U32)\n+                                    arg.as_ty(ast::UintTy::U32.name_str())\n                                 } else {\n                                     arg\n                                 };"}, {"sha": "62da724ffd9e26e2f73655fd8f00b75526762a11", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -15,7 +15,7 @@ use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n-use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n+use syntax::ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::Span;\n use syntax::symbol::{sym, Symbol};\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n                     }\n                 }\n                 match lit.node {\n-                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n+                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n                     _ => {\n                         if cast_from.kind == cast_to.kind && !in_external_macro(cx.sess(), expr.span) {\n                             span_lint("}, {"sha": "2f0e406b1a55c32d8d5c6a3fb769e26e86431a49", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::SymbolStr;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n@@ -73,6 +73,6 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n }\n \n #[must_use]\n-fn contains_unsafe(name: &LocalInternedString) -> bool {\n+fn contains_unsafe(name: &SymbolStr) -> bool {\n     name.contains(\"Unsafe\") || name.contains(\"unsafe\")\n }"}, {"sha": "19dbae2eabd97da29e4e6ddfe1ef90383f41325c", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -57,6 +57,11 @@ pub fn get_attr<'a>(\n     name: &'static str,\n ) -> impl Iterator<Item = &'a ast::Attribute> {\n     attrs.iter().filter(move |attr| {\n+        let attr = if let ast::AttrKind::Normal(ref attr) = attr.kind {\n+            attr\n+        } else {\n+            return false;\n+        };\n         let attr_segments = &attr.path.segments;\n         if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n             if let Some(deprecation_status) ="}, {"sha": "f3fc0487b265489dd5410f8890fd655c0ebf400d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -9,7 +9,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::{Attribute, LitKind};\n+use syntax::ast::{Attribute, LitFloatType, LitKind};\n \n declare_clippy_lint! {\n     /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -288,10 +288,14 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     LitKind::Byte(b) => println!(\"    if let LitKind::Byte({}) = {}.node;\", b, lit_pat),\n                     // FIXME: also check int type\n                     LitKind::Int(i, _) => println!(\"    if let LitKind::Int({}, _) = {}.node;\", i, lit_pat),\n-                    LitKind::Float(..) => println!(\"    if let LitKind::Float(..) = {}.node;\", lit_pat),\n-                    LitKind::FloatUnsuffixed(_) => {\n-                        println!(\"    if let LitKind::FloatUnsuffixed(_) = {}.node;\", lit_pat)\n-                    },\n+                    LitKind::Float(_, LitFloatType::Suffixed(_)) => println!(\n+                        \"    if let LitKind::Float(_, LitFloatType::Suffixed(_)) = {}.node;\",\n+                        lit_pat\n+                    ),\n+                    LitKind::Float(_, LitFloatType::Unsuffixed) => println!(\n+                        \"    if let LitKind::Float(_, LitFloatType::Unsuffixed) = {}.node;\",\n+                        lit_pat\n+                    ),\n                     LitKind::ByteStr(ref vec) => {\n                         let vec_pat = self.next(\"vec\");\n                         println!(\"    if let LitKind::ByteStr(ref {}) = {}.node;\", vec_pat, lit_pat);"}, {"sha": "5602e76322d7a90867310352b8beb3e26a9d7dfc", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -451,6 +451,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     CaptureClause::CaptureByRef => 1,\n                 }\n                 .hash(&mut self.s);\n+                // closures inherit TypeckTables\n                 self.hash_expr(&self.cx.tcx.hir().body(eid).value);\n             },\n             ExprKind::Field(ref e, ref f) => {\n@@ -490,10 +491,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             ExprKind::Repeat(ref e, ref l_id) => {\n                 self.hash_expr(e);\n-                let full_table = self.tables;\n-                self.tables = self.cx.tcx.body_tables(l_id.body);\n-                self.hash_expr(&self.cx.tcx.hir().body(l_id.body).value);\n-                self.tables = full_table;\n+                self.hash_body(l_id.body);\n             },\n             ExprKind::Ret(ref e) => {\n                 if let Some(ref e) = *e {\n@@ -609,7 +607,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             TyKind::Array(ty, anon_const) => {\n                 self.hash_ty(ty);\n-                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+                self.hash_body(anon_const.body);\n             },\n             TyKind::Ptr(mut_ty) => {\n                 self.hash_ty(&mut_ty.ty);\n@@ -660,19 +658,25 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n                         GenericArg::Type(ref ty) => self.hash_ty(&ty),\n-                        GenericArg::Const(ref ca) => {\n-                            self.hash_expr(&self.cx.tcx.hir().body(ca.value.body).value);\n-                        },\n+                        GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n                     }\n                 }\n             },\n             TyKind::TraitObject(_, lifetime) => {\n                 self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n-                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+                self.hash_body(anon_const.body);\n             },\n             TyKind::Err | TyKind::Infer | TyKind::Never => {},\n         }\n     }\n+\n+    pub fn hash_body(&mut self, body_id: BodyId) {\n+        // swap out TypeckTables when hashing a body\n+        let old_tables = self.tables;\n+        self.tables = self.cx.tcx.body_tables(body_id);\n+        self.hash_expr(&self.cx.tcx.hir().body(body_id).value);\n+        self.tables = old_tables;\n+    }\n }"}, {"sha": "1d1a3da6bc4176a48ac4c6512aae798a73fa9f4b", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n-use syntax_pos::symbol::LocalInternedString;\n+use syntax_pos::symbol::SymbolStr;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for various things we like to keep tidy in clippy.\n@@ -112,7 +112,7 @@ impl EarlyLintPass for ClippyLintsInternal {\n             if let ItemKind::Mod(ref utils_mod) = utils.kind {\n                 if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n                     if let ItemKind::Mod(ref paths_mod) = paths.kind {\n-                        let mut last_name: Option<LocalInternedString> = None;\n+                        let mut last_name: Option<SymbolStr> = None;\n                         for item in &*paths_mod.items {\n                             let name = item.ident.as_str();\n                             if let Some(ref last_name) = last_name {\n@@ -279,8 +279,8 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         let (method_names, arg_lists, spans) = method_calls(expr, 2);\n-        let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n+        let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n         if_chain! {\n             if let [\"expn_data\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];"}, {"sha": "042ca4ee7fdc1bc2dd4c69df211e5654d17a61e9", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -27,6 +27,7 @@ pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n+pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];"}, {"sha": "ff874179cfff9d5cb1a875e0759fd7d907cac8c1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -12,9 +12,9 @@ use std::borrow::Cow;\n use std::convert::TryInto;\n use std::fmt::Display;\n use syntax::ast;\n-use syntax::parse::token;\n use syntax::print::pprust::token_kind_to_string;\n use syntax::source_map::{CharPos, Span};\n+use syntax::token;\n use syntax::util::parser::AssocOp;\n use syntax_pos::{BytePos, Pos};\n \n@@ -440,7 +440,7 @@ fn associativity(op: &AssocOp) -> Associativity {\n \n /// Converts a `hir::BinOp` to the corresponding assigning binary operator.\n fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n-    use syntax::parse::token::BinOpToken::*;\n+    use syntax::token::BinOpToken::*;\n \n     AssocOp::AssignOp(match op.node {\n         hir::BinOpKind::Add => Plus,\n@@ -468,7 +468,7 @@ fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n /// Converts an `ast::BinOp` to the corresponding assigning binary operator.\n fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n     use syntax::ast::BinOpKind::*;\n-    use syntax::parse::token::BinOpToken;\n+    use syntax::token::BinOpToken;\n \n     AssocOp::AssignOp(match op.node {\n         Add => BinOpToken::Plus,"}, {"sha": "9a7cfb677108967e573bc6c61fdb15becb610d96", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -4,7 +4,8 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::borrow::Cow;\n use syntax::ast::*;\n-use syntax::parse::{parser, token};\n+use syntax::parse::parser;\n+use syntax::token;\n use syntax::tokenstream::TokenStream;\n use syntax_pos::{BytePos, Span};\n "}, {"sha": "5c92d69a49931cc19e5f27351bab98642fd00ac3", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -490,6 +490,13 @@ pub const ALL_LINTS: [Lint; 332] = [\n         deprecation: None,\n         module: \"excessive_precision\",\n     },\n+    Lint {\n+        name: \"exit\",\n+        group: \"restriction\",\n+        desc: \"`std::process::exit` is called, terminating the program\",\n+        deprecation: None,\n+        module: \"exit\",\n+    },\n     Lint {\n         name: \"expect_fun_call\",\n         group: \"perf\",\n@@ -812,13 +819,6 @@ pub const ALL_LINTS: [Lint; 332] = [\n         deprecation: None,\n         module: \"integer_division\",\n     },\n-    Lint {\n-        name: \"into_iter_on_array\",\n-        group: \"correctness\",\n-        desc: \"using `.into_iter()` on an array\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"into_iter_on_ref\",\n         group: \"style\","}, {"sha": "f6d101a0911b31222f31a5f80cfedd349f5366f7", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -16,7 +16,7 @@ pub fn derive(_: TokenStream) -> TokenStream {\n     let output = quote! {\n         // Should not trigger `useless_attribute`\n         #[allow(dead_code)]\n-        extern crate clippy_lints;\n+        extern crate rustc;\n     };\n     output\n }"}, {"sha": "42bde5e07f368496792618e76eca4131aa73093e", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -10,9 +10,11 @@ error[E0308]: mismatched types\n   --> $DIR/builtin-type-shadow.rs:5:5\n    |\n LL | fn foo<u32>(a: u32) -> u32 {\n-   |                        --- expected `u32` because of return type\n+   |        ---             --- expected `u32` because of return type\n+   |        |\n+   |        this type parameter\n LL |     42\n-   |     ^^ expected type parameter, found integer\n+   |     ^^ expected type parameter `u32`, found integer\n    |\n    = note: expected type `u32`\n               found type `{integer}`"}, {"sha": "ead67d5ed1b1eaee50f973aab9eddc6c9a6e1771", "filename": "tests/ui/crashes/ice-4760.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fcrashes%2Fice-4760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fcrashes%2Fice-4760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4760.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+const COUNT: usize = 2;\n+struct Thing;\n+trait Dummy {}\n+\n+const _: () = {\n+    impl Dummy for Thing where [i32; COUNT]: Sized {}\n+};\n+\n+fn main() {}"}, {"sha": "91d43758ab0a9d74ed2fafc68d71d08b40972f28", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -5,5 +5,6 @@\n #[warn(clippy::misaligned_transmute)]\n #[warn(clippy::unused_collect)]\n #[warn(clippy::invalid_ref)]\n+#[warn(clippy::into_iter_on_array)]\n \n fn main() {}"}, {"sha": "d353b26e5376dcee02c4790b5664182964c4f69f", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -42,11 +42,17 @@ error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `i\n LL | #[warn(clippy::invalid_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::into_iter_on_array` has been removed: `this lint has been uplifted to rustc and is now called `array_into_iter``\n+  --> $DIR/deprecated.rs:8:8\n+   |\n+LL | #[warn(clippy::into_iter_on_array)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "4eac6eb74672fac716d1aaf8726855ca8febd918", "filename": "tests/ui/exit1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexit1.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,15 @@\n+#[warn(clippy::exit)]\n+\n+fn not_main() {\n+    if true {\n+        std::process::exit(4);\n+    }\n+}\n+\n+fn main() {\n+    if true {\n+        std::process::exit(2);\n+    };\n+    not_main();\n+    std::process::exit(1);\n+}"}, {"sha": "a8d3956aa27a0639abf44db5d8b6639d261fd918", "filename": "tests/ui/exit1.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexit1.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,10 @@\n+error: usage of `process::exit`\n+  --> $DIR/exit1.rs:5:9\n+   |\n+LL |         std::process::exit(4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::exit` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4b693ed7083f000e5346722f2f8239e9fbe78c2b", "filename": "tests/ui/exit2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexit2.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,13 @@\n+#[warn(clippy::exit)]\n+\n+fn also_not_main() {\n+    std::process::exit(3);\n+}\n+\n+fn main() {\n+    if true {\n+        std::process::exit(2);\n+    };\n+    also_not_main();\n+    std::process::exit(1);\n+}"}, {"sha": "7263e156a9d26cac356a48178c457de47454a474", "filename": "tests/ui/exit2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexit2.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,10 @@\n+error: usage of `process::exit`\n+  --> $DIR/exit2.rs:4:5\n+   |\n+LL |     std::process::exit(3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::exit` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9dc0e1015a4f75894763e3c76e434fc7331e4f66", "filename": "tests/ui/exit3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fexit3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexit3.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -0,0 +1,8 @@\n+#[warn(clippy::exit)]\n+\n+fn main() {\n+    if true {\n+        std::process::exit(2);\n+    };\n+    std::process::exit(1);\n+}"}, {"sha": "ec5ff1aeeef48950a0d5680061db67cf7443f35c", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -31,7 +31,7 @@ impl Unrelated {\n     clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n@@ -102,9 +102,6 @@ fn main() {\n     let out_vec = vec![1, 2, 3];\n     for _v in out_vec {}\n \n-    let array = [1, 2, 3];\n-    for _v in &array {}\n-\n     for _v in &vec {} // these are fine\n     for _v in &mut vec {} // these are fine\n "}, {"sha": "2f42ea3ca417e280f9b3ec2b8e73e6093035e899", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -31,7 +31,7 @@ impl Unrelated {\n     clippy::cognitive_complexity,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n@@ -102,9 +102,6 @@ fn main() {\n     let out_vec = vec![1, 2, 3];\n     for _v in out_vec.into_iter() {}\n \n-    let array = [1, 2, 3];\n-    for _v in array.into_iter() {}\n-\n     for _v in &vec {} // these are fine\n     for _v in &mut vec {} // these are fine\n "}, {"sha": "485ba1ee7b3aacdc7b3e76c5955b9ca4bd1130fc", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -77,64 +77,58 @@ LL |     for _v in out_vec.into_iter() {}\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:106:15\n-   |\n-LL |     for _v in array.into_iter() {}\n-   |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n-\n-error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:108:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:115:15\n+  --> $DIR/for_loop_fixable.rs:112:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:120:15\n+  --> $DIR/for_loop_fixable.rs:117:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:123:15\n+  --> $DIR/for_loop_fixable.rs:120:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:126:15\n+  --> $DIR/for_loop_fixable.rs:123:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:129:15\n+  --> $DIR/for_loop_fixable.rs:126:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:132:15\n+  --> $DIR/for_loop_fixable.rs:129:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:135:15\n+  --> $DIR/for_loop_fixable.rs:132:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:138:15\n+  --> $DIR/for_loop_fixable.rs:135:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "20a93a222829953bdbc7f8e2f69c66aa37b36cf6", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -17,7 +17,7 @@\n     unused,\n     dead_code\n )]\n-#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     for i in 5..5 {\n         println!(\"{}\", i);"}, {"sha": "271754cb06ee7eb7ffa4ac7a598d62b41a335a22", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -31,12 +31,12 @@ fn bad_multiline(\n extern \"C\" fn extern_fn(\n     _one: u32,\n     _two: u32,\n-    _three: &str,\n+    _three: *const u8,\n     _four: bool,\n     _five: f32,\n     _six: f32,\n     _seven: bool,\n-    _eight: (),\n+    _eight: *const std::ffi::c_void,\n ) {\n }\n "}, {"sha": "c30d23de3f86921a891dbce97af00cea427cb71d", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n #![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n-#![deny(clippy::into_iter_on_array)]\n \n struct X;\n use std::collections::*;\n@@ -10,9 +9,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();\n     let _ = (&vec![1, 2, 3]).iter(); //~ WARN equivalent to .iter()\n     let _ = vec![1, 2, 3].into_boxed_slice().iter(); //~ WARN equivalent to .iter()"}, {"sha": "94bc1689619a297b84116d0efebcc14c7e74f5e1", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n #![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n-#![deny(clippy::into_iter_on_array)]\n \n struct X;\n use std::collections::*;\n@@ -10,9 +9,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();\n     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()"}, {"sha": "a5be50f64052712254ac02bcb2cb5187d6c4eb21", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,178 +1,160 @@\n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:13:24\n-   |\n-LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n-   |                        ^^^^^^^^^ help: call directly: `iter`\n-   |\n-note: lint level defined here\n-  --> $DIR/into_iter_on_ref.rs:4:9\n-   |\n-LL | #![deny(clippy::into_iter_on_array)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:15:23\n-   |\n-LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n-   |                       ^^^^^^^^^ help: call directly: `iter`\n-\n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:17:30\n+  --> $DIR/into_iter_on_ref.rs:14:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:18:46\n+  --> $DIR/into_iter_on_ref.rs:15:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:19:41\n+  --> $DIR/into_iter_on_ref.rs:16:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:20:44\n+  --> $DIR/into_iter_on_ref.rs:17:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:22:32\n+  --> $DIR/into_iter_on_ref.rs:19:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:23:36\n+  --> $DIR/into_iter_on_ref.rs:20:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:24:40\n+  --> $DIR/into_iter_on_ref.rs:21:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:26:24\n+  --> $DIR/into_iter_on_ref.rs:23:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:27:28\n+  --> $DIR/into_iter_on_ref.rs:24:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:28:32\n+  --> $DIR/into_iter_on_ref.rs:25:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:29:37\n+  --> $DIR/into_iter_on_ref.rs:26:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:30:34\n+  --> $DIR/into_iter_on_ref.rs:27:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:31:38\n+  --> $DIR/into_iter_on_ref.rs:28:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:32:44\n+  --> $DIR/into_iter_on_ref.rs:29:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:33:48\n+  --> $DIR/into_iter_on_ref.rs:30:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:34:39\n+  --> $DIR/into_iter_on_ref.rs:31:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:35:43\n+  --> $DIR/into_iter_on_ref.rs:32:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:36:41\n+  --> $DIR/into_iter_on_ref.rs:33:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:37:45\n+  --> $DIR/into_iter_on_ref.rs:34:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:38:43\n+  --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:39:47\n+  --> $DIR/into_iter_on_ref.rs:36:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeSet\n-  --> $DIR/into_iter_on_ref.rs:41:39\n+  --> $DIR/into_iter_on_ref.rs:38:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BinaryHeap\n-  --> $DIR/into_iter_on_ref.rs:42:41\n+  --> $DIR/into_iter_on_ref.rs:39:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashSet\n-  --> $DIR/into_iter_on_ref.rs:43:38\n+  --> $DIR/into_iter_on_ref.rs:40:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Path\n-  --> $DIR/into_iter_on_ref.rs:44:43\n+  --> $DIR/into_iter_on_ref.rs:41:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the PathBuf\n-  --> $DIR/into_iter_on_ref.rs:45:47\n+  --> $DIR/into_iter_on_ref.rs:42:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "81353414d24d6a73337ce954ba3ee1116649a2f5", "filename": "tests/ui/lint_without_lint_pass.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -5,25 +5,25 @@\n extern crate rustc;\n use rustc::lint::{LintArray, LintPass};\n \n-#[macro_use]\n-extern crate clippy_lints;\n-\n-declare_clippy_lint! {\n-    pub TEST_LINT,\n-    correctness,\n-    \"\"\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n }\n \n-declare_clippy_lint! {\n-    pub TEST_LINT_REGISTERED,\n-    correctness,\n-    \"\"\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT_REGISTERED,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n }\n \n-declare_clippy_lint! {\n-    pub TEST_LINT_REGISTERED_ONLY_IMPL,\n-    correctness,\n-    \"\"\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT_REGISTERED_ONLY_IMPL,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n }\n \n pub struct Pass;"}, {"sha": "7ee9d96c16a24e7c46de0c581533937137caac2d", "filename": "tests/ui/lint_without_lint_pass.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,10 +1,11 @@\n error: the lint `TEST_LINT` is not added to any `LintPass`\n-  --> $DIR/lint_without_lint_pass.rs:11:1\n+  --> $DIR/lint_without_lint_pass.rs:8:1\n    |\n-LL | / declare_clippy_lint! {\n-LL | |     pub TEST_LINT,\n-LL | |     correctness,\n-LL | |     \"\"\n+LL | / declare_tool_lint! {\n+LL | |     pub clippy::TEST_LINT,\n+LL | |     Warn,\n+LL | |     \"\",\n+LL | |     report_in_external_macro: true\n LL | | }\n    | |_^\n    |"}, {"sha": "e93a7fe2985b3968357e8a69081abd6dd2f67eeb", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -11,6 +11,7 @@\n use std::borrow::Borrow;\n use std::collections::HashSet;\n use std::convert::AsRef;\n+use std::mem::MaybeUninit;\n \n // `v` should be warned\n // `w`, `x` and `y` are allowed (moved or mutated)\n@@ -111,8 +112,8 @@ trait FalsePositive {\n }\n \n // shouldn't warn on extern funcs\n-extern \"C\" fn ext(x: String) -> usize {\n-    x.len()\n+extern \"C\" fn ext(x: MaybeUninit<usize>) -> usize {\n+    unsafe { x.assume_init() }\n }\n \n // whitelist RangeArgument"}, {"sha": "37241dbb409e327351ad7d931aefc4643f7a0268", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,61 +1,61 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:17:23\n+  --> $DIR/needless_pass_by_value.rs:18:23\n    |\n LL | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D clippy::needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:31:11\n+  --> $DIR/needless_pass_by_value.rs:32:11\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:31:22\n+  --> $DIR/needless_pass_by_value.rs:32:22\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:37:71\n+  --> $DIR/needless_pass_by_value.rs:38:71\n    |\n LL | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:49:18\n+  --> $DIR/needless_pass_by_value.rs:50:18\n    |\n LL | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&Option<Option<String>>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:62:24\n+  --> $DIR/needless_pass_by_value.rs:63:24\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:62:36\n+  --> $DIR/needless_pass_by_value.rs:63:36\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:78:49\n+  --> $DIR/needless_pass_by_value.rs:79:49\n    |\n LL | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:80:18\n+  --> $DIR/needless_pass_by_value.rs:81:18\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:80:29\n+  --> $DIR/needless_pass_by_value.rs:81:29\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n@@ -70,13 +70,13 @@ LL |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:80:40\n+  --> $DIR/needless_pass_by_value.rs:81:40\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:80:53\n+  --> $DIR/needless_pass_by_value.rs:81:53\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n@@ -91,85 +91,85 @@ LL |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:93:12\n+  --> $DIR/needless_pass_by_value.rs:94:12\n    |\n LL |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:94:12\n+  --> $DIR/needless_pass_by_value.rs:95:12\n    |\n LL |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:103:23\n+  --> $DIR/needless_pass_by_value.rs:104:23\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                       ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:103:30\n+  --> $DIR/needless_pass_by_value.rs:104:30\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                              ^^^^ help: consider taking a reference instead: `&Self`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:125:24\n+  --> $DIR/needless_pass_by_value.rs:126:24\n    |\n LL | fn bar_copy(x: u32, y: CopyWrapper) {\n    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:123:1\n+  --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:131:29\n+  --> $DIR/needless_pass_by_value.rs:132:29\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:123:1\n+  --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:131:45\n+  --> $DIR/needless_pass_by_value.rs:132:45\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:123:1\n+  --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:131:61\n+  --> $DIR/needless_pass_by_value.rs:132:61\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n-  --> $DIR/needless_pass_by_value.rs:123:1\n+  --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:143:40\n+  --> $DIR/needless_pass_by_value.rs:144:40\n    |\n LL | fn some_fun<'b, S: Bar<'b, ()>>(_item: S) {}\n    |                                        ^ help: consider taking a reference instead: `&S`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:148:20\n+  --> $DIR/needless_pass_by_value.rs:149:20\n    |\n LL | fn more_fun(_item: impl Club<'static, i32>) {}\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&impl Club<'static, i32>`"}, {"sha": "9c06e047c4ad0e3a7f71d327e8448197820f72bf", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,5 +1,6 @@\n // aux-build:proc_macro_derive.rs\n \n+#![feature(rustc_private)]\n #![warn(clippy::all)]\n #![allow(clippy::blacklisted_name)]\n #![warn(clippy::used_underscore_binding)]"}, {"sha": "47693518f862617da353288275e72b5f07560663", "filename": "tests/ui/used_underscore_binding.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,31 +1,31 @@\n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n-  --> $DIR/used_underscore_binding.rs:24:5\n+  --> $DIR/used_underscore_binding.rs:25:5\n    |\n LL |     _foo + 1\n    |     ^^^^\n    |\n    = note: `-D clippy::used-underscore-binding` implied by `-D warnings`\n \n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n-  --> $DIR/used_underscore_binding.rs:29:20\n+  --> $DIR/used_underscore_binding.rs:30:20\n    |\n LL |     println!(\"{}\", _foo);\n    |                    ^^^^\n \n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n-  --> $DIR/used_underscore_binding.rs:30:16\n+  --> $DIR/used_underscore_binding.rs:31:16\n    |\n LL |     assert_eq!(_foo, _foo);\n    |                ^^^^\n \n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n-  --> $DIR/used_underscore_binding.rs:30:22\n+  --> $DIR/used_underscore_binding.rs:31:22\n    |\n LL |     assert_eq!(_foo, _foo);\n    |                      ^^^^\n \n error: used binding `_underscore_field` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n-  --> $DIR/used_underscore_binding.rs:43:5\n+  --> $DIR/used_underscore_binding.rs:44:5\n    |\n LL |     s._underscore_field += 1;\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "529680a7588a654619babc1b3f8ee7fa8e4f8135", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -2,16 +2,15 @@\n \n #![warn(clippy::useless_attribute)]\n #![warn(unreachable_pub)]\n+#![feature(rustc_private)]\n \n #[allow(dead_code)]\n #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n #[rustfmt::skip]\n-#[cfg_attr(feature = \"cargo-clippy\",\n-           allow(dead_code))]\n #[allow(unused_imports)]\n #[allow(unused_extern_crates)]\n #[macro_use]\n-extern crate clippy_lints;\n+extern crate rustc;\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "87a1291543e158da0a3edb6d01d2bf4381519bcd", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c48a2c39aee14abdfd3afd739e8ca31b7020c63/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=9c48a2c39aee14abdfd3afd739e8ca31b7020c63", "patch": "@@ -1,13 +1,13 @@\n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:6:1\n+  --> $DIR/useless_attribute.rs:7:1\n    |\n LL | #[allow(dead_code)]\n    | ^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![allow(dead_code)]`\n    |\n    = note: `-D clippy::useless-attribute` implied by `-D warnings`\n \n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:7:1\n+  --> $DIR/useless_attribute.rs:8:1\n    |\n LL | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`"}]}