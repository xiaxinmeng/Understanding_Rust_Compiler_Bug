{"sha": "28859472f71cea497dbea12523e69dc23daaff76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODU5NDcyZjcxY2VhNDk3ZGJlYTEyNTIzZTY5ZGMyM2RhYWZmNzY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T17:35:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T17:35:31Z"}, "message": "Point at individual type arguments on arg count mismatch", "tree": {"sha": "0d030e2079d030a4c0b33d4599bf05a18f230475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d030e2079d030a4c0b33d4599bf05a18f230475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28859472f71cea497dbea12523e69dc23daaff76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28859472f71cea497dbea12523e69dc23daaff76", "html_url": "https://github.com/rust-lang/rust/commit/28859472f71cea497dbea12523e69dc23daaff76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28859472f71cea497dbea12523e69dc23daaff76/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e595f561045756d33e99d4a1d418d4da504d31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e595f561045756d33e99d4a1d418d4da504d31a", "html_url": "https://github.com/rust-lang/rust/commit/8e595f561045756d33e99d4a1d418d4da504d31a"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "d9c98d60b958d3ab8ca4c24f76bc6a358931fe2a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28859472f71cea497dbea12523e69dc23daaff76/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28859472f71cea497dbea12523e69dc23daaff76/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=28859472f71cea497dbea12523e69dc23daaff76", "patch": "@@ -16,7 +16,7 @@ use crate::util::nodemap::{NodeMap, FxHashSet};\n use crate::mir::mono::Linkage;\n \n use errors::FatalError;\n-use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n+use syntax_pos::{Span, DUMMY_SP, symbol::InternedString, MultiSpan};\n use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n@@ -624,6 +624,14 @@ impl Generics {\n         }\n         None\n     }\n+\n+    pub fn spans(&self) -> MultiSpan {\n+        if self.params.is_empty() {\n+            self.span.into()\n+        } else {\n+            self.params.iter().map(|p| p.span).collect::<Vec<Span>>().into()\n+        }\n+    }\n }\n \n /// Synthetic type parameters are converted to another form during lowering; this allows"}, {"sha": "742f6ed5215cb7c7ad404827e30b659a27c2ec98", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/28859472f71cea497dbea12523e69dc23daaff76/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28859472f71cea497dbea12523e69dc23daaff76/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=28859472f71cea497dbea12523e69dc23daaff76", "patch": "@@ -583,7 +583,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn compare_number_of_generics<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     impl_: &ty::AssocItem,\n-    impl_span: Span,\n+    _impl_span: Span,\n     trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n ) -> Result<(), ErrorReported> {\n@@ -600,17 +600,25 @@ fn compare_number_of_generics<'a, 'tcx>(\n         if impl_count != trait_count {\n             err_occurred = true;\n \n-            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n-            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n-            let span = if impl_item.generics.params.is_empty()\n-                || impl_item.generics.span.is_dummy() { // argument position impl Trait (#55374)\n-                impl_span\n+            let trait_spans = if let Some(trait_hir_id) = tcx.hir().as_local_hir_id(trait_.def_id) {\n+                let trait_item = tcx.hir().expect_trait_item(trait_hir_id);\n+                Some(if trait_item.generics.params.is_empty() {\n+                    vec![trait_item.generics.span]\n+                } else {\n+                    trait_item.generics.params.iter().map(|p| p.span).collect::<Vec<Span>>()\n+                })\n             } else {\n-                impl_item.generics.span\n+                trait_span.map(|s| vec![s])\n             };\n \n+            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n+            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n+            // let span = impl_item.generics.span;\n+            let spans = impl_item.generics.spans();\n+            let span = spans.primary_span();\n+\n             let mut err = tcx.sess.struct_span_err_with_code(\n-                span,\n+                spans,\n                 &format!(\n                     \"method `{}` has {} {kind} parameter{} but its trait \\\n                      declaration has {} {kind} parameter{}\",\n@@ -626,22 +634,32 @@ fn compare_number_of_generics<'a, 'tcx>(\n \n             let mut suffix = None;\n \n-            if let Some(span) = trait_span {\n-                err.span_label(\n-                    span,\n-                    format!(\"expected {} {} parameter{}\", trait_count, kind,\n-                        if trait_count != 1 { \"s\" } else { \"\" })\n-                );\n+            if let Some(spans) = trait_spans {\n+                let mut spans = spans.iter();\n+                if let Some(span) = spans.next() {\n+                    err.span_label(*span, format!(\n+                        \"expected {} {} parameter{}\",\n+                        trait_count,\n+                        kind,\n+                        if trait_count != 1 { \"s\" } else { \"\" },\n+                    ));\n+                }\n+                for span in spans {\n+                    err.span_label(*span, \"\");\n+                }\n             } else {\n                 suffix = Some(format!(\", expected {}\", trait_count));\n             }\n \n-            err.span_label(\n-                span,\n-                format!(\"found {} {} parameter{}{}\", impl_count, kind,\n+            if let Some(span) = span {\n+                err.span_label(span, format!(\n+                    \"found {} {} parameter{}{}\",\n+                    impl_count,\n+                    kind,\n                     if impl_count != 1 { \"s\" } else { \"\" },\n-                    suffix.unwrap_or_else(|| String::new())),\n-            );\n+                    suffix.unwrap_or_else(|| String::new()),\n+                ));\n+            }\n \n             err.emit();\n         }"}, {"sha": "3dd910019bfd08337c6a9db1f118e8e0e5488643", "filename": "src/test/ui/error-codes/E0049.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs?ref=28859472f71cea497dbea12523e69dc23daaff76", "patch": "@@ -8,5 +8,15 @@ impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n }\n \n+trait Fuzz {\n+    fn fuzz<A: Default, B>(x: A, y: B) -> Self;\n+}\n+\n+struct Baz;\n+\n+impl Fuzz for Baz {\n+    fn fuzz(x: bool, y: bool) -> Self { Baz } //~ ERROR E0049\n+}\n+\n fn main() {\n }"}, {"sha": "c0cd31faa90d60056cc31fe6d5a0446fe7b28e43", "filename": "src/test/ui/error-codes/E0049.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr?ref=28859472f71cea497dbea12523e69dc23daaff76", "patch": "@@ -1,12 +1,23 @@\n error[E0049]: method `foo` has 0 type parameters but its trait declaration has 1 type parameter\n-  --> $DIR/E0049.rs:8:5\n+  --> $DIR/E0049.rs:8:11\n    |\n LL |     fn foo<T: Default>(x: T) -> Self;\n-   |     --------------------------------- expected 1 type parameter\n+   |            - expected 1 type parameter\n ...\n LL |     fn foo(x: bool) -> Self { Bar }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ found 0 type parameters\n+   |           ^ found 0 type parameters\n \n-error: aborting due to previous error\n+error[E0049]: method `fuzz` has 0 type parameters but its trait declaration has 2 type parameters\n+  --> $DIR/E0049.rs:18:12\n+   |\n+LL |     fn fuzz<A: Default, B>(x: A, y: B) -> Self;\n+   |             -           -\n+   |             |\n+   |             expected 2 type parameters\n+...\n+LL |     fn fuzz(x: bool, y: bool) -> Self { Baz }\n+   |            ^ found 0 type parameters\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0049`."}, {"sha": "140f19f1ff7746f0ed898c405acb7bd5564d4b8d", "filename": "src/test/ui/issues/issue-36708.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr?ref=28859472f71cea497dbea12523e69dc23daaff76", "patch": "@@ -1,8 +1,8 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/issue-36708.rs:8:11\n+  --> $DIR/issue-36708.rs:8:12\n    |\n LL |     fn foo<T>() {}\n-   |           ^^^ found 1 type parameter, expected 0\n+   |            ^ found 1 type parameter, expected 0\n \n error: aborting due to previous error\n "}, {"sha": "953284735553c3d805d21cdba30b6143cea41117", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28859472f71cea497dbea12523e69dc23daaff76/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=28859472f71cea497dbea12523e69dc23daaff76", "patch": "@@ -1,11 +1,11 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:11\n+  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:22\n    |\n LL |     fn foo(&self, t: Self::T);\n-   |     -------------------------- expected 0 type parameters\n+   |           - expected 0 type parameters\n ...\n LL |     fn foo(&self, t: impl Clone) {}\n-   |           ^ found 1 type parameter\n+   |                      ^^^^^^^^^^ found 1 type parameter\n \n error: aborting due to previous error\n "}]}