{"sha": "c98814b1243ddde1f41fbc86815397b3091f2215", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ODgxNGIxMjQzZGRkZTFmNDFmYmM4NjgxNTM5N2IzMDkxZjIyMTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-05T18:53:39Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:18Z"}, "message": "Correctly \"detuple\" arguments when creating trait object shims for a trait method with rust-call ABI.", "tree": {"sha": "94136d02ff093f6bceacd3f06237e165a0ffc8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94136d02ff093f6bceacd3f06237e165a0ffc8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c98814b1243ddde1f41fbc86815397b3091f2215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c98814b1243ddde1f41fbc86815397b3091f2215", "html_url": "https://github.com/rust-lang/rust/commit/c98814b1243ddde1f41fbc86815397b3091f2215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c98814b1243ddde1f41fbc86815397b3091f2215/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f97b124a44944feb41c39a4478eda55dbc5da44d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97b124a44944feb41c39a4478eda55dbc5da44d", "html_url": "https://github.com/rust-lang/rust/commit/f97b124a44944feb41c39a4478eda55dbc5da44d"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "65e6d7e1924b6050f8625c466203fb433a523c5e", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=c98814b1243ddde1f41fbc86815397b3091f2215", "patch": "@@ -100,7 +100,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n \n     fn datum_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                                 -> Callee<'blk, 'tcx> {\n-        let DatumBlock { mut bcx, datum, .. } = expr::trans(bcx, expr);\n+        let DatumBlock { bcx, datum, .. } = expr::trans(bcx, expr);\n         match datum.ty.sty {\n             ty::ty_bare_fn(..) => {\n                 let llval = datum.to_llscalarish(bcx);"}, {"sha": "e219b45d3d9f499ee07eb36d97fc97b0a27e565a", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=c98814b1243ddde1f41fbc86815397b3091f2215", "patch": "@@ -599,8 +599,27 @@ pub fn trans_object_shim<'a, 'tcx>(\n            bcx.val_to_string(llobject));\n \n     // the remaining arguments will be, well, whatever they are\n+    let input_tys =\n+        match fty.abi {\n+            RustCall => {\n+                // unpack the tuple to extract the input type arguments:\n+                match fty.sig.0.inputs[1].sty {\n+                    ty::ty_tup(ref tys) => tys.as_slice(),\n+                    _ => {\n+                        bcx.sess().bug(\n+                            format!(\"rust-call expects a tuple not {}\",\n+                                    fty.sig.0.inputs[1].repr(tcx)).as_slice());\n+                    }\n+                }\n+            }\n+            _ => {\n+                // skip the self parameter:\n+                fty.sig.0.inputs.slice_from(1)\n+            }\n+        };\n+\n     let llargs: Vec<_> =\n-        fty.sig.0.inputs[1..].iter()\n+        input_tys.iter()\n         .enumerate()\n         .map(|(i, _)| {\n             let llarg = get_param(fcx.llfn, fcx.arg_pos(i+1) as u32);\n@@ -609,6 +628,7 @@ pub fn trans_object_shim<'a, 'tcx>(\n             llarg\n         })\n         .collect();\n+\n     assert!(!fcx.needs_ret_allocas);\n \n     let dest ="}, {"sha": "25b63cd14c4357f2a70bca5c8116a391d4255875", "filename": "src/test/run-pass/overloaded-calls-object-one-arg.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-one-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-one-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-one-arg.rs?ref=c98814b1243ddde1f41fbc86815397b3091f2215", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests calls to closure arguments where the closure takes 1 argument.\n+// This is a bit tricky due to rust-call ABI.\n+\n+fn foo(f: &mut FnMut(int) -> int) -> int {\n+    f(22)\n+}\n+\n+fn main() {\n+    let z = foo(&mut |x| x *100);\n+    assert_eq!(z, 2200);\n+}"}, {"sha": "026ebc308408fcac54583dc2f2892e94c90aef84", "filename": "src/test/run-pass/overloaded-calls-object-two-args.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-two-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-two-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-two-args.rs?ref=c98814b1243ddde1f41fbc86815397b3091f2215", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests calls to closure arguments where the closure takes 2 arguments.\n+// This is a bit tricky due to rust-call ABI.\n+\n+fn foo(f: &mut FnMut(int, int) -> int) -> int {\n+    f(1, 2)\n+}\n+\n+fn main() {\n+    let z = foo(&mut |x, y| x * 10 + y);\n+    assert_eq!(z, 12);\n+}"}, {"sha": "442df1e664cc3ca4bffc344c9473f792669e2041", "filename": "src/test/run-pass/overloaded-calls-object-zero-args.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98814b1243ddde1f41fbc86815397b3091f2215/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-zero-args.rs?ref=c98814b1243ddde1f41fbc86815397b3091f2215", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests calls to closure arguments where the closure takes 0 arguments.\n+// This is a bit tricky due to rust-call ABI.\n+\n+fn foo(f: &mut FnMut()) -> int {\n+    f()\n+}\n+\n+fn main() {\n+    let z = foo(|| 22);\n+    assert_eq!(z, 22);\n+}"}]}