{"sha": "cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "node_id": "C_kwDOAAsO6NoAKGNkNGQ5ZDkzNGZkM2JjMWI2YTBiMGZjYjM1NDhhMWIyNmZjNTNjOWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T01:58:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T01:58:36Z"}, "message": "Auto merge of #102331 - notriddle:rollup-dmefd2d, r=notriddle\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #102283 (Improve code example for Option::unwrap_or_default)\n - #102319 (rustdoc: merge CSS `table` rules into `.docblock`)\n - #102321 ( Rustdoc-Json: List impls for primitives)\n - #102322 (Document that Display automatically implements ToString)\n - #102325 (rustdoc: give `.line-number` / `.line-numbers` meaningful names)\n - #102326 (rustdoc: Update doc comment for splitn_mut to include mutable in the \u2026)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "28b9a7976fd3103a1a2b087a1fac01e3519db8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b9a7976fd3103a1a2b087a1fac01e3519db8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "html_url": "https://github.com/rust-lang/rust/commit/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a6fbf2f2e898ca4d788b3e686726fa9770c676", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a6fbf2f2e898ca4d788b3e686726fa9770c676", "html_url": "https://github.com/rust-lang/rust/commit/f3a6fbf2f2e898ca4d788b3e686726fa9770c676"}, {"sha": "7381d7d8b2594ec7dff32562ad7be705c6c0ebde", "url": "https://api.github.com/repos/rust-lang/rust/commits/7381d7d8b2594ec7dff32562ad7be705c6c0ebde", "html_url": "https://github.com/rust-lang/rust/commit/7381d7d8b2594ec7dff32562ad7be705c6c0ebde"}], "stats": {"total": 186, "additions": 116, "deletions": 70}, "files": [{"sha": "372439f14ec83f769aad80d1f8e47c167945557f", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -709,12 +709,19 @@ pub use macros::Debug;\n \n /// Format trait for an empty format, `{}`.\n ///\n+/// Implementing this trait for a type will automatically implement the\n+/// [`ToString`][tostring] trait for the type, allowing the usage\n+/// of the [`.to_string()`][tostring_function] method. Prefer implementing\n+/// the `Display` trait for a type, rather than [`ToString`][tostring].\n+///\n /// `Display` is similar to [`Debug`], but `Display` is for user-facing\n /// output, and so cannot be derived.\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n /// [module]: ../../std/fmt/index.html\n+/// [tostring]: ../../std/string/trait.ToString.html\n+/// [tostring_function]: ../../std/string/trait.ToString.html#tymethod.to_string\n ///\n /// # Examples\n ///"}, {"sha": "aed8fbf092ed39137447ea4be50624d166890602", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -2076,7 +2076,7 @@ impl<T> [T] {\n         SplitN::new(self.split(pred), n)\n     }\n \n-    /// Returns an iterator over subslices separated by elements that match\n+    /// Returns an iterator over mutable subslices separated by elements that match\n     /// `pred`, limited to returning at most `n` items. The matched element is\n     /// not contained in the subslices.\n     ///"}, {"sha": "7ab65bff3469fb0f9e5a2ba44fcfa8101f1f46f8", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -274,7 +274,7 @@ pub(crate) fn print_src(\n ) {\n     let lines = s.lines().count();\n     let mut line_numbers = Buffer::empty_from(buf);\n-    line_numbers.write_str(\"<pre class=\\\"line-numbers\\\">\");\n+    line_numbers.write_str(\"<pre class=\\\"src-line-numbers\\\">\");\n     match source_context {\n         SourceContext::Standalone => {\n             for line in 1..=lines {"}, {"sha": "e7a05b80c127fba63c4f4f967fa36ff6a9e43d83", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -299,15 +299,6 @@ summary {\n \n /* Fix some style changes due to normalize.css 8 */\n \n-td,\n-th {\n-\tpadding: 0;\n-}\n-\n-table {\n-\tborder-collapse: collapse;\n-}\n-\n button,\n input,\n optgroup,\n@@ -578,7 +569,7 @@ h2.location a {\n \tposition: relative;\n }\n \n-.example-wrap > pre.line-number {\n+pre.example-line-numbers {\n \toverflow: initial;\n \tborder: 1px solid;\n \tpadding: 13px 8px;\n@@ -591,15 +582,15 @@ h2.location a {\n \ttext-decoration: underline;\n }\n \n-.line-numbers {\n+.src-line-numbers {\n \ttext-align: right;\n }\n-.rustdoc:not(.source) .example-wrap > pre:not(.line-number) {\n+.rustdoc:not(.source) .example-wrap > pre:not(.example-line-numbers) {\n \twidth: 100%;\n \toverflow-x: auto;\n }\n \n-.rustdoc:not(.source) .example-wrap > pre.line-numbers {\n+.rustdoc:not(.source) .example-wrap > pre.src-line-numbers {\n \twidth: auto;\n \toverflow-x: visible;\n }\n@@ -612,14 +603,14 @@ h2.location a {\n \ttext-align: center;\n }\n \n-.content > .example-wrap pre.line-numbers {\n+.content > .example-wrap pre.src-line-numbers {\n \tposition: relative;\n \t-webkit-user-select: none;\n \t-moz-user-select: none;\n \t-ms-user-select: none;\n \tuser-select: none;\n }\n-.line-numbers span {\n+.src-line-numbers span {\n \tcursor: pointer;\n }\n \n@@ -695,6 +686,7 @@ pre, .rustdoc.source .example-wrap {\n \twidth: calc(100% - 2px);\n \toverflow-x: auto;\n \tdisplay: block;\n+\tborder-collapse: collapse;\n }\n \n .docblock table td {\n@@ -2067,7 +2059,7 @@ in storage.js plus the media query with (min-width: 701px)\n \tpadding-bottom: 0;\n }\n \n-.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n+.scraped-example:not(.expanded) .code-wrapper pre.src-line-numbers {\n \toverflow-x: hidden;\n }\n \n@@ -2113,12 +2105,12 @@ in storage.js plus the media query with (min-width: 701px)\n \tbottom: 0;\n }\n \n-.scraped-example .code-wrapper .line-numbers {\n+.scraped-example .code-wrapper .src-line-numbers {\n \tmargin: 0;\n \tpadding: 14px 0;\n }\n \n-.scraped-example .code-wrapper .line-numbers span {\n+.scraped-example .code-wrapper .src-line-numbers span {\n \tpadding: 0 14px;\n }\n "}, {"sha": "44238ca573dcdfeaa8a384da342a33b21f0c9626", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -93,8 +93,8 @@ pre, .rustdoc.source .example-wrap {\n \tcolor: #ff7733;\n }\n \n-.line-numbers span { color: #5c6773; }\n-.line-numbers .line-highlighted {\n+.src-line-numbers span { color: #5c6773; }\n+.src-line-numbers .line-highlighted {\n \tcolor: #708090;\n \tbackground-color: rgba(255, 236, 164, 0.06);\n \tpadding-right: 4px;\n@@ -171,7 +171,7 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #788797;\n }\n \n-.line-numbers :target { background-color: transparent; }\n+.src-line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */\n pre.rust .number, pre.rust .string { color: #b8cc52; }\n@@ -190,7 +190,7 @@ pre.rust .attribute {\n \tcolor: #e6e1cf;\n }\n \n-.example-wrap > pre.line-number {\n+pre.example-line-numbers {\n \tcolor: #5c67736e;\n \tborder: none;\n }"}, {"sha": "858d836c03d5ec9b69cb56a7c16de46696c0f590", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -54,8 +54,8 @@ input:focus + .slider {\n \tbackground: #444;\n }\n \n-.line-numbers span { color: #3B91E2; }\n-.line-numbers .line-highlighted {\n+.src-line-numbers span { color: #3B91E2; }\n+.src-line-numbers .line-highlighted {\n \tbackground-color: #0a042f !important;\n }\n \n@@ -141,7 +141,7 @@ details.rustdoc-toggle > summary::before {\n \tbackground: none;\n }\n \n-.line-numbers :target { background-color: transparent; }\n+.src-line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */\n pre.rust .kw { color: #ab8ac1; }\n@@ -155,7 +155,7 @@ pre.rust .question-mark {\n \tcolor: #ff9011;\n }\n \n-.example-wrap > pre.line-number {\n+pre.example-line-numbers {\n \tborder-color: #4a4949;\n }\n "}, {"sha": "6fbea6f6c7a5d9eea2a5464853a2b616df01e55b", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -53,8 +53,8 @@ input:focus + .slider {\n \tbackground-color: #fff;\n }\n \n-.line-numbers span { color: #c67e2d; }\n-.line-numbers .line-highlighted {\n+.src-line-numbers span { color: #c67e2d; }\n+.src-line-numbers .line-highlighted {\n \tbackground-color: #FDFFD3 !important;\n }\n \n@@ -125,7 +125,7 @@ body.source .example-wrap pre.rust a {\n .stab { background: #FFF5D6; border-color: #FFC600; }\n .stab.portability > code { background: none; }\n \n-.line-numbers :target { background-color: transparent; }\n+.src-line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */\n pre.rust .kw { color: #8959A8; }\n@@ -141,7 +141,7 @@ pre.rust .question-mark {\n \tcolor: #ff9011;\n }\n \n-.example-wrap > pre.line-number {\n+pre.example-line-numbers {\n \tborder-color: #c7c7c7;\n }\n "}, {"sha": "bbaf6d3b507978834532e30c63792949d3401fc2", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -699,7 +699,7 @@ function loadCss(cssFileName) {\n     window.rustdoc_add_line_numbers_to_examples = () => {\n         onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), x => {\n             const parent = x.parentNode;\n-            const line_numbers = parent.querySelectorAll(\".line-number\");\n+            const line_numbers = parent.querySelectorAll(\".example-line-numbers\");\n             if (line_numbers.length > 0) {\n                 return;\n             }\n@@ -709,7 +709,7 @@ function loadCss(cssFileName) {\n                 elems.push(i + 1);\n             }\n             const node = document.createElement(\"pre\");\n-            addClass(node, \"line-number\");\n+            addClass(node, \"example-line-numbers\");\n             node.innerHTML = elems.join(\"\\n\");\n             parent.insertBefore(node, x);\n         });\n@@ -718,7 +718,7 @@ function loadCss(cssFileName) {\n     window.rustdoc_remove_line_numbers_from_examples = () => {\n         onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), x => {\n             const parent = x.parentNode;\n-            const line_numbers = parent.querySelectorAll(\".line-number\");\n+            const line_numbers = parent.querySelectorAll(\".example-line-numbers\");\n             for (const node of line_numbers) {\n                 parent.removeChild(node);\n             }"}, {"sha": "d0fd115fd15c6d2fada74ce93e19d9f8bd34b92b", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -8,7 +8,7 @@\n \n     // Scroll code block to the given code location\n     function scrollToLoc(elt, loc) {\n-        const lines = elt.querySelector(\".line-numbers\");\n+        const lines = elt.querySelector(\".src-line-numbers\");\n         let scrollOffset;\n \n         // If the block is greater than the size of the viewer,"}, {"sha": "8286e9201e649f9394829b252561f99292713bb6", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -183,7 +183,7 @@ function highlightSourceLines(match) {\n     if (x) {\n         x.scrollIntoView();\n     }\n-    onEachLazy(document.getElementsByClassName(\"line-numbers\"), e => {\n+    onEachLazy(document.getElementsByClassName(\"src-line-numbers\"), e => {\n         onEachLazy(e.getElementsByTagName(\"span\"), i_e => {\n             removeClass(i_e, \"line-highlighted\");\n         });\n@@ -245,7 +245,7 @@ window.addEventListener(\"hashchange\", () => {\n     }\n });\n \n-onEachLazy(document.getElementsByClassName(\"line-numbers\"), el => {\n+onEachLazy(document.getElementsByClassName(\"src-line-numbers\"), el => {\n     el.addEventListener(\"click\", handleSourceHighlight);\n });\n "}, {"sha": "4170412caef871db344dcea97ca644dd1e5d5dcc", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -272,7 +272,12 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         ConstantItem(c) => ItemEnum::Constant(c.into_tcx(tcx)),\n         MacroItem(m) => ItemEnum::Macro(m.source),\n         ProcMacroItem(m) => ItemEnum::ProcMacro(m.into_tcx(tcx)),\n-        PrimitiveItem(p) => ItemEnum::PrimitiveType(p.as_sym().to_string()),\n+        PrimitiveItem(p) => {\n+            ItemEnum::Primitive(Primitive {\n+                name: p.as_sym().to_string(),\n+                impls: Vec::new(), // Added in JsonRenderer::item\n+            })\n+        }\n         TyAssocConstItem(ty) => ItemEnum::AssocConst { type_: ty.into_tcx(tcx), default: None },\n         AssocConstItem(ty, default) => {\n             ItemEnum::AssocConst { type_: ty.into_tcx(tcx), default: Some(default.expr(tcx)) }"}, {"sha": "8d6450838c1d033357c6534ec59633b237ee5534", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -219,12 +219,15 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     u.impls = self.get_impls(item_id.expect_def_id());\n                     false\n                 }\n+                types::ItemEnum::Primitive(ref mut p) => {\n+                    p.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n \n                 types::ItemEnum::Method(_)\n                 | types::ItemEnum::Module(_)\n                 | types::ItemEnum::AssocConst { .. }\n-                | types::ItemEnum::AssocType { .. }\n-                | types::ItemEnum::PrimitiveType(_) => true,\n+                | types::ItemEnum::AssocType { .. } => true,\n                 types::ItemEnum::ExternCrate { .. }\n                 | types::ItemEnum::Import(_)\n                 | types::ItemEnum::StructField(_)"}, {"sha": "7379b04ad167709dbd16face56ccf7a04037a624", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 21;\n+pub const FORMAT_VERSION: u32 = 22;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -254,7 +254,7 @@ pub enum ItemEnum {\n     Macro(String),\n     ProcMacro(ProcMacro),\n \n-    PrimitiveType(String),\n+    Primitive(Primitive),\n \n     AssocConst {\n         #[serde(rename = \"type\")]\n@@ -709,5 +709,11 @@ pub struct Static {\n     pub expr: String,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Primitive {\n+    pub name: String,\n+    pub impls: Vec<Id>,\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "d8658a0f255771f25ed4e22391af3fc2437518d9", "filename": "src/test/run-make-fulldeps/rustdoc-scrape-examples-macros/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -1,8 +1,8 @@\n // Scraped example should only include line numbers for items b and c in ex.rs\n-// @!has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '14'\n-// @has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '15'\n-// @has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '21'\n-// @!has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '22'\n+// @!has foobar/fn.f.html '//*[@class=\"src-line-numbers\"]' '14'\n+// @has foobar/fn.f.html '//*[@class=\"src-line-numbers\"]' '15'\n+// @has foobar/fn.f.html '//*[@class=\"src-line-numbers\"]' '21'\n+// @!has foobar/fn.f.html '//*[@class=\"src-line-numbers\"]' '22'\n \n pub fn f() {}\n "}, {"sha": "79090b499c832496bae34960446b94c47786e7c8", "filename": "src/test/rustdoc-gui/basic-code.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -1,3 +1,3 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n click: \".srclink\"\n-assert-count: (\".line-numbers\", 1)\n+assert-count: (\".src-line-numbers\", 1)"}, {"sha": "4e1e83c0fbd73f86e8cb1a47e2056d4814121a8f", "filename": "src/test/rustdoc-gui/docblock-code-block-line-number.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -2,24 +2,24 @@\n goto: file://|DOC_PATH|/test_docs/fn.foo.html\n \n // We check that without this setting, there is no line number displayed.\n-assert-false: \"pre.line-number\"\n+assert-false: \"pre.example-line-numbers\"\n \n // We now set the setting to show the line numbers on code examples.\n local-storage: {\"rustdoc-line-numbers\": \"true\" }\n // We reload to make the line numbers appear.\n reload:\n \n // We wait for them to be added into the DOM by the JS...\n-wait-for: \"pre.line-number\"\n+wait-for: \"pre.example-line-numbers\"\n // If the test didn't fail, it means that it was found!\n // Let's now check some CSS properties...\n-assert-css: (\"pre.line-number\", {\n+assert-css: (\"pre.example-line-numbers\", {\n     \"margin\": \"0px\",\n     \"padding\": \"13px 8px\",\n     \"text-align\": \"right\",\n })\n // The first code block has two lines so let's check its `<pre>` elements lists both of them.\n-assert-text: (\"pre.line-number\", \"1\\n2\")\n+assert-text: (\"pre.example-line-numbers\", \"1\\n2\")\n \n // Now, try changing the setting dynamically. We'll turn it off, using the settings menu,\n // and make sure it goes away.\n@@ -32,8 +32,8 @@ assert-css: (\"#settings\", {\"display\": \"block\"})\n // Then, click the toggle button.\n click: \"input#line-numbers + .slider\"\n wait-for: 100 // wait-for-false does not exist\n-assert-false: \"pre.line-number\"\n+assert-false: \"pre.example-line-numbers\"\n \n // Finally, turn it on again.\n click: \"input#line-numbers + .slider\"\n-wait-for: \"pre.line-number\"\n+wait-for: \"pre.example-line-numbers\""}, {"sha": "5f0bb7f19c05043c61540567ccb1fe456cb009b6", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -1,30 +1,30 @@\n // Checks that the interactions with the source code pages are working as expected.\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n // Check that we can click on the line number.\n-click: \".line-numbers > span:nth-child(4)\" // This is the span for line 4.\n+click: \".src-line-numbers > span:nth-child(4)\" // This is the span for line 4.\n // Ensure that the page URL was updated.\n assert-document-property: ({\"URL\": \"lib.rs.html#4\"}, ENDS_WITH)\n assert-attribute: (\"//*[@id='4']\", {\"class\": \"line-highlighted\"})\n // We now check that the good spans are highlighted\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html#4-6\n-assert-attribute-false: (\".line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n-assert-attribute: (\".line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n-assert-attribute: (\".line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n-assert-attribute: (\".line-numbers > span:nth-child(6)\", {\"class\": \"line-highlighted\"})\n-assert-attribute-false: (\".line-numbers > span:nth-child(7)\", {\"class\": \"line-highlighted\"})\n+assert-attribute-false: (\".src-line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".src-line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".src-line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".src-line-numbers > span:nth-child(6)\", {\"class\": \"line-highlighted\"})\n+assert-attribute-false: (\".src-line-numbers > span:nth-child(7)\", {\"class\": \"line-highlighted\"})\n // This is to ensure that the content is correctly align with the line numbers.\n compare-elements-position: (\"//*[@id='1']\", \".rust > code > span\", (\"y\"))\n \n // Assert that the line numbers text is aligned to the right.\n-assert-css: (\".line-numbers\", {\"text-align\": \"right\"})\n+assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n \n // Now let's check that clicking on something else than the line number doesn't\n // do anything (and certainly not add a `#NaN` to the URL!).\n show-text: true\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n // We use this assert-position to know where we will click.\n assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 103})\n-// We click on the left of the \"1\" span but still in the \"line-number\" `<pre>`.\n+// We click on the left of the \"1\" span but still in the \"src-line-number\" `<pre>`.\n click: (103, 103)\n assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n "}, {"sha": "1fc9374065f66452602084cc5866a006d5cba324", "filename": "src/test/rustdoc-json/primitives/primitive_impls.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -0,0 +1,34 @@\n+#![feature(no_core)]\n+#![feature(rustc_attrs)]\n+#![feature(rustdoc_internals)]\n+#![no_core]\n+#![rustc_coherence_is_core]\n+\n+// @set impl_i32 = \"$.index[*][?(@.docs=='Only core can do this')].id\"\n+\n+/// Only core can do this\n+impl i32 {\n+    // @set identity = \"$.index[*][?(@.docs=='Do Nothing')].id\"\n+\n+    /// Do Nothing\n+    pub fn identity(self) -> Self {\n+        self\n+    }\n+\n+    // @is \"$.index[*][?(@.docs=='Only core can do this')].inner.items[*]\" $identity\n+}\n+\n+// @set Trait = \"$.index[*][?(@.name=='Trait')].id\"\n+pub trait Trait {}\n+// @set impl_trait_for_i32 = \"$.index[*][?(@.docs=='impl Trait for i32')].id\"\n+/// impl Trait for i32\n+impl Trait for i32 {}\n+\n+/// i32\n+#[doc(primitive = \"i32\")]\n+mod prim_i32 {}\n+\n+// @set i32 = \"$.index[*][?(@.docs=='i32')].id\"\n+// @is \"$.index[*][?(@.docs=='i32')].name\" '\"i32\"'\n+// @is \"$.index[*][?(@.docs=='i32')].inner.name\" '\"i32\"'\n+// @ismany \"$.index[*][?(@.docs=='i32')].inner.impls[*]\" $impl_i32 $impl_trait_for_i32"}, {"sha": "56b35cd14c0f2677b23d1dcfda5b4d8ccc839f49", "filename": "src/test/rustdoc-json/primitives/primitive_overloading.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "previous_filename": "src/test/rustdoc-json/primitive_overloading.rs"}, {"sha": "8024044bc05ab3993b836da2045dce5876401734", "filename": "src/test/rustdoc-json/primitives/primitive_type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "previous_filename": "src/test/rustdoc-json/primitives.rs"}, {"sha": "e22927374621ffbdc15b357b3e756a8c5e513ecd", "filename": "src/test/rustdoc-json/primitives/use_primitive.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -5,7 +5,7 @@\n #[doc(primitive = \"usize\")]\n mod usize {}\n \n-// @set local_crate_id = \"$.index[*][?(@.name=='primitive')].crate_id\"\n+// @set local_crate_id = \"$.index[*][?(@.name=='use_primitive')].crate_id\"\n \n // @has \"$.index[*][?(@.name=='ilog10')]\"\n // @!is \"$.index[*][?(@.name=='ilog10')].crate_id\" $local_crate_id", "previous_filename": "src/test/rustdoc-json/primitive.rs"}, {"sha": "6d986e57501a3324075a977e2e89ed64265842ad", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -142,8 +142,7 @@ impl Kind {\n             ItemEnum::Static(_) => Static,\n             ItemEnum::Macro(_) => Macro,\n             ItemEnum::ProcMacro(_) => ProcMacro,\n-            // https://github.com/rust-lang/rust/issues/100961\n-            ItemEnum::PrimitiveType(_) => Primitive,\n+            ItemEnum::Primitive(_) => Primitive,\n             ItemEnum::ForeignType => ForeignType,\n             ItemEnum::ExternCrate { .. } => ExternCrate,\n             ItemEnum::AssocConst { .. } => AssocConst,"}, {"sha": "94af4c5e9e16dfe50274b3bc73a621089adbda36", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=cd4d9d934fd3bc1b6a0b0fcb3548a1b26fc53c9d", "patch": "@@ -4,8 +4,8 @@ use std::hash::Hash;\n use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n     GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Method, Module, OpaqueTy,\n-    Path, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n-    TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n+    Path, Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type,\n+    TypeBinding, TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n };\n \n use crate::{item_kind::Kind, Error, ErrorKind};\n@@ -76,7 +76,7 @@ impl<'a> Validator<'a> {\n                 ItemEnum::ForeignType => {} // nop\n                 ItemEnum::Macro(x) => self.check_macro(x),\n                 ItemEnum::ProcMacro(x) => self.check_proc_macro(x),\n-                ItemEnum::PrimitiveType(x) => self.check_primitive_type(x),\n+                ItemEnum::Primitive(x) => self.check_primitive_type(x),\n                 ItemEnum::Module(x) => self.check_module(x),\n                 // FIXME: Why don't these have their own structs?\n                 ItemEnum::ExternCrate { .. } => {}\n@@ -219,8 +219,8 @@ impl<'a> Validator<'a> {\n         // nop\n     }\n \n-    fn check_primitive_type(&mut self, _: &'a str) {\n-        // nop\n+    fn check_primitive_type(&mut self, x: &'a Primitive) {\n+        x.impls.iter().for_each(|i| self.add_impl_id(i));\n     }\n \n     fn check_generics(&mut self, x: &'a Generics) {"}]}