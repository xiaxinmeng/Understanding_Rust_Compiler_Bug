{"sha": "51a2e2fd826c82252d101ad1e1904319699e417e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYTJlMmZkODI2YzgyMjUyZDEwMWFkMWUxOTA0MzE5Njk5ZTQxN2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-02-13T18:50:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-02-13T18:50:54Z"}, "message": "Allow more Cell methods for non-Copy types\n\nContributes to #39264", "tree": {"sha": "a1b39ed93b9df901fa8ea52656079623dc899d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b39ed93b9df901fa8ea52656079623dc899d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51a2e2fd826c82252d101ad1e1904319699e417e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51a2e2fd826c82252d101ad1e1904319699e417e", "html_url": "https://github.com/rust-lang/rust/commit/51a2e2fd826c82252d101ad1e1904319699e417e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51a2e2fd826c82252d101ad1e1904319699e417e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "html_url": "https://github.com/rust-lang/rust/commit/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "1570428cf18b497b717e3064983ea26f7da7ac17", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/51a2e2fd826c82252d101ad1e1904319699e417e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a2e2fd826c82252d101ad1e1904319699e417e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=51a2e2fd826c82252d101ad1e1904319699e417e", "patch": "@@ -212,66 +212,6 @@ impl<T:Copy> Cell<T> {\n     pub fn get(&self) -> T {\n         unsafe{ *self.value.get() }\n     }\n-\n-    /// Returns a reference to the underlying `UnsafeCell`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(as_unsafe_cell)]\n-    ///\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let uc = c.as_unsafe_cell();\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n-    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n-        &self.value\n-    }\n-\n-    /// Returns a raw pointer to the underlying data in this cell.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let ptr = c.as_ptr();\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    pub fn as_ptr(&self) -> *mut T {\n-        self.value.get()\n-    }\n-\n-    /// Returns a mutable reference to the underlying data.\n-    ///\n-    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n-    /// that we possess the only reference.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let mut c = Cell::new(5);\n-    /// *c.get_mut() += 1;\n-    ///\n-    /// assert_eq!(c.get(), 6);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n-    pub fn get_mut(&mut self) -> &mut T {\n-        unsafe {\n-            &mut *self.value.get()\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -369,6 +309,66 @@ impl<T> Cell<T> {\n         }\n     }\n \n+    /// Returns a reference to the underlying `UnsafeCell`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_unsafe_cell)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let uc = c.as_unsafe_cell();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n+    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n+        &self.value\n+    }\n+\n+    /// Returns a raw pointer to the underlying data in this cell.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let ptr = c.as_ptr();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    pub fn as_ptr(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n+    /// that we possess the only reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut c = Cell::new(5);\n+    /// *c.get_mut() += 1;\n+    ///\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n+\n     /// Sets the contained value.\n     ///\n     /// # Examples"}]}