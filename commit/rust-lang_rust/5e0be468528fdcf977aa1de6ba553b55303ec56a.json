{"sha": "5e0be468528fdcf977aa1de6ba553b55303ec56a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMGJlNDY4NTI4ZmRjZjk3N2FhMWRlNmJhNTUzYjU1MzAzZWM1NmE=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-07-08T21:19:39Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-07-08T21:19:39Z"}, "message": "changed .each() to .iter().advance()", "tree": {"sha": "21276b51bc4ec98b4555f785f8a0728ed98b98ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21276b51bc4ec98b4555f785f8a0728ed98b98ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e0be468528fdcf977aa1de6ba553b55303ec56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0be468528fdcf977aa1de6ba553b55303ec56a", "html_url": "https://github.com/rust-lang/rust/commit/5e0be468528fdcf977aa1de6ba553b55303ec56a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e0be468528fdcf977aa1de6ba553b55303ec56a/comments", "author": null, "committer": null, "parents": [{"sha": "6b2abcaa0f4b8f0fdbd0f8dcac5089159f0051da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2abcaa0f4b8f0fdbd0f8dcac5089159f0051da", "html_url": "https://github.com/rust-lang/rust/commit/6b2abcaa0f4b8f0fdbd0f8dcac5089159f0051da"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2707b9ce7d7b62c545090bd6e22f88090fe614aa", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e0be468528fdcf977aa1de6ba553b55303ec56a/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0be468528fdcf977aa1de6ba553b55303ec56a/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=5e0be468528fdcf977aa1de6ba553b55303ec56a", "patch": "@@ -106,16 +106,16 @@ fn uv_ip_as_ip<T>(addr: UvIpAddr, f: &fn(IpAddr) -> T) -> T {\n         },\n         UvIpv6(*) => {\n             let ip: ~[u16] = {\n-                let read_hex_segment = |s: &str| -> u16 {\n-                    num::FromStrRadix::from_str_radix(s, 16u).unwrap()\n-                };\n-                let convert_each_segment = |s: &str| -> ~[u16] {\n-                    match s {\n-                        \"\" => ~[],\n-                        s => s.split_iter(':').transform(read_hex_segment).collect(),\n-                    }\n-                };\n                 let expand_shorthand_and_convert = |s: &str| -> ~[~[u16]] {\n+                    let convert_each_segment = |s: &str| -> ~[u16] {\n+                        let read_hex_segment = |s: &str| -> u16 {\n+                            num::FromStrRadix::from_str_radix(s, 16u).unwrap()\n+                        };\n+                        match s {\n+                            \"\" => ~[],\n+                            s => s.split_iter(':').transform(read_hex_segment).collect(),\n+                        }\n+                    };\n                     s.split_str_iter(\"::\").transform(convert_each_segment).collect()\n                 };\n                 match expand_shorthand_and_convert(ip_str) {\n@@ -662,7 +662,7 @@ mod test {\n                     if status.is_none() {\n                         rtdebug!(\"got %d bytes\", nread);\n                         let buf = buf.unwrap();\n-                        for buf.slice(0, nread as uint).each |byte| {\n+                        for buf.slice(0, nread as uint).iter().advance() |byte| {\n                             assert!(*byte == count as u8);\n                             rtdebug!(\"%u\", *byte as uint);\n                             count += 1;"}]}