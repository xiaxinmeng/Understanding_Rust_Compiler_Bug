{"sha": "1242639b88b0dee9ebb0f103efe017826c5b334e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDI2MzliODhiMGRlZTllYmIwZjEwM2VmZTAxNzgyNmM1YjMzNGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-25T10:41:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:34:41Z"}, "message": "change syntax of `newtype_index` to look like a struct decl", "tree": {"sha": "1bcce301506858bebdc7fd949ec2430db46586a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcce301506858bebdc7fd949ec2430db46586a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1242639b88b0dee9ebb0f103efe017826c5b334e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1242639b88b0dee9ebb0f103efe017826c5b334e", "html_url": "https://github.com/rust-lang/rust/commit/1242639b88b0dee9ebb0f103efe017826c5b334e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1242639b88b0dee9ebb0f103efe017826c5b334e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3292f163da3327523ddec5bc44d17c2378ec37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3292f163da3327523ddec5bc44d17c2378ec37", "html_url": "https://github.com/rust-lang/rust/commit/5a3292f163da3327523ddec5bc44d17c2378ec37"}], "stats": {"total": 145, "additions": 108, "deletions": 37}, "files": [{"sha": "ff8bf3ca9f4ae55b8205a89d8f8b0ffe3fa7d3a4", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -39,7 +39,9 @@ pub struct DepGraph {\n     fingerprints: Lrc<Lock<IndexVec<DepNodeIndex, Fingerprint>>>\n }\n \n-newtype_index!(DepNodeIndex);\n+newtype_index! {\n+    pub struct DepNodeIndex { .. }\n+}\n \n impl DepNodeIndex {\n     const INVALID: DepNodeIndex = DepNodeIndex(::std::u32::MAX);"}, {"sha": "4c896a33e59c1543e19e63cece80398c78e141a5", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -14,7 +14,9 @@ use dep_graph::DepNode;\n use ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n-newtype_index!(SerializedDepNodeIndex);\n+newtype_index! {\n+    pub struct SerializedDepNodeIndex { .. }\n+}\n \n /// Data for use when recompiling the **current crate**.\n #[derive(Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "0feeb01adbad16fba48588bc7e57a30b633ec042", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -15,8 +15,8 @@ use serialize;\n use std::fmt;\n use std::u32;\n \n-newtype_index!(CrateNum\n-    {\n+newtype_index! {\n+    pub struct CrateNum {\n         ENCODABLE = custom\n         DEBUG_FORMAT = \"crate{}\",\n \n@@ -35,7 +35,8 @@ newtype_index!(CrateNum\n         /// A special CrateNum that we use for the tcx.rcache when decoding from\n         /// the incr. comp. cache.\n         const RESERVED_FOR_INCR_COMP_CACHE = u32::MAX - 2,\n-    });\n+    }\n+}\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {"}, {"sha": "fceab160192b1e60eec35387fab70cda761c5707", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -159,11 +159,12 @@ pub struct BlockRemainder {\n     pub first_statement_index: FirstStatementIndex,\n }\n \n-newtype_index!(FirstStatementIndex\n-    {\n+newtype_index! {\n+    pub struct FirstStatementIndex {\n         pub idx\n         MAX = SCOPE_DATA_REMAINDER_MAX\n-    });\n+    }\n+}\n \n impl From<ScopeData> for Scope {\n     #[inline]"}, {"sha": "3ab8de6de4442894e203d0dd1b9d8fd4fe312406", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -523,11 +523,12 @@ impl BorrowKind {\n ///////////////////////////////////////////////////////////////////////////\n // Variables and temps\n \n-newtype_index!(Local\n-    {\n+newtype_index! {\n+    pub struct Local {\n         DEBUG_FORMAT = \"_{}\",\n         const RETURN_PLACE = 0,\n-    });\n+    }\n+}\n \n /// Classifies locals into categories. See `Mir::local_kind`.\n #[derive(PartialEq, Eq, Debug)]\n@@ -852,7 +853,11 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock { DEBUG_FORMAT = \"bb{}\" });\n+newtype_index! {\n+    pub struct BasicBlock {\n+        DEBUG_FORMAT = \"bb{}\"\n+    }\n+}\n \n impl BasicBlock {\n     pub fn start_location(self) -> Location {\n@@ -1822,7 +1827,11 @@ pub type PlaceProjection<'tcx> = Projection<'tcx, Place<'tcx>, Local, Ty<'tcx>>;\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field { DEBUG_FORMAT = \"field[{}]\" });\n+newtype_index! {\n+    pub struct Field {\n+        DEBUG_FORMAT = \"field[{}]\"\n+    }\n+}\n \n impl<'tcx> Place<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n@@ -1895,11 +1904,12 @@ impl<'tcx> Debug for Place<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n \n-newtype_index!(SourceScope\n-    {\n+newtype_index! {\n+    pub struct SourceScope {\n         DEBUG_FORMAT = \"scope[{}]\",\n         const OUTERMOST_SOURCE_SCOPE = 0,\n-    });\n+    }\n+}\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct SourceScopeData {\n@@ -2271,7 +2281,11 @@ pub struct Constant<'tcx> {\n     pub literal: &'tcx ty::Const<'tcx>,\n }\n \n-newtype_index!(Promoted { DEBUG_FORMAT = \"promoted[{}]\" });\n+newtype_index! {\n+    pub struct Promoted {\n+        DEBUG_FORMAT = \"promoted[{}]\"\n+    }\n+}\n \n impl<'tcx> Debug for Constant<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {"}, {"sha": "f15f7093d9428aa21ebbce08902defde8a4620ee", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -1034,11 +1034,12 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-newtype_index!(DebruijnIndex\n-    {\n+newtype_index! {\n+    pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\",\n         const INNERMOST = 0,\n-    });\n+    }\n+}\n \n pub type Region<'tcx> = &'tcx RegionKind;\n \n@@ -1176,11 +1177,12 @@ pub struct FloatVid {\n     pub index: u32,\n }\n \n-newtype_index!(RegionVid\n-    {\n+newtype_index! {\n+    pub struct RegionVid {\n         pub idx\n         DEBUG_FORMAT = custom,\n-    });\n+    }\n+}\n \n impl Atom for RegionVid {\n     fn index(self) -> usize {\n@@ -1217,7 +1219,9 @@ pub enum InferTy {\n     CanonicalTy(CanonicalVar),\n }\n \n-newtype_index!(CanonicalVar);\n+newtype_index! {\n+    pub struct CanonicalVar { .. }\n+}\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "f8992c991cc366c260eefc46b48000103e9659e3", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -53,20 +53,22 @@ macro_rules! newtype_index {\n     // ---- public rules ----\n \n     // Use default constants\n-    ($name:ident) => (\n+    ($v:vis struct $name:ident { .. }) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n             @max          [::std::u32::MAX]\n+            @vis          [$v]\n             @debug_format [\"{}\"]);\n     );\n \n     // Define any constants\n-    ($name:ident { $($tokens:tt)+ }) => (\n+    ($v:vis struct $name:ident { $($tokens:tt)+ }) => (\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n             @max          [::std::u32::MAX]\n+            @vis          [$v]\n             @debug_format [\"{}\"]\n                           $($tokens)+);\n     );\n@@ -78,9 +80,10 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n-        pub struct $type($($pub)* u32);\n+        $v struct $type($($pub)* u32);\n \n         impl Idx for $type {\n             #[inline]\n@@ -170,26 +173,30 @@ macro_rules! newtype_index {\n     // Handle the case where someone wants to make the internal field public\n     (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    pub idx\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @pub          [pub]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n \n     // The default case is that the internal field is private\n     (@type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @pub          []\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -198,13 +205,15 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           derive [$($derives,)*]\n                           $($tokens)*);\n@@ -215,6 +224,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    ENCODABLE = custom\n@@ -224,6 +234,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -233,6 +244,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n@@ -241,6 +253,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -250,6 +263,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n@@ -258,6 +272,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -266,13 +281,15 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [RustcDecodable, RustcEncodable,]\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -282,13 +299,15 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $name = $constant,);\n     );\n@@ -298,6 +317,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr) => (\n@@ -306,6 +326,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $(#[doc = $doc])* const $name = $constant,);\n     );\n@@ -315,6 +336,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    MAX = $max:expr,\n                    $($tokens:tt)*) => (\n@@ -323,6 +345,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -332,6 +355,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$_debug_format:tt]\n                    DEBUG_FORMAT = $debug_format:tt,\n                    $($tokens:tt)*) => (\n@@ -340,6 +364,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );\n@@ -349,6 +374,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n+     @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr,\n@@ -360,6 +386,7 @@ macro_rules! newtype_index {\n             @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n+            @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n     );"}, {"sha": "91008e8f9690ecf154c6c94d213ed5e906c0bebc", "filename": "src/librustc_mir/borrow_check/location.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -27,7 +27,11 @@ crate struct LocationTable {\n     statements_before_block: IndexVec<BasicBlock, usize>,\n }\n \n-newtype_index!(LocationIndex { DEBUG_FORMAT = \"LocationIndex({})\" });\n+newtype_index! {\n+    pub struct LocationIndex {\n+        DEBUG_FORMAT = \"LocationIndex({})\"\n+    }\n+}\n \n #[derive(Copy, Clone, Debug)]\n crate enum RichLocation {"}, {"sha": "817b215225b42996edf26c971caf0abe1a95eb7a", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -98,6 +98,14 @@ impl fmt::Debug for OutlivesConstraint {\n     }\n }\n \n-newtype_index!(ConstraintIndex { DEBUG_FORMAT = \"ConstraintIndex({})\" });\n+newtype_index! {\n+    pub struct ConstraintIndex {\n+        DEBUG_FORMAT = \"ConstraintIndex({})\"\n+    }\n+}\n \n-newtype_index!(ConstraintSccIndex { DEBUG_FORMAT = \"ConstraintSccIndex({})\" });\n+newtype_index! {\n+    pub struct ConstraintSccIndex {\n+        DEBUG_FORMAT = \"ConstraintSccIndex({})\"\n+    }\n+}"}, {"sha": "3dafab2f5a9f4da0ddd8e8b3b0b7fd50a9583ee6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -123,13 +123,17 @@ impl RegionValueElements {\n \n /// A single integer representing a `Location` in the MIR control-flow\n /// graph. Constructed efficiently from `RegionValueElements`.\n-newtype_index!(PointIndex { DEBUG_FORMAT = \"PointIndex({})\" });\n+newtype_index! {\n+    pub struct PointIndex { DEBUG_FORMAT = \"PointIndex({})\" }\n+}\n \n /// A single integer representing a (non-zero) `UniverseIndex`.\n /// Computed just by subtracting one from `UniverseIndex`; this is\n /// because the `0` value for `UniverseIndex` represents the root\n /// universe, and we don't need/want a bit for that one.\n-newtype_index!(PlaceholderIndex { DEBUG_FORMAT = \"PlaceholderIndex({})\" });\n+newtype_index! {\n+    pub struct PlaceholderIndex { DEBUG_FORMAT = \"PlaceholderIndex({})\" }\n+}\n \n /// An individual element in a region value -- the value of a\n /// particular region variable consists of a set of these elements."}, {"sha": "467554dc38a67e4be9d5717c3ae48b42a25ffc50", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -97,6 +97,6 @@ impl NllLivenessMap {\n /// compute liveness information. For many locals, we are able to\n /// skip liveness information: for example, those variables whose\n /// types contain no regions.\n-newtype_index!(\n-    LiveVar\n-);\n+newtype_index! {\n+    pub struct LiveVar { .. }\n+}"}, {"sha": "4b39d58cd96a82e3c7479aa84429241bb63908f5", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -48,7 +48,9 @@ struct Appearance {\n     next: Option<AppearanceIndex>,\n }\n \n-newtype_index!(AppearanceIndex);\n+newtype_index! {\n+    pub struct AppearanceIndex { .. }\n+}\n \n impl vll::LinkElem for Appearance {\n     type LinkIndex = AppearanceIndex;"}, {"sha": "322a6977bedd0b925165bdfa9f8e352922c5c5f2", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1242639b88b0dee9ebb0f103efe017826c5b334e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=1242639b88b0dee9ebb0f103efe017826c5b334e", "patch": "@@ -402,7 +402,9 @@ struct CFG<'tcx> {\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n }\n \n-newtype_index!(ScopeId);\n+newtype_index! {\n+    pub struct ScopeId { .. }\n+}\n \n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a"}]}