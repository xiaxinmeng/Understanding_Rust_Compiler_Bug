{"sha": "84b62a08b94571649f68ea2361ad17431394fd43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YjYyYTA4Yjk0NTcxNjQ5ZjY4ZWEyMzYxYWQxNzQzMTM5NGZkNDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-26T12:17:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-26T12:17:48Z"}, "message": "Rollup merge of #65824 - eddyb:def-key-copy, r=varkor\n\nrustc: make DefPathData (and friends) Copy (now that it uses Symbol).\n\nSpotted this while working on something else.", "tree": {"sha": "6146855e2568ddcecec5effbf5f4450fc6dd94fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6146855e2568ddcecec5effbf5f4450fc6dd94fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84b62a08b94571649f68ea2361ad17431394fd43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtDlsCRBK7hj4Ov3rIwAAdHIIAI6hgSe+j/rexNNrkMGie4E0\n5mnmYixil9txz98Z1JZSXObC1EjdnUAKYFCPPVoaJOgfBm631Y4aiKlKUaWXZCXR\niWLYFGGbfb96cmjZ1kpAzGUGGGMbZQotWDoy6ZnYTtNZSfubYD1PjL/hjsaXD3tq\nh+x4YLGUxfqP85sme73A2euMetXXOyIlLcUUeKfe8A+M62ud/dQutcCpidvuIj8g\nXJ8kz9haPyYr37SV/FUENYsQtFQZIRsVom4DN+2lYpcLXfR4HwiE1pdyGaHBs8lx\nYfE+qdojepiIsvG1QZsimkYHfxG43/cW5wPquqhPVpZ+3yoeRETMAz530uUEFu0=\n=NJK/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6146855e2568ddcecec5effbf5f4450fc6dd94fb\nparent 7325a886e253a0632a9c346cfccd201323c74ee8\nparent 595d19e6258f2bb6a8f36a1f6f1065ae52efb47e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572092268 +0200\ncommitter GitHub <noreply@github.com> 1572092268 +0200\n\nRollup merge of #65824 - eddyb:def-key-copy, r=varkor\n\nrustc: make DefPathData (and friends) Copy (now that it uses Symbol).\n\nSpotted this while working on something else.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84b62a08b94571649f68ea2361ad17431394fd43", "html_url": "https://github.com/rust-lang/rust/commit/84b62a08b94571649f68ea2361ad17431394fd43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84b62a08b94571649f68ea2361ad17431394fd43/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7325a886e253a0632a9c346cfccd201323c74ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7325a886e253a0632a9c346cfccd201323c74ee8", "html_url": "https://github.com/rust-lang/rust/commit/7325a886e253a0632a9c346cfccd201323c74ee8"}, {"sha": "595d19e6258f2bb6a8f36a1f6f1065ae52efb47e", "url": "https://api.github.com/repos/rust-lang/rust/commits/595d19e6258f2bb6a8f36a1f6f1065ae52efb47e", "html_url": "https://github.com/rust-lang/rust/commit/595d19e6258f2bb6a8f36a1f6f1065ae52efb47e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "58e638e93ba34463c8409300280ea6e565839300", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84b62a08b94571649f68ea2361ad17431394fd43/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b62a08b94571649f68ea2361ad17431394fd43/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=84b62a08b94571649f68ea2361ad17431394fd43", "patch": "@@ -53,7 +53,7 @@ impl DefPathTable {\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.index()].clone()\n+        self.index_to_key[index.index()]\n     }\n \n     #[inline(always)]\n@@ -111,7 +111,7 @@ pub struct Definitions {\n /// A unique identifier that we can use to lookup a definition\n /// precisely. It combines the index of the definition's parent (if\n /// any) with a `DisambiguatedDefPathData`.\n-#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub struct DefKey {\n     /// The parent path.\n     pub parent: Option<DefIndex>,\n@@ -164,7 +164,7 @@ impl DefKey {\n /// between them. This introduces some artificial ordering dependency\n /// but means that if you have, e.g., two impls for the same type in\n /// the same module, they do get distinct `DefId`s.\n-#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub struct DisambiguatedDefPathData {\n     pub data: DefPathData,\n     pub disambiguator: u32\n@@ -277,7 +277,7 @@ impl DefPath {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum DefPathData {\n     // Root: these should only be used for the root nodes, because\n     // they are treated specially by the `def_path` function.\n@@ -359,7 +359,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn opt_def_index(&self, node: ast::NodeId) -> Option<DefIndex> {\n-        self.node_to_def_index.get(&node).cloned()\n+        self.node_to_def_index.get(&node).copied()\n     }\n \n     #[inline]\n@@ -413,7 +413,7 @@ impl Definitions {\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {\n         if def_id.krate == LOCAL_CRATE {\n-            self.def_index_to_span.get(&def_id.index).cloned()\n+            self.def_index_to_span.get(&def_id.index).copied()\n         } else {\n             None\n         }\n@@ -472,7 +472,7 @@ impl Definitions {\n \n         // Find the next free disambiguator for this key.\n         let disambiguator = {\n-            let next_disamb = self.next_disambiguator.entry((parent, data.clone())).or_insert(0);\n+            let next_disamb = self.next_disambiguator.entry((parent, data)).or_insert(0);\n             let disambiguator = *next_disamb;\n             *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n             disambiguator\n@@ -525,7 +525,7 @@ impl Definitions {\n     }\n \n     pub fn expansion_that_defined(&self, index: DefIndex) -> ExpnId {\n-        self.expansions_that_defined.get(&index).cloned().unwrap_or(ExpnId::root())\n+        self.expansions_that_defined.get(&index).copied().unwrap_or(ExpnId::root())\n     }\n \n     pub fn parent_module_of_macro_def(&self, expn_id: ExpnId) -> DefId {"}]}