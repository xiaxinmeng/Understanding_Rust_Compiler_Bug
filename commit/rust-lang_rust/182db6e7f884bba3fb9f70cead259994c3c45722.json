{"sha": "182db6e7f884bba3fb9f70cead259994c3c45722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MmRiNmU3Zjg4NGJiYTNmYjlmNzBjZWFkMjU5OTk0YzNjNDU3MjI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T16:16:44Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T16:51:45Z"}, "message": "Add tests for assoc type issues that have been fixed\n\nCloses #17732\nCloses #18819\nCloses #19479\nCloses #19631\nCloses #19632\nCloses #19850\nCloses #19883\nCloses #20005\nCloses #20009\nCloses #20389", "tree": {"sha": "56a727d329805ad9fb2cdf8f441a9982d08a64af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56a727d329805ad9fb2cdf8f441a9982d08a64af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182db6e7f884bba3fb9f70cead259994c3c45722", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182db6e7f884bba3fb9f70cead259994c3c45722", "html_url": "https://github.com/rust-lang/rust/commit/182db6e7f884bba3fb9f70cead259994c3c45722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182db6e7f884bba3fb9f70cead259994c3c45722/comments", "author": null, "committer": null, "parents": [{"sha": "c594959cdff07b5545747809bb045bfa2868ebcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c594959cdff07b5545747809bb045bfa2868ebcc", "html_url": "https://github.com/rust-lang/rust/commit/c594959cdff07b5545747809bb045bfa2868ebcc"}], "stats": {"total": 255, "additions": 255, "deletions": 0}, "files": [{"sha": "60e3cb13e2e46a88a4d1b0693feec04b212f5db2", "filename": "src/test/auxiliary/issue_20389.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_20389.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+\n+pub trait T {\n+    type C;\n+}"}, {"sha": "32a51ee065b177daace40ac5b38a3985c46b04a2", "filename": "src/test/compile-fail/issue-18819.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+\n+trait Foo {\n+    type Item;\n+}\n+\n+struct X;\n+\n+impl Foo for X {\n+    type Item = bool;\n+}\n+\n+fn print_x(_: &Foo, extra: &str) {\n+    println!(\"{}\", extra);\n+}\n+\n+fn main() {\n+    print_x(X);  //~error this function takes 2 parameters but 1 parameter was supplied\n+}"}, {"sha": "5f1d0f4ab7bcf62c6783f0166621e3420dc1b528", "filename": "src/test/compile-fail/issue-19883.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+\n+trait From<Src> {\n+    type Output;\n+\n+    fn from(src: Src) -> <Self as From<Src>>::Output;\n+}\n+\n+trait To {\n+    // This is a typo, the return type should be `<Dst as From<Self>>::Output`\n+    fn to<Dst: From<Self>>(self) -> <Dst as From<Self>>::Dst {\n+    //~ error: the trait `core::kinds::Sized` is not implemented\n+        From::from(self)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d5b04c1864367206824c881aa146fe846417bc55", "filename": "src/test/compile-fail/issue-20005.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+\n+trait From<Src> {\n+    type Result;\n+\n+    fn from(src: Src) -> Self::Result;\n+}\n+\n+trait To {\n+    fn to<Dst>(self) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+        From::from(self)  //~error: type annotations required\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "45d3b53132dbf52d4f4c920a2356061ef5614de5", "filename": "src/test/run-pass/issue-17732.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17732.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+trait Person {\n+    type string;\n+}\n+\n+struct Someone<P: Person>;\n+\n+fn main() {}"}, {"sha": "b3354530a0c3889cd0ffd61247119815fba1cb08", "filename": "src/test/run-pass/issue-19479.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19479.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+trait Base {}\n+trait AssocA {\n+    type X: Base;\n+}\n+trait AssocB {\n+    type Y: Base;\n+}\n+impl<T: AssocA> AssocB for T {\n+    type Y = <T as AssocA>::X;\n+}\n+\n+fn main() {}"}, {"sha": "d036bab99f8801b56c2b2365077b8c21692625d9", "filename": "src/test/run-pass/issue-19631.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19631.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+\n+trait PoolManager {\n+    type C;\n+}\n+\n+struct InnerPool<M> {\n+    manager: M,\n+}\n+\n+impl<M> InnerPool<M> where M: PoolManager {}\n+\n+fn main() {}"}, {"sha": "9bc74e5017305d8ce7544a7a9898dc5c86cb108a", "filename": "src/test/run-pass/issue-19632.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19632.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_types)]\n+\n+trait PoolManager {\n+    type C;\n+}\n+\n+struct InnerPool<M: PoolManager> {\n+    manager: M,\n+}\n+\n+fn main() {}"}, {"sha": "cd56fe186892437db61ef0f8aaa40013dcfb3fc3", "filename": "src/test/run-pass/issue-19850.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-19850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19850.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `<Type as Trait>::Output` and `Self::Output` are accepted as type annotations in let\n+// bindings\n+\n+#![feature(associated_types)]\n+\n+trait Int {\n+    fn one() -> Self;\n+    fn leading_zeros(self) -> uint;\n+}\n+\n+trait Foo {\n+    type T : Int;\n+\n+    fn test(&self) {\n+        let r: <Self as Foo>::T = Int::one();\n+        let r: Self::T = Int::one();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "535538793d1cf5177baef0be835a8e2e84e6df52", "filename": "src/test/run-pass/issue-20009.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-20009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-20009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20009.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that associated types are `Sized`\n+\n+#![feature(associated_types)]\n+\n+trait Trait {\n+    type Output;\n+\n+    fn is_sized(&self) -> Self::Output;\n+    fn wasnt_sized(&self) -> Self::Output { loop {} }\n+}\n+\n+fn main() {}"}, {"sha": "0ef14149c94301ccf6720a630c9fc7116b33bd65", "filename": "src/test/run-pass/issue-20389.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182db6e7f884bba3fb9f70cead259994c3c45722/src%2Ftest%2Frun-pass%2Fissue-20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20389.rs?ref=182db6e7f884bba3fb9f70cead259994c3c45722", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_20389.rs\n+\n+#![feature(associated_types)]\n+extern crate issue_20389;\n+\n+struct Foo;\n+\n+impl issue_20389::T for Foo {\n+    type C = ();\n+}\n+\n+fn main() {}"}]}