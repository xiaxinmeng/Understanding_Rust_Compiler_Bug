{"sha": "d626e4dadc37d7027d65f087da0ad1ddb460959f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjZlNGRhZGMzN2Q3MDI3ZDY1ZjA4N2RhMGFkMWRkYjQ2MDk1OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T08:53:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T08:53:03Z"}, "message": "Auto merge of #71828 - Dylan-DPC:rollup-qf5h2w5, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71165 (`slice::fill`: use `T` instead of generic arg)\n - #71314 (Implement RFC 2523, `#[cfg(version(..))]`)\n - #71542 (Implement `confusable_idents` lint.)\n - #71806 (typo)\n - #71813 (Decode qualifs for associated const defaults)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d48e6d23573a7738dd831a1184de3c79c5d673b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d48e6d23573a7738dd831a1184de3c79c5d673b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d626e4dadc37d7027d65f087da0ad1ddb460959f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d626e4dadc37d7027d65f087da0ad1ddb460959f", "html_url": "https://github.com/rust-lang/rust/commit/d626e4dadc37d7027d65f087da0ad1ddb460959f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d626e4dadc37d7027d65f087da0ad1ddb460959f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "html_url": "https://github.com/rust-lang/rust/commit/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf"}, {"sha": "e48a7b8d069ef7b8364b730bf37b01b19f21a3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48a7b8d069ef7b8364b730bf37b01b19f21a3b0", "html_url": "https://github.com/rust-lang/rust/commit/e48a7b8d069ef7b8364b730bf37b01b19f21a3b0"}], "stats": {"total": 652, "additions": 573, "deletions": 79}, "files": [{"sha": "74578084a72c8d7c75ef15c5ebd1fea7b67daf41", "filename": "Cargo.lock", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -74,7 +74,7 @@ name = \"arena\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -492,7 +492,7 @@ dependencies = [\n  \"regex-syntax\",\n  \"semver\",\n  \"serde\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"toml\",\n  \"unicode-normalization\",\n  \"url 2.1.0\",\n@@ -2428,7 +2428,7 @@ dependencies = [\n  \"cloudabi\",\n  \"libc\",\n  \"redox_syscall\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"winapi 0.3.8\",\n ]\n \n@@ -3151,7 +3151,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"81dfcfbb0ddfd533abf8c076e3b49d1e5042d1962526a12ce2c66d514b24cca3\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3174,7 +3174,7 @@ dependencies = [\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-serialize\",\n  \"scoped-tls\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3223,7 +3223,7 @@ dependencies = [\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3249,7 +3249,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"winapi 0.3.8\",\n ]\n@@ -3291,7 +3291,7 @@ dependencies = [\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n  \"rustc-ap-serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3318,7 +3318,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"32220c3e6cdf226f38e4474b747dca15f3106bb680c74f10b299af3f6cdb1663\"\n dependencies = [\n  \"rustc-ap-serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3358,7 +3358,7 @@ dependencies = [\n  \"rustc-ap-rustc_lexer\",\n  \"rustc-ap-rustc_session\",\n  \"rustc-ap-rustc_span\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"unicode-normalization\",\n ]\n \n@@ -3423,7 +3423,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"756e8f526ec7906e132188bf25e3c10a6ee42ab77294ecb3b3602647f0508eef\"\n dependencies = [\n  \"indexmap\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3507,7 +3507,7 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"smallvec 0.6.10\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"syn 0.15.35\",\n  \"url 2.1.0\",\n  \"winapi 0.3.8\",\n@@ -3518,7 +3518,7 @@ name = \"rustc_apfloat\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3533,7 +3533,7 @@ dependencies = [\n  \"rustc_span\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3551,7 +3551,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3593,6 +3593,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n+ \"version_check\",\n ]\n \n [[package]]\n@@ -3612,7 +3613,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3641,7 +3642,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3694,7 +3695,7 @@ dependencies = [\n  \"rustc-rayon-core\",\n  \"rustc_index\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"winapi 0.3.8\",\n ]\n@@ -3768,7 +3769,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3797,7 +3798,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3833,7 +3834,7 @@ name = \"rustc_index\"\n version = \"0.0.0\"\n dependencies = [\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3853,7 +3854,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -3895,7 +3896,7 @@ dependencies = [\n  \"rustc_ty\",\n  \"rustc_typeck\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"tempfile\",\n  \"winapi 0.3.8\",\n ]\n@@ -3968,7 +3969,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"winapi 0.3.8\",\n ]\n@@ -4000,7 +4001,7 @@ dependencies = [\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4029,7 +4030,7 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4053,7 +4054,7 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4134,7 +4135,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_span\",\n  \"serialize\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4157,7 +4158,7 @@ dependencies = [\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4272,7 +4273,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4287,7 +4288,7 @@ dependencies = [\n  \"rustc_middle\",\n  \"rustc_span\",\n  \"rustc_trait_selection\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4324,7 +4325,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4568,7 +4569,7 @@ name = \"serialize\"\n version = \"0.0.0\"\n dependencies = [\n  \"indexmap\",\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -4635,9 +4636,9 @@ checksum = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.0.0\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ecf3b85f68e8abaa7555aa5abdb1153079387e60b718283d732f03897fcfc86\"\n+checksum = \"c7cb5678e1615754284ec264d9bb5b4c27d2018577fd90ac0ceb578591ed5ee4\"\n \n [[package]]\n name = \"socket2\"\n@@ -5359,11 +5360,11 @@ dependencies = [\n \n [[package]]\n name = \"unicode-normalization\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b561e267b2326bb4cebfc0ef9e68355c7abe6c6f522aeac2f5bf95d56c59bdcf\"\n+checksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n dependencies = [\n- \"smallvec 1.0.0\",\n+ \"smallvec 1.4.0\",\n ]\n \n [[package]]\n@@ -5374,10 +5375,11 @@ checksum = \"5b2c5c29e805da6817f5af6a627d65adb045cebf05cccd5a3493d6109454391c\"\n \n [[package]]\n name = \"unicode-security\"\n-version = \"0.0.2\"\n+version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c49d35967fa037b881acc34ef717c38c4b5560eba10e3685271b3f530bb19634\"\n+checksum = \"a5f9011bbed9c13372bc8df618b55a38138445199caf3b61d432c6859c36dee0\"\n dependencies = [\n+ \"unicode-normalization\",\n  \"unicode-script\",\n ]\n "}, {"sha": "2b1e50835b7676ace00a28da09b1fdf041113f07", "filename": "src/doc/unstable-book/src/language-features/cfg-version.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -0,0 +1,34 @@\n+# `cfg_version`\n+\n+The tracking issue for this feature is: [#64796]\n+\n+[#64796]: https://github.com/rust-lang/rust/issues/64796\n+\n+------------------------\n+\n+The `cfg_version` feature makes it possible to execute different code\n+depending on the compiler version.\n+\n+## Examples\n+\n+```rust\n+#![feature(cfg_version)]\n+\n+#[cfg(version(\"1.42\"))]\n+fn a() {\n+    // ...\n+}\n+\n+#[cfg(not(version(\"1.42\")))]\n+fn a() {\n+    // ...\n+}\n+\n+fn b() {\n+    if cfg!(version(\"1.42\")) {\n+        // ...\n+    } else {\n+        // ...\n+    }\n+}\n+```"}, {"sha": "f74c6862006c16bf8829361696995a5be4708d4d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -23,7 +23,6 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n-use crate::borrow::Borrow;\n use crate::cmp;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::fmt;\n@@ -2157,14 +2156,16 @@ impl<T> [T] {\n     /// assert_eq!(buf, vec![1; 10]);\n     /// ```\n     #[unstable(feature = \"slice_fill\", issue = \"70758\")]\n-    pub fn fill<V>(&mut self, value: V)\n+    pub fn fill(&mut self, value: T)\n     where\n-        V: Borrow<T>,\n         T: Clone,\n     {\n-        let value = value.borrow();\n-        for el in self {\n-            el.clone_from(value)\n+        if let Some((last, elems)) = self.split_last_mut() {\n+            for el in elems {\n+                el.clone_from(&value);\n+            }\n+\n+            *last = value\n         }\n     }\n "}, {"sha": "d7af7fe6143e543985d41d1a33756f8ed91871a6", "filename": "src/librustc_attr/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n name = \"rustc_attr\"\n version = \"0.0.0\"\n edition = \"2018\"\n+build = \"build.rs\"\n \n [lib]\n name = \"rustc_attr\"\n@@ -19,3 +20,4 @@ rustc_feature = { path = \"../librustc_feature\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }\n+version_check = \"0.9\""}, {"sha": "d230ba91039adc9581745ee39a492fa91e3b52b0", "filename": "src/librustc_attr/build.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuild.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+    println!(\"cargo:rerun-if-env-changed=CFG_VERSION\");\n+}"}, {"sha": "ce38e3f5f4e4efe8eda12a21f04513241eca45d3", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -2,7 +2,7 @@\n \n use super::{find_by_name, mark_used};\n \n-use rustc_ast::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_ast::ast::{self, Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n@@ -11,6 +11,7 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n use std::num::NonZeroU32;\n+use version_check::Version;\n \n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n@@ -568,11 +569,8 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {\n \n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n-    eval_condition(cfg, sess, &mut |cfg| {\n-        let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n-        if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n-            gate_cfg(&gated_cfg, cfg.span, sess, feats);\n-        }\n+    eval_condition(cfg, sess, features, &mut |cfg| {\n+        try_gate_cfg(cfg, sess, features);\n         let error = |span, msg| {\n             sess.span_diagnostic.span_err(span, msg);\n             true\n@@ -603,6 +601,13 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n     })\n }\n \n+fn try_gate_cfg(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) {\n+    let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n+    if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n+        gate_cfg(&gated_cfg, cfg.span, sess, feats);\n+    }\n+}\n+\n fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {\n     let (cfg, feature, has_feature) = gated_cfg;\n     if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n@@ -616,9 +621,41 @@ fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &F\n pub fn eval_condition(\n     cfg: &ast::MetaItem,\n     sess: &ParseSess,\n+    features: Option<&Features>,\n     eval: &mut impl FnMut(&ast::MetaItem) -> bool,\n ) -> bool {\n     match cfg.kind {\n+        ast::MetaItemKind::List(ref mis) if cfg.name_or_empty() == sym::version => {\n+            try_gate_cfg(cfg, sess, features);\n+            let (min_version, span) = match &mis[..] {\n+                [NestedMetaItem::Literal(Lit { kind: LitKind::Str(sym, ..), span, .. })] => {\n+                    (sym, span)\n+                }\n+                [NestedMetaItem::Literal(Lit { span, .. })\n+                | NestedMetaItem::MetaItem(MetaItem { span, .. })] => {\n+                    sess.span_diagnostic\n+                        .struct_span_err(*span, &*format!(\"expected a version literal\"))\n+                        .emit();\n+                    return false;\n+                }\n+                [..] => {\n+                    sess.span_diagnostic\n+                        .struct_span_err(cfg.span, \"expected single version literal\")\n+                        .emit();\n+                    return false;\n+                }\n+            };\n+            let min_version = match Version::parse(&min_version.as_str()) {\n+                Some(ver) => ver,\n+                None => {\n+                    sess.span_diagnostic.struct_span_err(*span, \"invalid version literal\").emit();\n+                    return false;\n+                }\n+            };\n+            let version = Version::parse(env!(\"CFG_VERSION\")).unwrap();\n+\n+            version >= min_version\n+        }\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n@@ -634,12 +671,12 @@ pub fn eval_condition(\n             // The unwraps below may look dangerous, but we've already asserted\n             // that they won't fail with the loop above.\n             match cfg.name_or_empty() {\n-                sym::any => {\n-                    mis.iter().any(|mi| eval_condition(mi.meta_item().unwrap(), sess, eval))\n-                }\n-                sym::all => {\n-                    mis.iter().all(|mi| eval_condition(mi.meta_item().unwrap(), sess, eval))\n-                }\n+                sym::any => mis\n+                    .iter()\n+                    .any(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n+                sym::all => mis\n+                    .iter()\n+                    .all(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n                 sym::not => {\n                     if mis.len() != 1 {\n                         struct_span_err!(\n@@ -652,7 +689,7 @@ pub fn eval_condition(\n                         return false;\n                     }\n \n-                    !eval_condition(mis[0].meta_item().unwrap(), sess, eval)\n+                    !eval_condition(mis[0].meta_item().unwrap(), sess, features, eval)\n                 }\n                 _ => {\n                     struct_span_err!("}, {"sha": "66c4495c5afc8fe81fffe8939c483c937a00479f", "filename": "src/librustc_attr/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_attr%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Flib.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -4,6 +4,8 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n+#![feature(or_patterns)]\n+\n mod builtin;\n \n pub use builtin::*;"}, {"sha": "10baffb28ac2d0666658120837798aa1c21fe2aa", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -141,10 +141,10 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             SingleQuote => op!('\\''),\n \n             Ident(name, false) if name == kw::DollarCrate => tt!(Ident::dollar_crate()),\n-            Ident(name, is_raw) => tt!(Ident::new(name, is_raw)),\n+            Ident(name, is_raw) => tt!(Ident::new(sess, name, is_raw)),\n             Lifetime(name) => {\n                 let ident = ast::Ident::new(name, span).without_first_quote();\n-                stack.push(tt!(Ident::new(ident.name, false)));\n+                stack.push(tt!(Ident::new(sess, ident.name, false)));\n                 tt!(Punct::new('\\'', true))\n             }\n             Literal(lit) => tt!(Literal { lit }),\n@@ -322,7 +322,7 @@ impl Ident {\n             false\n         }\n     }\n-    fn new(sym: Symbol, is_raw: bool, span: Span) -> Ident {\n+    fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n         let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n         if !Self::is_valid(&string) {\n@@ -331,6 +331,7 @@ impl Ident {\n         if is_raw && !sym.can_be_raw() {\n             panic!(\"`{}` cannot be a raw identifier\", string);\n         }\n+        sess.symbol_gallery.insert(sym, span);\n         Ident { sym, is_raw, span }\n     }\n     fn dollar_crate(span: Span) -> Ident {\n@@ -495,7 +496,7 @@ impl server::Punct for Rustc<'_> {\n \n impl server::Ident for Rustc<'_> {\n     fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {\n-        Ident::new(Symbol::intern(string), is_raw, span)\n+        Ident::new(self.sess, Symbol::intern(string), is_raw, span)\n     }\n     fn span(&mut self, ident: Self::Ident) -> Self::Span {\n         ident.span"}, {"sha": "a1dd7a5ca5225ea471b66082c22ba6eebb5e9e32", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -562,6 +562,9 @@ declare_features! (\n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n \n+    /// Allow conditional compilation depending on rust version\n+    (active, cfg_version, \"1.45.0\", Some(64796), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "466b318bca7305386e02c705678e681b37ce6c5c", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -26,6 +26,7 @@ const GATED_CFGS: &[GatedCfg] = &[\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n+    (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),\n ];\n \n /// Find a gated cfg determined by the `pred`icate which is given the cfg's name."}, {"sha": "a2907e6e373b8cdc6d772ec86978184e7e20200d", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -657,7 +657,7 @@ where\n             // Reset the ambient variance to covariant. This is needed\n             // to correctly handle cases like\n             //\n-            //     for<'a> fn(&'a u32, &'a u3) == for<'b, 'c> fn(&'b u32, &'c u32)\n+            //     for<'a> fn(&'a u32, &'a u32) == for<'b, 'c> fn(&'b u32, &'c u32)\n             //\n             // Somewhat surprisingly, these two types are actually\n             // **equal**, even though the one on the right looks more"}, {"sha": "ada6f2a9381dc3db719a5f92b9fa18b1022dd084", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n-unicode-security = \"0.0.2\"\n+unicode-security = \"0.0.3\"\n rustc_middle = { path = \"../librustc_middle\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "274e57ae64cac350696400682972a8d5eb68d4e3", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -388,6 +388,11 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.cur = push.prev;\n     }\n \n+    /// Find the lint level for a lint.\n+    pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintSource) {\n+        self.sets.get_lint_level(lint, self.cur, None, self.sess)\n+    }\n+\n     /// Used to emit a lint-related diagnostic based on the current state of\n     /// this lint context.\n     pub fn struct_lint(\n@@ -396,7 +401,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         span: Option<MultiSpan>,\n         decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n     ) {\n-        let (level, src) = self.sets.get_lint_level(lint, self.cur, None, self.sess);\n+        let (level, src) = self.lint_level(lint);\n         struct_lint_level(self.sess, lint, level, src, span, decorate)\n     }\n "}, {"sha": "94fc1a228df03a89f84e496ba0cf73d3f74c13d5", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 140, "deletions": 1, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -1,5 +1,9 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::symbol::SymbolStr;\n+use std::hash::{Hash, Hasher};\n+use std::ops::Deref;\n \n declare_lint! {\n     pub NON_ASCII_IDENTS,\n@@ -13,9 +17,144 @@ declare_lint! {\n     \"detects uncommon Unicode codepoints in identifiers\"\n }\n \n-declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS]);\n+// FIXME: Change this to warn.\n+declare_lint! {\n+    pub CONFUSABLE_IDENTS,\n+    Allow,\n+    \"detects visually confusable pairs between identifiers\"\n+}\n+\n+declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS]);\n+\n+enum CowBoxSymStr {\n+    Interned(SymbolStr),\n+    Owned(Box<str>),\n+}\n+\n+impl Deref for CowBoxSymStr {\n+    type Target = str;\n+\n+    fn deref(&self) -> &str {\n+        match self {\n+            CowBoxSymStr::Interned(interned) => interned,\n+            CowBoxSymStr::Owned(ref owned) => owned,\n+        }\n+    }\n+}\n+\n+impl Hash for CowBoxSymStr {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        Hash::hash(&**self, state)\n+    }\n+}\n+\n+impl PartialEq<CowBoxSymStr> for CowBoxSymStr {\n+    #[inline]\n+    fn eq(&self, other: &CowBoxSymStr) -> bool {\n+        PartialEq::eq(&**self, &**other)\n+    }\n+}\n+\n+impl Eq for CowBoxSymStr {}\n+\n+fn calc_skeleton(symbol_str: SymbolStr, buffer: &'_ mut String) -> CowBoxSymStr {\n+    use std::mem::swap;\n+    use unicode_security::confusable_detection::skeleton;\n+    buffer.clear();\n+    buffer.extend(skeleton(&symbol_str));\n+    if symbol_str == *buffer {\n+        CowBoxSymStr::Interned(symbol_str)\n+    } else {\n+        let mut owned = String::new();\n+        swap(buffer, &mut owned);\n+        CowBoxSymStr::Owned(owned.into_boxed_str())\n+    }\n+}\n+\n+fn is_in_ascii_confusable_closure(c: char) -> bool {\n+    // FIXME: move this table to `unicode_security` crate.\n+    // data here corresponds to Unicode 13.\n+    const ASCII_CONFUSABLE_CLOSURE: &[(u64, u64)] = &[(0x00, 0x7f), (0xba, 0xba), (0x2080, 0x2080)];\n+    let c = c as u64;\n+    for &(range_start, range_end) in ASCII_CONFUSABLE_CLOSURE {\n+        if c >= range_start && c <= range_end {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn is_in_ascii_confusable_closure_relevant_list(c: char) -> bool {\n+    // FIXME: move this table to `unicode_security` crate.\n+    // data here corresponds to Unicode 13.\n+    const ASCII_CONFUSABLE_CLOSURE_RELEVANT_LIST: &[u64] = &[\n+        0x22, 0x25, 0x27, 0x2f, 0x30, 0x31, 0x49, 0x4f, 0x60, 0x6c, 0x6d, 0x6e, 0x72, 0x7c, 0xba,\n+        0x2080,\n+    ];\n+    let c = c as u64;\n+    for &item in ASCII_CONFUSABLE_CLOSURE_RELEVANT_LIST {\n+        if c == item {\n+            return true;\n+        }\n+    }\n+    false\n+}\n \n impl EarlyLintPass for NonAsciiIdents {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n+        use rustc_session::lint::Level;\n+        if cx.builder.lint_level(CONFUSABLE_IDENTS).0 == Level::Allow {\n+            return;\n+        }\n+        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        let mut symbol_strs_and_spans = Vec::with_capacity(symbols.len());\n+        let mut in_fast_path = true;\n+        for (symbol, sp) in symbols.iter() {\n+            // fast path\n+            let symbol_str = symbol.as_str();\n+            if !symbol_str.chars().all(is_in_ascii_confusable_closure) {\n+                // fallback to slow path.\n+                symbol_strs_and_spans.clear();\n+                in_fast_path = false;\n+                break;\n+            }\n+            if symbol_str.chars().any(is_in_ascii_confusable_closure_relevant_list) {\n+                symbol_strs_and_spans.push((symbol_str, *sp));\n+            }\n+        }\n+        if !in_fast_path {\n+            // slow path\n+            for (symbol, sp) in symbols.iter() {\n+                let symbol_str = symbol.as_str();\n+                symbol_strs_and_spans.push((symbol_str, *sp));\n+            }\n+        }\n+        drop(symbols);\n+        symbol_strs_and_spans.sort_by_key(|x| x.0.clone());\n+        let mut skeleton_map =\n+            FxHashMap::with_capacity_and_hasher(symbol_strs_and_spans.len(), Default::default());\n+        let mut str_buf = String::new();\n+        for (symbol_str, sp) in symbol_strs_and_spans {\n+            let skeleton = calc_skeleton(symbol_str.clone(), &mut str_buf);\n+            skeleton_map\n+                .entry(skeleton)\n+                .and_modify(|(existing_symbolstr, existing_span)| {\n+                    cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n+                        lint.build(&format!(\n+                            \"identifier pair considered confusable between `{}` and `{}`\",\n+                            existing_symbolstr, symbol_str\n+                        ))\n+                        .span_label(\n+                            *existing_span,\n+                            \"this is where the previous identifier occurred\",\n+                        )\n+                        .emit();\n+                    });\n+                })\n+                .or_insert((symbol_str, sp));\n+        }\n+    }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n         use unicode_security::GeneralSecurityProfile;\n         let name_str = ident.name.as_str();"}, {"sha": "04f17230717d978657c117f6b71572e9c879606e", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -1123,11 +1123,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         match self.kind(id) {\n             EntryKind::Const(qualif, _)\n             | EntryKind::AssocConst(\n-                AssocContainer::ImplDefault | AssocContainer::ImplFinal,\n+                AssocContainer::ImplDefault\n+                | AssocContainer::ImplFinal\n+                | AssocContainer::TraitWithDefault,\n                 qualif,\n                 _,\n             ) => qualif,\n-            _ => bug!(),\n+            _ => bug!(\"mir_const_qualif: unexpected kind\"),\n         }\n     }\n "}, {"sha": "f676a34a1d12b34cddd0d54393eae470159bd10f", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -222,8 +222,9 @@ impl<'a> StringReader<'a> {\n                     ident_start = ident_start + BytePos(2);\n                 }\n                 let sym = nfc_normalize(self.str_from(ident_start));\n+                let span = self.mk_sp(start, self.pos);\n+                self.sess.symbol_gallery.insert(sym, span);\n                 if is_raw_ident {\n-                    let span = self.mk_sp(start, self.pos);\n                     if !sym.can_be_raw() {\n                         self.err_span(span, &format!(\"`{}` cannot be a raw identifier\", sym));\n                     }"}, {"sha": "69d3e99b7458e59693616657b089e695359e12e0", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -60,6 +60,20 @@ impl GatedSpans {\n     }\n }\n \n+#[derive(Default)]\n+pub struct SymbolGallery {\n+    /// All symbols occurred and their first occurrance span.\n+    pub symbols: Lock<FxHashMap<Symbol, Span>>,\n+}\n+\n+impl SymbolGallery {\n+    /// Insert a symbol and its span into symbol gallery.\n+    /// If the symbol has occurred before, ignore the new occurance.\n+    pub fn insert(&self, symbol: Symbol, span: Span) {\n+        self.symbols.lock().entry(symbol).or_insert(span);\n+    }\n+}\n+\n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n pub fn feature_err<'a>(\n@@ -118,6 +132,7 @@ pub struct ParseSess {\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n     pub injected_crate_name: Once<Symbol>,\n     pub gated_spans: GatedSpans,\n+    pub symbol_gallery: SymbolGallery,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n }\n@@ -143,6 +158,7 @@ impl ParseSess {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             injected_crate_name: Once::new(),\n             gated_spans: GatedSpans::default(),\n+            symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n         }\n     }"}, {"sha": "f194506e66069b6ba2d8a4eedcbfb2c1697caa62", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -192,6 +192,7 @@ symbols! {\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n+        cfg_version,\n         char,\n         clippy,\n         clone,\n@@ -805,6 +806,7 @@ symbols! {\n         var,\n         vec,\n         Vec,\n+        version,\n         vis,\n         visible_private_types,\n         volatile,"}, {"sha": "3fbc0b7f08e5f1a52bdc2e975a582ca2b4eb0f54", "filename": "src/librustc_trait_selection/traits/on_unimplemented.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> OnUnimplementedDirective {\n                         None,\n                     )\n                 })?;\n-            attr::eval_condition(cond, &tcx.sess.parse_sess, &mut |_| true);\n+            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |_| true);\n             Some(cond.clone())\n         };\n \n@@ -208,11 +208,16 @@ impl<'tcx> OnUnimplementedDirective {\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n-                if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    c.ident().map_or(false, |ident| {\n-                        options.contains(&(ident.name, c.value_str().map(|s| s.to_string())))\n-                    })\n-                }) {\n+                if !attr::eval_condition(\n+                    condition,\n+                    &tcx.sess.parse_sess,\n+                    Some(tcx.features()),\n+                    &mut |c| {\n+                        c.ident().map_or(false, |ident| {\n+                            options.contains(&(ident.name, c.value_str().map(|s| s.to_string())))\n+                        })\n+                    },\n+                ) {\n                     debug!(\"evaluate: skipping {:?} due to condition\", command);\n                     continue;\n                 }"}, {"sha": "b438bcd9fb5eb0169dd73ec67edde4d25b15cb6f", "filename": "src/test/ui/consts/const_in_pattern/auxiliary/consts.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fauxiliary%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fauxiliary%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fauxiliary%2Fconsts.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -9,3 +9,8 @@ impl PartialEq for CustomEq {\n \n pub const NONE: Option<CustomEq> = None;\n pub const SOME: Option<CustomEq> = Some(CustomEq);\n+\n+pub trait AssocConst {\n+    const NONE: Option<CustomEq> = None;\n+    const SOME: Option<CustomEq> = Some(CustomEq);\n+}"}, {"sha": "05c53e5edccc596fbed49c82bb624c7f761df84b", "filename": "src/test/ui/consts/const_in_pattern/cross-crate-fail.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -4,12 +4,24 @@\n \n extern crate consts;\n \n+struct Defaulted;\n+impl consts::AssocConst for Defaulted {}\n+\n fn main() {\n+    let _ = Defaulted;\n     match None {\n         consts::SOME => panic!(),\n         //~^ must be annotated with `#[derive(PartialEq, Eq)]`\n         //~| must be annotated with `#[derive(PartialEq, Eq)]`\n \n         _ => {}\n     }\n+\n+    match None {\n+        <Defaulted as consts::AssocConst>::SOME  => panic!(),\n+        //~^ must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| must be annotated with `#[derive(PartialEq, Eq)]`\n+\n+        _ => {}\n+    }\n }"}, {"sha": "5d147e32f5a8687eb2ed1406d63e01bdf7f0cca8", "filename": "src/test/ui/consts/const_in_pattern/cross-crate-fail.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -1,14 +1,26 @@\n error: to use a constant of type `consts::CustomEq` in a pattern, `consts::CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cross-crate-fail.rs:9:9\n+  --> $DIR/cross-crate-fail.rs:13:9\n    |\n LL |         consts::SOME => panic!(),\n    |         ^^^^^^^^^^^^\n \n error: to use a constant of type `consts::CustomEq` in a pattern, `consts::CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cross-crate-fail.rs:9:9\n+  --> $DIR/cross-crate-fail.rs:21:9\n+   |\n+LL |         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: to use a constant of type `consts::CustomEq` in a pattern, `consts::CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cross-crate-fail.rs:13:9\n    |\n LL |         consts::SOME => panic!(),\n    |         ^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: to use a constant of type `consts::CustomEq` in a pattern, `consts::CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/cross-crate-fail.rs:21:9\n+   |\n+LL |         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "1d8ecf8ae6640e10ac8aef8d87c47e2c8b3b9984", "filename": "src/test/ui/consts/const_in_pattern/cross-crate-pass.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-pass.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -6,9 +6,18 @@\n extern crate consts;\n use consts::CustomEq;\n \n+struct Defaulted;\n+impl consts::AssocConst for Defaulted {}\n+\n fn main() {\n+    let _ = Defaulted;\n     match Some(CustomEq) {\n         consts::NONE => panic!(),\n         _ => {}\n     }\n+\n+    match Some(CustomEq) {\n+        <Defaulted as consts::AssocConst>::NONE  => panic!(),\n+        _ => {}\n+    }\n }"}, {"sha": "c29ef99945e71a07c9cf6d91a1bf509d3cebbab4", "filename": "src/test/ui/feature-gates/feature-gate-cfg-version.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -0,0 +1,41 @@\n+#[cfg(version(\"1.44\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn foo() -> bool { true }\n+#[cfg(not(version(\"1.44\")))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn foo() -> bool { false }\n+\n+#[cfg(version(\"1.43\", \"1.44\", \"1.45\"))] //~ ERROR: expected single version literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(false))] //~ ERROR: expected a version literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"foo\"))] //~ ERROR: invalid version literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"999\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"-1\"))] //~ ERROR: invalid version literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"65536\"))] //~ ERROR: invalid version literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"0\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool { true }\n+\n+#[cfg(version(\"1.65536.2\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn version_check_bug() {}\n+\n+fn main() {\n+    // This should fail but due to a bug in version_check `1.65536.2` is interpreted as `1.2`.\n+    // See https://github.com/SergioBenitez/version_check/issues/11\n+    version_check_bug();\n+    assert!(foo());\n+    assert!(bar());\n+    assert!(cfg!(version(\"1.42\"))); //~ ERROR `cfg(version)` is experimental and subject to change\n+}"}, {"sha": "bdf160b5a02700febd6038979a41f01eaadaac34", "filename": "src/test/ui/feature-gates/feature-gate-cfg-version.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.stderr?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -0,0 +1,132 @@\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:1:7\n+   |\n+LL | #[cfg(version(\"1.44\"))]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:4:11\n+   |\n+LL | #[cfg(not(version(\"1.44\")))]\n+   |           ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:8:7\n+   |\n+LL | #[cfg(version(\"1.43\", \"1.44\", \"1.45\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: expected single version literal\n+  --> $DIR/feature-gate-cfg-version.rs:8:7\n+   |\n+LL | #[cfg(version(\"1.43\", \"1.44\", \"1.45\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:11:7\n+   |\n+LL | #[cfg(version(false))]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: expected a version literal\n+  --> $DIR/feature-gate-cfg-version.rs:11:15\n+   |\n+LL | #[cfg(version(false))]\n+   |               ^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:14:7\n+   |\n+LL | #[cfg(version(\"foo\"))]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: invalid version literal\n+  --> $DIR/feature-gate-cfg-version.rs:14:15\n+   |\n+LL | #[cfg(version(\"foo\"))]\n+   |               ^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:17:7\n+   |\n+LL | #[cfg(version(\"999\"))]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:20:7\n+   |\n+LL | #[cfg(version(\"-1\"))]\n+   |       ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: invalid version literal\n+  --> $DIR/feature-gate-cfg-version.rs:20:15\n+   |\n+LL | #[cfg(version(\"-1\"))]\n+   |               ^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:23:7\n+   |\n+LL | #[cfg(version(\"65536\"))]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: invalid version literal\n+  --> $DIR/feature-gate-cfg-version.rs:23:15\n+   |\n+LL | #[cfg(version(\"65536\"))]\n+   |               ^^^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:26:7\n+   |\n+LL | #[cfg(version(\"0\"))]\n+   |       ^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:30:7\n+   |\n+LL | #[cfg(version(\"1.65536.2\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:40:18\n+   |\n+LL |     assert!(cfg!(version(\"1.42\")));\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: aborting due to 16 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "12093837d2630bcb8387a60a63cef752e8c02b6d", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -0,0 +1,9 @@\n+#![feature(non_ascii_idents)]\n+#![deny(confusable_idents)]\n+#![allow(uncommon_codepoints, non_upper_case_globals)]\n+\n+const \uff53: usize = 42; //~ ERROR identifier pair considered confusable\n+\n+fn main() {\n+    let s = \"rust\";\n+}"}, {"sha": "40ee18acb3cd4c68e426ebdc3f35654827844d45", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d626e4dadc37d7027d65f087da0ad1ddb460959f/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr?ref=d626e4dadc37d7027d65f087da0ad1ddb460959f", "patch": "@@ -0,0 +1,17 @@\n+error: identifier pair considered confusable between `s` and `\uff53`\n+  --> $DIR/lint-confusable-idents.rs:5:7\n+   |\n+LL | const \uff53: usize = 42;\n+   |       ^^\n+...\n+LL |     let s = \"rust\";\n+   |         - this is where the previous identifier occurred\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-confusable-idents.rs:2:9\n+   |\n+LL | #![deny(confusable_idents)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}