{"sha": "5639d9793f1d2440bb9a8c8630f20d757a48e111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MzlkOTc5M2YxZDI0NDBiYjlhOGM4NjMwZjIwZDc1N2E0OGUxMTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T00:13:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T00:13:40Z"}, "message": "Rollup merge of #78476 - RalfJung:btree-alias, r=Mark-Simulacrum\n\nfix some incorrect aliasing in the BTree\n\nThis line is wrong:\n```\nptr::copy(slice.as_ptr().add(idx), slice.as_mut_ptr().add(idx + 1), slice.len() - idx);\n```\nWhen `slice.as_mut_ptr()` is called, that creates a mutable reference to the entire slice, which invalidates the raw pointer previously returned by `slice.as_ptr()`. (Miri currently misses this because raw pointers are not tracked properly.)\n\nCc ````````@ssomers````````", "tree": {"sha": "ca472a913c994140e167a613d05ee609db9f5490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca472a913c994140e167a613d05ee609db9f5490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5639d9793f1d2440bb9a8c8630f20d757a48e111", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqIm0CRBK7hj4Ov3rIwAAdHIIAHMxdqZ1ULXCuG6iL6iRa7xy\nYp7D/4eRBTQBBxrnHFbleEdJWerzbCch0gwU3aVj3QKd+44KW69gA55LZ/OlOBS9\nz1Sy6JtQztrtqkqf5o1rShcxpGOvVp/OrGH0Fyczz+Qmk43iT9rDOsNBJ/sUdq/W\nM6JAGbFHOPog6CJjFusfOsrOB05aekQD4Hw13lCTgPRcUd7gfuxTdrAjCOOR0PD5\nLijuKYEF1AknMvtycakHwCJdcnM6rGVfagOojLK1oFLtSS5JrGXhU66pDOzx5prE\nTJ620N9a7P5lD1BMh4hNj8WxdKKK/6vuDyXfpwxlT16jslpTDfJ5UpgxzrrrUzA=\n=QtrE\n-----END PGP SIGNATURE-----\n", "payload": "tree ca472a913c994140e167a613d05ee609db9f5490\nparent 4e5b7add7f5313f6db8df9b11be155f7a3e467f7\nparent b0df3f76dc70eba57d6e0665fa6ccac89b25d3aa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604880820 +0100\ncommitter GitHub <noreply@github.com> 1604880820 +0100\n\nRollup merge of #78476 - RalfJung:btree-alias, r=Mark-Simulacrum\n\nfix some incorrect aliasing in the BTree\n\nThis line is wrong:\n```\nptr::copy(slice.as_ptr().add(idx), slice.as_mut_ptr().add(idx + 1), slice.len() - idx);\n```\nWhen `slice.as_mut_ptr()` is called, that creates a mutable reference to the entire slice, which invalidates the raw pointer previously returned by `slice.as_ptr()`. (Miri currently misses this because raw pointers are not tracked properly.)\n\nCc ````````@ssomers````````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5639d9793f1d2440bb9a8c8630f20d757a48e111", "html_url": "https://github.com/rust-lang/rust/commit/5639d9793f1d2440bb9a8c8630f20d757a48e111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5639d9793f1d2440bb9a8c8630f20d757a48e111/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "html_url": "https://github.com/rust-lang/rust/commit/4e5b7add7f5313f6db8df9b11be155f7a3e467f7"}, {"sha": "b0df3f76dc70eba57d6e0665fa6ccac89b25d3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0df3f76dc70eba57d6e0665fa6ccac89b25d3aa", "html_url": "https://github.com/rust-lang/rust/commit/b0df3f76dc70eba57d6e0665fa6ccac89b25d3aa"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "433074027e7f7bd661b6f125c6d8d40a532310bd", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5639d9793f1d2440bb9a8c8630f20d757a48e111/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639d9793f1d2440bb9a8c8630f20d757a48e111/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=5639d9793f1d2440bb9a8c8630f20d757a48e111", "patch": "@@ -1608,15 +1608,19 @@ pub mod marker {\n \n unsafe fn slice_insert<T>(slice: &mut [T], idx: usize, val: T) {\n     unsafe {\n-        ptr::copy(slice.as_ptr().add(idx), slice.as_mut_ptr().add(idx + 1), slice.len() - idx);\n-        ptr::write(slice.get_unchecked_mut(idx), val);\n+        let len = slice.len();\n+        let slice_ptr = slice.as_mut_ptr();\n+        ptr::copy(slice_ptr.add(idx), slice_ptr.add(idx + 1), len - idx);\n+        ptr::write(slice_ptr.add(idx), val);\n     }\n }\n \n unsafe fn slice_remove<T>(slice: &mut [T], idx: usize) -> T {\n     unsafe {\n-        let ret = ptr::read(slice.get_unchecked(idx));\n-        ptr::copy(slice.as_ptr().add(idx + 1), slice.as_mut_ptr().add(idx), slice.len() - idx - 1);\n+        let len = slice.len();\n+        let slice_ptr = slice.as_mut_ptr();\n+        let ret = ptr::read(slice_ptr.add(idx));\n+        ptr::copy(slice_ptr.add(idx + 1), slice_ptr.add(idx), len - idx - 1);\n         ret\n     }\n }"}]}