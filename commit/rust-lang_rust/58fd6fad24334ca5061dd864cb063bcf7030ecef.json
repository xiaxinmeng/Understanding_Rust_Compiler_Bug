{"sha": "58fd6fad24334ca5061dd864cb063bcf7030ecef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZmQ2ZmFkMjQzMzRjYTUwNjFkZDg2NGNiMDYzYmNmNzAzMGVjZWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-19T18:45:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "change to use impl Trait a bit", "tree": {"sha": "2ef109fe3f5cb0a55c40982a0e2473a658843146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef109fe3f5cb0a55c40982a0e2473a658843146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58fd6fad24334ca5061dd864cb063bcf7030ecef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58fd6fad24334ca5061dd864cb063bcf7030ecef", "html_url": "https://github.com/rust-lang/rust/commit/58fd6fad24334ca5061dd864cb063bcf7030ecef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58fd6fad24334ca5061dd864cb063bcf7030ecef/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "html_url": "https://github.com/rust-lang/rust/commit/85d12e2f0b5aa76f535d1d519925a86eecdb73b4"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "380a92b342b30c58a62eda246618b0c0a831e7b1", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/58fd6fad24334ca5061dd864cb063bcf7030ecef/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58fd6fad24334ca5061dd864cb063bcf7030ecef/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=58fd6fad24334ca5061dd864cb063bcf7030ecef", "patch": "@@ -91,14 +91,14 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n     ) -> Vec<ty::Region<'tcx>> {\n         let projection_ty = GenericKind::Projection(projection_ty).to_ty(self.tcx);\n         let erased_projection_ty = self.tcx.erase_regions(&projection_ty);\n-        self.declared_generic_bounds_from_env_with_compare_fn(\n-            |ty| if let ty::Projection(..) = ty.sty {\n+        self.declared_generic_bounds_from_env_with_compare_fn(|ty| {\n+            if let ty::Projection(..) = ty.sty {\n                 let erased_ty = self.tcx.erase_regions(&ty);\n                 erased_ty == erased_projection_ty\n             } else {\n                 false\n-            },\n-        )\n+            }\n+        })\n     }\n \n     /// Searches the where clauses in scope for regions that\n@@ -177,7 +177,7 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         // like `T` and `T::Item`. It may not work as well for things\n         // like `<T as Foo<'a>>::Item`.\n         let c_b = self.param_env.caller_bounds;\n-        let mut param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b);\n+        let param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b);\n \n         // Next, collect regions we scraped from the well-formedness\n         // constraints in the fn signature. To do that, we walk the list\n@@ -190,17 +190,19 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         // The problem is that the type of `x` is `&'a A`. To be\n         // well-formed, then, A must be lower-generic by `'a`, but we\n         // don't know that this holds from first principles.\n-        for &(r, p) in self.region_bound_pairs {\n+        let from_region_bound_pairs = self.region_bound_pairs.iter().filter_map(|&(r, p)| {\n             debug!(\n                 \"declared_generic_bounds_from_env_with_compare_fn: region_bound_pair = {:?}\",\n                 (r, p)\n             );\n             if compare_ty(p.to_ty(tcx)) {\n-                param_bounds.push(r);\n+                Some(r)\n+            } else {\n+                None\n             }\n-        }\n+        });\n \n-        param_bounds\n+        param_bounds.chain(from_region_bound_pairs).collect()\n     }\n \n     /// Given a projection like `<T as Foo<'x>>::Bar`, returns any bounds\n@@ -268,9 +270,9 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         let identity_substs = Substs::identity_for_item(tcx, assoc_item_def_id);\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n         self.collect_outlives_from_predicate_list(\n-            |ty| ty == identity_proj,\n+            move |ty| ty == identity_proj,\n             traits::elaborate_predicates(tcx, trait_predicates.predicates),\n-        )\n+        ).collect()\n     }\n \n     /// Searches through a predicate list for a predicate `T: 'a`.\n@@ -283,13 +285,12 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         &self,\n         compare_ty: impl Fn(Ty<'tcx>) -> bool,\n         predicates: impl IntoIterator<Item = impl AsRef<ty::Predicate<'tcx>>>,\n-    ) -> Vec<ty::Region<'tcx>> {\n+    ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         predicates\n             .into_iter()\n             .filter_map(|p| p.as_ref().to_opt_type_outlives())\n             .filter_map(|p| p.no_late_bound_regions())\n-            .filter(|p| compare_ty(p.0))\n+            .filter(move |p| compare_ty(p.0))\n             .map(|p| p.1)\n-            .collect()\n     }\n }"}]}