{"sha": "7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NTZiMWNlZjcxZWY2MzNmYjBlNWU1NTQ1MWM1YmI5ZWU5YzU5ZTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-10T20:26:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-11T18:06:21Z"}, "message": "Assoc `const`s don't have generics\n\nFix #74264.", "tree": {"sha": "8e0ba4163d57b08700bfbf9d8e6c6003734e214f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0ba4163d57b08700bfbf9d8e6c6003734e214f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "html_url": "https://github.com/rust-lang/rust/commit/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7205f2020ff5acefac83e354acea4c69f2ea0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7205f2020ff5acefac83e354acea4c69f2ea0e", "html_url": "https://github.com/rust-lang/rust/commit/0f7205f2020ff5acefac83e354acea4c69f2ea0e"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "e9c463c7a3efe7b41af3b8563f7b3cd32f3f1340", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use log::debug;\n \n@@ -1273,6 +1273,15 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 let should_break;\n                 introduce_suggestion.push(match missing {\n                     MissingLifetimeSpot::Generics(generics) => {\n+                        if generics.span == DUMMY_SP {\n+                            // Account for malformed generics in the HIR. This shouldn't happen,\n+                            // but if we make a mistake elsewhere, mainly by keeping something in\n+                            // `missing_named_lifetime_spots` that we shouldn't, like associated\n+                            // `const`s or making a mistake in the AST lowering we would provide\n+                            // non-sensical suggestions. Guard against that by skipping these.\n+                            // (#74264)\n+                            continue;\n+                        }\n                         msg = \"consider introducing a named lifetime parameter\".to_string();\n                         should_break = true;\n                         if let Some(param) = generics.params.iter().find(|p| match p.kind {"}, {"sha": "6cb9284376622cf9750ca439731cc4ced9f44107", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "patch": "@@ -711,18 +711,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n-        self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n         match trait_item.kind {\n             Fn(ref sig, _) => {\n+                self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n                     Some(tcx.hir().get_parent_item(trait_item.hir_id)),\n                     &sig.decl,\n                     &trait_item.generics,\n                     |this| intravisit::walk_trait_item(this, trait_item),\n                 );\n+                self.missing_named_lifetime_spots.pop();\n             }\n             Type(bounds, ref ty) => {\n+                self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n                 let generics = &trait_item.generics;\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n@@ -757,14 +759,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         this.visit_ty(ty);\n                     }\n                 });\n+                self.missing_named_lifetime_spots.pop();\n             }\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(trait_item.generics.params.is_empty());\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n         }\n-        self.missing_named_lifetime_spots.pop();\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {"}, {"sha": "b9e0108fe714a9bde286ea30db2109178693f2e1", "filename": "src/test/ui/suggestions/missing-lifetime-in-assoc-const-type.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.rs?ref=7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "patch": "@@ -0,0 +1,5 @@\n+trait ZstAssert: Sized {\n+    const TYPE_NAME: &str = \"\"; //~ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "ee9d1a15d2a7b8363d54b583526f839d8412fd14", "filename": "src/test/ui/suggestions/missing-lifetime-in-assoc-const-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-in-assoc-const-type.stderr?ref=7956b1cef71ef633fb0e5e55451c5bb9ee9c59e2", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-in-assoc-const-type.rs:2:22\n+   |\n+LL |     const TYPE_NAME: &str = \"\";\n+   |                      ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | trait ZstAssert<'a>: Sized {\n+LL |     const TYPE_NAME: &'a str = \"\";\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}]}