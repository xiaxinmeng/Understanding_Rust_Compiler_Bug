{"sha": "0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2VmZDliNWU2OGViM2EwMjY4NDNlZDdiNjI0NzYxYmVhMmRlMWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T10:13:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-16T07:43:31Z"}, "message": "remove visit_terminator_kind from MIR visitor", "tree": {"sha": "4465da830a227d556ffcffd2f2092ab99c8559cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4465da830a227d556ffcffd2f2092ab99c8559cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "html_url": "https://github.com/rust-lang/rust/commit/0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f315c35a77e40bd11ce81fedc0556be0f410bbf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f315c35a77e40bd11ce81fedc0556be0f410bbf4", "html_url": "https://github.com/rust-lang/rust/commit/f315c35a77e40bd11ce81fedc0556be0f410bbf4"}], "stats": {"total": 89, "additions": 43, "deletions": 46}, "files": [{"sha": "db935c2b3e2658a027ba7525da21a38e90146a44", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -234,8 +234,8 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n         self.visit_rvalue(rvalue, location);\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &mir::TerminatorKind<'tcx>, location: Location) {\n-        let check = match *kind {\n+    fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n+        let check = match terminator.kind {\n             mir::TerminatorKind::Call { func: mir::Operand::Constant(ref c), ref args, .. } => {\n                 match c.literal.ty.kind {\n                     ty::FnDef(did, _) => Some((did, args)),\n@@ -259,7 +259,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             }\n         }\n \n-        self.super_terminator_kind(kind, location);\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {"}, {"sha": "1c5ed837b51318264699e3fcbb02435170992002", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -108,12 +108,6 @@ macro_rules! make_mir_visitor {\n                 self.super_terminator(terminator, location);\n             }\n \n-            fn visit_terminator_kind(&mut self,\n-                                     kind: & $($mutability)? TerminatorKind<'tcx>,\n-                                     location: Location) {\n-                self.super_terminator_kind(kind, location);\n-            }\n-\n             fn visit_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n@@ -413,16 +407,10 @@ macro_rules! make_mir_visitor {\n \n             fn super_terminator(&mut self,\n                                 terminator: &$($mutability)? Terminator<'tcx>,\n-                                location: Location) {\n+                                source_location: Location) {\n                 let Terminator { source_info, kind } = terminator;\n \n                 self.visit_source_info(source_info);\n-                self.visit_terminator_kind(kind, location);\n-            }\n-\n-            fn super_terminator_kind(&mut self,\n-                                     kind: & $($mutability)? TerminatorKind<'tcx>,\n-                                     source_location: Location) {\n                 match kind {\n                     TerminatorKind::Goto { .. } |\n                     TerminatorKind::Resume |"}, {"sha": "e9475937de228b947a703f2cd3aafa0b108124c1", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{BasicBlock, Body, Location, Place, Rvalue};\n use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n-use rustc_middle::mir::{InlineAsmOperand, TerminatorKind};\n+use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n \n@@ -112,10 +112,10 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n         self.super_statement(statement, location);\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &TerminatorKind<'tcx>, location: Location) {\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         self.check_activations(location);\n \n-        match kind {\n+        match &terminator.kind {\n             TerminatorKind::SwitchInt { ref discr, switch_ty: _, values: _, targets: _ } => {\n                 self.consume_operand(location, discr);\n             }\n@@ -222,7 +222,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n         }\n \n-        self.super_terminator_kind(kind, location);\n+        self.super_terminator(terminator, location);\n     }\n }\n "}, {"sha": "0216298463470ad882fae6a7c08ccecbcab3310e", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -1,5 +1,7 @@\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n-use rustc_middle::mir::{Local, Location, Place, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::mir::{\n+    Local, Location, Place, Statement, StatementKind, Terminator, TerminatorKind,\n+};\n \n use rustc_data_structures::fx::FxHashSet;\n \n@@ -62,9 +64,9 @@ impl GatherUsedMutsVisitor<'_, '_, '_> {\n }\n \n impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tcx> {\n-    fn visit_terminator_kind(&mut self, kind: &TerminatorKind<'tcx>, _location: Location) {\n-        debug!(\"visit_terminator_kind: kind={:?}\", kind);\n-        match &kind {\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, _location: Location) {\n+        debug!(\"visit_terminator: terminator={:?}\", terminator);\n+        match &terminator.kind {\n             TerminatorKind::Call { destination: Some((into, _)), .. } => {\n                 self.remove_never_initialized_mut_locals(*into);\n             }\n@@ -73,6 +75,8 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n             }\n             _ => {}\n         }\n+\n+        // FIXME: no super_terminator?\n     }\n \n     fn visit_statement(&mut self, statement: &Statement<'tcx>, _location: Location) {\n@@ -84,6 +88,8 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n             );\n             self.remove_never_initialized_mut_locals(*into);\n         }\n+\n+        // FIXME: no super_statement?\n     }\n \n     fn visit_local(&mut self, local: &Local, place_context: PlaceContext, location: Location) {\n@@ -101,5 +107,7 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n                 }\n             }\n         }\n+\n+        // FIXME: no super_local?\n     }\n }"}, {"sha": "ac19d59f04fb8b226c60a4f5b0270c6638cee31d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -616,11 +616,11 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_const(constant);\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &mir::TerminatorKind<'tcx>, location: Location) {\n-        debug!(\"visiting terminator {:?} @ {:?}\", kind, location);\n+    fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n+        debug!(\"visiting terminator {:?} @ {:?}\", terminator, location);\n \n         let tcx = self.tcx;\n-        match *kind {\n+        match terminator.kind {\n             mir::TerminatorKind::Call { ref func, .. } => {\n                 let callee_ty = func.ty(self.body, tcx);\n                 let callee_ty = self.monomorphize(callee_ty);\n@@ -663,7 +663,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             | mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n \n-        self.super_terminator_kind(kind, location);\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_local("}, {"sha": "c67545d5b39e42fa9b8705aedcf40c69de289201", "filename": "src/librustc_mir/transform/check_consts/resolver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -121,11 +121,12 @@ where\n         self.super_assign(place, rvalue, location);\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &mir::TerminatorKind<'tcx>, location: Location) {\n+    fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n         // The effect of assignment to the return place in `TerminatorKind::Call` is not applied\n         // here; that occurs in `apply_call_return_effect`.\n \n-        if let mir::TerminatorKind::DropAndReplace { value, location: dest, .. } = kind {\n+        if let mir::TerminatorKind::DropAndReplace { value, location: dest, .. } = &terminator.kind\n+        {\n             let qualif = qualifs::in_operand::<Q, _>(\n                 self.ccx,\n                 &mut |l| self.qualifs_per_local.contains(l),\n@@ -139,7 +140,7 @@ where\n \n         // We need to assign qualifs to the dropped location before visiting the operand that\n         // replaces it since qualifs can be cleared on move.\n-        self.super_terminator_kind(kind, location);\n+        self.super_terminator(terminator, location);\n     }\n }\n "}, {"sha": "7215f390d40d240368a444c69785cd7f0bc9d845", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -93,13 +93,13 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor<'tcx> {\n         }\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, location: Location) {\n-        match kind {\n+    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n+        match terminator.kind {\n             TerminatorKind::Return => {\n                 // Do not replace the implicit `_0` access here, as that's not possible. The\n                 // transform already handles `return` correctly.\n             }\n-            _ => self.super_terminator_kind(kind, location),\n+            _ => self.super_terminator(terminator, location),\n         }\n     }\n }"}, {"sha": "65400b58eebcbd584ebdfd598a6b492a1151f052", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -731,14 +731,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, loc: Location) {\n+    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, loc: Location) {\n         // Don't try to modify the implicit `_0` access on return (`return` terminators are\n         // replaced down below anyways).\n-        if !matches!(kind, TerminatorKind::Return) {\n-            self.super_terminator_kind(kind, loc);\n+        if !matches!(terminator.kind, TerminatorKind::Return) {\n+            self.super_terminator(terminator, loc);\n         }\n \n-        match *kind {\n+        match terminator.kind {\n             TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => bug!(),\n             TerminatorKind::Goto { ref mut target } => {\n                 *target = self.update_target(*target);\n@@ -782,11 +782,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 }\n             }\n             TerminatorKind::Return => {\n-                *kind = TerminatorKind::Goto { target: self.return_block };\n+                terminator.kind = TerminatorKind::Goto { target: self.return_block };\n             }\n             TerminatorKind::Resume => {\n                 if let Some(tgt) = self.cleanup_block {\n-                    *kind = TerminatorKind::Goto { target: tgt }\n+                    terminator.kind = TerminatorKind::Goto { target: tgt }\n                 }\n             }\n             TerminatorKind::Abort => {}"}, {"sha": "1d83733e4cd306bc88868a32f6195286df53327d", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -34,10 +34,10 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads<'tcx> {\n         self.tcx\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, location: Location) {\n-        if let Some(unwind) = kind.unwind_mut() {\n+    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n+        if let Some(unwind) = terminator.kind.unwind_mut() {\n             unwind.take();\n         }\n-        self.super_terminator_kind(kind, location);\n+        self.super_terminator(terminator, location);\n     }\n }"}, {"sha": "f2179a21a3f435bc36cea5bccc8e1055646f3758", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcefd9b5e68eb3a026843ed7b624761bea2de1e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=0bcefd9b5e68eb3a026843ed7b624761bea2de1e", "patch": "@@ -216,10 +216,10 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n         }\n     }\n \n-    fn visit_terminator_kind(&mut self, kind: &TerminatorKind<'tcx>, location: Location) {\n-        self.super_terminator_kind(kind, location);\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        self.super_terminator(terminator, location);\n \n-        match *kind {\n+        match terminator.kind {\n             TerminatorKind::Call { ref func, .. } => {\n                 if let ty::FnDef(def_id, _) = func.ty(self.ccx.body, self.ccx.tcx).kind {\n                     let fn_sig = self.ccx.tcx.fn_sig(def_id);"}]}