{"sha": "de5aabd48be33898ae2280f1544bffe166075348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWFhYmQ0OGJlMzM4OThhZTIyODBmMTU0NGJmZmUxNjYwNzUzNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-20T12:28:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-20T12:28:10Z"}, "message": "Merge #7350\n\n7350: Update pico-args r=matklad a=kjeremy\n\nShould maintain existing behavior\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "b6a6172765a273f22aecf6b4daa0d588bbd06890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a6172765a273f22aecf6b4daa0d588bbd06890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5aabd48be33898ae2280f1544bffe166075348", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCCHaCRBK7hj4Ov3rIwAAdHIIAIAx29EfGryTeUDa0d0nPbh5\n8pxbal5t6Xod7zuKNJfuA4XzWxQZ1xIwPTIs4nAu95/AbW79Q73B2QHODXTR+LNJ\nC3SkIayvBPRh551HfLnhEYMbSDk1qAUfNZw+fjbZqlm/D+cegRTumWfNKxKnxiZi\nT5KcF46HG/0pzpUznJSRpG0Q0Ss/GZ08/NOSjI7XRLInQkhVEMEaJmz1pwuR8Be1\nQ5CyNdZPVwgPNcq58RFMYlA8W/bX1qs/5snoOi81QAot9BcNm3SiUKRL3urfmU8r\nZM2358AxdctT7VFSutukMVPhNgdTJI3MZRGGzFIJwXFYILvZwIvW/Cn8yeCFtr0=\n=9YBS\n-----END PGP SIGNATURE-----\n", "payload": "tree b6a6172765a273f22aecf6b4daa0d588bbd06890\nparent 6cf3d669e2293d947c618bb5c80fac4d718d6ed2\nparent db0aaeca33d430de00587958f82844f088d84a30\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611145690 +0000\ncommitter GitHub <noreply@github.com> 1611145690 +0000\n\nMerge #7350\n\n7350: Update pico-args r=matklad a=kjeremy\n\nShould maintain existing behavior\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5aabd48be33898ae2280f1544bffe166075348", "html_url": "https://github.com/rust-lang/rust/commit/de5aabd48be33898ae2280f1544bffe166075348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5aabd48be33898ae2280f1544bffe166075348/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "html_url": "https://github.com/rust-lang/rust/commit/6cf3d669e2293d947c618bb5c80fac4d718d6ed2"}, {"sha": "db0aaeca33d430de00587958f82844f088d84a30", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0aaeca33d430de00587958f82844f088d84a30", "html_url": "https://github.com/rust-lang/rust/commit/db0aaeca33d430de00587958f82844f088d84a30"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "4a5853a610a5ebb620b2a4bc183a8759145da148", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de5aabd48be33898ae2280f1544bffe166075348/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/de5aabd48be33898ae2280f1544bffe166075348/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=de5aabd48be33898ae2280f1544bffe166075348", "patch": "@@ -1196,9 +1196,9 @@ dependencies = [\n \n [[package]]\n name = \"pico-args\"\n-version = \"0.3.4\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"28b9b4df73455c861d7cbf8be42f01d3b373ed7f02e378d55fa84eafc6f638b1\"\n+checksum = \"d70072c20945e1ab871c472a285fc772aefd4f5407723c206242f2c6f94595d6\"\n \n [[package]]\n name = \"pin-project-lite\""}, {"sha": "268c009424fc3da2d95214eefe2e7a7248154bd0", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5aabd48be33898ae2280f1544bffe166075348/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de5aabd48be33898ae2280f1544bffe166075348/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=de5aabd48be33898ae2280f1544bffe166075348", "patch": "@@ -24,7 +24,7 @@ jod-thread = \"0.1.0\"\n log = \"0.4.8\"\n lsp-types = { version = \"0.86.0\", features = [\"proposed\"] }\n parking_lot = \"0.11.0\"\n-pico-args = \"0.3.1\"\n+pico-args = \"0.4.0\"\n oorandom = \"11.1.2\"\n rustc-hash = \"1.1.0\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }"}, {"sha": "7d917946e3327a655087419c31ba57f8d2c8eed1", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de5aabd48be33898ae2280f1544bffe166075348/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5aabd48be33898ae2280f1544bffe166075348/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=de5aabd48be33898ae2280f1544bffe166075348", "patch": "@@ -109,7 +109,7 @@ impl Args {\n         let mut matches = Arguments::from_env();\n \n         if matches.contains(\"--version\") {\n-            matches.finish()?;\n+            finish_args(matches)?;\n             return Ok(Args {\n                 verbosity: Verbosity::Normal,\n                 log_file: None,\n@@ -143,7 +143,7 @@ impl Args {\n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n-                matches.finish()?;\n+                finish_args(matches)?;\n                 return Ok(Args { verbosity, log_file, command: Command::RunServer });\n             }\n         };\n@@ -160,7 +160,7 @@ impl Args {\n                 load_output_dirs: matches.contains(\"--load-output-dirs\"),\n                 with_proc_macro: matches.contains(\"--with-proc-macro\"),\n                 path: matches\n-                    .free_from_str()?\n+                    .opt_free_from_str()?\n                     .ok_or_else(|| format_err!(\"expected positional argument\"))?,\n             }),\n             \"analysis-bench\" => Command::Bench(BenchCmd {\n@@ -187,21 +187,21 @@ impl Args {\n                 load_output_dirs: matches.contains(\"--load-output-dirs\"),\n                 with_proc_macro: matches.contains(\"--with-proc-macro\"),\n                 path: matches\n-                    .free_from_str()?\n+                    .opt_free_from_str()?\n                     .ok_or_else(|| format_err!(\"expected positional argument\"))?,\n             }),\n             \"diagnostics\" => Command::Diagnostics {\n                 load_output_dirs: matches.contains(\"--load-output-dirs\"),\n                 with_proc_macro: matches.contains(\"--with-proc-macro\"),\n                 path: matches\n-                    .free_from_str()?\n+                    .opt_free_from_str()?\n                     .ok_or_else(|| format_err!(\"expected positional argument\"))?,\n             },\n             \"proc-macro\" => Command::ProcMacro,\n             \"ssr\" => Command::Ssr {\n                 rules: {\n                     let mut acc = Vec::new();\n-                    while let Some(rule) = matches.free_from_str()? {\n+                    while let Some(rule) = matches.opt_free_from_str()? {\n                         acc.push(rule);\n                     }\n                     acc\n@@ -211,7 +211,7 @@ impl Args {\n                 debug_snippet: matches.opt_value_from_str(\"--debug\")?,\n                 patterns: {\n                     let mut acc = Vec::new();\n-                    while let Some(rule) = matches.free_from_str()? {\n+                    while let Some(rule) = matches.opt_free_from_str()? {\n                         acc.push(rule);\n                     }\n                     acc\n@@ -222,7 +222,14 @@ impl Args {\n                 return Ok(Args { verbosity, log_file: None, command: Command::Help });\n             }\n         };\n-        matches.finish()?;\n+        finish_args(matches)?;\n         Ok(Args { verbosity, log_file, command })\n     }\n }\n+\n+fn finish_args(args: Arguments) -> Result<()> {\n+    if !args.finish().is_empty() {\n+        bail!(\"Unused arguments.\");\n+    }\n+    Ok(())\n+}"}, {"sha": "4e6b439fd6dc9620af0f47dae7e5953128f0eadd", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5aabd48be33898ae2280f1544bffe166075348/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de5aabd48be33898ae2280f1544bffe166075348/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=de5aabd48be33898ae2280f1544bffe166075348", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n anyhow = \"1.0.26\"\n flate2 = \"1.0\"\n-pico-args = \"0.3.1\"\n+pico-args = \"0.4.0\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n ungrammar = \"1.9\""}, {"sha": "5a99f4a765162d643beccc7cb32eecb7f21488af", "filename": "xtask/src/main.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de5aabd48be33898ae2280f1544bffe166075348/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5aabd48be33898ae2280f1544bffe166075348/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=de5aabd48be33898ae2280f1544bffe166075348", "patch": "@@ -10,6 +10,7 @@\n \n use std::env;\n \n+use anyhow::bail;\n use codegen::CodegenCmd;\n use pico_args::Arguments;\n use xshell::{cmd, cp, pushd};\n@@ -76,7 +77,7 @@ FLAGS:\n \n             let client_opt = args.opt_value_from_str(\"--client\")?;\n \n-            args.finish()?;\n+            finish_args(args)?;\n \n             InstallCmd {\n                 client: if server { None } else { Some(client_opt.unwrap_or_default()) },\n@@ -86,53 +87,53 @@ FLAGS:\n         }\n         \"codegen\" => {\n             let features = args.contains(\"--features\");\n-            args.finish()?;\n+            finish_args(args)?;\n             CodegenCmd { features }.run()\n         }\n         \"format\" => {\n-            args.finish()?;\n+            finish_args(args)?;\n             run_rustfmt(Mode::Overwrite)\n         }\n         \"install-pre-commit-hook\" => {\n-            args.finish()?;\n+            finish_args(args)?;\n             pre_commit::install_hook()\n         }\n         \"lint\" => {\n-            args.finish()?;\n+            finish_args(args)?;\n             run_clippy()\n         }\n         \"fuzz-tests\" => {\n-            args.finish()?;\n+            finish_args(args)?;\n             run_fuzzer()\n         }\n         \"pre-cache\" => {\n-            args.finish()?;\n+            finish_args(args)?;\n             PreCacheCmd.run()\n         }\n         \"release\" => {\n             let dry_run = args.contains(\"--dry-run\");\n-            args.finish()?;\n+            finish_args(args)?;\n             ReleaseCmd { dry_run }.run()\n         }\n         \"promote\" => {\n             let dry_run = args.contains(\"--dry-run\");\n-            args.finish()?;\n+            finish_args(args)?;\n             PromoteCmd { dry_run }.run()\n         }\n         \"dist\" => {\n             let nightly = args.contains(\"--nightly\");\n             let client_version: Option<String> = args.opt_value_from_str(\"--client\")?;\n-            args.finish()?;\n+            finish_args(args)?;\n             DistCmd { nightly, client_version }.run()\n         }\n         \"metrics\" => {\n             let dry_run = args.contains(\"--dry-run\");\n-            args.finish()?;\n+            finish_args(args)?;\n             MetricsCmd { dry_run }.run()\n         }\n         \"bb\" => {\n-            let suffix: String = args.free_from_str()?.unwrap();\n-            args.finish()?;\n+            let suffix: String = args.free_from_str()?;\n+            finish_args(args)?;\n             cmd!(\"cargo build --release\").run()?;\n             cp(\"./target/release/rust-analyzer\", format!(\"./target/rust-analyzer-{}\", suffix))?;\n             Ok(())\n@@ -161,3 +162,10 @@ SUBCOMMANDS:\n         }\n     }\n }\n+\n+fn finish_args(args: Arguments) -> Result<()> {\n+    if !args.finish().is_empty() {\n+        bail!(\"Unused arguments.\");\n+    }\n+    Ok(())\n+}"}]}