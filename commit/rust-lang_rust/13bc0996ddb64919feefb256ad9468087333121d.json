{"sha": "13bc0996ddb64919feefb256ad9468087333121d", "node_id": "C_kwDOAAsO6NoAKDEzYmMwOTk2ZGRiNjQ5MTlmZWVmYjI1NmFkOTQ2ODA4NzMzMzEyMWQ", "commit": {"author": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-09-14T08:10:18Z"}, "committer": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-09-14T08:10:18Z"}, "message": "expand documentation on type conversion w.r.t. `UnsafeCell`", "tree": {"sha": "eb4014b1620f93e08aebd506a3a800ea0aa2b305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4014b1620f93e08aebd506a3a800ea0aa2b305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bc0996ddb64919feefb256ad9468087333121d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bc0996ddb64919feefb256ad9468087333121d", "html_url": "https://github.com/rust-lang/rust/commit/13bc0996ddb64919feefb256ad9468087333121d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bc0996ddb64919feefb256ad9468087333121d/comments", "author": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302e33fde2785874c6b85aa9760e8e6be2e7dad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/302e33fde2785874c6b85aa9760e8e6be2e7dad4", "html_url": "https://github.com/rust-lang/rust/commit/302e33fde2785874c6b85aa9760e8e6be2e7dad4"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "b730e13dcb887c0f68876ff0c2699689c041cb03", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/13bc0996ddb64919feefb256ad9468087333121d/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc0996ddb64919feefb256ad9468087333121d/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=13bc0996ddb64919feefb256ad9468087333121d", "patch": "@@ -1811,7 +1811,36 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// [`.get_mut()`]: `UnsafeCell::get_mut`\n ///\n-/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T`.\n+/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T`. A consequence\n+/// of this guarantee is that it is possible to convert between `T` and `UnsafeCell<T>`.\n+/// However, it is only valid to obtain a `*mut T` pointer or `&mut T` reference to the\n+/// contents of an `UnsafeCell<T>` through [`.get()`], [`.raw_get()`] or [`.get_mut()`], e.g.:\n+///\n+/// ```rust\n+/// use std::cell::UnsafeCell;\n+///\n+/// let mut x: UnsafeCell<u32> = UnsafeCell::new(5);\n+/// let p1: &UnsafeCell<u32> = &x;\n+/// // using `.get()` is okay:\n+/// unsafe {\n+///     // SAFETY: there exist no other references to the contents of `x`\n+///     let p2: &mut u32 = &mut *p1.get();\n+/// };\n+/// // using `.raw_get()` is also okay:\n+/// unsafe {\n+///     // SAFETY: there exist no other references to the contents of `x` in this scope\n+///     let p2: &mut u32 = &mut *UnsafeCell::raw_get(p1 as *const _);\n+/// };\n+/// // using `.get_mut()` is always safe:\n+/// let p2: &mut u32 = x.get_mut();\n+/// // but the following is not allowed!\n+/// // let p2: &mut u32 = unsafe {\n+/// //     let t: *mut u32 = &x as *const _ as *mut u32;\n+/// //     &mut *t\n+/// // };\n+/// ```\n+///\n+/// [`.raw_get()`]: `UnsafeCell::raw_get`\n ///\n /// # Examples\n ///"}]}