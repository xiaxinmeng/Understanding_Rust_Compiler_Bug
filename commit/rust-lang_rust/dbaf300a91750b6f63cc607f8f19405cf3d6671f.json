{"sha": "dbaf300a91750b6f63cc607f8f19405cf3d6671f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWYzMDBhOTE3NTBiNmY2M2NjNjA3ZjhmMTk0MDVjZjNkNjY3MWY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-06T07:34:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:42Z"}, "message": "rustc::middle::graph API revisions.\n\nRefine lifetimes in signature for graph node/edge iteration methods.\n\nAdded `pub` `node_id` and `edge_id` methods that correspond to\nNodeIndex and EdgeIndex `get` methods (note that the inner index is\nalready `pub` in the struct definitions).  (I decided that `get()`,\nused internally, just looks too generic and that client code is\nclearer with more explicit method names.)", "tree": {"sha": "ecb56fcf2a97e6c7941f6f869c9abca050b02e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb56fcf2a97e6c7941f6f869c9abca050b02e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbaf300a91750b6f63cc607f8f19405cf3d6671f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf300a91750b6f63cc607f8f19405cf3d6671f", "html_url": "https://github.com/rust-lang/rust/commit/dbaf300a91750b6f63cc607f8f19405cf3d6671f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf300a91750b6f63cc607f8f19405cf3d6671f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f88cfde18942fc93c3f5952e51c03171446778c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f88cfde18942fc93c3f5952e51c03171446778c", "html_url": "https://github.com/rust-lang/rust/commit/7f88cfde18942fc93c3f5952e51c03171446778c"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "5773d0bafa1d1a9e9265b22323b9300c5cfeab8a", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dbaf300a91750b6f63cc607f8f19405cf3d6671f/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaf300a91750b6f63cc607f8f19405cf3d6671f/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=dbaf300a91750b6f63cc607f8f19405cf3d6671f", "patch": "@@ -70,10 +70,14 @@ pub static Incoming: Direction = Direction { repr: 1 };\n \n impl NodeIndex {\n     fn get(&self) -> uint { let NodeIndex(v) = *self; v }\n+    /// Returns unique id (unique with respect to the graph holding associated node).\n+    pub fn node_id(&self) -> uint { self.get() }\n }\n \n impl EdgeIndex {\n     fn get(&self) -> uint { let EdgeIndex(v) = *self; v }\n+    /// Returns unique id (unique with respect to the graph holding associated edge).\n+    pub fn edge_id(&self) -> uint { self.get() }\n }\n \n impl<N,E> Graph<N,E> {\n@@ -201,39 +205,39 @@ impl<N,E> Graph<N,E> {\n     ///////////////////////////////////////////////////////////////////////////\n     // Iterating over nodes, edges\n \n-    pub fn each_node(&self, f: |NodeIndex, &Node<N>| -> bool) -> bool {\n+    pub fn each_node<'a>(&'a self, f: |NodeIndex, &'a Node<N>| -> bool) -> bool {\n         //! Iterates over all edges defined in the graph.\n         self.nodes.iter().enumerate().advance(|(i, node)| f(NodeIndex(i), node))\n     }\n \n-    pub fn each_edge(&self, f: |EdgeIndex, &Edge<E>| -> bool) -> bool {\n+    pub fn each_edge<'a>(&'a self, f: |EdgeIndex, &'a Edge<E>| -> bool) -> bool {\n         //! Iterates over all edges defined in the graph\n         self.edges.iter().enumerate().advance(|(i, edge)| f(EdgeIndex(i), edge))\n     }\n \n-    pub fn each_outgoing_edge(&self,\n-                              source: NodeIndex,\n-                              f: |EdgeIndex, &Edge<E>| -> bool)\n-                              -> bool {\n+    pub fn each_outgoing_edge<'a>(&'a self,\n+                                  source: NodeIndex,\n+                                  f: |EdgeIndex, &'a Edge<E>| -> bool)\n+                                  -> bool {\n         //! Iterates over all outgoing edges from the node `from`\n \n         self.each_adjacent_edge(source, Outgoing, f)\n     }\n \n-    pub fn each_incoming_edge(&self,\n-                              target: NodeIndex,\n-                              f: |EdgeIndex, &Edge<E>| -> bool)\n-                              -> bool {\n+    pub fn each_incoming_edge<'a>(&'a self,\n+                                  target: NodeIndex,\n+                                  f: |EdgeIndex, &'a Edge<E>| -> bool)\n+                                  -> bool {\n         //! Iterates over all incoming edges to the node `target`\n \n         self.each_adjacent_edge(target, Incoming, f)\n     }\n \n-    pub fn each_adjacent_edge(&self,\n-                              node: NodeIndex,\n-                              dir: Direction,\n-                              f: |EdgeIndex, &Edge<E>| -> bool)\n-                              -> bool {\n+    pub fn each_adjacent_edge<'a>(&'a self,\n+                                  node: NodeIndex,\n+                                  dir: Direction,\n+                                  f: |EdgeIndex, &'a Edge<E>| -> bool)\n+                                  -> bool {\n         //! Iterates over all edges adjacent to the node `node`\n         //! in the direction `dir` (either `Outgoing` or `Incoming)\n \n@@ -257,11 +261,11 @@ impl<N,E> Graph<N,E> {\n     // variables or other bitsets. This method facilitates such a\n     // computation.\n \n-    pub fn iterate_until_fixed_point(&self,\n-                                     op: |iter_index: uint,\n-                                          edge_index: EdgeIndex,\n-                                          edge: &Edge<E>|\n-                                          -> bool) {\n+    pub fn iterate_until_fixed_point<'a>(&'a self,\n+                                         op: |iter_index: uint,\n+                                              edge_index: EdgeIndex,\n+                                              edge: &'a Edge<E>|\n+                                              -> bool) {\n         let mut iteration = 0;\n         let mut changed = true;\n         while changed {"}]}