{"sha": "b3919ea80de5dff9f4c58ad6b66a936477f7f014", "node_id": "C_kwDOAAsO6NoAKGIzOTE5ZWE4MGRlNWRmZjlmNGM1OGFkNmI2NmE5MzY0NzdmN2YwMTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-31T12:10:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-31T12:14:04Z"}, "message": "Cleanup crate_graph construction", "tree": {"sha": "cf803f99807d83f83600dd4ba2b62832e836f77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf803f99807d83f83600dd4ba2b62832e836f77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3919ea80de5dff9f4c58ad6b66a936477f7f014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3919ea80de5dff9f4c58ad6b66a936477f7f014", "html_url": "https://github.com/rust-lang/rust/commit/b3919ea80de5dff9f4c58ad6b66a936477f7f014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3919ea80de5dff9f4c58ad6b66a936477f7f014/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31db1fc75fe24c81e58ba7ee4612e4be3f323f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/31db1fc75fe24c81e58ba7ee4612e4be3f323f95", "html_url": "https://github.com/rust-lang/rust/commit/31db1fc75fe24c81e58ba7ee4612e4be3f323f95"}], "stats": {"total": 668, "additions": 335, "deletions": 333}, "files": [{"sha": "3339580bfe278b7fc42eda6546dfd9fb3e97393c", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -157,8 +157,8 @@ impl ChangeFixture {\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n                     version,\n-                    meta.cfg.clone(),\n                     meta.cfg,\n+                    Default::default(),\n                     meta.env,\n                     false,\n                     origin,\n@@ -197,8 +197,8 @@ impl ChangeFixture {\n                 Edition::CURRENT,\n                 Some(CrateName::new(\"test\").unwrap().into()),\n                 None,\n-                default_cfg.clone(),\n                 default_cfg,\n+                Default::default(),\n                 Env::default(),\n                 false,\n                 CrateOrigin::Local { repo: None, name: None },\n@@ -241,8 +241,8 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"core\".to_string())),\n                 None,\n-                CfgOptions::default(),\n-                CfgOptions::default(),\n+                Default::default(),\n+                Default::default(),\n                 Env::default(),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n@@ -280,8 +280,8 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"proc_macros\".to_string())),\n                 None,\n-                CfgOptions::default(),\n-                CfgOptions::default(),\n+                Default::default(),\n+                Default::default(),\n                 Env::default(),\n                 true,\n                 CrateOrigin::Local { repo: None, name: None },"}, {"sha": "ca09963aef44b325a86862f88b2d308aa39452b7", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -300,7 +300,8 @@ pub struct CrateData {\n     /// `Dependency` matters), this name should only be used for UI.\n     pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n-    pub potential_cfg_options: CfgOptions,\n+    /// The cfg options that could be used by the crate\n+    pub potential_cfg_options: Option<CfgOptions>,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub origin: CrateOrigin,\n@@ -356,7 +357,7 @@ impl CrateGraph {\n         display_name: Option<CrateDisplayName>,\n         version: Option<String>,\n         cfg_options: CfgOptions,\n-        potential_cfg_options: CfgOptions,\n+        potential_cfg_options: Option<CfgOptions>,\n         env: Env,\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n@@ -673,7 +674,7 @@ impl fmt::Display for CyclicDependenciesError {\n mod tests {\n     use crate::CrateOrigin;\n \n-    use super::{CfgOptions, CrateGraph, CrateName, Dependency, Edition::Edition2018, Env, FileId};\n+    use super::{CrateGraph, CrateName, Dependency, Edition::Edition2018, Env, FileId};\n \n     #[test]\n     fn detect_cyclic_dependency_indirect() {\n@@ -683,8 +684,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -696,8 +697,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -709,8 +710,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -736,8 +737,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -749,8 +750,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -773,8 +774,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -786,8 +787,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -799,8 +800,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -823,8 +824,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },\n@@ -836,8 +837,8 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            CfgOptions::default(),\n-            CfgOptions::default(),\n+            Default::default(),\n+            Default::default(),\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },"}, {"sha": "624ee1fd30ac36439fb65fde8ae1cb95e679ee45", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -253,7 +253,8 @@ impl Crate {\n     }\n \n     pub fn potential_cfg(&self, db: &dyn HirDatabase) -> CfgOptions {\n-        db.crate_graph()[self.id].potential_cfg_options.clone()\n+        let data = &db.crate_graph()[self.id];\n+        data.potential_cfg_options.clone().unwrap_or_else(|| data.cfg_options.clone())\n     }\n }\n "}, {"sha": "b227addc4c2811d0a2ed89ff4074422e13331ccf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -237,7 +237,7 @@ impl Analysis {\n             None,\n             None,\n             cfg_options.clone(),\n-            cfg_options,\n+            None,\n             Env::default(),\n             false,\n             CrateOrigin::Local { repo: None, name: None },"}, {"sha": "e366d441c1bd74e9ace74d232872e1ce64542e6f", "filename": "crates/project-model/src/cfg_flag.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -49,6 +49,14 @@ impl Extend<CfgFlag> for CfgOptions {\n     }\n }\n \n+impl FromIterator<CfgFlag> for CfgOptions {\n+    fn from_iter<T: IntoIterator<Item = CfgFlag>>(iter: T) -> Self {\n+        let mut this = CfgOptions::default();\n+        this.extend(iter);\n+        this\n+    }\n+}\n+\n impl fmt::Display for CfgFlag {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {"}, {"sha": "e31269aeadd2641c87bc69d339f5474ddbd24327", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 143, "deletions": 161, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -150,11 +150,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -185,8 +181,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -217,11 +216,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -261,8 +256,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -293,11 +291,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -337,8 +331,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -369,11 +366,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -413,8 +406,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -447,17 +443,19 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"feature=std\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"feature=align\",\n-                                \"feature=const-extern-fn\",\n-                                \"feature=default\",\n-                                \"feature=extra_traits\",\n-                                \"feature=rustc-dep-of-std\",\n-                                \"feature=std\",\n-                                \"feature=use_std\",\n-                            ],\n+                        potential_cfg_options: Some(\n+                            CfgOptions(\n+                                [\n+                                    \"debug_assertions\",\n+                                    \"feature=align\",\n+                                    \"feature=const-extern-fn\",\n+                                    \"feature=default\",\n+                                    \"feature=extra_traits\",\n+                                    \"feature=rustc-dep-of-std\",\n+                                    \"feature=std\",\n+                                    \"feature=use_std\",\n+                                ],\n+                            ),\n                         ),\n                         env: Env {\n                             entries: {\n@@ -479,7 +477,10 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        origin: Rustc {\n+                        origin: Library {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n                             name: \"libc\",\n                         },\n                         is_proc_macro: false,\n@@ -535,12 +536,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -571,8 +567,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -604,12 +603,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -649,8 +643,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -682,12 +679,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -727,8 +719,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -760,12 +755,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -805,8 +795,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -839,17 +832,19 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"feature=std\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"feature=align\",\n-                                \"feature=const-extern-fn\",\n-                                \"feature=default\",\n-                                \"feature=extra_traits\",\n-                                \"feature=rustc-dep-of-std\",\n-                                \"feature=std\",\n-                                \"feature=use_std\",\n-                            ],\n+                        potential_cfg_options: Some(\n+                            CfgOptions(\n+                                [\n+                                    \"debug_assertions\",\n+                                    \"feature=align\",\n+                                    \"feature=const-extern-fn\",\n+                                    \"feature=default\",\n+                                    \"feature=extra_traits\",\n+                                    \"feature=rustc-dep-of-std\",\n+                                    \"feature=std\",\n+                                    \"feature=use_std\",\n+                                ],\n+                            ),\n                         ),\n                         env: Env {\n                             entries: {\n@@ -871,7 +866,10 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        origin: Rustc {\n+                        origin: Library {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n                             name: \"libc\",\n                         },\n                         is_proc_macro: false,\n@@ -917,12 +915,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -953,8 +946,11 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -986,12 +982,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1031,8 +1022,11 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -1064,12 +1058,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1109,8 +1098,11 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -1142,12 +1134,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"test\",\n-                            ],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1187,8 +1174,11 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        origin: Rustc {\n-                            name: \"hello-world\",\n+                        origin: Local {\n+                            repo: None,\n+                            name: Some(\n+                                \"hello-world\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                         target_layout: Err(\n@@ -1221,17 +1211,19 @@ fn cargo_hello_world_project_model() {\n                                 \"feature=std\",\n                             ],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"feature=align\",\n-                                \"feature=const-extern-fn\",\n-                                \"feature=default\",\n-                                \"feature=extra_traits\",\n-                                \"feature=rustc-dep-of-std\",\n-                                \"feature=std\",\n-                                \"feature=use_std\",\n-                            ],\n+                        potential_cfg_options: Some(\n+                            CfgOptions(\n+                                [\n+                                    \"debug_assertions\",\n+                                    \"feature=align\",\n+                                    \"feature=const-extern-fn\",\n+                                    \"feature=default\",\n+                                    \"feature=extra_traits\",\n+                                    \"feature=rustc-dep-of-std\",\n+                                    \"feature=std\",\n+                                    \"feature=use_std\",\n+                                ],\n+                            ),\n                         ),\n                         env: Env {\n                             entries: {\n@@ -1253,7 +1245,10 @@ fn cargo_hello_world_project_model() {\n                             },\n                         },\n                         dependencies: [],\n-                        origin: Rustc {\n+                        origin: Library {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n                             name: \"libc\",\n                         },\n                         is_proc_macro: false,\n@@ -1294,9 +1289,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1339,9 +1332,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1374,9 +1365,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1409,9 +1398,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1444,9 +1431,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1498,9 +1483,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1533,9 +1516,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1641,9 +1622,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1676,9 +1655,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1711,9 +1688,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1746,9 +1721,7 @@ fn rust_project_hello_world_project_model() {\n                         cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n-                        ),\n+                        potential_cfg_options: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1789,6 +1762,15 @@ fn rust_project_hello_world_project_model() {\n                                 ),\n                                 prelude: false,\n                             },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"proc_macro\",\n+                                ),\n+                                prelude: false,\n+                            },\n                         ],\n                         origin: Local {\n                             repo: None,"}, {"sha": "418696a3610ed4ab692490856a0c972e28f52127", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 151, "deletions": 141, "changes": 292, "blob_url": "https://github.com/rust-lang/rust/blob/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3919ea80de5dff9f4c58ad6b66a936477f7f014/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=b3919ea80de5dff9f4c58ad6b66a936477f7f014", "patch": "@@ -19,6 +19,7 @@ use crate::{\n     build_scripts::BuildScriptOutput,\n     cargo_workspace::{DepKind, PackageData, RustLibSource},\n     cfg_flag::CfgFlag,\n+    project_json::Crate,\n     rustc_cfg,\n     sysroot::SysrootCrate,\n     target_data_layout, utf8_stdout, CargoConfig, CargoWorkspace, InvocationStrategy, ManifestPath,\n@@ -717,11 +718,11 @@ fn project_json_to_crate_graph(\n     target_layout: TargetLayoutLoadResult,\n     channel: Option<ReleaseChannel>,\n ) -> (CrateGraph, ProcMacroPaths) {\n-    let mut crate_graph = CrateGraph::default();\n-    let mut proc_macros: ProcMacroPaths = FxHashMap::default();\n+    let mut res = (CrateGraph::default(), ProcMacroPaths::default());\n+    let (crate_graph, proc_macros) = &mut res;\n     let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n         sysroot_to_crate_graph(\n-            &mut crate_graph,\n+            crate_graph,\n             sysroot,\n             rustc_cfg.clone(),\n             target_layout.clone(),\n@@ -733,80 +734,84 @@ fn project_json_to_crate_graph(\n     let mut cfg_cache: FxHashMap<&str, Vec<CfgFlag>> = FxHashMap::default();\n     let crates: NoHashHashMap<CrateId, CrateId> = project\n         .crates()\n-        .filter_map(|(crate_id, krate)| {\n-            let file_path = &krate.root_module;\n-            let file_id = load(file_path)?;\n-            Some((crate_id, krate, file_id))\n-        })\n-        .map(|(crate_id, krate, file_id)| {\n-            let env = krate.env.clone().into_iter().collect();\n-\n-            let target_cfgs = match krate.target.as_deref() {\n-                Some(target) => cfg_cache\n-                    .entry(target)\n-                    .or_insert_with(|| rustc_cfg::get(None, Some(target), extra_env)),\n-                None => &rustc_cfg,\n-            };\n-\n-            let mut cfg_options = CfgOptions::default();\n-            cfg_options.extend(target_cfgs.iter().chain(krate.cfg.iter()).cloned());\n-            let crate_graph_crate_id = crate_graph.add_crate_root(\n+        .filter_map(|(crate_id, krate)| Some((crate_id, krate, load(&krate.root_module)?)))\n+        .map(\n+            |(\n+                crate_id,\n+                Crate {\n+                    display_name,\n+                    edition,\n+                    version,\n+                    cfg,\n+                    target,\n+                    env,\n+                    proc_macro_dylib_path,\n+                    is_proc_macro,\n+                    repository,\n+                    ..\n+                },\n                 file_id,\n-                krate.edition,\n-                krate.display_name.clone(),\n-                krate.version.clone(),\n-                cfg_options.clone(),\n-                cfg_options,\n-                env,\n-                krate.is_proc_macro,\n-                if let Some(name) = krate.display_name.clone() {\n-                    CrateOrigin::Local {\n-                        repo: krate.repository.clone(),\n-                        name: Some(name.canonical_name().to_string()),\n+            )| {\n+                let env = env.clone().into_iter().collect();\n+\n+                let target_cfgs = match target.as_deref() {\n+                    Some(target) => cfg_cache\n+                        .entry(target)\n+                        .or_insert_with(|| rustc_cfg::get(None, Some(target), extra_env)),\n+                    None => &rustc_cfg,\n+                };\n+\n+                let crate_graph_crate_id = crate_graph.add_crate_root(\n+                    file_id,\n+                    *edition,\n+                    display_name.clone(),\n+                    version.clone(),\n+                    target_cfgs.iter().chain(cfg.iter()).cloned().collect(),\n+                    None,\n+                    env,\n+                    *is_proc_macro,\n+                    if let Some(name) = display_name.clone() {\n+                        CrateOrigin::Local {\n+                            repo: repository.clone(),\n+                            name: Some(name.canonical_name().to_string()),\n+                        }\n+                    } else {\n+                        CrateOrigin::Local { repo: None, name: None }\n+                    },\n+                    target_layout.clone(),\n+                    None,\n+                );\n+                if *is_proc_macro {\n+                    if let Some(path) = proc_macro_dylib_path.clone() {\n+                        let node = Ok((\n+                            display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n+                            path,\n+                        ));\n+                        proc_macros.insert(crate_graph_crate_id, node);\n                     }\n-                } else {\n-                    CrateOrigin::Local { repo: None, name: None }\n-                },\n-                target_layout.clone(),\n-                None,\n-            );\n-            if krate.is_proc_macro {\n-                if let Some(path) = krate.proc_macro_dylib_path.clone() {\n-                    let node = Ok((\n-                        krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n-                        path,\n-                    ));\n-                    proc_macros.insert(crate_graph_crate_id, node);\n                 }\n-            }\n-            (crate_id, crate_graph_crate_id)\n-        })\n+                (crate_id, crate_graph_crate_id)\n+            },\n+        )\n         .collect();\n \n     for (from, krate) in project.crates() {\n         if let Some(&from) = crates.get(&from) {\n             if let Some((public_deps, libproc_macro)) = &sysroot_deps {\n-                public_deps.add_to_crate_graph(&mut crate_graph, from);\n-                if krate.is_proc_macro {\n-                    if let Some(proc_macro) = libproc_macro {\n-                        add_dep(\n-                            &mut crate_graph,\n-                            from,\n-                            CrateName::new(\"proc_macro\").unwrap(),\n-                            *proc_macro,\n-                        );\n-                    }\n+                public_deps.add_to_crate_graph(crate_graph, from);\n+                if let Some(proc_macro) = libproc_macro {\n+                    add_proc_macro_dep(crate_graph, from, *proc_macro, krate.is_proc_macro);\n                 }\n             }\n \n             for dep in &krate.deps {\n                 if let Some(&to) = crates.get(&dep.crate_id) {\n-                    add_dep(&mut crate_graph, from, dep.name.clone(), to)\n+                    add_dep(crate_graph, from, dep.name.clone(), to)\n                 }\n             }\n         }\n     }\n-    (crate_graph, proc_macros)\n+    res\n }\n \n fn cargo_to_crate_graph(\n@@ -821,11 +826,12 @@ fn cargo_to_crate_graph(\n     channel: Option<ReleaseChannel>,\n ) -> (CrateGraph, ProcMacroPaths) {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n-    let mut crate_graph = CrateGraph::default();\n-    let mut proc_macros = FxHashMap::default();\n+    let mut res = (CrateGraph::default(), ProcMacroPaths::default());\n+    let crate_graph = &mut res.0;\n+    let proc_macros = &mut res.1;\n     let (public_deps, libproc_macro) = match sysroot {\n         Some(sysroot) => sysroot_to_crate_graph(\n-            &mut crate_graph,\n+            crate_graph,\n             sysroot,\n             rustc_cfg.clone(),\n             target_layout.clone(),\n@@ -842,37 +848,42 @@ fn cargo_to_crate_graph(\n         cfg_options\n     };\n \n+    // Mapping of a package to its library target\n     let mut pkg_to_lib_crate = FxHashMap::default();\n-\n     let mut pkg_crates = FxHashMap::default();\n     // Does any crate signal to rust-analyzer that they need the rustc_private crates?\n     let mut has_private = false;\n+\n     // Next, create crates for each package, target pair\n     for pkg in cargo.packages() {\n-        let mut cfg_options = cfg_options.clone();\n+        has_private |= cargo[pkg].metadata.rustc_private;\n \n-        let overrides = match override_cfg {\n-            CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n-            CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n-        };\n+        let cfg_options = {\n+            let mut cfg_options = cfg_options.clone();\n \n-        // Add test cfg for local crates\n-        if cargo[pkg].is_local {\n-            cfg_options.insert_atom(\"test\".into());\n-        }\n+            // Add test cfg for local crates\n+            if cargo[pkg].is_local {\n+                cfg_options.insert_atom(\"test\".into());\n+            }\n \n-        if let Some(overrides) = overrides {\n-            // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n-            // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n-            // working on rust-lang/rust as that's the only time it appears outside sysroot).\n-            //\n-            // A more ideal solution might be to reanalyze crates based on where the cursor is and\n-            // figure out the set of cfgs that would have to apply to make it active.\n+            let overrides = match override_cfg {\n+                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n+                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n+            };\n \n-            cfg_options.apply_diff(overrides.clone());\n+            if let Some(overrides) = overrides {\n+                // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n+                // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n+                // working on rust-lang/rust as that's the only time it appears outside sysroot).\n+                //\n+                // A more ideal solution might be to reanalyze crates based on where the cursor is and\n+                // figure out the set of cfgs that would have to apply to make it active.\n+\n+                cfg_options.apply_diff(overrides.clone());\n+            };\n+            cfg_options\n         };\n \n-        has_private |= cargo[pkg].metadata.rustc_private;\n         let mut lib_tgt = None;\n         for &tgt in cargo[pkg].targets.iter() {\n             if cargo[tgt].kind != TargetKind::Lib && !cargo[pkg].is_member {\n@@ -883,46 +894,40 @@ fn cargo_to_crate_graph(\n                 // https://github.com/rust-lang/rust-analyzer/issues/11300\n                 continue;\n             }\n+            let Some(file_id) =  load(&cargo[tgt].root) else { continue };\n \n-            if let Some(file_id) = load(&cargo[tgt].root) {\n-                let crate_id = add_target_crate_root(\n-                    &mut crate_graph,\n-                    &mut proc_macros,\n-                    &cargo[pkg],\n-                    build_scripts.get_output(pkg),\n-                    cfg_options.clone(),\n-                    file_id,\n-                    &cargo[tgt].name,\n-                    cargo[tgt].is_proc_macro,\n-                    target_layout.clone(),\n-                    true,\n-                    channel,\n-                );\n-                if cargo[tgt].kind == TargetKind::Lib {\n-                    lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n-                    pkg_to_lib_crate.insert(pkg, crate_id);\n-                }\n-                // Even crates that don't set proc-macro = true are allowed to depend on proc_macro\n-                // (just none of the APIs work when called outside of a proc macro).\n-                if let Some(proc_macro) = libproc_macro {\n-                    add_dep_with_prelude(\n-                        &mut crate_graph,\n-                        crate_id,\n-                        CrateName::new(\"proc_macro\").unwrap(),\n-                        proc_macro,\n-                        cargo[tgt].is_proc_macro,\n-                    );\n-                }\n-\n-                pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, cargo[tgt].kind));\n+            let crate_id = add_target_crate_root(\n+                crate_graph,\n+                proc_macros,\n+                &cargo[pkg],\n+                build_scripts.get_output(pkg),\n+                cfg_options.clone(),\n+                file_id,\n+                &cargo[tgt].name,\n+                cargo[tgt].is_proc_macro,\n+                target_layout.clone(),\n+                false,\n+                channel,\n+            );\n+            if cargo[tgt].kind == TargetKind::Lib {\n+                lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n+                pkg_to_lib_crate.insert(pkg, crate_id);\n+            }\n+            // Even crates that don't set proc-macro = true are allowed to depend on proc_macro\n+            // (just none of the APIs work when called outside of a proc macro).\n+            if let Some(proc_macro) = libproc_macro {\n+                add_proc_macro_dep(crate_graph, crate_id, proc_macro, cargo[tgt].is_proc_macro);\n             }\n+\n+            pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, cargo[tgt].kind));\n         }\n \n         // Set deps to the core, std and to the lib target of the current package\n         for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n             // Add sysroot deps first so that a lib target named `core` etc. can overwrite them.\n-            public_deps.add_to_crate_graph(&mut crate_graph, from);\n+            public_deps.add_to_crate_graph(crate_graph, from);\n \n+            // Add dep edge of all targets to the package's lib target\n             if let Some((to, name)) = lib_tgt.clone() {\n                 if to != from && kind != TargetKind::BuildScript {\n                     // (build script can not depend on its library target)\n@@ -931,7 +936,7 @@ fn cargo_to_crate_graph(\n                     // cargo metadata does not do any normalization,\n                     // so we do it ourselves currently\n                     let name = CrateName::normalize_dashes(&name);\n-                    add_dep(&mut crate_graph, from, name, to);\n+                    add_dep(crate_graph, from, name, to);\n                 }\n             }\n         }\n@@ -940,21 +945,18 @@ fn cargo_to_crate_graph(\n     // Now add a dep edge from all targets of upstream to the lib\n     // target of downstream.\n     for pkg in cargo.packages() {\n-        for dep in cargo[pkg].dependencies.iter() {\n-            let name = CrateName::new(&dep.name).unwrap();\n-            if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n-                for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n-                    if dep.kind == DepKind::Build && kind != TargetKind::BuildScript {\n-                        // Only build scripts may depend on build dependencies.\n-                        continue;\n-                    }\n-                    if dep.kind != DepKind::Build && kind == TargetKind::BuildScript {\n-                        // Build scripts may only depend on build dependencies.\n-                        continue;\n-                    }\n+        for dep in &cargo[pkg].dependencies {\n+            let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) else { continue };\n+            let Some(targets) = pkg_crates.get(&pkg) else { continue };\n \n-                    add_dep(&mut crate_graph, from, name.clone(), to)\n+            let name = CrateName::new(&dep.name).unwrap();\n+            for &(from, kind) in targets {\n+                // Build scripts may only depend on build dependencies.\n+                if (dep.kind == DepKind::Build) != (kind == TargetKind::BuildScript) {\n+                    continue;\n                 }\n+\n+                add_dep(crate_graph, from, name.clone(), to)\n             }\n         }\n     }\n@@ -964,8 +966,8 @@ fn cargo_to_crate_graph(\n         // and create dependencies on them for the crates which opt-in to that\n         if let Some((rustc_workspace, rustc_build_scripts)) = rustc {\n             handle_rustc_crates(\n-                &mut crate_graph,\n-                &mut proc_macros,\n+                crate_graph,\n+                proc_macros,\n                 &mut pkg_to_lib_crate,\n                 load,\n                 rustc_workspace,\n@@ -987,7 +989,7 @@ fn cargo_to_crate_graph(\n             );\n         }\n     }\n-    (crate_graph, proc_macros)\n+    res\n }\n \n fn detached_files_to_crate_graph(\n@@ -1032,7 +1034,7 @@ fn detached_files_to_crate_graph(\n             display_name.clone(),\n             None,\n             cfg_options.clone(),\n-            cfg_options.clone(),\n+            None,\n             Env::default(),\n             false,\n             CrateOrigin::Local {\n@@ -1127,10 +1129,9 @@ fn handle_rustc_crates(\n                     // Add dependencies on core / std / alloc for this crate\n                     public_deps.add_to_crate_graph(crate_graph, crate_id);\n                     if let Some(proc_macro) = libproc_macro {\n-                        add_dep_with_prelude(\n+                        add_proc_macro_dep(\n                             crate_graph,\n                             crate_id,\n-                            CrateName::new(\"proc_macro\").unwrap(),\n                             proc_macro,\n                             rustc_workspace[tgt].is_proc_macro,\n                         );\n@@ -1191,12 +1192,17 @@ fn add_target_crate_root(\n     channel: Option<ReleaseChannel>,\n ) -> CrateId {\n     let edition = pkg.edition;\n-    let mut potential_cfg_options = cfg_options.clone();\n-    potential_cfg_options.extend(\n-        pkg.features\n-            .iter()\n-            .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n-    );\n+    let potential_cfg_options = if pkg.features.is_empty() {\n+        None\n+    } else {\n+        let mut potential_cfg_options = cfg_options.clone();\n+        potential_cfg_options.extend(\n+            pkg.features\n+                .iter()\n+                .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n+        );\n+        Some(potential_cfg_options)\n+    };\n     let cfg_options = {\n         let mut opts = cfg_options;\n         for feature in pkg.active_features.iter() {\n@@ -1288,7 +1294,7 @@ fn sysroot_to_crate_graph(\n                 Some(display_name),\n                 None,\n                 cfg_options.clone(),\n-                cfg_options.clone(),\n+                None,\n                 env,\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n@@ -1333,6 +1339,10 @@ fn add_dep_with_prelude(\n     add_dep_inner(graph, from, Dependency::with_prelude(name, to, prelude))\n }\n \n+fn add_proc_macro_dep(crate_graph: &mut CrateGraph, from: CrateId, to: CrateId, prelude: bool) {\n+    add_dep_with_prelude(crate_graph, from, CrateName::new(\"proc_macro\").unwrap(), to, prelude);\n+}\n+\n fn add_dep_inner(graph: &mut CrateGraph, from: CrateId, dep: Dependency) {\n     if let Err(err) = graph.add_dep(from, dep) {\n         tracing::error!(\"{}\", err)"}]}