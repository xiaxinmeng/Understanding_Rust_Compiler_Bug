{"sha": "31fa44b18e6e8bd42630d6495823ade6a5adaeba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZmE0NGIxOGU2ZThiZDQyNjMwZDY0OTU4MjNhZGU2YTVhZGFlYmE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-09-10T20:25:28Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-09-10T20:25:28Z"}, "message": "Don't print the macro definition site in backtraces\n\nThis halves the backtrace length. The definition site wasn't very useful\nanyways, since it may be invalid (for compiler expansions) or located in\nanother crate. Since the macro name is still printed, grepping for it is\nstill an easy way of finding the definition.", "tree": {"sha": "91fd59cafc990ba7dadc89843f17b747fe9a3b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fd59cafc990ba7dadc89843f17b747fe9a3b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31fa44b18e6e8bd42630d6495823ade6a5adaeba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31fa44b18e6e8bd42630d6495823ade6a5adaeba", "html_url": "https://github.com/rust-lang/rust/commit/31fa44b18e6e8bd42630d6495823ade6a5adaeba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31fa44b18e6e8bd42630d6495823ade6a5adaeba/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d8b0dcbef738b70f08b6648bb7c358b491f47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d8b0dcbef738b70f08b6648bb7c358b491f47c", "html_url": "https://github.com/rust-lang/rust/commit/49d8b0dcbef738b70f08b6648bb7c358b491f47c"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "c383f26b4e33da9bbf72218f15db76c1a88ba84a", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=31fa44b18e6e8bd42630d6495823ade6a5adaeba", "patch": "@@ -732,21 +732,17 @@ impl EmitterWriter {\n             sp_opt = try!(cm.with_expn_info(sp.expn_id, |expn_info| -> io::Result<_> {\n                 match expn_info {\n                     Some(ei) => {\n-                        let ss = ei.callee.span.map_or(String::new(),\n-                                                       |span| cm.span_to_string(span));\n                         let (pre, post) = match ei.callee.format {\n                             codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n                             codemap::MacroBang(..) => (\"\", \"!\"),\n                             codemap::CompilerExpansion(..) => (\"\", \"\"),\n                         };\n-                        try!(self.print_diagnostic(&ss, Note,\n-                                                   &format!(\"in expansion of {}{}{}\",\n+                        try!(self.print_diagnostic(&cm.span_to_string(ei.call_site), Note,\n+                                                   &format!(\"in this expansion of {}{}{}\",\n                                                             pre,\n                                                             ei.callee.name(),\n                                                             post),\n                                                    None));\n-                        let ss = cm.span_to_string(ei.call_site);\n-                        try!(self.print_diagnostic(&ss, Note, \"expansion site\", None));\n                         Ok(Some(ei.call_site))\n                     }\n                     None => Ok(None)"}, {"sha": "ce2315f3a38d46e859cdb66a6992097db7c537cc", "filename": "src/test/compile-fail/for-expn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-expn-2.rs?ref=31fa44b18e6e8bd42630d6495823ade6a5adaeba", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we get an expansion stack for `for` loops.\n \n-// error-pattern:in expansion of for loop expansion\n+// error-pattern:in this expansion of for loop expansion\n \n fn main() {\n     for t in &foo {"}, {"sha": "5069ec7d2846ae80216e3db001d53209abff909b", "filename": "src/test/compile-fail/macro-backtrace-invalid-internals.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs?ref=31fa44b18e6e8bd42630d6495823ade6a5adaeba", "patch": "@@ -10,25 +10,25 @@\n \n // Macros in statement vs expression position handle backtraces differently.\n \n-macro_rules! fake_method_stmt { //~ NOTE in expansion of\n+macro_rules! fake_method_stmt {\n      () => {\n           1.fake() //~ ERROR no method named `fake` found\n      }\n }\n \n-macro_rules! fake_field_stmt { //~ NOTE in expansion of\n+macro_rules! fake_field_stmt {\n      () => {\n           1.fake //~ ERROR no field with that name\n      }\n }\n \n-macro_rules! fake_anon_field_stmt { //~ NOTE in expansion of\n+macro_rules! fake_anon_field_stmt {\n      () => {\n           (1).0 //~ ERROR type was not a tuple\n      }\n }\n \n-macro_rules! fake_method_expr { //~ NOTE in expansion of\n+macro_rules! fake_method_expr {\n      () => {\n           1.fake() //~ ERROR no method named `fake` found\n      }\n@@ -47,11 +47,13 @@ macro_rules! fake_anon_field_expr {\n }\n \n fn main() {\n-    fake_method_stmt!(); //~ NOTE expansion site\n-    fake_field_stmt!(); //~ NOTE expansion site\n-    fake_anon_field_stmt!(); //~ NOTE expansion site\n+    fake_method_stmt!(); //~ NOTE in this expansion of\n+    fake_field_stmt!(); //~ NOTE in this expansion of\n+    fake_anon_field_stmt!(); //~ NOTE in this expansion of\n \n-    let _ = fake_method_expr!(); //~ NOTE expansion site\n+    let _ = fake_method_expr!(); //~ NOTE in this expansion of\n     let _ = fake_field_expr!(); //~ ERROR no field with that name\n+                                //~^ NOTE in this expansion of\n     let _ = fake_anon_field_expr!(); //~ ERROR type was not a tuple\n+                                     //~^ NOTE in this expansion of\n }"}, {"sha": "a429681bb21815e2e6431b2fa52ac6f0dcef58ef", "filename": "src/test/compile-fail/macro-backtrace-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs?ref=31fa44b18e6e8bd42630d6495823ade6a5adaeba", "patch": "@@ -19,11 +19,11 @@ macro_rules! call_nested_expr {\n     () => (nested_expr!())\n }\n \n-macro_rules! call_nested_expr_sum { //~ NOTE in expansion of\n+macro_rules! call_nested_expr_sum {\n     () => { 1 + nested_expr!(); } //~ ERROR unresolved name\n }\n \n fn main() {\n     1 + call_nested_expr!(); //~ ERROR unresolved name\n-    call_nested_expr_sum!(); //~ NOTE expansion site\n+    call_nested_expr_sum!(); //~ NOTE in this expansion of\n }"}, {"sha": "294892662d46480d24d383190fc3920214469243", "filename": "src/test/compile-fail/macro-backtrace-println.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs?ref=31fa44b18e6e8bd42630d6495823ade6a5adaeba", "patch": "@@ -16,14 +16,15 @@\n \n fn print(_args: std::fmt::Arguments) {}\n \n-macro_rules! myprint { //~ NOTE in expansion of\n-    ($($arg:tt)*) => (print(format_args!($($arg)*)));\n+macro_rules! myprint {\n+    ($($arg:tt)*) => (print(format_args!($($arg)*)));   //~ NOTE in this expansion of\n }\n \n-macro_rules! myprintln { //~ NOTE in expansion of\n+macro_rules! myprintln {\n     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\"))); //~ ERROR invalid reference to argument `0`\n+                                                    //~^ NOTE in this expansion of\n }\n \n fn main() {\n-    myprintln!(\"{}\"); //~ NOTE expansion site\n+    myprintln!(\"{}\"); //~ NOTE in this expansion of\n }"}, {"sha": "967a8531b2c0afd0d4e3eebfd343a8fddad341a7", "filename": "src/test/compile-fail/method-macro-backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa44b18e6e8bd42630d6495823ade6a5adaeba/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs?ref=31fa44b18e6e8bd42630d6495823ade6a5adaeba", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// forbid-output: in expansion of\n+// forbid-output: in this expansion of\n \n macro_rules! make_method {\n     ($name:ident) => ( fn $name(&self) { } )"}]}