{"sha": "556b02704f338e121d5129c714d774bff67bf35c", "node_id": "C_kwDOAAsO6NoAKDU1NmIwMjcwNGYzMzhlMTIxZDUxMjljNzE0ZDc3NGJmZjY3YmYzNWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-24T06:23:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-26T17:00:31Z"}, "message": "Stop creating anonymous late lifetimes.", "tree": {"sha": "256103097fe88dedb10a578610565ccdbbdf55ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256103097fe88dedb10a578610565ccdbbdf55ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/556b02704f338e121d5129c714d774bff67bf35c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/556b02704f338e121d5129c714d774bff67bf35c", "html_url": "https://github.com/rust-lang/rust/commit/556b02704f338e121d5129c714d774bff67bf35c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/556b02704f338e121d5129c714d774bff67bf35c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1b1819eb65e30b8351e14b93bfac8740077242", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1b1819eb65e30b8351e14b93bfac8740077242", "html_url": "https://github.com/rust-lang/rust/commit/ad1b1819eb65e30b8351e14b93bfac8740077242"}], "stats": {"total": 89, "additions": 4, "deletions": 85}, "files": [{"sha": "c1b201da69121c92e5a1b2e63a068a90836a376a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=556b02704f338e121d5129c714d774bff67bf35c", "patch": "@@ -100,23 +100,6 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                 // the lifetime of the TyRptr\n                 let hir_id = lifetime.hir_id;\n                 match (self.tcx.named_region(hir_id), self.bound_region) {\n-                    // Find the index of the anonymous region that was part of the\n-                    // error. We will then search the function parameters for a bound\n-                    // region at the right depth with the same index\n-                    (\n-                        Some(rl::Region::LateBoundAnon(debruijn_index, _, anon_index)),\n-                        ty::BrAnon(br_index),\n-                    ) => {\n-                        debug!(\n-                            \"LateBoundAnon depth = {:?} anon_index = {:?} br_index={:?}\",\n-                            debruijn_index, anon_index, br_index\n-                        );\n-                        if debruijn_index == self.current_index && anon_index == br_index {\n-                            self.found_type = Some(arg);\n-                            return; // we can stop visiting now\n-                        }\n-                    }\n-\n                     // Find the index of the named region that was part of the\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n@@ -151,8 +134,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                             rl::Region::Static\n                             | rl::Region::Free(_, _)\n                             | rl::Region::EarlyBound(_, _)\n-                            | rl::Region::LateBound(_, _, _)\n-                            | rl::Region::LateBoundAnon(_, _, _),\n+                            | rl::Region::LateBound(_, _, _),\n                         )\n                         | None,\n                         _,\n@@ -206,16 +188,6 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n         match (self.tcx.named_region(lifetime.hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n-            (\n-                Some(rl::Region::LateBoundAnon(debruijn_index, _, anon_index)),\n-                ty::BrAnon(br_index),\n-            ) => {\n-                if debruijn_index == self.current_index && anon_index == br_index {\n-                    self.found_it = true;\n-                    return;\n-                }\n-            }\n-\n             (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"EarlyBound id={:?} def_id={:?}\", id, def_id);\n                 if id == def_id {\n@@ -239,7 +211,6 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n                     rl::Region::Static\n                     | rl::Region::EarlyBound(_, _)\n                     | rl::Region::LateBound(_, _, _)\n-                    | rl::Region::LateBoundAnon(_, _, _)\n                     | rl::Region::Free(_, _),\n                 )\n                 | None,"}, {"sha": "9b2f44567053225e81a7b2f6c19d71a0819b0d26", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=556b02704f338e121d5129c714d774bff67bf35c", "patch": "@@ -12,7 +12,6 @@ pub enum Region {\n     Static,\n     EarlyBound(/* index */ u32, /* lifetime decl */ DefId),\n     LateBound(ty::DebruijnIndex, /* late-bound index */ u32, /* lifetime decl */ DefId),\n-    LateBoundAnon(ty::DebruijnIndex, /* late-bound index */ u32, /* anon index */ u32),\n     Free(DefId, /* lifetime decl */ DefId),\n }\n "}, {"sha": "1d83d57fe383cc4640add4447991ce7d00b7e3e9", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=556b02704f338e121d5129c714d774bff67bf35c", "patch": "@@ -24,7 +24,6 @@ use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::borrow::Cow;\n-use std::cell::Cell;\n use std::fmt;\n use std::mem::take;\n \n@@ -33,8 +32,6 @@ trait RegionExt {\n \n     fn late(index: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n-    fn late_anon(named_late_bound_vars: u32, index: &Cell<u32>) -> Region;\n-\n     fn id(&self) -> Option<DefId>;\n \n     fn shifted(self, amount: u32) -> Region;\n@@ -65,16 +62,9 @@ impl RegionExt for Region {\n         (def_id, Region::LateBound(depth, idx, def_id.to_def_id()))\n     }\n \n-    fn late_anon(named_late_bound_vars: u32, index: &Cell<u32>) -> Region {\n-        let i = index.get();\n-        index.set(i + 1);\n-        let depth = ty::INNERMOST;\n-        Region::LateBoundAnon(depth, named_late_bound_vars + i, i)\n-    }\n-\n     fn id(&self) -> Option<DefId> {\n         match *self {\n-            Region::Static | Region::LateBoundAnon(..) => None,\n+            Region::Static => None,\n \n             Region::EarlyBound(_, id) | Region::LateBound(_, _, id) | Region::Free(_, id) => {\n                 Some(id)\n@@ -87,9 +77,6 @@ impl RegionExt for Region {\n             Region::LateBound(debruijn, idx, id) => {\n                 Region::LateBound(debruijn.shifted_in(amount), idx, id)\n             }\n-            Region::LateBoundAnon(debruijn, index, anon_index) => {\n-                Region::LateBoundAnon(debruijn.shifted_in(amount), index, anon_index)\n-            }\n             _ => self,\n         }\n     }\n@@ -99,9 +86,6 @@ impl RegionExt for Region {\n             Region::LateBound(debruijn, index, id) => {\n                 Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id)\n             }\n-            Region::LateBoundAnon(debruijn, index, anon_index) => {\n-                Region::LateBoundAnon(debruijn.shifted_out_to_binder(binder), index, anon_index)\n-            }\n             _ => self,\n         }\n     }\n@@ -193,10 +177,6 @@ enum Scope<'a> {\n \n         s: ScopeRef<'a>,\n \n-        /// In some cases not allowing late bounds allows us to avoid ICEs.\n-        /// This is almost ways set to true.\n-        allow_late_bound: bool,\n-\n         /// If this binder comes from a where clause, specify how it was created.\n         /// This is used to diagnose inaccessible lifetimes in APIT:\n         /// ```ignore (illustrative)\n@@ -272,7 +252,6 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 opaque_type_parent,\n                 scope_type,\n                 hir_id,\n-                allow_late_bound,\n                 where_bound_origin,\n                 s: _,\n             } => f\n@@ -282,7 +261,6 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 .field(\"opaque_type_parent\", opaque_type_parent)\n                 .field(\"scope_type\", scope_type)\n                 .field(\"hir_id\", hir_id)\n-                .field(\"allow_late_bound\", allow_late_bound)\n                 .field(\"where_bound_origin\", where_bound_origin)\n                 .field(\"s\", &\"..\")\n                 .finish(),\n@@ -468,9 +446,6 @@ fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::\n             let name = tcx.hir().name(tcx.hir().local_def_id_to_hir_id(def_id.expect_local()));\n             ty::BoundVariableKind::Region(ty::BrNamed(*def_id, name))\n         }\n-        Region::LateBoundAnon(_, _, anon_idx) => {\n-            ty::BoundVariableKind::Region(ty::BrAnon(*anon_idx))\n-        }\n         _ => bug!(\"{:?} is not a late region\", region),\n     }\n }\n@@ -605,7 +580,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 next_early_index,\n                 opaque_type_parent: false,\n                 scope_type: BinderScopeType::Normal,\n-                allow_late_bound: true,\n                 where_bound_origin: None,\n             };\n \n@@ -724,7 +698,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n                     s: ROOT_SCOPE,\n-                    allow_late_bound: false,\n                     where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n@@ -777,7 +750,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index,\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n-                    allow_late_bound: true,\n                     where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n@@ -942,7 +914,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n-                    allow_late_bound: false,\n                     where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n@@ -997,7 +968,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n-                    allow_late_bound: false,\n                     where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n@@ -1059,7 +1029,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n-                    allow_late_bound: true,\n                     where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n@@ -1173,7 +1142,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             next_early_index,\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n-                            allow_late_bound: true,\n                             where_bound_origin: Some(origin),\n                         };\n                         this.with(scope, |this| {\n@@ -1246,7 +1214,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index: self.next_early_index(),\n                     opaque_type_parent: false,\n                     scope_type,\n-                    allow_late_bound: true,\n                     where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n@@ -1297,7 +1264,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             next_early_index,\n             opaque_type_parent: false,\n             scope_type,\n-            allow_late_bound: true,\n             where_bound_origin: None,\n         };\n         self.with(scope, |this| {\n@@ -1551,7 +1517,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             s: self.scope,\n             opaque_type_parent: true,\n             scope_type: BinderScopeType::Normal,\n-            allow_late_bound: true,\n             where_bound_origin: None,\n         };\n         self.with(scope, walk);"}, {"sha": "08e8e6f7d0f402d18d9273702e983ffab5324733", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=556b02704f338e121d5129c714d774bff67bf35c", "patch": "@@ -221,14 +221,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n \n-            Some(rl::Region::LateBoundAnon(debruijn, index, anon_index)) => {\n-                let br = ty::BoundRegion {\n-                    var: ty::BoundVar::from_u32(index),\n-                    kind: ty::BrAnon(anon_index),\n-                };\n-                tcx.mk_region(ty::ReLateBound(debruijn, br))\n-            }\n-\n             Some(rl::Region::EarlyBound(index, id)) => {\n                 let name = lifetime_name(id.expect_local());\n                 tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion { def_id: id, index, name }))"}, {"sha": "d725c9d28ac1adbf8e644dc6086145d519e4fa47", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556b02704f338e121d5129c714d774bff67bf35c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=556b02704f338e121d5129c714d774bff67bf35c", "patch": "@@ -1346,16 +1346,8 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n \n             match self.tcx.named_region(lt.hir_id) {\n                 Some(rl::Region::Static | rl::Region::EarlyBound(..)) => {}\n-                Some(\n-                    rl::Region::LateBound(debruijn, _, _)\n-                    | rl::Region::LateBoundAnon(debruijn, _, _),\n-                ) if debruijn < self.outer_index => {}\n-                Some(\n-                    rl::Region::LateBound(..)\n-                    | rl::Region::LateBoundAnon(..)\n-                    | rl::Region::Free(..),\n-                )\n-                | None => {\n+                Some(rl::Region::LateBound(debruijn, _, _)) if debruijn < self.outer_index => {}\n+                Some(rl::Region::LateBound(..) | rl::Region::Free(..)) | None => {\n                     self.has_late_bound_regions = Some(lt.span);\n                 }\n             }"}]}