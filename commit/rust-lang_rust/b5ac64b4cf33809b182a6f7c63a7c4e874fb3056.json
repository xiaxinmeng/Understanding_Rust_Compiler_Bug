{"sha": "b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "node_id": "C_kwDOAAsO6NoAKGI1YWM2NGI0Y2YzMzgwOWIxODJhNmY3YzYzYTdjNGU4NzRmYjMwNTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-16T09:44:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-16T09:44:28Z"}, "message": "Don't PrintOnPanic on fatal errors", "tree": {"sha": "14b46090304cd4d01211e854f3a2994c02e2ed0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b46090304cd4d01211e854f3a2994c02e2ed0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "html_url": "https://github.com/rust-lang/rust/commit/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca82a9a3d987985aea5c87b3d4d1546cb5d04c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca82a9a3d987985aea5c87b3d4d1546cb5d04c9", "html_url": "https://github.com/rust-lang/rust/commit/9ca82a9a3d987985aea5c87b3d4d1546cb5d04c9"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "7df11cf4aede12915085368a10f3edddd09fdafb", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "patch": "@@ -29,8 +29,9 @@ pub(crate) fn codegen_and_compile_fn<'tcx>(\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n-    let _inst_guard =\n-        crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n+    let _inst_guard = crate::PrintOnPanic(Some(tcx.sess), || {\n+        format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name)\n+    });\n \n     let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n     let codegened_func = codegen_fn(tcx, cx, cached_func, module, instance);\n@@ -48,7 +49,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     debug_assert!(!instance.substs.needs_infer());\n \n     let mir = tcx.instance_mir(instance.def);\n-    let _mir_guard = crate::PrintOnPanic(|| {\n+    let _mir_guard = crate::PrintOnPanic(Some(tcx.sess), || {\n         let mut buf = Vec::new();\n         with_no_trimmed_paths!({\n             rustc_middle::mir::pretty::write_mir_fn(tcx, mir, &mut |_, _| Ok(()), &mut buf)\n@@ -176,7 +177,7 @@ pub(crate) fn compile_fn(\n             write!(clif, \" {}\", isa_flag).unwrap();\n         }\n         writeln!(clif, \"\\n\").unwrap();\n-        crate::PrintOnPanic(move || {\n+        crate::PrintOnPanic(None, move || {\n             let mut clif = clif.clone();\n             ::cranelift_codegen::write::decorate_function(\n                 &mut &clif_comments_clone,\n@@ -497,7 +498,7 @@ fn codegen_stmt<'tcx>(\n     #[allow(unused_variables)] cur_block: Block,\n     stmt: &Statement<'tcx>,\n ) {\n-    let _print_guard = crate::PrintOnPanic(|| format!(\"stmt {:?}\", stmt));\n+    let _print_guard = crate::PrintOnPanic(Some(fx.tcx.sess), || format!(\"stmt {:?}\", stmt));\n \n     fx.set_debug_loc(stmt.source_info);\n "}, {"sha": "1ab4fdf61551b2e327c6b05d52ff95378cb8358e", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "patch": "@@ -23,7 +23,8 @@ fn predefine_mono_items<'tcx>(\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let name = tcx.symbol_name(instance).name;\n-                    let _inst_guard = crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, name));\n+                    let _inst_guard =\n+                        crate::PrintOnPanic(Some(tcx.sess), || format!(\"{:?} {}\", instance, name));\n                     let sig =\n                         get_function_sig(tcx, module.target_config().default_call_conv, instance);\n                     let linkage = crate::linkage::get_clif_linkage("}, {"sha": "49b5dc32144d2460070a95e6ee91500e90d97dd8", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ac64b4cf33809b182a6f7c63a7c4e874fb3056/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b5ac64b4cf33809b182a6f7c63a7c4e874fb3056", "patch": "@@ -113,11 +113,11 @@ mod prelude {\n     pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n }\n \n-struct PrintOnPanic<F: Fn() -> String>(F);\n-impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n+struct PrintOnPanic<'a, F: Fn() -> String>(Option<&'a Session>, F);\n+impl<'a, F: Fn() -> String> Drop for PrintOnPanic<'a, F> {\n     fn drop(&mut self) {\n-        if ::std::thread::panicking() {\n-            println!(\"{}\", (self.0)());\n+        if ::std::thread::panicking() && self.0.map_or(true, |sess| sess.has_errors().is_none()) {\n+            println!(\"{}\", (self.1)());\n         }\n     }\n }"}]}