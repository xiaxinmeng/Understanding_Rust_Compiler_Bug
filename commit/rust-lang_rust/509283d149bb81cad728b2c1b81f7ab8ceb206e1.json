{"sha": "509283d149bb81cad728b2c1b81f7ab8ceb206e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOTI4M2QxNDliYjgxY2FkNzI4YjJjMWI4MWY3YWI4Y2ViMjA2ZTE=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-19T13:39:05Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-20T07:09:46Z"}, "message": "Improve std::num::pow implementation\n\nThe implementation has been made more succinct and no longer requires Clone. The coverage of the associated unit test has also been increased to check more combinations of bases, exponents, and expected results.", "tree": {"sha": "07b91a333c35549a363458ca5e4643313ca23dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b91a333c35549a363458ca5e4643313ca23dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509283d149bb81cad728b2c1b81f7ab8ceb206e1", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509283d149bb81cad728b2c1b81f7ab8ceb206e1", "html_url": "https://github.com/rust-lang/rust/commit/509283d149bb81cad728b2c1b81f7ab8ceb206e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509283d149bb81cad728b2c1b81f7ab8ceb206e1/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf56624a4ad7703c8f3fc327b8c385da0a803ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf56624a4ad7703c8f3fc327b8c385da0a803ea5", "html_url": "https://github.com/rust-lang/rust/commit/cf56624a4ad7703c8f3fc327b8c385da0a803ea5"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "34dd313d4421f12a6a6d453c434ffa0e67c8f1f9", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 30, "deletions": 42, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/509283d149bb81cad728b2c1b81f7ab8ceb206e1/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509283d149bb81cad728b2c1b81f7ab8ceb206e1/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=509283d149bb81cad728b2c1b81f7ab8ceb206e1", "patch": "@@ -304,48 +304,29 @@ pub trait Real: Signed\n     fn to_radians(&self) -> Self;\n }\n \n-/// Raises a value to the power of exp, using\n-/// exponentiation by squaring.\n+/// Raises a value to the power of exp, using exponentiation by squaring.\n ///\n /// # Example\n ///\n /// ```rust\n /// use std::num;\n ///\n-/// let sixteen = num::pow(2, 4u);\n-/// assert_eq!(sixteen, 16);\n+/// assert_eq!(num::pow(2, 4), 16);\n /// ```\n #[inline]\n-pub fn pow<T: Clone+One+Mul<T, T>>(num: T, exp: uint) -> T {\n-    let one: uint = One::one();\n-    let num_one: T = One::one();\n-\n-    if exp.is_zero() { return num_one; }\n-    if exp == one { return num.clone(); }\n-\n-    let mut i: uint = exp;\n-    let mut v: T;\n-    let mut r: T = num_one;\n-\n-    // This if is to avoid cloning self.\n-    if (i & one) == one {\n-        r = r * num;\n-        i = i - one;\n-    }\n-\n-    i = i >> one;\n-    v = num * num;\n-\n-    while !i.is_zero() {\n-        if (i & one) == one {\n-            r = r * v;\n-            i = i - one;\n+pub fn pow<T: One + Mul<T, T>>(mut base: T, mut exp: uint) -> T {\n+    if exp == 1 { base }\n+    else {\n+        let mut acc = one::<T>();\n+        while exp > 0 {\n+            if (exp & 1) == 1 {\n+                acc = acc * base;\n+            }\n+            base = base * base;\n+            exp = exp >> 1;\n         }\n-        i = i >> one;\n-        v = v * v;\n+        acc\n     }\n-\n-    r\n }\n \n /// Raise a number to a power.\n@@ -1670,17 +1651,24 @@ mod tests {\n \n     #[test]\n     fn test_pow() {\n-        fn assert_pow<T: Eq+Clone+One+Mul<T, T>>(num: T, exp: uint) -> () {\n-            assert_eq!(num::pow(num.clone(), exp),\n-                       range(1u, exp).fold(num.clone(), |acc, _| acc * num));\n+        fn naive_pow<T: One + Mul<T, T>>(base: T, exp: uint) -> T {\n+            range(0, exp).fold(one::<T>(), |acc, _| acc * base)\n         }\n-\n-        assert_eq!(num::pow(3, 0), 1);\n-        assert_eq!(num::pow(5, 1), 5);\n-        assert_pow(-4, 2);\n-        assert_pow(8, 3);\n-        assert_pow(8, 5);\n-        assert_pow(2u64, 50);\n+        macro_rules! assert_pow(\n+            (($num:expr, $exp:expr) => $expected:expr) => {{\n+                let result = pow($num, $exp);\n+                assert_eq!(result, $expected);\n+                assert_eq!(result, naive_pow($num, $exp));\n+            }}\n+        )\n+        assert_pow!((3,    0 ) => 1);\n+        assert_pow!((5,    1 ) => 5);\n+        assert_pow!((-4,   2 ) => 16);\n+        assert_pow!((0.5,  5 ) => 0.03125);\n+        assert_pow!((8,    3 ) => 512);\n+        assert_pow!((8.0,  5 ) => 32768.0);\n+        assert_pow!((8.5,  5 ) => 44370.53125);\n+        assert_pow!((2u64, 50) => 1125899906842624);\n     }\n }\n "}]}