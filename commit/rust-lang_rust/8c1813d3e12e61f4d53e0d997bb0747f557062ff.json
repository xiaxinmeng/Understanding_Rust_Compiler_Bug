{"sha": "8c1813d3e12e61f4d53e0d997bb0747f557062ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMTgxM2QzZTEyZTYxZjRkNTNlMGQ5OTdiYjA3NDdmNTU3MDYyZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T04:26:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T04:26:58Z"}, "message": "Rollup merge of #57547 - Xanewok:ptr-eq, r=petrochenkov\n\nUse `ptr::eq` where applicable\n\nStumbled upon a few of `A as *const _ as usize == B as *const as usize`, so I decided to follow the programming boy scout rule (:smile:) and replaced the pattern with more widely used `ptr::eq`.", "tree": {"sha": "2e6b0b36985f0e20df27cec664e109e0bee84d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6b0b36985f0e20df27cec664e109e0bee84d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c1813d3e12e61f4d53e0d997bb0747f557062ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOr4SCRBK7hj4Ov3rIwAAdHIIAHHgmZKqK3QU560JOUI3XDUn\nzvzCb2yZqLTV0em/YjTJunrH1dvk6sJ7SHtyzZ5NqSaBIc9BJCSqkyctj+Hu4uNW\nl4ZFX24iQ16vbAI8SOKHRrofkkWfsperHToZIRYVWezFmK4xs5JmFLsHcT5MxOgL\nnMjv3aIcLLPq5hwj1ZS6UDi5zof7Q4Nhw6VD15XvtlmVZs5jdjB30cre3lUeyqpl\nUpe7BH0NGjL3+fwkXykpm0+VgcuC3jF+F35v23aARSkjMiiW5VAx6FrPGWzm+kku\n18YNIVB3FAYDlA6jL1C0dnM5vzqyJmtityeLzNqbdfmmySSLe08lm6X67FrTCiE=\n=Gx0M\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e6b0b36985f0e20df27cec664e109e0bee84d97\nparent 8f11da4bfc892c063dbb9109a286178e842d0b52\nparent 7948b184146c961e552716ead12bcb443cdd07e9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547353618 +0100\ncommitter GitHub <noreply@github.com> 1547353618 +0100\n\nRollup merge of #57547 - Xanewok:ptr-eq, r=petrochenkov\n\nUse `ptr::eq` where applicable\n\nStumbled upon a few of `A as *const _ as usize == B as *const as usize`, so I decided to follow the programming boy scout rule (:smile:) and replaced the pattern with more widely used `ptr::eq`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1813d3e12e61f4d53e0d997bb0747f557062ff", "html_url": "https://github.com/rust-lang/rust/commit/8c1813d3e12e61f4d53e0d997bb0747f557062ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c1813d3e12e61f4d53e0d997bb0747f557062ff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f11da4bfc892c063dbb9109a286178e842d0b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f11da4bfc892c063dbb9109a286178e842d0b52", "html_url": "https://github.com/rust-lang/rust/commit/8f11da4bfc892c063dbb9109a286178e842d0b52"}, {"sha": "7948b184146c961e552716ead12bcb443cdd07e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7948b184146c961e552716ead12bcb443cdd07e9", "html_url": "https://github.com/rust-lang/rust/commit/7948b184146c961e552716ead12bcb443cdd07e9"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "032a1621fe60b8e127bddfe231ab38f97b55f832", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8c1813d3e12e61f4d53e0d997bb0747f557062ff", "patch": "@@ -59,6 +59,7 @@ use std::hash::{Hash, Hasher};\n use std::fmt;\n use std::mem;\n use std::ops::{Deref, Bound};\n+use std::ptr;\n use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n@@ -168,7 +169,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n \n                 // Make sure we don't end up with inference\n                 // types/regions in the global interner\n-                if local as *const _ as usize == global as *const _ as usize {\n+                if ptr::eq(local, global) {\n                     bug!(\"Attempted to intern `{:?}` which contains \\\n                         inference types/regions in the global type context\",\n                         &ty_struct);\n@@ -1135,9 +1136,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns true if self is the same as self.global_tcx().\n     fn is_global(self) -> bool {\n-        let local = self.interners as *const _;\n-        let global = &self.global_interners as *const _;\n-        local as usize == global as usize\n+        ptr::eq(self.interners, &self.global_interners)\n     }\n \n     /// Create a type context and call the closure with a `TyCtxt` reference\n@@ -1787,6 +1786,7 @@ pub mod tls {\n     use std::fmt;\n     use std::mem;\n     use std::marker::PhantomData;\n+    use std::ptr;\n     use syntax_pos;\n     use ty::query;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n@@ -2021,8 +2021,7 @@ pub mod tls {\n     {\n         with_context(|context| {\n             unsafe {\n-                let gcx = tcx.gcx as *const _ as usize;\n-                assert!(context.tcx.gcx as *const _ as usize == gcx);\n+                assert!(ptr::eq(context.tcx.gcx, tcx.gcx));\n                 let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }\n@@ -2040,10 +2039,8 @@ pub mod tls {\n     {\n         with_context(|context| {\n             unsafe {\n-                let gcx = tcx.gcx as *const _ as usize;\n-                let interners = tcx.interners as *const _ as usize;\n-                assert!(context.tcx.gcx as *const _ as usize == gcx);\n-                assert!(context.tcx.interners as *const _ as usize == interners);\n+                assert!(ptr::eq(context.tcx.gcx, tcx.gcx));\n+                assert!(ptr::eq(context.tcx.interners, tcx.interners));\n                 let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }"}, {"sha": "6deedd0b5ea33c38e28b1fd582b4393bce3a78b5", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=8c1813d3e12e61f4d53e0d997bb0747f557062ff", "patch": "@@ -47,7 +47,7 @@ use syntax_pos::{self, Span, FileName};\n \n impl PartialEq for llvm::Metadata {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "958e00506d62a266f192d23eed05cc83328062fb", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=8c1813d3e12e61f4d53e0d997bb0747f557062ff", "patch": "@@ -20,12 +20,13 @@ use abi::{LlvmType, FnTypeExt};\n \n use std::fmt;\n use std::cell::RefCell;\n+use std::ptr;\n \n use libc::c_uint;\n \n impl PartialEq for Type {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}, {"sha": "3ad1521be9393bb487ed6c476f43f621418b2a24", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1813d3e12e61f4d53e0d997bb0747f557062ff/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=8c1813d3e12e61f4d53e0d997bb0747f557062ff", "patch": "@@ -4,10 +4,11 @@ use llvm;\n \n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::ptr;\n \n impl PartialEq for Value {\n     fn eq(&self, other: &Self) -> bool {\n-        self as *const _ == other as *const _\n+        ptr::eq(self, other)\n     }\n }\n "}]}