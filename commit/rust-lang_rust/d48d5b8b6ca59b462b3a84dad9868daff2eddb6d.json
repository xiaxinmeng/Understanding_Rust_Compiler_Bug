{"sha": "d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OGQ1YjhiNmNhNTliNDYyYjNhODRkYWQ5ODY4ZGFmZjJlZGRiNmQ=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-17T12:08:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:26Z"}, "message": "Add initial (flawed) implementation of binding annotations", "tree": {"sha": "20f1936ccf07abea463ae81b36132efd76ad4f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f1936ccf07abea463ae81b36132efd76ad4f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "html_url": "https://github.com/rust-lang/rust/commit/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9433a108cfcf3a9c7de9299d6641a5abf9031a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9433a108cfcf3a9c7de9299d6641a5abf9031a17", "html_url": "https://github.com/rust-lang/rust/commit/9433a108cfcf3a9c7de9299d6641a5abf9031a17"}], "stats": {"total": 102, "additions": 97, "deletions": 5}, "files": [{"sha": "7e8eb770404a9a2c5d815ed402d4ad71173d3c78", "filename": "crates/ra_hir/src/code_model_impl/function/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -88,7 +88,7 @@ impl FnScopes {\n \n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, pat: PatId) {\n         match &body[pat] {\n-            Pat::Bind { name } => self.scopes[scope].entries.push(ScopeEntry {\n+            Pat::Bind { name, .. } => self.scopes[scope].entries.push(ScopeEntry {\n                 name: name.clone(),\n                 pat,\n             }),"}, {"sha": "4d372c97b4dd697774ef25598265069ca5af3a76", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -329,6 +329,43 @@ impl Expr {\n pub struct PatId(RawId);\n impl_arena_id!(PatId);\n \n+// copied verbatim from librustc::hir\n+\n+/// Explicit binding annotations given in the HIR for a binding. Note\n+/// that this is not the final binding *mode* that we infer after type\n+/// inference.\n+#[derive(Clone, PartialEq, Eq, Debug, Copy)]\n+pub enum BindingAnnotation {\n+    /// No binding annotation given: this means that the final binding mode\n+    /// will depend on whether we have skipped through a `&` reference\n+    /// when matching. For example, the `x` in `Some(x)` will have binding\n+    /// mode `None`; if you do `let Some(x) = &Some(22)`, it will\n+    /// ultimately be inferred to be by-reference.\n+    ///\n+    /// Note that implicit reference skipping is not implemented yet (#42640).\n+    Unannotated,\n+\n+    /// Annotated with `mut x` -- could be either ref or not, similar to `None`.\n+    Mutable,\n+\n+    /// Annotated as `ref`, like `ref x`\n+    Ref,\n+\n+    /// Annotated as `ref mut x`.\n+    RefMut,\n+}\n+\n+impl BindingAnnotation {\n+    fn new(is_mutable: bool, is_ref: bool) -> Self {\n+        match (is_mutable, is_ref) {\n+            (true, true) => BindingAnnotation::RefMut,\n+            (false, true) => BindingAnnotation::Ref,\n+            (true, false) => BindingAnnotation::Mutable,\n+            (false, false) => BindingAnnotation::Unannotated,\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct FieldPat {\n     pub(crate) name: Name,\n@@ -359,7 +396,9 @@ pub enum Pat {\n     Path(Path),\n     Lit(ExprId),\n     Bind {\n+        mode: BindingAnnotation,\n         name: Name,\n+        sub_pat: Option<PatId>,\n     },\n     TupleStruct {\n         path: Option<Path>,\n@@ -793,7 +832,13 @@ impl ExprCollector {\n                     .name()\n                     .map(|nr| nr.as_name())\n                     .unwrap_or_else(Name::missing);\n-                Pat::Bind { name }\n+                let annotation = BindingAnnotation::new(bp.is_mutable(), bp.is_ref());\n+                let sub_pat = bp.pat().map(|subpat| self.collect_pat(subpat));\n+                Pat::Bind {\n+                    name,\n+                    mode: annotation,\n+                    sub_pat,\n+                }\n             }\n             ast::PatKind::TupleStructPat(p) => {\n                 let path = p.path().and_then(Path::from_ast);\n@@ -882,6 +927,8 @@ pub(crate) fn collect_fn_body_syntax(node: &ast::FnDef) -> BodySyntaxMapping {\n             let param = collector.alloc_pat(\n                 Pat::Bind {\n                     name: Name::self_param(),\n+                    mode: BindingAnnotation::Unannotated,\n+                    sub_pat: None,\n                 },\n                 self_param,\n             );"}, {"sha": "bc842dd2669665c822549e7c494f7fd9d01b2d60", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -37,7 +37,7 @@ use crate::{\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n-    expr::{Body, Expr, MatchArm, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat},\n+    expr::{Body, Expr, BindingAnnotation, MatchArm, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat},\n };\n \n /// The ID of a type variable.\n@@ -985,6 +985,30 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 path: ref p,\n                 args: ref fields,\n             } => self.infer_struct(p.as_ref(), fields),\n+            Pat::Path(path) => {\n+                // is this right?\n+                self.module\n+                    .resolve_path(self.db, &path)\n+                    .take_values()\n+                    .map_or(Ty::Unknown, |resolved| self.db.type_for_def(resolved))\n+            }\n+            Pat::Bind {\n+                mode,\n+                name: _name,\n+                sub_pat,\n+            } => {\n+                let subty = if let Some(subpat) = sub_pat {\n+                    self.infer_pat(*subpat, expected)\n+                } else {\n+                    Ty::Unknown\n+                };\n+\n+                match mode {\n+                    BindingAnnotation::Ref => Ty::Ref(subty.into(), Mutability::Shared),\n+                    BindingAnnotation::RefMut => Ty::Ref(subty.into(), Mutability::Mut),\n+                    BindingAnnotation::Mutable | BindingAnnotation::Unannotated => subty,\n+                }\n+            }\n             _ => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here"}, {"sha": "e817a8da9cd9ee5f6eeb3a3db156894553157c77", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -377,6 +377,10 @@ fn test(x: &i32) {\n     }\n \n     let lambda = |a: u64, b, c: i32| { a + b; c };\n+\n+    let ref ref_to_x = x;\n+    let mut mut_x = x;\n+    let ref mut mut_ref_to_x = x;\n }\n \"#,\n         \"pattern.txt\","}, {"sha": "0ee9ef199033cd87d8fa637bc076640742ff1e60", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -713,6 +713,16 @@ impl FieldPatList {\n     }\n }\n \n+impl BindPat {\n+    pub fn is_mutable(&self) -> bool {\n+        self.syntax().children().any(|n| n.kind() == MUT_KW)\n+    }\n+\n+    pub fn is_ref(&self) -> bool {\n+        self.syntax().children().any(|n| n.kind() == REF_KW)\n+    }\n+}\n+\n #[test]\n fn test_doc_comment_of_items() {\n     let file = SourceFile::parse("}, {"sha": "ead0f129367995429dd6d2c9206f8d1b806ea6a9", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -180,7 +180,11 @@ impl AstNode for BindPat {\n \n \n impl ast::NameOwner for BindPat {}\n-impl BindPat {}\n+impl BindPat {\n+    pub fn pat(&self) -> Option<&Pat> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Block\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "d58e0dd3588c7062825e2e0057cbcf41bde81097", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d48d5b8b6ca59b462b3a84dad9868daff2eddb6d/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=d48d5b8b6ca59b462b3a84dad9868daff2eddb6d", "patch": "@@ -488,7 +488,10 @@ Grammar(\n         ),\n \n         \"RefPat\": ( options: [ \"Pat\" ]),\n-        \"BindPat\": ( traits: [\"NameOwner\"] ),\n+        \"BindPat\": ( \n+            options: [ \"Pat\" ],\n+            traits: [\"NameOwner\"]\n+        ),\n         \"PlaceholderPat\": (),\n         \"PathPat\": ( options: [ \"Path\" ] ),\n         \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),"}]}