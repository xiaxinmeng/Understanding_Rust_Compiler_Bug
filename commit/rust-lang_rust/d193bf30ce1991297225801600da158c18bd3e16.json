{"sha": "d193bf30ce1991297225801600da158c18bd3e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOTNiZjMwY2UxOTkxMjk3MjI1ODAxNjAwZGExNThjMThiZDNlMTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T00:10:12Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "libcore: fix doctests", "tree": {"sha": "29b663f40a18b63a7ea09d3133b3d7c9cb8b2377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b663f40a18b63a7ea09d3133b3d7c9cb8b2377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d193bf30ce1991297225801600da158c18bd3e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d193bf30ce1991297225801600da158c18bd3e16", "html_url": "https://github.com/rust-lang/rust/commit/d193bf30ce1991297225801600da158c18bd3e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d193bf30ce1991297225801600da158c18bd3e16/comments", "author": null, "committer": null, "parents": [{"sha": "bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca", "html_url": "https://github.com/rust-lang/rust/commit/bc23b8ebc64565bc3838a8bbfb03ed52e900cfca"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "7ff5026d0b9c83a5d071ca0dad8dbcc91645c54a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d193bf30ce1991297225801600da158c18bd3e16/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d193bf30ce1991297225801600da158c18bd3e16/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=d193bf30ce1991297225801600da158c18bd3e16", "patch": "@@ -32,13 +32,13 @@\n //! }\n //!\n //! impl Add<Point, Point> for Point {\n-//!     fn add(&self, other: &Point) -> Point {\n+//!     fn add(self, other: Point) -> Point {\n //!         Point {x: self.x + other.x, y: self.y + other.y}\n //!     }\n //! }\n //!\n //! impl Sub<Point, Point> for Point {\n-//!     fn sub(&self, other: &Point) -> Point {\n+//!     fn sub(self, other: Point) -> Point {\n //!         Point {x: self.x - other.x, y: self.y - other.y}\n //!     }\n //! }\n@@ -133,9 +133,9 @@ macro_rules! add_impl(\n /// struct Foo;\n ///\n /// impl Add<Foo, Foo> for Foo {\n-///     fn add(&self, _rhs: &Foo) -> Foo {\n+///     fn add(self, _rhs: Foo) -> Foo {\n ///       println!(\"Adding!\");\n-///       *self\n+///       self\n ///   }\n /// }\n ///\n@@ -215,9 +215,9 @@ macro_rules! sub_impl(\n /// struct Foo;\n ///\n /// impl Sub<Foo, Foo> for Foo {\n-///     fn sub(&self, _rhs: &Foo) -> Foo {\n+///     fn sub(self, _rhs: Foo) -> Foo {\n ///         println!(\"Subtracting!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -297,9 +297,9 @@ macro_rules! mul_impl(\n /// struct Foo;\n ///\n /// impl Mul<Foo, Foo> for Foo {\n-///     fn mul(&self, _rhs: &Foo) -> Foo {\n+///     fn mul(self, _rhs: Foo) -> Foo {\n ///         println!(\"Multiplying!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -379,9 +379,9 @@ macro_rules! div_impl(\n /// struct Foo;\n ///\n /// impl Div<Foo, Foo> for Foo {\n-///     fn div(&self, _rhs: &Foo) -> Foo {\n+///     fn div(self, _rhs: Foo) -> Foo {\n ///         println!(\"Dividing!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -475,9 +475,9 @@ macro_rules! rem_float_impl(\n /// struct Foo;\n ///\n /// impl Rem<Foo, Foo> for Foo {\n-///     fn rem(&self, _rhs: &Foo) -> Foo {\n+///     fn rem(self, _rhs: Foo) -> Foo {\n ///         println!(\"Remainder-ing!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -669,9 +669,9 @@ macro_rules! bitand_impl(\n /// struct Foo;\n ///\n /// impl BitAnd<Foo, Foo> for Foo {\n-///     fn bitand(&self, _rhs: &Foo) -> Foo {\n+///     fn bitand(self, _rhs: Foo) -> Foo {\n ///         println!(\"Bitwise And-ing!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -751,9 +751,9 @@ macro_rules! bitor_impl(\n /// struct Foo;\n ///\n /// impl BitOr<Foo, Foo> for Foo {\n-///     fn bitor(&self, _rhs: &Foo) -> Foo {\n+///     fn bitor(self, _rhs: Foo) -> Foo {\n ///         println!(\"Bitwise Or-ing!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -833,9 +833,9 @@ macro_rules! bitxor_impl(\n /// struct Foo;\n ///\n /// impl BitXor<Foo, Foo> for Foo {\n-///     fn bitxor(&self, _rhs: &Foo) -> Foo {\n+///     fn bitxor(self, _rhs: Foo) -> Foo {\n ///         println!(\"Bitwise Xor-ing!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -917,9 +917,9 @@ macro_rules! shl_impl(\n /// struct Foo;\n ///\n /// impl Shl<Foo, Foo> for Foo {\n-///     fn shl(&self, _rhs: &Foo) -> Foo {\n+///     fn shl(self, _rhs: Foo) -> Foo {\n ///         println!(\"Shifting left!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///\n@@ -1001,9 +1001,9 @@ macro_rules! shr_impl(\n /// struct Foo;\n ///\n /// impl Shr<Foo, Foo> for Foo {\n-///     fn shr(&self, _rhs: &Foo) -> Foo {\n+///     fn shr(self, _rhs: Foo) -> Foo {\n ///         println!(\"Shifting right!\");\n-///         *self\n+///         self\n ///     }\n /// }\n ///"}]}