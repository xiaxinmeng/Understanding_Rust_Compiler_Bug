{"sha": "73ffae6ea1b8639050ca19db9732a7a25daae482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZmZhZTZlYTFiODYzOTA1MGNhMTlkYjk3MzJhN2EyNWRhYWU0ODI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-12T01:21:21Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-13T13:57:16Z"}, "message": "Reduce redundant code", "tree": {"sha": "ee432608ed871ecf2a0c752cb6edb0632188daec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee432608ed871ecf2a0c752cb6edb0632188daec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ffae6ea1b8639050ca19db9732a7a25daae482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ffae6ea1b8639050ca19db9732a7a25daae482", "html_url": "https://github.com/rust-lang/rust/commit/73ffae6ea1b8639050ca19db9732a7a25daae482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ffae6ea1b8639050ca19db9732a7a25daae482/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ab222b814f20375041a5dd39e7605eed079c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ab222b814f20375041a5dd39e7605eed079c70", "html_url": "https://github.com/rust-lang/rust/commit/e6ab222b814f20375041a5dd39e7605eed079c70"}], "stats": {"total": 71, "additions": 24, "deletions": 47}, "files": [{"sha": "9a07d422b63af91f7cacfaad6983a387af9a16f9", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/73ffae6ea1b8639050ca19db9732a7a25daae482/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ffae6ea1b8639050ca19db9732a7a25daae482/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=73ffae6ea1b8639050ca19db9732a7a25daae482", "patch": "@@ -67,62 +67,39 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n                 // We need to remove the last trailing newline from the string because the\n                 // underlying `fmt::write` function doesn't know whether `println!` or `print!` was\n                 // used.\n+                let (used, sugg_mac) = if let Some(macro_name) = calling_macro {\n+                    (\n+                        format!(\"{}!({}(), ...)\", macro_name, dest_name),\n+                        macro_name.replace(\"write\", \"print\"),\n+                    )\n+                } else {\n+                    (\n+                        format!(\"{}().write_fmt(...)\", dest_name),\n+                        \"print\".into(),\n+                    )\n+                };\n+                let msg = format!(\"use of `{}.unwrap()`\", used);\n                 if let [write_output] = *format_args.format_string_symbols {\n                     let mut write_output = write_output.to_string();\n                     if write_output.ends_with('\\n') {\n                         write_output.pop();\n                     }\n \n-                    if let Some(macro_name) = calling_macro {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            EXPLICIT_WRITE,\n-                            expr.span,\n-                            &format!(\n-                                \"use of `{}!({}(), ...).unwrap()`\",\n-                                macro_name,\n-                                dest_name\n-                            ),\n-                            \"try this\",\n-                            format!(\"{}{}!(\\\"{}\\\")\", prefix, macro_name.replace(\"write\", \"print\"), write_output.escape_default()),\n-                            Applicability::MachineApplicable\n-                        );\n-                    } else {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            EXPLICIT_WRITE,\n-                            expr.span,\n-                            &format!(\"use of `{}().write_fmt(...).unwrap()`\", dest_name),\n-                            \"try this\",\n-                            format!(\"{}print!(\\\"{}\\\")\", prefix, write_output.escape_default()),\n-                            Applicability::MachineApplicable\n-                        );\n-                    }\n+                    let sugg = format!(\"{}{}!(\\\"{}\\\")\", prefix, sugg_mac, write_output.escape_default());\n+                    span_lint_and_sugg(\n+                        cx,\n+                        EXPLICIT_WRITE,\n+                        expr.span,\n+                        &msg,\n+                        \"try this\",\n+                        sugg,\n+                        Applicability::MachineApplicable\n+                    );\n                 } else {\n                     // We don't have a proper suggestion\n-                    if let Some(macro_name) = calling_macro {\n-                        span_lint(\n-                            cx,\n-                            EXPLICIT_WRITE,\n-                            expr.span,\n-                            &format!(\n-                                \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n-                                macro_name,\n-                                dest_name,\n-                                prefix,\n-                                macro_name.replace(\"write\", \"print\")\n-                            )\n-                        );\n-                    } else {\n-                        span_lint(\n-                            cx,\n-                            EXPLICIT_WRITE,\n-                            expr.span,\n-                            &format!(\"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\", dest_name, prefix),\n-                        );\n-                    }\n+                    let msg = format!(\"{}. Consider using `{}{}!` instead\", msg, prefix, sugg_mac);\n+                    span_lint(cx, EXPLICIT_WRITE, expr.span, &msg);\n                 }\n-\n             }\n         }\n     }"}]}