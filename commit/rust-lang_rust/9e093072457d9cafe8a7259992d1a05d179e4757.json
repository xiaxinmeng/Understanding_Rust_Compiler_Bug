{"sha": "9e093072457d9cafe8a7259992d1a05d179e4757", "node_id": "C_kwDOAAsO6NoAKDllMDkzMDcyNDU3ZDljYWZlOGE3MjU5OTkyZDFhMDVkMTc5ZTQ3NTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T10:17:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T10:17:09Z"}, "message": "Auto merge of #103578 - petrochenkov:nofict, r=nagisa\n\nUnreserve braced enum variants in value namespace\n\nWith this PR braced enum variants (`enum E { V { /*...*/ } }`) no longer take a slot in value namespace, so the special case mentioned in the note in https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md#braced-structs is removed.\n\nReport - https://github.com/rust-lang/rust/pull/103578#issuecomment-1292594900.", "tree": {"sha": "cc158c1c068a25999704cb34ee89ba28a4a03b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc158c1c068a25999704cb34ee89ba28a4a03b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e093072457d9cafe8a7259992d1a05d179e4757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e093072457d9cafe8a7259992d1a05d179e4757", "html_url": "https://github.com/rust-lang/rust/commit/9e093072457d9cafe8a7259992d1a05d179e4757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e093072457d9cafe8a7259992d1a05d179e4757/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c33e005469909c42264436bd47afd46b9781a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c33e005469909c42264436bd47afd46b9781a3", "html_url": "https://github.com/rust-lang/rust/commit/e6c33e005469909c42264436bd47afd46b9781a3"}, {"sha": "ae8f75c6a3fe019f2f04145049aba84adf4f3f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8f75c6a3fe019f2f04145049aba84adf4f3f94", "html_url": "https://github.com/rust-lang/rust/commit/ae8f75c6a3fe019f2f04145049aba84adf4f3f94"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7f8d124838cb8be5a64b48f6c0c0f1febeca8ff4", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e093072457d9cafe8a7259992d1a05d179e4757/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e093072457d9cafe8a7259992d1a05d179e4757/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=9e093072457d9cafe8a7259992d1a05d179e4757", "patch": "@@ -65,14 +65,14 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                         _ => return,\n                     };\n                     if arm.guard.is_none() {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(id));\n+                        missing_variants.retain(|e| e.ctor_def_id() != Some(id));\n                     }\n                     path\n                 },\n                 PatKind::TupleStruct(path, patterns, ..) => {\n                     if let Some(id) = cx.qpath_res(path, pat.hir_id).opt_def_id() {\n                         if arm.guard.is_none() && patterns.iter().all(|p| !is_refutable(cx, p)) {\n-                            missing_variants.retain(|e| e.ctor_def_id != Some(id));\n+                            missing_variants.retain(|e| e.ctor_def_id() != Some(id));\n                         }\n                     }\n                     path\n@@ -122,11 +122,11 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                 s\n             },\n             variant.name,\n-            match variant.ctor_kind {\n-                CtorKind::Fn if variant.fields.len() == 1 => \"(_)\",\n-                CtorKind::Fn => \"(..)\",\n-                CtorKind::Const => \"\",\n-                CtorKind::Fictive => \"{ .. }\",\n+            match variant.ctor_kind() {\n+                Some(CtorKind::Fn) if variant.fields.len() == 1 => \"(_)\",\n+                Some(CtorKind::Fn) => \"(..)\",\n+                Some(CtorKind::Const) => \"\",\n+                None => \"{ .. }\",\n             }\n         )\n     };"}, {"sha": "f2276395fed0bb70b54ce85e5bfec6aeaedf4afd", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e093072457d9cafe8a7259992d1a05d179e4757/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e093072457d9cafe8a7259992d1a05d179e4757/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=9e093072457d9cafe8a7259992d1a05d179e4757", "patch": "@@ -133,11 +133,11 @@ impl UnnecessaryDefPath {\n                 let has_ctor = match cx.tcx.def_kind(def_id) {\n                     DefKind::Struct => {\n                         let variant = cx.tcx.adt_def(def_id).non_enum_variant();\n-                        variant.ctor_def_id.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n+                        variant.ctor.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n                     },\n                     DefKind::Variant => {\n                         let variant = cx.tcx.adt_def(cx.tcx.parent(def_id)).variant_with_id(def_id);\n-                        variant.ctor_def_id.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n+                        variant.ctor.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n                     },\n                     _ => false,\n                 };"}]}