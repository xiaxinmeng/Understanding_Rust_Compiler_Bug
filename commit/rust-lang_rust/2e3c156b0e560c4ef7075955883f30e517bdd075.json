{"sha": "2e3c156b0e560c4ef7075955883f30e517bdd075", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlM2MxNTZiMGU1NjBjNGVmNzA3NTk1NTg4M2YzMGU1MTdiZGQwNzU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T13:51:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T14:15:40Z"}, "message": "Return multiple modules in `parent_module`", "tree": {"sha": "addbab9e48ed58fa34f87d2ea6b432bd96d3d855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/addbab9e48ed58fa34f87d2ea6b432bd96d3d855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e3c156b0e560c4ef7075955883f30e517bdd075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3c156b0e560c4ef7075955883f30e517bdd075", "html_url": "https://github.com/rust-lang/rust/commit/2e3c156b0e560c4ef7075955883f30e517bdd075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e3c156b0e560c4ef7075955883f30e517bdd075/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c39d0cdf708d6178740385f58d6b2b657e411a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c39d0cdf708d6178740385f58d6b2b657e411a", "html_url": "https://github.com/rust-lang/rust/commit/f2c39d0cdf708d6178740385f58d6b2b657e411a"}], "stats": {"total": 111, "additions": 76, "deletions": 35}, "files": [{"sha": "b2d009e38fbdec8f155e12514b92f4332cdfaa33", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e3c156b0e560c4ef7075955883f30e517bdd075/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2e3c156b0e560c4ef7075955883f30e517bdd075/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2e3c156b0e560c4ef7075955883f30e517bdd075", "patch": "@@ -486,6 +486,7 @@ dependencies = [\n  \"log\",\n  \"profile\",\n  \"rustc-hash\",\n+ \"smallvec\",\n  \"stdx\",\n  \"syntax\",\n  \"tt\","}, {"sha": "55e9c3f0cf9b19e9ba9fe90d9ead4de6e555a2e0", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=2e3c156b0e560c4ef7075955883f30e517bdd075", "patch": "@@ -15,6 +15,7 @@ rustc-hash = \"1.1.0\"\n either = \"1.5.3\"\n arrayvec = \"0.5.1\"\n itertools = \"0.10.0\"\n+smallvec = \"1.4.0\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "519339c0c8608e8f7f685a5c48a21e4d09bc6783", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=2e3c156b0e560c4ef7075955883f30e517bdd075", "patch": "@@ -259,6 +259,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     pub fn to_module_def(&self, file: FileId) -> Option<Module> {\n+        self.imp.to_module_def(file).next()\n+    }\n+\n+    pub fn to_module_defs(&self, file: FileId) -> impl Iterator<Item = Module> {\n         self.imp.to_module_def(file)\n     }\n \n@@ -537,8 +541,8 @@ impl<'db> SemanticsImpl<'db> {\n         f(&mut ctx)\n     }\n \n-    fn to_module_def(&self, file: FileId) -> Option<Module> {\n-        self.with_ctx(|ctx| ctx.file_to_def(file)).map(Module::from)\n+    fn to_module_def(&self, file: FileId) -> impl Iterator<Item = Module> {\n+        self.with_ctx(|ctx| ctx.file_to_def(file)).into_iter().map(Module::from)\n     }\n \n     fn scope(&self, node: &SyntaxNode) -> SemanticsScope<'db> {"}, {"sha": "e9d8201403c28e626bf179a802f5413596e11593", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=2e3c156b0e560c4ef7075955883f30e517bdd075", "patch": "@@ -12,6 +12,7 @@ use hir_def::{\n };\n use hir_expand::{name::AsName, AstId, MacroDefKind};\n use rustc_hash::FxHashMap;\n+use smallvec::SmallVec;\n use stdx::impl_from;\n use syntax::{\n     ast::{self, NameOwner},\n@@ -28,14 +29,19 @@ pub(super) struct SourceToDefCtx<'a, 'b> {\n }\n \n impl SourceToDefCtx<'_, '_> {\n-    pub(super) fn file_to_def(&mut self, file: FileId) -> Option<ModuleId> {\n+    pub(super) fn file_to_def(&mut self, file: FileId) -> SmallVec<[ModuleId; 1]> {\n         let _p = profile::span(\"SourceBinder::to_module_def\");\n-        self.db.relevant_crates(file).iter().find_map(|&crate_id| {\n+        let mut mods = SmallVec::new();\n+        for &crate_id in self.db.relevant_crates(file).iter() {\n             // FIXME: inner items\n             let crate_def_map = self.db.crate_def_map(crate_id);\n-            let local_id = crate_def_map.modules_for_file(file).next()?;\n-            Some(crate_def_map.module_id(local_id))\n-        })\n+            mods.extend(\n+                crate_def_map\n+                    .modules_for_file(file)\n+                    .map(|local_id| crate_def_map.module_id(local_id)),\n+            )\n+        }\n+        mods\n     }\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n@@ -55,7 +61,7 @@ impl SourceToDefCtx<'_, '_> {\n             Some(parent_declaration) => self.module_to_def(parent_declaration),\n             None => {\n                 let file_id = src.file_id.original_file(self.db.upcast());\n-                self.file_to_def(file_id)\n+                self.file_to_def(file_id).get(0).copied()\n             }\n         }?;\n \n@@ -185,7 +191,7 @@ impl SourceToDefCtx<'_, '_> {\n     ) -> Option<MacroDefId> {\n         let kind = MacroDefKind::Declarative;\n         let file_id = src.file_id.original_file(self.db.upcast());\n-        let krate = self.file_to_def(file_id)?.krate();\n+        let krate = self.file_to_def(file_id).get(0).copied()?.krate();\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = Some(AstId::new(src.file_id, file_ast_id.upcast()));\n         Some(MacroDefId { krate, ast_id, kind, local_inner: false })\n@@ -245,7 +251,7 @@ impl SourceToDefCtx<'_, '_> {\n             return Some(res);\n         }\n \n-        let def = self.file_to_def(src.file_id.original_file(self.db.upcast()))?;\n+        let def = self.file_to_def(src.file_id.original_file(self.db.upcast())).get(0).copied()?;\n         Some(def.into())\n     }\n "}, {"sha": "22b0d6ecbefa300f9d2957ade6fe64890fa11169", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3c156b0e560c4ef7075955883f30e517bdd075/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=2e3c156b0e560c4ef7075955883f30e517bdd075", "patch": "@@ -1,6 +1,7 @@\n use hir::Semantics;\n use ide_db::base_db::{CrateId, FileId, FilePosition};\n use ide_db::RootDatabase;\n+use itertools::Itertools;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstNode},\n@@ -18,8 +19,7 @@ use crate::NavigationTarget;\n // | VS Code | **Rust Analyzer: Locate parent module**\n // |===\n \n-/// This returns `Vec` because a module may be included from several places. We\n-/// don't handle this case yet though, so the Vec has length at most one.\n+/// This returns `Vec` because a module may be included from several places.\n pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<NavigationTarget> {\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n@@ -37,27 +37,23 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n         }\n     }\n \n-    let module = match module {\n-        Some(module) => sema.to_def(&module),\n-        None => sema.to_module_def(position.file_id),\n-    };\n-    let module = match module {\n-        None => return Vec::new(),\n-        Some(it) => it,\n-    };\n-    let nav = NavigationTarget::from_module_to_decl(db, module);\n-    vec![nav]\n+    match module {\n+        Some(module) => sema\n+            .to_def(&module)\n+            .into_iter()\n+            .map(|module| NavigationTarget::from_module_to_decl(db, module))\n+            .collect(),\n+        None => sema\n+            .to_module_defs(position.file_id)\n+            .map(|module| NavigationTarget::from_module_to_decl(db, module))\n+            .collect(),\n+    }\n }\n \n /// Returns `Vec` for the same reason as `parent_module`\n pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n     let sema = Semantics::new(db);\n-    let module = match sema.to_module_def(file_id) {\n-        Some(it) => it,\n-        None => return Vec::new(),\n-    };\n-    let krate = module.krate();\n-    vec![krate.into()]\n+    sema.to_module_defs(file_id).map(|module| module.krate().into()).unique().collect()\n }\n \n #[cfg(test)]\n@@ -67,11 +63,13 @@ mod tests {\n     use crate::fixture;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, position, expected) = fixture::nav_target_annotation(ra_fixture);\n-        let mut navs = analysis.parent_module(position).unwrap();\n-        assert_eq!(navs.len(), 1);\n-        let nav = navs.pop().unwrap();\n-        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n+        let (analysis, position, expected) = fixture::annotations(ra_fixture);\n+        let navs = analysis.parent_module(position).unwrap();\n+        let navs = navs\n+            .iter()\n+            .map(|nav| FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() })\n+            .collect::<Vec<_>>();\n+        assert_eq!(expected.into_iter().map(|(fr, _)| fr).collect::<Vec<_>>(), navs);\n     }\n \n     #[test]\n@@ -120,15 +118,46 @@ mod foo {\n     }\n \n     #[test]\n-    fn test_resolve_crate_root() {\n-        let (analysis, file_id) = fixture::file(\n+    fn test_resolve_multi_parent_module() {\n+        check(\n             r#\"\n //- /main.rs\n mod foo;\n+  //^^^\n+#[path = \"foo.rs\"]\n+mod bar;\n+  //^^^\n+//- /foo.rs\n+$0\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_resolve_crate_root() {\n+        let (analysis, file_id) = fixture::file(\n+            r#\"\n //- /foo.rs\n $0\n+//- /main.rs\n+mod foo;\n \"#,\n         );\n         assert_eq!(analysis.crate_for(file_id).unwrap().len(), 1);\n     }\n+\n+    #[test]\n+    fn test_resolve_multi_parent_crate() {\n+        let (analysis, file_id) = fixture::file(\n+            r#\"\n+//- /baz.rs\n+$0\n+//- /foo.rs crate:foo\n+mod baz;\n+//- /bar.rs crate:bar\n+mod baz;\n+\"#,\n+        );\n+        assert_eq!(analysis.crate_for(file_id).unwrap().len(), 2);\n+    }\n }"}]}