{"sha": "48f366fced077805b917448f7554a50d23160892", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZjM2NmZjZWQwNzc4MDViOTE3NDQ4Zjc1NTRhNTBkMjMxNjA4OTI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-08-10T10:04:01Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:36:36Z"}, "message": "Replace `and_then` `map_err` `and_then` chain with a match", "tree": {"sha": "6f98e097af63c45b57a459ce5b0d75cf9e3bcd8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f98e097af63c45b57a459ce5b0d75cf9e3bcd8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48f366fced077805b917448f7554a50d23160892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48f366fced077805b917448f7554a50d23160892", "html_url": "https://github.com/rust-lang/rust/commit/48f366fced077805b917448f7554a50d23160892", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48f366fced077805b917448f7554a50d23160892/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1bd34df0c0757f988353c30766d58df0b4ebe73", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1bd34df0c0757f988353c30766d58df0b4ebe73", "html_url": "https://github.com/rust-lang/rust/commit/b1bd34df0c0757f988353c30766d58df0b4ebe73"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "8f2a89d46767f469292a830c06f573b55c864b6a", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/48f366fced077805b917448f7554a50d23160892/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f366fced077805b917448f7554a50d23160892/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=48f366fced077805b917448f7554a50d23160892", "patch": "@@ -294,8 +294,8 @@ pub fn const_eval_raw_provider<'tcx>(\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n-    res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body))\n-        .map_err(|error| {\n+    match res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body)) {\n+        Err(error) => {\n             let err = ConstEvalErr::new(&ecx, error, None);\n             // errors in statics are always emitted as fatal errors\n             if is_static {\n@@ -317,7 +317,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     );\n                 }\n \n-                v\n+                Err(v)\n             } else if let Some(def) = def.as_local() {\n                 // constant defined in this crate, we can figure out a lint level!\n                 match tcx.def_kind(def.did.to_def_id()) {\n@@ -331,12 +331,12 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // compatibility hazard\n                     DefKind::Const | DefKind::AssocConst => {\n                         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-                        err.report_as_lint(\n+                        Err(err.report_as_lint(\n                             tcx.at(tcx.def_span(def.did)),\n                             \"any use of this value will cause an error\",\n                             hir_id,\n                             Some(err.span),\n-                        )\n+                        ))\n                     }\n                     // promoting runtime code is only allowed to error if it references broken\n                     // constants any other kind of error will be reported to the user as a\n@@ -345,34 +345,34 @@ pub fn const_eval_raw_provider<'tcx>(\n                         if let Some(p) = cid.promoted {\n                             let span = tcx.promoted_mir_of_opt_const_arg(def.to_global())[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n-                                err.report_as_error(\n+                                Err(err.report_as_error(\n                                     tcx.at(span),\n                                     \"evaluation of constant expression failed\",\n-                                )\n+                                ))\n                             } else {\n-                                err.report_as_lint(\n+                                Err(err.report_as_lint(\n                                     tcx.at(span),\n                                     \"reaching this expression at runtime will panic or abort\",\n                                     tcx.hir().local_def_id_to_hir_id(def.did),\n                                     Some(err.span),\n-                                )\n+                                ))\n                             }\n                         // anything else (array lengths, enum initializers, constant patterns) are\n                         // reported as hard errors\n                         } else {\n-                            err.report_as_error(\n+                            Err(err.report_as_error(\n                                 ecx.tcx.at(ecx.cur_span()),\n                                 \"evaluation of constant value failed\",\n-                            )\n+                            ))\n                         }\n                     }\n                 }\n             } else {\n                 // use of broken constant from other crate\n-                err.report_as_error(ecx.tcx.at(ecx.cur_span()), \"could not evaluate constant\")\n+                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), \"could not evaluate constant\"))\n             }\n-        })\n-        .and_then(|mplace| {\n+        }\n+        Ok(mplace) => {\n             // Since evaluation had no errors, valiate the resulting constant:\n             let validation = try {\n                 // FIXME do not validate promoteds until a decision on\n@@ -404,5 +404,6 @@ pub fn const_eval_raw_provider<'tcx>(\n                 // Convert to raw constant\n                 Ok(RawConst { alloc_id: mplace.ptr.assert_ptr().alloc_id, ty: mplace.layout.ty })\n             }\n-        })\n+        }\n+    }\n }"}]}