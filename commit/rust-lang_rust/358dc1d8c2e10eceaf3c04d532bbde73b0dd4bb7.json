{"sha": "358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OGRjMWQ4YzJlMTBlY2VhZjNjMDRkNTMyYmJkZTczYjBkZDRiYjc=", "commit": {"author": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-05-28T19:02:48Z"}, "committer": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-05-28T19:02:48Z"}, "message": "Added io forwarding methods to the stdio structs", "tree": {"sha": "9acd72c5154579dc066f8d6f2845fcc670981a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9acd72c5154579dc066f8d6f2845fcc670981a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7", "html_url": "https://github.com/rust-lang/rust/commit/358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7/comments", "author": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45127211566c53bac386b66909a830649182ab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45127211566c53bac386b66909a830649182ab7a", "html_url": "https://github.com/rust-lang/rust/commit/45127211566c53bac386b66909a830649182ab7a"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "cce9a0dc7a43b4444a3ed2a0fb50d3cc8ca89a31", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=358dc1d8c2e10eceaf3c04d532bbde73b0dd4bb7", "patch": "@@ -96,7 +96,20 @@ impl Read for StdinRaw {\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        self.0.read_to_string(buf)\n+    }\n+\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        self.0.read_exact(buf)\n+    }\n }\n+\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -114,7 +127,20 @@ impl Write for StdoutRaw {\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n+\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.0.write_all(buf)\n+    }\n+\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.0.write_all_vectored(bufs)\n+    }\n+\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n+        self.0.write_fmt(fmt)\n+    }\n }\n+\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -132,6 +158,18 @@ impl Write for StderrRaw {\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n+\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.0.write_all(buf)\n+    }\n+\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.0.write_all_vectored(bufs)\n+    }\n+\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n+        self.0.write_fmt(fmt)\n+    }\n }\n \n enum Maybe<T> {\n@@ -420,16 +458,37 @@ impl Read for StdinLock<'_> {\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n+\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        self.inner.read_to_string(buf)\n+    }\n+\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        self.inner.read_exact(buf)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl BufRead for StdinLock<'_> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n         self.inner.fill_buf()\n     }\n+\n     fn consume(&mut self, n: usize) {\n         self.inner.consume(n)\n     }\n+\n+    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_until(byte, buf)\n+    }\n+\n+    fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n+        self.inner.read_line(buf)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -596,6 +655,9 @@ impl Write for Stdout {\n     fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n         self.lock().write_fmt(args)\n     }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.lock().write_all_vectored(bufs)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for StdoutLock<'_> {\n@@ -612,6 +674,15 @@ impl Write for StdoutLock<'_> {\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all(buf)\n+    }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all_vectored(bufs)\n+    }\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n+        self.inner.borrow_mut().write_fmt(fmt)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -770,6 +841,9 @@ impl Write for Stderr {\n     fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n         self.lock().write_fmt(args)\n     }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.lock().write_all_vectored(bufs)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for StderrLock<'_> {\n@@ -786,6 +860,15 @@ impl Write for StderrLock<'_> {\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all(buf)\n+    }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        self.inner.borrow_mut().write_all_vectored(bufs)\n+    }\n+    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n+        self.inner.borrow_mut().write_fmt(fmt)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}]}