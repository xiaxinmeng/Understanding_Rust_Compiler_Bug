{"sha": "09f7f915327b8877ea6025e71dc028ffdbd2369c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZjdmOTE1MzI3Yjg4NzdlYTYwMjVlNzFkYzAyOGZmZGJkMjM2OWM=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-02-23T14:11:29Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:20:54Z"}, "message": "Add convenience conversion methods for ScalarInt", "tree": {"sha": "a3fce375d3fe0f1f7726b61c39c83ce09512378b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3fce375d3fe0f1f7726b61c39c83ce09512378b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09f7f915327b8877ea6025e71dc028ffdbd2369c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09f7f915327b8877ea6025e71dc028ffdbd2369c", "html_url": "https://github.com/rust-lang/rust/commit/09f7f915327b8877ea6025e71dc028ffdbd2369c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09f7f915327b8877ea6025e71dc028ffdbd2369c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "858216cabf9cd1521e55c675502426bdd5262c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/858216cabf9cd1521e55c675502426bdd5262c73", "html_url": "https://github.com/rust-lang/rust/commit/858216cabf9cd1521e55c675502426bdd5262c73"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "c7b1005fffc5e9999c14b848a2dad748e8615e68", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/09f7f915327b8877ea6025e71dc028ffdbd2369c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f7f915327b8877ea6025e71dc028ffdbd2369c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=09f7f915327b8877ea6025e71dc028ffdbd2369c", "patch": "@@ -1,4 +1,4 @@\n-use std::convert::TryFrom;\n+use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n use rustc_apfloat::{\n@@ -56,20 +56,20 @@ impl<'tcx> ConstValue<'tcx> {\n         }\n     }\n \n+    pub fn try_to_scalar_int(&self) -> Option<ScalarInt> {\n+        self.try_to_scalar()?.to_int().ok()\n+    }\n+\n     pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n-        self.try_to_scalar()?.to_bits(size).ok()\n+        self.try_to_scalar_int()?.to_bits(size).ok()\n     }\n \n     pub fn try_to_bool(&self) -> Option<bool> {\n-        match self.try_to_bits(Size::from_bytes(1))? {\n-            0 => Some(false),\n-            1 => Some(true),\n-            _ => None,\n-        }\n+        self.try_to_scalar_int()?.try_into().ok()\n     }\n \n     pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        Some(self.try_to_bits(tcx.data_layout.pointer_size)? as u64)\n+        self.try_to_scalar_int()?.try_to_machine_usize(tcx).ok()\n     }\n \n     pub fn try_to_bits_for_ty(\n@@ -505,6 +505,21 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n+impl TryFrom<Scalar> for ScalarInt {\n+    type Error = super::InterpErrorInfo<'static>;\n+    #[inline]\n+    fn try_from(scalar: Scalar) -> InterpResult<'static, Self> {\n+        scalar.to_int()\n+    }\n+}\n+\n+impl<Tag> From<ScalarInt> for Scalar<Tag> {\n+    #[inline(always)]\n+    fn from(ptr: ScalarInt) -> Self {\n+        Scalar::Int(ptr)\n+    }\n+}\n+\n #[derive(Clone, Copy, Eq, PartialEq, TyEncodable, TyDecodable, HashStable, Hash)]\n pub enum ScalarMaybeUninit<Tag = ()> {\n     Scalar(Scalar<Tag>),"}, {"sha": "8ed8ea6a0bc55b2dcbc4f73b0f8ed7e7e9d54975", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/09f7f915327b8877ea6025e71dc028ffdbd2369c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f7f915327b8877ea6025e71dc028ffdbd2369c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=09f7f915327b8877ea6025e71dc028ffdbd2369c", "patch": "@@ -5,6 +5,8 @@ use rustc_target::abi::{Size, TargetDataLayout};\n use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n+use crate::ty::TyCtxt;\n+\n #[derive(Copy, Clone)]\n /// A type for representing any integer. Only used for printing.\n pub struct ConstInt {\n@@ -239,6 +241,11 @@ impl ScalarInt {\n             Err(self.size())\n         }\n     }\n+\n+    #[inline]\n+    pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {\n+        Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)\n+    }\n }\n \n macro_rules! from {\n@@ -277,6 +284,18 @@ macro_rules! try_from {\n from!(u8, u16, u32, u64, u128, bool);\n try_from!(u8, u16, u32, u64, u128);\n \n+impl TryFrom<ScalarInt> for bool {\n+    type Error = Size;\n+    #[inline]\n+    fn try_from(int: ScalarInt) -> Result<Self, Size> {\n+        int.to_bits(Size::from_bytes(1)).and_then(|u| match u {\n+            0 => Ok(false),\n+            1 => Ok(true),\n+            _ => Err(Size::from_bytes(1)),\n+        })\n+    }\n+}\n+\n impl From<char> for ScalarInt {\n     #[inline]\n     fn from(c: char) -> Self {"}, {"sha": "5a6f219a41384105c6f8b92874c9cf7d3e023046", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09f7f915327b8877ea6025e71dc028ffdbd2369c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f7f915327b8877ea6025e71dc028ffdbd2369c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=09f7f915327b8877ea6025e71dc028ffdbd2369c", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryInto;\n+\n use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::Scalar;\n use crate::mir::Promoted;\n@@ -9,6 +11,8 @@ use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_target::abi::Size;\n \n+use super::ScalarInt;\n+\n /// Represents a constant in Rust.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n #[derive(HashStable)]\n@@ -51,14 +55,19 @@ impl<'tcx> ConstKind<'tcx> {\n         self.try_to_value()?.try_to_scalar()\n     }\n \n+    #[inline]\n+    pub fn try_to_scalar_int(self) -> Option<ScalarInt> {\n+        self.try_to_value()?.try_to_scalar()?.to_int().ok()\n+    }\n+\n     #[inline]\n     pub fn try_to_bits(self, size: Size) -> Option<u128> {\n-        self.try_to_value()?.try_to_bits(size)\n+        self.try_to_scalar_int()?.to_bits(size).ok()\n     }\n \n     #[inline]\n     pub fn try_to_bool(self) -> Option<bool> {\n-        self.try_to_value()?.try_to_bool()\n+        self.try_to_scalar_int()?.try_into().ok()\n     }\n \n     #[inline]"}]}