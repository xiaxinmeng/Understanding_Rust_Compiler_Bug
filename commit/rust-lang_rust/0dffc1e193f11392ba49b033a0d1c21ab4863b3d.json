{"sha": "0dffc1e193f11392ba49b033a0d1c21ab4863b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZmZjMWUxOTNmMTEzOTJiYTQ5YjAzM2EwZDFjMjFhYjQ4NjNiM2Q=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-22T12:47:45Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-22T12:47:45Z"}, "message": "utf8 validation: Cleanup code by renaming index variable", "tree": {"sha": "bf9eece282e3b71da96490453adc759a13becfcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf9eece282e3b71da96490453adc759a13becfcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dffc1e193f11392ba49b033a0d1c21ab4863b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dffc1e193f11392ba49b033a0d1c21ab4863b3d", "html_url": "https://github.com/rust-lang/rust/commit/0dffc1e193f11392ba49b033a0d1c21ab4863b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dffc1e193f11392ba49b033a0d1c21ab4863b3d/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8b04eda0505948bae2f1be367b10bd8ba082e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8b04eda0505948bae2f1be367b10bd8ba082e5", "html_url": "https://github.com/rust-lang/rust/commit/4a8b04eda0505948bae2f1be367b10bd8ba082e5"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "c334ac4887279602d1c0b33c90477ae32249947e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0dffc1e193f11392ba49b033a0d1c21ab4863b3d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dffc1e193f11392ba49b033a0d1c21ab4863b3d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=0dffc1e193f11392ba49b033a0d1c21ab4863b3d", "patch": "@@ -1215,31 +1215,31 @@ fn contains_nonascii(x: usize) -> bool {\n /// invalid sequence.\n #[inline(always)]\n fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n-    let mut offset = 0;\n+    let mut index = 0;\n     let len = v.len();\n \n     let usize_bytes = mem::size_of::<usize>();\n     let ascii_block_size = 2 * usize_bytes;\n     let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };\n \n-    while offset < len {\n-        let old_offset = offset;\n+    while index < len {\n+        let old_offset = index;\n         macro_rules! err { () => {{\n             return Err(Utf8Error {\n                 valid_up_to: old_offset\n             })\n         }}}\n \n         macro_rules! next { () => {{\n-            offset += 1;\n+            index += 1;\n             // we needed data, but there was none: error!\n-            if offset >= len {\n+            if index >= len {\n                 err!()\n             }\n-            v[offset]\n+            v[index]\n         }}}\n \n-        let first = v[offset];\n+        let first = v[index];\n         if first >= 128 {\n             let w = UTF8_CHAR_WIDTH[first as usize];\n             let second = next!();\n@@ -1282,32 +1282,32 @@ fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n                 }\n                 _ => err!()\n             }\n-            offset += 1;\n+            index += 1;\n         } else {\n             // Ascii case, try to skip forward quickly.\n             // When the pointer is aligned, read 2 words of data per iteration\n             // until we find a word containing a non-ascii byte.\n             let ptr = v.as_ptr();\n-            let align = (ptr as usize + offset) & (usize_bytes - 1);\n+            let align = (ptr as usize + index) & (usize_bytes - 1);\n             if align == 0 {\n-                while offset < blocks_end {\n+                while index < blocks_end {\n                     unsafe {\n-                        let block = ptr.offset(offset as isize) as *const usize;\n+                        let block = ptr.offset(index as isize) as *const usize;\n                         // break if there is a nonascii byte\n                         let zu = contains_nonascii(*block);\n                         let zv = contains_nonascii(*block.offset(1));\n                         if zu | zv {\n                             break;\n                         }\n                     }\n-                    offset += ascii_block_size;\n+                    index += ascii_block_size;\n                 }\n                 // step from the point where the wordwise loop stopped\n-                while offset < len && v[offset] < 128 {\n-                    offset += 1;\n+                while index < len && v[index] < 128 {\n+                    index += 1;\n                 }\n             } else {\n-                offset += 1;\n+                index += 1;\n             }\n         }\n     }"}]}