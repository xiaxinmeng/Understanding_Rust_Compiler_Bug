{"sha": "468192a9c52e613f56af5b2a967d33c326cbf373", "node_id": "C_kwDOAAsO6NoAKDQ2ODE5MmE5YzUyZTYxM2Y1NmFmNWIyYTk2N2QzM2MzMjZjYmYzNzM", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-02T12:12:33Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-07T04:00:32Z"}, "message": "Implement type inference for inline consts\n\nIn most cases it is handled in the same way as closures.", "tree": {"sha": "f08c86ee6047461ed04d8eb90b68e6cb73dd1e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f08c86ee6047461ed04d8eb90b68e6cb73dd1e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/468192a9c52e613f56af5b2a967d33c326cbf373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/468192a9c52e613f56af5b2a967d33c326cbf373", "html_url": "https://github.com/rust-lang/rust/commit/468192a9c52e613f56af5b2a967d33c326cbf373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/468192a9c52e613f56af5b2a967d33c326cbf373/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c1774cd3e4239c26b67ae78a21a87f4e460fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c1774cd3e4239c26b67ae78a21a87f4e460fad", "html_url": "https://github.com/rust-lang/rust/commit/02c1774cd3e4239c26b67ae78a21a87f4e460fad"}], "stats": {"total": 342, "additions": 299, "deletions": 43}, "files": [{"sha": "053e5c33313cc43dd7ebca709e469e6f3df85119", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -569,7 +569,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // to store those. Otherwise, we'll pass in `None` to the\n         // functions below, which will trigger them to report errors\n         // eagerly.\n-        let mut outlives_requirements = infcx.tcx.is_closure(mir_def_id).then(Vec::new);\n+        let mut outlives_requirements =\n+            infcx.tcx.is_closure_or_inline_const(mir_def_id).then(Vec::new);\n \n         self.check_type_tests(infcx, body, outlives_requirements.as_mut(), &mut errors_buffer);\n "}, {"sha": "9e068ef71650466de4ca50c0cf411643916b4d69", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -1345,7 +1345,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     Some(RETURN_PLACE) => {\n                         if let BorrowCheckContext {\n                             universal_regions:\n-                                UniversalRegions { defining_ty: DefiningTy::Const(def_id, _), .. },\n+                                UniversalRegions {\n+                                    defining_ty:\n+                                        DefiningTy::Const(def_id, _)\n+                                        | DefiningTy::InlineConst(def_id, _),\n+                                    ..\n+                                },\n                             ..\n                         } = self.borrowck_context\n                         {\n@@ -1650,7 +1655,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     Some(RETURN_PLACE) => {\n                         if let BorrowCheckContext {\n                             universal_regions:\n-                                UniversalRegions { defining_ty: DefiningTy::Const(def_id, _), .. },\n+                                UniversalRegions {\n+                                    defining_ty:\n+                                        DefiningTy::Const(def_id, _)\n+                                        | DefiningTy::InlineConst(def_id, _),\n+                                    ..\n+                                },\n                             ..\n                         } = self.borrowck_context\n                         {"}, {"sha": "ab8725834376c68143341fa9a6312bc8e2c1775e", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -23,7 +23,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n use std::iter;\n \n use crate::nll::ToRegionVid;\n@@ -108,6 +108,10 @@ pub enum DefiningTy<'tcx> {\n     /// is that it has no inputs and a single return value, which is\n     /// the value of the constant.\n     Const(DefId, SubstsRef<'tcx>),\n+\n+    /// The MIR represents an inline const. The signature has no inputs and a\n+    /// single return value found via `InlineConstSubsts::ty`.\n+    InlineConst(DefId, SubstsRef<'tcx>),\n }\n \n impl<'tcx> DefiningTy<'tcx> {\n@@ -121,7 +125,7 @@ impl<'tcx> DefiningTy<'tcx> {\n             DefiningTy::Generator(_, substs, _) => {\n                 Either::Right(Either::Left(substs.as_generator().upvar_tys()))\n             }\n-            DefiningTy::FnDef(..) | DefiningTy::Const(..) => {\n+            DefiningTy::FnDef(..) | DefiningTy::Const(..) | DefiningTy::InlineConst(..) => {\n                 Either::Right(Either::Right(iter::empty()))\n             }\n         }\n@@ -133,7 +137,7 @@ impl<'tcx> DefiningTy<'tcx> {\n     pub fn implicit_inputs(self) -> usize {\n         match self {\n             DefiningTy::Closure(..) | DefiningTy::Generator(..) => 1,\n-            DefiningTy::FnDef(..) | DefiningTy::Const(..) => 0,\n+            DefiningTy::FnDef(..) | DefiningTy::Const(..) | DefiningTy::InlineConst(..) => 0,\n         }\n     }\n \n@@ -142,15 +146,16 @@ impl<'tcx> DefiningTy<'tcx> {\n     }\n \n     pub fn is_const(&self) -> bool {\n-        matches!(*self, DefiningTy::Const(..))\n+        matches!(*self, DefiningTy::Const(..) | DefiningTy::InlineConst(..))\n     }\n \n     pub fn def_id(&self) -> DefId {\n         match *self {\n             DefiningTy::Closure(def_id, ..)\n             | DefiningTy::Generator(def_id, ..)\n             | DefiningTy::FnDef(def_id, ..)\n-            | DefiningTy::Const(def_id, ..) => def_id,\n+            | DefiningTy::Const(def_id, ..)\n+            | DefiningTy::InlineConst(def_id, ..) => def_id,\n         }\n     }\n }\n@@ -376,6 +381,12 @@ impl<'tcx> UniversalRegions<'tcx> {\n                     tcx.def_path_str_with_substs(def_id, substs),\n                 ));\n             }\n+            DefiningTy::InlineConst(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining inline constant type: {}\",\n+                    tcx.def_path_str_with_substs(def_id, substs),\n+                ));\n+            }\n         }\n     }\n }\n@@ -534,11 +545,21 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n \n             BodyOwnerKind::Const | BodyOwnerKind::Static(..) => {\n-                assert_eq!(self.mir_def.did.to_def_id(), closure_base_def_id);\n                 let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n-                let substs =\n-                    self.infcx.replace_free_regions_with_nll_infer_vars(FR, identity_substs);\n-                DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n+                if self.mir_def.did.to_def_id() == closure_base_def_id {\n+                    let substs =\n+                        self.infcx.replace_free_regions_with_nll_infer_vars(FR, identity_substs);\n+                    DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n+                } else {\n+                    let ty = tcx.typeck(self.mir_def.did).node_type(self.mir_hir_id);\n+                    let substs = InlineConstSubsts::new(\n+                        tcx,\n+                        InlineConstSubstsParts { parent_substs: identity_substs, ty },\n+                    )\n+                    .substs;\n+                    let substs = self.infcx.replace_free_regions_with_nll_infer_vars(FR, substs);\n+                    DefiningTy::InlineConst(self.mir_def.did.to_def_id(), substs)\n+                }\n             }\n         }\n     }\n@@ -556,7 +577,9 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n         let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, ref substs) | DefiningTy::Generator(_, ref substs, _) => {\n+            DefiningTy::Closure(_, ref substs)\n+            | DefiningTy::Generator(_, ref substs, _)\n+            | DefiningTy::InlineConst(_, ref substs) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n                 // inherited from the `closure_base_def_id`.\n@@ -648,6 +671,12 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 let ty = indices.fold_to_region_vids(tcx, ty);\n                 ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }\n+\n+            DefiningTy::InlineConst(def_id, substs) => {\n+                assert_eq!(self.mir_def.did.to_def_id(), def_id);\n+                let ty = substs.as_inline_const().ty();\n+                ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n+            }\n         }\n     }\n }"}, {"sha": "b0952d346766c9349dbc985e3ca17cd93dca4722", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -797,7 +797,7 @@ rustc_queries! {\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n-        cache_on_disk_if(tcx) { tcx.is_closure(key.to_def_id()) }\n+        cache_on_disk_if(tcx) { tcx.is_closure_or_inline_const(key.to_def_id()) }\n     }\n     query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc {"}, {"sha": "080ef6cb82a0f9b25bb39610c41a57e764690f24", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -1,7 +1,9 @@\n use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::{LitToConstInput, Scalar};\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::{ParamEnv, ParamEnvAnd};\n+use crate::ty::{\n+    self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n+    TyCtxt, TypeFoldable,\n+};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -54,6 +56,24 @@ impl<'tcx> Const<'tcx> {\n \n         let ty = tcx.type_of(def.def_id_for_type_of());\n \n+        match Self::try_eval_body_expr(tcx, ty, expr) {\n+            Some(v) => v,\n+            None => tcx.mk_const(ty::Const {\n+                val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    def: def.to_global(),\n+                    substs_: None,\n+                    promoted: None,\n+                }),\n+                ty,\n+            }),\n+        }\n+    }\n+\n+    fn try_eval_body_expr(\n+        tcx: TyCtxt<'tcx>,\n+        ty: Ty<'tcx>,\n+        expr: &'tcx hir::Expr<'tcx>,\n+    ) -> Option<&'tcx Self> {\n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n             hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => match expr.kind {\n@@ -69,7 +89,7 @@ impl<'tcx> Const<'tcx> {\n             // If an error occurred, ignore that it's a literal and leave reporting the error up to\n             // mir.\n             if let Ok(c) = tcx.at(expr.span).lit_to_const(lit_input) {\n-                return c;\n+                return Some(c);\n             } else {\n                 tcx.sess.delay_span_bug(expr.span, \"Const::from_anon_const: couldn't lit_to_const\");\n             }\n@@ -85,7 +105,7 @@ impl<'tcx> Const<'tcx> {\n         };\n \n         use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n-        let val = match expr.kind {\n+        match expr.kind {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n                 // the parent item and construct a `ParamConst`.\n@@ -95,16 +115,53 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                ty::ConstKind::Param(ty::ParamConst::new(index, name))\n+                Some(tcx.mk_const(ty::Const {\n+                    val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n+                    ty,\n+                }))\n             }\n-            _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def: def.to_global(),\n-                substs_: None,\n-                promoted: None,\n-            }),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n+        debug!(\"Const::from_inline_const(def_id={:?})\", def_id);\n+\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+\n+        let body_id = match tcx.hir().get(hir_id) {\n+            hir::Node::AnonConst(ac) => ac.body,\n+            _ => span_bug!(\n+                tcx.def_span(def_id.to_def_id()),\n+                \"from_inline_const can only process anonymous constants\"\n+            ),\n         };\n \n-        tcx.mk_const(ty::Const { val, ty })\n+        let expr = &tcx.hir().body(body_id).value;\n+\n+        let ty = tcx.typeck(def_id).node_type(hir_id);\n+\n+        let ret = match Self::try_eval_body_expr(tcx, ty, expr) {\n+            Some(v) => v,\n+            None => {\n+                let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id());\n+                let parent_substs =\n+                    tcx.erase_regions(InternalSubsts::identity_for_item(tcx, outer_def_id));\n+                let substs =\n+                    InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n+                        .substs;\n+                tcx.mk_const(ty::Const {\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                        def: ty::WithOptConstParam::unknown(def_id).to_global(),\n+                        substs_: Some(substs),\n+                        promoted: None,\n+                    }),\n+                    ty,\n+                })\n+            }\n+        };\n+        debug_assert!(!ret.has_free_regions(tcx));\n+        ret\n     }\n \n     /// Interns the given value as a constant."}, {"sha": "40670f1fdcaefb03ac7b4ec18774be070bfec613", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -74,9 +74,10 @@ pub use self::sty::{\n     Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar, BoundVariableKind,\n     CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid, EarlyBoundRegion,\n     ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig, FreeRegion, GenSig,\n-    GeneratorSubsts, GeneratorSubstsParts, ParamConst, ParamTy, PolyExistentialProjection,\n-    PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef, ProjectionTy, Region, RegionKind,\n-    RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts, VarianceDiagInfo, VarianceDiagMutKind,\n+    GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts, InlineConstSubstsParts, ParamConst,\n+    ParamTy, PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig,\n+    PolyTraitRef, ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut,\n+    UpvarSubsts, VarianceDiagInfo, VarianceDiagMutKind,\n };\n pub use self::trait_def::TraitDef;\n "}, {"sha": "e57075ed33811d59589d3f340ef2f5c0ae272a1a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -704,6 +704,66 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     }\n }\n \n+/// An inline const is modeled like\n+///\n+///     const InlineConst<'l0...'li, T0...Tj, R>: R;\n+///\n+/// where:\n+///\n+/// - 'l0...'li and T0...Tj are the generic parameters\n+///   inherited from the item that defined the inline const,\n+/// - R represents the type of the constant.\n+///\n+/// When the inline const is instantiated, `R` is substituted as the actual inferred\n+/// type of the constant. The reason that `R` is represented as an extra type parameter\n+/// is the same reason that [`ClosureSubsts`] have `CS` and `U` as type parameters:\n+/// inline const can reference lifetimes that are internal to the creating function.\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n+pub struct InlineConstSubsts<'tcx> {\n+    /// Generic parameters from the enclosing item,\n+    /// concatenated with the inferred type of the constant.\n+    pub substs: SubstsRef<'tcx>,\n+}\n+\n+/// Struct returned by `split()`.\n+pub struct InlineConstSubstsParts<'tcx, T> {\n+    pub parent_substs: &'tcx [GenericArg<'tcx>],\n+    pub ty: T,\n+}\n+\n+impl<'tcx> InlineConstSubsts<'tcx> {\n+    /// Construct `InlineConstSubsts` from `InlineConstSubstsParts`.\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        parts: InlineConstSubstsParts<'tcx, Ty<'tcx>>,\n+    ) -> InlineConstSubsts<'tcx> {\n+        InlineConstSubsts {\n+            substs: tcx.mk_substs(\n+                parts.parent_substs.iter().copied().chain(std::iter::once(parts.ty.into())),\n+            ),\n+        }\n+    }\n+\n+    /// Divides the inline const substs into their respective components.\n+    /// The ordering assumed here must match that used by `InlineConstSubsts::new` above.\n+    fn split(self) -> InlineConstSubstsParts<'tcx, GenericArg<'tcx>> {\n+        match self.substs[..] {\n+            [ref parent_substs @ .., ty] => InlineConstSubstsParts { parent_substs, ty },\n+            _ => bug!(\"inline const substs missing synthetics\"),\n+        }\n+    }\n+\n+    /// Returns the substitutions of the inline const's parent.\n+    pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {\n+        self.split().parent_substs\n+    }\n+\n+    /// Returns the type of this inline const.\n+    pub fn ty(self) -> Ty<'tcx> {\n+        self.split().ty.expect_ty()\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub enum ExistentialPredicate<'tcx> {"}, {"sha": "73a8e18949de06ad6a4d8d5b3dc0c8329b5c22bf", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -3,7 +3,7 @@\n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n+use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n@@ -204,6 +204,14 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         GeneratorSubsts { substs: self }\n     }\n \n+    /// Interpret these substitutions as the substitutions of an inline const.\n+    /// Inline const substitutions have a particular structure controlled by the\n+    /// compiler that encodes information like the inferred type;\n+    /// see `ty::InlineConstSubsts` struct for more comments.\n+    pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {\n+        InlineConstSubsts { substs: self }\n+    }\n+\n     /// Creates an `InternalSubsts` that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))"}, {"sha": "d5b78820411be7d33e0e42eb8a4d21bd7884bc68", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -423,6 +423,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)\n     }\n \n+    /// Returns `true` if `def_id` refers to a closure, generator or inline const.\n+    pub fn is_closure_or_inline_const(self, def_id: DefId) -> bool {\n+        matches!(\n+            self.def_kind(def_id),\n+            DefKind::Closure | DefKind::Generator | DefKind::InlineConst\n+        )\n+    }\n+\n     /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).\n     pub fn is_trait(self, def_id: DefId) -> bool {\n         self.def_kind(def_id) == DefKind::Trait\n@@ -440,16 +448,19 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Ctor(..))\n     }\n \n-    /// Given the def-ID of a fn or closure, returns the def-ID of\n-    /// the innermost fn item that the closure is contained within.\n-    /// This is a significant `DefId` because, when we do\n-    /// type-checking, we type-check this fn item and all of its\n-    /// (transitive) closures together. Therefore, when we fetch the\n+    /// Given the `DefId`, returns the `DefId` of the innermost item that\n+    /// has its own type-checking context or \"inference enviornment\".\n+    ///\n+    /// For example, a closure has its own `DefId`, but it is type-checked\n+    /// with the containing item. Similarly, an inline const block has its\n+    /// own `DefId` but it is type-checked together with the containing item.\n+    ///\n+    /// Therefore, when we fetch the\n     /// `typeck` the closure, for example, we really wind up\n     /// fetching the `typeck` the enclosing fn item.\n     pub fn closure_base_def_id(self, def_id: DefId) -> DefId {\n         let mut def_id = def_id;\n-        while self.is_closure(def_id) {\n+        while self.is_closure_or_inline_const(def_id) {\n             def_id = self.parent(def_id).unwrap_or_else(|| {\n                 bug!(\"closure {:?} has no parent\", def_id);\n             });"}, {"sha": "b4005ccd1cc42205db0909d37699f2b802fbf561", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -578,7 +578,7 @@ impl<'tcx> Cx<'tcx> {\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n \n                 ExprKind::ConstBlock { value }\n             }"}, {"sha": "ce80214c875fc5e46f329f65fc438f031759bed7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -544,7 +544,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             let (lit, neg) = match expr.kind {\n                 hir::ExprKind::ConstBlock(ref anon_const) => {\n                     let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                    let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n                     if matches!(value.val, ConstKind::Param(_)) {\n                         let span = self.tcx.hir().span(anon_const.hir_id);\n                         self.errors.push(PatternError::ConstParamInPattern(span));"}, {"sha": "40905c1f8affcb8b87de1f81693a7c40971b7d83", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -334,9 +334,10 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     // properly, we can't miss any types.\n \n     match expr.kind {\n-        // Manually recurse over closures, because they are the only\n+        // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n-        hir::ExprKind::Closure(.., body, _, _) => {\n+        hir::ExprKind::Closure(.., body, _, _)\n+        | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);\n         }"}, {"sha": "c03ae17b1723699dee10edae9ed7bb37eec068c2", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -30,6 +30,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder,\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::{ExprKind, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -323,7 +324,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::DropTemps(e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(args) => self.check_expr_array(args, expected, expr),\n-            ExprKind::ConstBlock(ref anon_const) => self.to_const(anon_const).ty,\n+            ExprKind::ConstBlock(ref anon_const) => {\n+                self.check_expr_const_block(anon_const, expected, expr)\n+            }\n             ExprKind::Repeat(element, ref count) => {\n                 self.check_expr_repeat(element, count, expected, expr)\n             }\n@@ -1166,6 +1169,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_array(element_ty, args.len() as u64)\n     }\n \n+    fn check_expr_const_block(\n+        &self,\n+        anon_const: &'tcx hir::AnonConst,\n+        expected: Expectation<'tcx>,\n+        _expr: &'tcx hir::Expr<'tcx>,\n+    ) -> Ty<'tcx> {\n+        let body = self.tcx.hir().body(anon_const.body);\n+\n+        // Create a new function context.\n+        let fcx = FnCtxt::new(self, self.param_env, body.value.hir_id);\n+        crate::check::GatherLocalsVisitor::new(&fcx).visit_body(body);\n+\n+        let ty = fcx.check_expr_with_expectation(&body.value, expected);\n+        fcx.require_type_is_sized(ty, body.value.span, traits::ConstSized);\n+        fcx.write_ty(anon_const.hir_id, ty);\n+        ty\n+    }\n+\n     fn check_expr_repeat(\n         &self,\n         element: &'tcx hir::Expr<'tcx>,"}, {"sha": "cbf33cf1b78a147112c2ad55cd868a845a813eb3", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -292,7 +292,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // String and byte-string literals result in types `&str` and `&[u8]` respectively.\n             // All other literals result in non-reference types.\n             // As a result, we allow `if let 0 = &&0 {}` but not `if let \"foo\" = &&\"foo {}`.\n-            PatKind::Lit(lt) => match self.check_expr(lt).kind() {\n+            //\n+            // Call `resolve_vars_if_possible` here for inline const blocks.\n+            PatKind::Lit(lt) => match self.resolve_vars_if_possible(self.check_expr(lt)).kind() {\n                 ty::Ref(..) => AdjustMode::Pass,\n                 _ => AdjustMode::Peel,\n             },"}, {"sha": "52faf5fbe9fb3098019a96ab450ab5ef87b31825", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -341,6 +341,29 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.visit_region_obligations(body_id.hir_id);\n     }\n \n+    fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {\n+        debug!(\"visit_inline_const(id={:?})\", id);\n+\n+        // Save state of current function. We will restore afterwards.\n+        let old_body_id = self.body_id;\n+        let old_body_owner = self.body_owner;\n+        let env_snapshot = self.outlives_environment.push_snapshot_pre_closure();\n+\n+        let body_id = body.id();\n+        self.body_id = body_id.hir_id;\n+        self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n+\n+        self.outlives_environment.save_implied_bounds(body_id.hir_id);\n+\n+        self.visit_body(body);\n+        self.visit_region_obligations(body_id.hir_id);\n+\n+        // Restore state from previous function.\n+        self.outlives_environment.pop_snapshot_post_closure(env_snapshot);\n+        self.body_id = old_body_id;\n+        self.body_owner = old_body_owner;\n+    }\n+\n     fn visit_region_obligations(&mut self, hir_id: hir::HirId) {\n         debug!(\"visit_region_obligations: hir_id={:?}\", hir_id);\n \n@@ -460,6 +483,11 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n                 intravisit::walk_expr(self, expr);\n             }\n \n+            hir::ExprKind::ConstBlock(anon_const) => {\n+                let body = self.tcx.hir().body(anon_const.body);\n+                self.visit_inline_const(anon_const.hir_id, body);\n+            }\n+\n             _ => intravisit::walk_expr(self, expr),\n         }\n     }"}, {"sha": "fdc8b6b5e64519d57642ad6549ec858d880fcc89", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -282,6 +282,12 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n             hir::ExprKind::Field(..) => {\n                 self.visit_field_id(e.hir_id);\n             }\n+            hir::ExprKind::ConstBlock(anon_const) => {\n+                self.visit_node_id(e.span, anon_const.hir_id);\n+\n+                let body = self.tcx().hir().body(anon_const.body);\n+                self.visit_body(body);\n+            }\n             _ => {}\n         }\n "}, {"sha": "11666fcc2d84f35e242238ff8ee2fb2764b53bd1", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -1494,7 +1494,9 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     {\n                         Some(parent_def_id.to_def_id())\n                     }\n-\n+                    Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n+                        Some(tcx.closure_base_def_id(def_id))\n+                    }\n                     _ => None,\n                 }\n             }\n@@ -1692,6 +1694,24 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         }));\n     }\n \n+    // provide junk type parameter defs for const blocks.\n+    if let Node::AnonConst(_) = node {\n+        let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+        if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n+            params.push(ty::GenericParamDef {\n+                index: type_start,\n+                name: Symbol::intern(\"<const_ty>\"),\n+                def_id,\n+                pure_wrt_drop: false,\n+                kind: ty::GenericParamDefKind::Type {\n+                    has_default: false,\n+                    object_lifetime_default: rl::Set1::Empty,\n+                    synthetic: None,\n+                },\n+            });\n+        }\n+    }\n+\n     let param_def_id_to_index = params.iter().map(|param| (param.def_id, param.index)).collect();\n \n     ty::Generics {"}, {"sha": "04a68250ced0cd0a44387b6fa7d3abf868b03351", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468192a9c52e613f56af5b2a967d33c326cbf373/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=468192a9c52e613f56af5b2a967d33c326cbf373", "patch": "@@ -494,7 +494,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 Node::Expr(&Expr { kind: ExprKind::ConstBlock(ref anon_const), .. })\n                     if anon_const.hir_id == hir_id =>\n                 {\n-                    tcx.typeck(def_id).node_type(anon_const.hir_id)\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                    substs.as_inline_const().ty()\n                 }\n \n                 Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })"}]}