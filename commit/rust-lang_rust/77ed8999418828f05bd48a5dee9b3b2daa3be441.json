{"sha": "77ed8999418828f05bd48a5dee9b3b2daa3be441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZWQ4OTk5NDE4ODI4ZjA1YmQ0OGE1ZGVlOWIzYjJkYWEzYmU0NDE=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-25T11:07:59Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-25T11:07:59Z"}, "message": "Merge pull request #940 from oli-obk/simplify/mut_mut\n\nsimplify `mut_mut` lint", "tree": {"sha": "d3928eb4505340c71255f43f952ac8b34239487a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3928eb4505340c71255f43f952ac8b34239487a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ed8999418828f05bd48a5dee9b3b2daa3be441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ed8999418828f05bd48a5dee9b3b2daa3be441", "html_url": "https://github.com/rust-lang/rust/commit/77ed8999418828f05bd48a5dee9b3b2daa3be441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ed8999418828f05bd48a5dee9b3b2daa3be441/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71e030cd7dfbc1596b641576104494bbcb6d331", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71e030cd7dfbc1596b641576104494bbcb6d331", "html_url": "https://github.com/rust-lang/rust/commit/d71e030cd7dfbc1596b641576104494bbcb6d331"}, {"sha": "e90a0be923906ded7c79d6168a11b8b68d85fd72", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90a0be923906ded7c79d6168a11b8b68d85fd72", "html_url": "https://github.com/rust-lang/rust/commit/e90a0be923906ded7c79d6168a11b8b68d85fd72"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "4147e288c4f60b3028f0aa666d1be611c3623058", "filename": "src/mut_mut.rs", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/77ed8999418828f05bd48a5dee9b3b2daa3be441/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ed8999418828f05bd48a5dee9b3b2daa3be441/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=77ed8999418828f05bd48a5dee9b3b2daa3be441", "patch": "@@ -28,50 +28,32 @@ impl LintPass for MutMut {\n \n impl LateLintPass for MutMut {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        check_expr_mut(cx, expr)\n-    }\n-\n-    fn check_ty(&mut self, cx: &LateContext, ty: &Ty) {\n-        unwrap_mut(ty).and_then(unwrap_mut).map_or((), |_| {\n-            span_lint(cx, MUT_MUT, ty.span, \"generally you want to avoid `&mut &mut _` if possible\");\n-        });\n-    }\n-}\n-\n-fn check_expr_mut(cx: &LateContext, expr: &Expr) {\n-    fn unwrap_addr(expr: &Expr) -> Option<&Expr> {\n-        match expr.node {\n-            ExprAddrOf(MutMutable, ref e) => Some(e),\n-            _ => None,\n+        if in_external_macro(cx, expr.span) {\n+            return;\n         }\n-    }\n \n-    if in_external_macro(cx, expr.span) {\n-        return;\n+        if let ExprAddrOf(MutMutable, ref e) = expr.node {\n+            if let ExprAddrOf(MutMutable, _) = e.node {\n+                span_lint(cx,\n+                          MUT_MUT,\n+                          expr.span,\n+                          \"generally you want to avoid `&mut &mut _` if possible\");\n+            } else {\n+                if let TyRef(_, TypeAndMut { mutbl: MutMutable, .. }) = cx.tcx.expr_ty(e).sty {\n+                    span_lint(cx,\n+                              MUT_MUT,\n+                              expr.span,\n+                              \"this expression mutably borrows a mutable reference. Consider reborrowing\");\n+                }\n+            }\n+        }\n     }\n \n-    unwrap_addr(expr).map_or((), |e| {\n-        unwrap_addr(e).map_or_else(|| {\n-                                       if let TyRef(_, TypeAndMut { mutbl: MutMutable, .. }) = cx.tcx.expr_ty(e).sty {\n-                                           span_lint(cx,\n-                                                     MUT_MUT,\n-                                                     expr.span,\n-                                                     \"this expression mutably borrows a mutable reference. Consider \\\n-                                                      reborrowing\");\n-                                       }\n-                                   },\n-                                   |_| {\n-                                       span_lint(cx,\n-                                                 MUT_MUT,\n-                                                 expr.span,\n-                                                 \"generally you want to avoid `&mut &mut _` if possible\");\n-                                   })\n-    })\n-}\n-\n-fn unwrap_mut(ty: &Ty) -> Option<&Ty> {\n-    match ty.node {\n-        TyRptr(_, MutTy { ty: ref pty, mutbl: MutMutable }) => Some(pty),\n-        _ => None,\n+    fn check_ty(&mut self, cx: &LateContext, ty: &Ty) {\n+        if let TyRptr(_, MutTy { ty: ref pty, mutbl: MutMutable }) = ty.node {\n+            if let TyRptr(_, MutTy { mutbl: MutMutable, .. }) = pty.node {\n+                span_lint(cx, MUT_MUT, ty.span, \"generally you want to avoid `&mut &mut _` if possible\");\n+            }\n+        }\n     }\n }"}]}