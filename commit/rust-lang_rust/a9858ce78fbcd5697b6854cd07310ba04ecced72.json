{"sha": "a9858ce78fbcd5697b6854cd07310ba04ecced72", "node_id": "C_kwDOAAsO6NoAKGE5ODU4Y2U3OGZiY2Q1Njk3YjY4NTRjZDA3MzEwYmEwNGVjY2VkNzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-20T00:09:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T00:09:42Z"}, "message": "Rollup merge of #91026 - notriddle:notriddle/rustdoc-doctest-semicolon, r=jyn514\n\nrustdoc doctest: detect `fn main` after an unexpected semicolon\n\nFixes #91014\n\nThe basic problem with this is that rustdoc, when hunting for `fn main`, will stop parsing after it reaches a fatal error. This unexpected semicolon was a fatal error, so in `src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.rs`, it would wrap the doctest in an implied main function, turning it into this:\n\n    fn main() {\n        struct S {};\n        fn main() {\n            assert_eq!(0, 1);\n        }\n    }\n\nThis, as it turns out, is totally valid, and it executes no assertions, so *it passes,* even though the user wanted it to execute the assertion.\n\nThe Rust parser already has the ability to recover from these unexpected semicolons, but to do so, it needs to use the `parse_mod` function, so this PR changes it to do that.", "tree": {"sha": "ab919b2e2a238dc31855f289dbf1141a0a4f0397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab919b2e2a238dc31855f289dbf1141a0a4f0397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9858ce78fbcd5697b6854cd07310ba04ecced72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmDzHCRBK7hj4Ov3rIwAAXScIAGaeFKzLvCEoqHK5qdf8IX56\nktlbz2s+cnY4WKtssmotD3qOPQdebhG1m48gmyCmSfsyM+xQdhV7E2s2JzvTTKCn\nqEBgqZg07i8xIAGJRSmXdveGpUxbwFBjTCbs/a6Yrvj9M6gcnstQ6+nzpJastHvC\nD3rRnAj567WaLsqCh/zeIIMS7lUcvMQ6vWS1ysCgCr3/SiCdX43CzQoJKwjLcUNA\nsxS6oKE4zoBg4Lq0QwlxXHzs4mzbEG2xOMBvjXLreUrtfI8mCOYGQum04LD43ZXT\nzdmO6Zxi2vOP7vOfqPrDhgW4t8HZsKHLpEtswLrPhLZ7QRfD7GdQ8lJep5/f0yY=\n=oAHX\n-----END PGP SIGNATURE-----\n", "payload": "tree ab919b2e2a238dc31855f289dbf1141a0a4f0397\nparent cf69f9e2206c708cb0c4535cab9e7a64c23add06\nparent 214ad2f5b5ff529548ce13dabcda8d5841df0bd7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637366982 +0100\ncommitter GitHub <noreply@github.com> 1637366982 +0100\n\nRollup merge of #91026 - notriddle:notriddle/rustdoc-doctest-semicolon, r=jyn514\n\nrustdoc doctest: detect `fn main` after an unexpected semicolon\n\nFixes #91014\n\nThe basic problem with this is that rustdoc, when hunting for `fn main`, will stop parsing after it reaches a fatal error. This unexpected semicolon was a fatal error, so in `src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.rs`, it would wrap the doctest in an implied main function, turning it into this:\n\n    fn main() {\n        struct S {};\n        fn main() {\n            assert_eq!(0, 1);\n        }\n    }\n\nThis, as it turns out, is totally valid, and it executes no assertions, so *it passes,* even though the user wanted it to execute the assertion.\n\nThe Rust parser already has the ability to recover from these unexpected semicolons, but to do so, it needs to use the `parse_mod` function, so this PR changes it to do that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9858ce78fbcd5697b6854cd07310ba04ecced72", "html_url": "https://github.com/rust-lang/rust/commit/a9858ce78fbcd5697b6854cd07310ba04ecced72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9858ce78fbcd5697b6854cd07310ba04ecced72/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf69f9e2206c708cb0c4535cab9e7a64c23add06", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf69f9e2206c708cb0c4535cab9e7a64c23add06", "html_url": "https://github.com/rust-lang/rust/commit/cf69f9e2206c708cb0c4535cab9e7a64c23add06"}, {"sha": "214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "html_url": "https://github.com/rust-lang/rust/commit/214ad2f5b5ff529548ce13dabcda8d5841df0bd7"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "37db20aaefa8d327311e91bf9f6e7234af0f5f8f", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9858ce78fbcd5697b6854cd07310ba04ecced72/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9858ce78fbcd5697b6854cd07310ba04ecced72/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a9858ce78fbcd5697b6854cd07310ba04ecced72", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast as ast;\n+use rustc_ast::{self as ast, token};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported, FatalError};\n@@ -537,7 +537,6 @@ crate fn make_test(\n             use rustc_errors::emitter::{Emitter, EmitterWriter};\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n-            use rustc_parse::parser::ForceCollect;\n             use rustc_session::parse::ParseSess;\n             use rustc_span::source_map::FilePathMapping;\n \n@@ -573,9 +572,9 @@ crate fn make_test(\n                 }\n             };\n \n-            loop {\n-                match parser.parse_item(ForceCollect::No) {\n-                    Ok(Some(item)) => {\n+            match parser.parse_mod(&token::Eof) {\n+                Ok((_attrs, items, _span)) => {\n+                    for item in items {\n                         if !found_main {\n                             if let ast::ItemKind::Fn(..) = item.kind {\n                                 if item.ident.name == sym::main {\n@@ -607,11 +606,9 @@ crate fn make_test(\n                             break;\n                         }\n                     }\n-                    Ok(None) => break,\n-                    Err(mut e) => {\n-                        e.cancel();\n-                        break;\n-                    }\n+                }\n+                Err(mut e) => {\n+                    e.cancel();\n                 }\n             }\n "}, {"sha": "16d737106ea890e2dd8f348625f8a0554c00f9c0", "filename": "src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9858ce78fbcd5697b6854cd07310ba04ecced72/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9858ce78fbcd5697b6854cd07310ba04ecced72/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.rs?ref=a9858ce78fbcd5697b6854cd07310ba04ecced72", "patch": "@@ -0,0 +1,18 @@\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// failure-status: 101\n+\n+/// <https://github.com/rust-lang/rust/issues/91014>\n+///\n+/// ```rust\n+/// struct S {}; // unexpected semicolon after struct def\n+///\n+/// fn main() {\n+///    assert_eq!(0, 1);\n+/// }\n+/// ```\n+mod m {}"}, {"sha": "61468b6c7457b3cdf3922f0fbc6eacdd64286898", "filename": "src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.stdout", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9858ce78fbcd5697b6854cd07310ba04ecced72/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a9858ce78fbcd5697b6854cd07310ba04ecced72/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.stdout?ref=a9858ce78fbcd5697b6854cd07310ba04ecced72", "patch": "@@ -0,0 +1,24 @@\n+\n+running 1 test\n+test $DIR/failed-doctest-extra-semicolon-on-item.rs - m (line 11) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-extra-semicolon-on-item.rs - m (line 11) stdout ----\n+error: expected item, found `;`\n+  --> $DIR/failed-doctest-extra-semicolon-on-item.rs:12:12\n+   |\n+LL | struct S {}; // unexpected semicolon after struct def\n+   |            ^ help: remove this semicolon\n+   |\n+   = help: braced struct declarations are not followed by a semicolon\n+\n+error: aborting due to previous error\n+\n+Couldn't compile the test.\n+\n+failures:\n+    $DIR/failed-doctest-extra-semicolon-on-item.rs - m (line 11)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}]}