{"sha": "525feb0acd1916f635dbfe65592123bb2844a9ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNWZlYjBhY2QxOTE2ZjYzNWRiZmU2NTU5MjEyM2JiMjg0NGE5ZWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-19T11:19:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-19T11:19:24Z"}, "message": "Merge #3651\n\n3651: Merge nested use trees r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8b0e9c64ccba295724e1e5def42a036f5683b500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0e9c64ccba295724e1e5def42a036f5683b500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525feb0acd1916f635dbfe65592123bb2844a9ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJec1U8CRBK7hj4Ov3rIwAAdHIIAEXBVErqIrejq5jwr7BdjY+B\n+b1pgYKt22DIDrEsXr5Yl5ch+mjcCJXQxdbeT5IlhhgA9Xmp77WB+rRB6NCXy9cg\nw71q8Cy6rGgiYEroQpkE8rryLfAv/2h00RNAEBVA3ddBR5j0rg1mYMI59TulYrmW\n4xZEZKRhWgRQhj8i983+MuVu4MP1/a1Rn+3vsrLz4KOqotaYW2JVa5aApmaygtoo\n5m2sSpKIzv0g4+jhgP1QJbamgkFP28YdREvUwnDyVNl7ISeRfoUElFUI0TT0xM3U\nbbuE4T2wm84G+y7B65Iv/axtp2NsWvdydEMwQByp6UDemhT5AII+idZs1UFqPEw=\n=Wkuc\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b0e9c64ccba295724e1e5def42a036f5683b500\nparent 11f2c6908b23566703469f9ad7731425c23daedf\nparent 0c55c069447b64dd9df020422c22c11aa4d3e99b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584616764 +0000\ncommitter GitHub <noreply@github.com> 1584616764 +0000\n\nMerge #3651\n\n3651: Merge nested use trees r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525feb0acd1916f635dbfe65592123bb2844a9ee", "html_url": "https://github.com/rust-lang/rust/commit/525feb0acd1916f635dbfe65592123bb2844a9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525feb0acd1916f635dbfe65592123bb2844a9ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f2c6908b23566703469f9ad7731425c23daedf", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f2c6908b23566703469f9ad7731425c23daedf", "html_url": "https://github.com/rust-lang/rust/commit/11f2c6908b23566703469f9ad7731425c23daedf"}, {"sha": "0c55c069447b64dd9df020422c22c11aa4d3e99b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c55c069447b64dd9df020422c22c11aa4d3e99b", "html_url": "https://github.com/rust-lang/rust/commit/0c55c069447b64dd9df020422c22c11aa4d3e99b"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "89bc975bd0534ccd9bb0db211bb65d74844c75f8", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/525feb0acd1916f635dbfe65592123bb2844a9ee/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525feb0acd1916f635dbfe65592123bb2844a9ee/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=525feb0acd1916f635dbfe65592123bb2844a9ee", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n use ra_syntax::{\n     algo::neighbor,\n     ast::{self, edit::AstNodeEdit, make},\n-    AstNode, AstToken, Direction, InsertPosition, SyntaxElement, T,\n+    AstNode, AstToken, Direction, InsertPosition, SyntaxElement, TextRange, T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -22,18 +22,15 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n     let tree: ast::UseTree = ctx.find_node_at_offset()?;\n-    let use_item = tree.syntax().parent().and_then(ast::UseItem::cast)?;\n-    let (merged, to_delete) = [Direction::Prev, Direction::Next]\n-        .iter()\n-        .copied()\n-        .filter_map(|dir| neighbor(&use_item, dir))\n-        .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n-        .find_map(|(use_item, use_tree)| {\n-            Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n-        })?;\n-    let mut offset = ctx.frange.range.start();\n-    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n-        edit.replace_ast(tree, merged);\n+    let (new_tree, to_delete) = if let Some(use_item) =\n+        tree.syntax().parent().and_then(ast::UseItem::cast)\n+    {\n+        let (merged, to_delete) = next_prev()\n+            .filter_map(|dir| neighbor(&use_item, dir))\n+            .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n+            .find_map(|(use_item, use_tree)| {\n+                Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n+            })?;\n \n         let mut range = to_delete.syntax().text_range();\n         let next_ws = to_delete\n@@ -44,14 +41,41 @@ pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n         if let Some(ws) = next_ws {\n             range = range.extend_to(&ws.syntax().text_range())\n         }\n-        edit.delete(range);\n-        if range.end() <= offset {\n-            offset -= range.len();\n+        (merged, range)\n+    } else {\n+        let (merged, to_delete) = next_prev()\n+            .filter_map(|dir| neighbor(&tree, dir))\n+            .find_map(|use_tree| Some((try_merge_trees(&tree, &use_tree)?, use_tree.clone())))?;\n+\n+        let mut range = to_delete.syntax().text_range();\n+        if let Some((dir, nb)) = next_prev().find_map(|dir| Some((dir, neighbor(&to_delete, dir)?)))\n+        {\n+            let nb_range = nb.syntax().text_range();\n+            if dir == Direction::Prev {\n+                range = TextRange::from_to(nb_range.end(), range.end());\n+            } else {\n+                range = TextRange::from_to(range.start(), nb_range.start());\n+            }\n+        }\n+        (merged, range)\n+    };\n+\n+    let mut offset = ctx.frange.range.start();\n+    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n+        edit.replace_ast(tree, new_tree);\n+        edit.delete(to_delete);\n+\n+        if to_delete.end() <= offset {\n+            offset -= to_delete.len();\n         }\n         edit.set_cursor(offset);\n     })\n }\n \n+fn next_prev() -> impl Iterator<Item = Direction> {\n+    [Direction::Next, Direction::Prev].iter().copied()\n+}\n+\n fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTree> {\n     let lhs_path = old.path()?;\n     let rhs_path = new.path()?;\n@@ -134,20 +158,28 @@ use std::fmt<|>::Display;\n             r\"\n use std::fmt<|>::{Display, Debug};\n \",\n-        )\n+        );\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_merge_nested() {\n         check_assist(\n             merge_imports,\n             r\"\n use std::{fmt<|>::Debug, fmt::Display};\n \",\n             r\"\n-use std::{fmt::{Debug, Display}};\n+use std::{fmt<|>::{Debug, Display}};\n \",\n-        )\n+        );\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::{fmt::Debug, fmt<|>::Display};\n+\",\n+            r\"\n+use std::{fmt<|>::{Display, Debug}};\n+\",\n+        );\n     }\n }"}]}