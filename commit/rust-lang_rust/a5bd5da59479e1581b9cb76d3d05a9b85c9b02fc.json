{"sha": "a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "node_id": "C_kwDOAAsO6NoAKGE1YmQ1ZGE1OTQ3OWUxNTgxYjljYjc2ZDNkMDVhOWI4NWM5YjAyZmM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T23:53:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-25T01:07:26Z"}, "message": "Rename two `TerminatorCodegenHelper` methods.\n\n`TerminatorCodegenHelper` has three methods `llblock`, `llbb`, and\n`lltarget`. They're all similar, but the names given no indication of\nthe differences.\n\nThis commit renames `lltarget` as `llbb_with_landing_pad`, and `llblock`\nas `llbb_with_cleanup`. These aren't fantastic names, but at least it's\nnow clear that `llbb` is the lowest-level of the three and the other two\nwrap it.", "tree": {"sha": "fc90b2a812e8828e5069a021d6e9a051fcc8da6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc90b2a812e8828e5069a021d6e9a051fcc8da6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "html_url": "https://github.com/rust-lang/rust/commit/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4092f8ccb4b7f8b3c4a5cdcbfcdfafa8f5f1e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4092f8ccb4b7f8b3c4a5cdcbfcdfafa8f5f1e1", "html_url": "https://github.com/rust-lang/rust/commit/4e4092f8ccb4b7f8b3c4a5cdcbfcdfafa8f5f1e1"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "63fafeeefda62b0d8cdfee494e27cc9463b3c5ad", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=a5bd5da59479e1581b9cb76d3d05a9b85c9b02fc", "patch": "@@ -63,7 +63,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         }\n     }\n \n-    fn lltarget<Bx: BuilderMethods<'a, 'tcx>>(\n+    /// Get a basic block (creating it if necessary), possibly with a landing\n+    /// pad next to it.\n+    fn llbb_with_landing_pad<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         target: mir::BasicBlock,\n@@ -83,17 +85,18 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         }\n     }\n \n-    /// Create a basic block.\n-    fn llblock<Bx: BuilderMethods<'a, 'tcx>>(\n+    /// Get a basic block (creating it if necessary), possibly with cleanup\n+    /// stuff in it or next to it.\n+    fn llbb_with_cleanup<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         target: mir::BasicBlock,\n     ) -> Bx::BasicBlock {\n-        let (lltarget, is_cleanupret) = self.lltarget(fx, target);\n+        let (lltarget, is_cleanupret) = self.llbb_with_landing_pad(fx, target);\n         if is_cleanupret {\n             // MSVC cross-funclet jump - need a trampoline\n \n-            debug!(\"llblock: creating cleanup trampoline for {:?}\", target);\n+            debug!(\"llbb_with_cleanup: creating cleanup trampoline for {:?}\", target);\n             let name = &format!(\"{:?}_cleanup_trampoline_{:?}\", self.bb, target);\n             let trampoline_llbb = Bx::append_block(fx.cx, fx.llfn, name);\n             let mut trampoline_bx = Bx::build(fx.cx, trampoline_llbb);\n@@ -110,7 +113,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         bx: &mut Bx,\n         target: mir::BasicBlock,\n     ) {\n-        let (lltarget, is_cleanupret) = self.lltarget(fx, target);\n+        let (lltarget, is_cleanupret) = self.llbb_with_landing_pad(fx, target);\n         if is_cleanupret {\n             // micro-optimization: generate a `ret` rather than a jump\n             // to a trampoline.\n@@ -138,7 +141,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n         let unwind_block = if let Some(cleanup) = cleanup.filter(|_| fn_abi.can_unwind) {\n-            Some(self.llblock(fx, cleanup))\n+            Some(self.llbb_with_cleanup(fx, cleanup))\n         } else if fx.mir[self.bb].is_cleanup\n             && fn_abi.can_unwind\n             && !base::wants_msvc_seh(fx.cx.tcx().sess)\n@@ -231,7 +234,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n                 options,\n                 line_spans,\n                 instance,\n-                Some((ret_llbb, self.llblock(fx, cleanup), self.funclet(fx))),\n+                Some((ret_llbb, self.llbb_with_cleanup(fx, cleanup), self.funclet(fx))),\n             );\n         } else {\n             bx.codegen_inline_asm(template, &operands, options, line_spans, instance, None);\n@@ -281,8 +284,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if target_iter.len() == 1 {\n             // If there are two targets (one conditional, one fallback), emit br instead of switch\n             let (test_value, target) = target_iter.next().unwrap();\n-            let lltrue = helper.llblock(self, target);\n-            let llfalse = helper.llblock(self, targets.otherwise());\n+            let lltrue = helper.llbb_with_cleanup(self, target);\n+            let llfalse = helper.llbb_with_cleanup(self, targets.otherwise());\n             if switch_ty == bx.tcx().types.bool {\n                 // Don't generate trivial icmps when switching on bool\n                 match test_value {\n@@ -299,8 +302,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         } else {\n             bx.switch(\n                 discr.immediate(),\n-                helper.llblock(self, targets.otherwise()),\n-                target_iter.map(|(value, target)| (value, helper.llblock(self, target))),\n+                helper.llbb_with_cleanup(self, targets.otherwise()),\n+                target_iter.map(|(value, target)| (value, helper.llbb_with_cleanup(self, target))),\n             );\n         }\n     }\n@@ -530,7 +533,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let cond = bx.expect(cond, expected);\n \n         // Create the failure block and the conditional branch to it.\n-        let lltarget = helper.llblock(self, target);\n+        let lltarget = helper.llbb_with_cleanup(self, target);\n         let panic_block = bx.append_sibling_block(\"panic\");\n         if expected {\n             bx.cond_br(cond, lltarget, panic_block);"}]}