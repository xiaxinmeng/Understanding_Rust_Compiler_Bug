{"sha": "9ee0137018f6e0a20b07e4192be703d0864e6b13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTAxMzcwMThmNmUwYTIwYjA3ZTQxOTJiZTcwM2QwODY0ZTZiMTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-07T20:51:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-07T20:51:41Z"}, "message": "Refactor reflect.rs, begin visiting type substructures.", "tree": {"sha": "0790142e67f44d5cd4f63087e04afae071f9be82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0790142e67f44d5cd4f63087e04afae071f9be82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee0137018f6e0a20b07e4192be703d0864e6b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee0137018f6e0a20b07e4192be703d0864e6b13", "html_url": "https://github.com/rust-lang/rust/commit/9ee0137018f6e0a20b07e4192be703d0864e6b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee0137018f6e0a20b07e4192be703d0864e6b13/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a494cc159874ce2b46f19abeda4e2e46b351cff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a494cc159874ce2b46f19abeda4e2e46b351cff2", "html_url": "https://github.com/rust-lang/rust/commit/a494cc159874ce2b46f19abeda4e2e46b351cff2"}], "stats": {"total": 238, "additions": 160, "deletions": 78}, "files": [{"sha": "4f24f9dccf2ca0a8bd4ab982d127a933d35be735", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9ee0137018f6e0a20b07e4192be703d0864e6b13/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee0137018f6e0a20b07e4192be703d0864e6b13/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=9ee0137018f6e0a20b07e4192be703d0864e6b13", "patch": "@@ -30,20 +30,30 @@ mod intrinsic {\n         fn visit_char() -> bool;\n         fn visit_str() -> bool;\n \n-        // FIXME: possibly pair these as enter/leave calls\n-        // not just enter with implicit number of subsequent\n-        // calls. (#2402)\n-        fn visit_vec_of(mutbl: uint) -> bool;\n-        fn visit_box_of(mutbl: uint) -> bool;\n-        fn visit_uniq_of(mutbl: uint) -> bool;\n-        fn visit_ptr_of(mutbl: uint) -> bool;\n-        fn visit_rptr_of(mutbl: uint) -> bool;\n-        fn visit_rec_of(n_fields: uint) -> bool;\n-        fn visit_rec_field(name: str/&, mutbl: uint) -> bool;\n-        fn visit_tup_of(n_fields: uint) -> bool;\n-        fn visit_tup_field(mutbl: uint) -> bool;\n-        fn visit_enum_of(n_variants: uint) -> bool;\n-        fn visit_enum_variant(name: str/&) -> bool;\n+        fn visit_estr_box() -> bool;\n+        fn visit_estr_uniq() -> bool;\n+        fn visit_estr_slice() -> bool;\n+        fn visit_estr_fixed(sz: uint) -> bool;\n+\n+        fn visit_enter_box(mtbl: uint) -> bool;\n+        fn visit_leave_box(mtbl: uint) -> bool;\n+        fn visit_enter_uniq(mtbl: uint) -> bool;\n+        fn visit_leave_uniq(mtbl: uint) -> bool;\n+        fn visit_enter_ptr(mtbl: uint) -> bool;\n+        fn visit_leave_ptr(mtbl: uint) -> bool;\n+        fn visit_enter_rptr(mtbl: uint) -> bool;\n+        fn visit_leave_rptr(mtbl: uint) -> bool;\n+\n+        fn visit_enter_vec(mtbl: uint) -> bool;\n+        fn visit_leave_vec(mtbl: uint) -> bool;\n+        fn visit_enter_evec_box(mtbl: uint) -> bool;\n+        fn visit_leave_evec_box(mtbl: uint) -> bool;\n+        fn visit_enter_evec_uniq(mtbl: uint) -> bool;\n+        fn visit_leave_evec_uniq(mtbl: uint) -> bool;\n+        fn visit_enter_evec_slice(mtbl: uint) -> bool;\n+        fn visit_leave_evec_slice(mtbl: uint) -> bool;\n+        fn visit_enter_evec_fixed(mtbl: uint, sz: uint) -> bool;\n+        fn visit_leave_evec_fixed(mtbl: uint, sz: uint) -> bool;\n     }\n \n     #[abi = \"rust-intrinsic\"]"}, {"sha": "cf929353ab4ea45c344ba2f55a6ace30a68199cb", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 101, "deletions": 52, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/9ee0137018f6e0a20b07e4192be703d0864e6b13/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee0137018f6e0a20b07e4192be703d0864e6b13/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=9ee0137018f6e0a20b07e4192be703d0864e6b13", "patch": "@@ -10,67 +10,116 @@ import type_of::*;\n import ast::def_id;\n import util::ppaux::ty_to_str;\n \n-fn visit_ty_steps(bcx: block, t: ty::t,\n-                  step: fn(bcx: block,\n-                           tyname: str,\n-                           args: [ValueRef]) -> block,\n-                  sub: fn(bcx: block, t: ty::t) -> block) -> block {\n+enum reflector = {\n+    visitor_val: ValueRef,\n+    visitor_methods: @[ty::method],\n+    mut bcx: block\n+};\n \n-    let ccx = bcx.ccx();\n+impl methods for reflector {\n \n-    alt ty::get(t).struct {\n-      ty::ty_bot { step(bcx, \"visit_bot\", []) }\n-      ty::ty_nil { step(bcx, \"visit_nil\", []) }\n-      ty::ty_bool { step(bcx, \"visit_bool\", []) }\n-      ty::ty_int(ast::ty_i) { step(bcx, \"visit_int\", []) }\n-      ty::ty_int(ast::ty_char) { step(bcx, \"visit_char\", []) }\n-      ty::ty_int(ast::ty_i8) { step(bcx, \"visit_i8\", []) }\n-      ty::ty_int(ast::ty_i16) { step(bcx, \"visit_i16\", []) }\n-      ty::ty_int(ast::ty_i32) { step(bcx, \"visit_i32\", []) }\n-      ty::ty_int(ast::ty_i64) { step(bcx, \"visit_i64\", []) }\n-      ty::ty_uint(ast::ty_u) { step(bcx, \"visit_uint\", []) }\n-      ty::ty_uint(ast::ty_u8) { step(bcx, \"visit_u8\", []) }\n-      ty::ty_uint(ast::ty_u16) { step(bcx, \"visit_u16\", []) }\n-      ty::ty_uint(ast::ty_u32) { step(bcx, \"visit_u32\", []) }\n-      ty::ty_uint(ast::ty_u64) { step(bcx, \"visit_u64\", []) }\n-      ty::ty_float(ast::ty_f) { step(bcx, \"visit_float\", []) }\n-      ty::ty_float(ast::ty_f32) { step(bcx, \"visit_f32\", []) }\n-      ty::ty_float(ast::ty_f64) { step(bcx, \"visit_f64\", []) }\n-      ty::ty_str { step(bcx, \"visit_str\", []) }\n+    fn c_uint(u: uint) -> ValueRef {\n+        C_uint(self.bcx.ccx(), u)\n+    }\n+\n+    fn visit(ty_name: str, args: [ValueRef]) {\n+        let tcx = self.bcx.tcx();\n+        let mth_idx = option::get(ty::method_idx(\"visit_\" + ty_name,\n+                                                 *self.visitor_methods));\n+        let mth_ty = ty::mk_fn(tcx, self.visitor_methods[mth_idx].fty);\n+        let v = self.visitor_val;\n+        let get_lval = {|bcx|\n+            impl::trans_iface_callee(bcx, v, mth_ty, mth_idx)\n+        };\n+        self.bcx =\n+            trans_call_inner(self.bcx, none, mth_ty, ty::mk_bool(tcx),\n+                             get_lval, arg_vals(args), ignore);\n+    }\n+\n+    fn visit_tydesc(t: ty::t) {\n+        self.bcx =\n+            call_tydesc_glue(self.bcx, self.visitor_val, t,\n+                             abi::tydesc_field_visit_glue);\n+    }\n+\n+    fn bracketed_mt(bracket_name: str, mt: ty::mt, extra: [ValueRef]) {\n+        self.visit(\"enter_\" + bracket_name,\n+                   [self.c_uint(mt.mutbl as uint)] + extra);\n+        self.visit_tydesc(mt.ty);\n+        self.visit(\"leave_\" + bracket_name,\n+                   [self.c_uint(mt.mutbl as uint)] + extra);\n+    }\n \n-      ty::ty_vec(mt) {\n-        let bcx = step(bcx, \"visit_vec_of\",\n-                       [C_uint(ccx, mt.mutbl as uint)]);\n-        sub(bcx, mt.ty)\n-      }\n+    fn vstore_name_and_extra(vstore: ty::vstore,\n+                             f: fn(str,[ValueRef])) {\n+        alt vstore {\n+          ty::vstore_fixed(n) { f(\"fixed\", [self.c_uint(n)]) }\n+          ty::vstore_slice(_) { f(\"slice\", []) }\n+          ty::vstore_uniq { f(\"uniq\", []);}\n+          ty::vstore_box { f(\"box\", []); }\n+        }\n+    }\n \n-      _ {\n-        // Ideally this would be an unimpl, but sadly we have\n-        // to pretend we can visit everything at this point.\n-        step(bcx, \"visit_bot\", [])\n-      }\n+    fn leaf(name: str) {\n+        self.visit(name, []);\n+    }\n+\n+    // Entrypoint\n+    fn visit_ty(t: ty::t) {\n+\n+        alt ty::get(t).struct {\n+          ty::ty_bot { self.leaf(\"bot\") }\n+          ty::ty_nil { self.leaf(\"nil\") }\n+          ty::ty_bool { self.leaf(\"bool\") }\n+          ty::ty_int(ast::ty_i) { self.leaf(\"int\") }\n+          ty::ty_int(ast::ty_char) { self.leaf(\"char\") }\n+          ty::ty_int(ast::ty_i8) { self.leaf(\"i8\") }\n+          ty::ty_int(ast::ty_i16) { self.leaf(\"i16\") }\n+          ty::ty_int(ast::ty_i32) { self.leaf(\"i32\") }\n+          ty::ty_int(ast::ty_i64) { self.leaf(\"i64\") }\n+          ty::ty_uint(ast::ty_u) { self.leaf(\"uint\") }\n+          ty::ty_uint(ast::ty_u8) { self.leaf(\"u8\") }\n+          ty::ty_uint(ast::ty_u16) { self.leaf(\"u16\") }\n+          ty::ty_uint(ast::ty_u32) { self.leaf(\"u32\") }\n+          ty::ty_uint(ast::ty_u64) { self.leaf(\"u64\") }\n+          ty::ty_float(ast::ty_f) { self.leaf(\"float\") }\n+          ty::ty_float(ast::ty_f32) { self.leaf(\"f32\") }\n+          ty::ty_float(ast::ty_f64) { self.leaf(\"f64\") }\n+          ty::ty_str { self.leaf(\"str\") }\n+\n+          ty::ty_vec(mt) { self.bracketed_mt(\"vec\", mt, []) }\n+          ty::ty_estr(vst) {\n+            self.vstore_name_and_extra(vst) {|name, extra|\n+                self.visit(\"estr_\" + name, extra)\n+            }\n+          }\n+          ty::ty_evec(mt, vst) {\n+            self.vstore_name_and_extra(vst) {|name, extra|\n+                self.bracketed_mt(\"evec_\" + name, mt, extra)\n+            }\n+          }\n+          ty::ty_box(mt) { self.bracketed_mt(\"box\", mt, []) }\n+          ty::ty_uniq(mt) { self.bracketed_mt(\"uniq\", mt, []) }\n+          ty::ty_ptr(mt) { self.bracketed_mt(\"ptr\", mt, []) }\n+          ty::ty_rptr(_, mt) { self.bracketed_mt(\"rptr\", mt, []) }\n+\n+          // FIXME: finish these.\n+          _ { self.visit(\"bot\", []) }\n+        }\n     }\n }\n \n // Emit a sequence of calls to visit_ty::visit_foo\n fn emit_calls_to_iface_visit_ty(bcx: block, t: ty::t,\n                                 visitor_val: ValueRef,\n                                 visitor_iid: def_id) -> block {\n-    let tcx = bcx.tcx();\n-    let methods = ty::iface_methods(tcx, visitor_iid);\n-    visit_ty_steps(bcx, t,\n-                   {|bcx, mth_name, args|\n-                       let mth_idx = option::get(ty::method_idx(mth_name,\n-                                                                *methods));\n-                       let mth_ty = ty::mk_fn(tcx, methods[mth_idx].fty);\n-                       let get_lval = {|bcx|\n-                           impl::trans_iface_callee(bcx, visitor_val,\n-                                                    mth_ty, mth_idx)\n-                       };\n-                       trans_call_inner(bcx, none, mth_ty, ty::mk_bool(tcx),\n-                                        get_lval, arg_vals(args), ignore)\n-                   },\n-                   {|bcx, t_sub|\n-                       call_tydesc_glue(bcx, visitor_val, t_sub,\n-                                        abi::tydesc_field_visit_glue)})\n+\n+    let r = reflector({\n+        visitor_val: visitor_val,\n+        visitor_methods: ty::iface_methods(bcx.tcx(), visitor_iid),\n+        mut bcx: bcx\n+    });\n+\n+    r.visit_ty(t);\n+    ret r.bcx;\n }"}, {"sha": "7cd373756f7db37357be680389803ec48207b22c", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9ee0137018f6e0a20b07e4192be703d0864e6b13/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee0137018f6e0a20b07e4192be703d0864e6b13/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=9ee0137018f6e0a20b07e4192be703d0864e6b13", "patch": "@@ -47,17 +47,38 @@ impl of intrinsic::ty_visitor for my_visitor {\n     fn visit_char() -> bool { true }\n     fn visit_str() -> bool { true }\n \n-    fn visit_vec_of(_mutbl: uint) -> bool { true }\n-    fn visit_box_of(_mutbl: uint) -> bool { true }\n-    fn visit_uniq_of(_mutbl: uint) -> bool { true }\n-    fn visit_ptr_of(_mutbl: uint) -> bool { true }\n-    fn visit_rptr_of(_mutbl: uint) -> bool { true }\n-    fn visit_rec_of(_n_fields: uint) -> bool { true }\n-    fn visit_rec_field(_name: str/&, _mutbl: uint) -> bool { true }\n-    fn visit_tup_of(_n_fields: uint) -> bool { true }\n-    fn visit_tup_field(_mutbl: uint) -> bool { true }\n-    fn visit_enum_of(_n_variants: uint) -> bool { true }\n-    fn visit_enum_variant(_name: str/&) -> bool { true }\n+    fn visit_estr_box() -> bool { true }\n+    fn visit_estr_uniq() -> bool { true }\n+    fn visit_estr_slice() -> bool { true }\n+    fn visit_estr_fixed(_sz: uint) -> bool { true }\n+\n+    fn visit_enter_box(_mtbl: uint) -> bool { true }\n+    fn visit_leave_box(_mtbl: uint) -> bool { true }\n+    fn visit_enter_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_leave_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_enter_ptr(_mtbl: uint) -> bool { true }\n+    fn visit_leave_ptr(_mtbl: uint) -> bool { true }\n+    fn visit_enter_rptr(_mtbl: uint) -> bool { true }\n+    fn visit_leave_rptr(_mtbl: uint) -> bool { true }\n+\n+    fn visit_enter_vec(_mtbl: uint) -> bool {\n+        self.types += [\"[\"];\n+        #error(\"visited enter-vec\");\n+        true\n+    }\n+    fn visit_leave_vec(_mtbl: uint) -> bool {\n+        self.types += [\"]\"];\n+        #error(\"visited leave-vec\");\n+        true\n+    }\n+    fn visit_enter_evec_box(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_box(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_uniq(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_slice(_mtbl: uint) -> bool { true }\n+    fn visit_leave_evec_slice(_mtbl: uint) -> bool { true }\n+    fn visit_enter_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n+    fn visit_leave_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n }\n \n fn main() {\n@@ -68,9 +89,11 @@ fn main() {\n     intrinsic::visit_ty::<int>(vv);\n     intrinsic::visit_ty::<i8>(vv);\n     intrinsic::visit_ty::<i16>(vv);\n+    intrinsic::visit_ty::<[int]>(vv);\n \n     for v.types.each {|s|\n         io::println(#fmt(\"type: %s\", s));\n     }\n-    assert v.types == [\"bool\", \"int\", \"i8\", \"i16\"];\n+    assert v.types == [\"bool\", \"int\", \"i8\", \"i16\",\n+                       \"[\", \"int\", \"]\"];\n }"}]}