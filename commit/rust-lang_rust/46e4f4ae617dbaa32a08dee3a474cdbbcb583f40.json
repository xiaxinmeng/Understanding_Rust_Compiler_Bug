{"sha": "46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTRmNGFlNjE3ZGJhYTMyYTA4ZGVlM2E0NzRjZGJiY2I1ODNmNDA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T14:35:20Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:46Z"}, "message": "middle: partially HirIdify stability", "tree": {"sha": "acf1a5b36bb564b26f05a6993748e8e3d655c4dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acf1a5b36bb564b26f05a6993748e8e3d655c4dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "html_url": "https://github.com/rust-lang/rust/commit/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6b2edbfd7a8b09995874db270869220d26b4533", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b2edbfd7a8b09995874db270869220d26b4533", "html_url": "https://github.com/rust-lang/rust/commit/b6b2edbfd7a8b09995874db270869220d26b4533"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "3a81660ad6912f806d02348bacd05eb765e25b56", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "patch": "@@ -117,13 +117,13 @@ struct Annotator<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n-    fn annotate<F>(&mut self, id: NodeId, attrs: &[Attribute],\n+    fn annotate<F>(&mut self, hir_id: HirId, attrs: &[Attribute],\n                    item_sp: Span, kind: AnnotationKind, visit_children: F)\n         where F: FnOnce(&mut Self)\n     {\n         if self.tcx.features().staged_api {\n             // This crate explicitly wants staged API.\n-            debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n+            debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n             if let Some(..) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n                 self.tcx.sess.span_err(item_sp, \"`#[deprecated]` cannot be used in staged api, \\\n                                                  use `#[rustc_deprecated]` instead\");\n@@ -178,7 +178,6 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                     }\n                 }\n \n-                let hir_id = self.tcx.hir().node_to_hir_id(id);\n                 self.index.stab_map.insert(hir_id, stab);\n \n                 let orig_parent_stab = replace(&mut self.parent_stab, Some(stab));\n@@ -188,7 +187,6 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                 debug!(\"annotate: not found, parent = {:?}\", self.parent_stab);\n                 if let Some(stab) = self.parent_stab {\n                     if stab.level.is_unstable() {\n-                        let hir_id = self.tcx.hir().node_to_hir_id(id);\n                         self.index.stab_map.insert(hir_id, stab);\n                     }\n                 }\n@@ -209,7 +207,6 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n             // -Zforce-unstable-if-unmarked is set.\n             if let Some(stab) = self.parent_stab {\n                 if stab.level.is_unstable() {\n-                    let hir_id = self.tcx.hir().node_to_hir_id(id);\n                     self.index.stab_map.insert(hir_id, stab);\n                 }\n             }\n@@ -220,7 +217,6 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                 }\n \n                 // `Deprecation` is just two pointers, no need to intern it\n-                let hir_id = self.tcx.hir().node_to_hir_id(id);\n                 let depr_entry = DeprecationEntry::local(depr, hir_id);\n                 self.index.depr_map.insert(hir_id, depr_entry.clone());\n \n@@ -229,7 +225,6 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                 visit_children(self);\n                 self.parent_depr = orig_parent_depr;\n             } else if let Some(parent_depr) = self.parent_depr.clone() {\n-                let hir_id = self.tcx.hir().node_to_hir_id(id);\n                 self.index.depr_map.insert(hir_id, parent_depr);\n                 visit_children(self);\n             } else {\n@@ -264,20 +259,20 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n                 if !sd.is_struct() {\n-                    self.annotate(sd.id(), &i.attrs, i.span, AnnotationKind::Required, |_| {})\n+                    self.annotate(sd.hir_id(), &i.attrs, i.span, AnnotationKind::Required, |_| {})\n                 }\n             }\n             _ => {}\n         }\n \n-        self.annotate(i.id, &i.attrs, i.span, kind, |v| {\n+        self.annotate(i.hir_id, &i.attrs, i.span, kind, |v| {\n             intravisit::walk_item(v, i)\n         });\n         self.in_trait_impl = orig_in_trait_impl;\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n-        self.annotate(ti.id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n+        self.annotate(ti.hir_id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n             intravisit::walk_trait_item(v, ti);\n         });\n     }\n@@ -288,31 +283,30 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         } else {\n             AnnotationKind::Required\n         };\n-        self.annotate(ii.id, &ii.attrs, ii.span, kind, |v| {\n+        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, |v| {\n             intravisit::walk_impl_item(v, ii);\n         });\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: HirId) {\n-        self.annotate(var.node.data.id(), &var.node.attrs, var.span, AnnotationKind::Required, |v| {\n-            intravisit::walk_variant(v, var, g, item_id);\n-        })\n+        self.annotate(var.node.data.hir_id(), &var.node.attrs, var.span, AnnotationKind::Required,\n+            |v| { intravisit::walk_variant(v, var, g, item_id) })\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx StructField) {\n-        self.annotate(s.id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n+        self.annotate(s.hir_id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n             intravisit::walk_struct_field(v, s);\n         });\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n-        self.annotate(i.id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n+        self.annotate(i.hir_id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n             intravisit::walk_foreign_item(v, i);\n         });\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n-        self.annotate(md.id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n+        self.annotate(md.hir_id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n     }\n }\n \n@@ -322,12 +316,12 @@ struct MissingStabilityAnnotations<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n-    fn check_missing_stability(&self, id: NodeId, span: Span, name: &str) {\n-        let hir_id = self.tcx.hir().node_to_hir_id(id);\n+    fn check_missing_stability(&self, hir_id: HirId, span: Span, name: &str) {\n         let stab = self.tcx.stability().local_stability(hir_id);\n+        let node_id = self.tcx.hir().hir_to_node_id(hir_id);\n         let is_error = !self.tcx.sess.opts.test &&\n                         stab.is_none() &&\n-                        self.access_levels.is_reachable(id);\n+                        self.access_levels.is_reachable(node_id);\n         if is_error {\n             self.tcx.sess.span_err(\n                 span,\n@@ -350,42 +344,42 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n             // optional. They inherit stability from their parents when unannotated.\n             hir::ItemKind::Impl(.., None, _, _) | hir::ItemKind::ForeignMod(..) => {}\n \n-            _ => self.check_missing_stability(i.id, i.span, i.node.descriptive_variant())\n+            _ => self.check_missing_stability(i.hir_id, i.span, i.node.descriptive_variant())\n         }\n \n         intravisit::walk_item(self, i)\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n-        self.check_missing_stability(ti.id, ti.span, \"item\");\n+        self.check_missing_stability(ti.hir_id, ti.span, \"item\");\n         intravisit::walk_trait_item(self, ti);\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n         let impl_def_id = self.tcx.hir().local_def_id(self.tcx.hir().get_parent(ii.id));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n-            self.check_missing_stability(ii.id, ii.span, \"item\");\n+            self.check_missing_stability(ii.hir_id, ii.span, \"item\");\n         }\n         intravisit::walk_impl_item(self, ii);\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: HirId) {\n-        self.check_missing_stability(var.node.data.id(), var.span, \"variant\");\n+        self.check_missing_stability(var.node.data.hir_id(), var.span, \"variant\");\n         intravisit::walk_variant(self, var, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx StructField) {\n-        self.check_missing_stability(s.id, s.span, \"field\");\n+        self.check_missing_stability(s.hir_id, s.span, \"field\");\n         intravisit::walk_struct_field(self, s);\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n-        self.check_missing_stability(i.id, i.span, i.node.descriptive_variant());\n+        self.check_missing_stability(i.hir_id, i.span, i.node.descriptive_variant());\n         intravisit::walk_foreign_item(self, i);\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n-        self.check_missing_stability(md.id, md.span, \"macro\");\n+        self.check_missing_stability(md.hir_id, md.span, \"macro\");\n     }\n }\n \n@@ -441,7 +435,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                 annotator.parent_stab = Some(stability);\n             }\n \n-            annotator.annotate(ast::CRATE_NODE_ID,\n+            annotator.annotate(hir::CRATE_HIR_ID,\n                                &krate.attrs,\n                                krate.span,\n                                AnnotationKind::Required,\n@@ -843,7 +837,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n             tcx,\n             access_levels,\n         };\n-        missing.check_missing_stability(ast::CRATE_NODE_ID, krate.span, \"crate\");\n+        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.span, \"crate\");\n         intravisit::walk_crate(&mut missing, krate);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }"}]}