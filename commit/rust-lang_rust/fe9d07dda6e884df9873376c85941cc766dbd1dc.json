{"sha": "fe9d07dda6e884df9873376c85941cc766dbd1dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOWQwN2RkYTZlODg0ZGY5ODczMzc2Yzg1OTQxY2M3NjZkYmQxZGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-14T22:27:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-15T23:20:31Z"}, "message": "rustc: \"as Trait\" can now be written \"as @Trait\".\n\nThere is also code for ~Trait and &Trait, but these are currently (incorrectly)\nsynonyms for \"as @Trait\" and \"as &Trait\".", "tree": {"sha": "426406223615438c3ea72db0fe7130dfb9ded1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/426406223615438c3ea72db0fe7130dfb9ded1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9d07dda6e884df9873376c85941cc766dbd1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9d07dda6e884df9873376c85941cc766dbd1dc", "html_url": "https://github.com/rust-lang/rust/commit/fe9d07dda6e884df9873376c85941cc766dbd1dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9d07dda6e884df9873376c85941cc766dbd1dc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0f616ceb17ac283717322674e35b7589a27232", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0f616ceb17ac283717322674e35b7589a27232", "html_url": "https://github.com/rust-lang/rust/commit/fd0f616ceb17ac283717322674e35b7589a27232"}], "stats": {"total": 208, "additions": 125, "deletions": 83}, "files": [{"sha": "c6dde67dd754e055c4daba198cdd5430b44050e7", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -264,7 +264,7 @@ fn check_variants_T<T: copy>(\n                     @as_str(|a|pprust::print_crate(\n                         codemap,\n                         // Assuming we're not generating any token_trees\n-                        @syntax::util::interner::mk::<@~str>(\n+                        syntax::util::interner::mk::<@~str>(\n                             |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n                         diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n@@ -427,7 +427,7 @@ fn parse_and_print(code: @~str) -> ~str {\n                pprust::print_crate(\n                    sess.cm,\n                    // Assuming there are no token_trees\n-                   @syntax::util::interner::mk::<@~str>(\n+                   syntax::util::interner::mk::<@~str>(\n                        |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n                    sess.span_diagnostic,\n                    crate,\n@@ -576,7 +576,7 @@ fn check_variants(files: ~[~str], cx: context) {\n                    as_str(|a| pprust::print_crate(\n                        sess.cm,\n                        // Assuming no token_trees\n-                       @syntax::util::interner::mk::<@~str>(\n+                       syntax::util::interner::mk::<@~str>(\n                             |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n                        sess.span_diagnostic,\n                        crate,"}, {"sha": "77ba941015b548a423b6a1394f966e2a0d186b17", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -284,7 +284,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                     nts, next_eis.len()});\n             } else if (bb_eis.len() == 0u && next_eis.len() == 0u) {\n                 return failure(sp, ~\"No rules expected the token \"\n-                            + to_str(*rdr.interner(), tok));\n+                            + to_str(rdr.interner(), tok));\n             } else if (next_eis.len() > 0u) {\n                 /* Now process the next token */\n                 while(next_eis.len() > 0u) {\n@@ -334,7 +334,7 @@ fn parse_nt(p: parser, name: ~str) -> nonterminal {\n       ~\"ident\" => match copy p.token {\n         token::IDENT(sn,b) => { p.bump(); token::nt_ident(sn,b) }\n         _ => p.fatal(~\"expected ident, found \"\n-                     + token::to_str(*p.reader.interner(), copy p.token))\n+                     + token::to_str(p.reader.interner(), copy p.token))\n       },\n       ~\"path\" => token::nt_path(p.parse_path_with_tps(false)),\n       ~\"tt\" => {"}, {"sha": "8acf0e8ec6d2f765e3f173ce0278a94a9cebee75", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -25,7 +25,7 @@ type tt_frame = @{\n \n type tt_reader = @{\n     sp_diag: span_handler,\n-    interner: @interner<@~str>,\n+    interner: interner<@~str>,\n     mut cur: tt_frame,\n     /* for MBE-style macro transcription */\n     interpolations: std::map::hashmap<ident, @named_match>,\n@@ -39,7 +39,7 @@ type tt_reader = @{\n /** This can do Macro-By-Example transcription. On the other hand, if\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n-fn new_tt_reader(sp_diag: span_handler, itr: @interner<@~str>,\n+fn new_tt_reader(sp_diag: span_handler, itr: interner<@~str>,\n                  interp: option<std::map::hashmap<ident,@named_match>>,\n                  src: ~[ast::token_tree])\n     -> tt_reader {\n@@ -237,4 +237,4 @@ fn tt_next_token(&&r: tt_reader) -> {tok: token, sp: span} {\n         }\n     }\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "deaaaf69b1c0a7eb0d04a39742d707f134bd70b7", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -24,7 +24,7 @@ type parse_sess = @{\n     cm: codemap::codemap,\n     mut next_id: node_id,\n     span_diagnostic: span_handler,\n-    interner: @interner::interner<@~str>,\n+    interner: interner::interner<@~str>,\n     // these two must be kept up to date\n     mut chpos: uint,\n     mut byte_pos: uint\n@@ -35,7 +35,7 @@ fn new_parse_sess(demitter: option<emitter>) -> parse_sess {\n     return @{cm: cm,\n           mut next_id: 1,\n           span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n-          interner: @interner::mk::<@~str>(|x| str::hash(*x),\n+          interner: interner::mk::<@~str>(|x| str::hash(*x),\n                                           |x,y| str::eq(*x, *y)),\n           mut chpos: 0u, mut byte_pos: 0u};\n }\n@@ -45,7 +45,7 @@ fn new_parse_sess_special_handler(sh: span_handler, cm: codemap::codemap)\n     return @{cm: cm,\n           mut next_id: 1,\n           span_diagnostic: sh,\n-          interner: @interner::mk::<@~str>(|x| str::hash(*x),\n+          interner: interner::mk::<@~str>(|x| str::hash(*x),\n                                           |x,y| str::eq(*x, *y)),\n           mut chpos: 0u, mut byte_pos: 0u};\n }"}, {"sha": "701dd9301cab8644e74a0413b6ac26d7cd9e76cc", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -276,7 +276,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n                                 srdr: io::Reader) ->\n    {cmnts: ~[cmnt], lits: ~[lit]} {\n     let src = @str::from_bytes(srdr.read_whole_stream());\n-    let itr = @interner::mk::<@~str>(\n+    let itr = interner::mk::<@~str>(\n         |x| str::hash(*x),\n         |x,y| str::eq(*x, *y)\n     );\n@@ -311,7 +311,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n             vec::push(literals, {lit: s, pos: sp.lo});\n             log(debug, ~\"tok lit: \" + s);\n         } else {\n-            log(debug, ~\"tok: \" + token::to_str(*rdr.interner, tok));\n+            log(debug, ~\"tok: \" + token::to_str(rdr.interner, tok));\n         }\n         first_read = false;\n     }"}, {"sha": "59dad16dc442982b63e908d736512e331070744c", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -19,7 +19,7 @@ fn seq_sep_none() -> seq_sep {\n }\n \n fn token_to_str(reader: reader, ++token: token::token) -> ~str {\n-    token::to_str(*reader.interner(), token)\n+    token::to_str(reader.interner(), token)\n }\n \n trait parser_common {"}, {"sha": "aaafe958efb9ffc51bf843772c99d0b746301ed9", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -14,7 +14,7 @@ trait reader {\n     fn next_token() -> {tok: token::token, sp: span};\n     fn fatal(~str) -> !;\n     fn span_diag() -> span_handler;\n-    pure fn interner() -> @interner<@~str>;\n+    pure fn interner() -> interner<@~str>;\n     fn peek() -> {tok: token::token, sp: span};\n     fn dup() -> reader;\n }\n@@ -27,15 +27,15 @@ type string_reader = @{\n     mut curr: char,\n     mut chpos: uint,\n     filemap: codemap::filemap,\n-    interner: @interner<@~str>,\n+    interner: interner<@~str>,\n     /* cached: */\n     mut peek_tok: token::token,\n     mut peek_span: span\n };\n \n fn new_string_reader(span_diagnostic: span_handler,\n                      filemap: codemap::filemap,\n-                     itr: @interner<@~str>) -> string_reader {\n+                     itr: interner<@~str>) -> string_reader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap, itr);\n     string_advance_token(r); /* fill in peek_* */\n     return r;\n@@ -44,7 +44,7 @@ fn new_string_reader(span_diagnostic: span_handler,\n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n fn new_low_level_string_reader(span_diagnostic: span_handler,\n                                filemap: codemap::filemap,\n-                               itr: @interner<@~str>)\n+                               itr: interner<@~str>)\n     -> string_reader {\n     let r = @{span_diagnostic: span_diagnostic, src: filemap.src,\n               mut col: 0u, mut pos: 0u, mut curr: -1 as char,\n@@ -79,7 +79,7 @@ impl string_reader: reader {\n         self.span_diagnostic.span_fatal(copy self.peek_span, m)\n     }\n     fn span_diag() -> span_handler { self.span_diagnostic }\n-    pure fn interner() -> @interner<@~str> { self.interner }\n+    pure fn interner() -> interner<@~str> { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         {tok: self.peek_tok, sp: self.peek_span}\n     }\n@@ -101,7 +101,7 @@ impl tt_reader: reader {\n         self.sp_diag.span_fatal(copy self.cur_span, m);\n     }\n     fn span_diag() -> span_handler { self.sp_diag }\n-    pure fn interner() -> @interner<@~str> { self.interner }\n+    pure fn interner() -> interner<@~str> { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         { tok: self.cur_tok, sp: self.cur_span }\n     }\n@@ -219,7 +219,7 @@ fn consume_any_line_comment(rdr: string_reader)\n                     bump(rdr);\n                 }\n                 return some({\n-                    tok: token::DOC_COMMENT((*rdr.interner).intern(@acc)),\n+                    tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n                     sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n                 });\n             } else {\n@@ -264,7 +264,7 @@ fn consume_block_comment(rdr: string_reader)\n             bump(rdr);\n             bump(rdr);\n             return some({\n-                tok: token::DOC_COMMENT((*rdr.interner).intern(@acc)),\n+                tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n                 sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n             });\n         }\n@@ -398,12 +398,12 @@ fn scan_number(c: char, rdr: string_reader) -> token::token {\n         if c == '3' && n == '2' {\n             bump(rdr);\n             bump(rdr);\n-            return token::LIT_FLOAT((*rdr.interner).intern(@num_str),\n+            return token::LIT_FLOAT(rdr.interner.intern(@num_str),\n                                  ast::ty_f32);\n         } else if c == '6' && n == '4' {\n             bump(rdr);\n             bump(rdr);\n-            return token::LIT_FLOAT((*rdr.interner).intern(@num_str),\n+            return token::LIT_FLOAT(rdr.interner.intern(@num_str),\n                                  ast::ty_f64);\n             /* FIXME (#2252): if this is out of range for either a\n             32-bit or 64-bit float, it won't be noticed till the\n@@ -413,7 +413,7 @@ fn scan_number(c: char, rdr: string_reader) -> token::token {\n         }\n     }\n     if is_float {\n-        return token::LIT_FLOAT((*rdr.interner).intern(@num_str), ast::ty_f);\n+        return token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f);\n     } else {\n         if str::len(num_str) == 0u {\n             rdr.fatal(~\"no valid digits found for number\");\n@@ -461,7 +461,7 @@ fn next_token_inner(rdr: string_reader) -> token::token {\n         let is_mod_name = c == ':' && nextch(rdr) == ':';\n \n         // FIXME: perform NFKC normalization here. (Issue #2253)\n-        return token::IDENT((*rdr.interner).intern(@accum_str), is_mod_name);\n+        return token::IDENT(rdr.interner.intern(@accum_str), is_mod_name);\n     }\n     if is_dec_digit(c) {\n         return scan_number(c, rdr);\n@@ -630,7 +630,7 @@ fn next_token_inner(rdr: string_reader) -> token::token {\n             }\n         }\n         bump(rdr);\n-        return token::LIT_STR((*rdr.interner).intern(@accum_str));\n+        return token::LIT_STR(rdr.interner.intern(@accum_str));\n       }\n       '-' => {\n         if nextch(rdr) == '>' {"}, {"sha": "642cdaa8fab8d743a5c4fc297c14b6de721c2dff", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -263,7 +263,7 @@ class parser {\n         self.sess.span_diagnostic.span_warn(copy self.span, m)\n     }\n     pure fn get_str(i: token::str_num) -> @~str {\n-        (*self.reader.interner()).get(i)\n+        self.reader.interner().get(i)\n     }\n     fn get_id() -> node_id { next_node_id(self.sess) }\n "}, {"sha": "39bc18529c953d9470d51c94f1e964c3e8f7c43e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -11,7 +11,7 @@ import dvec::{DVec, dvec};\n import parse::classify::*;\n import util::interner;\n \n-type ident_interner = @interner::interner<@~str>;\n+type ident_interner = interner::interner<@~str>;\n \n // The ps is stored here to prevent recursive type.\n enum ann_node {\n@@ -30,7 +30,7 @@ fn no_ann() -> pp_ann {\n type ps =\n     @{s: pp::printer,\n       cm: option<codemap>,\n-      intr: @interner::interner<@~str>,\n+      intr: interner::interner<@~str>,\n       comments: option<~[comments::cmnt]>,\n       literals: option<~[comments::lit]>,\n       mut cur_cmnt: uint,\n@@ -51,8 +51,8 @@ fn end(s: ps) {\n fn rust_printer(writer: io::Writer) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n              cm: none::<codemap>,\n-             intr: @interner::mk::<@~str>(|x| str::hash(*x),\n-                                          |x,y| str::eq(*x, *y)),\n+             intr: interner::mk::<@~str>(|x| str::hash(*x),\n+                                         |x,y| str::eq(*x, *y)),\n              comments: none::<~[comments::cmnt]>,\n              literals: none::<~[comments::lit]>,\n              mut cur_cmnt: 0u,\n@@ -81,7 +81,7 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: codemap, intr: @interner::interner<@~str>,\n+fn print_crate(cm: codemap, intr: interner::interner<@~str>,\n                span_diagnostic: diagnostic::span_handler,\n                crate: @ast::crate, filename: ~str, in: io::Reader,\n                out: io::Writer, ann: pp_ann, is_expanded: bool) {\n@@ -690,14 +690,14 @@ fn print_tt(s: ps, tt: ast::token_tree) {\n           }\n           _ => { s.s.token_tree_last_was_ident = false; }\n         }\n-        word(s.s, parse::token::to_str(*s.intr, tk));\n+        word(s.s, parse::token::to_str(s.intr, tk));\n       }\n       ast::tt_seq(_, tts, sep, zerok) => {\n         word(s.s, ~\"$(\");\n         for tts.each() |tt_elt| { print_tt(s, tt_elt); }\n         word(s.s, ~\")\");\n         match sep {\n-          some(tk) => word(s.s, parse::token::to_str(*s.intr, tk)),\n+          some(tk) => word(s.s, parse::token::to_str(s.intr, tk)),\n           none => ()\n         }\n         word(s.s, if zerok { ~\"*\" } else { ~\"+\" });"}, {"sha": "90be808b229f9974f3754b4b869fd04e506253c9", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -212,8 +212,9 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         assert next(st) == '[';\n         let def = parse_def(st, conv);\n         let substs = parse_substs(st, conv);\n+        let vstore = parse_vstore(st);\n         assert next(st) == ']';\n-        return ty::mk_trait(st.tcx, def, substs);\n+        return ty::mk_trait(st.tcx, def, substs, vstore);\n       }\n       'p' => {\n         let did = parse_def(st, conv);"}, {"sha": "5a24b9af8d9959edb0138e715c8885d6450c4c37", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -227,11 +227,12 @@ fn enc_sty(w: io::Writer, cx: @ctxt, st: ty::sty) {\n         enc_substs(w, cx, substs);\n         w.write_char(']');\n       }\n-      ty::ty_trait(def, substs) => {\n+      ty::ty_trait(def, substs, vstore) => {\n         w.write_str(&\"x[\");\n         w.write_str(cx.ds(def));\n         w.write_char('|');\n         enc_substs(w, cx, substs);\n+        enc_vstore(w, cx, vstore);\n         w.write_char(']');\n       }\n       ty::ty_tup(ts) => {"}, {"sha": "e960e21c7525b3c8a4326f4113bd638c9083fbbd", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -498,7 +498,7 @@ fn check_cast_for_escaping_regions(\n     // worries.\n     let target_ty = ty::expr_ty(cx.tcx, target);\n     let target_substs = match ty::get(target_ty).struct {\n-      ty::ty_trait(_, substs) => {substs}\n+      ty::ty_trait(_, substs, _) => {substs}\n       _ => { return; /* not a cast to a trait */ }\n     };\n "}, {"sha": "83bdb941f4636e66e8592d7494940eaaa9a8d225", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -668,7 +668,7 @@ fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_fn(_) => {\n         closure::make_fn_glue(bcx, v, t, take_ty)\n       }\n-      ty::ty_trait(_, _) => {\n+      ty::ty_trait(_, _, _) => {\n         let llbox = Load(bcx, GEPi(bcx, v, ~[0u, 1u]));\n         incr_refcnt_of_boxed(bcx, llbox);\n         bcx\n@@ -819,7 +819,7 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_fn(_) => {\n         closure::make_fn_glue(bcx, v0, t, drop_ty)\n       }\n-      ty::ty_trait(_, _) => {\n+      ty::ty_trait(_, _, _) => {\n         let llbox = Load(bcx, GEPi(bcx, v0, ~[0u, 1u]));\n         decr_refcnt_maybe_free(bcx, llbox, ty::mk_opaque_box(ccx.tcx))\n       }\n@@ -2041,7 +2041,7 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> option<ty::t> {\n                              output: ty::mk_nil(tcx),\n                              ret_style: ast::return_val}))\n       }\n-      ty::ty_trait(_, _) => {\n+      ty::ty_trait(_, _, _) => {\n         some(ty::mk_fn(tcx, {purity: ast::impure_fn,\n                              proto: ty::proto_vstore(ty::vstore_box),\n                              bounds: @~[],\n@@ -2819,7 +2819,7 @@ fn trans_cast(cx: block, e: @ast::expr, id: ast::node_id,\n     let ccx = cx.ccx();\n     let t_out = node_id_type(cx, id);\n     match ty::get(t_out).struct {\n-      ty::ty_trait(_, _) => return impl::trans_cast(cx, e, id, dest),\n+      ty::ty_trait(_, _, _) => return impl::trans_cast(cx, e, id, dest),\n       _ => ()\n     }\n     let e_res = trans_temp_expr(cx, e);"}, {"sha": "5829041a54a4c887e809918c3d3ac9f3cef259d2", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -268,7 +268,7 @@ impl reflector {\n           }\n \n           // Miscallaneous extra types\n-          ty::ty_trait(_, _) => self.leaf(~\"trait\"),\n+          ty::ty_trait(_, _, _) => self.leaf(~\"trait\"),\n           ty::ty_var(_) => self.leaf(~\"var\"),\n           ty::ty_var_integral(_) => self.leaf(~\"var_integral\"),\n           ty::ty_param(p) => self.visit(~\"param\", ~[self.c_uint(p.idx)]),"}, {"sha": "5209b6f61f00957d61b9f47974837c124011f068", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -323,7 +323,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n         add_substr(s, sub);\n         s\n       }\n-      ty::ty_trait(_, _) => ~[shape_box_fn],\n+      ty::ty_trait(_, _, _) => ~[shape_box_fn],\n       ty::ty_class(did, ref substs) => {\n         // same as records, unless there's a dtor\n         let tps = substs.tps;"}, {"sha": "f48fa78268397b55dc943cc9468ac809a531eb2f", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -147,7 +147,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n         T_struct(tys)\n       }\n       ty::ty_fn(_) => T_fn_pair(cx, type_of_fn_from_ty(cx, t)),\n-      ty::ty_trait(_, _) => T_opaque_trait(cx),\n+      ty::ty_trait(_, _, _) => T_opaque_trait(cx),\n       ty::ty_type => T_ptr(cx.tydesc_type),\n       ty::ty_tup(elts) => {\n         let mut tys = ~[];"}, {"sha": "880c6c546f22103900031c0d89ff85358ad17362", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -134,7 +134,7 @@ fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n                  right tydesc into the result)\n                  */\n               ty::ty_fn(_) | ty::ty_ptr(_) | ty::ty_rptr(_, _)\n-               | ty::ty_trait(_, _) => false,\n+               | ty::ty_trait(_, _, _) => false,\n               ty::ty_enum(did, substs) => {\n                 if option::is_none(list::find(enums_seen, |id| id == did)) {\n                     let seen = @cons(did, enums_seen);"}, {"sha": "72cfbca1af034590e4a4f5bae6341faddd068ca3", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -172,7 +172,7 @@ export terr_regions_does_not_outlive, terr_mutability, terr_purity_mismatch;\n export terr_regions_not_same, terr_regions_no_overlap;\n export terr_proto_mismatch;\n export terr_ret_style_mismatch;\n-export terr_fn;\n+export terr_fn, terr_trait;\n export purity_to_str;\n export param_tys_in_type;\n export eval_repeat_count;\n@@ -434,7 +434,7 @@ enum sty {\n     ty_rptr(region, mt),\n     ty_rec(~[field]),\n     ty_fn(fn_ty),\n-    ty_trait(def_id, substs),\n+    ty_trait(def_id, substs, vstore),\n     ty_class(def_id, substs),\n     ty_tup(~[t]),\n \n@@ -452,7 +452,7 @@ enum sty {\n }\n \n enum terr_vstore_kind {\n-    terr_vec, terr_str, terr_fn\n+    terr_vec, terr_str, terr_fn, terr_trait\n }\n \n // Data structures used in type unification\n@@ -670,7 +670,7 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: option<ast::def_id>) -> t {\n       ty_var(_) | ty_var_integral(_) => flags |= needs_infer as uint,\n       ty_self => flags |= has_self as uint,\n       ty_enum(_, ref substs) | ty_class(_, ref substs)\n-      | ty_trait(_, ref substs) => {\n+      | ty_trait(_, ref substs, _) => {\n         flags |= sflags(substs);\n       }\n       ty_box(m) | ty_uniq(m) | ty_evec(m, _) |\n@@ -787,9 +787,10 @@ fn mk_tup(cx: ctxt, ts: ~[t]) -> t { mk_t(cx, ty_tup(ts)) }\n // take a copy because we want to own the various vectors inside\n fn mk_fn(cx: ctxt, +fty: fn_ty) -> t { mk_t(cx, ty_fn(fty)) }\n \n-fn mk_trait(cx: ctxt, did: ast::def_id, +substs: substs) -> t {\n+fn mk_trait(cx: ctxt, did: ast::def_id, +substs: substs, vstore: vstore)\n+         -> t {\n     // take a copy of substs so that we own the vectors inside\n-    mk_t(cx, ty_trait(did, substs))\n+    mk_t(cx, ty_trait(did, substs, vstore))\n }\n \n fn mk_class(cx: ctxt, class_id: ast::def_id, +substs: substs) -> t {\n@@ -862,7 +863,7 @@ fn maybe_walk_ty(ty: t, f: fn(t) -> bool) {\n         maybe_walk_ty(tm.ty, f);\n       }\n       ty_enum(_, substs) | ty_class(_, substs) |\n-      ty_trait(_, substs) => {\n+      ty_trait(_, substs, _) => {\n         for substs.tps.each |subty| { maybe_walk_ty(subty, f); }\n       }\n       ty_rec(fields) => {\n@@ -907,8 +908,8 @@ fn fold_sty(sty: &sty, fldop: fn(t) -> t) -> sty {\n       ty_enum(tid, ref substs) => {\n         ty_enum(tid, fold_substs(substs, fldop))\n       }\n-      ty_trait(did, ref substs) => {\n-        ty_trait(did, fold_substs(substs, fldop))\n+      ty_trait(did, ref substs, vst) => {\n+        ty_trait(did, fold_substs(substs, fldop), vst)\n       }\n       ty_rec(fields) => {\n         let new_fields = do vec::map(fields) |fl| {\n@@ -1005,8 +1006,8 @@ fn fold_regions_and_ty(\n       ty_class(def_id, ref substs) => {\n         ty::mk_class(cx, def_id, fold_substs(substs, fldr, fldt))\n       }\n-      ty_trait(def_id, ref substs) => {\n-        ty::mk_trait(cx, def_id, fold_substs(substs, fldr, fldt))\n+      ty_trait(def_id, ref substs, vst) => {\n+        ty::mk_trait(cx, def_id, fold_substs(substs, fldr, fldt), vst)\n       }\n       ref sty @ ty_fn(f) => {\n         let new_proto;\n@@ -1664,7 +1665,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       }\n \n       // Trait instances are (for now) like shared boxes, basically\n-      ty_trait(_, _) => kind_safe_for_default_mode() | kind_owned(),\n+      ty_trait(_, _, _) => kind_safe_for_default_mode() | kind_owned(),\n \n       // Region pointers are copyable but NOT owned nor sendable\n       ty_rptr(_, _) => kind_safe_for_default_mode(),\n@@ -1911,7 +1912,7 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n             }\n           }\n \n-          ty_trait(_, _) => {\n+          ty_trait(_, _, _) => {\n             false\n           }\n \n@@ -2053,7 +2054,7 @@ fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       ty_box(_) | ty_uniq(_) | ty_fn(_) |\n       ty_estr(vstore_uniq) | ty_estr(vstore_box) |\n       ty_evec(_, vstore_uniq) | ty_evec(_, vstore_box) |\n-      ty_trait(_, _) | ty_rptr(_,_) | ty_opaque_box => result = false,\n+      ty_trait(_, _, _) | ty_rptr(_,_) | ty_opaque_box => result = false,\n       // Structural types\n       ty_enum(did, ref substs) => {\n         let variants = enum_variants(cx, did);\n@@ -2273,7 +2274,7 @@ pure fn hash_type_structure(st: &sty) -> uint {\n       ty_bot => 34u,\n       ty_ptr(mt) => hash_subty(35u, mt.ty),\n       ty_uniq(mt) => hash_subty(37u, mt.ty),\n-      ty_trait(did, ref substs) => {\n+      ty_trait(did, ref substs, _) => {\n         let mut h = hash_def(40u, did);\n         hash_substs(h, substs)\n       }\n@@ -2590,7 +2591,7 @@ fn ty_sort_str(cx: ctxt, t: t) -> ~str {\n       ty_rptr(_, _) => ~\"&-ptr\",\n       ty_rec(_) => ~\"record\",\n       ty_fn(_) => ~\"fn\",\n-      ty_trait(id, _) => fmt!{\"trait %s\", item_path_str(cx, id)},\n+      ty_trait(id, _, _) => fmt!{\"trait %s\", item_path_str(cx, id)},\n       ty_class(id, _) => fmt!{\"class %s\", item_path_str(cx, id)},\n       ty_tup(_) => ~\"tuple\",\n       ty_var(_) => ~\"variable\",\n@@ -2605,7 +2606,8 @@ fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n         match k {\n             terr_vec => ~\"[]\",\n             terr_str => ~\"str\",\n-            terr_fn => ~\"fn\"\n+            terr_fn => ~\"fn\",\n+            terr_trait => ~\"trait\"\n         }\n     }\n \n@@ -2769,7 +2771,7 @@ fn impl_traits(cx: ctxt, id: ast::def_id) -> ~[t] {\n \n fn ty_to_def_id(ty: t) -> option<ast::def_id> {\n     match get(ty).struct {\n-      ty_trait(id, _) | ty_class(id, _) | ty_enum(id, _) => some(id),\n+      ty_trait(id, _, _) | ty_class(id, _) | ty_enum(id, _) => some(id),\n       _ => none\n     }\n }"}, {"sha": "64d4cdbd97991f968246015cc1b950560fb211e1", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -162,7 +162,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n \n     // Handle @, ~, and & being able to mean estrs and evecs.\n     // If a_seq_ty is a str or a vec, make it an estr/evec.\n-    // Also handle function sigils.\n+    // Also handle function sigils and first-class trait types.\n     fn mk_maybe_vstore<AC: ast_conv, RS: region_scope copy owned>(\n         self: AC, rscope: RS, a_seq_ty: ast::mt, vst: ty::vstore,\n         span: span, constr: fn(ty::mt) -> ty::t) -> ty::t {\n@@ -181,6 +181,23 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n                 check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n                 return ty::mk_estr(tcx, vst);\n               }\n+              some(ast::def_ty(type_def_id)) => {\n+                let result = ast_path_to_substs_and_ty(self, rscope,\n+                                                       type_def_id, path);\n+                match ty::get(result.ty).struct {\n+                    ty::ty_trait(trait_def_id, substs, _) => {\n+                        if vst != ty::vstore_box {\n+                            tcx.sess.span_unimpl(path.span,\n+                                                 ~\"`~trait` and `&trait` are \\\n+                                                   unimplemented; use \\\n+                                                   `@trait` instead for now\");\n+                        }\n+                        return ty::mk_trait(tcx, trait_def_id, substs, vst);\n+                    }\n+                    _ =>\n+                        {}\n+                }\n+              }\n               _ => ()\n             }\n           }"}, {"sha": "3bb0e566dc62879e7f08d139782c26573d083092", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -126,7 +126,7 @@ class lookup {\n                 self.add_candidates_from_param(p.idx, p.def_id);\n               }\n \n-              ty::ty_trait(did, substs) => {\n+              ty::ty_trait(did, substs, _) => {\n                 self.add_candidates_from_trait(did, substs);\n               }\n               ty::ty_class(did, substs) => {\n@@ -238,7 +238,7 @@ class lookup {\n               }\n               ty::bound_trait(bound_t) => {\n                 match check ty::get(bound_t).struct {\n-                  ty::ty_trait(i, substs) => (i, substs)\n+                  ty::ty_trait(i, substs, _) => (i, substs)\n                 }\n               }\n             };"}, {"sha": "c4127eb2e48b55b3ce4f91edf0dea665e1bc1e3f", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -158,7 +158,7 @@ fn visit_expr(e: @ast::expr, &&rcx: @rcx, v: rvt) {\n           result::err(_) => { return; /* typeck will fail anyhow */ }\n           result::ok(target_ty) => {\n             match ty::get(target_ty).struct {\n-              ty::ty_trait(_, substs) => {\n+              ty::ty_trait(_, substs, _) => {\n                 let trait_region = match substs.self_r {\n                   some(r) => {r}\n                   none => {ty::re_static}"}, {"sha": "a0218f3e9b5a0235dbea100630796e9c8c2bd01e", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -37,10 +37,10 @@ fn fixup_substs(fcx: @fn_ctxt, sp: span,\n                 id: ast::def_id, substs: ty::substs) -> ty::substs {\n     let tcx = fcx.ccx.tcx;\n     // use a dummy type just to package up the substs that need fixing up\n-    let t = ty::mk_trait(tcx, id, substs);\n+    let t = ty::mk_trait(tcx, id, substs, ty::vstore_slice(ty::re_static));\n     let t_f = fixup_ty(fcx, sp, t);\n     match check ty::get(t_f).struct {\n-      ty::ty_trait(_, substs_f) => substs_f,\n+      ty::ty_trait(_, substs_f, _) => substs_f,\n     }\n }\n \n@@ -63,7 +63,7 @@ fn lookup_vtable(fcx: @fn_ctxt, sp: span, ty: ty::t, trait_ty: ty::t,\n \n     let tcx = fcx.ccx.tcx;\n     let (trait_id, trait_substs) = match check ty::get(trait_ty).struct {\n-      ty::ty_trait(did, substs) => (did, substs)\n+      ty::ty_trait(did, substs, _) => (did, substs)\n     };\n     let ty = fixup_ty(fcx, sp, ty);\n     match ty::get(ty).struct {\n@@ -77,7 +77,7 @@ fn lookup_vtable(fcx: @fn_ctxt, sp: span, ty: ty::t, trait_ty: ty::t,\n               }\n               ty::bound_trait(ity) => {\n                 match check ty::get(ity).struct {\n-                  ty::ty_trait(idid, substs) => {\n+                  ty::ty_trait(idid, substs, _) => {\n                     if trait_id == idid {\n                         debug!{\"(checking vtable) @0 relating ty to trait ty\n                                 with did %?\", idid};\n@@ -92,7 +92,7 @@ fn lookup_vtable(fcx: @fn_ctxt, sp: span, ty: ty::t, trait_ty: ty::t,\n         }\n       }\n \n-      ty::ty_trait(did, substs) if trait_id == did => {\n+      ty::ty_trait(did, substs, _) if trait_id == did => {\n         debug!{\"(checking vtable) @1 relating ty to trait ty with did %?\",\n                did};\n \n@@ -139,7 +139,7 @@ fn lookup_vtable(fcx: @fn_ctxt, sp: span, ty: ty::t, trait_ty: ty::t,\n                     for vec::each(ty::impl_traits(tcx, im.did)) |of_ty| {\n                         // it must have the same id as the expected one\n                         match ty::get(of_ty).struct {\n-                          ty::ty_trait(id, _) if id != trait_id => again,\n+                          ty::ty_trait(id, _, _) if id != trait_id => again,\n                           _ => { /* ok */ }\n                         }\n \n@@ -219,7 +219,7 @@ fn connect_trait_tps(fcx: @fn_ctxt, sp: span, impl_tys: ~[ty::t],\n     debug!{\"(connect trait tps) trait type is %?, impl did is %?\",\n            ty::get(trait_ty).struct, impl_did};\n     match check ty::get(trait_ty).struct {\n-      ty::ty_trait(_, substs) => {\n+      ty::ty_trait(_, substs, _) => {\n         vec::iter2(substs.tps, trait_tys,\n                    |a, b| demand::suptype(fcx, sp, a, b));\n       }"}, {"sha": "24e80b137440b7badb7bb1c2a05bedd8df19c07f", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -96,7 +96,7 @@ fn get_base_type_def_id(inference_context: infer_ctxt,\n             match get(base_type).struct {\n                 ty_enum(def_id, _) |\n                 ty_class(def_id, _) |\n-                ty_trait(def_id, _) => {\n+                ty_trait(def_id, _, _) => {\n                     return some(def_id);\n                 }\n                 _ => {\n@@ -735,7 +735,7 @@ class CoherenceChecker {\n             // Record all the trait methods.\n             for associated_traits.each |trait_type| {\n                 match get(trait_type).struct {\n-                    ty_trait(trait_id, _) => {\n+                    ty_trait(trait_id, _, _) => {\n                         self.add_trait_method(trait_id, implementation);\n                     }\n                     _ => {"}, {"sha": "0394813746dc8c8edd4ea265260d38305c09f727", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -40,7 +40,8 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n \n                     match intrinsic_item.node {\n                       ast::item_trait(*) => {\n-                        let ty = ty::mk_trait(ccx.tcx, def_id, substs);\n+                        let ty = ty::mk_trait(ccx.tcx, def_id, substs,\n+                                              ty::vstore_box);\n                         ccx.tcx.intrinsic_defs.insert\n                             (intrinsic_item.ident, (def_id, ty));\n                       }\n@@ -648,7 +649,7 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n       }\n       ast::item_trait(tps, _, ms) => {\n         let {bounds, substs} = mk_substs(ccx, tps, rp);\n-        let t = ty::mk_trait(tcx, local_def(it.id), substs);\n+        let t = ty::mk_trait(tcx, local_def(it.id), substs, ty::vstore_box);\n         let tpt = {bounds: bounds, rp: rp, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         return tpt;"}, {"sha": "d2f799ff4f780df6ce7e6cb46f4f1a2a4bc0dbb0", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -1902,10 +1902,14 @@ fn super_tys<C:combine>(\n         }\n       }\n \n-      (ty::ty_trait(a_id, ref a_substs), ty::ty_trait(b_id, ref b_substs))\n+      (ty::ty_trait(a_id, ref a_substs, a_vstore),\n+       ty::ty_trait(b_id, ref b_substs, b_vstore))\n       if a_id == b_id => {\n         do self.substs(a_substs, b_substs).chain |substs| {\n-            ok(ty::mk_trait(tcx, a_id, substs))\n+            do self.vstores(ty::terr_trait, a_vstore,\n+                            b_vstore).chain |vstores| {\n+                ok(ty::mk_trait(tcx, a_id, substs, vstores))\n+            }\n         }\n       }\n "}, {"sha": "a347fdddb7927f70152ae8588bb90cad9c26cdaf", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -314,10 +314,11 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         let base = ast_map::path_to_str(path);\n         parameterized(cx, base, substs.self_r, substs.tps)\n       }\n-      ty_trait(did, substs) => {\n+      ty_trait(did, substs, vs) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path);\n-        parameterized(cx, base, substs.self_r, substs.tps)\n+        let result = parameterized(cx, base, substs.self_r, substs.tps);\n+        vstore_ty_to_str(cx, result, vs)\n       }\n       ty_evec(mt, vs) => {\n         vstore_ty_to_str(cx, fmt!{\"[%s]\", mt_to_str(cx, mt)}, vs)"}, {"sha": "8e94d222746de47ccdc2fded09a5dd830f8202c4", "filename": "src/test/run-pass/boxed-trait-with-vstore.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9d07dda6e884df9873376c85941cc766dbd1dc/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs?ref=fe9d07dda6e884df9873376c85941cc766dbd1dc", "patch": "@@ -0,0 +1,15 @@\n+trait Foo {\n+    fn foo() {}\n+}\n+\n+impl int : Foo {\n+    fn foo() {\n+        io::println(\"Hello world!\");\n+    }\n+}\n+\n+fn main() {\n+    let x = 3 as @Foo;\n+    x.foo();\n+}\n+"}]}