{"sha": "c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZWIxOWViZjlkNDJjYWRhOGNiNTMyYzZiM2NiMGUxMWE1MzFiOTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-03T11:52:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-03T11:52:15Z"}, "message": "Merge #9104\n\n9104: Implement `#[rustc_skip_array_during_method_dispatch]` r=flodiebold a=jonas-schievink\n\nhaxx run the world\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/8552\r\nPart of https://github.com/rust-analyzer/rust-analyzer/issues/9056\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "f279c204a75f50be084f27731071fe5cd79e4af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f279c204a75f50be084f27731071fe5cd79e4af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJguMJvCRBK7hj4Ov3rIwAAK34IACylz7spdydihLV29fXoimz0\nphauFoit4I8SBsP5abZofbpFvUgFWrxEG/ZfJqE+yqsjwzcbdt1QaHOj/ZBIu3yF\nwwLeLSDtRJ5MfPN5kVMaqyjgaqICohJFepJkqzGQfNs9yIUiq5C4APUo8eLNAIJz\nXOD7pFTMKzWkMwzba2P3nxvJXMNiU4KZ4r2OhumV5E3SSw8Y3D2fVdZrtEKXBtbY\nXiu5PbvLTj7Hs5etnGQyIwiXWf4d1VAyZD7qKWmMhGWzXmXAvsnF96b8CMxRYiOX\nM6+blA1GNRj0i/p67CeR6VuVkaD39ki7Le/hy02OvgtQlW2o1MzX57VH9MR+vnQ=\n=P092\n-----END PGP SIGNATURE-----\n", "payload": "tree f279c204a75f50be084f27731071fe5cd79e4af1\nparent 50936397cc4e34712b18cd337facef527fa20b48\nparent 70e19fd1cb442587abb61258af341b6e530032d4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622721135 +0000\ncommitter GitHub <noreply@github.com> 1622721135 +0000\n\nMerge #9104\n\n9104: Implement `#[rustc_skip_array_during_method_dispatch]` r=flodiebold a=jonas-schievink\n\nhaxx run the world\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/8552\r\nPart of https://github.com/rust-analyzer/rust-analyzer/issues/9056\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "html_url": "https://github.com/rust-lang/rust/commit/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50936397cc4e34712b18cd337facef527fa20b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/50936397cc4e34712b18cd337facef527fa20b48", "html_url": "https://github.com/rust-lang/rust/commit/50936397cc4e34712b18cd337facef527fa20b48"}, {"sha": "70e19fd1cb442587abb61258af341b6e530032d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e19fd1cb442587abb61258af341b6e530032d4", "html_url": "https://github.com/rust-lang/rust/commit/70e19fd1cb442587abb61258af341b6e530032d4"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "52cb7777bbeaf79628b8e65d43dd0b8c8331bcb4", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "patch": "@@ -143,6 +143,10 @@ pub struct TraitData {\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n     pub visibility: RawVisibility,\n+    /// Whether the trait has `#[rust_skip_array_during_method_dispatch]`. `hir_ty` will ignore\n+    /// method calls to this trait's methods when the receiver is an array and the crate edition is\n+    /// 2015 or 2018.\n+    pub skip_array_during_method_dispatch: bool,\n }\n \n impl TraitData {\n@@ -157,6 +161,10 @@ impl TraitData {\n         let container = AssocContainerId::TraitId(tr);\n         let visibility = item_tree[tr_def.visibility].clone();\n         let mut expander = Expander::new(db, tr_loc.id.file_id(), module_id);\n+        let skip_array_during_method_dispatch = item_tree\n+            .attrs(db, tr_loc.container.krate(), ModItem::from(tr_loc.id.value).into())\n+            .by_key(\"rustc_skip_array_during_method_dispatch\")\n+            .exists();\n \n         let items = collect_items(\n             db,\n@@ -168,7 +176,14 @@ impl TraitData {\n             100,\n         );\n \n-        Arc::new(TraitData { name, items, is_auto, is_unsafe, visibility })\n+        Arc::new(TraitData {\n+            name,\n+            items,\n+            is_auto,\n+            is_unsafe,\n+            visibility,\n+            skip_array_during_method_dispatch,\n+        })\n     }\n \n     pub fn associated_types(&self) -> impl Iterator<Item = TypeAliasId> + '_ {"}, {"sha": "a23527f7df253837510a1f5a625c07cea4cae755", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "patch": "@@ -5,7 +5,7 @@\n use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n-use base_db::CrateId;\n+use base_db::{CrateId, Edition};\n use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n     lang_item::LangItemTarget, nameres::DefMap, AssocContainerId, AssocItemId, FunctionId,\n@@ -639,6 +639,7 @@ fn iterate_trait_method_candidates(\n     receiver_ty: Option<&Canonical<Ty>>,\n     callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n ) -> bool {\n+    let receiver_is_array = matches!(self_ty.value.kind(&Interner), chalk_ir::TyKind::Array(..));\n     // if ty is `dyn Trait`, the trait doesn't need to be in scope\n     let inherent_trait =\n         self_ty.value.dyn_trait().into_iter().flat_map(|t| all_super_traits(db.upcast(), t));\n@@ -655,6 +656,19 @@ fn iterate_trait_method_candidates(\n     'traits: for t in traits {\n         let data = db.trait_data(t);\n \n+        // Traits annotated with `#[rustc_skip_array_during_method_dispatch]` are skipped during\n+        // method resolution, if the receiver is an array, and we're compiling for editions before\n+        // 2021.\n+        // This is to make `[a].into_iter()` not break code with the new `IntoIterator` impl for\n+        // arrays.\n+        if data.skip_array_during_method_dispatch && receiver_is_array {\n+            // FIXME: this should really be using the edition of the method name's span, in case it\n+            // comes from a macro\n+            if db.crate_graph()[krate].edition < Edition::Edition2021 {\n+                continue;\n+            }\n+        }\n+\n         // we'll be lazy about checking whether the type implements the\n         // trait, but if we find out it doesn't, we'll skip the rest of the\n         // iteration"}, {"sha": "f26b2c8a79c04641b04693ab2d8a5d899f4aa2b5", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "patch": "@@ -1349,3 +1349,52 @@ fn f() {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn skip_array_during_method_dispatch() {\n+    check_types(\n+        r#\"\n+//- /main2018.rs crate:main2018 deps:core\n+use core::IntoIterator;\n+\n+fn f() {\n+    let v = [4].into_iter();\n+    v;\n+  //^ &i32\n+\n+    let a = [0, 1].into_iter();\n+    a;\n+  //^ &i32\n+}\n+\n+//- /main2021.rs crate:main2021 deps:core edition:2021\n+use core::IntoIterator;\n+\n+fn f() {\n+    let v = [4].into_iter();\n+    v;\n+  //^ i32\n+\n+    let a = [0, 1].into_iter();\n+    a;\n+  //^ &i32\n+}\n+\n+//- /core.rs crate:core\n+#[rustc_skip_array_during_method_dispatch]\n+pub trait IntoIterator {\n+    type Out;\n+    fn into_iter(self) -> Self::Out;\n+}\n+\n+impl<T> IntoIterator for [T; 1] {\n+    type Out = T;\n+    fn into_iter(self) -> Self::Out {}\n+}\n+impl<'a, T> IntoIterator for &'a [T] {\n+    type Out = &'a T;\n+    fn into_iter(self) -> Self::Out {}\n+}\n+    \"#,\n+    );\n+}"}]}