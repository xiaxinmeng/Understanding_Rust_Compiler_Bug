{"sha": "6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYzliM2EwYjY1MTBmY2FjNzViZDYwZTVhMzE3ZGU3ZjI5MzEwZWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-06T13:47:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-26T04:44:57Z"}, "message": "Adjust & --bless tests due to no longer downgrading NLL errors on 2015.", "tree": {"sha": "5bdfdfa13066ad0b473b1d71205f38fc500f69a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bdfdfa13066ad0b473b1d71205f38fc500f69a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "html_url": "https://github.com/rust-lang/rust/commit/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff9c833e5a82307b79302c48ce2d245d56c3031", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff9c833e5a82307b79302c48ce2d245d56c3031", "html_url": "https://github.com/rust-lang/rust/commit/aff9c833e5a82307b79302c48ce2d245d56c3031"}], "stats": {"total": 1278, "additions": 104, "deletions": 1174}, "files": [{"sha": "f66994b3f100a1d27f1afb7ad28286c363b8c502", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,40 +0,0 @@\n-error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n-...\n-LL |       Foo::Y(_, ref mut b) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n-...\n-LL |     *a += 1;\n-   |     ------- borrow later used here\n-\n-error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n-...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n-...\n-LL |     *a += 1;\n-   |     ------- borrow later used here\n-\n-error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- first mutable borrow occurs here\n-...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |              ^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *a += 1;\n-   |     ------- first borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0499, E0503.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "cecc278e1931cb8684a5c1a200af7cd127689c71", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -15,9 +15,7 @@ fn distinct_variant() {\n     // reference.\n     let b = match y {\n       Foo::Y(_, ref mut b) => b,\n-      //~^ WARNING cannot use `y`\n-      //~| WARNING this error has been downgraded to a warning\n-      //~| WARNING this warning will become a hard error in the future\n+      //~^ ERROR cannot use `y`\n       Foo::X => panic!()\n     };\n "}, {"sha": "2caeed1bd44ea634edd497d34858378ca97fb988", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,4 +1,4 @@\n-warning[E0503]: cannot use `y` because it was mutably borrowed\n+error[E0503]: cannot use `y` because it was mutably borrowed\n   --> $DIR/borrowck-anon-fields-variant.rs:17:7\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n@@ -9,13 +9,9 @@ LL |       Foo::Y(_, ref mut b) => b,\n ...\n LL |     *a += 1;\n    |     ------- borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n+  --> $DIR/borrowck-anon-fields-variant.rs:35:7\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- borrow of `y.0` occurs here\n@@ -27,7 +23,7 @@ LL |     *a += 1;\n    |     ------- borrow later used here\n \n error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n+  --> $DIR/borrowck-anon-fields-variant.rs:35:14\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n@@ -38,7 +34,7 @@ LL |       Foo::Y(ref mut b, _) => b,\n LL |     *a += 1;\n    |     ------- first borrow later used here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0499, E0503.\n For more information about an error, try `rustc --explain E0499`."}, {"sha": "20f05353d4633c8f39301f697220c99eadbafeba", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.nll.stderr", "status": "removed", "additions": 0, "deletions": 366, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,366 +0,0 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:262:13\n-   |\n-LL |             let y = &mut x;\n-   |                     ------ first mutable borrow occurs here\n-LL |             &mut x;\n-   |             ^^^^^^ second mutable borrow occurs here\n-LL |             *y = 1;\n-   |             ------ first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:272:20\n-   |\n-LL |                    let y = &mut x;\n-   |                            ------ first mutable borrow occurs here\n-LL |                    &mut x;\n-   |                    ^^^^^^ second mutable borrow occurs here\n-LL |                    *y = 1;\n-   |                    ------ first borrow later used here\n-\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:270:16\n-   |\n-LL |              || {\n-   |               - inferred to be a `FnMut` closure\n-LL | /                || {\n-LL | |                    let y = &mut x;\n-LL | |                    &mut x;\n-LL | |                    *y = 1;\n-LL | |                    drop(y);\n-LL | |                 }\n-   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:41:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `f`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:48:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `g`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:55:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:63:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `e` occurs here\n-LL |         match e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `e`\n-LL |         };\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:71:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:78:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `*f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `*f`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:85:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `*g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `*g`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:92:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:100:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `*e` occurs here\n-LL |         match *e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `*e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:109:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:117:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n-   |               ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:122:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n-   |                  ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:127:25\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n-   |                         ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:132:28\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n-   |                            ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:143:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x @ ..] => println!(\"{:?}\", x),\n-   |               ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:148:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x @ ..] => println!(\"{:?}\", x),\n-   |                  ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:153:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[x @ .., _] => println!(\"{:?}\", x),\n-   |               ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:158:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x @ .., _] => println!(\"{:?}\", x),\n-   |                  ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:171:13\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ borrow of `e` occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |             ^^^^^^^^^^^^ use of borrowed `e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:171:18\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ mutable borrow occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |                  ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:175:23\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ mutable borrow occurs here\n-...\n-LL |             E::B { x: ref bx } =>\n-   |                       ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:188:22\n-   |\n-LL |         let x = &mut s;\n-   |                 ------ mutable borrow occurs here\n-LL |         match s {\n-LL |             S  { y: (ref y0, _), .. } =>\n-   |                      ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:194:28\n-   |\n-LL |         let x = &mut s;\n-   |                 ------ mutable borrow occurs here\n-...\n-LL |             S  { x: F { y: ref x0, .. }, .. } =>\n-   |                            ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:251:24\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ mutable borrow occurs here\n-LL |         match v {\n-LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n-   |                        ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:210:29\n-   |\n-LL |             let x = &mut block;\n-   |                     ---------- mutable borrow occurs here\n-LL |             let p: &'a u8 = &*block.current;\n-   |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |             drop(x);\n-   |                  - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:227:33\n-   |\n-LL |             let x = &mut block;\n-   |                     ---------- mutable borrow occurs here\n-LL |             let p : *const u8 = &*(*block).current;\n-   |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |             drop(x);\n-   |                  - mutable borrow later used here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:282:22\n-   |\n-LL |                 drop(x);\n-   |                      - value moved here\n-LL |                 drop(x);\n-   |                      ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 32 previous errors\n-\n-Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "8425960aa8600bdb0280840a488e464f690c041c", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -208,10 +208,8 @@ fn main() {\n         fn bump<'a>(mut block: &mut Block<'a>) {\n             let x = &mut block;\n             let p: &'a u8 = &*block.current;\n-            //~^ WARNING cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-            //~| this error has been downgraded\n-            //~| this warning will become a hard error in the future\n-            // Warning because of issue rust#38899\n+            //~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+            // See issue rust#38899\n             drop(x);\n         }\n     }\n@@ -225,10 +223,8 @@ fn main() {\n         unsafe fn bump2(mut block: *mut Block2) {\n             let x = &mut block;\n             let p : *const u8 = &*(*block).current;\n-            //~^ WARNING cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-            //~| this error has been downgraded\n-            //~| this warning will become a hard error in the future\n-            // Warning because of issue rust#38899\n+            //~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+            // See issue rust#38899\n             drop(x);\n         }\n     }"}, {"sha": "4213523d2fa4b1d188f13172e8828808f8eb0ebe", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:262:13\n+  --> $DIR/borrowck-describe-lvalue.rs:258:13\n    |\n LL |             let y = &mut x;\n    |                     ------ first mutable borrow occurs here\n@@ -9,7 +9,7 @@ LL |             *y = 1;\n    |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:272:20\n+  --> $DIR/borrowck-describe-lvalue.rs:268:20\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:270:16\n+  --> $DIR/borrowck-describe-lvalue.rs:266:16\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n@@ -295,7 +295,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+  --> $DIR/borrowck-describe-lvalue.rs:236:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -306,7 +306,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+  --> $DIR/borrowck-describe-lvalue.rs:236:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -317,7 +317,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:251:24\n+  --> $DIR/borrowck-describe-lvalue.rs:247:24\n    |\n LL |         let x = &mut v;\n    |                 ------ mutable borrow occurs here\n@@ -328,7 +328,7 @@ LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n LL |         drop(x);\n    |              - mutable borrow later used here\n \n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:210:29\n    |\n LL |             let x = &mut block;\n@@ -338,13 +338,9 @@ LL |             let p: &'a u8 = &*block.current;\n ...\n LL |             drop(x);\n    |                  - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:227:33\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:225:33\n    |\n LL |             let x = &mut block;\n    |                     ---------- mutable borrow occurs here\n@@ -353,13 +349,9 @@ LL |             let p : *const u8 = &*(*block).current;\n ...\n LL |             drop(x);\n    |                  - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:282:22\n+  --> $DIR/borrowck-describe-lvalue.rs:278:22\n    |\n LL |                 drop(x);\n    |                      - value moved here\n@@ -368,7 +360,7 @@ LL |                 drop(x);\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 32 previous errors\n \n Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "58f2cadcc6573ae896085feefe21b2f6119075d2", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,14 +0,0 @@\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-migrate-to-nll.rs:29:21\n-   |\n-LL |     let x = &mut block;\n-   |             ---------- mutable borrow occurs here\n-LL |     let p: &'a u8 = &*block.current;\n-   |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |     drop(x);\n-   |          - mutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "6587dfdbc03f3af267e22006bf5e60b7ed94e379", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,36 +0,0 @@\n-// This is a test of the borrowck migrate mode. It leverages #38899, a\n-// bug that is fixed by NLL: this code is (unsoundly) accepted by\n-// AST-borrowck, but is correctly rejected by the NLL borrowck.\n-//\n-// Therefore, for backwards-compatiblity, under borrowck=migrate the\n-// NLL checks will be emitted as *warnings*.\n-//\n-// In Rust 2018, no errors will be downgraded to warnings.\n-\n-// NLL mode makes this compile-fail; we cannot currently encode a\n-// test that is run-pass or compile-fail based on compare-mode. So\n-// just ignore it instead:\n-\n-// ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n-\n-// revisions: zflag edition\n-//[zflag]compile-flags: -Z borrowck=migrate\n-//[edition]edition:2018\n-//[zflag] check-pass\n-\n-pub struct Block<'a> {\n-    current: &'a u8,\n-    unrelated: &'a u8,\n-}\n-\n-fn bump<'a>(mut block: &mut Block<'a>) {\n-    let x = &mut block;\n-    let p: &'a u8 = &*block.current;\n-    //[edition]~^ ERROR cannot borrow `*block.current` as immutable\n-    // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n-    drop(x);\n-    drop(p);\n-}\n-\n-fn main() {}"}, {"sha": "ace336a3bf32ad6b789f5f3e2d538dd3d1743527", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,15 +0,0 @@\n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-migrate-to-nll.rs:29:21\n-   |\n-LL |     let x = &mut block;\n-   |             ---------- mutable borrow occurs here\n-LL |     let p: &'a u8 = &*block.current;\n-   |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |     drop(x);\n-   |          - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-"}, {"sha": "4b43a0d0a1a1b3c910bcbd9f7d150d49c73953d3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 328, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,328 +0,0 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:37:25\n-   |\n-LL |     const fn into_inner(self) -> T { self.0 }\n-   |                         ^^^^ constant functions cannot evaluate destructors\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:39:36\n-   |\n-LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n-   |                                    ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:44:28\n-   |\n-LL |     const fn into_inner_lt(self) -> T { self.0 }\n-   |                            ^^^^ constant functions cannot evaluate destructors\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:46:42\n-   |\n-LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n-   |                                          ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:51:27\n-   |\n-LL |     const fn into_inner_s(self) -> T { self.0 }\n-   |                           ^^^^ constant functions cannot evaluate destructors\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:53:38\n-   |\n-LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n-   |                                      ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:58:39\n-   |\n-LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n-   |                                       ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:76:16\n-   |\n-LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n-   |                ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:78:18\n-   |\n-LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n-   |                  ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:80:33\n-   |\n-LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n-   |                                 ^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:82:35\n-   |\n-LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-   |                                   ^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int and `bool` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:84:35\n-   |\n-LL | const fn foo19_3(f: f32) -> f32 { -f }\n-   |                                   ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:86:43\n-   |\n-LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-   |                                           ^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:90:27\n-   |\n-LL | const fn foo25() -> u32 { BAR }\n-   |                           ^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:91:36\n-   |\n-LL | const fn foo26() -> &'static u32 { &BAR }\n-   |                                    ^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:92:42\n-   |\n-LL | const fn foo30(x: *const u32) -> usize { x as usize }\n-   |                                          ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:94:63\n-   |\n-LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n-   |                                                               ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:96:42\n-   |\n-LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n-   |                                          ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:98:63\n-   |\n-LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n-   |                                                               ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:100:38\n-   |\n-LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:102:29\n-   |\n-LL | const fn foo30_5(b: bool) { while b { } }\n-   |                             ^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:105:44\n-   |\n-LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n-   |                                            ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:107:44\n-   |\n-LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n-   |                                            ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:109:14\n-   |\n-LL | const fn inc(x: &mut i32) { *x += 1 }\n-   |              ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:114:6\n-   |\n-LL | impl<T: std::fmt::Debug> Foo<T> {\n-   |      ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:119:6\n-   |\n-LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n-   |      ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:124:6\n-   |\n-LL | impl<T: Sync + Sized> Foo<T> {\n-   |      ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:130:24\n-   |\n-LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:34\n-   |\n-LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n-   |                                  ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:134:22\n-   |\n-LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n-   |                      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:135:23\n-   |\n-LL | const fn no_rpit() -> impl std::fmt::Debug {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:136:23\n-   |\n-LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n-   |                       ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:137:32\n-   |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0515]: cannot return reference to temporary value\n-  --> $DIR/min_const_fn.rs:137:63\n-   |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                                               ^--\n-   |                                                               ||\n-   |                                                               |temporary value created here\n-   |                                                               returns a reference to data owned by the current function\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:145:41\n-   |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:148:21\n-   |\n-LL | const fn no_fn_ptrs(_x: fn()) {}\n-   |                     ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:150:27\n-   |\n-LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-   |                           ^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 37 previous errors\n-\n-Some errors have detailed explanations: E0515, E0723.\n-For more information about an error, try `rustc --explain E0515`."}, {"sha": "d0f63b148ff2bf9b712ce38866b3fc5fac8d6254", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -136,9 +136,7 @@ const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn\n const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n //~^ ERROR trait bounds other than `Sized`\n-//~| WARNING cannot return reference to temporary value\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR cannot return reference to temporary value\n \n const fn no_unsafe() { unsafe {} }\n "}, {"sha": "7919cfe987cfc5c149d875a90406cfab3776679c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -286,21 +286,17 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-warning[E0515]: cannot return reference to temporary value\n+error[E0515]: cannot return reference to temporary value\n   --> $DIR/min_const_fn.rs:137:63\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                                               ^--\n    |                                                               ||\n    |                                                               |temporary value created here\n    |                                                               returns a reference to data owned by the current function\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:145:41\n+  --> $DIR/min_const_fn.rs:143:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -309,7 +305,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:148:21\n+  --> $DIR/min_const_fn.rs:146:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -318,15 +314,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:150:27\n+  --> $DIR/min_const_fn.rs:148:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 37 previous errors\n \n Some errors have detailed explanations: E0515, E0723.\n For more information about an error, try `rustc --explain E0515`."}, {"sha": "0ea950d678f8784d364d4593b5f42e7665973ca2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,31 +0,0 @@\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:9:5\n-   |\n-LL |     x.0.field;\n-   |     ^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:12:66\n-   |\n-LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   |                                                                  ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/min_const_fn_dyn.rs:12:67\n-   |\n-LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   |                                                                  -^    - temporary value is freed at the end of this statement\n-   |                                                                  ||\n-   |                                                                  |creates a temporary which is freed while still in use\n-   |                                                                  cast requires that borrow lasts for `'static`\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0716, E0723.\n-For more information about an error, try `rustc --explain E0716`."}, {"sha": "3833510c0b3b5a14685f10c19d47a8d9945e7b69", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -11,8 +11,6 @@ const fn no_inner_dyn_trait2(x: Hide) {\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n //~^ ERROR trait bounds other than `Sized`\n-//~| WARNING temporary value dropped while borrowed\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR temporary value dropped while borrowed\n \n fn main() {}"}, {"sha": "0ea950d678f8784d364d4593b5f42e7665973ca2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -16,20 +16,16 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-warning[E0716]: temporary value dropped while borrowed\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:12:67\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  -^    - temporary value is freed at the end of this statement\n    |                                                                  ||\n    |                                                                  |creates a temporary which is freed while still in use\n    |                                                                  cast requires that borrow lasts for `'static`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0716, E0723.\n For more information about an error, try `rustc --explain E0716`."}, {"sha": "fd6c5b67ef69ee4c5d55adfb2a15565bf8560b7d", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,20 +1,18 @@\n // There isn't a great way to test feature(nll), since it just disables migrate\n-// mode and changes some error messages. We just test for migrate mode.\n+// mode and changes some error messages.\n+\n+// FIXME(Centril): This test is probably obsolete now and `nll` should become\n+// `accepted`.\n \n // Don't use compare-mode=nll, since that turns on NLL.\n // ignore-compare-mode-nll\n // ignore-compare-mode-polonius\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+fn main() {\n     let mut x = (33, &0);\n \n     let m = &mut x;\n     let p = &*x.1;\n-    //~^ WARNING cannot borrow\n-    //~| WARNING this error has been downgraded to a warning\n-    //~| WARNING this warning will become a hard error in the future\n+    //~^ ERROR cannot borrow\n     m;\n }"}, {"sha": "edfc22c32c936070d87df100d0a3e271cee075d8", "filename": "src/test/ui/feature-gates/feature-gate-nll.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,29 +1,13 @@\n-warning[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n   --> $DIR/feature-gate-nll.rs:15:13\n    |\n LL |     let m = &mut x;\n    |             ------ mutable borrow occurs here\n LL |     let p = &*x.1;\n    |             ^^^^^ immutable borrow occurs here\n-...\n+LL |\n LL |     m;\n    |     - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/feature-gate-nll.rs:11:1\n-   |\n-LL | / fn main() {\n-LL | |     let mut x = (33, &0);\n-LL | |\n-LL | |     let m = &mut x;\n-...  |\n-LL | |     m;\n-LL | | }\n-   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.migrate.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,4 +1,4 @@\n-warning: captured variable cannot escape `FnMut` closure body\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-1.rs:11:9\n    |\n LL |     || {\n@@ -8,15 +8,6 @@ LL |         &mut x\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-40510-1.rs:20:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f4fda0abc2049285c9e502fafaaf75ffca37cad0", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-1.rs:11:9\n+  --> $DIR/issue-40510-1.rs:7:9\n    |\n LL |     || {\n    |      - inferred to be a `FnMut` closure"}, {"sha": "ca53dcd9b41fad45a1596c67cabf76d1055fc4fc", "filename": "src/test/ui/issues/issue-40510-1.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,21 +1,12 @@\n-#![feature(rustc_attrs)]\n #![allow(unused)]\n \n-// revisions: migrate nll\n-#![cfg_attr(nll, feature(nll))]\n-\n fn f() {\n     let mut x: Box<()> = Box::new(());\n \n     || {\n         &mut x\n     };\n-    //[migrate]~^^ WARNING captured variable cannot escape `FnMut` closure body\n-    //[migrate]~| WARNING this error has been downgraded to a warning\n-    //[migrate]~| WARNING this warning will become a hard error in the future\n-    //[nll]~^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n+    //~^^ ERROR captured variable cannot escape `FnMut` closure body\n }\n \n-#[rustc_error]\n fn main() {}\n-//[migrate]~^ ERROR"}, {"sha": "f4fda0abc2049285c9e502fafaaf75ffca37cad0", "filename": "src/test/ui/issues/issue-40510-1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-1.rs:11:9\n+  --> $DIR/issue-40510-1.rs:7:9\n    |\n LL |     || {\n    |      - inferred to be a `FnMut` closure", "previous_filename": "src/test/ui/issues/issue-40510-1.migrate.nll.stderr"}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.migrate.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,4 +1,4 @@\n-warning: captured variable cannot escape `FnMut` closure body\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-3.rs:11:9\n    |\n LL |       || {\n@@ -10,15 +10,6 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-40510-3.rs:22:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4bc7d0f5deac59db8baeeb5cacd2a2a4cc45529b", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-3.rs:11:9\n+  --> $DIR/issue-40510-3.rs:7:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure"}, {"sha": "181263adcbfa8902f7c610634a7658215951a56a", "filename": "src/test/ui/issues/issue-40510-3.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,23 +1,14 @@\n-#![feature(rustc_attrs)]\n #![allow(unused)]\n \n-// revisions: migrate nll\n-#![cfg_attr(nll, feature(nll))]\n-\n fn f() {\n     let mut x: Vec<()> = Vec::new();\n \n     || {\n         || {\n             x.push(())\n         }\n-        //[migrate]~^^^ WARNING captured variable cannot escape `FnMut` closure body\n-        //[migrate]~| WARNING this error has been downgraded to a warning\n-        //[migrate]~| WARNING this warning will become a hard error in the future\n-        //[nll]~^^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n+        //~^^^ ERROR captured variable cannot escape `FnMut` closure body\n     };\n }\n \n-#[rustc_error]\n fn main() {}\n-//[migrate]~^ ERROR"}, {"sha": "4bc7d0f5deac59db8baeeb5cacd2a2a4cc45529b", "filename": "src/test/ui/issues/issue-40510-3.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-3.rs:11:9\n+  --> $DIR/issue-40510-3.rs:7:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure", "previous_filename": "src/test/ui/issues/issue-40510-3.migrate.nll.stderr"}, {"sha": "45b22511d27d641c0a8c189434b0f37a2ff8784d", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,4 +1,4 @@\n-warning[E0713]: borrow may still be in use when destructor runs\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n@@ -8,12 +8,8 @@ LL |     &mut *s.0\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-warning[E0713]: borrow may still be in use when destructor runs\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n@@ -23,12 +19,8 @@ LL |     &mut *(*s).0\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-warning[E0713]: borrow may still be in use when destructor runs\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n@@ -38,23 +30,7 @@ LL |     &mut *(**s).0\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:81:1\n-   |\n-LL | / fn main() {\n-LL | |     let mut x = 1;\n-LL | |     {\n-LL | |         let mut long_lived = Scribble(&mut x);\n-...  |\n-LL | |     *boxed_boxed_scribbled(Box::new(Box::new(Scribble(&mut x)))) += 10;\n-LL | | }\n-   | |_^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0713`."}, {"sha": "b73637efe6e997e2a53273a84bc3b58cc82b07d2", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -2,27 +2,16 @@\n // mutable borrows that would be scribbled over by destructors before\n // the return occurs.\n //\n-// We will explicitly test NLL, and migration modes;\n-// thus we will also skip the automated compare-mode=nll.\n+// We will explicitly test NLL; thus we will also skip the automated compare-mode=nll.\n \n-// revisions: nll migrate\n // ignore-compare-mode-nll\n // ignore-compare-mode-polonius\n \n-// This test is going to pass in the migrate revision, because the AST-borrowck\n-// accepted this code in the past (see notes below). So we use `#[rustc_error]`\n-// to keep the outcome as an error in all scenarios, and rely on the stderr\n-// files to show what the actual behavior is. (See rust-lang/rust#49855.)\n-#![feature(rustc_attrs)]\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n struct Scribble<'a>(&'a mut u32);\n \n impl<'a> Drop for Scribble<'a> { fn drop(&mut self) { *self.0 = 42; } }\n \n-// this is okay, in both AST-borrowck and NLL: The `Scribble` here *has*\n-// to strictly outlive `'a`\n+// this is okay: The `Scribble` here *has* to strictly outlive `'a`\n fn borrowed_scribble<'a>(s: &'a mut Scribble) -> &'a mut u32 {\n     &mut *s.0\n }\n@@ -44,41 +33,21 @@ fn boxed_boxed_borrowed_scribble<'a>(s: Box<Box<&'a mut Scribble>>) -> &'a mut u\n // * (Maybe in the future the two-phase borrows system will be\n //   extended to support this case. But for now, it is an error in\n //   NLL, even with two-phase borrows.)\n-//\n-// In any case, the AST-borrowck was not smart enough to know that\n-// this should be an error. (Which is perhaps the essence of why\n-// rust-lang/rust#45696 arose in the first place.)\n fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n-    &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n-    //[migrate]~| WARNING this represents potential undefined behavior in your code\n+    &mut *s.0 //~ ERROR borrow may still be in use when destructor runs [E0713]\n }\n \n // This, by analogy to previous case, is *also* not okay.\n-//\n-// (But again, AST-borrowck was not smart enogh to know that this\n-// should be an error.)\n fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n-    &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n-    //[migrate]~| WARNING this represents potential undefined behavior in your code\n+    &mut *(*s).0 //~ ERROR borrow may still be in use when destructor runs [E0713]\n }\n \n // This, by analogy to previous case, is *also* not okay.\n-//\n-// (But again, AST-borrowck was not smart enogh to know that this\n-// should be an error.)\n fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n-    &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n-    //[migrate]~| WARNING this represents potential undefined behavior in your code\n+    &mut *(**s).0 //~ ERROR borrow may still be in use when destructor runs [E0713]\n }\n \n-#[rustc_error]\n-fn main() { //[migrate]~ ERROR compilation successful\n+fn main() {\n     let mut x = 1;\n     {\n         let mut long_lived = Scribble(&mut x);"}, {"sha": "d1fdc289cd68e296ec4595fef699c306eb29033f", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -0,0 +1,33 @@\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:37:5\n+   |\n+LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+   |              -- lifetime `'a` defined here\n+LL |     &mut *s.0\n+   |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n+LL | }\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n+\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:42:5\n+   |\n+LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+   |                    -- lifetime `'a` defined here\n+LL |     &mut *(*s).0\n+   |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n+LL | }\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n+\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:47:5\n+   |\n+LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+   |                          -- lifetime `'a` defined here\n+LL |     &mut *(**s).0\n+   |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n+LL | }\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "9c6f8d4532a70ab7d895afaedf103424a5ea11ff", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,18 +0,0 @@\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-49824.rs:10:9\n-   |\n-LL |       || {\n-   |        - inferred to be a `FnMut` closure\n-LL | /         || {\n-LL | |\n-LL | |\n-LL | |\n-LL | |             let _y = &mut x;\n-LL | |         }\n-   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error: aborting due to previous error\n-"}, {"sha": "bc1cd6856bc92b576218bc7f5f21e1cfe709499b", "filename": "src/test/ui/issues/issue-49824.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-49824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-49824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,16 +1,8 @@\n-#![feature(rustc_attrs)]\n-\n-// This test checks that a warning occurs with migrate mode.\n-\n-#[rustc_error]\n fn main() {\n-    //~^ ERROR compilation successful\n     let mut x = 0;\n     || {\n         || {\n-        //~^ WARNING captured variable cannot escape `FnMut` closure body\n-        //~| WARNING this error has been downgraded to a warning\n-        //~| WARNING this warning will become a hard error in the future\n+        //~^ ERROR captured variable cannot escape `FnMut` closure body\n             let _y = &mut x;\n         }\n     };"}, {"sha": "6b486aafcdf40e65f4abd847a3413a296ff78499", "filename": "src/test/ui/issues/issue-49824.stderr", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,33 +1,16 @@\n-warning: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-49824.rs:10:9\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-49824.rs:4:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure\n LL | /         || {\n LL | |\n-LL | |\n-LL | |\n LL | |             let _y = &mut x;\n LL | |         }\n    | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-49824.rs:6:1\n-   |\n-LL | / fn main() {\n-LL | |\n-LL | |     let mut x = 0;\n-LL | |     || {\n-...  |\n-LL | |     };\n-LL | | }\n-   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "1fe1332832a14d17fccf9e3e40dbcbfaba83c5b0", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #38899\n \n-#![feature(nll)]\n-\n pub struct Block<'a> {\n     current: &'a u8,\n     unrelated: &'a u8,"}, {"sha": "16588cbcfb285aeda8cc07fb4ef3f32c045d3f86", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowed-referent-issue-38899.rs:13:21\n+  --> $DIR/borrowed-referent-issue-38899.rs:11:21\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here"}, {"sha": "35ee7877f2f7836e52af2c853c35e9e26ca5f69f", "filename": "src/test/ui/pattern/pattern-bindings-after-at.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,22 +0,0 @@\n-error[E0303]: pattern bindings are not allowed after an `@`\n-  --> $DIR/pattern-bindings-after-at.rs:8:31\n-   |\n-LL |         ref mut z @ &mut Some(ref a) => {\n-   |                               ^^^^^ not allowed after `@`\n-\n-error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/pattern-bindings-after-at.rs:8:31\n-   |\n-LL |         ref mut z @ &mut Some(ref a) => {\n-   |         ----------------------^^^^^-\n-   |         |                     |\n-   |         |                     immutable borrow occurs here\n-   |         mutable borrow occurs here\n-...\n-LL |             **z = None;\n-   |             ---------- mutable borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0303, E0502.\n-For more information about an error, try `rustc --explain E0303`."}, {"sha": "aff7264752de268b7204e288e083b9edc56e9252", "filename": "src/test/ui/pattern/pattern-bindings-after-at.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -7,9 +7,7 @@ fn main() {\n     match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR pattern bindings are not allowed after an `@`\n-        //~| WARN cannot borrow `_` as immutable because it is also borrowed as mutable\n-        //~| WARN this error has been downgraded to a warning for backwards compatibility\n-        //~| WARN this represents potential undefined behavior in your code and this warning will\n+        //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n             **z = None;\n             println!(\"{}\", *a);\n         }"}, {"sha": "35ee7877f2f7836e52af2c853c35e9e26ca5f69f", "filename": "src/test/ui/pattern/pattern-bindings-after-at.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -4,7 +4,7 @@ error[E0303]: pattern bindings are not allowed after an `@`\n LL |         ref mut z @ &mut Some(ref a) => {\n    |                               ^^^^^ not allowed after `@`\n \n-warning[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n   --> $DIR/pattern-bindings-after-at.rs:8:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n@@ -15,12 +15,8 @@ LL |         ref mut z @ &mut Some(ref a) => {\n ...\n LL |             **z = None;\n    |             ---------- mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0303, E0502.\n For more information about an error, try `rustc --explain E0303`."}, {"sha": "18d01b1879018abfcd70489121fb71436fcb0dd1", "filename": "src/test/ui/thread-local-in-ctfe.nll.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -1,49 +0,0 @@\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:6:17\n-   |\n-LL | static B: u32 = A;\n-   |                 ^\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:9:18\n-   |\n-LL | static C: &u32 = &A;\n-   |                  ^^\n-\n-error[E0712]: thread-local variable borrowed past end of function\n-  --> $DIR/thread-local-in-ctfe.rs:9:18\n-   |\n-LL | static C: &u32 = &A;\n-   |                  ^^- end of enclosing function is here\n-   |                  |\n-   |                  thread-local variables cannot be borrowed beyond the end of the function\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:15:16\n-   |\n-LL | const D: u32 = A;\n-   |                ^\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n-   |\n-LL | const E: &u32 = &A;\n-   |                 ^^\n-\n-error[E0712]: thread-local variable borrowed past end of function\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n-   |\n-LL | const E: &u32 = &A;\n-   |                 ^^- end of enclosing function is here\n-   |                 |\n-   |                 thread-local variables cannot be borrowed beyond the end of the function\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:25:5\n-   |\n-LL |     A\n-   |     ^\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0712`."}, {"sha": "722c3883fdda4da58bfb7ae106b7cb2d79a9982a", "filename": "src/test/ui/thread-local-in-ctfe.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -8,18 +8,14 @@ static B: u32 = A;\n \n static C: &u32 = &A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n-//~| WARNING thread-local variable borrowed past end of function\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR thread-local variable borrowed past end of function\n \n const D: u32 = A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n \n const E: &u32 = &A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n-//~| WARNING thread-local variable borrowed past end of function\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR thread-local variable borrowed past end of function\n \n const fn f() -> u32 {\n     A"}, {"sha": "2983ac3f60cf2fbbd951ba0124f3635a41a9c00b", "filename": "src/test/ui/thread-local-in-ctfe.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec9b3a0b6510fcac75bd60e5a317de7f29310ef/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr?ref=6ec9b3a0b6510fcac75bd60e5a317de7f29310ef", "patch": "@@ -10,48 +10,40 @@ error[E0625]: thread-local statics cannot be accessed at compile-time\n LL | static C: &u32 = &A;\n    |                  ^^\n \n-warning[E0712]: thread-local variable borrowed past end of function\n+error[E0712]: thread-local variable borrowed past end of function\n   --> $DIR/thread-local-in-ctfe.rs:9:18\n    |\n LL | static C: &u32 = &A;\n    |                  ^^- end of enclosing function is here\n    |                  |\n    |                  thread-local variables cannot be borrowed beyond the end of the function\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:15:16\n+  --> $DIR/thread-local-in-ctfe.rs:13:16\n    |\n LL | const D: u32 = A;\n    |                ^\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n+  --> $DIR/thread-local-in-ctfe.rs:16:17\n    |\n LL | const E: &u32 = &A;\n    |                 ^^\n \n-warning[E0712]: thread-local variable borrowed past end of function\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n+error[E0712]: thread-local variable borrowed past end of function\n+  --> $DIR/thread-local-in-ctfe.rs:16:17\n    |\n LL | const E: &u32 = &A;\n    |                 ^^- end of enclosing function is here\n    |                 |\n    |                 thread-local variables cannot be borrowed beyond the end of the function\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:25:5\n+  --> $DIR/thread-local-in-ctfe.rs:21:5\n    |\n LL |     A\n    |     ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0712`."}]}