{"sha": "b2473e988fdf304f87099102019cca8041a64887", "node_id": "C_kwDOAAsO6NoAKGIyNDczZTk4OGZkZjMwNGY4NzA5OTEwMjAxOWNjYTgwNDFhNjQ4ODc", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-03-08T00:37:59Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-03-08T18:58:03Z"}, "message": "Add core::hint::must_use", "tree": {"sha": "4d2f1f4144c326358474118e730ad057d1be27b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2f1f4144c326358474118e730ad057d1be27b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2473e988fdf304f87099102019cca8041a64887", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmInpzsACgkQ+boUO5X/\nbYLOYxAAr4cP8LrmrpRIoS3c6czlcKoBxSQD4DhO2IwIU9TJo7nGVz2XdPq4ecAI\n7vGxYcadKmNc+/13P/VttL/8vwvYMYdU3pLRIuamGi14my2tJtillittWTsX57M2\nOWtMcEdEMtlD2bYqK0+pTYh1TWxvB/ierbXxHqNpLAwScloq0zpxZqQ/K8lsBnug\nfxkRcoVQ4Fk18iiewYMSlXOjE8XXFp+nZyRKw7K6uowQsBaiBHGLFGDRJKG0IwWz\nruAR7lu/9ppabzf3w4XgLP6nJ6zirziJpSv1khs8S30beuxotVM4H22fbqxX/SPF\nesbPCkqxV2B3hJgdoZ+CcSutOlc4pK6tmfPU7hOPmQWPdFXGOxLTHEyzVFo6V14K\nbf9MmVU+M9Kv4LaUnZhzdl5Kxwt6DHtOOsm2jYrRkfHBTsZhZiB1XFJ8CmlCyVcB\njHo5j8WMb1jJKqhP+yZKcXW97ML8mDgOxZODZ1BbMHTCgYFjlfbjKfJGdHqjNLYz\nwjz7i4avY/4XmcI8aYnYMBrdaPmv62Mpu0AwwfM2BDpj8/GLL36xr5GGn3qlXAO9\nKDqzSnSfvJam3/40UrdurgQANmzONYq9QBAiZoyEjyCtkjZcd1N2/rzL13JVw5p/\n4F5jg4YZ1c+Wm/siSiQj3MZS0Gp2tBRAZd5DW0UxM0yrTI6cAjo=\n=r/AU\n-----END PGP SIGNATURE-----", "payload": "tree 4d2f1f4144c326358474118e730ad057d1be27b4\nparent 89adcc636f94d34a6fc90fa117e28ddf6be7b983\nauthor David Tolnay <dtolnay@gmail.com> 1646699879 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1646765883 -0800\n\nAdd core::hint::must_use\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2473e988fdf304f87099102019cca8041a64887", "html_url": "https://github.com/rust-lang/rust/commit/b2473e988fdf304f87099102019cca8041a64887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2473e988fdf304f87099102019cca8041a64887/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89adcc636f94d34a6fc90fa117e28ddf6be7b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/89adcc636f94d34a6fc90fa117e28ddf6be7b983", "html_url": "https://github.com/rust-lang/rust/commit/89adcc636f94d34a6fc90fa117e28ddf6be7b983"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "58ea109c735b67afbde616c0d21cb46ce1890ca0", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/b2473e988fdf304f87099102019cca8041a64887/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2473e988fdf304f87099102019cca8041a64887/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=b2473e988fdf304f87099102019cca8041a64887", "patch": "@@ -173,3 +173,126 @@ pub fn spin_loop() {\n pub const fn black_box<T>(dummy: T) -> T {\n     crate::intrinsics::black_box(dummy)\n }\n+\n+/// An identity function that causes an `unused_must_use` warning to be\n+/// triggered if the given value is not used (returned, stored in a variable,\n+/// etc) by the caller.\n+///\n+/// This is primarily intended for use in macro-generated code, in which a\n+/// [`#[must_use]` attribute][must_use] either on a type or a function would not\n+/// be convenient.\n+///\n+/// [must_use]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(hint_must_use)]\n+///\n+/// use core::fmt;\n+///\n+/// pub struct Error(/* ... */);\n+///\n+/// #[macro_export]\n+/// macro_rules! make_error {\n+///     ($($args:expr),*) => {\n+///         core::hint::must_use({\n+///             let error = $crate::make_error(core::format_args!($($args),*));\n+///             error\n+///         })\n+///     };\n+/// }\n+///\n+/// // Implementation detail of make_error! macro.\n+/// #[doc(hidden)]\n+/// pub fn make_error(args: fmt::Arguments<'_>) -> Error {\n+///     Error(/* ... */)\n+/// }\n+///\n+/// fn demo() -> Option<Error> {\n+///     if true {\n+///         // Oops, meant to write `return Some(make_error!(\"...\"));`\n+///         Some(make_error!(\"...\"));\n+///     }\n+///     None\n+/// }\n+/// #\n+/// # // Make rustdoc not wrap the whole snippet in fn main, so that $crate::make_error works\n+/// # fn main() {}\n+/// ```\n+///\n+/// In the above example, we'd like an `unused_must_use` lint to apply to the\n+/// value created by `make_error!`. However, neither `#[must_use]` on a struct\n+/// nor `#[must_use]` on a function is appropriate here, so the macro expands\n+/// using `core::hint::must_use` instead.\n+///\n+/// - We wouldn't want `#[must_use]` on the `struct Error` because that would\n+///   make the following unproblematic code trigger a warning:\n+///\n+///   ```\n+///   # struct Error;\n+///   #\n+///   fn f(arg: &str) -> Result<(), Error>\n+///   # { Ok(()) }\n+///\n+///   #[test]\n+///   fn t() {\n+///       // Assert that `f` returns error if passed an empty string.\n+///       // A value of type `Error` is unused here but that's not a problem.\n+///       f(\"\").unwrap_err();\n+///   }\n+///   ```\n+///\n+/// - Using `#[must_use]` on `fn make_error` can't help because the return value\n+///   *is* used, as the right-hand side of a `let` statement. The `let`\n+///   statement looks useless but is in fact necessary for ensuring that\n+///   temporaries within the `format_args` expansion are not kept alive past the\n+///   creation of the `Error`, as keeping them alive past that point can cause\n+///   autotrait issues in async code:\n+///\n+///   ```\n+///   # #![feature(hint_must_use)]\n+///   #\n+///   # struct Error;\n+///   #\n+///   # macro_rules! make_error {\n+///   #     ($($args:expr),*) => {\n+///   #         core::hint::must_use({\n+///   #             // If `let` isn't used, then `f()` produces a non-Send future.\n+///   #             let error = make_error(core::format_args!($($args),*));\n+///   #             error\n+///   #         })\n+///   #     };\n+///   # }\n+///   #\n+///   # fn make_error(args: core::fmt::Arguments<'_>) -> Error {\n+///   #     Error\n+///   # }\n+///   #\n+///   async fn f() {\n+///       // Using `let` inside the make_error expansion causes temporaries like\n+///       // `unsync()` to drop at the semicolon of that `let` statement, which\n+///       // is prior to the await point. They would otherwise stay around until\n+///       // the semicolon on *this* statement, which is after the await point,\n+///       // and the enclosing Future would not implement Send.\n+///       log(make_error!(\"look: {:p}\", unsync())).await;\n+///   }\n+///\n+///   async fn log(error: Error) {/* ... */}\n+///\n+///   // Returns something without a Sync impl.\n+///   fn unsync() -> *const () {\n+///       0 as *const ()\n+///   }\n+///   #\n+///   # fn test() {\n+///   #     fn assert_send(_: impl Send) {}\n+///   #     assert_send(f());\n+///   # }\n+///   ```\n+#[unstable(feature = \"hint_must_use\", issue = \"94745\")]\n+#[rustc_const_unstable(feature = \"hint_must_use\", issue = \"94745\")]\n+#[must_use] // <-- :)\n+pub const fn must_use<T>(value: T) -> T {\n+    value\n+}"}]}