{"sha": "723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyM2NhNGJkNGRkNjhhMzUxZGJkMDAxZWQxYWU5NThlMTNjNGJjOGM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-27T11:34:33Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-04-03T12:46:03Z"}, "message": "Validate export_name attribute", "tree": {"sha": "f5539906e242c1ba50a7bd60ef3b8c6caeacf061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5539906e242c1ba50a7bd60ef3b8c6caeacf061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c", "html_url": "https://github.com/rust-lang/rust/commit/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9a11f0f85416924487e17601458eb07b2e9fa06", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a11f0f85416924487e17601458eb07b2e9fa06", "html_url": "https://github.com/rust-lang/rust/commit/b9a11f0f85416924487e17601458eb07b2e9fa06"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "321cd33bbeb2f76e0c46a153db3c0661600a4721", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c", "patch": "@@ -1692,9 +1692,9 @@ pub fn build_return_block<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n     }\n }\n \n-// trans_closure: Builds an LLVM function out of a source function.\n-// If the function closes over its environment a closure will be\n-// returned.\n+/// Builds an LLVM function out of a source function.\n+///\n+/// If the function closes over its environment a closure will be returned.\n pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                    decl: &ast::FnDecl,\n                                    body: &ast::Block,\n@@ -1827,8 +1827,7 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     finish_fn(&fcx, bcx, output_type, ret_debug_loc);\n }\n \n-// trans_fn: creates an LLVM function corresponding to a source language\n-// function.\n+/// Creates an LLVM function corresponding to a source language function.\n pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                           decl: &ast::FnDecl,\n                           body: &ast::Block,\n@@ -2645,10 +2644,9 @@ fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, id: ast::NodeId,\n         None => {}\n     }\n \n-    match attr::first_attr_value_str_by_name(attrs, \"export_name\") {\n+    match attr::find_export_name_attr(ccx.sess().diagnostic(), attrs) {\n         // Use provided name\n         Some(name) => name.to_string(),\n-\n         _ => ccx.tcx().map.with_path(id, |path| {\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle"}, {"sha": "b966fe2c6e5cd97163757142cc7dd7494b9112da", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=723ca4bd4dd68a351dbd001ed1ae958e13c4bc8c", "patch": "@@ -282,6 +282,23 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n+/// Find the value of #[export_name=*] attribute and check its validity.\n+pub fn find_export_name_attr(diag: &SpanHandler, attrs: &[Attribute]) -> Option<InternedString> {\n+    attrs.iter().fold(None, |ia,attr| {\n+        if attr.check_name(\"export_name\") {\n+            if let s@Some(_) = attr.value_str() {\n+                s\n+            } else {\n+                diag.span_err(attr.span, \"export_name attribute has invalid format\");\n+                diag.handler.help(\"use #[export_name=\\\"*\\\"]\");\n+                None\n+            }\n+        } else {\n+            ia\n+        }\n+    })\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub enum InlineAttr {\n     None,"}]}