{"sha": "d1632c2727474c0a88b19de3718af806d42e4450", "node_id": "C_kwDOAAsO6NoAKGQxNjMyYzI3Mjc0NzRjMGE4OGIxOWRlMzcxOGFmODA2ZDQyZTQ0NTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-16T15:22:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-16T15:22:06Z"}, "message": "Report syntax errors from item level macro expansions", "tree": {"sha": "08cdb450695a3417ee1d7e9690b4fdf7a11fb15a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08cdb450695a3417ee1d7e9690b4fdf7a11fb15a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1632c2727474c0a88b19de3718af806d42e4450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1632c2727474c0a88b19de3718af806d42e4450", "html_url": "https://github.com/rust-lang/rust/commit/d1632c2727474c0a88b19de3718af806d42e4450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1632c2727474c0a88b19de3718af806d42e4450/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b50f9f09d21e33e87c565617c1043284db80c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b50f9f09d21e33e87c565617c1043284db80c1", "html_url": "https://github.com/rust-lang/rust/commit/71b50f9f09d21e33e87c565617c1043284db80c1"}], "stats": {"total": 223, "additions": 147, "deletions": 76}, "files": [{"sha": "1d082d555478433a9c6e82eee828b832d68a8aef", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -21,7 +21,7 @@ use limit::Limit;\n use once_cell::unsync::OnceCell;\n use profile::Count;\n use rustc_hash::FxHashMap;\n-use syntax::{ast, AstPtr, SyntaxNode, SyntaxNodePtr};\n+use syntax::{ast, AstPtr, Parse, SyntaxNode, SyntaxNodePtr};\n \n use crate::{\n     attr::Attrs,\n@@ -137,7 +137,7 @@ impl Expander {\n         &mut self,\n         db: &dyn DefDatabase,\n         macro_call: ast::MacroCall,\n-    ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n+    ) -> Result<ExpandResult<Option<(Mark, Parse<T>)>>, UnresolvedMacro> {\n         // FIXME: within_limit should support this, instead of us having to extract the error\n         let mut unresolved_macro_err = None;\n \n@@ -167,37 +167,37 @@ impl Expander {\n         &mut self,\n         db: &dyn DefDatabase,\n         call_id: MacroCallId,\n-    ) -> ExpandResult<Option<(Mark, T)>> {\n+    ) -> ExpandResult<Option<(Mark, Parse<T>)>> {\n         self.within_limit(db, |_this| ExpandResult::ok(Some(call_id)))\n     }\n \n     fn enter_expand_inner(\n         db: &dyn DefDatabase,\n         call_id: MacroCallId,\n-        mut err: Option<ExpandError>,\n-    ) -> ExpandResult<Option<(HirFileId, SyntaxNode)>> {\n-        if err.is_none() {\n-            err = db.macro_expand_error(call_id);\n-        }\n-\n+        mut error: Option<ExpandError>,\n+    ) -> ExpandResult<Option<InFile<Parse<SyntaxNode>>>> {\n         let file_id = call_id.as_file();\n+        let ExpandResult { value, err } = db.parse_or_expand_with_err(file_id);\n+\n+        if error.is_none() {\n+            error = err;\n+        }\n \n-        let raw_node = match db.parse_or_expand_with_err(file_id) {\n-            // FIXME: report parse errors\n-            Some(it) => it.syntax_node(),\n+        let parse = match value {\n+            Some(it) => it,\n             None => {\n                 // Only `None` if the macro expansion produced no usable AST.\n-                if err.is_none() {\n+                if error.is_none() {\n                     tracing::warn!(\"no error despite `parse_or_expand` failing\");\n                 }\n \n-                return ExpandResult::only_err(err.unwrap_or_else(|| {\n+                return ExpandResult::only_err(error.unwrap_or_else(|| {\n                     ExpandError::Other(\"failed to parse macro invocation\".into())\n                 }));\n             }\n         };\n \n-        ExpandResult { value: Some((file_id, raw_node)), err }\n+        ExpandResult { value: Some(InFile::new(file_id, parse)), err: error }\n     }\n \n     pub fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {\n@@ -259,7 +259,7 @@ impl Expander {\n         &mut self,\n         db: &dyn DefDatabase,\n         op: F,\n-    ) -> ExpandResult<Option<(Mark, T)>>\n+    ) -> ExpandResult<Option<(Mark, Parse<T>)>>\n     where\n         F: FnOnce(&mut Self) -> ExpandResult<Option<MacroCallId>>,\n     {\n@@ -286,15 +286,15 @@ impl Expander {\n         };\n \n         Self::enter_expand_inner(db, call_id, err).map(|value| {\n-            value.and_then(|(new_file_id, node)| {\n-                let node = T::cast(node)?;\n+            value.and_then(|InFile { file_id, value }| {\n+                let parse = value.cast::<T>()?;\n \n                 self.recursion_depth += 1;\n-                self.cfg_expander.hygiene = Hygiene::new(db.upcast(), new_file_id);\n-                let old_file_id = std::mem::replace(&mut self.current_file_id, new_file_id);\n+                self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n+                let old_file_id = std::mem::replace(&mut self.current_file_id, file_id);\n                 let mark =\n                     Mark { file_id: old_file_id, bomb: DropBomb::new(\"expansion mark dropped\") };\n-                Some((mark, node))\n+                Some((mark, parse))\n             })\n         })\n     }"}, {"sha": "db619b97dbecc2b0efd1dd51c58907012b2df18b", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -824,7 +824,11 @@ impl ExprCollector<'_> {\n                     self.db.ast_id_map(self.expander.current_file_id),\n                 );\n \n-                let id = collector(self, Some(expansion));\n+                if record_diagnostics {\n+                    // FIXME: Report parse errors here\n+                }\n+\n+                let id = collector(self, Some(expansion.tree()));\n                 self.ast_id_map = prev_ast_id_map;\n                 self.expander.exit(self.db, mark);\n                 id"}, {"sha": "95581727addfeafe0e5f0113bcc2c7e6ff7c13a4", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -7,7 +7,7 @@ use std::sync::Arc;\n use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId, MacroDefKind};\n use intern::Interned;\n use smallvec::SmallVec;\n-use syntax::ast;\n+use syntax::{ast, Parse};\n \n use crate::{\n     attr::Attrs,\n@@ -604,13 +604,10 @@ impl<'a> AssocItemCollector<'a> {\n                             continue 'attrs;\n                         }\n                     }\n-                    match self.expander.enter_expand_id::<ast::MacroItems>(self.db, call_id) {\n-                        ExpandResult { value: Some((mark, _)), .. } => {\n-                            self.collect_macro_items(mark);\n-                            continue 'items;\n-                        }\n-                        ExpandResult { .. } => {}\n-                    }\n+\n+                    let res = self.expander.enter_expand_id::<ast::MacroItems>(self.db, call_id);\n+                    self.collect_macro_items(res, &|| loc.kind.clone());\n+                    continue 'items;\n                 }\n             }\n \n@@ -641,30 +638,53 @@ impl<'a> AssocItemCollector<'a> {\n                     self.items.push((item.name.clone(), def.into()));\n                 }\n                 AssocItem::MacroCall(call) => {\n-                    if let Some(root) =\n-                        self.db.parse_or_expand_with_err(self.expander.current_file_id())\n-                    {\n-                        // FIXME: report parse errors\n-                        let root = root.syntax_node();\n-\n+                    // TODO: These are the wrong errors to report, report in collect_macro_items instead\n+                    let file_id = self.expander.current_file_id();\n+                    let root = self.db.parse_or_expand(file_id);\n+                    if let Some(root) = root {\n                         let call = &item_tree[call];\n \n-                        let ast_id_map = self.db.ast_id_map(self.expander.current_file_id());\n-                        let call = ast_id_map.get(call.ast_id).to_node(&root);\n-                        let _cx =\n-                            stdx::panic_context::enter(format!(\"collect_items MacroCall: {call}\"));\n-                        let res = self.expander.enter_expand::<ast::MacroItems>(self.db, call);\n-\n-                        if let Ok(ExpandResult { value: Some((mark, _)), .. }) = res {\n-                            self.collect_macro_items(mark);\n+                        let ast_id_map = self.db.ast_id_map(file_id);\n+                        let macro_call = ast_id_map.get(call.ast_id).to_node(&root);\n+                        let _cx = stdx::panic_context::enter(format!(\n+                            \"collect_items MacroCall: {macro_call}\"\n+                        ));\n+                        if let Ok(res) =\n+                            self.expander.enter_expand::<ast::MacroItems>(self.db, macro_call)\n+                        {\n+                            self.collect_macro_items(res, &|| hir_expand::MacroCallKind::FnLike {\n+                                ast_id: InFile::new(file_id, call.ast_id),\n+                                expand_to: hir_expand::ExpandTo::Items,\n+                            });\n                         }\n                     }\n                 }\n             }\n         }\n     }\n \n-    fn collect_macro_items(&mut self, mark: Mark) {\n+    fn collect_macro_items(\n+        &mut self,\n+        ExpandResult { value, err }: ExpandResult<Option<(Mark, Parse<ast::MacroItems>)>>,\n+        error_call_kind: &dyn Fn() -> hir_expand::MacroCallKind,\n+    ) {\n+        let Some((mark, parse)) = value else { return };\n+\n+        if let Some(err) = err {\n+            self.inactive_diagnostics.push(DefDiagnostic::macro_error(\n+                self.module_id.local_id,\n+                error_call_kind(),\n+                err.to_string(),\n+            ));\n+        }\n+        if let errors @ [_, ..] = parse.errors() {\n+            self.inactive_diagnostics.push(DefDiagnostic::macro_expansion_parse_error(\n+                self.module_id.local_id,\n+                error_call_kind(),\n+                errors.into(),\n+            ));\n+        }\n+\n         let tree_id = item_tree::TreeId::new(self.expander.current_file_id(), None);\n         let item_tree = tree_id.item_tree(self.db);\n         let iter: SmallVec<[_; 2]> ="}, {"sha": "c1e20d657bd720a16dec3608e902c24569232fef", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -350,7 +350,7 @@ impl GenericParams {\n                 match expander.enter_expand::<ast::Type>(db, macro_call) {\n                     Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n                         let ctx = expander.ctx(db);\n-                        let type_ref = TypeRef::from_ast(&ctx, expanded);\n+                        let type_ref = TypeRef::from_ast(&ctx, expanded.tree());\n                         self.fill_implicit_impl_trait_args(db, expander, &type_ref);\n                         expander.exit(db, mark);\n                     }"}, {"sha": "6b922b5785b7bcb5c46d660001266bf3e586af64", "filename": "crates/hir-def/src/nameres/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -4,7 +4,10 @@ use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::{attrs::AttrId, MacroCallKind};\n use la_arena::Idx;\n-use syntax::ast::{self, AnyHasAttrs};\n+use syntax::{\n+    ast::{self, AnyHasAttrs},\n+    SyntaxError,\n+};\n \n use crate::{\n     item_tree::{self, ItemTreeId},\n@@ -29,6 +32,8 @@ pub enum DefDiagnosticKind {\n \n     MacroError { ast: MacroCallKind, message: String },\n \n+    MacroExpansionParseError { ast: MacroCallKind, errors: Box<[SyntaxError]> },\n+\n     UnimplementedBuiltinMacro { ast: AstId<ast::Macro> },\n \n     InvalidDeriveTarget { ast: AstId<ast::Item>, id: usize },\n@@ -91,14 +96,28 @@ impl DefDiagnostic {\n         Self { in_module: container, kind: DefDiagnosticKind::UnresolvedProcMacro { ast, krate } }\n     }\n \n-    pub(super) fn macro_error(\n+    pub(crate) fn macro_error(\n         container: LocalModuleId,\n         ast: MacroCallKind,\n         message: String,\n     ) -> Self {\n         Self { in_module: container, kind: DefDiagnosticKind::MacroError { ast, message } }\n     }\n \n+    pub(crate) fn macro_expansion_parse_error(\n+        container: LocalModuleId,\n+        ast: MacroCallKind,\n+        errors: &[SyntaxError],\n+    ) -> Self {\n+        Self {\n+            in_module: container,\n+            kind: DefDiagnosticKind::MacroExpansionParseError {\n+                ast,\n+                errors: errors.to_vec().into_boxed_slice(),\n+            },\n+        }\n+    }\n+\n     pub(super) fn unresolved_macro_call(\n         container: LocalModuleId,\n         ast: MacroCallKind,"}, {"sha": "1749698387d4272b9811d43877699de96f81ab93", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -100,7 +100,10 @@ pub trait ExpandDatabase: SourceDatabase {\n     #[salsa::transparent]\n     fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n     #[salsa::transparent]\n-    fn parse_or_expand_with_err(&self, file_id: HirFileId) -> Option<Parse<SyntaxNode>>;\n+    fn parse_or_expand_with_err(\n+        &self,\n+        file_id: HirFileId,\n+    ) -> ExpandResult<Option<Parse<SyntaxNode>>>;\n     /// Implementation for the macro case.\n     fn parse_macro_expansion(\n         &self,\n@@ -262,11 +265,11 @@ fn parse_or_expand(db: &dyn ExpandDatabase, file_id: HirFileId) -> Option<Syntax\n fn parse_or_expand_with_err(\n     db: &dyn ExpandDatabase,\n     file_id: HirFileId,\n-) -> Option<Parse<SyntaxNode>> {\n+) -> ExpandResult<Option<Parse<SyntaxNode>>> {\n     match file_id.repr() {\n-        HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).to_syntax()),\n+        HirFileIdRepr::FileId(file_id) => ExpandResult::ok(Some(db.parse(file_id).to_syntax())),\n         HirFileIdRepr::MacroFile(macro_file) => {\n-            db.parse_macro_expansion(macro_file).value.map(|(parse, _)| parse)\n+            db.parse_macro_expansion(macro_file).map(|it| it.map(|(parse, _)| parse))\n         }\n     }\n }"}, {"sha": "84f391316c664abac3db3235546897c66548f6d2", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -21,7 +21,7 @@\n use std::sync::Arc;\n \n use base_db::CrateId;\n-use syntax::{ted, SyntaxNode};\n+use syntax::{ted, Parse, SyntaxNode};\n \n use crate::{\n     ast::{self, AstNode},\n@@ -111,7 +111,7 @@ fn lazy_expand(\n     def: &MacroDefId,\n     macro_call: InFile<ast::MacroCall>,\n     krate: CrateId,\n-) -> ExpandResult<Option<InFile<SyntaxNode>>> {\n+) -> ExpandResult<Option<InFile<Parse<SyntaxNode>>>> {\n     let ast_id = db.ast_id_map(macro_call.file_id).ast_id(&macro_call.value);\n \n     let expand_to = ExpandTo::from_call_site(&macro_call.value);\n@@ -121,13 +121,8 @@ fn lazy_expand(\n         MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id), expand_to },\n     );\n \n-    let err = db.macro_expand_error(id);\n-    let value =\n-        db.parse_or_expand_with_err(id.as_file()).map(|node| InFile::new(id.as_file(), node));\n-    // FIXME: report parse errors\n-    let value = value.map(|it| it.map(|it| it.syntax_node()));\n-\n-    ExpandResult { value, err }\n+    db.parse_or_expand_with_err(id.as_file())\n+        .map(|parse| parse.map(|parse| InFile::new(id.as_file(), parse)))\n }\n \n fn eager_macro_recur(\n@@ -183,8 +178,14 @@ fn eager_macro_recur(\n                     Some(val) => {\n                         // replace macro inside\n                         let hygiene = Hygiene::new(db, val.file_id);\n-                        let ExpandResult { value, err: error } =\n-                            eager_macro_recur(db, &hygiene, val, krate, macro_resolver)?;\n+                        let ExpandResult { value, err: error } = eager_macro_recur(\n+                            db,\n+                            &hygiene,\n+                            // FIXME: We discard parse errors here\n+                            val.map(|it| it.syntax_node()),\n+                            krate,\n+                            macro_resolver,\n+                        )?;\n                         let err = if err.is_none() { error } else { err };\n                         ExpandResult { value, err }\n                     }"}, {"sha": "33dc5e2d69be8162d1b6050e088128adb27862f0", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -381,7 +381,8 @@ impl<'a> TyLoweringContext<'a> {\n                     match expander.enter_expand::<ast::Type>(self.db.upcast(), macro_call) {\n                         Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n                             let ctx = expander.ctx(self.db.upcast());\n-                            let type_ref = TypeRef::from_ast(&ctx, expanded);\n+                            // FIXME: Report syntax errors in expansion here\n+                            let type_ref = TypeRef::from_ast(&ctx, expanded.tree());\n \n                             drop(expander);\n                             let ty = self.lower_ty(&type_ref);"}, {"sha": "f81f8b0b011e96a50abb4589aa50d75ffaf5b1fe", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -10,7 +10,7 @@ use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_def::path::ModPath;\n use hir_expand::{name::Name, HirFileId, InFile};\n-use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n+use syntax::{ast, AstPtr, SyntaxError, SyntaxNodePtr, TextRange};\n \n use crate::{AssocItem, Field, Local, MacroKind, Type};\n \n@@ -38,8 +38,9 @@ diagnostics![\n     IncorrectCase,\n     InvalidDeriveTarget,\n     IncoherentImpl,\n-    MacroError,\n     MacroDefError,\n+    MacroError,\n+    MacroExpansionParseError,\n     MalformedDerive,\n     MismatchedArgCount,\n     MissingFields,\n@@ -132,6 +133,13 @@ pub struct MacroError {\n     pub message: String,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct MacroExpansionParseError {\n+    pub node: InFile<SyntaxNodePtr>,\n+    pub precise_location: Option<TextRange>,\n+    pub errors: Box<[SyntaxError]>,\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroDefError {\n     pub node: InFile<AstPtr<ast::Macro>>,"}, {"sha": "3adb484b12f4126c30da18f4527d5d31cb7ed95f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -87,12 +87,12 @@ pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n         AnyDiagnostic, BreakOutsideOfLoop, ExpectedFunction, InactiveCode, IncoherentImpl,\n-        IncorrectCase, InvalidDeriveTarget, MacroDefError, MacroError, MalformedDerive,\n-        MismatchedArgCount, MissingFields, MissingMatchArms, MissingUnsafe, NeedMut, NoSuchField,\n-        PrivateAssocItem, PrivateField, ReplaceFilterMapNextWithFindMap, TypeMismatch,\n-        UndeclaredLabel, UnimplementedBuiltinMacro, UnreachableLabel, UnresolvedExternCrate,\n-        UnresolvedField, UnresolvedImport, UnresolvedMacroCall, UnresolvedMethodCall,\n-        UnresolvedModule, UnresolvedProcMacro, UnusedMut,\n+        IncorrectCase, InvalidDeriveTarget, MacroDefError, MacroError, MacroExpansionParseError,\n+        MalformedDerive, MismatchedArgCount, MissingFields, MissingMatchArms, MissingUnsafe,\n+        NeedMut, NoSuchField, PrivateAssocItem, PrivateField, ReplaceFilterMapNextWithFindMap,\n+        TypeMismatch, UndeclaredLabel, UnimplementedBuiltinMacro, UnreachableLabel,\n+        UnresolvedExternCrate, UnresolvedField, UnresolvedImport, UnresolvedMacroCall,\n+        UnresolvedMethodCall, UnresolvedModule, UnresolvedProcMacro, UnusedMut,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope, TypeInfo, VisibleTraits},\n@@ -753,15 +753,13 @@ fn emit_def_diagnostic_(\n                 .into(),\n             );\n         }\n-\n         DefDiagnosticKind::UnresolvedProcMacro { ast, krate } => {\n             let (node, precise_location, macro_name, kind) = precise_macro_call_location(ast, db);\n             acc.push(\n                 UnresolvedProcMacro { node, precise_location, macro_name, kind, krate: *krate }\n                     .into(),\n             );\n         }\n-\n         DefDiagnosticKind::UnresolvedMacroCall { ast, path } => {\n             let (node, precise_location, _, _) = precise_macro_call_location(ast, db);\n             acc.push(\n@@ -774,12 +772,16 @@ fn emit_def_diagnostic_(\n                 .into(),\n             );\n         }\n-\n         DefDiagnosticKind::MacroError { ast, message } => {\n             let (node, precise_location, _, _) = precise_macro_call_location(ast, db);\n             acc.push(MacroError { node, precise_location, message: message.clone() }.into());\n         }\n-\n+        DefDiagnosticKind::MacroExpansionParseError { ast, errors } => {\n+            let (node, precise_location, _, _) = precise_macro_call_location(ast, db);\n+            acc.push(\n+                MacroExpansionParseError { node, precise_location, errors: errors.clone() }.into(),\n+            );\n+        }\n         DefDiagnosticKind::UnimplementedBuiltinMacro { ast } => {\n             let node = ast.to_node(db.upcast());\n             // Must have a name, otherwise we wouldn't emit it."}, {"sha": "7c8cb7a4476f19a4ccdacc53e83bbd3bde42e8ae", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1632c2727474c0a88b19de3718af806d42e4450/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=d1632c2727474c0a88b19de3718af806d42e4450", "patch": "@@ -265,6 +265,19 @@ pub fn diagnostics(\n             AnyDiagnostic::InvalidDeriveTarget(d) => handlers::invalid_derive_target::invalid_derive_target(&ctx, &d),\n             AnyDiagnostic::MacroDefError(d) => handlers::macro_error::macro_def_error(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => handlers::macro_error::macro_error(&ctx, &d),\n+            AnyDiagnostic::MacroExpansionParseError(d) => {\n+                res.extend(d.errors.iter().take(32).map(|err| {\n+                    {\n+                        Diagnostic::new(\n+                            \"syntax-error\",\n+                            format!(\"Syntax Error in Expansion: {err}\"),\n+                            ctx.resolve_precise_location(&d.node.clone(), d.precise_location),\n+                        )\n+                    }\n+                    .experimental()\n+                }));\n+                continue;\n+            },\n             AnyDiagnostic::MalformedDerive(d) => handlers::malformed_derive::malformed_derive(&ctx, &d),\n             AnyDiagnostic::MismatchedArgCount(d) => handlers::mismatched_arg_count::mismatched_arg_count(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => handlers::missing_fields::missing_fields(&ctx, &d),"}]}