{"sha": "eebb7cd8396692f06bc713e1ef6287598054d1dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYmI3Y2Q4Mzk2NjkyZjA2YmM3MTNlMWVmNjI4NzU5ODA1NGQxZGQ=", "commit": {"author": {"name": "BO41", "email": "botbob@disroot.org", "date": "2019-08-20T14:55:17Z"}, "committer": {"name": "BO41", "email": "botbob@disroot.org", "date": "2019-08-22T13:41:07Z"}, "message": "Add examples to some complexity lints", "tree": {"sha": "6012a5b026d94764dde63e03d018acc20c89f441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6012a5b026d94764dde63e03d018acc20c89f441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eebb7cd8396692f06bc713e1ef6287598054d1dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eebb7cd8396692f06bc713e1ef6287598054d1dd", "html_url": "https://github.com/rust-lang/rust/commit/eebb7cd8396692f06bc713e1ef6287598054d1dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eebb7cd8396692f06bc713e1ef6287598054d1dd/comments", "author": null, "committer": null, "parents": [{"sha": "3f56cb5d8b6ab217cc89c68f568b355bf6a35e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f56cb5d8b6ab217cc89c68f568b355bf6a35e28", "html_url": "https://github.com/rust-lang/rust/commit/3f56cb5d8b6ab217cc89c68f568b355bf6a35e28"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "0ad7c26f84926eac2e392735e1313ed455c62dd2", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=eebb7cd8396692f06bc713e1ef6287598054d1dd", "patch": "@@ -312,6 +312,14 @@ declare_clippy_lint! {\n     /// for i in 0..v.len() { foo(v[i]); }\n     /// for i in 0..v.len() { bar(i, v[i]); }\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let v = vec![1];\n+    /// # fn foo(bar: usize) {}\n+    /// # fn bar(bar: usize, baz: usize) {}\n+    /// for item in &v { foo(*item); }\n+    /// for (i, item) in v.iter().enumerate() { bar(i, *item); }\n+    /// ```\n     pub EXPLICIT_COUNTER_LOOP,\n     complexity,\n     \"for-looping with an explicit counter when `_.enumerate()` would do\""}, {"sha": "e8abb4c53173738392b957a20c330ab0edc431dd", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=eebb7cd8396692f06bc713e1ef6287598054d1dd", "patch": "@@ -302,6 +302,11 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().filter(|x| **x == 0).next();\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let vec = vec![1];\n+    /// vec.iter().find(|x| **x == 0);\n+    /// ```\n     pub FILTER_NEXT,\n     complexity,\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n@@ -425,6 +430,11 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0).is_some();\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let vec = vec![1];\n+    /// vec.iter().any(|x| **x == 0);\n+    /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n     \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\"\n@@ -442,7 +452,12 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let name = \"foo\";\n-    /// name.chars().next() == Some('_');\n+    /// if name.chars().next() == Some('_') {};\n+    /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// let name = \"foo\";\n+    /// if name.starts_with('_') {};\n     /// ```\n     pub CHARS_NEXT_CMP,\n     complexity,"}, {"sha": "b761457f64ce23e035ea042c9dab34085e11e5bb", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=eebb7cd8396692f06bc713e1ef6287598054d1dd", "patch": "@@ -31,6 +31,10 @@ declare_clippy_lint! {\n     ///     true\n     /// }\n     /// ```\n+    /// Could be written as\n+    /// ```rust,ignore\n+    /// !x\n+    /// ```\n     pub NEEDLESS_BOOL,\n     complexity,\n     \"if-statements with plain booleans in the then- and else-clause, e.g., `if p { true } else { false }`\""}, {"sha": "804f86a9a9649830907db947582683290ad6dd1e", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebb7cd8396692f06bc713e1ef6287598054d1dd/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=eebb7cd8396692f06bc713e1ef6287598054d1dd", "patch": "@@ -43,6 +43,11 @@ declare_clippy_lint! {\n     /// # let x = vec![1];\n     /// x.iter().zip(0..x.len());\n     /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let x = vec![1];\n+    /// x.iter().enumerate();\n+    /// ```\n     pub RANGE_ZIP_WITH_LEN,\n     complexity,\n     \"zipping iterator with a range when `enumerate()` would do\"\n@@ -64,6 +69,10 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// for x..(y+1) { .. }\n     /// ```\n+    /// Could be written as\n+    /// ```rust,ignore\n+    /// for x..=y { .. }\n+    /// ```\n     pub RANGE_PLUS_ONE,\n     complexity,\n     \"`x..(y+1)` reads better as `x..=y`\"\n@@ -82,6 +91,10 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// for x..=(y-1) { .. }\n     /// ```\n+    /// Could be written as\n+    /// ```rust,ignore\n+    /// for x..y { .. }\n+    /// ```\n     pub RANGE_MINUS_ONE,\n     complexity,\n     \"`x..=(y-1)` reads better as `x..y`\""}]}