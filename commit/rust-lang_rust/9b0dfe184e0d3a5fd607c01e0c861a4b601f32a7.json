{"sha": "9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMGRmZTE4NGUwZDNhNWZkNjA3YzAxZTBjODYxYTRiNjAxZjMyYTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-06T21:54:00Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-15T10:43:59Z"}, "message": "Add tests for trivial bounds", "tree": {"sha": "bc1d85bf9ffd8a1723a99b4e165a69a0277f2ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc1d85bf9ffd8a1723a99b4e165a69a0277f2ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "html_url": "https://github.com/rust-lang/rust/commit/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dabb820b002f738618371b66a4f3f4c6fee17e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/dabb820b002f738618371b66a4f3f4c6fee17e16", "html_url": "https://github.com/rust-lang/rust/commit/dabb820b002f738618371b66a4f3f4c6fee17e16"}], "stats": {"total": 587, "additions": 587, "deletions": 0}, "files": [{"sha": "49c9df95bc7720d347463c32d4e921351cdc5bd2", "filename": "src/test/ui/trivial-bounds-inconsistent-associated-functions.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Inconsistent bounds with trait implementations\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait A {\n+    fn foo(&self) -> Self where Self: Copy;\n+}\n+\n+impl A for str {\n+    fn foo(&self) -> Self where Self: Copy { *\"\" }\n+}\n+\n+impl A for i32 {\n+    fn foo(&self) -> Self { 3 }\n+}\n+\n+fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/trivial-bounds-inconsistent-associated-functions.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7"}, {"sha": "66547863db2fd2c8eecc7815c7e916872ef82996", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,19 @@\n+error[E0596]: cannot borrow immutable item `**t` as mutable\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n+   |\n+LL |     *t //~ ERROR\n+   |     ^^ cannot borrow as mutable\n+   |\n+   = note: the value which is causing this path not to be mutable is...: `*t`\n+\n+error[E0596]: cannot borrow immutable item `**t` as mutable\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n+   |\n+LL |     {*t} //~ ERROR\n+   |      ^^ cannot borrow as mutable\n+   |\n+   = note: the value which is causing this path not to be mutable is...: `*t`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "2c4d9d813856c857d416fb660ffa5efdc0b97777", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that reborrows are still illegal with Copy mutable references\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+    *t //~ ERROR\n+}\n+\n+fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+    {*t} //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "bea2bb66857f2971961a5b79488624bb28296b47", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,19 @@\n+error[E0389]: cannot borrow data mutably in a `&` reference\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n+   |\n+LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                        --------------- use `&'a mut &'a mut i32` here to make mutable\n+LL |     *t //~ ERROR\n+   |     ^^ assignment into an immutable reference\n+\n+error[E0389]: cannot borrow data mutably in a `&` reference\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n+   |\n+LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                             --------------- use `&'a mut &'a mut i32` here to make mutable\n+LL |     {*t} //~ ERROR\n+   |      ^^ assignment into an immutable reference\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0389`."}, {"sha": "375885a02c75a56f70217508cae3ece7b8558754", "filename": "src/test/ui/trivial-bounds-inconsistent-copy.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check tautalogically false `Copy` bounds\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+fn copy_string(t: String) -> String where String: Copy {\n+    is_copy(&t);\n+    let x = t;\n+    drop(t);\n+    t\n+}\n+\n+fn copy_out_string(t: &String) -> String where String: Copy {\n+    *t\n+}\n+\n+fn copy_string_with_param<T>(x: String) where String: Copy {\n+    let y = x;\n+    let z = x;\n+}\n+\n+// Check that no reborrowing occurs\n+fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n+    is_copy(t);\n+    let x = *t;\n+    drop(x);\n+    x\n+}\n+\n+fn is_copy<T: Copy>(t: &T) {}\n+\n+\n+fn main() {}"}, {"sha": "ae639005756118826cad4408855dafd731fd22c6", "filename": "src/test/ui/trivial-bounds-inconsistent-copy.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,41 @@\n+warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:16:1\n+   |\n+LL | / fn copy_string(t: String) -> String where String: Copy {\n+LL | |     is_copy(&t);\n+LL | |     let x = t;\n+LL | |     drop(t);\n+LL | |     t\n+LL | | }\n+   | |_^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:23:1\n+   |\n+LL | / fn copy_out_string(t: &String) -> String where String: Copy {\n+LL | |     *t\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:27:1\n+   |\n+LL | / fn copy_string_with_param<T>(x: String) where String: Copy {\n+LL | |     let y = x;\n+LL | |     let z = x;\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound for<'b> &'b mut i32: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:33:1\n+   |\n+LL | / fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n+LL | |     is_copy(t);\n+LL | |     let x = *t;\n+LL | |     drop(x);\n+LL | |     x\n+LL | | }\n+   | |_^\n+"}, {"sha": "14ba11c44de138639e830677d847907c29556f50", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check tautalogically false `Sized` bounds\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct T<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct S(str, str) where str: Sized;\n+\n+fn unsized_local() where for<'a> T<A + 'a>: Sized {\n+    let x: T<A> = *(Box::new(T { x: 1 }) as Box<T<A>>);\n+}\n+\n+fn return_str() -> str where str: Sized {\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn main() {}"}, {"sha": "ee2ff7d7861396d5353f2b5e9817e1ca389b2fd1", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,24 @@\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:24:1\n+   |\n+LL | struct S(str, str) where str: Sized;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound for<'a> T<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:26:1\n+   |\n+LL | / fn unsized_local() where for<'a> T<A + 'a>: Sized {\n+LL | |     let x: T<A> = *(Box::new(T { x: 1 }) as Box<T<A>>);\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:30:1\n+   |\n+LL | / fn return_str() -> str where str: Sized {\n+LL | |     *\"Sized\".to_string().into_boxed_str()\n+LL | | }\n+   | |_^\n+"}, {"sha": "5fcdbfc437a81387c402e1d05f9f6337af34d916", "filename": "src/test/ui/trivial-bounds-inconsistent-well-formed.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Test that inconsistent bounds are used in well-formedness checks\n+#![feature(trivial_bounds)]\n+\n+use std::fmt::Debug;\n+\n+pub fn foo() where Vec<str>: Debug, str: Copy {\n+    let x = vec![*\"1\"];\n+    println!(\"{:?}\", x);\n+}\n+\n+fn main() {}"}, {"sha": "b51ecd49900712badeaa4feaf79983d5b8f92677", "filename": "src/test/ui/trivial-bounds-inconsistent-well-formed.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,20 @@\n+warning: Trait bound std::vec::Vec<str>: std::fmt::Debug does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-well-formed.rs:17:1\n+   |\n+LL | / pub fn foo() where Vec<str>: Debug, str: Copy {\n+LL | |     let x = vec![*\"1\"];\n+LL | |     println!(\"{:?}\", x);\n+LL | | }\n+   | |_^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound str: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-well-formed.rs:17:1\n+   |\n+LL | / pub fn foo() where Vec<str>: Debug, str: Copy {\n+LL | |     let x = vec![*\"1\"];\n+LL | |     println!(\"{:?}\", x);\n+LL | | }\n+   | |_^\n+"}, {"sha": "2c8b873b8c9462db590283b28bf0778bd62ac0e4", "filename": "src/test/ui/trivial-bounds-inconsistent.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+// Check that tautalogically false bounds are accepted, and are used\n+// in type inference.\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+pub trait Foo {\n+    fn test(&self);\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+enum E where i32: Foo { V }\n+\n+struct S where i32: Foo;\n+\n+trait T where i32: Foo {}\n+\n+union U where i32: Foo { f: i32 }\n+\n+type Y where i32: Foo = ();\n+\n+impl Foo for () where i32: Foo {\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo {\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn g() where &'static str: Foo {\n+    \"Foo\".test();\n+    Foo::test(&\"Foo\");\n+    generic_function(\"Foo\");\n+}\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct Dst<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct TwoStrs(str, str) where str: Sized;\n+\n+fn unsized_local() where for<'a> Dst<A + 'a>: Sized {\n+    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+}\n+\n+fn return_str() -> str where str: Sized {\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+    -s\n+}\n+\n+fn use_for() where i32: Iterator {\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}, {"sha": "ee3c7518294773e9dfee69b672440a4c2cbee720", "filename": "src/test/ui/trivial-bounds-inconsistent.stderr", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,112 @@\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:24:1\n+   |\n+LL | enum E where i32: Foo { V }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:26:1\n+   |\n+LL | struct S where i32: Foo;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:28:1\n+   |\n+LL | trait T where i32: Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:30:1\n+   |\n+LL | union U where i32: Foo { f: i32 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/trivial-bounds-inconsistent.rs:32:14\n+   |\n+LL | type Y where i32: Foo = ();\n+   |              ^^^^^^^^\n+   |\n+   = note: #[warn(type_alias_bounds)] on by default\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:32:1\n+   |\n+LL | type Y where i32: Foo = ();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:34:1\n+   |\n+LL | / impl Foo for () where i32: Foo {\n+LL | |     fn test(&self) {\n+LL | |         3i32.test();\n+LL | |         Foo::test(&4i32);\n+LL | |         generic_function(5i32);\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:42:1\n+   |\n+LL | / fn f() where i32: Foo {\n+LL | |     let s = S;\n+LL | |     3i32.test();\n+LL | |     Foo::test(&4i32);\n+LL | |     generic_function(5i32);\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:49:1\n+   |\n+LL | / fn g() where &'static str: Foo {\n+LL | |     \"Foo\".test();\n+LL | |     Foo::test(&\"Foo\");\n+LL | |     generic_function(\"Foo\");\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:63:1\n+   |\n+LL | struct TwoStrs(str, str) where str: Sized;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound for<'a> Dst<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:65:1\n+   |\n+LL | / fn unsized_local() where for<'a> Dst<A + 'a>: Sized {\n+LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:69:1\n+   |\n+LL | / fn return_str() -> str where str: Sized {\n+LL | |     *\"Sized\".to_string().into_boxed_str()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound std::string::String: std::ops::Neg does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:73:1\n+   |\n+LL | / fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+LL | |     -s\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound i32: std::iter::Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:77:1\n+   |\n+LL | / fn use_for() where i32: Iterator {\n+LL | |     for _ in 2i32 {}\n+LL | | }\n+   | |_^\n+"}, {"sha": "9850ec2bd1fc0b8e946cac2c9375cdd92d96cecd", "filename": "src/test/ui/trivial-bounds-leak-copy.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that false Copy bounds don't leak\n+#![feature(trivial_bounds)]\n+\n+fn copy_out_string(t: &String) -> String where String: Copy {\n+    *t\n+}\n+\n+fn move_out_string(t: &String) -> String {\n+    *t //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "3c3fcbf9b803c8642cf0526dfec27a4a28b15eee", "filename": "src/test/ui/trivial-bounds-leak-copy.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/trivial-bounds-leak-copy.rs:19:5\n+   |\n+LL |     *t //~ ERROR\n+   |     ^^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "98cb5b2b503325f9e37cfaccae68bca781cca798", "filename": "src/test/ui/trivial-bounds-leak.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that false bounds don't leak\n+#![feature(trivial_bounds)]\n+\n+pub trait Foo {\n+    fn test(&self);\n+}\n+\n+fn return_str() -> str where str: Sized {\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn cant_return_str() -> str { //~ ERROR\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn my_function() where i32: Foo\n+{\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn foo() {\n+    3i32.test(); //~ ERROR\n+    Foo::test(&4i32); //~ ERROR\n+    generic_function(5i32); //~ ERROR\n+}\n+\n+fn generic_function<T: Foo>(t: T) {}\n+\n+fn main() {}\n+"}, {"sha": "df91ba0dd2ac5b2b6513be46ab98f5a5b9909f3d", "filename": "src/test/ui/trivial-bounds-leak.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr?ref=9b0dfe184e0d3a5fd607c01e0c861a4b601f32a7", "patch": "@@ -0,0 +1,47 @@\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/trivial-bounds-leak.rs:22:25\n+   |\n+LL | fn cant_return_str() -> str { //~ ERROR\n+   |                         ^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0599]: no method named `test` found for type `i32` in the current scope\n+  --> $DIR/trivial-bounds-leak.rs:34:10\n+   |\n+LL |     3i32.test(); //~ ERROR\n+   |          ^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `test`, perhaps you need to implement it:\n+           candidate #1: `Foo`\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/trivial-bounds-leak.rs:35:5\n+   |\n+LL |     Foo::test(&4i32); //~ ERROR\n+   |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `Foo::test`\n+  --> $DIR/trivial-bounds-leak.rs:15:5\n+   |\n+LL |     fn test(&self);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/trivial-bounds-leak.rs:36:5\n+   |\n+LL |     generic_function(5i32); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `generic_function`\n+  --> $DIR/trivial-bounds-leak.rs:39:1\n+   |\n+LL | fn generic_function<T: Foo>(t: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}]}