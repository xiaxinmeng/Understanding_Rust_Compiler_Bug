{"sha": "0843acbea6441d5d4a07576ba206ccc01949662a", "node_id": "C_kwDOAAsO6NoAKDA4NDNhY2JlYTY0NDFkNWQ0YTA3NTc2YmEyMDZjY2MwMTk0OTY2MmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-04T14:39:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T08:37:03Z"}, "message": "Fix SROA without deaggregation.", "tree": {"sha": "a74d2c31208879894a516854d0cf10e8ccca3333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74d2c31208879894a516854d0cf10e8ccca3333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0843acbea6441d5d4a07576ba206ccc01949662a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0843acbea6441d5d4a07576ba206ccc01949662a", "html_url": "https://github.com/rust-lang/rust/commit/0843acbea6441d5d4a07576ba206ccc01949662a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0843acbea6441d5d4a07576ba206ccc01949662a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de7d7fb22a579a3d59ddb1c959d1b3da224aafa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de7d7fb22a579a3d59ddb1c959d1b3da224aafa", "html_url": "https://github.com/rust-lang/rust/commit/3de7d7fb22a579a3d59ddb1c959d1b3da224aafa"}], "stats": {"total": 301, "additions": 174, "deletions": 127}, "files": [{"sha": "2118e3c55222420e64db80b1cb50a51449325da6", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 82, "deletions": 45, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -2,6 +2,7 @@ use crate::MirPass;\n use rustc_data_structures::fx::{FxIndexMap, IndexEntry};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n@@ -13,7 +14,9 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n         sess.mir_opt_level() >= 3\n     }\n \n+    #[instrument(level = \"debug\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(def_id = ?body.source.def_id());\n         let escaping = escaping_locals(&*body);\n         debug!(?escaping);\n         let replacements = compute_flattening(tcx, body, escaping);\n@@ -69,15 +72,28 @@ fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n             self.super_rvalue(rvalue, location)\n         }\n \n+        fn visit_assign(\n+            &mut self,\n+            lvalue: &Place<'tcx>,\n+            rvalue: &Rvalue<'tcx>,\n+            location: Location,\n+        ) {\n+            if lvalue.as_local().is_some() && let Rvalue::Aggregate(..) = rvalue {\n+                // Aggregate assignments are expanded in run_pass.\n+                self.visit_rvalue(rvalue, location);\n+                return;\n+            }\n+            self.super_assign(lvalue, rvalue, location)\n+        }\n+\n         fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n-            if let StatementKind::StorageLive(..)\n-            | StatementKind::StorageDead(..)\n-            | StatementKind::Deinit(..) = statement.kind\n-            {\n+            match statement.kind {\n                 // Storage statements are expanded in run_pass.\n-                return;\n+                StatementKind::StorageLive(..)\n+                | StatementKind::StorageDead(..)\n+                | StatementKind::Deinit(..) => return,\n+                _ => self.super_statement(statement, location),\n             }\n-            self.super_statement(statement, location)\n         }\n \n         fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n@@ -192,6 +208,7 @@ fn replace_flattened_locals<'tcx>(\n         replacements,\n         all_dead_locals,\n         fragments,\n+        patch: MirPatch::new(body),\n     };\n     for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n         visitor.visit_basic_block_data(bb, data);\n@@ -205,6 +222,7 @@ fn replace_flattened_locals<'tcx>(\n     for var_debug_info in &mut body.var_debug_info {\n         visitor.visit_var_debug_info(var_debug_info);\n     }\n+    visitor.patch.apply(body);\n }\n \n struct ReplacementVisitor<'tcx, 'll> {\n@@ -218,6 +236,7 @@ struct ReplacementVisitor<'tcx, 'll> {\n     /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n     /// and deinit statement and debuginfo.\n     fragments: IndexVec<Local, Vec<(&'tcx [PlaceElem<'tcx>], Local)>>,\n+    patch: MirPatch<'tcx>,\n }\n \n impl<'tcx, 'll> ReplacementVisitor<'tcx, 'll> {\n@@ -255,12 +274,63 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n     }\n \n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n-        if let StatementKind::StorageLive(..)\n-        | StatementKind::StorageDead(..)\n-        | StatementKind::Deinit(..) = statement.kind\n-        {\n-            // Storage statements are expanded in run_pass.\n-            return;\n+        match statement.kind {\n+            StatementKind::StorageLive(l) => {\n+                if self.all_dead_locals.contains(l) {\n+                    let final_locals = &self.fragments[l];\n+                    for &(_, fl) in final_locals {\n+                        self.patch.add_statement(location, StatementKind::StorageLive(fl));\n+                    }\n+                    statement.make_nop();\n+                }\n+                return;\n+            }\n+            StatementKind::StorageDead(l) => {\n+                if self.all_dead_locals.contains(l) {\n+                    let final_locals = &self.fragments[l];\n+                    for &(_, fl) in final_locals {\n+                        self.patch.add_statement(location, StatementKind::StorageDead(fl));\n+                    }\n+                    statement.make_nop();\n+                }\n+                return;\n+            }\n+            StatementKind::Deinit(box ref place) => {\n+                if let Some(local) = place.as_local()\n+                    && self.all_dead_locals.contains(local)\n+                {\n+                    let final_locals = &self.fragments[local];\n+                    for &(_, fl) in final_locals {\n+                        self.patch.add_statement(\n+                            location,\n+                            StatementKind::Deinit(Box::new(fl.into())),\n+                        );\n+                    }\n+                    statement.make_nop();\n+                    return;\n+                }\n+            }\n+\n+            StatementKind::Assign(box (ref place, Rvalue::Aggregate(_, ref operands))) => {\n+                if let Some(local) = place.as_local()\n+                    && self.all_dead_locals.contains(local)\n+                {\n+                    let final_locals = &self.fragments[local];\n+                    for &(projection, fl) in final_locals {\n+                        let &[PlaceElem::Field(index, _)] = projection else { bug!() };\n+                        let index = index.as_usize();\n+                        let rvalue = Rvalue::Use(operands[index].clone());\n+                        self.patch.add_statement(\n+                            location,\n+                            StatementKind::Assign(Box::new((fl.into(), rvalue))),\n+                        );\n+                    }\n+                    statement.make_nop();\n+                    return;\n+                }\n+            }\n+\n+            _ => {}\n         }\n         self.super_statement(statement, location)\n     }\n@@ -309,39 +379,6 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n         }\n     }\n \n-    fn visit_basic_block_data(&mut self, bb: BasicBlock, bbdata: &mut BasicBlockData<'tcx>) {\n-        self.super_basic_block_data(bb, bbdata);\n-\n-        #[derive(Debug)]\n-        enum Stmt {\n-            StorageLive,\n-            StorageDead,\n-            Deinit,\n-        }\n-\n-        bbdata.expand_statements(|stmt| {\n-            let source_info = stmt.source_info;\n-            let (stmt, origin_local) = match &stmt.kind {\n-                StatementKind::StorageLive(l) => (Stmt::StorageLive, *l),\n-                StatementKind::StorageDead(l) => (Stmt::StorageDead, *l),\n-                StatementKind::Deinit(p) if let Some(l) = p.as_local() => (Stmt::Deinit, l),\n-                _ => return None,\n-            };\n-            if !self.all_dead_locals.contains(origin_local) {\n-                return None;\n-            }\n-            let final_locals = self.fragments.get(origin_local)?;\n-            Some(final_locals.iter().map(move |&(_, l)| {\n-                let kind = match stmt {\n-                    Stmt::StorageLive => StatementKind::StorageLive(l),\n-                    Stmt::StorageDead => StatementKind::StorageDead(l),\n-                    Stmt::Deinit => StatementKind::Deinit(Box::new(l.into())),\n-                };\n-                Statement { source_info, kind }\n-            }))\n-        });\n-    }\n-\n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n         assert!(!self.all_dead_locals.contains(*local));\n     }"}, {"sha": "e14e586f34b0996ff90c53ec96a88b8330433010", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -8,8 +8,8 @@\n       let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n       let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n       let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n       scope 1 {\n -         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n +         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n@@ -35,12 +35,13 @@\n                               let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n                                   debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _15: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _16: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+                                      debug p => Point{ .0 => _15, .1 => _16, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      let _12: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n--                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+-                                         debug a => _12; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n +                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       }\n                                   }\n@@ -70,18 +71,11 @@\n           _10 = (const true, const false, const 123_u32); // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n           StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n           _11 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          _12 = Point { x: const 32_u32, y: const 32_u32 }; // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n-          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          _15 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _16 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_12);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+          _12 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n+          StorageDead(_12);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2"}, {"sha": "8bd589fb2c8770e34b9ebdb31459e6fb5cd280d3", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -4,18 +4,19 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _2: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => (i32, i32){ .1 => _5, .0 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                      debug z => _6;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n               }\n           }\n@@ -30,21 +31,17 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n--         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-+         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          _5 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          _6 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _5 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _3 = _5;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "691aa01a564080d31e64c2000fbbdff0394a91b4", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -9,15 +9,15 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           scope 2 {\n               debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n               let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+                  debug z => _9;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               }\n           }\n       }\n@@ -50,13 +50,7 @@\n +         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "81cfd22db6c5078732613b9243f7e4dfacc22d2a", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n                 debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n@@ -18,8 +18,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "87271f24fc4297800db72c7012e84cbbba3bfacd", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -10,6 +10,7 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -45,10 +46,17 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+-         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+-         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _10 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _8 = _10;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "002e914e8fa165b75ec467e5ddc10d15522fb26e", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    let mut _3: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n                 debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n@@ -18,8 +18,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2"}, {"sha": "e338f15b4853144be1b1019369f36759a6572516", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -4,25 +4,22 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n     let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n     let mut _2: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n-    let mut _7: i32;                     // in scope 0 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n     scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n         debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n         debug f => _2;                   // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n         let mut _3: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n         let _4: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         let mut _5: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        let mut _6: (i32,);              // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         scope 2 {\n             debug x => _4;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n             scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-                debug n => _7;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n+                debug n => _4;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n             }\n         }\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n-        StorageLive(_4);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:5: +1:22\n         _3 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n         switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n     }\n@@ -39,20 +36,13 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     bb3: {\n         _4 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        StorageLive(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _6 = (move _4,);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        StorageLive(_7);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _7 = move (_6.0: i32);           // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _5 = Add(_7, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        StorageDead(_7);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        StorageDead(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:28: 7:29\n+        _5 = Add(_4, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n         _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         StorageDead(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n         goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n     }\n \n     bb4: {\n-        StorageDead(_4);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:5: +1:22\n         StorageDead(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:21: +1:22\n         return;                          // scope 0 at $DIR/simple_option_map_e2e.rs:+2:2: +2:2\n     }"}, {"sha": "338ce262f1ec9aeec16a2e10ca0882fe94684565", "filename": "tests/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -10,6 +10,10 @@\n       let mut _5: Foo;                     // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n       let mut _6: ();                      // in scope 0 at $DIR/sroa.rs:+1:45: +1:47\n       let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:60: +1:68\n++     let mut _8: u8;                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _9: ();                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _10: &str;                   // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/sroa.rs:+1:15: +1:16\n           debug b => _2;                   // in scope 1 at $DIR/sroa.rs:+1:18: +1:19\n@@ -26,26 +30,45 @@\n       }\n   \n       bb0: {\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_9);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_10);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n           StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           _6 = ();                         // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n           StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n           _7 = Option::<isize>::Some(const -4_isize); // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n-          _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         _5 = Foo { a: const 5_u8, b: move _6, c: const \"a\", d: move _7 }; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _8 = const 5_u8;                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _9 = move _6;                    // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _10 = const \"a\";                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n                                            // mir::Constant\n                                            // + span: $DIR/sroa.rs:57:52: 57:55\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n++         _11 = move _7;                   // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n           StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n           StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n           StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n-          _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n+-         _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n++         _1 = _8;                         // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n           StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n-          _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n+-         _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n++         _2 = _9;                         // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n-          _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n+-         _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n++         _3 = _10;                        // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n           StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-          _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n+-         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         _4 = _11;                        // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n++         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_9);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_10);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n           _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +6:2\n           StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2"}, {"sha": "ca3cb3d8ed139ee6a01613184286c2f1f7b79eeb", "filename": "tests/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0843acbea6441d5d4a07576ba206ccc01949662a/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=0843acbea6441d5d4a07576ba206ccc01949662a", "patch": "@@ -6,15 +6,23 @@\n       let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n       let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n       let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n++     let mut _4: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+-         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n           _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-          _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+-         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _4 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n-          _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n+-         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n+-         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         _0 = _4;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n++         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n           return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n       }\n   }"}]}