{"sha": "8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzgxYTBlNGQ5ZDVlZGM3MmFmMGNmZmUzMWE3OGEwYmQyMTU2ZjI=", "commit": {"author": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-24T16:49:21Z"}, "committer": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-24T16:49:21Z"}, "message": "Refactor.", "tree": {"sha": "2b336937fc5fea7895ed2aa351db94c02fe82af9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b336937fc5fea7895ed2aa351db94c02fe82af9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2", "html_url": "https://github.com/rust-lang/rust/commit/8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2/comments", "author": null, "committer": null, "parents": [{"sha": "0e7489a2e9443069d5a7063f0b47d9923921f57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7489a2e9443069d5a7063f0b47d9923921f57f", "html_url": "https://github.com/rust-lang/rust/commit/0e7489a2e9443069d5a7063f0b47d9923921f57f"}], "stats": {"total": 80, "additions": 23, "deletions": 57}, "files": [{"sha": "d6b1e56316b3751d20cf1e5b07a5b33d208c9493", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 23, "deletions": 57, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=8bc81a0e4d9d5edc72af0cffe31a78a0bd2156f2", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, ItemKind, Node, StmtKind};\n+use rustc_hir::{Expr, ExprKind, ItemKind, Node, Stmt, StmtKind};\n use rustc_infer::infer;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n@@ -489,18 +489,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let found = self.resolve_vars_with_obligations(found);\n \n-        if self.in_loop(id) {\n-            if self.in_local_statement(id) {\n-                err.multipart_suggestion(\n-                    \"you might have meant to break the loop with this value\",\n-                    vec![\n-                        (expr.span.shrink_to_lo(), \"break \".to_string()),\n-                        (expr.span.shrink_to_hi(), \";\".to_string()),\n-                    ],\n-                    Applicability::MaybeIncorrect,\n-                );\n-                return;\n-            }\n+        let in_loop = self.is_loop(id)\n+            || self.tcx.hir().parent_iter(id).any(|(parent_id, _)| self.is_loop(parent_id));\n+\n+        let in_local_statement = self.is_local_statement(id)\n+            || self\n+                .tcx\n+                .hir()\n+                .parent_iter(id)\n+                .any(|(parent_id, _)| self.is_local_statement(parent_id));\n+\n+        if in_loop && in_local_statement {\n+            err.multipart_suggestion(\n+                \"you might have meant to break the loop with this value\",\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"break \".to_string()),\n+                    (expr.span.shrink_to_hi(), \";\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+            return;\n         }\n \n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n@@ -533,55 +541,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn in_loop(&self, id: hir::HirId) -> bool {\n-        if self.is_loop(id) {\n-            return true;\n-        }\n-\n-        for (parent_id, _) in self.tcx.hir().parent_iter(id) {\n-            if self.is_loop(parent_id) {\n-                return true;\n-            }\n-        }\n-\n-        false\n-    }\n-\n     fn is_loop(&self, id: hir::HirId) -> bool {\n         let node = self.tcx.hir().get(id);\n-\n-        if let Node::Expr(expr) = node {\n-            if let ExprKind::Loop(..) = expr.kind {\n-                return true;\n-            }\n-        }\n-\n-        false\n-    }\n-\n-    fn in_local_statement(&self, id: hir::HirId) -> bool {\n-        if self.is_local_statement(id) {\n-            return true;\n-        }\n-\n-        for (parent_id, _) in self.tcx.hir().parent_iter(id) {\n-            if self.is_local_statement(parent_id) {\n-                return true;\n-            }\n-        }\n-\n-        false\n+        matches!(node, Node::Expr(Expr { kind: ExprKind::Loop(..), .. }))\n     }\n \n     fn is_local_statement(&self, id: hir::HirId) -> bool {\n         let node = self.tcx.hir().get(id);\n-\n-        if let Node::Stmt(stmt) = node {\n-            if let StmtKind::Local(..) = stmt.kind {\n-                return true;\n-            }\n-        }\n-\n-        false\n+        matches!(node, Node::Stmt(Stmt { kind: StmtKind::Local(..), .. }))\n     }\n }"}]}