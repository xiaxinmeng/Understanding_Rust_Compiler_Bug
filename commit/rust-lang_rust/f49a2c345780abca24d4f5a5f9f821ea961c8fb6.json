{"sha": "f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "node_id": "C_kwDOAAsO6NoAKGY0OWEyYzM0NTc4MGFiY2EyNGQ0ZjVhNWY5ZjgyMWVhOTYxYzhmYjY", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T17:57:28Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T17:57:28Z"}, "message": "feat: add use_unwrap_or", "tree": {"sha": "535b1804bcd4c8f6282225374657ea59d6b3f042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535b1804bcd4c8f6282225374657ea59d6b3f042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmIzdogACgkQIPoWCbA7\nHW1FHA/5AWRS501erccNE/RO91GRJS0vYNOZjFLZNgpz9UdGWEY3XXUykYkzxkDf\njTINHesIHGO3McAgtqfkxhn07f8SIZ79LeqbpsSBP1+E8a+k0sW3n8pFXNg2N2Gp\nKfUPGVYiFAlwRKNJcv9qJg1WDZGWyRSqhPKYiOmvtUJJ/ZtOoleHl7H2zIT8rOyW\npiOx6oZHVcK/06HxFYe2zmYCh1NZFAcwdWi35SkEUGndR6B2/1+oqXWCTrIMlfQO\n5liRf+05A9RiyOQbnAQvisO9Ko/5xtscKA3K38yZSONIR4NQxQnFMkAUkBl+BTTT\njmdgM09Cebjb0UyvrM9mUJbpsirewCqseIJ/X/8hNG/C1HWLwN3Xs9pD6eycdfvY\nRaDn0pFteevEPDpSQLsIY9eLaSC9CeNeCBuxl+OePpFCdupTj0teYkNLG3HQzGyw\nJzoKzK8mY7pjlcf7nYER5Dxo7od0NXAOQf97MRqwPQyyRJuAE0jPA+GIjGPxVCfK\nmbgtG+EAuyLPsEfkpx9s3BqrbBe18DtI6mGHHSHvbCoSHyZSSaDJp0qJFs9+DQiw\nhV4byzkA1Ly1oo25kzyL35VFMc+nS5q77ei5mz4jdQyNHzYEm77RLEZ0bSt1yTyY\n+aY3SP2kwJk3cVy8v0ziXZgliSan5Nc9CpGYLlD/9D7xqHdc9aM=\n=cA1T\n-----END PGP SIGNATURE-----", "payload": "tree 535b1804bcd4c8f6282225374657ea59d6b3f042\nparent 65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d\nauthor Max Baumann <max@bmn.dev> 1647539848 +0100\ncommitter Max Baumann <max@bmn.dev> 1647539848 +0100\n\nfeat: add use_unwrap_or\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "html_url": "https://github.com/rust-lang/rust/commit/f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "html_url": "https://github.com/rust-lang/rust/commit/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "9475c674983c6ed97fd946bb6c16f92c6e083732", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -3538,6 +3538,7 @@ Released 2018-09-13\n [`upper_case_acronyms`]: https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self\n+[`use_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_unwrap_or\n [`used_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\n [`useless_asref`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_asref\n [`useless_attribute`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_attribute"}, {"sha": "a42f4cb6d70f37dddb43e4a257366223e9f92685", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -310,6 +310,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(unwrap::PANICKING_UNWRAP),\n     LintId::of(unwrap::UNNECESSARY_UNWRAP),\n     LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n+    LintId::of(use_unwrap_or::USE_UNWRAP_OR),\n     LintId::of(useless_conversion::USELESS_CONVERSION),\n     LintId::of(vec::USELESS_VEC),\n     LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),"}, {"sha": "94ff53c2a60b163b63fb74e84f1b544ea901d093", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -94,6 +94,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(unit_types::UNIT_ARG),\n     LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n     LintId::of(unwrap::UNNECESSARY_UNWRAP),\n+    LintId::of(use_unwrap_or::USE_UNWRAP_OR),\n     LintId::of(useless_conversion::USELESS_CONVERSION),\n     LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n ])"}, {"sha": "d1e13647e7e4057958336937bd17b6f95d951157", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -528,6 +528,7 @@ store.register_lints(&[\n     unwrap_in_result::UNWRAP_IN_RESULT,\n     upper_case_acronyms::UPPER_CASE_ACRONYMS,\n     use_self::USE_SELF,\n+    use_unwrap_or::USE_UNWRAP_OR,\n     useless_conversion::USELESS_CONVERSION,\n     vec::USELESS_VEC,\n     vec_init_then_push::VEC_INIT_THEN_PUSH,"}, {"sha": "9c9e9643bc966b59a080628d861371e0fbe40d5e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -394,6 +394,7 @@ mod unwrap;\n mod unwrap_in_result;\n mod upper_case_acronyms;\n mod use_self;\n+mod use_unwrap_or;\n mod useless_conversion;\n mod vec;\n mod vec_init_then_push;\n@@ -866,6 +867,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n+    store.register_late_pass(|| Box::new(use_unwrap_or::UseUnwrapOr));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "f42e28246d4238e32da0f53744fa9aaebcb6c997", "filename": "clippy_lints/src/use_unwrap_or.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -0,0 +1,105 @@\n+use if_chain::if_chain;\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{Span, sym};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `.or(\u2026).unwrap()` calls to Options and Results.\n+    ///\n+    /// ### Why is this bad?\n+    /// You should use `.unwrap_or(\u2026)` instead for clarity.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Result\n+    /// let port = result.or::<Error>(Ok(fallback)).unwrap();\n+    ///\n+    /// // Option\n+    /// let value = option.or(Some(fallback)).unwrap();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // Result\n+    /// let port = result.unwrap_or(fallback);\n+    ///\n+    /// // Option\n+    /// let value = option.unwrap_or(fallback);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub USE_UNWRAP_OR,\n+    complexity,\n+    \"checks for `.or(\u2026).unwrap()` calls to Options and Results.\"\n+}\n+declare_lint_pass!(UseUnwrapOr => [USE_UNWRAP_OR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+\n+        // look for x.or().unwrap()\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, args, unwrap_span) = expr.kind;\n+            if path.ident.name.as_str() == \"unwrap\";\n+            if let Some(caller) = args.first();\n+            if let ExprKind::MethodCall(caller_path, caller_args, or_span) = caller.kind;\n+            if caller_path.ident.name.as_str() == \"or\";\n+            then {\n+                let ty = cx.typeck_results().expr_ty(&caller_args[0]); // get type of x (we later check if it's Option or Result)\n+                let title;\n+                let arg = &caller_args[1]; // the argument or(xyz) is called with\n+\n+                if is_type_diagnostic_item(&cx, ty, sym::Option) {\n+                    title = \".or(Some(\u2026)).unwrap() found\";\n+                    if !is(arg, \"Some\") {\n+                        return;\n+                    }\n+\n+                } else if is_type_diagnostic_item(&cx, ty, sym::Result) {\n+                    title = \".or(Ok(\u2026)).unwrap() found\";\n+                    if !is(arg, \"Ok\") {\n+                        return;\n+                    }\n+                } else {\n+                    // Someone has implemented a struct with .or(...).unwrap() chaining,\n+                    // but it's not an Option or a Result, so bail\n+                    return;\n+                }\n+\n+                // span = or_span + unwrap_span\n+                let span = Span::new(or_span.lo(), unwrap_span.hi(), or_span.ctxt(), or_span.parent());\n+\n+                span_lint_and_help(\n+                    cx,\n+                    USE_UNWRAP_OR,\n+                    span,\n+                    title,\n+                    None,\n+                    \"use `unwrap_or()` instead\"\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+/// is expr a Call to name?\n+/// name might be \"Some\", \"Ok\", \"Err\", etc.\n+fn is<'a>(expr: &Expr<'a>, name: &str) -> bool {\n+    if_chain! {\n+        if let ExprKind::Call(some_expr, _some_args) = expr.kind;\n+        if let ExprKind::Path(path) = &some_expr.kind;\n+        if let QPath::Resolved(_, path) = path;\n+        if let Some(path_segment) = path.segments.first();\n+        if path_segment.ident.name.as_str() == name;\n+        then {\n+            return true;\n+        }\n+        else {\n+            return false;\n+        }\n+    }\n+}\n+"}, {"sha": "0bfabaae8852f17814d7be71099c7df0982a1379", "filename": "tests/ui/use_unwrap_or.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/tests%2Fui%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/tests%2Fui%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_unwrap_or.rs?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::use_unwrap_or)]\n+\n+struct SomeStruct {}\n+impl SomeStruct {\n+    fn or(self, _: Option<Self>) -> Self { self }\n+    fn unwrap(&self){}\n+}\n+\n+fn main() {\n+    let option: Option<&str> = None;\n+    let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n+\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n+\n+    // Not Option/Result\n+    let instance = SomeStruct {};\n+    let _ = instance.or(Some(SomeStruct {})).unwrap(); // should not trigger lint\n+\n+    // None in or\n+    let option: Option<&str> = None;\n+    let _ = option.or(None).unwrap(); // should not trigger lint\n+\n+    // Not Err in or\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.or::<&str>(Err(\"Other Error\")).unwrap(); // should not trigger lint\n+}"}, {"sha": "5bbba41f7ac4ec6539d47dceb5e7e1a98239f5d5", "filename": "tests/ui/use_unwrap_or.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/tests%2Fui%2Fuse_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49a2c345780abca24d4f5a5f9f821ea961c8fb6/tests%2Fui%2Fuse_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_unwrap_or.stderr?ref=f49a2c345780abca24d4f5a5f9f821ea961c8fb6", "patch": "@@ -0,0 +1,19 @@\n+error: .or(Some(\u2026)).unwrap() found\n+  --> $DIR/use_unwrap_or.rs:11:20\n+   |\n+LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::use-unwrap-or` implied by `-D warnings`\n+   = help: use `unwrap_or()` instead\n+\n+error: .or(Ok(\u2026)).unwrap() found\n+  --> $DIR/use_unwrap_or.rs:14:20\n+   |\n+LL |     let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `unwrap_or()` instead\n+\n+error: aborting due to 2 previous errors\n+"}]}