{"sha": "6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTdlOGM5NzhiMWUzNTRlMjEwZGU2YWJlNTBkNmQ1YmMxYTc3Y2I=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-06T13:18:05Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-06T13:45:19Z"}, "message": "Remove the Ord bound that was plaguing drain_filter, and superfluous lifetimes", "tree": {"sha": "536069a9be7a633714ad0fc42ac521afd84b1a34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/536069a9be7a633714ad0fc42ac521afd84b1a34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "html_url": "https://github.com/rust-lang/rust/commit/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af89eb5e5beda2c1de0c0c031694892a51e8db07", "url": "https://api.github.com/repos/rust-lang/rust/commits/af89eb5e5beda2c1de0c0c031694892a51e8db07", "html_url": "https://github.com/rust-lang/rust/commit/af89eb5e5beda2c1de0c0c031694892a51e8db07"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "7809a70c4c733a50b257ab11cfc1491cf7493e77", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "patch": "@@ -1699,52 +1699,44 @@ impl<K, V> Clone for Values<'_, K, V> {\n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n pub struct DrainFilter<'a, K, V, F>\n where\n-    K: 'a + Ord, // This Ord bound should be removed before stabilization.\n+    K: 'a,\n     V: 'a,\n     F: 'a + FnMut(&K, &mut V) -> bool,\n {\n     pred: F,\n     inner: DrainFilterInner<'a, K, V>,\n }\n-pub(super) struct DrainFilterInner<'a, K, V>\n-where\n-    K: 'a + Ord,\n-    V: 'a,\n-{\n+pub(super) struct DrainFilterInner<'a, K: 'a, V: 'a> {\n     length: &'a mut usize,\n     cur_leaf_edge: Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, K, V, F> Drop for DrainFilter<'a, K, V, F>\n+impl<K, V, F> Drop for DrainFilter<'_, K, V, F>\n where\n-    K: 'a + Ord,\n-    V: 'a,\n-    F: 'a + FnMut(&K, &mut V) -> bool,\n+    F: FnMut(&K, &mut V) -> bool,\n {\n     fn drop(&mut self) {\n         self.for_each(drop);\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, K, V, F> fmt::Debug for DrainFilter<'a, K, V, F>\n+impl<K, V, F> fmt::Debug for DrainFilter<'_, K, V, F>\n where\n-    K: 'a + fmt::Debug + Ord,\n-    V: 'a + fmt::Debug,\n-    F: 'a + FnMut(&K, &mut V) -> bool,\n+    K: fmt::Debug,\n+    V: fmt::Debug,\n+    F: FnMut(&K, &mut V) -> bool,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"DrainFilter\").field(&self.inner.peek()).finish()\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, K, V, F> Iterator for DrainFilter<'a, K, V, F>\n+impl<K, V, F> Iterator for DrainFilter<'_, K, V, F>\n where\n-    K: 'a + Ord,\n-    V: 'a,\n-    F: 'a + FnMut(&K, &mut V) -> bool,\n+    F: FnMut(&K, &mut V) -> bool,\n {\n     type Item = (K, V);\n \n@@ -1757,11 +1749,7 @@ where\n     }\n }\n \n-impl<'a, K, V> DrainFilterInner<'a, K, V>\n-where\n-    K: 'a + Ord,\n-    V: 'a,\n-{\n+impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     /// Allow Debug implementations to predict the next element.\n     pub(super) fn peek(&self) -> Option<(&K, &V)> {\n         let edge = self.cur_leaf_edge.as_ref()?;\n@@ -1800,12 +1788,7 @@ where\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<K, V, F> FusedIterator for DrainFilter<'_, K, V, F>\n-where\n-    K: Ord,\n-    F: FnMut(&K, &mut V) -> bool,\n-{\n-}\n+impl<K, V, F> FusedIterator for DrainFilter<'_, K, V, F> where F: FnMut(&K, &mut V) -> bool {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> Iterator for Range<'a, K, V> {"}, {"sha": "9bf483f269f6e6785913dd199619def693dc69e6", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=6ee7e8c978b1e354e210de6abe50d6d5bc1a77cb", "patch": "@@ -1094,40 +1094,38 @@ impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n pub struct DrainFilter<'a, T, F>\n where\n-    T: 'a + Ord,\n+    T: 'a,\n     F: 'a + FnMut(&T) -> bool,\n {\n     pred: F,\n     inner: super::map::DrainFilterInner<'a, T, ()>,\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, T, F> Drop for DrainFilter<'a, T, F>\n+impl<T, F> Drop for DrainFilter<'_, T, F>\n where\n-    T: 'a + Ord,\n-    F: 'a + FnMut(&T) -> bool,\n+    F: FnMut(&T) -> bool,\n {\n     fn drop(&mut self) {\n         self.for_each(drop);\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, T, F> fmt::Debug for DrainFilter<'a, T, F>\n+impl<T, F> fmt::Debug for DrainFilter<'_, T, F>\n where\n-    T: 'a + Ord + fmt::Debug,\n-    F: 'a + FnMut(&T) -> bool,\n+    T: fmt::Debug,\n+    F: FnMut(&T) -> bool,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"DrainFilter\").field(&self.inner.peek().map(|(k, _)| k)).finish()\n     }\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, 'f, T, F> Iterator for DrainFilter<'a, T, F>\n+impl<'a, T, F> Iterator for DrainFilter<'_, T, F>\n where\n-    T: 'a + Ord,\n-    F: 'a + 'f + FnMut(&T) -> bool,\n+    F: 'a + FnMut(&T) -> bool,\n {\n     type Item = T;\n \n@@ -1143,12 +1141,7 @@ where\n }\n \n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n-impl<'a, T, F> FusedIterator for DrainFilter<'a, T, F>\n-where\n-    T: 'a + Ord,\n-    F: 'a + FnMut(&T) -> bool,\n-{\n-}\n+impl<T, F> FusedIterator for DrainFilter<'_, T, F> where F: FnMut(&T) -> bool {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BTreeSet<T> {"}]}