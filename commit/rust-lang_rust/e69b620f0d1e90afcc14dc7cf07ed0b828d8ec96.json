{"sha": "e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWI2MjBmMGQxZTkwYWZjYzE0ZGM3Y2YwN2VkMGI4MjhkOGVjOTY=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-16T18:30:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:27Z"}, "message": "add missing Task::HandleChange", "tree": {"sha": "89a499f4cd50e1d1ebadbf8c7a9f0a5e777cbc7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a499f4cd50e1d1ebadbf8c7a9f0a5e777cbc7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "html_url": "https://github.com/rust-lang/rust/commit/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd8ccefa4fd1abbf674f479f0dd7d0457c94d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd8ccefa4fd1abbf674f479f0dd7d0457c94d2d", "html_url": "https://github.com/rust-lang/rust/commit/abd8ccefa4fd1abbf674f479f0dd7d0457c94d2d"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "e5d5c6463e68a16126f9e3bbe0ee0751dab818e6", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "patch": "@@ -15,7 +15,8 @@ pub(crate) enum Task {\n         path: PathBuf,\n         filter: Box<Fn(&DirEntry) -> bool + Send>,\n     },\n-    LoadChange(crate::watcher::WatcherChange),\n+    HandleChange(WatcherChange),\n+    LoadChange(WatcherChange),\n }\n \n #[derive(Debug)]\n@@ -63,6 +64,10 @@ fn handle_task(task: Task) -> TaskResult {\n             log::debug!(\"... loaded {}\", path.as_path().display());\n             TaskResult::AddRoot(AddRootResult { root, files })\n         }\n+        Task::HandleChange(change) => {\n+            // forward as is because Vfs has to decide if we should load it\n+            TaskResult::HandleChange(change)\n+        }\n         Task::LoadChange(change) => {\n             log::debug!(\"loading {:?} ...\", change);\n             let data = load_change(change);\n@@ -107,7 +112,7 @@ fn load_change(change: WatcherChange) -> Option<WatcherChangeData> {\n             let text = match fs::read_to_string(&path) {\n                 Ok(text) => text,\n                 Err(e) => {\n-                    log::warn!(\"watcher error: {}\", e);\n+                    log::warn!(\"watcher error \\\"{}\\\": {}\", path.display(), e);\n                     return None;\n                 }\n             };\n@@ -117,7 +122,7 @@ fn load_change(change: WatcherChange) -> Option<WatcherChangeData> {\n             let text = match fs::read_to_string(&path) {\n                 Ok(text) => text,\n                 Err(e) => {\n-                    log::warn!(\"watcher error: {}\", e);\n+                    log::warn!(\"watcher error \\\"{}\\\": {}\", path.display(), e);\n                     return None;\n                 }\n             };"}, {"sha": "48a46d21064286c1837ae4e39ca572024402e2b1", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "patch": "@@ -266,6 +266,7 @@ impl Vfs {\n             if let Some(file) = file {\n                 if self.files[file].is_overlayed {\n                     // file is overlayed\n+                    log::debug!(\"skipping overlayed \\\"{}\\\"\", path.display());\n                     return false;\n                 }\n             }"}, {"sha": "dfbbcbfe6758bb390ccaa2c7e5da1a4fabb2dbfb", "filename": "crates/ra_vfs/src/watcher.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Fsrc%2Fwatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Fsrc%2Fwatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fwatcher.rs?ref=e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "patch": "@@ -35,24 +35,24 @@ fn send_change_events(\n             // ignore\n         }\n         DebouncedEvent::Rescan => {\n-            sender.send(io::Task::LoadChange(WatcherChange::Rescan))?;\n+            sender.send(io::Task::HandleChange(WatcherChange::Rescan))?;\n         }\n         DebouncedEvent::Create(path) => {\n-            sender.send(io::Task::LoadChange(WatcherChange::Create(path)))?;\n+            sender.send(io::Task::HandleChange(WatcherChange::Create(path)))?;\n         }\n         DebouncedEvent::Write(path) => {\n-            sender.send(io::Task::LoadChange(WatcherChange::Write(path)))?;\n+            sender.send(io::Task::HandleChange(WatcherChange::Write(path)))?;\n         }\n         DebouncedEvent::Remove(path) => {\n-            sender.send(io::Task::LoadChange(WatcherChange::Remove(path)))?;\n+            sender.send(io::Task::HandleChange(WatcherChange::Remove(path)))?;\n         }\n         DebouncedEvent::Rename(src, dst) => {\n-            sender.send(io::Task::LoadChange(WatcherChange::Remove(src)))?;\n-            sender.send(io::Task::LoadChange(WatcherChange::Create(dst)))?;\n+            sender.send(io::Task::HandleChange(WatcherChange::Remove(src)))?;\n+            sender.send(io::Task::HandleChange(WatcherChange::Create(dst)))?;\n         }\n         DebouncedEvent::Error(err, path) => {\n             // TODO should we reload the file contents?\n-            log::warn!(\"watcher error {}, {:?}\", err, path);\n+            log::warn!(\"watcher error \\\"{}\\\", {:?}\", err, path);\n         }\n     }\n     Ok(())"}, {"sha": "8266a0bd5b075895feac4c81ba38841da4a9b687", "filename": "crates/ra_vfs/tests/vfs.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Ftests%2Fvfs.rs?ref=e69b620f0d1e90afcc14dc7cf07ed0b828d8ec96", "patch": "@@ -62,23 +62,24 @@ fn test_vfs_works() -> std::io::Result<()> {\n     }\n \n     fs::write(&dir.path().join(\"a/b/baz.rs\"), \"quux\").unwrap();\n-    process_tasks(&mut vfs, 1);\n+    // 2 tasks per watcher change, first for HandleChange then for LoadChange\n+    process_tasks(&mut vfs, 2);\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::ChangeFile { text, .. }] => assert_eq!(text.as_str(), \"quux\"),\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     vfs.change_file_overlay(&dir.path().join(\"a/b/baz.rs\"), \"m\".to_string());\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::ChangeFile { text, .. }] => assert_eq!(text.as_str(), \"m\"),\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     // removing overlay restores data on disk\n     vfs.remove_file_overlay(&dir.path().join(\"a/b/baz.rs\"));\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::ChangeFile { text, .. }] => assert_eq!(text.as_str(), \"quux\"),\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     vfs.add_file_overlay(&dir.path().join(\"a/b/spam.rs\"), \"spam\".to_string());\n@@ -87,27 +88,27 @@ fn test_vfs_works() -> std::io::Result<()> {\n             assert_eq!(text.as_str(), \"spam\");\n             assert_eq!(path, \"spam.rs\");\n         }\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     vfs.remove_file_overlay(&dir.path().join(\"a/b/spam.rs\"));\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::RemoveFile { path, .. }] => assert_eq!(path, \"spam.rs\"),\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     fs::write(&dir.path().join(\"a/new.rs\"), \"new hello\").unwrap();\n-    process_tasks(&mut vfs, 1);\n+    process_tasks(&mut vfs, 2);\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::AddFile { text, path, .. }] => {\n             assert_eq!(text.as_str(), \"new hello\");\n             assert_eq!(path, \"new.rs\");\n         }\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     fs::rename(&dir.path().join(\"a/new.rs\"), &dir.path().join(\"a/new1.rs\")).unwrap();\n-    process_tasks(&mut vfs, 2);\n+    process_tasks(&mut vfs, 4);\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::RemoveFile {\n             path: removed_path, ..\n@@ -124,10 +125,10 @@ fn test_vfs_works() -> std::io::Result<()> {\n     }\n \n     fs::remove_file(&dir.path().join(\"a/new1.rs\")).unwrap();\n-    process_tasks(&mut vfs, 1);\n+    process_tasks(&mut vfs, 2);\n     match vfs.commit_changes().as_slice() {\n         [VfsChange::RemoveFile { path, .. }] => assert_eq!(path, \"new1.rs\"),\n-        _ => panic!(\"unexpected changes\"),\n+        xs => panic!(\"unexpected changes {:?}\", xs),\n     }\n \n     match vfs.task_receiver().try_recv() {"}]}