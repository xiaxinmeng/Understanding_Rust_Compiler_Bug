{"sha": "738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b", "node_id": "C_kwDOAAsO6NoAKDczOGM0YmYxNzZjYzJiYWU5ZDUxZTE5YjI5MmY4ZjVmMWNlNGZkMGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T07:13:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T07:13:27Z"}, "message": "Rollup merge of #109013 - Nilstrieb:obscurity-is-not-a-necessity, r=fee1-dead\n\nGive proper error message when tcx wasn't passed to decoder\n\nI hit this yesterday and found it very confusing, even though the solution to the problem is very simple.", "tree": {"sha": "41e9925dd293cdd76a8acc1d1304dacc85a18ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e9925dd293cdd76a8acc1d1304dacc85a18ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDXuXCRBK7hj4Ov3rIwAA1NQIALMUlEUXF3fCZnBj5dbTNahw\nKX0S6blELBpCAlyt6s6PX1Nc3RXxFK7leJk5vZ96ZrzFLV07MZp09rfmiVEkzdQD\nCGn4MMuS0wwQEiFn26zVeAw23ACOEwityKO5dFT7gRCZvBPc3TXw6z8EKavpYll/\nAGsJr5fauxmnMLleu/WcknjeCyVhjf/5u5p8BHuUDstSdWW2Uq4+cCVkJxyUBF6g\n0LqLc4oVO56MdeM5uVuHYK1DEPcl/4MzA3ah8rN69QuBQxh2Mb1MEdr5TcRlJuDx\nsK2NypErGoFYm0Tnsj+sr8YgrOsAmfMsTAxJjkwJvpDD5/iZrUn/vya2sK8DUHY=\n=ZHzq\n-----END PGP SIGNATURE-----\n", "payload": "tree 41e9925dd293cdd76a8acc1d1304dacc85a18ce5\nparent 0b0f33476450cd5ac16b679f84da3b0d9731dc0b\nparent b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678605207 +0100\ncommitter GitHub <noreply@github.com> 1678605207 +0100\n\nRollup merge of #109013 - Nilstrieb:obscurity-is-not-a-necessity, r=fee1-dead\n\nGive proper error message when tcx wasn't passed to decoder\n\nI hit this yesterday and found it very confusing, even though the solution to the problem is very simple.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b", "html_url": "https://github.com/rust-lang/rust/commit/738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0f33476450cd5ac16b679f84da3b0d9731dc0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0f33476450cd5ac16b679f84da3b0d9731dc0b", "html_url": "https://github.com/rust-lang/rust/commit/0b0f33476450cd5ac16b679f84da3b0d9731dc0b"}, {"sha": "b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d", "html_url": "https://github.com/rust-lang/rust/commit/b7a7077ba44b0d0ea561c0210dbc02f42cb0fc6d"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "771fb0911343715276c3eba48b9c32e65e379253", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=738c4bf176cc2bae9d51e19b292f8f5f1ce4fd0b", "patch": "@@ -311,8 +311,11 @@ impl<T: ParameterizedOverTcx> LazyArray<T> {\n impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n-        debug_assert!(self.tcx.is_some(), \"missing TyCtxt in DecodeContext\");\n-        self.tcx.unwrap()\n+        let Some(tcx) = self.tcx else {\n+            bug!(\"No TyCtxt found for decoding. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n+        tcx\n     }\n \n     #[inline]\n@@ -454,7 +457,12 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ast::AttrId {\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {\n         let cdata = decoder.cdata();\n-        let sess = decoder.sess.unwrap();\n+\n+        let Some(sess) = decoder.sess else {\n+            bug!(\"Cannot decode SyntaxContext without Session.\\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n+\n         let cname = cdata.root.name;\n         rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {\n             debug!(\"SpecializedDecoder<SyntaxContext>: decoding {}\", id);\n@@ -471,7 +479,11 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {\n         let local_cdata = decoder.cdata();\n-        let sess = decoder.sess.unwrap();\n+\n+        let Some(sess) = decoder.sess else {\n+            bug!(\"Cannot decode ExpnId without Session. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n+        };\n \n         let cnum = CrateNum::decode(decoder);\n         let index = u32::decode(decoder);\n@@ -520,7 +532,8 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n         let hi = lo + len;\n \n         let Some(sess) = decoder.sess else {\n-            bug!(\"Cannot decode Span without Session.\")\n+            bug!(\"Cannot decode Span without Session. \\\n+                You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\")\n         };\n \n         // Index of the file in the corresponding crate's list of encoded files."}]}