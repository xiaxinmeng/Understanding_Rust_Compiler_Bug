{"sha": "9e69dbce1993862539ef5fb4c53d09e0f1b73536", "node_id": "C_kwDOAAsO6NoAKDllNjlkYmNlMTk5Mzg2MjUzOWVmNWZiNGM1M2QwOWUwZjFiNzM1MzY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-12T15:09:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-12T15:09:14Z"}, "message": "Rollup merge of #100366 - davidtwco:translation-never-fail, r=compiler-errors\n\nerrors: don't fail on broken primary translations\n\nIf a primary bundle doesn't contain a message then the fallback bundle is used. However, if the primary bundle's message is broken (e.g. it refers to a interpolated variable that the compiler isn't providing) then this would just result in a compiler panic. While there aren't any primary bundles right now, this is the type of issue that could come up once translation is further along.\n\nr? ```@compiler-errors``` (since this comes out of a in-person discussion we had at RustConf)", "tree": {"sha": "2d429f40d017abe6f4276e92a5cff0fb870dafc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d429f40d017abe6f4276e92a5cff0fb870dafc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e69dbce1993862539ef5fb4c53d09e0f1b73536", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9m0aCRBK7hj4Ov3rIwAAPeoIAGJHGD7CU14brfnYgcwamnaf\n3To3ofBW6OcPqbc57pCdKyCDyJWtm8LlH6VzQzLYbsSBujNGdEWT9Uotd9jTdD81\nk1qTjjWd2J3I6OArLjEiHq41uc8ZKRIR3CSLk8pruWFndaXXa3dN9OChGDl6/9dq\n2tx2vQdkwXe69FDioY0WYDE3IUaAIrPLF2AlRhq0AyF/S5eVtuXkxsYMFtAfe+3v\nSUXrlNk1RovoKHzY8HsLY5UmlaplWrF8faEI5L5XDsI5vwoaPKCQSdEi+jqYXOzN\nenS1TSyVde2d67g+phkWcn5IuTuN60UdCGDUM0mFSOqCMmdfLBKISNYw3G9IgpE=\n=SvJF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d429f40d017abe6f4276e92a5cff0fb870dafc8\nparent da3b89d0bf8166936d73e48dce23157f389d51e3\nparent 2eebd34cd50c1486024da06d24415781af3a0a54\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660316954 +0530\ncommitter GitHub <noreply@github.com> 1660316954 +0530\n\nRollup merge of #100366 - davidtwco:translation-never-fail, r=compiler-errors\n\nerrors: don't fail on broken primary translations\n\nIf a primary bundle doesn't contain a message then the fallback bundle is used. However, if the primary bundle's message is broken (e.g. it refers to a interpolated variable that the compiler isn't providing) then this would just result in a compiler panic. While there aren't any primary bundles right now, this is the type of issue that could come up once translation is further along.\n\nr? ```@compiler-errors``` (since this comes out of a in-person discussion we had at RustConf)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e69dbce1993862539ef5fb4c53d09e0f1b73536", "html_url": "https://github.com/rust-lang/rust/commit/9e69dbce1993862539ef5fb4c53d09e0f1b73536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e69dbce1993862539ef5fb4c53d09e0f1b73536/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da3b89d0bf8166936d73e48dce23157f389d51e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3b89d0bf8166936d73e48dce23157f389d51e3", "html_url": "https://github.com/rust-lang/rust/commit/da3b89d0bf8166936d73e48dce23157f389d51e3"}, {"sha": "2eebd34cd50c1486024da06d24415781af3a0a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eebd34cd50c1486024da06d24415781af3a0a54", "html_url": "https://github.com/rust-lang/rust/commit/2eebd34cd50c1486024da06d24415781af3a0a54"}], "stats": {"total": 114, "additions": 76, "deletions": 38}, "files": [{"sha": "753e2f07c042eb81cf74b4b961d1fbf88cb44645", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "patch": "@@ -273,40 +273,58 @@ pub trait Emitter {\n             DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n         };\n \n-        let bundle = match self.fluent_bundle() {\n-            Some(bundle) if bundle.has_message(&identifier) => bundle,\n-            _ => self.fallback_fluent_bundle(),\n-        };\n+        let translate_with_bundle = |bundle: &'a FluentBundle| -> Option<(Cow<'_, str>, Vec<_>)> {\n+            let message = bundle.get_message(&identifier)?;\n+            let value = match attr {\n+                Some(attr) => message.get_attribute(attr)?.value(),\n+                None => message.value()?,\n+            };\n+            debug!(?message, ?value);\n \n-        let message = bundle.get_message(&identifier).expect(\"missing diagnostic in fluent bundle\");\n-        let value = match attr {\n-            Some(attr) => {\n-                if let Some(attr) = message.get_attribute(attr) {\n-                    attr.value()\n-                } else {\n-                    panic!(\"missing attribute `{attr}` in fluent message `{identifier}`\")\n-                }\n-            }\n-            None => {\n-                if let Some(value) = message.value() {\n-                    value\n-                } else {\n-                    panic!(\"missing value in fluent message `{identifier}`\")\n-                }\n-            }\n+            let mut errs = vec![];\n+            let translated = bundle.format_pattern(value, Some(&args), &mut errs);\n+            debug!(?translated, ?errs);\n+            Some((translated, errs))\n         };\n \n-        let mut err = vec![];\n-        let translated = bundle.format_pattern(value, Some(&args), &mut err);\n-        trace!(?translated, ?err);\n-        debug_assert!(\n-            err.is_empty(),\n-            \"identifier: {:?}, args: {:?}, errors: {:?}\",\n-            identifier,\n-            args,\n-            err\n-        );\n-        translated\n+        self.fluent_bundle()\n+            .and_then(|bundle| translate_with_bundle(bundle))\n+            // If `translate_with_bundle` returns `None` with the primary bundle, this is likely\n+            // just that the primary bundle doesn't contain the message being translated, so\n+            // proceed to the fallback bundle.\n+            //\n+            // However, when errors are produced from translation, then that means the translation\n+            // is broken (e.g. `{$foo}` exists in a translation but `foo` isn't provided).\n+            //\n+            // In debug builds, assert so that compiler devs can spot the broken translation and\n+            // fix it..\n+            .inspect(|(_, errs)| {\n+                debug_assert!(\n+                    errs.is_empty(),\n+                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n+                    identifier,\n+                    attr,\n+                    args,\n+                    errs\n+                );\n+            })\n+            // ..otherwise, for end users, an error about this wouldn't be useful or actionable, so\n+            // just hide it and try with the fallback bundle.\n+            .filter(|(_, errs)| errs.is_empty())\n+            .or_else(|| translate_with_bundle(self.fallback_fluent_bundle()))\n+            .map(|(translated, errs)| {\n+                // Always bail out for errors with the fallback bundle.\n+                assert!(\n+                    errs.is_empty(),\n+                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n+                    identifier,\n+                    attr,\n+                    args,\n+                    errs\n+                );\n+                translated\n+            })\n+            .expect(\"failed to find message in primary or fallback fluent bundles\")\n     }\n \n     /// Formats the substitutions of the primary_span"}, {"sha": "f83e972efd56ec23e783ac898af6cfadf72fc91f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "patch": "@@ -6,9 +6,10 @@\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(let_chains))]\n+#![feature(adt_const_params)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![feature(adt_const_params)]\n+#![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n #![allow(incomplete_features)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "20e86c7f9a0721a127439132cb4b9adf25f6147b", "filename": "src/test/run-make/translation/Makefile", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "patch": "@@ -9,16 +9,29 @@ FAKEROOT=$(TMPDIR)/fakeroot\n \n all: normal custom sysroot\n \n-normal: basic-translation.rs\n+# Check that the test works normally, using the built-in fallback bundle.\n+normal: test.rs\n \t$(RUSTC) $< 2>&1 | grep \"struct literal body without path\"\n \n-custom: basic-translation.rs basic-translation.ftl\n-\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/basic-translation.ftl 2>&1 | grep \"this is a test message\"\n+# Check that a primary bundle can be loaded and will be preferentially used\n+# where possible.\n+custom: test.rs working.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/working.ftl 2>&1 | grep \"this is a test message\"\n+\n+# Check that a primary bundle with a broken message (e.g. a interpolated\n+# variable is missing) will use the fallback bundle.\n+missing: test.rs missing.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/missing.ftl 2>&1 | grep \"struct literal body without path\"\n+\n+# Check that a primary bundle without the desired message will use the fallback\n+# bundle.\n+broken: test.rs broken.ftl\n+\t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/broken.ftl 2>&1 | grep \"struct literal body without path\"\n \n # Check that a locale can be loaded from the sysroot given a language\n # identifier by making a local copy of the sysroot and adding the custom locale\n # to it.\n-sysroot: basic-translation.rs basic-translation.ftl\n+sysroot: test.rs working.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n \trm -f $(FAKEROOT)/lib\n@@ -31,7 +44,7 @@ sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir $(FAKEROOT)/lib/rustlib/src\n \tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n-\tln -s $(CURDIR)/basic-translation.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n+\tln -s $(CURDIR)/working.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n \t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\"\n \n # Check that the compiler errors out when the sysroot requested cannot be\n@@ -43,7 +56,7 @@ sysroot-missing:\n # Check that the compiler errors out when the sysroot requested cannot be\n # found. This test might start failing if there actually exists a Klingon\n # translation of rustc's error messages.\n-sysroot-invalid: basic-translation.rs basic-translation.ftl\n+sysroot-invalid: test.rs working.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n \trm -f $(FAKEROOT)/lib"}, {"sha": "1482dd2824aed6a0e42931912ddc4bbd0ef502c4", "filename": "src/test/run-make/translation/broken.ftl", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "patch": "@@ -0,0 +1,3 @@\n+# `foo` isn't provided by this diagnostic so it is expected that the fallback message is used.\n+parser-struct-literal-body-without-path = this is a {$foo} message\n+    .suggestion = this is a test suggestion"}, {"sha": "43076b1d6ae79b3335b2af99235a6f4a18fd42bf", "filename": "src/test/run-make/translation/missing.ftl", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "patch": "@@ -0,0 +1,3 @@\n+# `parser-struct-literal-body-without-path` isn't provided by this resource at all, so the\n+# fallback should be used.\n+foo = bar"}, {"sha": "b8f5bff315337cba90a3b6a1feebf7efb90c2c03", "filename": "src/test/run-make/translation/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Ftest.rs?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "previous_filename": "src/test/run-make/translation/basic-translation.rs"}, {"sha": "4681b879cda6a3deb25d9474a2d0efec0e9183cc", "filename": "src/test/run-make/translation/working.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9e69dbce1993862539ef5fb4c53d09e0f1b73536/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl?ref=9e69dbce1993862539ef5fb4c53d09e0f1b73536", "previous_filename": "src/test/run-make/translation/basic-translation.ftl"}]}