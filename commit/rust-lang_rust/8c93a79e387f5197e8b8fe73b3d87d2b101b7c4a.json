{"sha": "8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTNhNzllMzg3ZjUxOTdlOGI4ZmU3M2IzZDg3ZDJiMTAxYjdjNGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-22T20:13:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-23T21:40:26Z"}, "message": "rustdoc: Replace no-pretty-expanded with pretty-expanded\n\nNow that features must be declared expanded source often does not compile.\nThis adds 'pretty-expanded' to a bunch of test cases that still work.", "tree": {"sha": "d2cb1326e0e65d1a271f77452f3ad1b64386d7ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2cb1326e0e65d1a271f77452f3ad1b64386d7ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "html_url": "https://github.com/rust-lang/rust/commit/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "html_url": "https://github.com/rust-lang/rust/commit/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22"}], "stats": {"total": 3105, "additions": 3093, "deletions": 12}, "files": [{"sha": "7488b968349047ec267fa077b394627b998b0c8b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -40,8 +40,8 @@ pub struct TestProps {\n     pub check_stdout: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n     pub no_prefer_dynamic: bool,\n-    // Don't run --pretty expanded when running pretty printing tests\n-    pub no_pretty_expanded: bool,\n+    // Run --pretty expanded when running pretty printing tests\n+    pub pretty_expanded: bool,\n     // Which pretty mode are we testing with, default to 'normal'\n     pub pretty_mode: String,\n     // Only compare pretty output and don't try compiling\n@@ -62,7 +62,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut force_host = false;\n     let mut check_stdout = false;\n     let mut no_prefer_dynamic = false;\n-    let mut no_pretty_expanded = false;\n+    let mut pretty_expanded = false;\n     let mut pretty_mode = None;\n     let mut pretty_compare_only = false;\n     let mut forbid_output = Vec::new();\n@@ -96,8 +96,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             no_prefer_dynamic = parse_no_prefer_dynamic(ln);\n         }\n \n-        if !no_pretty_expanded {\n-            no_pretty_expanded = parse_no_pretty_expanded(ln);\n+        if !pretty_expanded {\n+            pretty_expanded = parse_pretty_expanded(ln);\n         }\n \n         if pretty_mode.is_none() {\n@@ -152,7 +152,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         force_host: force_host,\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n-        no_pretty_expanded: no_pretty_expanded,\n+        pretty_expanded: pretty_expanded,\n         pretty_mode: pretty_mode.unwrap_or(\"normal\".to_string()),\n         pretty_compare_only: pretty_compare_only,\n         forbid_output: forbid_output,\n@@ -295,8 +295,8 @@ fn parse_no_prefer_dynamic(line: &str) -> bool {\n     parse_name_directive(line, \"no-prefer-dynamic\")\n }\n \n-fn parse_no_pretty_expanded(line: &str) -> bool {\n-    parse_name_directive(line, \"no-pretty-expanded\")\n+fn parse_pretty_expanded(line: &str) -> bool {\n+    parse_name_directive(line, \"pretty-expanded\")\n }\n \n fn parse_pretty_mode(line: &str) -> Option<String> {\n@@ -340,7 +340,8 @@ fn parse_pp_exact(line: &str, testfile: &Path) -> Option<PathBuf> {\n }\n \n fn parse_name_directive(line: &str, directive: &str) -> bool {\n-    line.contains(directive)\n+    // This 'no-' rule is a quick hack to allow pretty-expanded and no-pretty-expanded to coexist\n+    line.contains(directive) && !line.contains(&(\"no-\".to_string() + directive))\n }\n \n pub fn parse_name_value_directive(line: &str, directive: &str)"}, {"sha": "26bf95c0bf14b5136d7798bd8e28b2c7bb56ca8e", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -245,7 +245,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if !proc_res.status.success() {\n         fatal_proc_rec(\"pretty-printed source does not typecheck\", &proc_res);\n     }\n-    if props.no_pretty_expanded { return }\n+    if !props.pretty_expanded { return }\n \n     // additionally, run `--pretty expanded` and try to build it.\n     let proc_res = print_source(config, props, testfile, srcs[round].clone(), \"expanded\");"}, {"sha": "f6ff0415259af06782de1001a72693bb095f9c70", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n \n // Regression test for issue #374\n \n+// pretty-expanded FIXME #23616\n+\n enum sty { ty_nil, }\n \n struct RawT {struct_: sty, cname: Option<String>, hash: uint}"}, {"sha": "cd649310ae78406f12d0748f01693cf2e56e87d3", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n enum option<T> { some(T), none, }\n \n struct R<T> {v: Vec<option<T>> }"}, {"sha": "b40774e2be82fcff268e35176eb9426b36907fa0", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:anon-extern-mod-cross-crate-1.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate anonexternmod;\n \n use anonexternmod::rust_get_test_int;"}, {"sha": "e96b0cc1442c64ee33556d1bf1baeca09c3f4cbd", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(libc)]\n \n extern crate libc;"}, {"sha": "2428d45256d518b4a0561e8ff7f55b619aab61b1", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n struct X {\n     x: int\n }"}, {"sha": "08412d1296cfc071b7440203b2ef50a2c6695d18", "filename": "src/test/run-pass/arith-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Farith-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Farith-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let i32_c: int = 0x10101010;\n     assert!(i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3) =="}, {"sha": "8a0fc8adc189574d323684769e197ac2647b9dab", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(type_limits)]\n \n // Unsigned integer operations"}, {"sha": "422816079d62c6ac4eb6e540c87cdcc67902b930", "filename": "src/test/run-pass/artificial-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fartificial-block.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn f() -> int { { return 3; } }\n \n pub fn main() { assert!((f() == 3)); }"}, {"sha": "ec89e2b3ee288437e5fb780a967e583a0785c5a6", "filename": "src/test/run-pass/as-precedence.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fas-precedence.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn main() {\n     assert_eq!(3 as uint * 3, 9);\n     assert_eq!(3 as (uint) * 3, 9);"}, {"sha": "716c3d47a0365a2fb8410be081464a8fe3413dbf", "filename": "src/test/run-pass/asm-concat-src.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(asm)]\n \n pub fn main() {"}, {"sha": "6aeadbe203e182f20414f4e8ed37b8401fb53b75", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}, {"sha": "7b1548a8d4f6118a7bddd93c08bb0ee59c43c67f", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}, {"sha": "5d93388f7f4fee8fd639ec1a1f41a24ca48a1166", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // Issue 483 - Assignment expressions result in nil\n+// pretty-expanded FIXME #23616\n+\n fn test_assign() {\n     let mut x: int;\n     let y: () = x = 10;"}, {"sha": "4b22f84f78d12800b42f6b90eb639559772e3ff7", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(unboxed_closures)]\n \n trait iterable<A> {"}, {"sha": "853b56ffb0c2ea34a0fd916058c363e912f754b6", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(core)]\n \n use std::marker::MarkerTrait;"}, {"sha": "39fc224148e8ed7d8f3403c1e0d044ba4018ca35", "filename": "src/test/run-pass/associated-types-binding-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test a case where the associated type binding (to `bool`, in this\n // case) is derived from the trait definition. Issue #21636.\n \n+// pretty-expanded FIXME #23616\n+\n use std::vec;\n \n pub trait BitIter {"}, {"sha": "87eeb23b7a3f37e0fcee111068af0dea7440072e", "filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constraints on associated types in a where clause.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "2301821f66358fe58a488d5e6c9284b8034533ad", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constrai32s on associated types in a where clause.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait ToI32 {\n     fn to_i32(&self) -> i32;\n }"}, {"sha": "1a8da6755588be0e41cb3f3f5e4551293dbce350", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -14,6 +14,8 @@\n // `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n use std::ops::Deref;\n "}, {"sha": "b53e69e8d9d16603b9956db33d65fd0b5de92aa5", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait SignedUnsigned {\n     type Opposite;\n     fn convert(self) -> Self::Opposite;"}, {"sha": "7354ae67addc4d32aee8441cf7d4c0321fbd71e3", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "8ca3bc02548346864635ee80deac399b3ce64ef3", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // (modulo bound lifetime names) appears in the environment\n // twice. Issue #21965.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo<T>(t: T) -> i32\n     where T : for<'a> Fn(&'a u8) -> i32,\n           T : for<'b> Fn(&'b u8) -> i32,"}, {"sha": "5878f5dd51b2a213ae5d497d572f8507965c6941", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Check that we do not report ambiguities when the same predicate\n // appears in the environment twice. Issue #21965.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo {\n     type B;\n "}, {"sha": "8cf97fe62fea50639b7754502e8b48cb7d5179d6", "filename": "src/test/run-pass/associated-types-enum-field-named.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated types appearing in struct-like enum variants.\n \n+// pretty-expanded FIXME #23616\n+\n use self::VarValue::*;\n \n pub trait UnifyKey {"}, {"sha": "3c57da6b4a3ebee8bcee6ad51129b71c4067c3eb", "filename": "src/test/run-pass/associated-types-enum-field-numbered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated types appearing in tuple-like enum variants.\n \n+// pretty-expanded FIXME #23616\n+\n use self::VarValue::*;\n \n pub trait UnifyKey {"}, {"sha": "feccd1d2dcec0daf2ca82cf80511b67b8aaf1b17", "filename": "src/test/run-pass/associated-types-eq-obj.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constraints on associated types inside of an object type\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "5bf10ae132cc52308ec622f91074c84f9575b970", "filename": "src/test/run-pass/associated-types-in-default-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "4d286a4f9a48753c1597b07ac0ff017cad7f3047", "filename": "src/test/run-pass/associated-types-in-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "41c53a5ad641090a8b23755715fe0854ff55163c", "filename": "src/test/run-pass/associated-types-in-impl-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "7b8b041e7ef679ac5a85cff57662d94c22c66682", "filename": "src/test/run-pass/associated-types-in-inherent-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "718ea542799bbdb62ccd5e61a6298ebbffdd52a3", "filename": "src/test/run-pass/associated-types-issue-20220.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test references to `Self::Item` in the trait. Issue #20220.\n \n+// pretty-expanded FIXME #23616\n+\n use std::vec;\n \n trait IntoIteratorX {"}, {"sha": "562deba4d9301c8b759b058d714c71ab251b250b", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(core)]\n \n use std::marker::MarkerTrait;"}, {"sha": "057677a008785f11fe8ed4c25753e63f78ae6d5b", "filename": "src/test/run-pass/associated-types-issue-21212.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // where clauses in the environment which in turn required normalizing\n // `Self::Input`.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Parser {\n     type Input;\n "}, {"sha": "56e39a4450221084291cae3356577ade8e0740e8", "filename": "src/test/run-pass/associated-types-iterator-binding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn pairwise_sub<T:DoubleEndedIterator<Item=int>>(mut t: T) -> int {\n     let mut result = 0;\n     loop {"}, {"sha": "a26b428a4eacf2db945eb1b0654ff920bc31b996", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we can resolve nested projection types. Issue #20666.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(core)]\n \n use std::marker::MarkerTrait;"}, {"sha": "d95ad2e883471dacb595f5db819e22428758ff6f", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we normalize associated types that appear in a bound that\n // contains a binding. Issue #21664.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(core)]\n #![allow(dead_code)]\n "}, {"sha": "d8e4c5218d9cf68dbb9972267e5a56b4a0630cfb", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n \n struct Splits<'a, T:'a, P>(PhantomData<(&'a T, P)>);"}, {"sha": "ff08e7b69bdd87ab524fa3e7c345fef254c4b23e", "filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n \n struct Splits<'a, T, P>(PhantomData<(&'a(),T,P)>);"}, {"sha": "82adac8cf861484e867cb47d0263ece060527b1c", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // various special paths in the `type_is_immediate` function.\n \n \n+// pretty-expanded FIXME #23616\n+\n pub trait OffsetState: Sized {}\n pub trait Offset {\n     type State: OffsetState;"}, {"sha": "151a9da948e832c5cf0d62c0fe0f79f5bb85cd92", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(core)]\n \n use std::marker::{MarkerTrait, PhantomData};"}, {"sha": "2518ccf1cb47430076f854d7fa2e854e6283f03f", "filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test where the impl self type uses a projection from a constant type.\n \n+// pretty-expanded FIXME #23616\n+\n trait Int\n {\n     type T;"}, {"sha": "3b146792fdaded965b7873c9e919a9b471f31364", "filename": "src/test/run-pass/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // appear in associated type bindings in object types, which were not\n // being properly flagged.\n \n+// pretty-expanded FIXME #23616\n+\n use std::ops::{Shl, Shr};\n use std::cell::RefCell;\n "}, {"sha": "dbc2164c93a69c32c0989f96eb88ec18ed63bbe6", "filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n \n+// pretty-expanded FIXME #23616\n+\n trait A\n {\n     type TA;"}, {"sha": "80e3aa09e3e613e614c28d6f36ed2a44e4ffb3ea", "filename": "src/test/run-pass/associated-types-projection-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test a where clause that uses a non-normalized projection type.\n \n+// pretty-expanded FIXME #23616\n+\n trait Int\n {\n     type T;"}, {"sha": "a69de216ab997dbca06d8222b932ed258ef66be7", "filename": "src/test/run-pass/associated-types-qualified-path-with-trait-with-type-parameters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo<T> {\n     type Bar;\n     fn get_bar() -> <Self as Foo<T>>::Bar;"}, {"sha": "ce09ec60bd6a52ba29ff76b0d4e63a9ed1499c09", "filename": "src/test/run-pass/associated-types-ref-from-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated type references in structure fields.\n \n+// pretty-expanded FIXME #23616\n+\n trait Test {\n     type V;\n "}, {"sha": "30b3871522cb2317557e1d26a1d09aac0723bf7c", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test associated type references in a struct literal. Issue #20535.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type Bar;\n "}, {"sha": "16e49f146ab557b24d8c2047256b5f4eaf998e90", "filename": "src/test/run-pass/associated-types-region-erasure-issue-20582.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Regression test for #20582. This test caused an ICE related to\n // inconsistent region erasure in trans.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo<'a> {\n     buf: &'a[u8]\n }"}, {"sha": "1ce4d6e341de2e581f85a688fc98fce20792378d", "filename": "src/test/run-pass/associated-types-resolve-lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get<T> {\n     fn get(&self) -> T;\n }"}, {"sha": "87043b833fd8f177aaf910d97bdfe3c8f7b0351f", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test equality constraints on associated types in a where clause.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "4c9deab45112606dfd8c0959dabe8b8c39f04699", "filename": "src/test/run-pass/associated-types-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;"}, {"sha": "a2b7cf2106eb7af89dff81498ad27b6f3be80d73", "filename": "src/test/run-pass/associated-types-stream.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n \n+// pretty-expanded FIXME #23616\n+\n trait Stream {\n     type Car;\n     type Cdr: Stream;"}, {"sha": "d1872e4fb55f4c86abc2352dfcf58a82fd1c5724", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait UnifyKey {\n     type Value;\n "}, {"sha": "3d97c503dca5f94848f7dbd8569934e7085e11dd", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait UnifyKey {\n     type Value;\n "}, {"sha": "f8eff2f22fe3c0cb31be3c19a697850dfedec16f", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test paths to associated types using the type-parameter-only sugar.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo {\n     type A;\n     fn boo(&self) -> Self::A;"}, {"sha": "ef2dc48fe136474ae438f83e36b4e50f95ae8236", "filename": "src/test/run-pass/astconv-cycle-between-trait-and-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fastconv-cycle-between-trait-and-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fastconv-cycle-between-trait-and-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fastconv-cycle-between-trait-and-type.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // carries a predicate that references the trait (`u32 : Trait1`,\n // substituted).\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(dead_code)]\n \n trait Trait1 : Trait2<SomeType<u32>> {"}, {"sha": "cdd1b96de1e6081e14f965d594457a9a6c847a2b", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:expected item\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(custom_attribute, test)]\n \n #[foo = \"bar\"]"}, {"sha": "cd02b5a9e73109498a2ba5ff438371facffd170f", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:expected item\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(custom_attribute, test)]\n \n mod m {"}, {"sha": "4680f47fad6ce30e05e48f4edcf32ac49d9e7873", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(main)]\n \n pub fn main() {"}, {"sha": "e8a12ee3ac79161816a23f8460fd39c9fbcfb2b5", "filename": "src/test/run-pass/attr-main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(main)]\n \n #[main]"}, {"sha": "bcfb4b330f5eda6ff3e46578601fb2eb40f47a2e", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// pretty-expanded FIXME #23616\n+\n #![allow(unused_attribute)]\n #![feature(custom_attribute)]\n "}, {"sha": "f135762d28327910ee7fb25cc304696f303853cd", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]\n "}, {"sha": "08dce42c05b3ec757f7791519467cc02e1e46d32", "filename": "src/test/run-pass/attr-start.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-start.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(start)]\n \n #[start]"}, {"sha": "57e1b38c9c1664e133ab750c8d0a5eba586919d4", "filename": "src/test/run-pass/attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(main)]\n \n #[main]"}, {"sha": "2e79183755a18094395ab9dcd414d4d8a1ddab75", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let mut sum = 0;\n     let xs = vec!(1, 2, 3, 4, 5);"}, {"sha": "6dab0e51971382a29ab7f1d3219632454a275779", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n trait Pushable<T> {\n     fn push_val(&mut self, t: T);\n }"}, {"sha": "cf3b7d41b3a65e71a0ef76950ac350eeddd89eb1", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n \n fn g<F>(act: F) -> int where F: FnOnce(Vec<int>) -> int { return act(vec!(1, 2, 3)); }"}, {"sha": "6d7e150093e2cd9e7ca4d5dd0bf3d900bbfff54b", "filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo {\n     x: int,\n }"}, {"sha": "6a038927f4a486016b69128b6a1d48b0a4340e9d", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "bab0403e79dc1079d2bb1340d85ba5bd9aa59fdb", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "e9f70346089a528e4aa93ecc950b77b8d32bacb1", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "7558733adf1d2f42dc6651608e463f06a4d26684", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "1754a3707681598b8a4f1299ab1617e52d3f2d1c", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "37ba355956c309e08d289fa42c90408bdfdf36a2", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "09746380ebab029d90d75a79276e7f3edaab56d6", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     assert_eq!(0xffffffff, (-1 as u32));\n     assert_eq!(4294967295, (-1 as u32));"}, {"sha": "1fe9dde844a4fe4602884c40460c6604cad837fb", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Check that issue #954 stays fixed\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     match -1 { -1 => {}, _ => panic!(\"wat\") }\n     assert_eq!(1-1, 0);"}, {"sha": "5a6e801501fcfc1f2ac3b9ef5e660ae35fe11a8b", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::sync::Arc;\n fn dispose(_x: Arc<bool>) { }\n "}, {"sha": "c7b770d0a2b639f031ae2d4618bbec61a4496de2", "filename": "src/test/run-pass/bind-field-short-with-modifiers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     struct Foo { x: int, y: int }\n     let mut f = Foo { x: 10, y: 0 };"}, {"sha": "c9a2e07dd8398eb3a1445f7ca5136e64e3d86792", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax, collections)]\n "}, {"sha": "b1d6f96f0f6d45d5de8fb9fd4073a22423cf6872", "filename": "src/test/run-pass/blind-item-mixed-crate-use-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblind-item-mixed-crate-use-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblind-item-mixed-crate-use-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblind-item-mixed-crate-use-item.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // aux-build:blind-item-mixed-crate-use-item-foo.rs\n // aux-build:blind-item-mixed-crate-use-item-foo2.rs\n \n+// pretty-expanded FIXME #23616\n+\n mod m {\n     pub fn f<T>(_: T, _: (), _: ()) { }\n     pub fn g<T>(_: T, _: (), _: ()) { }"}, {"sha": "6244ba6fccf0b09bb21e19b7252a90d0eb9e28ec", "filename": "src/test/run-pass/blind-item-mixed-use-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblind-item-mixed-use-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblind-item-mixed-use-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblind-item-mixed-use-item.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n mod m {\n     pub fn f<T>(_: T, _: ()) { }\n     pub fn g<T>(_: T, _: ()) { }"}, {"sha": "a745e52efeb17a3ef32238cc4fe28403052fdba2", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn asBlock<F>(f: F) -> uint where F: FnOnce() -> uint {\n    return f();\n }"}, {"sha": "01bd8ce10cd095aa672769bf62b7f5f1522020eb", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n \n // no-reformat\n \n+// pretty-expanded FIXME #23616\n+\n /*\n  *\n  *  When you write a block-expression thing followed by"}, {"sha": "059f4e3749407b0e650887fb08fb6ff88c9f5864", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn force<F>(f: F) -> int where F: FnOnce() -> int { return f(); }\n \n pub fn main() {"}, {"sha": "c46684af6efda630afeeda4db3896e405482ef53", "filename": "src/test/run-pass/bool-not.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbool-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbool-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool-not.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     if !false { assert!((true)); } else { assert!((false)); }\n     if !true { assert!((false)); } else { assert!((true)); }"}, {"sha": "a2b19d32054a5561c37804de7fd551f8d50f3f7f", "filename": "src/test/run-pass/bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Basic boolean tests\n \n+// pretty-expanded FIXME #23616\n+\n use std::cmp::Ordering::{Equal, Greater, Less};\n use std::ops::{BitAnd, BitOr, BitXor};\n "}, {"sha": "bcaf94953d61282e5bc1cf3fc47b78dd896ce8b0", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n trait Foo {\n     fn foo(self);\n }"}, {"sha": "381afd94e3b64ab163f82b61d481c6a929046a99", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo(int, int);\n \n fn main() {"}, {"sha": "f30a50e37d81d8d4ed48d9b1bda2d12b2524827b", "filename": "src/test/run-pass/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-assign-to-subfield.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     struct A {\n         a: int,"}, {"sha": "a0ad3cc6ca1af8e86886cd0daa2ece177501a3fd", "filename": "src/test/run-pass/borrowck-binding-mutbl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n struct F { f: Vec<int> }\n \n fn impure(_v: &[int]) {"}, {"sha": "ff61036d2c3d68019cb304ddbe5980fe0fefcb69", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "eb61c747aea267397e9ba875bb34e72f6b983cfa", "filename": "src/test/run-pass/borrowck-borrow-of-mut-base-ptr-safe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-of-mut-base-ptr-safe.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n //\n // Example from src/librustc_borrowck/borrowck/README.md\n \n+// pretty-expanded FIXME #23616\n+\n fn foo<'a>(mut t0: &'a mut int,\n            mut t1: &'a mut int) {\n     let p: &int = &*t0; // Freezes `*t0`"}, {"sha": "6ccb2203bca8e4ce2a3c5e2215a0a30bdc0da836", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -14,6 +14,8 @@\n // that the main function can read the variable too while\n // the closures are in scope. Issue #6801.\n \n+// pretty-expanded FIXME #23616\n+\n fn a() -> i32 {\n     let mut x = 3;\n     x += 1;"}, {"sha": "10e4ad3eb974beb2d663f5623b1f9bc599f7097b", "filename": "src/test/run-pass/borrowck-field-sensitivity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "3f38a8df04c577adf3d6c940bd62ec7078c36d56", "filename": "src/test/run-pass/borrowck-fixed-length-vecs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let x = [22];\n     let y = &x[0];"}, {"sha": "8e8e012fdbf49d4849890769bbad8232e0438226", "filename": "src/test/run-pass/borrowck-freeze-frozen-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test that a `&mut` inside of an `&` is freezable.\n \n+// pretty-expanded FIXME #23616\n+\n struct MutSlice<'a, T:'a> {\n     data: &'a mut [T]\n }"}, {"sha": "b0cf5d81aa9655646da50ffc906fea8d6555d7ba", "filename": "src/test/run-pass/borrowck-lend-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn borrow(_v: &int) {}\n \n fn borrow_from_arg_imm_ref(v: Box<int>) {"}, {"sha": "1170c5be9b5ce06cb43867f3e463652ead1d2be9", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "0ea18a6abe480b39a1ce55a636fa70a3f939cde0", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(unboxed_closures)]"}, {"sha": "313dab18a31cc81f2ed34eaeb3f3d0d3c2a520be", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn want_slice(v: &[int]) -> int {\n     let mut sum = 0;\n     for i in v { sum += *i; }"}, {"sha": "c3b69333dc5552e56f8528310e4a99b9f641725c", "filename": "src/test/run-pass/borrowck-pat-reassign-no-binding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let mut x = None;\n     match x {"}, {"sha": "e7ff379b433a604621e8b0c286de754db003f4f6", "filename": "src/test/run-pass/borrowck-rvalues-mutable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct Counter {\n     value: uint\n }"}, {"sha": "488c014eac776269f1d132314b4c2ec5ffa84406", "filename": "src/test/run-pass/borrowck-scope-of-deref-issue-4666.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // limited to the deref operation itself, and does not infect the\n // block as a whole.\n \n+// pretty-expanded FIXME #23616\n+\n struct Box {\n     x: uint\n }"}, {"sha": "d51d0b1d2e1fd50c769f6280827ddc5f3c35f512", "filename": "src/test/run-pass/borrowck-static-item-in-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Regression test for issue #7740\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     static A: &'static char = &'A';\n }"}, {"sha": "0bfa8f48650bb30c327c45ffe64573f6b3184ec3", "filename": "src/test/run-pass/borrowck-trait-lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-trait-lifetime.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // This test verifies that casting from the same lifetime on a value\n // to the same lifetime on a trait succeeds. See issue #10766.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(dead_code)]\n \n use std::marker;"}, {"sha": "c7199fccff6d6e8468e31883598520cead2f342a", "filename": "src/test/run-pass/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n struct Rec {\n     f: Box<int>,\n }"}, {"sha": "0ce2709c02d6a9f6a52cb7e10b390de553ef3b8a", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n use std::cell::Cell;\n \n #[derive(Copy)]"}, {"sha": "b646c741e7d3c377f7f70091acd4554d9db3a519", "filename": "src/test/run-pass/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-use-mut-borrow.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "aaf962577ff24cdd9541b70b11b92b2825538d32", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo(s: &String) -> bool {\n     match &**s {\n         \"kitty\" => true,"}, {"sha": "eaad5944e6801cec17d8205248f2c881f48fbaf0", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo<'r>(s: &'r uint) -> bool {\n     match s {\n         &3 => true,"}, {"sha": "69cb27dcf899e806ab8adc92e96ffd7562dfed0a", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let (&x, &y) = (&3, &'a');\n     assert_eq!(x, 3);"}, {"sha": "9588663aa18b9c12b0ea1e6f269184bd7042c0a7", "filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn select<'r>(x: &'r Option<int>, y: &'r Option<int>) -> &'r Option<int> {\n     match (x, y) {\n         (&None, &None) => x,"}, {"sha": "52322c41236b82504a01a1aca2d201f6135bd305", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo<T:Clone>(x: &T) -> T{\n     match x {\n         &ref a => (*a).clone()"}, {"sha": "a2d76d33993bafa72d74dc23c0f094c31ebe76dd", "filename": "src/test/run-pass/box-new.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbox-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbox-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-new.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn main() {\n     let _a = Box::new(1);\n }"}, {"sha": "4c4600590ee262a43c23c1045ba471378e92073c", "filename": "src/test/run-pass/break-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbreak-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbreak-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak-value.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn int_id(x: int) -> int { return x; }\n \n pub fn main() { loop { int_id(break); } }"}, {"sha": "80934c48515dc8ab72a2bf7d196b8d0737a71be0", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }"}, {"sha": "625cd98bdf80e69aebce26d2e93153d63b2e5ec5", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Speak : Sized {\n     fn say(&self, s:&str) -> String;\n     fn hi(&self) -> String { hello(self) }"}, {"sha": "89fd51bd5f1dc0d618905b3e2fb862630e4f0fae", "filename": "src/test/run-pass/bug-7295.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7295.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub trait Foo<T> {\n     fn func1<U>(&self, t: U, w: T);\n "}, {"sha": "eb6d1028331be06b76f48ef8caeac3f7f8558537", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -14,6 +14,8 @@\n // a Send. Basically this just makes sure rustc is using\n // each_bound_trait_and_supertraits in type_contents correctly.\n \n+// pretty-expanded FIXME #23616\n+\n use std::sync::mpsc::{channel, Sender};\n \n trait Bar : Send { }"}, {"sha": "0ff8c0c6ba08fbeb8fde40e1ca99b4970ce3487c", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -14,6 +14,8 @@\n // Tests \"capabilities\" granted by traits with super-builtin-kinds,\n // even when using them cross-crate.\n \n+// pretty-expanded FIXME #23616\n+\n extern crate trait_superkinds_in_metadata;\n \n use std::sync::mpsc::{channel, Sender, Receiver};"}, {"sha": "d016a92f465bda74f919e2e2f85559f2c79a1f89", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // builtin-kinds, e.g., if a trait requires Send to implement, then\n // at usage site of that trait, we know we have the Send capability.\n \n+// pretty-expanded FIXME #23616\n+\n use std::sync::mpsc::{channel, Sender, Receiver};\n \n trait Foo : Send { }"}, {"sha": "e38a7bac67a86f5f3370b2a6d8c1b88e23393171", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n \n // Tests (correct) usage of trait super-builtin-kinds cross-crate.\n \n+// pretty-expanded FIXME #23616\n+\n extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::{RequiresCopy};"}, {"sha": "6bc81f4a36bcddf56a22302b88ff80c91e11a2e4", "filename": "src/test/run-pass/builtin-superkinds-phantom-typaram.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // super-builtin-kind of a trait, if the type parameter is never used,\n // the type can implement the trait anyway.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker;\n \n trait Foo : Send { }"}, {"sha": "924a8c023f8b6ea8935fa181d690aa0cc43f5b1c", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Tests the ability for the Self type in default methods to use\n // capabilities granted by builtin kinds as supertraits.\n \n+// pretty-expanded FIXME #23616\n+\n use std::sync::mpsc::{Sender, channel};\n \n trait Foo : Send + Sized + 'static {"}, {"sha": "e8d59b267feb7a8f2a384bc4c96df537a5ecb8ce", "filename": "src/test/run-pass/builtin-superkinds-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Simple test case of implementing a trait with super-builtin-kinds.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo : Send { }\n \n impl Foo for int { }"}, {"sha": "6d41774c05bf1543d1110e38cd7ce94c49d746d5", "filename": "src/test/run-pass/builtin-superkinds-typaram.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Tests correct implementation of traits with super-builtin-kinds\n // using a bounded type parameter.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo : Send { }\n \n impl <T: Send> Foo for T { }"}, {"sha": "baca7dc13f1b9c6c35a2c2d452abd882ffd3d104", "filename": "src/test/run-pass/by-value-self-in-mut-slot.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct X {\n     a: int\n }"}, {"sha": "b678f149fa240d4317f386840dbe1dbdc9ddf093", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(libc)]\n \n mod rustrt {"}, {"sha": "a9f80de86059c3c57e254741fef5c3a867385cae", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n #![feature(libc, std_misc)]\n \n extern crate libc;"}, {"sha": "cef48aadab50ae16bdbd051eca9a7a16344fbaae", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo() -> int { 22 }\n \n pub fn main() {"}, {"sha": "31b279335225f011a6f82246661d7b276b5dbc85", "filename": "src/test/run-pass/can-copy-pod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n "}, {"sha": "d2eb5c33eae8087f14545317e94334367cfec071", "filename": "src/test/run-pass/cancel-clean-via-immediate-rvalue-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "5bf6f5fb04891a749c0464dcff4f37330dabbe14", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n     for val in x {\n         f(val)"}, {"sha": "c4f89bbcd328d16df671ea8982cdd6497ab4115d", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(unboxed_closures)]\n \n fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {"}, {"sha": "b20de7113ec5db60bba85cfeacb3012efbd8c6f4", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // exec-env:RUST_LOG=info\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax, old_io, rustc_private, std_misc)]\n "}, {"sha": "e79bab1b7b0505825001dee61b1ee589d8a662b5", "filename": "src/test/run-pass/cast-in-array-size.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n \n // issues #10618 and #16382\n+// pretty-expanded FIXME #23616\n+\n const SIZE: int = 25;\n \n fn main() {"}, {"sha": "3eec130d5a91c3bb7560f5dcbff830e5099bc44c", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let i: int = 'Q' as int;\n     assert_eq!(i, 0x51);"}, {"sha": "80b75af6e441e915cf36f77aefcd62c4f2af8e32", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // This test makes sure we can do cross-crate inlining on functions\n // that use capture clauses.\n \n+// pretty-expanded FIXME #23616\n+\n extern crate cci_capture_clause;\n \n pub fn main() {"}, {"sha": "665469883043c793ad5fb8125034f5050c0e1e72", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cci_nested_lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(globs)]\n \n extern crate cci_nested_lib;"}, {"sha": "d7a74adc02d5eaa3575f6d295dbfbdfb4bfd025f", "filename": "src/test/run-pass/cell-does-not-clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::cell::Cell;\n \n #[derive(Copy)]"}, {"sha": "74022d4c6c8390b76a4b713dae37caac5e1a0036", "filename": "src/test/run-pass/cfg-attr-cfg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-attr-cfg.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,5 +11,7 @@\n // main is conditionally compiled, but the conditional compilation\n // is conditional too!\n \n+// pretty-expanded FIXME #23616\n+\n #[cfg_attr(foo, cfg(bar))]\n fn main() { }"}, {"sha": "25d689475fb4b1673c13a3eecc2a5126dbabe9dc", "filename": "src/test/run-pass/cfg-attr-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // https://github.com/rust-lang/rust/issues/21833#issuecomment-72353044\n \n+// pretty-expanded FIXME #23616\n+\n #![cfg_attr(not_used, no_std)]\n \n fn main() { }"}, {"sha": "415607aa72bfc4c47a62879eae6b7d1e2a46034a", "filename": "src/test/run-pass/cfg-family.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-family.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[cfg(windows)]\n pub fn main() {\n }"}, {"sha": "5fa1bc47f877a24c778ad768e4ee3ed9113413ef", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-notfoo.rs)\n \n+// pretty-expanded FIXME #23616\n+\n #[cfg(foo)]\n #[macro_use]\n mod foo {"}, {"sha": "7cddac160319f23e4f722f195a7ace546923fbca", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-foo.rs)\n \n+// pretty-expanded FIXME #23616\n+\n #[cfg(foo)]\n #[macro_use]\n mod foo {"}, {"sha": "05dc7d52424b13c281f263e3cc12395aaaa68eaf", "filename": "src/test/run-pass/cfg-match-arm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-match-arm.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum Foo {\n     Bar,\n     Baz,"}, {"sha": "b6954f7c2eeaf389c72332675e28bcfdd774161d", "filename": "src/test/run-pass/cfg-target-family.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[cfg(target_family = \"windows\")]\n pub fn main() {\n }"}, {"sha": "b3d5ddc4283083236d3f5fde5afd297b187cf802", "filename": "src/test/run-pass/cfg_inner_static.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg_inner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfg_inner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg_inner_static.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cfg_inner_static.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate cfg_inner_static;\n \n pub fn main() {"}, {"sha": "7d25321fae1bc477c3813e985ab4b46943755ad1", "filename": "src/test/run-pass/cfgs-on-items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: --cfg fooA --cfg fooB\n \n // fooA AND !bar\n+// pretty-expanded FIXME #23616\n+\n #[cfg(all(fooA, not(bar)))]\n fn foo1() -> int { 1 }\n "}, {"sha": "801b01918e10339ccbc87aa5413ed3295595237d", "filename": "src/test/run-pass/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchar.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let c: char = 'x';\n     let d: char = 'x';"}, {"sha": "adf041b04d6fbf3bf9765f6728114e1fab1294aa", "filename": "src/test/run-pass/check-static-mut-slices.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Checks that mutable static items can have mutable slices\n \n+// pretty-expanded FIXME #23616\n+\n static mut TEST: &'static mut [int] = &mut [1];\n \n pub fn main() {"}, {"sha": "554853ade5be61956a12ff5fe91a8783d9e6cbaf", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n \n // aux-build:check_static_recursion_foreign_helper.rs\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(custom_attribute, libc)]\n \n extern crate check_static_recursion_foreign_helper;"}, {"sha": "260668e48e96b9d3fb7da717bebffb470d138176", "filename": "src/test/run-pass/check-static-slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n \n+// pretty-expanded FIXME #23616\n+\n const aa: [int; 3] = [1, 2, 3];\n const ab: &'static [int; 3] = &aa;\n const ac: &'static [int] = ab;"}, {"sha": "64642e51c094b3a23bca35d846aef9e8484db65f", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Reported as issue #126, child leaks the string.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(std_misc)]\n \n use std::thread::Thread;"}, {"sha": "6884ac8c07579d7ac7f344f279976a223a027d36", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct cat {\n   done : extern fn(uint),\n   meows : uint,"}, {"sha": "05228b30c41d80d1dd9f2049b816fca4756608f5", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n /* Test that exporting a class also exports its\n    public fields and methods */\n "}, {"sha": "a5c60e3a7b53c9b51ff06d55e93f856ac0cb1ac0", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:cci_class_2.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate cci_class_2;\n use cci_class_2::kitties::cat;\n "}, {"sha": "73abaf7d34bb880122072f4f60d49603b628eb1d", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:cci_class_3.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate cci_class_3;\n use cci_class_3::kitties::cat;\n "}, {"sha": "2959938e3736847b323e0b3e70568c485c65eea9", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct cat {\n   meows : uint,\n "}, {"sha": "6537a931fa615a63b03979062ea4b0f3c47859b1", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:cci_class_6.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate cci_class_6;\n use cci_class_6::kitties::cat;\n "}, {"sha": "9e74a1002042d2332d11dc713aa15df272ce8162", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n struct cat<U> {\n     info : Vec<U> ,\n     meows : uint,"}, {"sha": "e3b9b56db0b5bbcc510e9d2091f7819f509a46f8", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct cat {\n \n   name : String,"}, {"sha": "6cd8f4c658cdeca1b19987af7721c7e45f26965a", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomData;\n \n struct cat<U> {"}, {"sha": "36d7bd6b3ca480ead3adf6b4fef8298fbb0c9e37", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:cci_class_4.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate cci_class_4;\n use cci_class_4::kitties::cat;\n "}, {"sha": "487d20729d4e780e9bb18f5173a44c2227df2e3f", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n struct kitten {\n     cat: Option<cat>,\n }"}, {"sha": "cfa13dbe622f7b4e1c0427ba3a0ef77946564539", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // aux-build:cci_class.rs\n+// pretty-expanded FIXME #23616\n+\n extern crate cci_class;\n use cci_class::kitties::cat;\n "}, {"sha": "8fc4f47dc027743a04ba34fd1bb14122b80a3806", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct cat {\n     meows : uint,\n "}, {"sha": "ff5ef145bcddfe159d89e7099404aed86d447492", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct cat {\n     meows : uint,\n "}, {"sha": "8dff34bdc1fcdbbab7ace4e69054f169c0560852", "filename": "src/test/run-pass/cleanup-arm-conditional.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -21,6 +21,8 @@\n // Test that cleanup scope for temporaries created in a match\n // arm is confined to the match arm itself.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax, os)]\n "}, {"sha": "7fd7ab90fc293427df1a738534ab0a5769561b60", "filename": "src/test/run-pass/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "24c95bbb6dea7b5b6b115d292791b2790b7cca94", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -24,6 +24,8 @@\n // It's unclear how likely such a bug is to recur, but it seems like a\n // scenario worth testing.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "d448934f781dbc97c73263730089f3ae52f4a6d2", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -20,6 +20,8 @@\n \n // Test that cleanups for the RHS of shortcircuiting operators work.\n \n+// pretty-expanded FIXME #23616\n+\n use std::env;\n \n pub fn main() {"}, {"sha": "cfbcc52e602c465dded5c93dd4289fd0da395010", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax, std_misc)]\n "}, {"sha": "dbbac8a16333b53311cdce899a2c880e548346b7", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(unboxed_closures)]\n \n use std::sync::mpsc::channel;"}, {"sha": "06b6e1b5abeddb6bffd7163a08d80054fd1a7b5d", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn foo(i: isize) -> isize { i + 1 }\n \n fn apply<A, F>(f: F, v: A) -> A where F: FnOnce(A) -> A { f(v) }"}, {"sha": "328a27b3f1e8a6735c19814239f362df5511bae7", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test a rather underspecified example:\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let f = {|i| i};\n     assert_eq!(f(2), 2);"}, {"sha": "fbe871a1bffce3908629c45bcffca38cdecab12d", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::cmp::Ordering;\n \n // Test default methods in PartialOrd and PartialEq"}, {"sha": "1b12cbd33df8a314f34fdb0713d894854917dff5", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "b3eec9939c29e8f443dbe0565b5704f316b8db1f", "filename": "src/test/run-pass/coerce-match-calls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Check that coercions are propagated through match and if expressions.\n \n+// pretty-expanded FIXME #23616\n+\n use std::boxed::Box;\n \n pub fn main() {"}, {"sha": "01627f1a837666de481f24335d29ddd7efd3ccad", "filename": "src/test/run-pass/coerce-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Check that coercions are propagated through match and if expressions.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "a053311a0403e43bf1a3c9a056a51e739270f963", "filename": "src/test/run-pass/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-overloaded-autoderef.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::rc::Rc;\n \n // Examples from the \"deref coercions\" RFC, at rust-lang/rfcs#241."}, {"sha": "7812f0088b146e56e309ab1484f793e7b7316fc9", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn negate(x: &int) -> int {\n     -*x\n }"}, {"sha": "4638c51bbf7025c7becd0c355804bd63987df892", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct SpeechMaker {\n     speeches: uint\n }"}, {"sha": "edc8df64a2042ddfbf3c06976c8e767a103f2d1e", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn sum(x: &[int]) -> int {\n     let mut sum = 0;\n     for y in x { sum += *y; }"}, {"sha": "dcef198320056c080852446a8f0a1815c83e8028", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn bar(v: &mut [uint]) -> Vec<uint> {\n     v.to_vec()\n }"}, {"sha": "9f6444c43c737dfd715ec566da7954a26c28507a", "filename": "src/test/run-pass/coerce-reborrow-mut-ptr-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-arg.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct SpeechMaker {\n     speeches: uint\n }"}, {"sha": "1751979db8c97f91a5e785ac1d05fe7a9d4d160f", "filename": "src/test/run-pass/coerce-reborrow-mut-ptr-rcvr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct SpeechMaker {\n     speeches: uint\n }"}, {"sha": "ab8b6818f43731ace72b6ecc5f693be4503fe036", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn reverse(v: &mut [uint]) {\n     v.reverse();\n }"}, {"sha": "06ff3824cd20315e0ddbfcf55b34958e1712d9b7", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+// pretty-expanded FIXME #23616\n+\n fn bar(v: &mut [uint]) {\n     v.reverse();\n     v.reverse();"}, {"sha": "2299a03b2a4234f47f7b36a655fc9151475a0491", "filename": "src/test/run-pass/coerce-unify-return.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-unify-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoerce-unify-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-unify-return.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Check that coercions unify the expected return type of a polymorphic\n // function call, instead of leaving the type variables as they were.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo;\n impl Foo {\n     fn foo<T>(self, x: T) -> Option<T> { Some(x) }"}, {"sha": "cbfe30906a73feb39506a09a6f187ef205ec1431", "filename": "src/test/run-pass/coherence-bigint-int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n "}, {"sha": "8537c1bb002896115ab41d33fdcc6a4c06582168", "filename": "src/test/run-pass/coherence-bigint-vecint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n "}, {"sha": "2f2709698a040cfa82b57398e063f7eb85893c3a", "filename": "src/test/run-pass/coherence-blanket.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n "}, {"sha": "7bb3a01ccf8f763098a1bb47d41452aa2bc974e7", "filename": "src/test/run-pass/coherence-covered-type-parameter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote;\n "}, {"sha": "4d76f482b4e5abff92f2316921af6a8e07bd735b", "filename": "src/test/run-pass/coherence-cow-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // Test that it's ok for T to appear first in the self-type, as long\n // as it's covered somewhere.\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::{Remote,Pair};\n "}, {"sha": "685432ad1cff4c9c7fb3a36561b844ff29fa0164", "filename": "src/test/run-pass/coherence-cow-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -13,6 +13,8 @@\n // Test that it's ok for T to appear second in the self-type, as long\n // as it's covered somewhere.\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::{Remote,Pair};\n "}, {"sha": "f91ccf6120a6e376e931acf20a5211de731a2686", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     #[derive(Copy)]\n     enum x { foo }"}, {"sha": "e807b6ca3bc1132d58976be5ecc9e292d038955c", "filename": "src/test/run-pass/coherence-iterator-vec-any-elem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n "}, {"sha": "3cb3efe8e7bf6fb9bb029c7556a6c7d5cd37fd37", "filename": "src/test/run-pass/coherence-iterator-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n "}, {"sha": "172066abb2b848ed145583b726e3cad165a228d4", "filename": "src/test/run-pass/coherence-local-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote;\n "}, {"sha": "afdea4e6b7f13abd11a84eab4ad97a2f2ffed8a5", "filename": "src/test/run-pass/coherence-local-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:coherence-lib.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate \"coherence-lib\" as lib;\n use lib::Remote;\n "}, {"sha": "8ca79f1d4f100bf83817d86b0803503115d10783", "filename": "src/test/run-pass/coherence-multidispatch-tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-multidispatch-tuple.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::fmt::Debug;\n use std::default::Default;\n "}, {"sha": "2f42ab4988acee517a741140e767db8cdfdbdc83", "filename": "src/test/run-pass/coherence-negative-impls-safe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-negative-impls-safe.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(optin_builtin_traits)]\n \n use std::marker::Send;"}, {"sha": "21ff6d6938a3b718bdb4261826054e795e1b5f8f", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-pretty-expanded\n-\n use std::io::Write;\n use std::fmt;\n "}, {"sha": "9b049ede859a66ce3ed4938c11ccf031eaa41e66", "filename": "src/test/run-pass/compare-generic-enums.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n type an_int = int;\n \n fn cmp(x: Option<an_int>, y: Option<int>) -> bool {"}, {"sha": "7441d1f21b0f92bccb423c507430f7828d7e51da", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     assert_eq!(format!(concat!(\"foo\", \"bar\", \"{}\"), \"baz\"), \"foobarbaz\".to_string());\n     assert_eq!(format!(concat!()), \"\".to_string());"}, {"sha": "e51270fdc8d21f50a31a1a4db1c6f23536bd0dfc", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[cfg(target_arch = \"x86\")]\n pub fn main() { }\n "}, {"sha": "590912f6e91977c504ad0f7f15554fd0f8a221d0", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // Crate use statements\n+// pretty-expanded FIXME #23616\n+\n #[cfg(bogus)]\n use flippity;\n "}, {"sha": "192e647f5cb209519ef567d2baf4890c30c13a61", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: -C debug-assertions=no\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(rustc_private)]\n \n #[macro_use]"}, {"sha": "1349b7f814bb00f48e84b318af385524a207af29", "filename": "src/test/run-pass/const-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n static A: [u8; 1] = ['h' as u8];\n static B: u8 = (&A)[0];\n static C: &'static &'static &'static &'static [u8; 1] = & & & &A;"}, {"sha": "158c695c548d2cb4867ca4eaf638987b7ea5a43e", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum Foo {\n     Bar(u32),\n     Baz,"}, {"sha": "8b8fcfccc1c4dabd52c1ad1266934df367e4033a", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({\n         use std::num::Float;"}, {"sha": "853e8dc62bb704ebd8a7b6c78188749daf6650db", "filename": "src/test/run-pass/const-block-cross-crate-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cci_const_block.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate cci_const_block;\n \n pub fn main() {"}, {"sha": "06fbccdec06f365ac0b41980383c67adff4f3362", "filename": "src/test/run-pass/const-block-item-macro-codegen.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // General test that function items in static blocks\n // can be generated with a macro.\n \n+// pretty-expanded FIXME #23616\n+\n struct MyType {\n     desc: &'static str,\n     data: uint,"}, {"sha": "1f7e942ea5a35e0a165d858f5bdb4ac4ea54e3f0", "filename": "src/test/run-pass/const-block-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n mod foo {\n     pub trait Value {\n         fn value(&self) -> uint;"}, {"sha": "1337a91fe05d69d9152b655880cf919d3fb549b8", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(dead_code)]\n #![allow(unused_unsafe)]\n "}, {"sha": "37101303ed916a58a1371e2cdec68305783f2cc5", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Make sure const bounds work on things, and test that a few types\n // are const.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo<T: Sync>(x: T) -> T { x }\n \n struct F { field: int }"}, {"sha": "bbe3020ea1c654f5e9a79cc5072b0640013fbd6c", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::ptr;\n \n struct TestStruct {"}, {"sha": "f660dc5fa450e312502f668eb6a940a8b334ade1", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(libc)]\n \n extern crate libc;"}, {"sha": "16d71f52d98715f2b9eb34e44c70f739dc78faed", "filename": "src/test/run-pass/const-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n const a: int = 1;\n const b: int = a + 2;\n "}, {"sha": "af6af776c3d805190f720d0843ff82bad9850ad1", "filename": "src/test/run-pass/const-contents.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-contents.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #570\n \n+// pretty-expanded FIXME #23616\n+\n static lsl : int = 1 << 2;\n static add : int = 1 + 2;\n static addf : f64 = 1.0 + 2.0;"}, {"sha": "a92c2aab31241f694831a4e59fbe59939b631581", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cci_const.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate cci_const;\n static foo: &'static str = cci_const::foopy;\n static a: uint = cci_const::uint_val;"}, {"sha": "98f42f91245cd571a742a3d2d1acedec510288f9", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cci_const.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate cci_const;\n use cci_const::bar;\n static foo: extern \"C\" fn() = bar;"}, {"sha": "7b2bb0d31f9affe2e9e0d9c1cb2135e4d5bc3448", "filename": "src/test/run-pass/const-deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-deref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n const C: &'static int = &1000;\n static D: int = *C;\n "}, {"sha": "8dcd67c05782cd5b1d65748cf7e77914d99dd24a", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V, VV(int) }\n static C: E = E::V;\n "}, {"sha": "7cf2dcfa8900b897b93fc2d427fefd5beb52ea38", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V, VV(int) }\n static C: E = E::V;\n "}, {"sha": "11e02338f41af902ef7051b0cb4329f47f73d0c9", "filename": "src/test/run-pass/const-enum-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum A { A1, A2 }\n enum B { B1=0, B2=2 }\n "}, {"sha": "d7503ff8d7d31365c9d623eb9295984b0d711be2", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V0, V1(int) }\n static C: &'static E = &E::V0;\n "}, {"sha": "71a9703ec311a3d5d35e6e38e95b4240c5bf5389", "filename": "src/test/run-pass/const-enum-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V16(u16), V32(u32) }\n struct S { a: E, b: u16, c: u16 }\n static C: S = S { a: E::V16(0xDEAD), b: 0x600D, c: 0xBAD };"}, {"sha": "ca56cb5b01a99f36ac8d67ab2c5c7151f3c69e02", "filename": "src/test/run-pass/const-enum-struct2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V0, V16(u16) }\n struct S { a: E, b: u16, c: u16 }\n static C: S = S { a: E::V0, b: 0x600D, c: 0xBAD };"}, {"sha": "57cf2b619257bd1e2013015fd94e9547e1dbf19a", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E {\n     S0 { s: String },\n     S1 { u: uint }"}, {"sha": "2ab28f5fb23773d116f71af115b3ec3c447f7608", "filename": "src/test/run-pass/const-enum-tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V16(u16), V32(u32) }\n static C: (E, u16, u16) = (E::V16(0xDEAD), 0x600D, 0xBAD);\n "}, {"sha": "fe1b2e051c479f190c375fe6747ddcb4d4380c24", "filename": "src/test/run-pass/const-enum-tuple2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V0, V16(u16) }\n static C: (E, u16, u16) = (E::V0, 0x600D, 0xBAD);\n "}, {"sha": "7f9de49404d3a8d9276732aaeabaadbb329bc186", "filename": "src/test/run-pass/const-enum-tuplestruct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V16(u16), V32(u32) }\n struct S(E, u16, u16);\n static C: S = S(E::V16(0xDEAD), 0x600D, 0xBAD);"}, {"sha": "3d7b6c9f49f78670c1bcbd3726d6d1e73433cc73", "filename": "src/test/run-pass/const-enum-tuplestruct2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V0, V16(u16) }\n struct S(E, u16, u16);\n static C: S = S(E::V0, 0x600D, 0xBAD);"}, {"sha": "98e236bfccb436e91a36510947fe337d1d066298", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V1(int), V0 }\n const C: &'static [E] = &[E::V0, E::V1(0xDEADBEE)];\n static C0: E = C[0];"}, {"sha": "8eb9a425b86be6b9c8d2c5e3e8edb1d2c9621fa2", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V1(int), V0 }\n static C: &'static [E] = &[E::V0, E::V1(0xDEADBEE), E::V0];\n "}, {"sha": "64940015802786fcec169c9648a61774aea78a12", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum E { V1(int), V0 }\n static C: [E; 3] = [E::V0, E::V1(0xDEADBEE), E::V0];\n "}, {"sha": "82d9bb2b1e1149266add7e27ea304297ce477d61", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Check that constant expressions can be used for declaring the\n // type of a fixed length vector.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n \n     const FOO: uint = 2;"}, {"sha": "29eefd20502673af2f69ec92afec75c225d708b5", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Check that constant expressions can be used in vec repeat syntax.\n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n \n     const FOO: uint = 2;"}, {"sha": "ff829711a4c6c701aeab1f9490f006e4fe868580", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n extern fn foopy() {}\n \n static f: extern \"C\" fn() = foopy;"}, {"sha": "972d4ca607b387ec0a1f6b909ad55cfb2a07227f", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn foo() -> int {\n     return 0xca7f000d;\n }"}, {"sha": "44222609e13fc3fa73548c5b4e1f50d2a2eb5af5", "filename": "src/test/run-pass/const-negative.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-negative.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #358\n \n+// pretty-expanded FIXME #23616\n+\n static toplevel_mod: int = -1;\n \n pub fn main() {"}, {"sha": "fcad89470d7c52edfd16270bc88d53470ad0e17b", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum Foo {\n     Bar,\n     Baz,"}, {"sha": "88be3c235881bc7ad292547823c01c143744ce06", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Copy)]\n enum Foo {\n     Bar = 0xDEADBEE"}, {"sha": "8af169dfce989669fcd00a959259e8e0020edbe2", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n type Big = [u64; 8];\n struct Pair<'a> { a: int, b: &'a Big }\n const x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);"}, {"sha": "c5ff134ff0e9bb6dcf23913ef4757efafb4d1148", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::{str, string};\n \n const A: [u8; 2] = ['h' as u8, 'i' as u8];"}, {"sha": "4f38a6431b8eaa00adbdd51b0f657df00b749054", "filename": "src/test/run-pass/const-struct-offsets.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n enum Foo {\n     IntVal(i32),\n     Int64Val(i64)"}, {"sha": "55cbae6b1d2c2c73f9ba547e50bade38144eb809", "filename": "src/test/run-pass/const-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct Bar(int, int);\n \n static X: Bar = Bar(1, 2);"}, {"sha": "320f41006e569807c8ff2f2c0c6bd73334c5ada4", "filename": "src/test/run-pass/const-unit-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n struct Foo;\n \n static X: Foo = Foo;"}, {"sha": "f16fbac00797a78efcdc3d6b3b8fef3ab72e542a", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n /*!\n  * Try to double-check that static fns have the right size (with or\n  * without dummy env ptr, as appropriate) by iterating a size-2 array."}, {"sha": "3485e23dd0dd5c626559cdc3456cc38035977977", "filename": "src/test/run-pass/const-vec-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn f(_: &[int]) {}\n \n pub fn main() {"}, {"sha": "c66030c6045f401ccb03fbd84b37383f6f2b5c66", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n const FOO: int = 10;\n const BAR: int = 3;\n "}, {"sha": "6dfcc3b2a165acfe96065b63123facc89009091e", "filename": "src/test/run-pass/copy-out-of-array-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n //\n // (Compare with compile-fail/move-out-of-array-1.rs)\n \n+// pretty-expanded FIXME #23616\n+\n struct C { _x: u8 }\n \n impl Copy for C { }"}, {"sha": "ede78ff803d00d277d41800680539e3cd9ece161", "filename": "src/test/run-pass/crate-leading-sep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn main() {\n     use ::std::mem;\n     mem::drop(2_usize);"}, {"sha": "43507f0cb00bd475f22978c4401168c169b6ab25", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "c794e45c84522a6e0ae4c432bbb83393488fefde", "filename": "src/test/run-pass/crate-name-attr-used.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // compile-flags:--crate-name crate-name-attr-used -F unused-attributes\n \n+// pretty-expanded FIXME #23616\n+\n #![crate_name = \"crate-name-attr-used\"]\n \n fn main() {}"}, {"sha": "a85541bb8ba5ff206f79486e707a56517975c86d", "filename": "src/test/run-pass/cross-crate-const-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cci_const.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate cci_const;\n \n pub fn main() {"}, {"sha": "986108c5d8fa666c23b2f70702ababb2a5afc855", "filename": "src/test/run-pass/cross-crate-newtype-struct-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:newtype_struct_xc.rs\n \n+// pretty-expanded FIXME #23616\n+\n extern crate newtype_struct_xc;\n \n pub fn main() {"}, {"sha": "94e4665bb86abf8cbe59ad9b76580c6b9513b4f7", "filename": "src/test/run-pass/cycle-generic-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcycle-generic-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcycle-generic-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-generic-bound.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Regression test for #15477. This test just needs to compile.\n \n+// pretty-expanded FIXME #23616\n+\n use std::marker::PhantomFn;\n \n trait Chromosome<X: Chromosome<i32>> : PhantomFn<(Self,X)> {"}, {"sha": "50bc9e971fbe587ade419de60ad3a7b6cbbdf8af", "filename": "src/test/run-pass/cycle-trait-type-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcycle-trait-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fcycle-trait-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-trait-type-trait.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Test a case where a supertrait references a type that references\n // the original trait. This poses no problem at the moment.\n \n+// pretty-expanded FIXME #23616\n+\n trait Chromosome: Get<Struct<i32>> {\n }\n "}, {"sha": "801ca0e64f013c71e2ea3d032f353a10c38fcb97", "filename": "src/test/run-pass/dead-code-leading-underscore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdead-code-leading-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdead-code-leading-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-leading-underscore.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![deny(dead_code)]\n \n static _X: uint = 0;"}, {"sha": "d691703f437939691d2e156831ca18ac0ddcea2b", "filename": "src/test/run-pass/deep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdeep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdeep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n fn f(x: int) -> int {\n     if x == 1 { return 1; } else { let y: int = 1 + f(x - 1); return y; }\n }"}, {"sha": "d19debce00fe176475ae47f9a419f021cc07d2c9", "filename": "src/test/run-pass/default-method-parsing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n trait Foo {\n     fn m(&self, _:int) { }\n }"}, {"sha": "ecbfcff812fc1be52e13379fa6022522c7504365", "filename": "src/test/run-pass/deprecated-no-split-stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdeprecated-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdeprecated-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeprecated-no-split-stack.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n //~ WARNING no_split_stack is a deprecated synonym for no_stack_check\n+// pretty-expanded FIXME #23616\n+\n #[no_split_stack]\n fn main() {\n }"}, {"sha": "b3c13e165dbf22a9d2457963cee2e3da33a5c297", "filename": "src/test/run-pass/deref-mut-on-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test that `&mut T` implements `DerefMut<T>`\n \n+// pretty-expanded FIXME #23616\n+\n use std::ops::{Deref, DerefMut};\n \n fn inc<T: Deref<Target=int> + DerefMut>(mut t: T) {"}, {"sha": "4519a8311b009b6e77a2f50372befd8675e44578", "filename": "src/test/run-pass/deref-on-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Test that `&T` and `&mut T` implement `Deref<T>`\n \n+// pretty-expanded FIXME #23616\n+\n use std::ops::Deref;\n \n fn deref<U:Copy,T:Deref<Target=U>>(t: T) -> U {"}, {"sha": "761b29258f2af0a995201462ed7dd71aef753b9e", "filename": "src/test/run-pass/deref-rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-rc.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::rc::Rc;\n \n fn main() {"}, {"sha": "4249801b0bc6ad12ab52d5bdeb01483b65963076", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "e0bbd0b2b041e447855bc4524f0c4ef072f4cdee", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Copy)]\n struct Test;\n "}, {"sha": "22daffc48699ade29693526a5287ebf58f6afae6", "filename": "src/test/run-pass/deriving-clone-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Clone)]\n enum E {\n     A,"}, {"sha": "a4fd77f8993bb73240fb7ff3562d18d93782805f", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Clone)]\n enum E<T,U> {\n     A(T),"}, {"sha": "d80f14c36945b23bc02fcf0dc78fbde03ae498dc", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Clone)]\n struct S<T> {\n     foo: (),"}, {"sha": "f2f2ec3de76008d1378fcc5f41e046594452c87f", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Clone)]\n struct S<T>(T, ());\n "}, {"sha": "4e0eb37abc518588f27ecf990afd127bd1594f86", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Clone)]\n struct S {\n     _int: int,"}, {"sha": "8be029ba2accc196c08addcdf4c26a2f2b6baf31", "filename": "src/test/run-pass/deriving-clone-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Clone)]\n struct S((), ());\n "}, {"sha": "07ad8f706eb5ce0d29bd3b43afe2b06d241e1220", "filename": "src/test/run-pass/deriving-cmp-generic-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum E<T> {\n     E0,"}, {"sha": "5f7d184f1949d584642c447fccca694d8db68799", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum ES<T> {\n     ES1 { x: T },"}, {"sha": "ea0017380b275991f13a9d67762b41075f2cb83a", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S<T> {\n     x: T,"}, {"sha": "702071676b90ee88740f4babbf4e0224fbe5e996", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // no-pretty-expanded FIXME #15189\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct TS<T>(T,T);\n "}, {"sha": "65bf040b387e68ab7b2692a91cf6d06126197cb2", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -12,6 +12,8 @@\n // where possible, by having a type that panics when compared as the\n // second element, so this passes iff the instances shortcircuit.\n \n+// pretty-expanded FIXME #23616\n+\n use std::cmp::Ordering;\n \n pub struct FailCmp;"}, {"sha": "574a620ef0290e670aa740c0bb8f6c526fe68684", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "17f4d93e24c1712ee207de428fffe1721a97d7fb", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(old_orphan_check, rustc_private)]"}, {"sha": "2c8efc257745014c41e7f17ab14337cbc4ced844", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(old_orphan_check, rustc_private)]\n \n extern crate serialize;"}, {"sha": "925a5875171ce6fb5d4b6d70c5ee4fba0407f033", "filename": "src/test/run-pass/deriving-enum-single-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n pub type task_id = int;\n \n #[derive(PartialEq)]"}, {"sha": "216a4c9cf0033d581db5482e07848712fead5577", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(hash)]\n \n use std::hash::{Hash, SipHasher};"}, {"sha": "b23075e6d0af43035e07d90f7c2c28e260a01011", "filename": "src/test/run-pass/deriving-in-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n macro_rules! define_vec {\n     () => (\n         mod foo {"}, {"sha": "87df9a12505daf3255a120a3013776eb0cafebb1", "filename": "src/test/run-pass/deriving-meta-multiple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::hash::{Hash, SipHasher};\n \n // testing multiple separate deriving attributes"}, {"sha": "2d25cdf71b0c19dd182446e5cd34aebb49d6a69c", "filename": "src/test/run-pass/deriving-meta.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n use std::hash::{Hash, SipHasher};\n \n #[derive(PartialEq, Clone, Hash)]"}, {"sha": "61f266f6d81ad79dcd4f4b08172e2ba0af6feb8f", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![feature(rand)]\n \n use std::rand;"}, {"sha": "c0921070bc2ba87c1429a5d593f97394805d6eff", "filename": "src/test/run-pass/deriving-via-extension-hash-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-enum.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Hash)]\n enum Foo {\n     Bar(int, char),"}, {"sha": "791d3dd9549573c624ebcc470aa1b30378244a02", "filename": "src/test/run-pass/deriving-via-extension-hash-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-struct.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #[derive(Hash)]\n struct Foo {\n     x: int,"}, {"sha": "22853c5ad806e550f87ce1c89d9974fb38d16fe3", "filename": "src/test/run-pass/destructure-array-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n // Ensure that we can do a destructuring bind of a fixed-size array,\n // even when the element type has a destructor.\n \n+// pretty-expanded FIXME #23616\n+\n struct D { x: u8 }\n \n impl Drop for D { fn drop(&mut self) { } }"}, {"sha": "45b743383b110c3091e8fa40b1e3288eb5e9f594", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -10,6 +10,8 @@\n \n // Just testing that panic!() type checks in statement or expr\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unreachable_code)]\n \n fn f() {"}, {"sha": "f838f3554d5a79f1abf8ee23eeab060163eef942", "filename": "src/test/run-pass/div-mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiv-mod.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n pub fn main() {\n     let x: int = 15;\n     let y: int = 5;"}, {"sha": "4ee08edb52debb0def59468fca44018e2cbcdadd", "filename": "src/test/run-pass/double-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-ref.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n fn check_expr() {\n     let _:         & uint =     &1;\n     let _:       & & uint =    &&1;"}, {"sha": "a52dd133e075043ea4822c5345c9822016fed3fe", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// pretty-expanded FIXME #23616\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "f0b5d78707a831130d1a259ec797d137175ec0fa", "filename": "src/test/run-pass/drop-on-ret.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs?ref=8c93a79e387f5197e8b8fe73b3d87d2b101b7c4a", "patch": "@@ -11,6 +11,8 @@\n \n \n \n+// pretty-expanded FIXME #23616\n+\n fn f() -> int {\n     if true {\n         let _s: String = \"should not leak\".to_string();"}]}