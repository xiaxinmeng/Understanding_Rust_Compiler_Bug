{"sha": "49d494c03307cff75057a856eadc5ebb5ff1ea9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDQ5NGMwMzMwN2NmZjc1MDU3YTg1NmVhZGM1ZWJiNWZmMWVhOWQ=", "commit": {"author": {"name": "G\u00fcnter Z\u00f6chbauer", "email": "guenter@gzoechbauer.com", "date": "2020-04-26T13:44:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-26T13:44:05Z"}, "message": "Clarify rust-analyzer binary  install", "tree": {"sha": "32d96e33fc5d0c7def57456885b4905b4ee79427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32d96e33fc5d0c7def57456885b4905b4ee79427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d494c03307cff75057a856eadc5ebb5ff1ea9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepZAlCRBK7hj4Ov3rIwAAdHIIACarej5B1EKEyul1VL2Nx+Eb\nxbasykNHluP+AFECGb63WHfAoXhw6tK5M6i0ayi5Mw+GuyfWwlRj6Y0kCUC52KMW\nk4QiEgoJcu6rU3fFKRq9KKgznXtJOX05bIm+p9JGF5W4JmO4ewToZOTfDlpiu2+m\nVW88qLz1eVCttpLx74lgjLBG7f+7FDGFV9SzosyJ86C1GHRAgrDsVPvuQGb06mrH\nmCV/YQNJQhJWqqUuF6VUNh18ud/uN+HUODAtOTfl7L0O1iQAr/HEAxyntvqb2fVd\nHaP3XvUuAPcbK3+QyyzdkaWMZf71sLGJHXX+3GVDpki4VAhLN9x1rsP7P4PaehI=\n=2acE\n-----END PGP SIGNATURE-----\n", "payload": "tree 32d96e33fc5d0c7def57456885b4905b4ee79427\nparent ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f\nauthor G\u00fcnter Z\u00f6chbauer <guenter@gzoechbauer.com> 1587908645 +0200\ncommitter GitHub <noreply@github.com> 1587908645 +0200\n\nClarify rust-analyzer binary  install"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d494c03307cff75057a856eadc5ebb5ff1ea9d", "html_url": "https://github.com/rust-lang/rust/commit/49d494c03307cff75057a856eadc5ebb5ff1ea9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d494c03307cff75057a856eadc5ebb5ff1ea9d/comments", "author": {"login": "zoechi", "id": 405837, "node_id": "MDQ6VXNlcjQwNTgzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/405837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zoechi", "html_url": "https://github.com/zoechi", "followers_url": "https://api.github.com/users/zoechi/followers", "following_url": "https://api.github.com/users/zoechi/following{/other_user}", "gists_url": "https://api.github.com/users/zoechi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zoechi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zoechi/subscriptions", "organizations_url": "https://api.github.com/users/zoechi/orgs", "repos_url": "https://api.github.com/users/zoechi/repos", "events_url": "https://api.github.com/users/zoechi/events{/privacy}", "received_events_url": "https://api.github.com/users/zoechi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f", "html_url": "https://github.com/rust-lang/rust/commit/ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "5e4ce3055be1618d1b080b76785ceee52ccdb80b", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49d494c03307cff75057a856eadc5ebb5ff1ea9d/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/49d494c03307cff75057a856eadc5ebb5ff1ea9d/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=49d494c03307cff75057a856eadc5ebb5ff1ea9d", "patch": "@@ -23,7 +23,7 @@ https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/readme.adoc\n \n == Installation\n \n-In theory, one should be able to just install the server binary and have it automatically work with any editor.\n+In theory, one should be able to just install the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>> and have it automatically work with any editor.\n We are not there yet, so some editor specific setup is required.\n \n Additionally, rust-analyzer needs the sources of the standard library.\n@@ -94,7 +94,8 @@ $ git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyz\n $ cargo xtask install\n ----\n \n-You'll need Cargo, nodejs and npm for this.\n+You'll need Cargo, xtask, nodejs and npm for this.\n+Cargo-xtask can be found at https://github.com/matklad/cargo-xtask\n \n Note that installing via `xtask install` does not work for VS Code Remote, instead you'll need to install the `.vsix` manually.\n \n@@ -108,18 +109,29 @@ Here are some useful self-diagnostic commands:\n * To log all LSP requests, add `\"rust-analyzer.trace.server\": \"verbose\"` to the settings and look for `Server Trace` in the panel.\n * To enable client-side logging, add `\"rust-analyzer.trace.extension\": true` to the settings and open the `Console` tab of VS Code developer tools.\n \n-=== Language Server Binary\n+=== rust-analyzer Language Server Binary\n \n Other editors generally require the `rust-analyzer` binary to be in `$PATH`.\n You can download the pre-built binary from the https://github.com/rust-analyzer/rust-analyzer/releases[releases] page. Typically, you then need to rename the binary for your platform, e.g. `rust-analyzer-mac` if you're on Mac OS, to `rust-analzyer` and make it executable in addition to moving it into a directory in your `$PATH`.\n \n+On Linux to install the `rust-analyzer` binary into `~/.cargo/bin` which usually is already added to `$PATH`, this commands could be used\n+\n+[source,bash]\n+----\n+$ curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-linux -o ~/.cargo/bin/rust-analyzer\n+$ chmod +x ~/.cargo/bin/rust-analyzer\n+----\n+\n Alternatively, you can install it from source using the following command:\n \n [source,bash]\n ----\n+$ git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyzer\n $ cargo xtask install --server\n ----\n \n+Cargo-xtask can be found at https://github.com/matklad/cargo-xtask\n+\n If your editor can't find the binary even though the binary is on your `$PATH`, the likely explanation is that it doesn't see the same `$PATH` as the shell, see https://github.com/rust-analyzer/rust-analyzer/issues/1811[this issue]. On Unix, running the editor from a shell or changing the `.desktop` file to set the environment should help.\n \n ==== Arch Linux\n@@ -139,15 +151,19 @@ $ yay -S rust-analyzer-bin\n \n === Emacs\n \n-Emacs support is maintained https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-rust.el[upstream].\n+Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n \n-1. Install the most recent version of `emacs-lsp` package by following the instructions https://github.com/emacs-lsp/lsp-mode[here].\n+Emacs support is maintained as part of the https://github.com/emacs-lsp/lsp-mode[Emacs-LSP] package in https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-rust.el[lsp-rust.el].\n+\n+1. Install the most recent version of `emacs-lsp` package by following the https://github.com/emacs-lsp/lsp-mode[Emacs-LSP instructions].\n 2. Set `lsp-rust-server` to `'rust-analyzer`.\n 3. Run `lsp` in a Rust buffer.\n 4. (Optionally) bind commands like `lsp-rust-analyzer-join-lines`, `lsp-extend-selection` and `lsp-rust-analyzer-expand-macro` to keys.\n \n === Vim\n \n+Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n+\n The are several LSP client implementations for vim:\n \n ==== coc-rust-analyzer\n@@ -205,7 +221,7 @@ Once `neovim/nvim-lsp` is installed, use `+lua require'nvim_lsp'.rust_analyzer.s\n \n === Sublime Text 3\n \n-Prerequisites: You have installed the <<language-server-binary,`rust-analyzer` binary>>.\n+Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n \n You also need the `LSP` package. To install it:\n \n@@ -218,7 +234,7 @@ Finally, with your Rust project open, in the command palette, run `LSP: Enable L\n \n If it worked, you should see \"rust-analzyer, Line X, Column Y\" on the left side of the bottom bar, and after waiting a bit, functionality like tooltips on hovering over variables should become available.\n \n-If you get an error saying `No such file or directory: 'rust-analyzer'`, see the <<language-server-binary,section on installing the language server binary>>.\n+If you get an error saying `No such file or directory: 'rust-analyzer'`, see the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>> section on installing the language server binary.\n \n == Usage\n "}]}